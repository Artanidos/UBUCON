/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuickWidgets.h"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQuickWidgets/qquickwidget.sip"
#include <qquickwidget.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"

#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 59 "sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 39 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 93 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 99 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 108 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 129 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 135 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 141 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 144 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 156 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 159 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 162 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 168 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 171 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 177 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 180 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 198 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 201 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 207 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 213 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 219 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 222 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 225 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 249 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 252 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 258 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQuickWidgets/sipQtQuickWidgetspart1.cpp"


class sipQQuickWidget : public  ::QQuickWidget
{
public:
    sipQQuickWidget( ::QWidget*);
    sipQQuickWidget( ::QQmlEngine*, ::QWidget*);
    sipQQuickWidget(const  ::QUrl&, ::QWidget*);
    virtual ~sipQQuickWidget();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickWidget(const sipQQuickWidget &);
    sipQQuickWidget &operator = (const sipQQuickWidget &);

    char sipPyMethods[46];
};

sipQQuickWidget::sipQQuickWidget( ::QWidget*a0):  ::QQuickWidget(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWidget::sipQQuickWidget( ::QQmlEngine*a0, ::QWidget*a1):  ::QQuickWidget(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWidget::sipQQuickWidget(const  ::QUrl& a0, ::QWidget*a1):  ::QQuickWidget(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWidget::~sipQQuickWidget()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQuickWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuickWidgets_qt_metaobject(sipPySelf,sipType_QQuickWidget);

    return  ::QQuickWidget::metaObject();
}

int sipQQuickWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQuickWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuickWidgets_qt_metacall(sipPySelf,sipType_QQuickWidget,_c,_id,_a);

    return _id;
}

void *sipQQuickWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuickWidgets_qt_metacast(sipPySelf, sipType_QQuickWidget, _clname, &sipCpp) ? sipCpp :  ::QQuickWidget::qt_metacast(_clname));
}

void sipQQuickWidget::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQuickWidget::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuickWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQuickWidget::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQuickWidgets_35(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::customEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuickWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::childEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQuickWidgets_34(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQuickWidgets_33(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickWidget::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQuickWidget::eventFilter(a0,a1);

    extern bool sipVH_QtQuickWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQuickWidgets_32(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickWidget::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQuickWidget::event(a0);

    extern bool sipVH_QtQuickWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQuickWidgets_31(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQQuickWidget::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QQuickWidget::metric(a0);

    extern int sipVH_QtQuickWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtQuickWidgets_30(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQQuickWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_paintEngine);

    if (!sipMeth)
        return  ::QQuickWidget::paintEngine();

    extern  ::QPaintEngine* sipVH_QtQuickWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuickWidgets_29(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQQuickWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_devType);

    if (!sipMeth)
        return  ::QQuickWidget::devType();

    extern int sipVH_QtQuickWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuickWidgets_28(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_setVisible);

    if (!sipMeth)
    {
         ::QQuickWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtQuickWidgets_27(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQQuickWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_sizeHint);

    if (!sipMeth)
        return  ::QQuickWidget::sizeHint();

    extern  ::QSize sipVH_QtQuickWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuickWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQQuickWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QQuickWidget::minimumSizeHint();

    extern  ::QSize sipVH_QtQuickWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuickWidgets_26(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQQuickWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QQuickWidget::heightForWidth(a0);

    extern int sipVH_QtQuickWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtQuickWidgets_25(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuickWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuickWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuickWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtQuickWidgets_24(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtQuickWidgets_23(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuickWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtQuickWidgets_22(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuickWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtQuickWidgets_21(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::enterEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuickWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuickWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtQuickWidgets_20(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtQuickWidgets_19(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtQuickWidgets_18(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtQuickWidgets_17(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtQuickWidgets_16(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtQuickWidgets_15(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtQuickWidgets_14(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtQuickWidgets_13(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtQuickWidgets_12(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtQuickWidgets_11(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtQuickWidgets_10(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_showEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtQuickWidgets_9(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtQuickWidgets_8(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::changeEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQuickWidgets_7(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQuickWidget::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QQuickWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtQuickWidgets_6(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQQuickWidget::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,SIP_NULLPTR,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QQuickWidget::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtQuickWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtQuickWidgets_5(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QQuickWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtQuickWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtQuickWidgets_4(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQuickWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,SIP_NULLPTR,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QQuickWidget::hasHeightForWidth();

    extern bool sipVH_QtQuickWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuickWidgets_3(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQQuickWidget::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,SIP_NULLPTR,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QQuickWidget::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtQuickWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtQuickWidgets_2(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQQuickWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,SIP_NULLPTR,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QQuickWidget::sharedPainter();

    extern  ::QPainter* sipVH_QtQuickWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuickWidgets_1(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQuickWidget::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,SIP_NULLPTR,sipName_initPainter);

    if (!sipMeth)
    {
         ::QQuickWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtQuickWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtQuickWidgets_0(sipGILState, sipImportedVirtErrorHandlers_QtQuickWidgets_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQuickWidget_source, "source(self) -> QUrl");

extern "C" {static PyObject *meth_QQuickWidget_source(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->source());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_source, doc_QQuickWidget_source);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_engine, "engine(self) -> QQmlEngine");

extern "C" {static PyObject *meth_QQuickWidget_engine(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QQmlEngine*sipRes;

            sipRes = sipCpp->engine();

            return sipConvertFromType(sipRes,sipType_QQmlEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_engine, doc_QQuickWidget_engine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_rootContext, "rootContext(self) -> QQmlContext");

extern "C" {static PyObject *meth_QQuickWidget_rootContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_rootContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QQmlContext*sipRes;

            sipRes = sipCpp->rootContext();

            return sipConvertFromType(sipRes,sipType_QQmlContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_rootContext, doc_QQuickWidget_rootContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_rootObject, "rootObject(self) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWidget_rootObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_rootObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QQuickItem*sipRes;

            sipRes = sipCpp->rootObject();

            return sipConvertFromType(sipRes,sipType_QQuickItem,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_rootObject, doc_QQuickWidget_rootObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_resizeMode, "resizeMode(self) -> QQuickWidget.ResizeMode");

extern "C" {static PyObject *meth_QQuickWidget_resizeMode(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_resizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QQuickWidget::ResizeMode sipRes;

            sipRes = sipCpp->resizeMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickWidget_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_resizeMode, doc_QQuickWidget_resizeMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_setResizeMode, "setResizeMode(self, QQuickWidget.ResizeMode)");

extern "C" {static PyObject *meth_QQuickWidget_setResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_setResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQuickWidget::ResizeMode a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QQuickWidget_ResizeMode, &a0))
        {
            sipCpp->setResizeMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_setResizeMode, doc_QQuickWidget_setResizeMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_status, "status(self) -> QQuickWidget.Status");

extern "C" {static PyObject *meth_QQuickWidget_status(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QQuickWidget::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQuickWidget_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_status, doc_QQuickWidget_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_errors, "errors(self) -> List[QQmlError]");

extern "C" {static PyObject *meth_QQuickWidget_errors(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_errors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
            QList< ::QQmlError>*sipRes;

            sipRes = new QList< ::QQmlError>(sipCpp->errors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QQmlError,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_errors, doc_QQuickWidget_errors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QQuickWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QQuickWidget::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_sizeHint, doc_QQuickWidget_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_initialSize, "initialSize(self) -> QSize");

extern "C" {static PyObject *meth_QQuickWidget_initialSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_initialSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->initialSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_initialSize, doc_QQuickWidget_initialSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_setFormat, "setFormat(self, QSurfaceFormat)");

extern "C" {static PyObject *meth_QQuickWidget_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSurfaceFormat* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_setFormat, doc_QQuickWidget_setFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_format, "format(self) -> QSurfaceFormat");

extern "C" {static PyObject *meth_QQuickWidget_format(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QSurfaceFormat*sipRes;

            sipRes = new  ::QSurfaceFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_format, doc_QQuickWidget_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_setSource, "setSource(self, QUrl)");

extern "C" {static PyObject *meth_QQuickWidget_setSource(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_setSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSource(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_setSource, doc_QQuickWidget_setSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QQuickWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::resizeEvent(a0) : sipCpp->resizeEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_resizeEvent, doc_QQuickWidget_resizeEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QQuickWidget_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_timerEvent, doc_QQuickWidget_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_keyPressEvent, doc_QQuickWidget_keyPressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWidget_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_keyReleaseEvent, doc_QQuickWidget_keyReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWidget_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_mousePressEvent, doc_QQuickWidget_mousePressEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWidget_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_mouseReleaseEvent, doc_QQuickWidget_mouseReleaseEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWidget_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_mouseMoveEvent, doc_QQuickWidget_mouseMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWidget_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_mouseDoubleClickEvent, doc_QQuickWidget_mouseDoubleClickEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QQuickWidget_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::showEvent(a0) : sipCpp->showEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_showEvent, doc_QQuickWidget_showEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QQuickWidget_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QHideEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QHideEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::hideEvent(a0) : sipCpp->hideEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_hideEvent, doc_QQuickWidget_hideEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QQuickWidget_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QWheelEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::wheelEvent(a0) : sipCpp->wheelEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_wheelEvent, doc_QQuickWidget_wheelEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickWidget::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_event, doc_QQuickWidget_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWidget_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::focusInEvent(a0) : sipCpp->focusInEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_focusInEvent, doc_QQuickWidget_focusInEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWidget_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_focusOutEvent, doc_QQuickWidget_focusOutEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QQuickWidget_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_dragEnterEvent, doc_QQuickWidget_dragEnterEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QQuickWidget_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_dragMoveEvent, doc_QQuickWidget_dragMoveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QQuickWidget_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_dragLeaveEvent, doc_QQuickWidget_dragLeaveEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QQuickWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::dropEvent(a0) : sipCpp->dropEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_dropEvent, doc_QQuickWidget_dropEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QQuickWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQuickWidget::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_paintEvent, doc_QQuickWidget_paintEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_grabFramebuffer, "grabFramebuffer(self) -> QImage");

extern "C" {static PyObject *meth_QQuickWidget_grabFramebuffer(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_grabFramebuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QImage*sipRes;

            sipRes = new  ::QImage(sipCpp->grabFramebuffer());

            return sipConvertFromNewType(sipRes,sipType_QImage,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_grabFramebuffer, doc_QQuickWidget_grabFramebuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_setClearColor, "setClearColor(self, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QQuickWidget_setClearColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_setClearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWidget, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setClearColor(*a0);
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_setClearColor, doc_QQuickWidget_setClearColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_quickWindow, "quickWindow(self) -> QQuickWindow");

extern "C" {static PyObject *meth_QQuickWidget_quickWindow(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_quickWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWidget, &sipCpp))
        {
             ::QQuickWindow*sipRes;

            sipRes = sipCpp->quickWindow();

            return sipConvertFromType(sipRes,sipType_QQuickWindow,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_quickWindow, doc_QQuickWidget_quickWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQuickWidget_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QQuickWidget_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QQuickWidget_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QQuickWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QQuickWidget, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQuickWidget::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWidget, sipName_focusNextPrevChild, doc_QQuickWidget_focusNextPrevChild);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQuickWidget(void *, const sipTypeDef *);}
static void *cast_QQuickWidget(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQuickWidget *sipCpp = reinterpret_cast< ::QQuickWidget *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickWidget(void *, int);}
static void release_QQuickWidget(void *sipCppV, int)
{
     ::QQuickWidget *sipCpp = reinterpret_cast< ::QQuickWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickWidget(sipSimpleWrapper *);}
static void dealloc_QQuickWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQuickWidget *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQuickWidget(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQuickWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickWidget *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQQuickWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QQmlEngine* a0;
         ::QWidget* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8JH", sipType_QQmlEngine, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQQuickWidget(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QUrl, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQQuickWidget(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickWidget[] = {{0, 2, 1}};


static PyMethodDef methods_QQuickWidget[] = {
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QQuickWidget_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QQuickWidget_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QQuickWidget_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QQuickWidget_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_dropEvent)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QQuickWidget_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_engine)},
    {SIP_MLNAME_CAST(sipName_errors), meth_QQuickWidget_errors, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_errors)},
    {SIP_MLNAME_CAST(sipName_event), meth_QQuickWidget_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_event)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QQuickWidget_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QQuickWidget_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QQuickWidget_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_format), meth_QQuickWidget_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_format)},
    {SIP_MLNAME_CAST(sipName_grabFramebuffer), meth_QQuickWidget_grabFramebuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_grabFramebuffer)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QQuickWidget_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_hideEvent)},
    {SIP_MLNAME_CAST(sipName_initialSize), meth_QQuickWidget_initialSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_initialSize)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QQuickWidget_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QQuickWidget_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QQuickWidget_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QQuickWidget_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QQuickWidget_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QQuickWidget_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QQuickWidget_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_paintEvent)},
    {SIP_MLNAME_CAST(sipName_quickWindow), meth_QQuickWidget_quickWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_quickWindow)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QQuickWidget_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeMode), meth_QQuickWidget_resizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_resizeMode)},
    {SIP_MLNAME_CAST(sipName_rootContext), meth_QQuickWidget_rootContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_rootContext)},
    {SIP_MLNAME_CAST(sipName_rootObject), meth_QQuickWidget_rootObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_rootObject)},
    {SIP_MLNAME_CAST(sipName_setClearColor), meth_QQuickWidget_setClearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_setClearColor)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QQuickWidget_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_setFormat)},
    {SIP_MLNAME_CAST(sipName_setResizeMode), meth_QQuickWidget_setResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_setResizeMode)},
    {SIP_MLNAME_CAST(sipName_setSource), meth_QQuickWidget_setSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_setSource)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QQuickWidget_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QQuickWidget_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_sizeHint)},
    {SIP_MLNAME_CAST(sipName_source), meth_QQuickWidget_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_source)},
    {SIP_MLNAME_CAST(sipName_status), meth_QQuickWidget_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_status)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QQuickWidget_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_timerEvent)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QQuickWidget_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWidget_wheelEvent)}
};

static sipEnumMemberDef enummembers_QQuickWidget[] = {
    {sipName_Error, static_cast<int>( ::QQuickWidget::Error), 2},
    {sipName_Loading, static_cast<int>( ::QQuickWidget::Loading), 2},
    {sipName_Null, static_cast<int>( ::QQuickWidget::Null), 2},
    {sipName_Ready, static_cast<int>( ::QQuickWidget::Ready), 2},
    {sipName_SizeRootObjectToView, static_cast<int>( ::QQuickWidget::SizeRootObjectToView), 1},
    {sipName_SizeViewToRootObject, static_cast<int>( ::QQuickWidget::SizeViewToRootObject), 1},
};

PyDoc_STRVAR(doc_QQuickWidget, "\1QQuickWidget(parent: QWidget = None)\n"
"QQuickWidget(QQmlEngine, QWidget)\n"
"QQuickWidget(QUrl, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickWidget[] = {
    {"sceneGraphError(QQuickWindow::SceneGraphError,QString)", "\1sceneGraphError(self, QQuickWindow.SceneGraphError, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"statusChanged(QQuickWidget::Status)", "\1statusChanged(self, QQuickWidget.Status)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQuickWidget = {
    & ::QQuickWidget::staticMetaObject,
    0,
    signals_QQuickWidget,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQuickWidgets_QQuickWidget = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQuickWidget,
        {SIP_NULLPTR},
        &plugin_QQuickWidget
    },
    {
        sipNameNr_QQuickWidget,
        {0, 0, 1},
        36, methods_QQuickWidget,
        6, enummembers_QQuickWidget,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQuickWidget,
    -1,
    -1,
    supers_QQuickWidget,
    SIP_NULLPTR,
    init_type_QQuickWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQuickWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQuickWidget,
    cast_QQuickWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
