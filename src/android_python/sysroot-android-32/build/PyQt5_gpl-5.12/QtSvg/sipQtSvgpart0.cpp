/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSvg.h"

#line 26 "sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 95 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 47 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 1012 "sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 53 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 139 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 56 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 199 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 164 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 88 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 77 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 80 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 119 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 83 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 92 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 98 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 104 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtSvg[] = {
    'm', 'o', 'u', 's', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'C', 'a', 'c', 'h', 'e', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'F', 'r', 'a', 'm', 'e', 's', 'P', 'e', 'r', 'S', 'e', 'c', 'o', 'n', 'd', 0,
    'f', 'o', 'c', 'u', 's', 'N', 'e', 'x', 't', 'P', 'r', 'e', 'v', 'C', 'h', 'i', 'l', 'd', 0,
    'a', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 'D', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'S', 'h', 'a', 'r', 'e', 'd', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'h', 'a', 's', 'H', 'e', 'i', 'g', 'h', 't', 'F', 'o', 'r', 'W', 'i', 'd', 't', 'h', 0,
    'm', 'o', 'u', 's', 'e', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 'C', 'a', 'c', 'h', 'e', 'S', 'i', 'z', 'e', 0,
    'Q', 'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'v', 'g', 'I', 't', 'e', 'm', 0,
    's', 'c', 'e', 'n', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'c', 'o', 'l', 'l', 'i', 'd', 'e', 's', 'W', 'i', 't', 'h', 'P', 'a', 't', 'h', 0,
    'c', 'o', 'l', 'l', 'i', 'd', 'e', 's', 'W', 'i', 't', 'h', 'I', 't', 'e', 'm', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 'E', 'v', 'e', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'Q', 'u', 'e', 'r', 'y', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'f', 'r', 'a', 'm', 'e', 's', 'P', 'e', 'r', 'S', 'e', 'c', 'o', 'n', 'd', 0,
    'b', 'o', 'u', 'n', 'd', 's', 'O', 'n', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'O', 'u', 't', 'p', 'u', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'h', 'o', 'v', 'e', 'r', 'L', 'e', 'a', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'h', 'o', 'v', 'e', 'r', 'E', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 0,
    'm', 'o', 'u', 's', 'e', 'P', 'r', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'k', 'e', 'y', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'h', 'o', 'v', 'e', 'r', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'h', 'e', 'i', 'g', 'h', 't', 'F', 'o', 'r', 'W', 'i', 'd', 't', 'h', 0,
    'd', 'r', 'a', 'g', 'L', 'e', 'a', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'd', 'r', 'a', 'g', 'E', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'o', 'u', 's', 'e', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'r', 'e', 'p', 'a', 'i', 'n', 't', 'N', 'e', 'e', 'd', 'e', 'd', 0,
    'e', 'l', 'e', 'm', 'e', 'n', 't', 'E', 'x', 'i', 's', 't', 's', 0,
    'Q', 'S', 'v', 'g', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'o', 'r', 0,
    's', 'h', 'a', 'r', 'e', 'd', 'P', 'a', 'i', 'n', 't', 'e', 'r', 0,
    'd', 'r', 'a', 'g', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'k', 'e', 'y', 'P', 'r', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'f', 'o', 'c', 'u', 's', 'O', 'u', 't', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'v', 'g', 'R', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    'o', 'u', 't', 'p', 'u', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    's', 'e', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'I', 'd', 0,
    'i', 's', 'O', 'b', 's', 'c', 'u', 'r', 'e', 'd', 'B', 'y', 0,
    'f', 'o', 'c', 'u', 's', 'I', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'S', 'i', 'z', 'e', 0,
    'i', 'n', 'i', 't', 'P', 'a', 'i', 'n', 't', 'e', 'r', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'a', 'c', 't', 'i', 'o', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'E', 'v', 'e', 'n', 't', 0,
    't', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'S', 'v', 'g', 0,
    'Q', 'S', 'v', 'g', 'W', 'i', 'd', 'g', 'e', 't', 0,
    's', 'e', 't', 'V', 'i', 'e', 'w', 'B', 'o', 'x', 0,
    'e', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'l', 'e', 'a', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'c', 'e', 'n', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'i', 't', 'e', 'm', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'o', 'p', 'a', 'q', 'u', 'e', 'A', 'r', 'e', 'a', 0,
    'c', 'l', 'o', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'w', 'h', 'e', 'e', 'l', 'E', 'v', 'e', 'n', 't', 0,
    'r', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'p', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'l', 'e', 'm', 'e', 'n', 't', 'I', 'd', 0,
    'd', 'r', 'o', 'p', 'E', 'v', 'e', 'n', 't', 0,
    'h', 'i', 'd', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'h', 'o', 'w', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'a', 'n', 'i', 'm', 'a', 't', 'e', 'd', 0,
    'v', 'i', 'e', 'w', 'B', 'o', 'x', 'F', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'e', 'r', 0,
    's', 'i', 'z', 'e', 'H', 'i', 'n', 't', 0,
    's', 'e', 't', 'T', 'i', 't', 'l', 'e', 0,
    'f', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    'v', 'i', 'e', 'w', 'B', 'o', 'x', 0,
    'a', 'd', 'v', 'a', 'n', 'c', 'e', 0,
    'd', 'e', 'v', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'b', 'o', 'u', 'n', 'd', 's', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 0,
    'm', 'e', 't', 'r', 'i', 'c', 0,
    'w', 'i', 'd', 'g', 'e', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    't', 'i', 't', 'l', 'e', 0,
    'p', 'a', 'i', 'n', 't', 0,
    's', 'h', 'a', 'p', 'e', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'l', 'o', 'a', 'd', 0,
    's', 'i', 'z', 'e', 0,
    't', 'y', 'p', 'e', 0,
};

void sipVH_QtSvg_50(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, bool a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "b", a0);
}

 ::QSize sipVH_QtSvg_49(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSize, &sipRes);

    return sipRes;
}

int sipVH_QtSvg_48(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

void sipVH_QtSvg_47(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QMouseEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QMouseEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_46(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QWheelEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QWheelEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_45(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPaintEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QPaintEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_44(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QMoveEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QMoveEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_43(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QResizeEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QResizeEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_42(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QCloseEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QCloseEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_41(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QContextMenuEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QContextMenuEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_40(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTabletEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTabletEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_39(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QActionEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QActionEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_38(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDragEnterEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QDragEnterEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_37(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDragMoveEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QDragMoveEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_36(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDragLeaveEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QDragLeaveEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_35(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QDropEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QDropEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_34(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QShowEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QShowEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_33(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QHideEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QHideEvent, SIP_NULLPTR);
}

bool sipVH_QtSvg_32(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, bool a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "b", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSvg_31(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSvg_30(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QByteArray& a0,void*a1,long*a2)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NV", new  ::QByteArray(a0), sipType_QByteArray, SIP_NULLPTR, a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bl)", &sipRes, a2);

    return sipRes;
}

 ::QPainter* sipVH_QtSvg_29(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QPainter* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QPainter, &sipRes);

    return sipRes;
}

void sipVH_QtSvg_28(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPainter*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QPainter, SIP_NULLPTR);
}

 ::QPaintEngine* sipVH_QtSvg_27(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QPaintEngine* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QPaintEngine, &sipRes);

    return sipRes;
}

int sipVH_QtSvg_26(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPaintDevice::PaintDeviceMetric a0)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "F", a0, sipType_QPaintDevice_PaintDeviceMetric);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

void sipVH_QtSvg_25(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMetaMethod& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QMetaMethod(a0), sipType_QMetaMethod, SIP_NULLPTR);
}

void sipVH_QtSvg_24(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_23(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QChildEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QChildEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_22(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTimerEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTimerEvent, SIP_NULLPTR);
}

bool sipVH_QtSvg_21(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", a0, sipType_QObject, SIP_NULLPTR, a1, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtSvg_20(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QGraphicsSceneWheelEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QGraphicsSceneWheelEvent, SIP_NULLPTR);
}

bool sipVH_QtSvg_19(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QGraphicsItem*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", a0, sipType_QGraphicsItem, SIP_NULLPTR, a1, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSvg_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtSvg_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QGraphicsSceneMouseEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QGraphicsSceneMouseEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QKeyEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QKeyEvent, SIP_NULLPTR);
}

 ::QVariant sipVH_QtSvg_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QGraphicsItem::GraphicsItemChange a0,const  ::QVariant& a1)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "FN", a0, sipType_QGraphicsItem_GraphicsItemChange, new  ::QVariant(a1), sipType_QVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

 ::QVariant sipVH_QtSvg_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::Qt::InputMethodQuery a0)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "F", a0, sipType_Qt_InputMethodQuery);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

void sipVH_QtSvg_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QInputMethodEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QInputMethodEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QGraphicsSceneHoverEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QGraphicsSceneHoverEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QFocusEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QFocusEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QGraphicsSceneDragDropEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QGraphicsSceneDragDropEvent, SIP_NULLPTR);
}

void sipVH_QtSvg_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QGraphicsSceneContextMenuEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QGraphicsSceneContextMenuEvent, SIP_NULLPTR);
}

int sipVH_QtSvg_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

void sipVH_QtSvg_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QPainter*a0,const  ::QStyleOptionGraphicsItem*a1, ::QWidget*a2)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DDD", a0, sipType_QPainter, SIP_NULLPTR, const_cast< ::QStyleOptionGraphicsItem *>(a1), sipType_QStyleOptionGraphicsItem, SIP_NULLPTR, a2, sipType_QWidget, SIP_NULLPTR);
}

bool sipVH_QtSvg_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QGraphicsItem*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", const_cast< ::QGraphicsItem *>(a0), sipType_QGraphicsItem, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSvg_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPainterPath& a0, ::Qt::ItemSelectionMode a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NF", new  ::QPainterPath(a0), sipType_QPainterPath, SIP_NULLPTR, a1, sipType_Qt_ItemSelectionMode);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSvg_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QGraphicsItem*a0, ::Qt::ItemSelectionMode a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DF", const_cast< ::QGraphicsItem *>(a0), sipType_QGraphicsItem, SIP_NULLPTR, a1, sipType_Qt_ItemSelectionMode);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSvg_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QPointF& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QPointF(a0), sipType_QPointF, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QPainterPath sipVH_QtSvg_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QPainterPath sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QPainterPath, &sipRes);

    return sipRes;
}

 ::QRectF sipVH_QtSvg_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QRectF sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QRectF, &sipRes);

    return sipRes;
}

void sipVH_QtSvg_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "i", a0);
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QGraphicsSvgItem(void **);}
static const sipTypeDef *sipSubClass_QGraphicsSvgItem(void **sipCppRet)
{
     ::QGraphicsItem *sipCpp = reinterpret_cast< ::QGraphicsItem *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtSvg/qgraphicssvgitem.sip"
    if (sipCpp->type() == 13)
    {
        // We need to explicitly cast because of the multiple inheritance.
        *sipCppRet = static_cast<QGraphicsSvgItem *>(sipCpp);
        sipType = sipType_QGraphicsSvgItem;
    }
    else
        sipType = 0;
#line 630 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QSvgRenderer(void **);}
static const sipTypeDef *sipSubClass_QSvgRenderer(void **sipCppRet)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtSvg/qsvgrenderer.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QSvgRenderer, &sipType_QSvgRenderer, -1, 1},
        {sipName_QSvgWidget, &sipType_QSvgWidget, -1, 2},
        {sipName_QGraphicsSvgItem, &sipType_QGraphicsSvgItem, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 671 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"

    return sipType;
}


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_QtSvg[] = {
    &sipTypeDef_QtSvg_QGraphicsSvgItem.ctd_base,
    &sipTypeDef_QtSvg_QSvgGenerator.ctd_base,
    &sipTypeDef_QtSvg_QSvgRenderer.ctd_base,
    &sipTypeDef_QtSvg_QSvgWidget.ctd_base,
};


/* This defines the types that this module needs to import from QtCore. */
sipImportedTypeDef sipImportedTypes_QtSvg_QtCore[] = {
    {"QByteArray"},
    {"QChildEvent"},
    {"QEvent"},
    {"QIODevice"},
    {"QMetaMethod"},
    {"QObject"},
    {"QPointF"},
    {"QRect"},
    {"QRectF"},
    {"QSize"},
    {"QString"},
    {"QTimerEvent"},
    {"QVariant"},
    {"QXmlStreamReader"},
    {"Qt::InputMethodQuery"},
    {"Qt::ItemSelectionMode"},
    {SIP_NULLPTR}
};


/*
 * This defines the virtual error handlers that this module needs to import
 * from QtCore.
 */
sipImportedVirtErrorHandlerDef sipImportedVirtErrorHandlers_QtSvg_QtCore[] = {
    {"PyQt5"},
    {SIP_NULLPTR}
};


/* This defines the types that this module needs to import from QtGui. */
sipImportedTypeDef sipImportedTypes_QtSvg_QtGui[] = {
    {"QActionEvent"},
    {"QCloseEvent"},
    {"QContextMenuEvent"},
    {"QDragEnterEvent"},
    {"QDragLeaveEvent"},
    {"QDragMoveEvent"},
    {"QDropEvent"},
    {"QFocusEvent"},
    {"QHideEvent"},
    {"QInputMethodEvent"},
    {"QKeyEvent"},
    {"QMouseEvent"},
    {"QMoveEvent"},
    {"QPaintDevice"},
    {"QPaintDevice::PaintDeviceMetric"},
    {"QPaintEngine"},
    {"QPaintEvent"},
    {"QPainter"},
    {"QPainterPath"},
    {"QResizeEvent"},
    {"QShowEvent"},
    {"QTabletEvent"},
    {"QWheelEvent"},
    {SIP_NULLPTR}
};


/* This defines the types that this module needs to import from QtWidgets. */
sipImportedTypeDef sipImportedTypes_QtSvg_QtWidgets[] = {
    {"QGraphicsItem"},
    {"QGraphicsItem::GraphicsItemChange"},
    {"QGraphicsObject"},
    {"QGraphicsSceneContextMenuEvent"},
    {"QGraphicsSceneDragDropEvent"},
    {"QGraphicsSceneHoverEvent"},
    {"QGraphicsSceneMouseEvent"},
    {"QGraphicsSceneWheelEvent"},
    {"QStyleOptionGraphicsItem"},
    {"QWidget"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", sipImportedTypes_QtSvg_QtCore, sipImportedVirtErrorHandlers_QtSvg_QtCore, SIP_NULLPTR},
    {"PyQt5.QtGui", sipImportedTypes_QtSvg_QtGui, SIP_NULLPTR, SIP_NULLPTR},
    {"PyQt5.QtWidgets", sipImportedTypes_QtSvg_QtWidgets, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QGraphicsSvgItem, {0, 2, 0}, SIP_NULLPTR},
    {sipSubClass_QSvgRenderer, {5, 0, 0}, SIP_NULLPTR},
    {SIP_NULLPTR, {0, 0, 0}, SIP_NULLPTR}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtSvg = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtSvg,
    0,
    sipStrings_QtSvg,
    importsTable,
    SIP_NULLPTR,
    4,
    sipExportedTypes_QtSvg,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    convertorsTable,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtSvg;

sip_qt_metaobject_func sip_QtSvg_qt_metaobject;
sip_qt_metacall_func sip_QtSvg_qt_metacall;
sip_qt_metacast_func sip_QtSvg_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtSvg
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtSvg
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtSvg",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtSvg, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtSvg), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("PyQt5.sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("PyQt5.sip"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtSvg = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "PyQt5.sip._C_API"));
#else
    sipAPI_QtSvg = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtSvg == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtSvg,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_QtSvg_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtSvg_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtSvg_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtSvg_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtSvg,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    SIP_MODULE_RETURN(sipModule);
}

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtSvg/qsvgwidget.sip"
#include <qsvgwidget.h>
#line 940 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"

#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 944 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 947 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 389 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 950 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 953 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtSvg/qsvgrenderer.sip"
#include <qsvgrenderer.h>
#line 959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 1001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 1004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 1007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 1010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 28 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 1013 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 1016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 1019 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 1022 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 1025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 500 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1028 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 1031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 462 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1034 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 451 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1037 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1040 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 610 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1043 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1046 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 599 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1049 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 666 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1052 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 296 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1055 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 473 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1058 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 429 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1061 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 416 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1064 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1067 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 375 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1070 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1073 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 253 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1076 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 205 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 1079 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 1082 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1085 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 1088 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 1091 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 1094 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 1097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 1100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 1103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 1106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 1109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 1112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 1115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 1118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 1121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 1124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 1133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 1136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 1139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 1142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 1145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"


class sipQSvgWidget : public  ::QSvgWidget
{
public:
    sipQSvgWidget( ::QWidget*);
    sipQSvgWidget(const  ::QString&, ::QWidget*);
    virtual ~sipQSvgWidget();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int metric( ::QPaintDevice::PaintDeviceMetric) const SIP_OVERRIDE;
     ::QPaintEngine* paintEngine() const SIP_OVERRIDE;
    int devType() const SIP_OVERRIDE;
    void setVisible(bool) SIP_OVERRIDE;
     ::QSize sizeHint() const SIP_OVERRIDE;
     ::QSize minimumSizeHint() const SIP_OVERRIDE;
    int heightForWidth(int) const SIP_OVERRIDE;
    void mousePressEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseReleaseEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseDoubleClickEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void mouseMoveEvent( ::QMouseEvent*) SIP_OVERRIDE;
    void wheelEvent( ::QWheelEvent*) SIP_OVERRIDE;
    void keyPressEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void keyReleaseEvent( ::QKeyEvent*) SIP_OVERRIDE;
    void focusInEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void focusOutEvent( ::QFocusEvent*) SIP_OVERRIDE;
    void enterEvent( ::QEvent*) SIP_OVERRIDE;
    void leaveEvent( ::QEvent*) SIP_OVERRIDE;
    void paintEvent( ::QPaintEvent*) SIP_OVERRIDE;
    void moveEvent( ::QMoveEvent*) SIP_OVERRIDE;
    void resizeEvent( ::QResizeEvent*) SIP_OVERRIDE;
    void closeEvent( ::QCloseEvent*) SIP_OVERRIDE;
    void contextMenuEvent( ::QContextMenuEvent*) SIP_OVERRIDE;
    void tabletEvent( ::QTabletEvent*) SIP_OVERRIDE;
    void actionEvent( ::QActionEvent*) SIP_OVERRIDE;
    void dragEnterEvent( ::QDragEnterEvent*) SIP_OVERRIDE;
    void dragMoveEvent( ::QDragMoveEvent*) SIP_OVERRIDE;
    void dragLeaveEvent( ::QDragLeaveEvent*) SIP_OVERRIDE;
    void dropEvent( ::QDropEvent*) SIP_OVERRIDE;
    void showEvent( ::QShowEvent*) SIP_OVERRIDE;
    void hideEvent( ::QHideEvent*) SIP_OVERRIDE;
    void changeEvent( ::QEvent*) SIP_OVERRIDE;
    void inputMethodEvent( ::QInputMethodEvent*) SIP_OVERRIDE;
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const SIP_OVERRIDE;
    bool focusNextPrevChild(bool) SIP_OVERRIDE;
    bool hasHeightForWidth() const SIP_OVERRIDE;
    bool nativeEvent(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;
     ::QPainter* sharedPainter() const SIP_OVERRIDE;
    void initPainter( ::QPainter*) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSvgWidget(const sipQSvgWidget &);
    sipQSvgWidget &operator = (const sipQSvgWidget &);

    char sipPyMethods[46];
};

sipQSvgWidget::sipQSvgWidget( ::QWidget*a0):  ::QSvgWidget(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgWidget::sipQSvgWidget(const  ::QString& a0, ::QWidget*a1):  ::QSvgWidget(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgWidget::~sipQSvgWidget()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSvgWidget::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSvg_qt_metaobject(sipPySelf,sipType_QSvgWidget);

    return  ::QSvgWidget::metaObject();
}

int sipQSvgWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSvgWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSvg_qt_metacall(sipPySelf,sipType_QSvgWidget,_c,_id,_a);

    return _id;
}

void *sipQSvgWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSvg_qt_metacast(sipPySelf, sipType_QSvgWidget, _clname, &sipCpp) ? sipCpp :  ::QSvgWidget::qt_metacast(_clname));
}

void sipQSvgWidget::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSvgWidget::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtSvg_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtSvg_25(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSvgWidget::connectNotify(a0);
        return;
    }

    extern void sipVH_QtSvg_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtSvg_25(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::customEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtSvg_24(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::childEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtSvg_23(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::timerEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtSvg_22(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSvgWidget::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSvgWidget::eventFilter(a0,a1);

    extern bool sipVH_QtSvg_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtSvg_21(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQSvgWidget::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSvgWidget::event(a0);

    extern bool sipVH_QtSvg_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtSvg_18(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

int sipQSvgWidget::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_metric);

    if (!sipMeth)
        return  ::QSvgWidget::metric(a0);

    extern int sipVH_QtSvg_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtSvg_26(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQSvgWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_paintEngine);

    if (!sipMeth)
        return  ::QSvgWidget::paintEngine();

    extern  ::QPaintEngine* sipVH_QtSvg_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSvg_27(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQSvgWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_devType);

    if (!sipMeth)
        return  ::QSvgWidget::devType();

    extern int sipVH_QtSvg_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSvg_8(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSvgWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_setVisible);

    if (!sipMeth)
    {
         ::QSvgWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtSvg_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtSvg_50(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QSize sipQSvgWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_sizeHint);

    if (!sipMeth)
        return  ::QSvgWidget::sizeHint();

    extern  ::QSize sipVH_QtSvg_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSvg_49(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QSize sipQSvgWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QSvgWidget::minimumSizeHint();

    extern  ::QSize sipVH_QtSvg_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSvg_49(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

int sipQSvgWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QSvgWidget::heightForWidth(a0);

    extern int sipVH_QtSvg_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtSvg_48(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtSvg_47(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtSvg_47(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtSvg_47(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtSvg_47(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtSvg_46(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtSvg_16(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtSvg_16(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtSvg_11(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtSvg_11(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::enterEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtSvg_24(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtSvg_24(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtSvg_45(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtSvg_44(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtSvg_43(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtSvg_42(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtSvg_41(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtSvg_40(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtSvg_39(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtSvg_38(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtSvg_37(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtSvg_36(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtSvg_35(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_showEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtSvg_34(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtSvg_33(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::changeEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtSvg_24(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgWidget::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QSvgWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtSvg_13(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQSvgWidget::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,SIP_NULLPTR,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QSvgWidget::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtSvg_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtSvg_14(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSvgWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QSvgWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtSvg_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtSvg_32(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSvgWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,SIP_NULLPTR,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QSvgWidget::hasHeightForWidth();

    extern bool sipVH_QtSvg_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSvg_31(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQSvgWidget::nativeEvent(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,SIP_NULLPTR,sipName_nativeEvent);

    if (!sipMeth)
        return  ::QSvgWidget::nativeEvent(a0,a1,a2);

    extern bool sipVH_QtSvg_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtSvg_30(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainter* sipQSvgWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,SIP_NULLPTR,sipName_sharedPainter);

    if (!sipMeth)
        return  ::QSvgWidget::sharedPainter();

    extern  ::QPainter* sipVH_QtSvg_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSvg_29(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQSvgWidget::initPainter( ::QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,SIP_NULLPTR,sipName_initPainter);

    if (!sipMeth)
    {
         ::QSvgWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtSvg_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*);

    sipVH_QtSvg_28(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSvgWidget_renderer, "renderer(self) -> QSvgRenderer");

extern "C" {static PyObject *meth_QSvgWidget_renderer(PyObject *, PyObject *);}
static PyObject *meth_QSvgWidget_renderer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgWidget, &sipCpp))
        {
             ::QSvgRenderer*sipRes;

            sipRes = sipCpp->renderer();

            return sipConvertFromType(sipRes,sipType_QSvgRenderer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgWidget, sipName_renderer, doc_QSvgWidget_renderer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgWidget_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QSvgWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QSvgWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSvgWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgWidget, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QSvgWidget::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgWidget, sipName_sizeHint, doc_QSvgWidget_sizeHint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgWidget_load, "load(self, str)\n"
"load(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QSvgWidget_load(PyObject *, PyObject *);}
static PyObject *meth_QSvgWidget_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSvgWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->load(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QSvgWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgWidget, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->load(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgWidget, sipName_load, doc_QSvgWidget_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgWidget_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QSvgWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QSvgWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QSvgWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSvgWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSvgWidget::paintEvent(a0) : sipCpp->paintEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgWidget, sipName_paintEvent, doc_QSvgWidget_paintEvent);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSvgWidget(void *, const sipTypeDef *);}
static void *cast_QSvgWidget(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSvgWidget *sipCpp = reinterpret_cast< ::QSvgWidget *>(sipCppV);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSvgWidget(void *, int);}
static void release_QSvgWidget(void *sipCppV, int)
{
     ::QSvgWidget *sipCpp = reinterpret_cast< ::QSvgWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSvgWidget(sipSimpleWrapper *);}
static void dealloc_QSvgWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSvgWidget *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSvgWidget(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSvgWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSvgWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSvgWidget *sipCpp = SIP_NULLPTR;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQSvgWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQSvgWidget(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSvgWidget[] = {{9, 2, 1}};


static PyMethodDef methods_QSvgWidget[] = {
    {SIP_MLNAME_CAST(sipName_load), meth_QSvgWidget_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgWidget_load)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QSvgWidget_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgWidget_paintEvent)},
    {SIP_MLNAME_CAST(sipName_renderer), meth_QSvgWidget_renderer, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgWidget_renderer)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QSvgWidget_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgWidget_sizeHint)}
};

PyDoc_STRVAR(doc_QSvgWidget, "\1QSvgWidget(parent: QWidget = None)\n"
"QSvgWidget(str, parent: QWidget = None)");


static pyqt5ClassPluginDef plugin_QSvgWidget = {
    & ::QSvgWidget::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtSvg_QSvgWidget = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSvgWidget,
        {SIP_NULLPTR},
        &plugin_QSvgWidget
    },
    {
        sipNameNr_QSvgWidget,
        {0, 0, 1},
        4, methods_QSvgWidget,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSvgWidget,
    -1,
    -1,
    supers_QSvgWidget,
    SIP_NULLPTR,
    init_type_QSvgWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSvgWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSvgWidget,
    cast_QSvgWidget,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtSvg/qsvgrenderer.sip"
#include <qsvgrenderer.h>
#line 2352 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 2356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 2359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 2362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 294 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 2365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 2368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 164 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 2371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 2374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 2377 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 2380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 2383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 2386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 2389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 2392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2398 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 2401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 2404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 2407 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 2410 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 2413 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 2416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtSvg/sipQtSvgpart0.cpp"


class sipQSvgRenderer : public  ::QSvgRenderer
{
public:
    sipQSvgRenderer( ::QObject*);
    sipQSvgRenderer(const  ::QString&, ::QObject*);
    sipQSvgRenderer(const  ::QByteArray&, ::QObject*);
    sipQSvgRenderer( ::QXmlStreamReader*, ::QObject*);
    virtual ~sipQSvgRenderer();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSvgRenderer(const sipQSvgRenderer &);
    sipQSvgRenderer &operator = (const sipQSvgRenderer &);

    char sipPyMethods[7];
};

sipQSvgRenderer::sipQSvgRenderer( ::QObject*a0):  ::QSvgRenderer(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer(const  ::QString& a0, ::QObject*a1):  ::QSvgRenderer(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer(const  ::QByteArray& a0, ::QObject*a1):  ::QSvgRenderer(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::sipQSvgRenderer( ::QXmlStreamReader*a0, ::QObject*a1):  ::QSvgRenderer(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSvgRenderer::~sipQSvgRenderer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSvgRenderer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSvg_qt_metaobject(sipPySelf,sipType_QSvgRenderer);

    return  ::QSvgRenderer::metaObject();
}

int sipQSvgRenderer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSvgRenderer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSvg_qt_metacall(sipPySelf,sipType_QSvgRenderer,_c,_id,_a);

    return _id;
}

void *sipQSvgRenderer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSvg_qt_metacast(sipPySelf, sipType_QSvgRenderer, _clname, &sipCpp) ? sipCpp :  ::QSvgRenderer::qt_metacast(_clname));
}

bool sipQSvgRenderer::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSvgRenderer::event(a0);

    extern bool sipVH_QtSvg_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtSvg_18(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQSvgRenderer::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSvgRenderer::eventFilter(a0,a1);

    extern bool sipVH_QtSvg_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtSvg_21(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQSvgRenderer::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSvgRenderer::timerEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtSvg_22(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSvgRenderer::childEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtSvg_23(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSvgRenderer::customEvent(a0);
        return;
    }

    extern void sipVH_QtSvg_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtSvg_24(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSvgRenderer::connectNotify(a0);
        return;
    }

    extern void sipVH_QtSvg_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtSvg_25(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQSvgRenderer::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSvgRenderer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtSvg_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtSvg_25(sipGILState, sipImportedVirtErrorHandlers_QtSvg_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSvgRenderer_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_isValid, doc_QSvgRenderer_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_defaultSize, "defaultSize(self) -> QSize");

extern "C" {static PyObject *meth_QSvgRenderer_defaultSize(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_defaultSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->defaultSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_defaultSize, doc_QSvgRenderer_defaultSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_elementExists, "elementExists(self, str) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_elementExists(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_elementExists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->elementExists(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_elementExists, doc_QSvgRenderer_elementExists);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_viewBox, "viewBox(self) -> QRect");

extern "C" {static PyObject *meth_QSvgRenderer_viewBox(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_viewBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->viewBox());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_viewBox, doc_QSvgRenderer_viewBox);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_viewBoxF, "viewBoxF(self) -> QRectF");

extern "C" {static PyObject *meth_QSvgRenderer_viewBoxF(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_viewBoxF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->viewBoxF());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_viewBoxF, doc_QSvgRenderer_viewBoxF);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_setViewBox, "setViewBox(self, QRect)\n"
"setViewBox(self, QRectF)");

extern "C" {static PyObject *meth_QSvgRenderer_setViewBox(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setViewBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setViewBox(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QRectF* a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setViewBox(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setViewBox, doc_QSvgRenderer_setViewBox);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_animated, "animated(self) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_animated(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_animated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->animated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_animated, doc_QSvgRenderer_animated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_boundsOnElement, "boundsOnElement(self, str) -> QRectF");

extern "C" {static PyObject *meth_QSvgRenderer_boundsOnElement(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_boundsOnElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->boundsOnElement(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_boundsOnElement, doc_QSvgRenderer_boundsOnElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_framesPerSecond, "framesPerSecond(self) -> int");

extern "C" {static PyObject *meth_QSvgRenderer_framesPerSecond(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_framesPerSecond(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->framesPerSecond();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_framesPerSecond, doc_QSvgRenderer_framesPerSecond);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_setFramesPerSecond, "setFramesPerSecond(self, int)");

extern "C" {static PyObject *meth_QSvgRenderer_setFramesPerSecond(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setFramesPerSecond(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSvgRenderer, &sipCpp, &a0))
        {
            sipCpp->setFramesPerSecond(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setFramesPerSecond, doc_QSvgRenderer_setFramesPerSecond);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_currentFrame, "currentFrame(self) -> int");

extern "C" {static PyObject *meth_QSvgRenderer_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentFrame();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_currentFrame, doc_QSvgRenderer_currentFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_setCurrentFrame, "setCurrentFrame(self, int)");

extern "C" {static PyObject *meth_QSvgRenderer_setCurrentFrame(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_setCurrentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSvgRenderer, &sipCpp, &a0))
        {
            sipCpp->setCurrentFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_setCurrentFrame, doc_QSvgRenderer_setCurrentFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_animationDuration, "animationDuration(self) -> int");

extern "C" {static PyObject *meth_QSvgRenderer_animationDuration(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_animationDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSvgRenderer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->animationDuration();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_animationDuration, doc_QSvgRenderer_animationDuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_load, "load(self, str) -> bool\n"
"load(self, Union[QByteArray, bytes, bytearray]) -> bool\n"
"load(self, QXmlStreamReader) -> bool");

extern "C" {static PyObject *meth_QSvgRenderer_load(PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QXmlStreamReader* a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QXmlStreamReader, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_load, doc_QSvgRenderer_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSvgRenderer_render, "render(self, QPainter)\n"
"render(self, QPainter, QRectF)\n"
"render(self, QPainter, str, bounds: QRectF = QRectF())");

extern "C" {static PyObject *meth_QSvgRenderer_render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSvgRenderer_render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPainter* a0;
         ::QSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ8", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPainter* a0;
        const  ::QRectF* a1;
         ::QSvgRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ8J9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPainter* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QRectF& a2def = QRectF();
        const  ::QRectF* a2 = &a2def;
         ::QSvgRenderer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_bounds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1|J9", &sipSelf, sipType_QSvgRenderer, &sipCpp, sipType_QPainter, &a0, sipType_QString,&a1, &a1State, sipType_QRectF, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSvgRenderer, sipName_render, doc_QSvgRenderer_render);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSvgRenderer(void *, const sipTypeDef *);}
static void *cast_QSvgRenderer(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSvgRenderer *sipCpp = reinterpret_cast< ::QSvgRenderer *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSvgRenderer(void *, int);}
static void release_QSvgRenderer(void *sipCppV, int)
{
     ::QSvgRenderer *sipCpp = reinterpret_cast< ::QSvgRenderer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSvgRenderer(sipSimpleWrapper *);}
static void dealloc_QSvgRenderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSvgRenderer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSvgRenderer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSvgRenderer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSvgRenderer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSvgRenderer *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSvgRenderer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QByteArray, &a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QXmlStreamReader* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QXmlStreamReader, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSvgRenderer(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSvgRenderer[] = {{5, 0, 1}};


static PyMethodDef methods_QSvgRenderer[] = {
    {SIP_MLNAME_CAST(sipName_animated), meth_QSvgRenderer_animated, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_animated)},
    {SIP_MLNAME_CAST(sipName_animationDuration), meth_QSvgRenderer_animationDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_animationDuration)},
    {SIP_MLNAME_CAST(sipName_boundsOnElement), meth_QSvgRenderer_boundsOnElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_boundsOnElement)},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QSvgRenderer_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_currentFrame)},
    {SIP_MLNAME_CAST(sipName_defaultSize), meth_QSvgRenderer_defaultSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_defaultSize)},
    {SIP_MLNAME_CAST(sipName_elementExists), meth_QSvgRenderer_elementExists, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_elementExists)},
    {SIP_MLNAME_CAST(sipName_framesPerSecond), meth_QSvgRenderer_framesPerSecond, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_framesPerSecond)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSvgRenderer_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_isValid)},
    {SIP_MLNAME_CAST(sipName_load), meth_QSvgRenderer_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_load)},
    {SIP_MLNAME_CAST(sipName_render), SIP_MLMETH_CAST(meth_QSvgRenderer_render), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSvgRenderer_render)},
    {SIP_MLNAME_CAST(sipName_setCurrentFrame), meth_QSvgRenderer_setCurrentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setCurrentFrame)},
    {SIP_MLNAME_CAST(sipName_setFramesPerSecond), meth_QSvgRenderer_setFramesPerSecond, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setFramesPerSecond)},
    {SIP_MLNAME_CAST(sipName_setViewBox), meth_QSvgRenderer_setViewBox, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_setViewBox)},
    {SIP_MLNAME_CAST(sipName_viewBox), meth_QSvgRenderer_viewBox, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_viewBox)},
    {SIP_MLNAME_CAST(sipName_viewBoxF), meth_QSvgRenderer_viewBoxF, METH_VARARGS, SIP_MLDOC_CAST(doc_QSvgRenderer_viewBoxF)}
};

PyDoc_STRVAR(doc_QSvgRenderer, "\1QSvgRenderer(parent: QObject = None)\n"
"QSvgRenderer(str, parent: QObject = None)\n"
"QSvgRenderer(Union[QByteArray, bytes, bytearray], parent: QObject = None)\n"
"QSvgRenderer(QXmlStreamReader, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSvgRenderer[] = {
    {"repaintNeeded()", "\1repaintNeeded(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QSvgRenderer = {
    & ::QSvgRenderer::staticMetaObject,
    0,
    signals_QSvgRenderer,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtSvg_QSvgRenderer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSvgRenderer,
        {SIP_NULLPTR},
        &plugin_QSvgRenderer
    },
    {
        sipNameNr_QSvgRenderer,
        {0, 0, 1},
        15, methods_QSvgRenderer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSvgRenderer,
    -1,
    -1,
    supers_QSvgRenderer,
    SIP_NULLPTR,
    init_type_QSvgRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSvgRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSvgRenderer,
    cast_QSvgRenderer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
