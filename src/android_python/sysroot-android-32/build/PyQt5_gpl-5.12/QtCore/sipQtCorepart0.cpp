/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 47 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdiriterator.sip"
#include <qdiriterator.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 53 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 56 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 71 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 74 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstandardpaths.sip"
#include <qstandardpaths.h>
#line 77 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 80 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 83 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 86 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 92 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 98 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 104 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsocketnotifier.sip"
#include <qsocketnotifier.h>
#line 107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 171 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
#include <qlogging.h>
#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 177 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 180 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 186 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 195 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 198 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 201 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 207 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 213 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 219 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 222 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 225 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbasictimer.sip"
#include <qbasictimer.h>
#line 243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 249 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearraymatcher.sip"
#include <qbytearraymatcher.h>
#line 252 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborcommon.sip"
#include <qcborcommon.h>
#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcollator.sip"
#include <qcollator.h>
#line 258 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 270 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdeadlinetimer.sip"
#include <qdeadlinetimer.h>
#line 273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdiriterator.sip"
#include <qdiriterator.h>
#line 282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 285 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qelapsedtimer.sip"
#include <qelapsedtimer.h>
#line 288 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 291 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 294 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsondocument.sip"
#include <qjsondocument.h>
#line 300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsondocument.sip"
#include <qjsondocument.h>
#line 303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonvalue.sip"
#include <qjsonvalue.h>
#line 306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
#include <qline.h>
#line 312 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
#include <qline.h>
#line 315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 321 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 324 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 327 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 333 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimetype.sip"
#include <qmimetype.h>
#line 342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrandom.sip"
#include <qrandom.h>
#line 362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 377 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 97 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstandardpaths.sip"
#include <qstandardpaths.h>
#line 389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstorageinfo.sip"
#include <qstorageinfo.h>
#line 392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 398 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 415 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurlquery.sip"
#include <qurlquery.h>
#line 418 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/quuid.sip"
#include <quuid.h>
#line 421 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qversionnumber.sip"
#include <qversionnumber.h>
#line 424 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 430 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 433 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsysinfo.sip"
#include <qsysinfo.h>
#line 445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#define sipQtCreateUniversalSignal          0
#define sipQtFindUniversalSignal            0
#define sipQtEmitSignal                     0
#define sipQtConnectPySignal                0
#define sipQtDisconnectPySignal             0

/* Define the strings used by this module. */
const char sipStrings_QtCore[] = {
    'Q', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 'L', 'i', 'n', 'e', 'P', 'a', 'r', 's', 'e', 'r', ':', ':', 'O', 'p', 't', 'i', 'o', 'n', 's', 'A', 'f', 't', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 's', 'M', 'o', 'd', 'e', 0,
    'Q', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 'L', 'i', 'n', 'e', 'P', 'a', 'r', 's', 'e', 'r', ':', ':', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 's', 'h', 'W', 'o', 'r', 'd', 'O', 'p', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'E', 'v', 'e', 'n', 't', 'D', 'i', 's', 'p', 'a', 't', 'c', 'h', 'e', 'r', ':', ':', 'T', 'i', 'm', 'e', 'r', 'I', 'n', 'f', 'o', '>', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', ':', ':', 'R', 'e', 'a', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'T', 'e', 'x', 't', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'u', 'r', 0,
    'A', 'A', '_', 'S', 'y', 'n', 't', 'h', 'e', 's', 'i', 'z', 'e', 'M', 'o', 'u', 's', 'e', 'F', 'o', 'r', 'U', 'n', 'h', 'a', 'n', 'd', 'l', 'e', 'd', 'T', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', 's', 0,
    'A', 'A', '_', 'U', 's', 'e', 'S', 't', 'y', 'l', 'e', 'S', 'h', 'e', 'e', 't', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'i', 'o', 'n', 'I', 'n', 'W', 'i', 'd', 'g', 'e', 't', 'S', 't', 'y', 'l', 'e', 's', 0,
    'A', 'A', '_', 'S', 'y', 'n', 't', 'h', 'e', 's', 'i', 'z', 'e', 'M', 'o', 'u', 's', 'e', 'F', 'o', 'r', 'U', 'n', 'h', 'a', 'n', 'd', 'l', 'e', 'd', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', 's', 0,
    'A', 'A', '_', 'S', 'y', 'n', 't', 'h', 'e', 's', 'i', 'z', 'e', 'T', 'o', 'u', 'c', 'h', 'F', 'o', 'r', 'U', 'n', 'h', 'a', 'n', 'd', 'l', 'e', 'd', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 's', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', '>', 0,
    'A', 'A', '_', 'D', 'o', 'n', 't', 'C', 'h', 'e', 'c', 'k', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 'T', 'h', 'r', 'e', 'a', 'd', 'A', 'f', 'f', 'i', 'n', 'i', 't', 'y', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', '>', 0,
    'Q', 'S', 'y', 's', 't', 'e', 'm', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', ':', ':', 'S', 'y', 's', 't', 'e', 'm', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'S', 'o', 'u', 't', 'h', 'G', 'e', 'o', 'r', 'g', 'i', 'a', 'A', 'n', 'd', 'T', 'h', 'e', 'S', 'o', 'u', 't', 'h', 'S', 'a', 'n', 'd', 'w', 'i', 'c', 'h', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    's', 'e', 't', 'O', 'p', 't', 'i', 'o', 'n', 's', 'A', 'f', 't', 'e', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 's', 'M', 'o', 'd', 'e', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'F', 'l', 'o', 'a', 't', 'i', 'n', 'g', 'P', 'o', 'i', 'n', 't', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'I', 't', 'e', 'm', 'M', 'o', 'd', 'e', 'l', ':', ':', 'C', 'h', 'e', 'c', 'k', 'I', 'n', 'd', 'e', 'x', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'E', 'n', 't', 'i', 't', 'y', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', '>', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'F', 'i', 'n', 'd', 'e', 'r', ':', ':', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'R', 'e', 'a', 's', 'o', 'n', 's', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'I', 't', 'e', 'm', 'M', 'o', 'd', 'e', 'l', ':', ':', 'C', 'h', 'e', 'c', 'k', 'I', 'n', 'd', 'e', 'x', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'I', 't', 'e', 'm', 'M', 'o', 'd', 'e', 'l', ':', ':', 'L', 'a', 'y', 'o', 'u', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'H', 'i', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'F', 'i', 'n', 'd', 'e', 'r', ':', ':', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'Q', 'I', 't', 'e', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'l', ':', ':', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'F', 'l', 'o', 'a', 't', 'i', 'n', 'g', 'P', 'o', 'i', 'n', 't', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'Q', 'C', 'b', 'o', 'r', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', ':', ':', 'S', 't', 'r', 'i', 'n', 'g', 'R', 'e', 's', 'u', 'l', 't', 'C', 'o', 'd', 'e', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', ':', ':', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'E', 'v', 'e', 'n', 't', 'D', 'i', 's', 'p', 'a', 't', 'c', 'h', 'e', 'r', ':', ':', 'T', 'i', 'm', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'M', 'a', 'x', 'i', 'm', 'i', 'z', 'e', 'U', 's', 'i', 'n', 'g', 'F', 'u', 'l', 'l', 's', 'c', 'r', 'e', 'e', 'n', 'G', 'e', 'o', 'm', 'e', 't', 'r', 'y', 'H', 'i', 'n', 't', 0,
    'N', 'o', 'C', 'o', 'm', 'm', 'o', 'n', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 'F', 'o', 'r', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', ':', ':', 'P', 'a', 't', 't', 'e', 'r', 'n', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'I', 't', 'e', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'l', ':', ':', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', ':', ':', 'D', 'e', 'l', 'e', 't', 'i', 'o', 'n', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'S', 'y', 'n', 't', 'h', 'e', 's', 'i', 'z', 'e', 'd', 'B', 'y', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'A', '_', 'D', 'o', 'n', 't', 'S', 'h', 'o', 'w', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 's', 'I', 'n', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 's', 0,
    'W', 'A', '_', 'T', 'o', 'u', 'c', 'h', 'P', 'a', 'd', 'A', 'c', 'c', 'e', 'p', 't', 'S', 'i', 'n', 'g', 'l', 'e', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'F', 'i', 'n', 'd', 'e', 'r', ':', ':', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'N', 'o', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'a', 't', 'e', 'I', 'n', 'H', 'i', 's', 't', 'o', 'r', 'y', 'S', 't', 'a', 't', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'D', 'o', 'n', 't', 'C', 'h', 'e', 'c', 'k', 'S', 'u', 'b', 'j', 'e', 'c', 't', 'S', 't', 'r', 'i', 'n', 'g', 'M', 'a', 't', 'c', 'h', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', ':', ':', 'P', 'a', 't', 't', 'e', 'r', 'n', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'A', 'A', '_', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 'C', 'o', 'n', 't', 'e', 'x', 't', 'H', 'e', 'l', 'p', 'B', 'u', 't', 't', 'o', 'n', 0,
    'A', 'A', '_', 'D', 'o', 'n', 't', 'C', 'r', 'e', 'a', 't', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'W', 'i', 'd', 'g', 'e', 't', 'S', 'i', 'b', 'l', 'i', 'n', 'g', 's', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'N', 'o', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'r', 'o', 'p', 'D', 'o', 'w', 'n', 'M', 'e', 'n', 'u', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'U', 's', 'e', 'r', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'P', 'a', 't', 'h', 's', ':', ':', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'h', 'a', 'r', 'e', 'd', 'M', 'e', 'm', 'o', 'r', 'y', ':', ':', 'S', 'h', 'a', 'r', 'e', 'd', 'M', 'e', 'm', 'o', 'r', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', ':', ':', 'M', 'a', 't', 'c', 'h', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'S', 't', 'a', 't', 'e', 's', 'M', 'i', 'n', 'o', 'r', 'O', 'u', 't', 'l', 'y', 'i', 'n', 'g', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'N', 'o', 'n', 'C', 'l', 'i', 'e', 'n', 't', 'A', 'r', 'e', 'a', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'D', 'b', 'l', 'C', 'l', 'i', 'c', 'k', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'L', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'N', 'a', 'v', 'i', 'g', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'C', 'u', 'r', 's', 'o', 'r', 'F', 'o', 'r', 'c', 'e', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'd', 'G', 'e', 's', 't', 'u', 'r', 'e', 's', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'e', 'T', 'o', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'A', 'A', '_', 'M', 'S', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'U', 's', 'e', 'D', 'i', 'r', 'e', 'c', 't', '3', 'D', 'B', 'y', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'P', 'a', 'i', 'r', '<', 'q', 'r', 'e', 'a', 'l', ',', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', '>', ' ', '>', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'U', 's', 'e', 'r', 'I', 'n', 'p', 'u', 't', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'R', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 'M', 'a', 't', 'c', 'h', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', ':', ':', 'M', 'a', 't', 'c', 'h', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'n', 't', 'A', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y', 'O', 'p', 't', 'i', 'm', 'i', 'z', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', 'V', 'e', 'r', 's', 'i', 'o', 'n', ':', ':', 'O', 'S', 'T', 'y', 'p', 'e', 0,
    'Q', 'D', 'e', 'a', 'd', 'l', 'i', 'n', 'e', 'T', 'i', 'm', 'e', 'r', ':', ':', 'F', 'o', 'r', 'e', 'v', 'e', 'r', 'C', 'o', 'n', 's', 't', 'a', 'n', 't', 0,
    'N', 'o', 'n', 'C', 'l', 'i', 'e', 'n', 't', 'A', 'r', 'e', 'a', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'N', 'a', 'v', 'i', 'g', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'K', 'e', 'y', 'p', 'a', 'd', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'a', 'l', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'P', 'a', 'i', 'r', '<', 'Q', 'S', 't', 'r', 'i', 'n', 'g', ',', 'Q', 'S', 't', 'r', 'i', 'n', 'g', '>', ' ', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', ':', ':', 'O', 'f', 'f', 's', 'e', 't', 'D', 'a', 't', 'a', '>', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 'L', 'o', 'o', 'p', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 's', 'F', 'l', 'a', 'g', 's', 0,
    'A', 'A', '_', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'H', 'i', 'g', 'h', 'F', 'r', 'e', 'q', 'u', 'e', 'n', 'c', 'y', 'E', 'v', 'e', 'n', 't', 's', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'P', 'o', 'p', 'u', 'p', 'M', 'e', 'n', 'u', 0,
    'a', 'd', 'd', 'E', 'x', 't', 'r', 'a', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'P', 'a', 't', 'h', 's', ':', ':', 'L', 'o', 'c', 'a', 't', 'e', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', ':', ':', 'M', 'a', 't', 'c', 'h', 'T', 'y', 'p', 'e', 0,
    'Q', 'R', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 'L', 'o', 'c', 'k', ':', ':', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'S', 'y', 'm', 'b', 'o', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'I', 'n', 'c', 'l', 'u', 'd', 'e', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'Z', 'e', 'r', 'o', 'e', 's', 'A', 'f', 't', 'e', 'r', 'D', 'o', 't', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'I', 'n', 'f', 'o', ':', ':', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'J', 's', 'o', 'n', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'D', 'a', 't', 'a', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 'L', 'o', 'o', 'p', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 's', 'F', 'l', 'a', 'g', 0,
    'Q', 'C', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'i', 'c', 'H', 'a', 's', 'h', ':', ':', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'N', 'o', 'n', 'C', 'l', 'i', 'e', 'n', 't', 'A', 'r', 'e', 'a', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'P', 'r', 'e', 's', 's', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'u', 's', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', ':', ':', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'S', 'y', 'n', 't', 'h', 'e', 's', 'i', 'z', 'e', 'd', 'B', 'y', 'S', 'y', 's', 't', 'e', 'm', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'O', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 's', 'S', 'y', 's', 't', 'e', 'm', 'G', 'e', 's', 't', 'u', 'r', 'e', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', '>', 0,
    'a', 'd', 'd', 'E', 'x', 't', 'r', 'a', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'y', 's', 't', 'e', 'm', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 'M', 'o', 'd', 'e', 0,
    'Q', 'S', 't', 'a', 't', 'e', 'M', 'a', 'c', 'h', 'i', 'n', 'e', ':', ':', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'Q', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'P', 'a', 't', 'h', 's', ':', ':', 'L', 'o', 'c', 'a', 't', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'F', 'i', 'l', 't', 'e', 'r', 'i', 'n', 'g', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'R', 'e', 'j', 'e', 'c', 't', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'Z', 'e', 'r', 'o', 'e', 's', 'A', 'f', 't', 'e', 'r', 'D', 'o', 't', 0,
    'S', 'a', 'i', 'n', 't', 'V', 'i', 'n', 'c', 'e', 'n', 't', 'A', 'n', 'd', 'T', 'h', 'e', 'G', 'r', 'e', 'n', 'a', 'd', 'i', 'n', 'e', 's', 0,
    'Q', 'F', 'i', 'l', 'e', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'F', 'i', 'l', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'P', 'a', 'r', 's', 'e', 'A', 's', 'C', 'o', 'm', 'p', 'a', 'c', 't', 'e', 'd', 'S', 'h', 'o', 'r', 't', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'C', 'r', 'e', 'a', 't', 'e', 'd', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 0,
    'I', 'n', 'v', 'e', 'r', 't', 'e', 'd', 'L', 'a', 'n', 'd', 's', 'c', 'a', 'p', 'e', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'N', 'a', 'v', 'i', 'g', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'K', 'e', 'y', 'p', 'a', 'd', 'T', 'a', 'b', 'O', 'r', 'd', 'e', 'r', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'T', 'o', 'o', 'l', 'T', 'i', 'p', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'U', 't', 'i', 'l', 'i', 't', 'y', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'e', 's', 'k', 't', 'o', 'p', 0,
    'W', 'A', '_', 'D', 'o', 'n', 't', 'C', 'r', 'e', 'a', 't', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 's', 0,
    'W', 'A', '_', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'F', 'o', 'r', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 's', 0,
    'W', 'A', '_', 'N', 'o', 'C', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 's', 'F', 'r', 'o', 'm', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'M', 'S', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'F', 'i', 'x', 'e', 'd', 'S', 'i', 'z', 'e', 'D', 'i', 'a', 'l', 'o', 'g', 'H', 'i', 'n', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', '*', '>', 0,
    'P', 'r', 'e', 'm', 'a', 't', 'u', 'r', 'e', 'E', 'n', 'd', 'O', 'f', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', ':', ':', 'T', 'o', 'k', 'e', 'n', 'T', 'y', 'p', 'e', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'E', 'n', 't', 'i', 't', 'y', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'F', 'i', 'e', 'l', 'd', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'o', 'd', 'e', 'c', ':', ':', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'S', 't', 'a', 't', 'e', 'M', 'a', 'c', 'h', 'i', 'n', 'e', ':', ':', 'W', 'r', 'a', 'p', 'p', 'e', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'i', 's', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'F', 'i', 'l', 't', 'e', 'r', 'i', 'n', 'g', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'w', 'i', 'l', 'd', 'c', 'a', 'r', 'd', 'T', 'o', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'E', 'x', 't', 'e', 'n', 'd', 'e', 'd', 'P', 'a', 't', 't', 'e', 'r', 'n', 'S', 'y', 'n', 't', 'a', 'x', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'I', 'n', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 'a', 'l', 'P', 'a', 'r', 't', 'h', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'R', 'e', 'j', 'e', 'c', 't', 'L', 'e', 'a', 'd', 'i', 'n', 'g', 'Z', 'e', 'r', 'o', 'I', 'n', 'E', 'x', 'p', 'o', 'n', 'e', 'n', 't', 0,
    'L', 'a', 't', 'i', 'n', 'A', 'm', 'e', 'r', 'i', 'c', 'a', 'A', 'n', 'd', 'T', 'h', 'e', 'C', 'a', 'r', 'i', 'b', 'b', 'e', 'a', 'n', 0,
    'B', 'r', 'i', 't', 'i', 's', 'h', 'I', 'n', 'd', 'i', 'a', 'n', 'O', 'c', 'e', 'a', 'n', 'T', 'e', 'r', 'r', 'i', 't', 'o', 'r', 'y', 0,
    'Q', 'J', 's', 'o', 'n', 'P', 'a', 'r', 's', 'e', 'E', 'r', 'r', 'o', 'r', ':', ':', 'P', 'a', 'r', 's', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'F', 'i', 'l', 'e', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'M', 'e', 'm', 'o', 'r', 'y', 'M', 'a', 'p', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'F', 'i', 'l', 'e', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'F', 'i', 'l', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'F', 'l', 'a', 'g', 0,
    'Q', 'D', 'i', 'r', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'D', 'y', 'n', 'a', 'm', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'W', 'i', 'n', 'd', 'o', 'w', 'I', 'c', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'S', 'i', 'n', 'g', 'l', 'e', 'D', 'a', 's', 'h', 'W', 'o', 'r', 'd', 'O', 'p', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'I', 'n', 'v', 'e', 'r', 't', 'e', 'd', 'P', 'o', 'r', 't', 'r', 'a', 'i', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'L', 'o', 'n', 'g', 's', 'o', 'l', 'i', 'd', 'u', 's', 'o', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'b', 'o', 'v', 'e', 'r', 'e', 'v', 'e', 'r', 's', 'e', 'd', 'c', 'o', 'm', 'm', 'a', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'S', 'p', 'l', 'a', 's', 'h', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'C', 'o', 'n', 't', 'e', 'x', 't', 'H', 'e', 'l', 'p', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', '*', '>', 0,
    'w', 'r', 'i', 't', 'e', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'Q', 'u', 'e', 'r', 'y', 'V', 'a', 'l', 'u', 'e', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'o', 'd', 'e', 'c', ':', ':', 'C', 'o', 'n', 'v', 'e', 'r', 't', 'e', 'r', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'o', 'd', 'e', 'c', ':', ':', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    'Q', 'S', 't', 'a', 't', 'e', 'M', 'a', 'c', 'h', 'i', 'n', 'e', ':', ':', 'S', 'i', 'g', 'n', 'a', 'l', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'P', 'a', 'r', 't', 'i', 'a', 'l', 'P', 'r', 'e', 'f', 'e', 'r', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'M', 'a', 't', 'c', 'h', 0,
    'O', 'p', 't', 'i', 'm', 'i', 'z', 'e', 'O', 'n', 'F', 'i', 'r', 's', 't', 'U', 's', 'a', 'g', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'U', 's', 'e', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'D', 'o', 't', 'M', 'a', 't', 'c', 'h', 'e', 's', 'E', 'v', 'e', 'r', 'y', 't', 'h', 'i', 'n', 'g', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'I', 'n', 'p', 'u', 't', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 'F', 'o', 'r', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 'A', 'n', 'd', 'D', 'a', 't', 'a', 0,
    'Q', 'M', 'e', 's', 's', 'a', 'g', 'e', 'A', 'u', 't', 'h', 'e', 'n', 't', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'd', 'e', 0,
    'A', 'n', 'a', 't', 'o', 'l', 'i', 'a', 'n', 'H', 'i', 'e', 'r', 'o', 'g', 'l', 'y', 'p', 'h', 's', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'I', 'n', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 'a', 'l', 'P', 'a', 'h', 'l', 'a', 'v', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'M', 'e', 'a', 's', 'u', 'r', 'e', 'm', 'e', 'n', 't', 'S', 'y', 's', 't', 'e', 'm', 0,
    'S', 'v', 'a', 'l', 'b', 'a', 'r', 'd', 'A', 'n', 'd', 'J', 'a', 'n', 'M', 'a', 'y', 'e', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'Q', 'H', 'i', 's', 't', 'o', 'r', 'y', 'S', 't', 'a', 't', 'e', ':', ':', 'H', 'i', 's', 't', 'o', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'Q', 'D', 'i', 'r', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'F', 'l', 'a', 'g', 0,
    'P', 'a', 'r', 's', 'e', 'A', 's', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 's', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'N', 'a', 't', 'i', 'v', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'n', 't', 'S', 't', 'a', 'r', 't', 'G', 'e', 's', 't', 'u', 'r', 'e', 'O', 'n', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 'I', 't', 'e', 'm', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'A', 'A', '_', 'I', 'm', 'm', 'e', 'd', 'i', 'a', 't', 'e', 'W', 'i', 'd', 'g', 'e', 't', 'C', 'r', 'e', 'a', 't', 'i', 'o', 'n', 0,
    'W', 'i', 'd', 'g', 'e', 't', 'W', 'i', 't', 'h', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'K', 'e', 'e', 'p', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 'B', 'y', 'E', 'x', 'p', 'a', 'n', 'd', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'v', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'l', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'b', 'o', 'v', 'e', 'v', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'l', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'B', 'r', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 'D', 'o', 'w', 'n', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'C', 'o', 'm', 'b', 'o', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'A', 'l', 'w', 'a', 'y', 's', 'S', 'h', 'o', 'w', 'T', 'o', 'o', 'l', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'E', 'x', 'p', 'l', 'i', 'c', 'i', 't', 'S', 'h', 'o', 'w', 'H', 'i', 'd', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'F', 'u', 'l', 'l', 's', 'c', 'r', 'e', 'e', 'n', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'M', 'a', 'c', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'X', '1', '1', 'B', 'y', 'p', 'a', 's', 's', 'W', 'i', 'n', 'd', 'o', 'w', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'H', 'i', 'n', 't', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 'L', 'i', 'n', 'e', 'O', 'p', 't', 'i', 'o', 'n', '>', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 'D', 'a', 't', 'a', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'Q', 'u', 'e', 'r', 'y', 'P', 'a', 'i', 'r', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'U', 'r', 'l', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'h', 'a', 'r', 'e', 'd', 'M', 'e', 'm', 'o', 'r', 'y', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 'M', 'o', 'd', 'e', 0,
    'Q', 'S', 'e', 'q', 'u', 'e', 'n', 't', 'i', 'a', 'l', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 'G', 'r', 'o', 'u', 'p', 0,
    'D', 'a', 't', 'a', 'S', 'i', 'z', 'e', 'T', 'r', 'a', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'E', 'g', 'y', 'p', 't', 'i', 'a', 'n', 'H', 'i', 'e', 'r', 'o', 'g', 'l', 'y', 'p', 'h', 's', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'm', 'i', 't', 'L', 'e', 'a', 'd', 'i', 'n', 'g', 'Z', 'e', 'r', 'o', 'I', 'n', 'E', 'x', 'p', 'o', 'n', 'e', 'n', 't', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'S', 't', 'a', 't', 'e', 's', 'V', 'i', 'r', 'g', 'i', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'D', 'e', 'm', 'o', 'c', 'r', 'a', 't', 'i', 'c', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 'O', 'f', 'K', 'o', 'r', 'e', 'a', 0,
    'F', 'r', 'e', 'n', 'c', 'h', 'S', 'o', 'u', 't', 'h', 'e', 'r', 'n', 'T', 'e', 'r', 'r', 'i', 't', 'o', 'r', 'i', 'e', 's', 0,
    'D', 'e', 'm', 'o', 'c', 'r', 'a', 't', 'i', 'c', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 'O', 'f', 'C', 'o', 'n', 'g', 'o', 0,
    'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'M', 'o', 'r', 'o', 'c', 'c', 'a', 'n', 'T', 'a', 'm', 'a', 'z', 'i', 'g', 'h', 't', 0,
    'E', 'x', 'p', 'o', 'r', 't', 'E', 'x', 't', 'e', 'r', 'n', 'a', 'l', 'S', 'y', 'm', 'b', 'o', 'l', 's', 'H', 'i', 'n', 't', 0,
    'Q', 'J', 's', 'o', 'n', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'J', 's', 'o', 'n', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'F', 'l', 'o', 'a', 't', 'i', 'n', 'g', 'P', 'o', 'i', 'n', 't', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'R', 'e', 'q', 'u', 'e', 's', 't', 'S', 'o', 'f', 't', 'w', 'a', 'r', 'e', 'I', 'n', 'p', 'u', 't', 'P', 'a', 'n', 'e', 'l', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'u', 's', 'e', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    's', 'e', 't', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 'L', 'i', 'n', 'e', 'O', 'p', 't', 'i', 'o', 'n', ':', ':', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', ':', ':', 'B', 'a', 's', 'e', '6', '4', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 'L', 'i', 's', 't', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', ':', ':', 'S', 't', 'a', 't', 'e', 0,
    'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'S', 'y', 'n', 't', 'h', 'e', 's', 'i', 'z', 'e', 'd', 'B', 'y', 'Q', 't', 0,
    'I', 'm', 'h', 'D', 'i', 'a', 'l', 'a', 'b', 'l', 'e', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 'O', 'n', 'l', 'y', 0,
    'L', 'i', 'n', 'k', 's', 'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'B', 'y', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'A', 'A', '_', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'S', 'h', 'a', 'd', 'e', 'r', 'D', 'i', 's', 'k', 'C', 'a', 'c', 'h', 'e', 0,
    'A', 'A', '_', 'M', 'a', 'c', 'D', 'o', 'n', 't', 'S', 'w', 'a', 'p', 'C', 't', 'r', 'l', 'A', 'n', 'd', 'M', 'e', 't', 'a', 0,
    'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 'R', 'o', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'S', 'e', 'm', 'i', 'v', 'o', 'i', 'c', 'e', 'd', '_', 'S', 'o', 'u', 'n', 'd', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'M', 'e', 'n', 'u', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'o', 'c', 'k', 0,
    'W', 'A', '_', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'W', 'A', '_', 'N', 'o', 'C', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 's', 'F', 'o', 'r', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'F', 'o', 'r', 'I', 'n', 'p', 'u', 't', 0,
    'B', 'y', 'p', 'a', 's', 's', 'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'P', 'r', 'o', 'x', 'y', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'T', 'e', 'x', 't', 'I', 'n', 'c', 'l', 'u', 'd', 'e', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'S', 'p', 'a', 'c', 'e', 's', 0,
    'E', 'r', 'r', 'o', 'r', 'O', 'n', 'U', 'n', 'e', 'x', 'p', 'e', 'c', 't', 'e', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'E', 'n', 't', 'i', 't', 'y', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 's', 'I', 'd', 'T', 'o', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'I', 'a', 'n', 'a', 'I', 'd', 0,
    's', 'e', 't', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 'M', 'a', 'r', 'k', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'N', 'u', 'm', 'b', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'I', 'n', 'v', 'e', 'r', 't', 'e', 'd', 'G', 'r', 'e', 'e', 'd', 'i', 'n', 'e', 's', 's', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'O', 'u', 't', 'p', 'u', 't', 'P', 'r', 'o', 'c', 'e', 's', 's', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'Q', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', ':', ':', 'M', 'a', 't', 'c', 'h', 'M', 'o', 'd', 'e', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'D', 'a', 't', 'a', 'S', 'i', 'z', 'e', 'F', 'o', 'r', 'm', 'a', 't', 's', 0,
    'C', 'a', 'n', 'a', 'd', 'i', 'a', 'n', 'A', 'b', 'o', 'r', 'i', 'g', 'i', 'n', 'a', 'l', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'r', 'a', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'C', 'h', 'i', 'n', 'e', 's', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'F', 'i', 'l', 'e', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 's', 0,
    'Q', 'E', 'l', 'a', 'p', 's', 'e', 'd', 'T', 'i', 'm', 'e', 'r', ':', ':', 'C', 'l', 'o', 'c', 'k', 'T', 'y', 'p', 'e', 0,
    'f', 'r', 'o', 'm', 'M', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'S', 't', 'a', 'r', 't', 'O', 'f', 'D', 'a', 'y', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'P', 'a', 'l', 'e', 't', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'c', 'l', 'e', 'a', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 's', 0,
    'Q', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 'L', 'i', 'n', 'e', 'O', 'p', 't', 'i', 'o', 'n', ':', ':', 'F', 'l', 'a', 'g', 0,
    'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', ':', ':', 'B', 'a', 's', 'e', '6', '4', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    'i', 'n', 's', 't', 'a', 'l', 'l', 'N', 'a', 't', 'i', 'v', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'S', 'o', 'c', 'k', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'E', 'v', 'e', 'n', 't', 'D', 'i', 's', 'p', 'a', 't', 'c', 'h', 'e', 'r', 0,
    'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'N', 'o', 't', 'S', 'y', 'n', 't', 'h', 'e', 's', 'i', 'z', 'e', 'd', 0,
    'N', 'a', 'v', 'i', 'g', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'C', 'u', 'r', 's', 'o', 'r', 'A', 'u', 't', 'o', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'T', 'e', 'x', 't', 'S', 'e', 'l', 'e', 'c', 't', 'a', 'b', 'l', 'e', 'B', 'y', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'C', 'o', 'n', 't', 'a', 'i', 'n', 's', 'I', 't', 'e', 'm', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'A', 'A', '_', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'H', 'i', 'g', 'h', 'D', 'p', 'i', 'S', 'c', 'a', 'l', 'i', 'n', 'g', 0,
    'Q', 't', ':', ':', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 'B', 'e', 's', 'i', 'd', 'e', 'I', 'c', 'o', 'n', 0,
    'I', 'm', 'I', 'n', 'p', 'u', 't', 'I', 't', 'e', 'm', 'C', 'l', 'i', 'p', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'B', 'l', 'o', 'c', 'k', 'i', 'n', 'g', 'Q', 'u', 'e', 'u', 'e', 'd', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'T', 'o', 'g', 'g', 'l', 'e', 'P', 'l', 'a', 'y', 'P', 'a', 'u', 's', 'e', 0,
    'K', 'e', 'y', '_', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'B', 'r', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 'U', 'p', 0,
    'Q', 't', ':', ':', 'I', 'm', 'a', 'g', 'e', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'W', 'A', '_', 'T', 'r', 'a', 'n', 's', 'l', 'u', 'c', 'e', 'n', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'N', 'D', 0,
    'W', 'A', '_', 'S', 'h', 'o', 'w', 'W', 'i', 't', 'h', 'o', 'u', 't', 'A', 'c', 't', 'i', 'v', 'a', 't', 'i', 'n', 'g', 0,
    'W', 'A', '_', 'N', 'o', 'X', '1', '1', 'E', 'v', 'e', 'n', 't', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'D', 'o', 'e', 's', 'N', 'o', 't', 'A', 'c', 'c', 'e', 'p', 't', 'F', 'o', 'c', 'u', 's', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'a', 'x', 'i', 'm', 'i', 'z', 'e', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'i', 'n', 'i', 'm', 'i', 'z', 'e', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'Q', 'H', 'a', 's', 'h', '<', 'Q', 'S', 't', 'r', 'i', 'n', 'g', ',', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', '>', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', ':', ':', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 's', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 'U', 'n', 'd', 'e', 'c', 'l', 'a', 'r', 'e', 'd', 'E', 'n', 't', 'i', 't', 'y', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'i', 's', 'I', 'n', 't', 'e', 'r', 'r', 'u', 'p', 't', 'i', 'o', 'n', 'R', 'e', 'q', 'u', 'e', 's', 't', 'e', 'd', 0,
    'q', 'S', 'e', 't', 'R', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'N', 'u', 'm', 'b', 'e', 'r', 'F', 'l', 'a', 'g', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 'M', 'a', 't', 'c', 'h', 0,
    'P', 'a', 'r', 't', 'i', 'a', 'l', 'P', 'r', 'e', 'f', 'e', 'r', 'F', 'i', 'r', 's', 't', 'M', 'a', 't', 'c', 'h', 0,
    'r', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'O', 'u', 't', 'p', 'u', 't', 0,
    'Q', 'P', 'a', 'r', 'a', 'l', 'l', 'e', 'l', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 'G', 'r', 'o', 'u', 'p', 0,
    'Q', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'n', 'g', 'S', 'y', 's', 't', 'e', 'm', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'Q', 'M', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', ':', ':', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'M', 'e', 't', 'a', 'M', 'e', 't', 'h', 'o', 'd', ':', ':', 'M', 'e', 't', 'h', 'o', 'd', 'T', 'y', 'p', 'e', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'D', 'a', 't', 'a', 'S', 'i', 'z', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'Q', 'u', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'C', 'a', 'u', 'c', 'a', 's', 'i', 'a', 'n', 'A', 'l', 'b', 'a', 'n', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'i', 'm', 'p', 'l', 'i', 'f', 'i', 'e', 'd', 'C', 'h', 'i', 'n', 'e', 's', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'H', 'e', 'a', 'r', 'd', 'A', 'n', 'd', 'M', 'c', 'D', 'o', 'n', 'a', 'l', 'd', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'M', 'a', 'n', 'i', 'c', 'h', 'a', 'e', 'a', 'n', 'M', 'i', 'd', 'd', 'l', 'e', 'P', 'e', 'r', 's', 'i', 'a', 'n', 0,
    'C', 'e', 'n', 't', 'r', 'a', 'l', 'M', 'o', 'r', 'o', 'c', 'c', 'o', 'T', 'a', 'm', 'a', 'z', 'i', 'g', 'h', 't', 0,
    'Q', 'I', 'O', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'O', 'p', 'e', 'n', 'M', 'o', 'd', 'e', 'F', 'l', 'a', 'g', 0,
    'Q', 'F', 'i', 'l', 'e', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'P', 'r', 'e', 'c', 'i', 's', 'e', 'R', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', 'T', 'i', 'm', 'e', 0,
    'C', 'l', 'o', 's', 'e', 'S', 'o', 'f', 't', 'w', 'a', 'r', 'e', 'I', 'n', 'p', 'u', 't', 'P', 'a', 'n', 'e', 'l', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'H', 'o', 'v', 'e', 'r', 'L', 'e', 'a', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'H', 'o', 'v', 'e', 'r', 'E', 'n', 't', 'e', 'r', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'u', 's', 'e', 'P', 'r', 'e', 's', 's', 0,
    'Q', 'C', 'b', 'o', 'r', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', ':', ':', 'T', 'y', 'p', 'e', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'W', 'h', 'i', 't', 'e', 'S', 'p', 'a', 'c', 'e', 'M', 'o', 'd', 'e', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    'F', 'i', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    'I', 'm', 'h', 'F', 'o', 'r', 'm', 'a', 't', 't', 'e', 'd', 'N', 'u', 'm', 'b', 'e', 'r', 's', 'O', 'n', 'l', 'y', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    'A', 'A', '_', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'T', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', 's', 0,
    'A', 'A', '_', 'D', 'o', 'n', 't', 'U', 's', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'D', 'i', 'a', 'l', 'o', 'g', 's', 0,
    'A', 'A', '_', 'E', 'n', 'a', 'b', 'l', 'e', 'H', 'i', 'g', 'h', 'D', 'p', 'i', 'S', 'c', 'a', 'l', 'i', 'n', 'g', 0,
    'A', 'A', '_', 'D', 'o', 'n', 't', 'U', 's', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'M', 'e', 'n', 'u', 'B', 'a', 'r', 0,
    'A', 'A', '_', 'M', 'a', 'c', 'P', 'l', 'u', 'g', 'i', 'n', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'A', '_', 'D', 'o', 'n', 't', 'S', 'h', 'o', 'w', 'I', 'c', 'o', 'n', 's', 'I', 'n', 'M', 'e', 'n', 'u', 's', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 'U', 'n', 'd', 'e', 'r', 'I', 'c', 'o', 'n', 0,
    'A', 'c', 't', 'i', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'Q', 't', ':', ':', 'I', 'm', 'a', 'g', 'e', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    'W', 'A', '_', 'M', 'S', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'U', 's', 'e', 'D', 'i', 'r', 'e', 'c', 't', '3', 'D', 0,
    'W', 'A', '_', 'L', 'a', 'y', 'o', 'u', 't', 'U', 's', 'e', 's', 'W', 'i', 'd', 'g', 'e', 't', 'R', 'e', 'c', 't', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'O', 'w', 'n', 'S', 'i', 'z', 'e', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'C', 'o', 'n', 'f', 'i', 'g', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 0,
    'W', 'A', '_', 'F', 'o', 'r', 'c', 'e', 'U', 'p', 'd', 'a', 't', 'e', 's', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 'y', 's', 'O', 'n', 'B', 'o', 't', 't', 'o', 'm', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'i', 'n', 'M', 'a', 'x', 'B', 'u', 't', 't', 'o', 'n', 's', 'H', 'i', 'n', 't', 0,
    'T', 'e', 'x', 't', 'J', 'u', 's', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'c', 'e', 'd', 0,
    'q', 'U', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'S', 't', 'a', 't', 'e', '*', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'P', 'a', 'i', 'r', '<', 'i', 'n', 't', ',', 'i', 'n', 't', '>', ' ', '>', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'p', 'u', 'A', 'r', 'c', 'h', 'i', 't', 'e', 'c', 't', 'u', 'r', 'e', 0,
    'U', 'n', 'e', 'x', 'p', 'e', 'c', 't', 'e', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', 'M', 'a', 'n', 'i', 'p', 'u', 'l', 'a', 't', 'o', 'r', 0,
    's', 'e', 't', 'R', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'G', 'l', 'o', 'b', 'a', 'l', 'R', 'e', 's', 't', 'o', 'r', 'e', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'S', 'o', 'r', 't', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    's', 'e', 't', 'D', 'i', 'r', 'e', 'c', 't', 'W', 'r', 'i', 't', 'e', 'F', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'R', 'e', 'g', 'E', 'x', 'p', ':', ':', 'P', 'a', 't', 't', 'e', 'r', 'n', 'S', 'y', 'n', 't', 'a', 'x', 0,
    'r', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'F', 'o', 'r', 'w', 'a', 'r', 'd', 'e', 'd', 'O', 'u', 't', 'p', 'u', 't', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'G', 'e', 'n', 'e', 'r', 'i', 'c', 'R', 'e', 't', 'u', 'r', 'n', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 0,
    'q', 'I', 'n', 's', 't', 'a', 'l', 'l', 'M', 'e', 's', 's', 'a', 'g', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'N', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'S', 'a', 'i', 'n', 't', 'P', 'i', 'e', 'r', 'r', 'e', 'A', 'n', 'd', 'M', 'i', 'q', 'u', 'e', 'l', 'o', 'n', 0,
    'P', 'a', 'l', 'e', 's', 't', 'i', 'n', 'i', 'a', 'n', 'T', 'e', 'r', 'r', 'i', 't', 'o', 'r', 'i', 'e', 's', 0,
    'W', 'a', 'l', 'l', 'i', 's', 'A', 'n', 'd', 'F', 'u', 't', 'u', 'n', 'a', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'N', 'o', 'r', 't', 'h', 'e', 'r', 'n', 'M', 'a', 'r', 'i', 'a', 'n', 'a', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'P', 'e', 'o', 'p', 'l', 'e', 's', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 'O', 'f', 'C', 'o', 'n', 'g', 'o', 0,
    'C', 'e', 'n', 't', 'r', 'a', 'l', 'A', 'f', 'r', 'i', 'c', 'a', 'n', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 0,
    'L', 'i', 'b', 'r', 'a', 'r', 'y', 'E', 'x', 'e', 'c', 'u', 't', 'a', 'b', 'l', 'e', 's', 'P', 'a', 't', 'h', 0,
    'r', 'o', 'w', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'W', 'r', 'i', 't', 'e', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'F', 'i', 'l', 'e', 'M', 'e', 't', 'a', 'd', 'a', 't', 'a', 'C', 'h', 'a', 'n', 'g', 'e', 'T', 'i', 'm', 'e', 0,
    'Q', 'F', 'i', 'l', 'e', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'F', 'i', 'l', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'E', 'x', 'c', 'l', 'u', 'd', 'e', 'S', 'o', 'c', 'k', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 's', 0,
    'E', 'x', 'c', 'l', 'u', 'd', 'e', 'U', 's', 'e', 'r', 'I', 'n', 'p', 'u', 't', 'E', 'v', 'e', 'n', 't', 's', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'M', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'E', 'p', 'o', 'c', 'h', 0,
    'f', 'l', 'o', 'a', 't', 'i', 'n', 'g', 'P', 'o', 'i', 'n', 't', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'N', 'o', 'n', 'C', 'l', 'i', 'e', 'n', 't', 'A', 'r', 'e', 'a', 'M', 'o', 'u', 's', 'e', 'M', 'o', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'D', 'r', 'a', 'g', 'L', 'e', 'a', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'D', 'r', 'a', 'g', 'E', 'n', 't', 'e', 'r', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'H', 'o', 'v', 'e', 'r', 'M', 'o', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'u', 's', 'e', 'M', 'o', 'v', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 'd', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'm', 'a', 'p', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'F', 'r', 'o', 'm', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'l', 'a', 'y', 'o', 'u', 't', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'S', 'm', 'a', 'r', 't', 'Z', 'o', 'o', 'm', 'N', 'a', 't', 'i', 'v', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'F', 'i', 'n', 'd', 'D', 'i', 'r', 'e', 'c', 't', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'O', 'n', 'l', 'y', 0,
    'Q', 't', ':', ':', 'S', 'c', 'r', 'e', 'e', 'n', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 's', 0,
    'R', 'e', 'c', 'e', 'i', 'v', 'e', 'P', 'a', 'r', 't', 'i', 'a', 'l', 'G', 'e', 's', 't', 'u', 'r', 'e', 's', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'I', 'm', 'h', 'E', 'm', 'a', 'i', 'l', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 'O', 'n', 'l', 'y', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'F', 'r', 'a', 'm', 'e', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'e', 'x', 't', 'B', 'r', 'o', 'w', 's', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'L', 'i', 'n', 'k', 's', 'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'B', 'y', 'M', 'o', 'u', 's', 'e', 0,
    'A', 'A', '_', 'S', 'h', 'a', 'r', 'e', 'O', 'p', 'e', 'n', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 's', 0,
    'Q', 't', ':', ':', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'Q', 'u', 'e', 'r', 'i', 'e', 's', 0,
    'Q', 't', ':', ':', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'L', 'o', 'c', 'a', 'l', 'e', 'S', 'h', 'o', 'r', 't', 'D', 'a', 't', 'e', 0,
    'C', 'o', 'n', 'i', 'c', 'a', 'l', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'C', 'a', 'p', 'i', 't', 'a', 'l', '_', 'S', 'c', 'h', 'w', 'a', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'I', 'n', 'v', 'e', 'r', 't', 'e', 'd', 'b', 'r', 'e', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'L', 'i', 'g', 'h', 't', 'O', 'n', 'O', 'f', 'f', 0,
    'W', 'A', '_', 'X', '1', '1', 'D', 'o', 'N', 'o', 't', 'A', 'c', 'c', 'e', 'p', 't', 'F', 'o', 'c', 'u', 's', 0,
    'W', 'A', '_', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'F', 'o', 'c', 'u', 's', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'I', 'n', 'P', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'K', 'e', 'y', 's', 0,
    'N', 'o', 'D', 'r', 'o', 'p', 'S', 'h', 'a', 'd', 'o', 'w', 'W', 'i', 'n', 'd', 'o', 'w', 'H', 'i', 'n', 't', 0,
    'Q', 'S', 'e', 't', '<', 'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'S', 't', 'a', 't', 'e', '*', '>', 0,
    'Q', 'H', 'a', 's', 'h', '<', 'i', 'n', 't', ',', 'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', '>', 0,
    'w', 'r', 'i', 't', 'e', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'P', 'a', 't', 'h', 'S', 'e', 'g', 'm', 'e', 'n', 't', 's', 0,
    'i', 's', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 'I', 'd', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'Q', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', ':', ':', 'O', 'f', 'f', 's', 'e', 't', 'D', 'a', 't', 'a', 0,
    'Q', 'T', 'i', 'm', 'e', 'L', 'i', 'n', 'e', ':', ':', 'C', 'u', 'r', 'v', 'e', 'S', 'h', 'a', 'p', 'e', 0,
    's', 'e', 't', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'R', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 'M', 'a', 'r', 'k', 0,
    'D', 'o', 'n', 't', 'R', 'e', 's', 't', 'o', 'r', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'Q', 'S', 't', 'a', 't', 'e', ':', ':', 'R', 'e', 's', 't', 'o', 'r', 'e', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'G', 'e', 'n', 'e', 'r', 'i', 'c', 'C', 'o', 'n', 'f', 'i', 'g', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'Q', 'S', 'o', 'r', 't', 'F', 'i', 'l', 't', 'e', 'r', 'P', 'r', 'o', 'x', 'y', 'M', 'o', 'd', 'e', 'l', 0,
    'Q', 'S', 'o', 'c', 'k', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', ':', ':', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'A', 't', 'o', 'm', 'i', 'c', 'S', 'y', 'n', 'c', 'R', 'e', 'q', 'u', 'i', 'r', 'e', 'd', 0,
    'C', 'a', 's', 'e', 'I', 'n', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'F', 'o', 'r', 'w', 'a', 'r', 'd', 'e', 'd', 'I', 'n', 'p', 'u', 't', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    's', 'e', 't', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'n', 'v', 'i', 'r', 'o', 'n', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'O', 'u', 't', 'p', 'u', 't', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'P', 'r', 'o', 'c', 'e', 's', 's', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'r', 'e', 'a', 'd', 'A', 'l', 'l', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'O', 'u', 't', 'p', 'u', 't', 0,
    'F', 'o', 'r', 'w', 'a', 'r', 'd', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'Q', 'O', 'b', 'j', 'e', 'c', 't', 'C', 'l', 'e', 'a', 'n', 'u', 'p', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'Q', 'M', 'u', 't', 'e', 'x', ':', ':', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'F', 'l', 'o', 'a', 't', 'i', 'n', 'g', 'P', 'o', 'i', 'n', 't', 'S', 'h', 'o', 'r', 't', 'e', 's', 't', 0,
    'H', 'a', 'n', 'W', 'i', 't', 'h', 'B', 'o', 'p', 'o', 'm', 'o', 'f', 'o', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'l', 'd', 'N', 'o', 'r', 't', 'h', 'A', 'r', 'a', 'b', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'P', 'o', 'l', 'l', 'a', 'r', 'd', 'P', 'h', 'o', 'n', 'e', 't', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'l', 'd', 'S', 'o', 'u', 't', 'h', 'A', 'r', 'a', 'b', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'e', 'r', 'o', 'i', 't', 'i', 'c', 'C', 'u', 'r', 's', 'i', 'v', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', 'A', 'r', 'a', 'm', 'a', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'N', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'T', 'u', 'r', 'k', 's', 'A', 'n', 'd', 'C', 'a', 'i', 'c', 'o', 's', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'U', 'n', 'b', 'o', 'u', 'n', 'd', 'e', 'd', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 'n', 'e', 'F', ':', ':', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 'A', 'n', 'd', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'L', 'o', 'a', 'd', 'A', 'r', 'c', 'h', 'i', 'v', 'e', 'M', 'e', 'm', 'b', 'e', 'r', 'H', 'i', 'n', 't', 0,
    'R', 'e', 's', 'o', 'l', 'v', 'e', 'A', 'l', 'l', 'S', 'y', 'm', 'b', 'o', 'l', 's', 'H', 'i', 'n', 't', 0,
    'I', 'l', 'l', 'e', 'g', 'a', 'l', 'E', 's', 'c', 'a', 'p', 'e', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', 0,
    'M', 'i', 's', 's', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'R', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'Q', 'F', 'i', 'l', 'e', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'F', 'i', 'l', 'e', 'T', 'i', 'm', 'e', 0,
    'a', 'd', 'd', 'C', 'u', 'b', 'i', 'c', 'B', 'e', 'z', 'i', 'e', 'r', 'S', 'e', 'g', 'm', 'e', 'n', 't', 0,
    'n', 'a', 'm', 'e', 'F', 'i', 'l', 't', 'e', 'r', 's', 'F', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'E', 'p', 'o', 'c', 'h', 0,
    'D', 'y', 'n', 'a', 'm', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'D', 'r', 'a', 'g', 'M', 'o', 'v', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'O', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'D', 'o', 'm', 'a', 'i', 'n', 0,
    'a', 'd', 'd', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'M', 'o', 'v', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'r', 'o', 'w', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    'Q', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'Q', 't', ':', ':', 'N', 'a', 't', 'i', 'v', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 't', ':', ':', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 't', 'a', 't', 'e', 's', 0,
    'Q', 't', ':', ':', 'S', 'c', 'r', 'e', 'e', 'n', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'h', 'E', 'x', 'c', 'l', 'u', 's', 'i', 'v', 'e', 'I', 'n', 'p', 'u', 't', 'M', 'a', 's', 'k', 0,
    'T', 'e', 'x', 't', 'E', 'd', 'i', 't', 'o', 'r', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'e', 'x', 't', 'S', 'e', 'l', 'e', 'c', 't', 'a', 'b', 'l', 'e', 'B', 'y', 'M', 'o', 'u', 's', 'e', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'A', 'A', '_', 'F', 'o', 'r', 'c', 'e', 'R', 'a', 's', 't', 'e', 'r', 'W', 'i', 'd', 'g', 'e', 't', 's', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'F', 'o', 'l', 'l', 'o', 'w', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 't', ':', ':', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'L', 'o', 'c', 'a', 'l', 'e', 'L', 'o', 'n', 'g', 'D', 'a', 't', 'e', 0,
    'S', 'y', 's', 't', 'e', 'm', 'L', 'o', 'c', 'a', 'l', 'e', 'S', 'h', 'o', 'r', 't', 'D', 'a', 't', 'e', 0,
    'R', 'a', 'd', 'i', 'a', 'l', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'K', 'e', 'y', '_', 'M', 'o', 'n', 'B', 'r', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'V', 'o', 'i', 'c', 'e', 'd', '_', 'S', 'o', 'u', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'H', 'i', 'r', 'a', 'g', 'a', 'n', 'a', '_', 'K', 'a', 't', 'a', 'k', 'a', 'n', 'a', 0,
    'K', 'e', 'y', '_', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 0,
    'K', 'e', 'y', '_', 'M', 'u', 'l', 't', 'i', 'p', 'l', 'e', 'C', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'F', 'r', 'a', 'm', 'e', 'w', 'o', 'r', 'k', 'S', 'c', 'a', 'l', 'e', 'd', 0,
    'W', 'A', '_', 'A', 'l', 'w', 'a', 'y', 's', 'S', 'h', 'o', 'w', 'T', 'o', 'o', 'l', 'T', 'i', 'p', 's', 0,
    'W', 'A', '_', 'N', 'o', 'M', 'o', 'u', 's', 'e', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'S', 'e', 't', 'L', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'L', 'a', 'y', 'o', 'u', 't', 'O', 'n', 'E', 'n', 't', 'i', 'r', 'e', 'R', 'e', 'c', 't', 0,
    'W', 'A', '_', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 's', 'i', 'z', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'W', 'A', '_', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'W', 'A', '_', 'N', 'o', 'S', 'y', 's', 't', 'e', 'm', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'C', 'l', 'o', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 'h', 'a', 'd', 'e', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'Q', 't', ':', ':', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 's', 0,
    'p', 'y', 'q', 't', 'S', 'e', 't', 'P', 'i', 'c', 'k', 'l', 'e', 'P', 'r', 'o', 't', 'o', 'c', 'o', 'l', 0,
    'q', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 't', ':', ':', 'D', 'a', 'y', 'O', 'f', 'W', 'e', 'e', 'k', '>', 0,
    'b', 'u', 'i', 'l', 'd', 'C', 'p', 'u', 'A', 'r', 'c', 'h', 'i', 't', 'e', 'c', 't', 'u', 'r', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'E', 'n', 't', 'i', 't', 'y', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'a', 'u', 't', 'o', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'r', 'e', 'a', 'd', 'N', 'e', 'x', 't', 'S', 't', 'a', 'r', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    'I', 'n', 'c', 'l', 'u', 'd', 'e', 'C', 'h', 'i', 'l', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 's', 0,
    'i', 's', 'S', 't', 'a', 'n', 'd', 'a', 'l', 'o', 'n', 'e', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 'I', 'd', 's', 0,
    'Q', 'T', 'i', 'm', 'e', 'L', 'i', 'n', 'e', ':', ':', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'i', 'm', 'e', 'C', 'r', 'i', 't', 'i', 'c', 'a', 'l', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'D', 'e', 't', 'e', 'c', 't', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'A', 'c', 'c', 'o', 'u', 'n', 't', 'i', 'n', 'g', 'S', 't', 'y', 'l', 'e', 0,
    'C', 'o', 'n', 'v', 'e', 'r', 't', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'T', 'o', 'N', 'u', 'l', 'l', 0,
    'Q', 'S', 't', 'a', 't', 'e', 'M', 'a', 'c', 'h', 'i', 'n', 'e', ':', ':', 'E', 'r', 'r', 'o', 'r', 0,
    'A', 'p', 'p', 'L', 'o', 'c', 'a', 'l', 'D', 'a', 't', 'a', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'G', 'e', 'n', 'e', 'r', 'i', 'c', 'C', 'a', 'c', 'h', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 's', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'D', 'y', 'n', 'a', 'm', 'i', 'c', 'S', 'o', 'r', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'F', 'i', 'x', 'e', 'd', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'i', 's', 'A', 't', 'o', 'm', 'i', 'c', 'S', 'y', 'n', 'c', 'R', 'e', 'q', 'u', 'i', 'r', 'e', 'd', 0,
    's', 'e', 't', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'I', 'n', 'p', 'u', 't', 'F', 'i', 'l', 'e', 0,
    'r', 'e', 'a', 'd', 'A', 'l', 'l', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'E', 'x', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'J', 'e', 'l', 'l', 'y', 'B', 'e', 'a', 'n', '_', 'M', 'R', '2', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'J', 'e', 'l', 'l', 'y', 'B', 'e', 'a', 'n', '_', 'M', 'R', '1', 0,
    'd', 'y', 'n', 'a', 'm', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'N', 'a', 'm', 'e', 's', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 's', 'F', 'o', 'r', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'Q', 'M', 'e', 't', 'a', 'T', 'y', 'p', 'e', ':', ':', 'T', 'y', 'p', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'L', 'o', 'c', 'k', 'F', 'i', 'l', 'e', ':', ':', 'L', 'o', 'c', 'k', 'E', 'r', 'r', 'o', 'r', 0,
    'P', 's', 'a', 'l', 't', 'e', 'r', 'P', 'a', 'h', 'l', 'a', 'v', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'r', 'a', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'H', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'R', 'e', 'j', 'e', 'c', 't', 'G', 'r', 'o', 'u', 'p', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'B', 'r', 'i', 't', 'i', 's', 'h', 'V', 'i', 'r', 'g', 'i', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'B', 'o', 's', 'n', 'i', 'a', 'A', 'n', 'd', 'H', 'e', 'r', 'z', 'e', 'g', 'o', 'w', 'i', 'n', 'a', 0,
    'A', 'm', 'e', 'r', 'i', 'c', 'a', 'n', 'S', 'i', 'g', 'n', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'M', 'i', 's', 's', 'i', 'n', 'g', 'N', 'a', 'm', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'e', 'm', 'i', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'o', 'l', 'u', 'm', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 's', 'T', 'r', 'a', 'n', 's', 'a', 'c', 't', 'i', 'o', 'n', 'S', 't', 'a', 'r', 't', 'e', 'd', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'F', 'i', 'l', 'e', 'M', 'o', 'd', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'T', 'i', 'm', 'e', 0,
    'f', 'r', 'o', 'm', 'N', 'a', 't', 'i', 'v', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 's', 0,
    't', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 'A', 'b', 'b', 'r', 'e', 'v', 'i', 'a', 't', 'i', 'o', 'n', 0,
    'm', 's', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'S', 't', 'a', 'r', 't', 'O', 'f', 'D', 'a', 'y', 0,
    'Q', 'D', 'a', 't', 'e', ':', ':', 'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'T', 'r', 'a', 'c', 'k', 'i', 'n', 'g', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'L', 'e', 'a', 'v', 'e', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'E', 'n', 't', 'e', 'r', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 0,
    'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'L', 'a', 'y', 'o', 'u', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 'd', 0,
    'p', 'y', 'q', 't', 'R', 'e', 's', 't', 'o', 'r', 'e', 'I', 'n', 'p', 'u', 't', 'H', 'o', 'o', 'k', 0,
    's', 'e', 't', 'I', 'g', 'n', 'o', 'r', 'e', 'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', 0,
    'm', 'a', 'p', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'o', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'D', 'r', 'a', 'g', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'r', 'o', 'w', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'D', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'T', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'L', 'i', 's', 't', 'C', 'o', 'n', 't', 'r', 'o', 'l', 's', 0,
    'T', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'T', 'e', 'x', 't', 'C', 'o', 'n', 't', 'r', 'o', 'l', 's', 0,
    'Q', 't', ':', ':', 'T', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'Q', 't', ':', ':', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 'u', 's', 'p', 'e', 'n', 'd', 'e', 'd', 0,
    'Q', 't', ':', ':', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 't', 'a', 't', 'e', 0,
    'Q', 't', ':', ':', 'F', 'i', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 't', ':', ':', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 'S', 't', 'a', 't', 'e', 's', 0,
    'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 'S', 't', 'a', 't', 'i', 'o', 'n', 'a', 'r', 'y', 0,
    'Q', 't', ':', ':', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 'S', 'y', 's', 't', 'e', 'm', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'Q', 't', ':', ':', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'H', 'i', 'n', 't', 's', 0,
    'I', 'm', 'h', 'U', 'r', 'l', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 'O', 'n', 'l', 'y', 0,
    'A', 'A', '_', 'P', 'l', 'u', 'g', 'i', 'n', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'A', '_', 'U', 's', 'e', 'S', 'o', 'f', 't', 'w', 'a', 'r', 'e', 'O', 'p', 'e', 'n', 'G', 'L', 0,
    'A', 'A', '_', 'U', 's', 'e', 'H', 'i', 'g', 'h', 'D', 'p', 'i', 'P', 'i', 'x', 'm', 'a', 'p', 's', 0,
    'I', 't', 'e', 'm', 'N', 'e', 'v', 'e', 'r', 'H', 'a', 's', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'I', 'n', 'i', 't', 'i', 'a', 'l', 'S', 'o', 'r', 't', 'O', 'r', 'd', 'e', 'r', 'R', 'o', 'l', 'e', 0,
    'Q', 't', ':', ':', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'Q', 'u', 'e', 'r', 'y', 0,
    'S', 'm', 'o', 'o', 't', 'h', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'S', 'y', 's', 't', 'e', 'm', 'L', 'o', 'c', 'a', 'l', 'e', 'L', 'o', 'n', 'g', 'D', 'a', 't', 'e', 0,
    'B', 'o', 't', 't', 'o', 'm', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'S', 'm', 'a', 'l', 'l', '_', 'S', 'c', 'h', 'w', 'a', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'm', 'a', 'c', 'r', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'D', 'o', 'u', 'b', 'l', 'e', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'L', 'a', 's', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'R', 'e', 'd', 'i', 'a', 'l', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'g', 'g', 'l', 'e', 'C', 'a', 'l', 'l', 'H', 'a', 'n', 'g', 'u', 'p', 0,
    'K', 'e', 'y', '_', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'R', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 'A', 'd', 'j', 'u', 's', 't', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'D', 'o', 'u', 'b', 'l', 'e', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'P', 'o', 's', 't', 'H', 'a', 'n', 'j', 'a', 0,
    'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 'A', 'l', 'p', 'h', 'a', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'A', 'c', 'c', 'e', 'p', 't', 'T', 'o', 'u', 'c', 'h', 'E', 'v', 'e', 'n', 't', 's', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'O', 'p', 'a', 'q', 'u', 'e', 'S', 'i', 'z', 'e', 'G', 'r', 'i', 'p', 0,
    'W', 'A', '_', 'W', 'i', 'n', 'd', 'o', 'w', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'R', 'e', 'p', 'a', 'r', 'e', 'n', 't', 'e', 'd', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'N', 'o', 'C', 'l', 'i', 'c', 'k', 'T', 'h', 'r', 'o', 'u', 'g', 'h', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 'y', 's', 'O', 'n', 'T', 'o', 'p', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 'y', 's', 't', 'e', 'm', 'M', 'e', 'n', 'u', 'H', 'i', 'n', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', '_', 'M', 'a', 's', 'k', 0,
    'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 'M', 'a', 's', 'k', 0,
    'Q', 't', ':', ':', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'q', 'E', 'n', 'v', 'i', 'r', 'o', 'n', 'm', 'e', 'n', 't', 'V', 'a', 'r', 'i', 'a', 'b', 'l', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'S', 't', 'o', 'r', 'a', 'g', 'e', 'I', 'n', 'f', 'o', '>', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'Q', 'U', 'u', 'i', 'd', ':', ':', 'S', 't', 'r', 'i', 'n', 'g', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'l', 'l', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    'q', 'u', 'e', 'r', 'y', 'V', 'a', 'l', 'u', 'e', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 0,
    'Q', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', ':', ':', 'N', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', ':', ':', 'T', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'I', 'n', 't', 'e', 'r', 'r', 'u', 'p', 't', 'i', 'o', 'n', 0,
    'r', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'F', 'i', 'n', 'd', 'e', 'r', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'R', 'e', 's', 't', 'o', 'r', 'e', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'a', 'd', 'd', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'N', 'o', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'S', 't', 'a', 't', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'G', 'e', 'n', 'e', 'r', 'i', 'c', 'D', 'a', 't', 'a', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'o', 'r', 't', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'A', 'c', 'c', 'e', 'p', 't', 's', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    's', 'e', 'n', 'd', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'F', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'W', 'r', 'i', 't', 'e', 'F', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'e', 'd', 'M', 'a', 't', 'c', 'h', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'n', 'v', 'i', 'r', 'o', 'n', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'M', 'a', 'n', 'a', 'g', 'e', 'd', 'I', 'n', 'p', 'u', 't', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    's', 'e', 't', 'W', 'o', 'r', 'k', 'i', 'n', 'g', 'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'L', 'o', 'l', 'l', 'i', 'p', 'o', 'p', '_', 'M', 'R', '1', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'S', 'i', 'g', 'n', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'M', 'e', 't', 'a', 'T', 'y', 'p', 'e', ':', ':', 'T', 'y', 'p', 'e', 'F', 'l', 'a', 'g', 0,
    'Q', 'M', 'e', 't', 'a', 'M', 'e', 't', 'h', 'o', 'd', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'S', 't', 'a', 'l', 'e', 'L', 'o', 'c', 'k', 'F', 'i', 'l', 'e', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'e', 'd', 'L', 'i', 's', 't', 0,
    'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'S', 'i', 'm', 'p', 'l', 'i', 'f', 'i', 'e', 'd', 'H', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    's', 't', 'a', 'n', 'd', 'a', 'l', 'o', 'n', 'e', 'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'T', 'y', 'p', 'e', 0,
    'A', 'r', 'd', 'h', 'a', 'm', 'a', 'g', 'a', 'd', 'h', 'i', 'P', 'r', 'a', 'k', 'r', 'i', 't', 0,
    'A', 'n', 'c', 'i', 'e', 'n', 't', 'N', 'o', 'r', 't', 'h', 'A', 'r', 'a', 'b', 'i', 'a', 'n', 0,
    'B', 'o', 'u', 'n', 'd', 'e', 'd', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', ':', ':', 'L', 'o', 'a', 'd', 'H', 'i', 'n', 't', 's', 0,
    'T', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'B', 'y', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'Q', 'I', 't', 'e', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'l', 0,
    'Q', 'I', 't', 'e', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'R', 'a', 'n', 'g', 'e', 0,
    'c', 'h', 'a', 'n', 'n', 'e', 'l', 'B', 'y', 't', 'e', 's', 'W', 'r', 'i', 't', 't', 'e', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'W', 'r', 'i', 't', 'e', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'r', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'B', 'y', 't', 'e', 's', 'W', 'r', 'i', 't', 't', 'e', 'n', 0,
    'Q', 'I', 'O', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'O', 'p', 'e', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'I', 'd', 'e', 'n', 't', 'i', 't', 'y', 'P', 'r', 'o', 'x', 'y', 'M', 'o', 'd', 'e', 'l', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 's', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'f', 'r', 'o', 'm', 'M', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'E', 'p', 'o', 'c', 'h', 0,
    'r', 'o', 'l', 'l', 'b', 'a', 'c', 'k', 'T', 'r', 'a', 'n', 's', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    'S', 't', 'a', 't', 'e', 'M', 'a', 'c', 'h', 'i', 'n', 'e', 'W', 'r', 'a', 'p', 'p', 'e', 'd', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'R', 'e', 's', 'i', 'z', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'M', 'o', 'u', 's', 'e', 'T', 'r', 'a', 'c', 'k', 'i', 'n', 'g', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'P', 'a', 'r', 'e', 'n', 't', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'p', 'y', 'q', 't', 'R', 'e', 'm', 'o', 'v', 'e', 'I', 'n', 'p', 'u', 't', 'H', 'o', 'o', 'k', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'O', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 's', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'f', 'r', 'o', 'm', 'P', 'e', 'r', 'c', 'e', 'n', 't', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    't', 'a', 'r', 'g', 'e', 't', 'S', 't', 'a', 't', 'e', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'P', 'r', 'o', 'x', 'y', 'M', 'o', 'd', 'e', 'l', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'a', 'b', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 0,
    'p', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 'L', 'i', 's', 't', 0,
    'm', 'o', 'd', 'e', 'l', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'R', 'e', 's', 'e', 't', 0,
    'T', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'A', 'l', 'l', 'C', 'o', 'n', 't', 'r', 'o', 'l', 's', 0,
    'Q', 't', ':', ':', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'l', 'a', 'g', 's', 0,
    'R', 'o', 't', 'a', 't', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'I', 'n', 'a', 'c', 't', 'i', 'v', 'e', 0,
    'Q', 't', ':', ':', 'H', 'i', 't', 'T', 'e', 's', 't', 'A', 'c', 'c', 'u', 'r', 'a', 'c', 'y', 0,
    'Q', 't', ':', ':', 'F', 'i', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'C', 'u', 'r', 's', 'o', 'r', 'M', 'o', 'v', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 't', ':', ':', 'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 'S', 't', 'a', 't', 'e', 0,
    'I', 'm', 'h', 'N', 'o', 'P', 'r', 'e', 'd', 'i', 'c', 't', 'i', 'v', 'e', 'T', 'e', 'x', 't', 0,
    'Q', 't', ':', ':', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'H', 'i', 'n', 't', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 'I', 't', 'e', 'm', 'S', 'h', 'a', 'p', 'e', 0,
    'A', 'A', '_', 'U', 's', 'e', 'D', 'e', 's', 'k', 't', 'o', 'p', 'O', 'p', 'e', 'n', 'G', 'L', 0,
    'I', 't', 'e', 'm', 'I', 's', 'U', 's', 'e', 'r', 'C', 'h', 'e', 'c', 'k', 'a', 'b', 'l', 'e', 0,
    'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'r', 'R', 'o', 'l', 'e', 0,
    'L', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'A', 'u', 't', 'o', 0,
    'Q', 't', ':', ':', 'L', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'I', 'm', 'P', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'I', 'm', 'M', 'a', 'x', 'i', 'm', 'u', 'm', 'T', 'e', 'x', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'Q', 't', ':', ':', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'Q', 't', ':', ':', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'Q', 't', ':', ':', 'S', 'c', 'r', 'o', 'l', 'l', 'B', 'a', 'r', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'Q', 't', ':', ':', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 's', 0,
    'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', '_', 'M', 'a', 's', 'k', 0,
    'R', 'i', 'g', 'h', 't', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 'M', 'o', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'c', 'o', 'm', 'm', 'a', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'b', 'r', 'e', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 't', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'b', 'o', 'v', 'e', 'c', 'o', 'm', 'm', 'a', 0,
    'K', 'e', 'y', '_', 'A', 'u', 'd', 'i', 'o', 'C', 'y', 'c', 'l', 'e', 'T', 'r', 'a', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'A', 'u', 'd', 'i', 'o', 'R', 'a', 'n', 'd', 'o', 'm', 'P', 'l', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'M', 'o', 'n', 'B', 'r', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'C', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'P', 'r', 'e', 'H', 'a', 'n', 'j', 'a', 0,
    'K', 'e', 'y', '_', 'Z', 'e', 'n', 'k', 'a', 'k', 'u', '_', 'H', 'a', 'n', 'k', 'a', 'k', 'u', 0,
    'K', 'e', 'y', '_', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 0,
    'W', 'A', '_', 'S', 't', 'y', 'l', 'e', 'S', 'h', 'e', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'W', 'A', '_', 'A', 'l', 'w', 'a', 'y', 's', 'S', 't', 'a', 'c', 'k', 'O', 'n', 'T', 'o', 'p', 0,
    'W', 'A', '_', 'D', 'o', 'n', 't', 'S', 'h', 'o', 'w', 'O', 'n', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'W', 'A', '_', 'S', 't', 'y', 'l', 'e', 'd', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'S', 'h', 'o', 'w', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'c', 't', 0,
    'W', 'A', '_', 'X', '1', '1', 'O', 'p', 'e', 'n', 'G', 'L', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    'W', 'A', '_', 'T', 'i', 'n', 't', 'e', 'd', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'W', 'A', '_', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'W', 'A', '_', 'O', 'p', 'a', 'q', 'u', 'e', 'P', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 't', ':', ':', 'W', 'i', 'd', 'g', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'C', 'u', 's', 't', 'o', 'm', 'i', 'z', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 'H', 'i', 'n', 't', 0,
    'F', 'r', 'a', 'm', 'e', 'l', 'e', 's', 's', 'W', 'i', 'n', 'd', 'o', 'w', 'H', 'i', 'n', 't', 0,
    'G', 'r', 'o', 'u', 'p', 'S', 'w', 'i', 't', 'c', 'h', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 'M', 'a', 'p', '<', 'i', 'n', 't', ',', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', '>', 0,
    'w', 'r', 'i', 't', 'e', 'S', 't', 'a', 'r', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    's', 'k', 'i', 'p', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'N', 'o', 't', 'W', 'e', 'l', 'l', 'F', 'o', 'r', 'm', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'e', 'n', 't', 'i', 't', 'y', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    'a', 'l', 'l', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'q', 'u', 'e', 'r', 'y', 'P', 'a', 'i', 'r', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 0,
    's', 'e', 't', 'Q', 'u', 'e', 'r', 'y', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 's', 0,
    'S', 't', 'r', 'i', 'p', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'S', 'l', 'a', 's', 'h', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 's', 'I', 'd', 'T', 'o', 'I', 'a', 'n', 'a', 'I', 'd', 's', 0,
    'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'd', 'a', 'y', 'l', 'i', 'g', 'h', 't', 'T', 'i', 'm', 'e', 'O', 'f', 'f', 's', 'e', 't', 0,
    's', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'T', 'i', 'm', 'e', 'O', 'f', 'f', 's', 'e', 't', 0,
    'y', 'i', 'e', 'l', 'd', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'r', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'S', 'c', 'i', 'e', 'n', 't', 'i', 'f', 'i', 'c', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    't', 'o', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 0,
    'c', 'a', 'n', 'c', 'e', 'l', 'D', 'e', 'l', 'a', 'y', 'e', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 'A', 's', 's', 'i', 'g', 'n', 'e', 'd', 0,
    's', 'e', 't', 'T', 'e', 's', 't', 'M', 'o', 'd', 'e', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'S', 'o', 'r', 't', 'L', 'o', 'c', 'a', 'l', 'e', 'A', 'w', 'a', 'r', 'e', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'K', 'e', 'y', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'Q', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'r', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'n', 'a', 'm', 'e', 'd', 'C', 'a', 'p', 't', 'u', 'r', 'e', 'G', 'r', 'o', 'u', 'p', 's', 0,
    'p', 'a', 't', 't', 'e', 'r', 'n', 'E', 'r', 'r', 'o', 'r', 'O', 'f', 'f', 's', 'e', 't', 0,
    'Q', 'R', 'e', 'g', 'E', 'x', 'p', ':', ':', 'C', 'a', 'r', 'e', 't', 'M', 'o', 'd', 'e', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'E', 'n', 'v', 'i', 'r', 'o', 'n', 'm', 'e', 'n', 't', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'M', 'a', 'r', 's', 'h', 'm', 'a', 'l', 'l', 'o', 'w', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'C', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'o', 'r', 0,
    'c', 'o', 'n', 'n', 'e', 'c', 't', 'S', 'l', 'o', 't', 's', 'B', 'y', 'N', 'a', 'm', 'e', 0,
    'i', 'n', 's', 't', 'a', 'l', 'l', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'R', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'q', 'S', 'e', 't', 'M', 'e', 's', 's', 'a', 'g', 'e', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'Q', 'M', 'e', 's', 's', 'a', 'g', 'e', 'L', 'o', 'g', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'A', 'l', 't', 'e', 'r', 'n', 'a', 't', 'e', 'Q', 'u', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'N', 'a', 'm', 'e', 0,
    'O', 'l', 'd', 'H', 'u', 'n', 'g', 'a', 'r', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'V', 'a', 'r', 'a', 'n', 'g', 'K', 's', 'h', 'i', 't', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'e', 'n', 'd', 'e', 'K', 'i', 'k', 'a', 'k', 'u', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'm', 'i', 't', 'G', 'r', 'o', 'u', 'p', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'A', 'r', 'a', 'b', 'E', 'm', 'i', 'r', 'a', 't', 'e', 's', 0,
    'S', 'y', 'r', 'i', 'a', 'n', 'A', 'r', 'a', 'b', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 0,
    'S', 'a', 'o', 'T', 'o', 'm', 'e', 'A', 'n', 'd', 'P', 'r', 'i', 'n', 'c', 'i', 'p', 'e', 0,
    'S', 'a', 'i', 'n', 't', 'K', 'i', 't', 't', 's', 'A', 'n', 'd', 'N', 'e', 'v', 'i', 's', 0,
    'H', 'i', 'e', 'r', 'o', 'g', 'l', 'y', 'p', 'h', 'i', 'c', 'L', 'u', 'w', 'i', 'a', 'n', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', ':', ':', 'L', 'o', 'a', 'd', 'H', 'i', 'n', 't', 0,
    'U', 'n', 't', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'e', 'd', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'U', 'n', 't', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'e', 'd', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'R', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'M', 'o', 'd', 'e', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'h', 'i', 's', 't', 'o', 'r', 'y', 'T', 'y', 'p', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'F', 'i', 'l', 'e', 'S', 'y', 's', 't', 'e', 'm', 'W', 'a', 't', 'c', 'h', 'e', 'r', 0,
    'm', 'e', 't', 'a', 'd', 'a', 't', 'a', 'C', 'h', 'a', 'n', 'g', 'e', 'T', 'i', 'm', 'e', 0,
    'P', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'C', 'o', 'u', 'n', 't', 'e', 'r', 0,
    'Q', 'E', 'a', 's', 'i', 'n', 'g', 'C', 'u', 'r', 'v', 'e', ':', ':', 'T', 'y', 'p', 'e', 0,
    't', 'o', 'N', 'a', 't', 'i', 'v', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 's', 0,
    's', 'e', 't', 'P', 'r', 'e', 'c', 'i', 's', 'e', 'D', 'e', 'a', 'd', 'l', 'i', 'n', 'e', 0,
    'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', 'T', 'i', 'm', 'e', 'N', 'S', 'e', 'c', 's', 0,
    'f', 'r', 'o', 'm', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'E', 'p', 'o', 'c', 'h', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'U', 't', 'c', 0,
    's', 'e', 't', 'M', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'E', 'p', 'o', 'c', 'h', 0,
    'Q', 'C', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'i', 'c', 'H', 'a', 's', 'h', 0,
    'F', 'o', 'c', 'u', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'S', 't', 'a', 't', 'e', 'M', 'a', 'c', 'h', 'i', 'n', 'e', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'C', 'o', 'n', 't', 'e', 'n', 't', 's', 'R', 'e', 'c', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'W', 'h', 'e', 'e', 'l', 0,
    'L', 'e', 'a', 'v', 'e', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'M', 'o', 'd', 'e', 0,
    'E', 'n', 't', 'e', 'r', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'M', 'o', 'd', 'e', 0,
    'q', 'R', 'e', 'm', 'o', 'v', 'e', 'P', 'o', 's', 't', 'R', 'o', 'u', 't', 'i', 'n', 'e', 0,
    's', 'e', 't', 'Q', 'u', 'i', 't', 'L', 'o', 'c', 'k', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'E', 'v', 'e', 'n', 't', 'D', 'i', 's', 'p', 'a', 't', 'c', 'h', 'e', 'r', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'i', 'r', 'P', 'a', 't', 'h', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'P', 'o', 's', 't', 'e', 'd', 'E', 'v', 'e', 'n', 't', 's', 0,
    's', 'e', 't', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'o', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'D', 'o', 'm', 'a', 'i', 'n', 0,
    'u', 'n', 'k', 'n', 'o', 'w', 'n', 'O', 'p', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 's', 0,
    'P', 'a', 'r', 's', 'e', 'A', 's', 'L', 'o', 'n', 'g', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 'L', 'i', 'n', 'e', 'P', 'a', 'r', 's', 'e', 'r', 0,
    'Q', 'C', 'o', 'm', 'm', 'a', 'n', 'd', 'L', 'i', 'n', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'O', 'm', 'i', 't', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'E', 'q', 'u', 'a', 'l', 's', 0,
    'K', 'e', 'e', 'p', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'E', 'q', 'u', 'a', 'l', 's', 0,
    'I', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'E', 'x', 't', 'e', 'r', 'n', 'a', 'l', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    't', 'a', 'r', 'g', 'e', 't', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'M', 'o', 'd', 'e', 'l', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'r', 'o', 'w', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'M', 'o', 'v', 'e', 'd', 0,
    'b', 'e', 'g', 'i', 'n', 'R', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'b', 'e', 'g', 'i', 'n', 'I', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'S', 'o', 'r', 't', 'H', 'i', 'n', 't', 0,
    'N', 'o', 'L', 'a', 'y', 'o', 'u', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'H', 'i', 'n', 't', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'I', 't', 'e', 'm', 'M', 'o', 'd', 'e', 'l', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'L', 'o', 'o', 'p', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'l', 'a', 'g', 0,
    'S', 'w', 'i', 'p', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'B', 'e', 'g', 'i', 'n', 'N', 'a', 't', 'i', 'v', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'Q', 't', ':', ':', 'W', 'h', 'i', 't', 'e', 'S', 'p', 'a', 'c', 'e', 'M', 'o', 'd', 'e', 0,
    'P', 'r', 'i', 'm', 'a', 'r', 'y', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'N', 'a', 'v', 'i', 'g', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'N', 'o', 'n', 'e', 0,
    'Q', 't', ':', ':', 'N', 'a', 'v', 'i', 'g', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'd', 0,
    'L', 'o', 'g', 'i', 'c', 'a', 'l', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', 0,
    'I', 'm', 'h', 'P', 'r', 'e', 'f', 'e', 'r', 'L', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', 0,
    'I', 'm', 'h', 'P', 'r', 'e', 'f', 'e', 'r', 'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 0,
    'I', 'm', 'h', 'N', 'o', 'A', 'u', 't', 'o', 'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 0,
    'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'M', 'o', 'd', 'a', 'l', 'i', 't', 'y', 0,
    'M', 'a', 't', 'c', 'h', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 0,
    'I', 't', 'e', 'm', 'I', 's', 'A', 'u', 't', 'o', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    'I', 't', 'e', 'm', 'I', 's', 'U', 's', 'e', 'r', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'T', 'e', 'x', 't', 'R', 'o', 'l', 'e', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 'O', 'n', 'l', 'y', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'I', 'c', 'o', 'n', 'O', 'n', 'l', 'y', 0,
    'I', 'm', 'T', 'e', 'x', 't', 'B', 'e', 'f', 'o', 'r', 'e', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'I', 'm', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'A', 'c', 't', 'i', 'o', 'n', 's', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'P', 'r', 'e', 'v', 'e', 'n', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'M', 'e', 'n', 'u', 'B', 'a', 'r', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'B', 'a', 'c', 'k', 't', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'F', 'a', 's', 't', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'B', 'a', 'r', 'A', 'l', 'w', 'a', 'y', 's', 'O', 'f', 'f', 0,
    'A', 'l', 'l', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 's', 0,
    'L', 'e', 'f', 't', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'P', 'o', 'i', 'n', 't', 'i', 'n', 'g', 'H', 'a', 'n', 'd', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'r', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'u', 'c', 'h', 'p', 'a', 'd', 'T', 'o', 'g', 'g', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'r', 'a', 's', 't', 'A', 'd', 'j', 'u', 's', 't', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'b', 'o', 'v', 'e', 'r', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'D', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'S', 'p', 'e', 'c', 'i', 'a', 'l', 0,
    'K', 'e', 'y', '_', 'g', 'u', 'i', 'l', 'l', 'e', 'm', 'o', 't', 'r', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'p', 'e', 'r', 'i', 'o', 'd', 'c', 'e', 'n', 't', 'e', 'r', 'e', 'd', 0,
    'N', 'o', 'F', 'o', 'r', 'm', 'a', 't', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'D', 'i', 'f', 'f', 'u', 's', 'e', 'A', 'l', 'p', 'h', 'a', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'O', 'r', 'd', 'e', 'r', 'e', 'd', 'A', 'l', 'p', 'h', 'a', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'V', 'a', 'r', 'i', 'a', 'b', 'l', 'e', 'S', 'i', 'z', 'e', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'B', 'r', 'u', 's', 'h', 'e', 'd', 'M', 'e', 't', 'a', 'l', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'P', 'o', 'l', 'i', 's', 'h', 'e', 'd', 0,
    'W', 'A', '_', 'G', 'r', 'a', 'b', 'b', 'e', 'd', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'W', 'A', '_', 'C', 'u', 's', 't', 'o', 'm', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 0,
    'W', 'A', '_', 'U', 'p', 'd', 'a', 't', 'e', 's', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'A', 'l', 'i', 'g', 'n', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', '_', 'M', 'a', 's', 'k', 0,
    'p', 'y', 'q', 't', 'P', 'i', 'c', 'k', 'l', 'e', 'P', 'r', 'o', 't', 'o', 'c', 'o', 'l', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', '>', 0,
    'p', 'r', 'e', 't', 't', 'y', 'P', 'r', 'o', 'd', 'u', 'c', 't', 'N', 'a', 'm', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'o', 'k', 'e', 'n', 0,
    'w', 'r', 'i', 't', 'e', 'S', 't', 'a', 'r', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'E', 'm', 'p', 't', 'y', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 0,
    's', 'e', 't', 'E', 'n', 't', 'i', 't', 'y', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    'S', 'k', 'i', 'p', 'C', 'h', 'i', 'l', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 's', 0,
    'i', 's', 'E', 'n', 't', 'i', 't', 'y', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'P', 'a', 'r', 's', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    'i', 'a', 'n', 'a', 'I', 'd', 'T', 'o', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'I', 'd', 0,
    's', 'e', 't', 'U', 'p', 'd', 'a', 't', 'e', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'M', 'a', 'x', 'T', 'h', 'r', 'e', 'a', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'T', 'h', 'r', 'e', 'a', 'd', ':', ':', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    's', 'e', 't', 'F', 'i', 'e', 'l', 'd', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'a', 'u', 't', 'o', 'D', 'e', 't', 'e', 'c', 't', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 's', 0,
    'e', 'r', 'r', 'o', 'r', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'S', 't', 'a', 't', 'e', ':', ':', 'C', 'h', 'i', 'l', 'd', 'M', 'o', 'd', 'e', 0,
    's', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 's', 0,
    'A', 'p', 'p', 'C', 'o', 'n', 'f', 'i', 'g', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 's', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'i', 's', 'S', 'o', 'r', 't', 'L', 'o', 'c', 'a', 'l', 'e', 'A', 'w', 'a', 'r', 'e', 0,
    'd', 'y', 'n', 'a', 'm', 'i', 'c', 'S', 'o', 'r', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'W', 'i', 'l', 'd', 'c', 'a', 'r', 'd', 0,
    'Q', 'S', 'i', 'g', 'n', 'a', 'l', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    'l', 'a', 's', 't', 'C', 'a', 'p', 't', 'u', 'r', 'e', 'd', 'I', 'n', 'd', 'e', 'x', 0,
    'r', 'e', 'g', 'u', 'l', 'a', 'r', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'D', 'o', 'n', 't', 'C', 'a', 'p', 't', 'u', 'r', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'u', 'p', 'C', 'h', 'i', 'l', 'd', 'P', 'r', 'o', 'c', 'e', 's', 's', 0,
    's', 'y', 's', 't', 'e', 'm', 'E', 'n', 'v', 'i', 'r', 'o', 'n', 'm', 'e', 'n', 't', 0,
    'c', 'l', 'o', 's', 'e', 'W', 'r', 'i', 't', 'e', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'F', 'o', 'r', 'w', 'a', 'r', 'd', 'e', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 's', 0,
    'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'N', 'o', 'u', 'g', 'a', 't', '_', 'M', 'R', '1', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'E', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'Q', 'T', '_', 'T', 'R', 'A', 'N', 'S', 'L', 'A', 'T', 'E', '_', 'N', 'O', 'O', 'P', 0,
    'i', 's', 'S', 'i', 'g', 'n', 'a', 'l', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'e', 'r', 'S', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'N', 'a', 'm', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'u', 'f', 'f', 'i', 'x', 'F', 'o', 'r', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'm', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 'F', 'o', 'r', 'T', 'y', 'p', 'e', 0,
    'N', 'e', 'e', 'd', 's', 'C', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 0,
    'n', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'i', 's', 'C', 'r', 'i', 't', 'i', 'c', 'a', 'l', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'q', 'F', 'o', 'r', 'm', 'a', 't', 'L', 'o', 'g', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'f', 'o', 'r', 'm', 'a', 't', 't', 'e', 'd', 'D', 'a', 't', 'a', 'S', 'i', 'z', 'e', 0,
    'D', 'a', 't', 'a', 'S', 'i', 'z', 'e', 'I', 'e', 'c', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'Q', 'u', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'C', 'o', 'u', 'n', 't', 'r', 'y', 'N', 'a', 'm', 'e', 0,
    'S', 'i', 'g', 'n', 'W', 'r', 'i', 't', 'i', 'n', 'g', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'P', 'a', 'h', 'a', 'w', 'h', 'H', 'm', 'o', 'n', 'g', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'y', 'l', 'o', 't', 'i', 'N', 'a', 'g', 'r', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'o', 'r', 'a', 'S', 'o', 'm', 'p', 'e', 'n', 'g', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'e', 'i', 't', 'e', 'i', 'M', 'a', 'y', 'e', 'k', 'S', 'c', 'r', 'i', 'p', 't', 0,
    's', 't', 'a', 'n', 'd', 'a', 'l', 'o', 'n', 'e', 'D', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'm', 'e', 'a', 's', 'u', 'r', 'e', 'm', 'e', 'n', 't', 'S', 'y', 's', 't', 'e', 'm', 0,
    'T', 'r', 'i', 'n', 'i', 'd', 'a', 'd', 'A', 'n', 'd', 'T', 'o', 'b', 'a', 'g', 'o', 0,
    'R', 'u', 's', 's', 'i', 'a', 'n', 'F', 'e', 'd', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'm', 'i', 'n', 'i', 'c', 'a', 'n', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 0,
    'A', 'n', 't', 'i', 'g', 'u', 'a', 'A', 'n', 'd', 'B', 'a', 'r', 'b', 'u', 'd', 'a', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'P', 'a', 't', 'h', 0,
    'P', 'r', 'e', 'v', 'e', 'n', 't', 'U', 'n', 'l', 'o', 'a', 'd', 'H', 'i', 'n', 't', 0,
    'I', 'l', 'l', 'e', 'g', 'a', 'l', 'U', 'T', 'F', '8', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'U', 'n', 't', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'e', 'd', 'A', 'r', 'r', 'a', 'y', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'R', 'o', 'w', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'l', 'e', 'a', 'r', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'C', 'o', 'u', 'n', 't', 0,
    'i', 's', 'T', 'e', 'x', 't', 'M', 'o', 'd', 'e', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'E', 'x', 't', 'r', 'a', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 's', 0,
    'c', 'a', 'n', 'o', 'n', 'i', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'W', 'a', 'i', 't', 'F', 'o', 'r', 'M', 'o', 'r', 'e', 'E', 'v', 'e', 'n', 't', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    's', 'e', 't', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'E', 'p', 'o', 'c', 'h', 0,
    't', 'o', 'M', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'E', 'p', 'o', 'c', 'h', 0,
    'c', 'o', 'm', 'm', 'i', 't', 'T', 'r', 'a', 'n', 's', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'w', 'r', 'i', 't', 'e', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'H', 'a', 's', 'h', 0,
    'w', 'r', 'i', 't', 'e', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'L', 'i', 's', 't', 0,
    'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'D', 'r', 'o', 'p', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'H', 'e', 'l', 'p', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'T', 'i', 't', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'i', 's', 'Q', 'u', 'i', 't', 'L', 'o', 'c', 'k', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'i', 'n', 's', 't', 'a', 'l', 'l', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'o', 'r', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'P', 'a', 't', 'h', 0,
    'i', 'g', 'n', 'o', 'r', 'e', 'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', 0,
    't', 'o', 'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'i', 's', 'N', 'e', 'g', 'a', 't', 'i', 'v', 'e', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'i', 's', 'U', 'n', 's', 'i', 'g', 'n', 'e', 'd', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'Q', 'C', 'b', 'o', 'r', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', 0,
    'Q', 'C', 'b', 'o', 'r', 'S', 't', 'r', 'e', 'a', 'm', 'W', 'r', 'i', 't', 'e', 'r', 0,
    'E', 'x', 'p', 'e', 'c', 't', 'e', 'd', 'B', 'a', 's', 'e', '6', '4', 'u', 'r', 'l', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'U', 't', 'f', '8', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'I', 'l', 'l', 'e', 'g', 'a', 'l', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 'M', 'a', 't', 'c', 'h', 'e', 'r', 0,
    'B', 'a', 's', 'e', '6', '4', 'U', 'r', 'l', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    't', 'o', 'P', 'e', 'r', 'c', 'e', 'n', 't', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'r', 'e', 's', 'e', 't', 'I', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'D', 'a', 't', 'a', 0,
    'h', 'e', 'a', 'd', 'e', 'r', 'D', 'a', 't', 'a', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'N', 'a', 't', 'i', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'i', 'm', 'e', 0,
    'D', 'e', 'l', 'e', 't', 'e', 'W', 'h', 'e', 'n', 'S', 't', 'o', 'p', 'p', 'e', 'd', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'H', 'i', 'd', 'd', 'e', 'n', 0,
    'T', 'a', 'p', 'A', 'n', 'd', 'H', 'o', 'l', 'd', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 'P', 'r', 'e', 's', 's', 'e', 'd', 0,
    'D', 'e', 'v', 'i', 'c', 'e', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 's', 0,
    'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'H', 'i', 'g', 'h', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'Q', 't', ':', ':', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'N', 'o', 'T', 'e', 'x', 't', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'n', 't', 'a', 'i', 'n', 's', 'I', 't', 'e', 'm', 'S', 'h', 'a', 'p', 'e', 0,
    'A', 'A', '_', 'X', '1', '1', 'I', 'n', 'i', 't', 'T', 'h', 'r', 'e', 'a', 'd', 's', 0,
    'I', 't', 'e', 'm', 'I', 's', 'D', 'r', 'o', 'p', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'I', 't', 'e', 'm', 'I', 's', 'D', 'r', 'a', 'g', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'T', 'e', 'x', 't', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 'R', 'o', 'l', 'e', 0,
    'I', 'm', 'A', 'n', 'c', 'h', 'o', 'r', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'I', 'm', 'T', 'e', 'x', 't', 'A', 'f', 't', 'e', 'r', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'I', 'm', 'C', 'u', 'r', 's', 'o', 'r', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'I', 'm', 'S', 'u', 'r', 'r', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'T', 'e', 'x', 't', 0,
    'C', 'u', 's', 't', 'o', 'm', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'Q', 't', ':', ':', 'C', 'l', 'i', 'p', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'B', 'a', 'r', 'A', 'l', 'w', 'a', 'y', 's', 'O', 'n', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'B', 'a', 'r', 'A', 's', 'N', 'e', 'e', 'd', 'e', 'd', 0,
    'B', 'o', 't', 't', 'o', 'm', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'T', 'o', 'p', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 0,
    'U', 'I', '_', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'T', 'o', 'o', 'l', 'B', 'o', 'x', 0,
    'U', 'I', '_', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'T', 'o', 'o', 'l', 't', 'i', 'p', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 0,
    'K', 'e', 'y', '_', 'M', 'i', 'c', 'V', 'o', 'l', 'u', 'm', 'e', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'R', 'o', 't', 'a', 't', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 's', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'd', 'o', 't', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'b', 'o', 'v', 'e', 'd', 'o', 't', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'J', 'e', 'o', 'n', 'j', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'R', 'o', 'm', 'a', 'j', 'a', 0,
    'K', 'e', 'y', '_', 't', 'h', 'r', 'e', 'e', 'q', 'u', 'a', 'r', 't', 'e', 'r', 's', 0,
    'K', 'e', 'y', '_', 't', 'h', 'r', 'e', 'e', 's', 'u', 'p', 'e', 'r', 'i', 'o', 'r', 0,
    'K', 'e', 'y', '_', 'g', 'u', 'i', 'l', 'l', 'e', 'm', 'o', 't', 'l', 'e', 'f', 't', 0,
    'N', 'o', 'O', 'p', 'a', 'q', 'u', 'e', 'D', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'T', 'a', 'b', 'l', 'e', 't', 'T', 'r', 'a', 'c', 'k', 'i', 'n', 'g', 0,
    'W', 'A', '_', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'W', 'A', '_', 'P', 'a', 'i', 'n', 't', 'U', 'n', 'c', 'l', 'i', 'p', 'p', 'e', 'd', 0,
    'W', 'A', '_', 'O', 'u', 't', 's', 'i', 'd', 'e', 'W', 'S', 'R', 'a', 'n', 'g', 'e', 0,
    'W', 'A', '_', 'W', 'i', 'n', 'd', 'o', 'w', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'W', 'A', '_', 'K', 'e', 'y', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'W', 'A', '_', 'S', 't', 'a', 't', 'i', 'c', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'E', 'l', 'i', 'd', 'e', 'M', 'o', 'd', 'e', 0,
    'Q', 't', ':', ':', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 'F', 'l', 'a', 'g', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'M', 'i', 'm', 'e', 'T', 'y', 'p', 'e', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'P', 'o', 'i', 'n', 't', 'F', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'F', 'i', 'l', 'e', 'I', 'n', 'f', 'o', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'q', 'u', 'i', 'n', 't', '1', '6', '>', 0,
    'Q', 'S', 'y', 's', 'I', 'n', 'f', 'o', ':', ':', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    'w', 'r', 'i', 't', 'e', 'E', 'n', 'd', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'T', 'e', 'x', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'W', 'r', 'i', 't', 'e', 'r', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', 0,
    'E', 'n', 'c', 'o', 'd', 'e', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 's', 0,
    's', 'e', 'a', 'r', 'c', 'h', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 's', 0,
    's', 'y', 's', 't', 'e', 'm', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 'I', 'd', 0,
    'Q', 'T', 'i', 'm', 'e', 'L', 'i', 'n', 'e', ':', ':', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'E', 'x', 'p', 'i', 'r', 'y', 'T', 'i', 'm', 'e', 'o', 'u', 't', 0,
    'i', 'd', 'e', 'a', 'l', 'T', 'h', 'r', 'e', 'a', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'T', 'o', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'B', 'r', 'e', 'a', 'k', 'O', 'p', 'p', 'o', 'r', 't', 'u', 'n', 'i', 't', 'y', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'F', 'i', 'l', 'e', 0,
    'Q', 'S', 'y', 's', 't', 'e', 'm', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'p', 'o', 's', 't', 'D', 'e', 'l', 'a', 'y', 'e', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'c', 'h', 'i', 'l', 'd', 'M', 'o', 'd', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'w', 'r', 'i', 't', 'a', 'b', 'l', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'w', 'n', 'l', 'o', 'a', 'd', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'P', 'i', 'c', 't', 'u', 'r', 'e', 's', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'i', 'n', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'A', 'c', 'c', 'e', 'p', 't', 's', 'R', 'o', 'w', 0,
    'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 'D', 'e', 'n', 'i', 'e', 'd', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'f', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', ':', ':', 'S', 'c', 'o', 'p', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 'S', 'y', 'n', 't', 'a', 'x', 0,
    'Q', 'R', 'a', 'n', 'd', 'o', 'm', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'i', 'n', 'p', 'u', 't', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'w', 'o', 'r', 'k', 'i', 'n', 'g', 'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'c', 'l', 'o', 's', 'e', 'R', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'S', 'e', 'p', 'a', 'r', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 's', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'J', 'e', 'l', 'l', 'y', 'B', 'e', 'a', 'n', 0,
    'Q', 'G', 'e', 'n', 'e', 'r', 'i', 'c', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 0,
    'c', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'o', 'r', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'h', 'e', 'c', 'k', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'A', 'r', 'g', 's', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'C', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 0,
    'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'o', 'r', 'O', 'f', 'f', 's', 'e', 't', 0,
    's', 't', 'a', 't', 'i', 'c', 'M', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'P', 'o', 'i', 'n', 't', 'e', 'r', 'T', 'o', 'Q', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'N', 'e', 'e', 'd', 's', 'D', 'e', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 0,
    'i', 's', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'L', 'o', 'g', 'g', 'i', 'n', 'g', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    's', 'e', 't', 'S', 't', 'a', 'l', 'e', 'L', 'o', 'c', 'k', 'T', 'i', 'm', 'e', 0,
    'D', 'a', 't', 'a', 'S', 'i', 'z', 'e', 'S', 'I', 'F', 'o', 'r', 'm', 'a', 't', 0,
    't', 'o', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'M', 'a', 'n', 'i', 'c', 'h', 'a', 'e', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'a', 'u', 'r', 'a', 's', 'h', 't', 'r', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'P', 'h', 'o', 'e', 'n', 'i', 'c', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'l', 'd', 'P', 'e', 'r', 's', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'h', 'a', 'r', 'o', 's', 'h', 't', 'h', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'G', 'l', 'a', 'g', 'o', 'l', 'i', 't', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'D', 'e', 'v', 'a', 'n', 'a', 'g', 'a', 'r', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', 'U', 'K', 'S', 'y', 's', 't', 'e', 'm', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', 'U', 'S', 'S', 'y', 's', 't', 'e', 'm', 0,
    's', 'e', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'C', 'l', 'i', 'p', 'p', 'e', 'r', 't', 'o', 'n', 'I', 's', 'l', 'a', 'n', 'd', 0,
    'C', 'o', 'n', 'g', 'o', 'B', 'r', 'a', 'z', 'z', 'a', 'v', 'i', 'l', 'l', 'e', 0,
    'V', 'a', 't', 'i', 'c', 'a', 'n', 'C', 'i', 't', 'y', 'S', 't', 'a', 't', 'e', 0,
    'E', 'q', 'u', 'a', 't', 'o', 'r', 'i', 'a', 'l', 'G', 'u', 'i', 'n', 'e', 'a', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'U', 'n', 'c', 'o', 'd', 'e', 'd', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 0,
    'L', 'a', 'r', 'g', 'e', 'F', 'l', 'o', 'w', 'e', 'r', 'y', 'M', 'i', 'a', 'o', 0,
    'C', 'l', 'a', 's', 's', 'i', 'c', 'a', 'l', 'M', 'a', 'n', 'd', 'a', 'i', 'c', 0,
    'N', 'o', 'r', 'w', 'e', 'g', 'i', 'a', 'n', 'N', 'y', 'n', 'o', 'r', 's', 'k', 0,
    'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'i', 'o', 'n', 's', 'P', 'a', 't', 'h', 0,
    'l', 'i', 'c', 'e', 'n', 's', 'e', 'd', 'P', 'r', 'o', 'd', 'u', 'c', 't', 's', 0,
    'Q', 'J', 's', 'o', 'n', 'V', 'a', 'l', 'u', 'e', ':', ':', 'T', 'y', 'p', 'e', 0,
    'B', 'y', 'p', 'a', 's', 's', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'T', 'o', 'o', 'L', 'a', 'r', 'g', 'e', 0,
    's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 's', 'C', 'o', 'l', 'u', 'm', 'n', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'c', 'h', 'a', 'n', 'n', 'e', 'l', 'R', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 0,
    'r', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'C', 'o', 'u', 'n', 't', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'R', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'B', 'a', 's', 'e', 'N', 'a', 'm', 'e', 0,
    'M', 'a', 'p', 'P', 'r', 'i', 'v', 'a', 't', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 'L', 'o', 'o', 'p', 'L', 'o', 'c', 'k', 'e', 'r', 0,
    'X', '1', '1', 'E', 'x', 'c', 'l', 'u', 'd', 'e', 'T', 'i', 'm', 'e', 'r', 's', 0,
    'M', 'a', 'c', 'h', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'T', 'i', 'm', 'e', 0,
    'v', 'a', 'l', 'u', 'e', 'F', 'o', 'r', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 0,
    'r', 'e', 'l', 'a', 't', 'i', 'v', 'e', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'a', 'b', 's', 'o', 'l', 'u', 't', 'e', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'R', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', 'T', 'i', 'm', 'e', 0,
    't', 'o', 'S', 'e', 'c', 's', 'S', 'i', 'n', 'c', 'e', 'E', 'p', 'o', 'c', 'h', 0,
    's', 'e', 't', 'O', 'f', 'f', 's', 'e', 't', 'F', 'r', 'o', 'm', 'U', 't', 'c', 0,
    'S', 't', 'a', 'n', 'd', 'a', 'l', 'o', 'n', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'a', 'b', 'o', 'r', 't', 'T', 'r', 'a', 'n', 's', 'a', 'c', 't', 'i', 'o', 'n', 0,
    's', 't', 'a', 'r', 't', 'T', 'r', 'a', 'n', 's', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'e', 'a', 'd', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'H', 'a', 's', 'h', 0,
    'w', 'r', 'i', 't', 'e', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'M', 'a', 'p', 0,
    'r', 'e', 'a', 'd', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'L', 'i', 's', 't', 0,
    'w', 'r', 'i', 't', 'e', 'Q', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'C', 'l', 'i', 'c', 'k', 'e', 'd', 0,
    'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 'O', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 0,
    'A', 'c', 't', 'i', 'v', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'D', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    's', 'e', 't', 'S', 'e', 't', 'u', 'i', 'd', 'A', 'l', 'l', 'o', 'w', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'o', 'r', 0,
    's', 'e', 'n', 'd', 'P', 'o', 's', 't', 'e', 'd', 'E', 'v', 'e', 'n', 't', 's', 0,
    'o', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'Q', 'C', 'o', 'r', 'e', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'a', 'd', 'd', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'S', 'h', 'o', 'r', 't', 'O', 'p', 't', 'i', 'o', 'n', 'S', 't', 'y', 'l', 'e', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'Q', 'C', 'o', 'l', 'l', 'a', 't', 'o', 'r', 'S', 'o', 'r', 't', 'K', 'e', 'y', 0,
    'I', 'n', 'p', 'u', 't', 'O', 'u', 't', 'p', 'u', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'C', 'b', 'o', 'r', 'E', 'r', 'r', 'o', 'r', ':', ':', 'C', 'o', 'd', 'e', 0,
    'c', 'o', 'm', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 'L', 'e', 'v', 'e', 'l', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'b', 'e', 'g', 'i', 'n', 'M', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'e', 'n', 'd', 'R', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'e', 'n', 'd', 'I', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'S', 'o', 'r', 't', 'H', 'i', 'n', 't', 0,
    'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'e', 'd', 'T', 'i', 'm', 'e', 'r', 's', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'i', 'm', 'e', 'r', 's', 0,
    'h', 'a', 's', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 'E', 'v', 'e', 'n', 't', 's', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 't', ':', ':', 'C', 'h', 'e', 'c', 'k', 's', 'u', 'm', 'T', 'y', 'p', 'e', 0,
    'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 0,
    'Q', 't', ':', ':', 'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'T', 'y', 'p', 'e', 0,
    'R', 'e', 'p', 'l', 'a', 'c', 'e', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'P', 'a', 'n', 'N', 'a', 't', 'i', 'v', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'E', 'n', 'd', 'N', 'a', 't', 'i', 'v', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'W', 'h', 'i', 't', 'e', 'S', 'p', 'a', 'c', 'e', 'N', 'o', 'W', 'r', 'a', 'p', 0,
    'W', 'h', 'i', 't', 'e', 'S', 'p', 'a', 'c', 'e', 'N', 'o', 'r', 'm', 'a', 'l', 0,
    'L', 'o', 'g', 'i', 'c', 'a', 'l', 'M', 'o', 'v', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 't', ':', ':', 'G', 'e', 's', 't', 'u', 'r', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 't', ':', ':', 'G', 'e', 's', 't', 'u', 'r', 'e', 'S', 't', 'a', 't', 'e', 0,
    'I', 'm', 'h', 'N', 'o', 'T', 'e', 'x', 't', 'H', 'a', 'n', 'd', 'l', 'e', 's', 0,
    'I', 'm', 'h', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 'D', 'a', 't', 'a', 0,
    'I', 'm', 'h', 'L', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', 'O', 'n', 'l', 'y', 0,
    'I', 'm', 'h', 'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'O', 'n', 'l', 'y', 0,
    'I', 'm', 'h', 'P', 'r', 'e', 'f', 'e', 'r', 'N', 'u', 'm', 'b', 'e', 'r', 's', 0,
    'L', 'o', 'w', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'A', 'A', '_', 'N', 'a', 't', 'i', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 's', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'a', 'l', 0,
    'M', 'a', 't', 'c', 'h', 'F', 'i', 'x', 'e', 'd', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'I', 't', 'e', 'm', 'I', 's', 'S', 'e', 'l', 'e', 'c', 't', 'a', 'b', 'l', 'e', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'D', 'a', 't', 'a', 'R', 'o', 'l', 'e', 0,
    'P', 'a', 'r', 't', 'i', 'a', 'l', 'l', 'y', 'C', 'h', 'e', 'c', 'k', 'e', 'd', 0,
    'T', 'a', 'r', 'g', 'e', 't', 'M', 'o', 'v', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'A', 'n', 'c', 'h', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'O', 't', 'h', 'e', 'r', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'P', 'o', 'p', 'u', 'p', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'M', 'o', 'u', 's', 'e', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'U', 'n', 'i', 'q', 'u', 'e', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'S', 'y', 's', 't', 'e', 'm', 'L', 'o', 'c', 'a', 'l', 'e', 'D', 'a', 't', 'e', 0,
    'Q', 't', ':', ':', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 's', 0,
    'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', '_', 'M', 'a', 's', 'k', 0,
    'R', 'i', 'g', 'h', 't', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'N', 'o', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'C', 'l', 'o', 's', 'e', 'd', 'H', 'a', 'n', 'd', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'D', 'i', 'a', 'g', 'C', 'r', 'o', 's', 's', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'Q', 't', ':', ':', 'P', 'e', 'n', 'J', 'o', 'i', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'L', 'o', 'w', 'l', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'A', 'u', 'd', 'i', 'o', 'F', 'o', 'r', 'w', 'a', 'r', 'd', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'C', 'e', 'd', 'i', 'l', 'l', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'B', 'a', 'n', 'j', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'H', 'a', 'n', 'j', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'S', 't', 'a', 'r', 't', 0,
    'K', 'e', 'y', '_', 'q', 'u', 'e', 's', 't', 'i', 'o', 'n', 'd', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'n', 'o', 'b', 'r', 'e', 'a', 'k', 's', 'p', 'a', 'c', 'e', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'a', 'c', 'k', 'e', 't', 'R', 'i', 'g', 'h', 't', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'N', 'o', 'r', 'm', 'a', 'l', 'S', 'i', 'z', 'e', 0,
    'W', 'A', '_', 'D', 'e', 'l', 'e', 't', 'e', 'O', 'n', 'C', 'l', 'o', 's', 'e', 0,
    'W', 'A', '_', 'N', 'o', 'M', 'o', 'u', 's', 'e', 'R', 'e', 'p', 'l', 'a', 'y', 0,
    'W', 'A', '_', 'S', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'I', 'c', 'o', 'n', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'M', 'e', 't', 'a', 'l', 'S', 't', 'y', 'l', 'e', 0,
    'W', 'A', '_', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 'U', 'p', 'd', 'a', 't', 'e', 0,
    'W', 'A', '_', 'F', 'o', 'r', 'c', 'e', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'H', 'i', 'd', 'd', 'e', 'n', 0,
    'W', 'A', '_', 'P', 'a', 'i', 'n', 't', 'O', 'n', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'W', 'A', '_', 'M', 'o', 'u', 's', 'e', 'T', 'r', 'a', 'c', 'k', 'i', 'n', 'g', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 's', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'F', 'u', 'l', 'l', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'T', 'e', 'x', 't', 'H', 'i', 'd', 'e', 'M', 'n', 'e', 'm', 'o', 'n', 'i', 'c', 0,
    'T', 'e', 'x', 't', 'W', 'r', 'a', 'p', 'A', 'n', 'y', 'w', 'h', 'e', 'r', 'e', 0,
    'T', 'e', 'x', 't', 'S', 'h', 'o', 'w', 'M', 'n', 'e', 'm', 'o', 'n', 'i', 'c', 0,
    'Q', 't', ':', ':', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 's', 0,
    'Q', 't', ':', ':', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 's', 0,
    'P', 'Y', 'Q', 'T', '_', 'V', 'E', 'R', 'S', 'I', 'O', 'N', '_', 'S', 'T', 'R', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'O', 'b', 'j', 'e', 'c', 't', '*', '>', 0,
    'm', 'a', 'c', 'h', 'i', 'n', 'e', 'H', 'o', 's', 't', 'N', 'a', 'm', 'e', 0,
    'Q', 'S', 'y', 's', 'I', 'n', 'f', 'o', ':', ':', 'S', 'i', 'z', 'e', 's', 0,
    'w', 'r', 'i', 't', 'e', 'E', 'n', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 0,
    'w', 'r', 'i', 't', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'r', 'e', 'a', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'T', 'e', 'x', 't', 0,
    'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'O', 'f', 'f', 's', 'e', 't', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'i', 's', 'S', 't', 'a', 'r', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    'A', 's', 's', 'u', 'm', 'e', 'L', 'o', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 0,
    't', 'o', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'e', 't', 'I', 'd', 'n', 'W', 'h', 'i', 't', 'e', 'l', 'i', 's', 't', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'L', 'o', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'A', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', 0,
    'h', 'a', 's', 'D', 'a', 'y', 'l', 'i', 'g', 'h', 't', 'T', 'i', 'm', 'e', 0,
    't', 'o', 'g', 'g', 'l', 'e', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'I', 'n', 'h', 'e', 'r', 'i', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'H', 'i', 'g', 'h', 'e', 's', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'h', 'r', 'e', 'a', 'd', 'I', 'd', 0,
    'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', 'd', 'i', 'g', 'i', 't', 's', 0,
    'u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'd', 'i', 'g', 'i', 't', 's', 0,
    'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'D', 'i', 'g', 'i', 't', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'C', 'o', 'd', 'e', 'c', 's', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'U', 't', 'f', 'T', 'e', 'x', 't', 0,
    'b', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'R', 'e', 'a', 's', 'o', 'n', 's', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'T', 'e', 'm', 'p', 'l', 'a', 't', 'e', 0,
    's', 'e', 't', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'S', 't', 'a', 't', 'e', 0,
    'E', 'x', 'c', 'l', 'u', 's', 'i', 'v', 'e', 'S', 't', 'a', 't', 'e', 's', 0,
    'L', 'o', 'c', 'a', 't', 'e', 'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'A', 'p', 'p', 'D', 'a', 't', 'a', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'R', 'u', 'n', 't', 'i', 'm', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'e', 's', 'k', 't', 'o', 'p', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'K', 'e', 'y', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'Q', 'S', 'o', 'c', 'k', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 0,
    's', 'e', 't', 'S', 'e', 'n', 'd', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'b', 'e', 'g', 'i', 'n', 'W', 'r', 'i', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'h', 'a', 's', 'P', 'a', 'r', 't', 'i', 'a', 'l', 'M', 'a', 't', 'c', 'h', 0,
    'a', 'n', 'c', 'h', 'o', 'r', 'e', 'd', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'M', 'u', 'l', 't', 'i', 'l', 'i', 'n', 'e', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'N', 'o', 'P', 'a', 't', 't', 'e', 'r', 'n', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'm', 'o', 'v', 'e', 'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    't', 'r', 'y', 'L', 'o', 'c', 'k', 'F', 'o', 'r', 'W', 'r', 'i', 't', 'e', 0,
    's', 'e', 't', 'P', 'r', 'o', 'c', 'e', 's', 's', 'S', 't', 'a', 't', 'e', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'm', 'a', 'n', 'h', 'a', 't', 't', 'a', 'n', 'L', 'e', 'n', 'g', 't', 'h', 0,
    's', 't', 'a', 't', 'i', 'c', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 's', 0,
    's', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'P', 'a', 'u', 's', 'e', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'L', 'o', 'l', 'l', 'i', 'p', 'o', 'p', 0,
    'M', 'a', 'c', 'O', 'S', 'H', 'i', 'g', 'h', 'S', 'i', 'e', 'r', 'r', 'a', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'o', 'r', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 'O', 'f', 'f', 's', 'e', 't', 0,
    'Q', 'T', '_', 'T', 'R', '_', 'N', 'O', 'O', 'P', '_', 'U', 'T', 'F', '8', 0,
    'p', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'S', 'u', 'f', 'f', 'i', 'x', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'M', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 's', 0,
    'g', 'e', 'n', 'e', 'r', 'i', 'c', 'I', 'c', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 'F', 'o', 'r', 'D', 'a', 't', 'a', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 'F', 'o', 'r', 'F', 'i', 'l', 'e', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 'F', 'o', 'r', 'N', 'a', 'm', 'e', 0,
    'Q', 'M', 'e', 't', 'a', 'T', 'y', 'p', 'e', ':', ':', 'T', 'y', 'p', 'e', 0,
    'h', 'a', 's', 'N', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'm', 'e', 't', 'h', 'o', 'd', 'S', 'i', 'g', 'n', 'a', 't', 'u', 'r', 'e', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    'L', 'o', 'c', 'k', 'F', 'a', 'i', 'l', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'm', 'a', 't', 'c', 'h', 'i', 'n', 'g', 'L', 'o', 'c', 'a', 'l', 'e', 's', 0,
    'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'I', 's', 'o', 'C', 'o', 'd', 'e', 0,
    'B', 'h', 'a', 'i', 'k', 's', 'u', 'k', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'h', 'u', 'd', 'a', 'w', 'a', 'd', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'l', 'd', 'P', 'e', 'r', 'm', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'P', 'a', 'u', 'C', 'i', 'n', 'H', 'a', 'u', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'P', 'a', 'l', 'm', 'y', 'r', 'e', 'n', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'N', 'a', 'b', 'a', 't', 'a', 'e', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'u', 'n', 'd', 'a', 'n', 'e', 's', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'u', 'n', 'e', 'i', 'f', 'o', 'r', 'm', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'a', 'm', 'a', 'r', 'i', 't', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'l', 'd', 'I', 't', 'a', 'l', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'N', 'e', 'w', 'T', 'a', 'i', 'L', 'u', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'a', 'l', 'a', 'y', 'a', 'l', 'a', 'm', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'o', 'n', 'g', 'o', 'l', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'c', 'o', 'u', 'n', 't', 'r', 'y', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'O', 'u', 't', 'l', 'y', 'i', 'n', 'g', 'O', 'c', 'e', 'a', 'n', 'i', 'a', 0,
    'C', 'e', 'u', 't', 'a', 'A', 'n', 'd', 'M', 'e', 'l', 'i', 'l', 'l', 'a', 0,
    'A', 's', 'c', 'e', 'n', 's', 'i', 'o', 'n', 'I', 's', 'l', 'a', 'n', 'd', 0,
    'S', 'a', 'i', 'n', 't', 'B', 'a', 'r', 't', 'h', 'e', 'l', 'e', 'm', 'y', 0,
    'M', 'a', 'r', 's', 'h', 'a', 'l', 'l', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'F', 'r', 'e', 'n', 'c', 'h', 'P', 'o', 'l', 'y', 'n', 'e', 's', 'i', 'a', 0,
    'F', 'a', 'l', 'k', 'l', 'a', 'n', 'd', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'C', 'h', 'r', 'i', 's', 't', 'm', 'a', 's', 'I', 's', 'l', 'a', 'n', 'd', 0,
    'T', 'o', 'k', 'e', 'l', 'a', 'u', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'L', 'i', 't', 'e', 'r', 'a', 'r', 'y', 'C', 'h', 'i', 'n', 'e', 's', 'e', 0,
    'P', 'r', 'a', 'k', 'r', 'i', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'A', 'n', 'c', 'i', 'e', 'n', 't', 'E', 'g', 'y', 'p', 't', 'i', 'a', 'n', 0,
    'N', 'o', 'r', 'w', 'e', 'g', 'i', 'a', 'n', 'B', 'o', 'k', 'm', 'a', 'l', 0,
    'Q', 'm', 'l', '2', 'I', 'm', 'p', 'o', 'r', 't', 's', 'P', 'a', 't', 'h', 0,
    'Q', 'J', 's', 'o', 'n', 'P', 'a', 'r', 's', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 0,
    's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'I', 'n', 'd', 'e', 'x', 'e', 's', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'a', 't', 'e', 0,
    'D', 'o', 'n', 't', 'C', 'l', 'o', 's', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 0,
    'A', 'u', 't', 'o', 'C', 'l', 'o', 's', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 0,
    'N', 'o', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'D', 'i', 'r', ':', ':', 'S', 'o', 'r', 't', 'F', 'l', 'a', 'g', 's', 0,
    't', 'o', 'O', 'f', 'f', 's', 'e', 't', 'F', 'r', 'o', 'm', 'U', 't', 'c', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    'D', 'o', 'u', 'b', 'l', 'e', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'S', 'i', 'n', 'g', 'l', 'e', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'r', 'e', 'a', 'd', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'M', 'a', 'p', 0,
    'r', 'e', 'a', 'd', 'Q', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    'R', 'e', 'a', 'd', 'C', 'o', 'r', 'r', 'u', 'p', 't', 'D', 'a', 't', 'a', 0,
    'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'S', 'u', 'r', 'f', 'a', 'c', 'e', 0,
    'G', 'e', 's', 't', 'u', 'r', 'e', 'O', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'U', 'n', 'b', 'l', 'o', 'c', 'k', 'e', 'd', 0,
    'q', 'A', 'd', 'd', 'P', 'o', 's', 't', 'R', 'o', 'u', 't', 'i', 'n', 'e', 0,
    'i', 's', 'S', 'e', 't', 'u', 'i', 'd', 'A', 'l', 'l', 'o', 'w', 'e', 'd', 0,
    'e', 'v', 'e', 'n', 't', 'D', 'i', 's', 'p', 'a', 't', 'c', 'h', 'e', 'r', 0,
    's', 'e', 't', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'P', 'a', 't', 'h', 's', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'T', 'y', 'p', 'e', 0,
    'U', 'n', 'e', 'x', 'p', 'e', 'c', 't', 'e', 'd', 'B', 'r', 'e', 'a', 'k', 0,
    'Q', 'C', 'b', 'o', 'r', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 'G', 'r', 'o', 'u', 'p', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 'S', 't', 'a', 't', 'e', 's', 0,
    'P', 'a', 'r', 'e', 'n', 't', 'I', 's', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 0,
    'c', 'a', 'n', 'D', 'r', 'o', 'p', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    'b', 'e', 'g', 'i', 'n', 'R', 'e', 's', 'e', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'b', 'e', 'g', 'i', 'n', 'R', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'b', 'e', 'g', 'i', 'n', 'I', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 's', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    's', 'i', 'b', 'l', 'i', 'n', 'g', 'A', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'P', 'o', 'i', 'n', 't', 'e', 'r', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'i', 'm', 'e', 'r', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'L', 'o', 'o', 'p', 'T', 'i', 'm', 'e', 0,
    'K', 'e', 'e', 'p', 'W', 'h', 'e', 'n', 'S', 't', 'o', 'p', 'p', 'e', 'd', 0,
    'C', 'h', 'e', 'c', 'k', 's', 'u', 'm', 'I', 's', 'o', '3', '3', '0', '9', 0,
    'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'Q', 't', ':', ':', 'S', 'c', 'r', 'o', 'l', 'l', 'P', 'h', 'a', 's', 'e', 0,
    'V', 'i', 's', 'u', 'a', 'l', 'M', 'o', 'v', 'e', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 't', ':', ':', 'G', 'e', 's', 't', 'u', 'r', 'e', 'F', 'l', 'a', 'g', 0,
    'Q', 't', ':', ':', 'G', 'e', 's', 't', 'u', 'r', 'e', 'T', 'y', 'p', 'e', 0,
    'G', 'e', 's', 't', 'u', 'r', 'e', 'C', 'a', 'n', 'c', 'e', 'l', 'e', 'd', 0,
    'G', 'e', 's', 't', 'u', 'r', 'e', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'T', 'o', 'u', 'c', 'h', 'P', 'o', 'i', 'n', 't', 'M', 'o', 'v', 'e', 'd', 0,
    'Q', 't', ':', ':', 'A', 'n', 'c', 'h', 'o', 'r', 'P', 'o', 'i', 'n', 't', 0,
    'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'M', 'a', 't', 'c', 'h', 'S', 't', 'a', 'r', 't', 's', 'W', 'i', 't', 'h', 0,
    'Q', 't', ':', ':', 'D', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'Q', 't', ':', ':', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'C', 'a', 's', 'e', 'I', 'n', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 0,
    'A', 'l', 'l', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 's', 0,
    'L', 'e', 'f', 't', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'V', 'e', 'r', 'y', 'C', 'o', 'a', 'r', 's', 'e', 'T', 'i', 'm', 'e', 'r', 0,
    'K', 'e', 'e', 'p', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 0,
    'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'F', 'o', 'r', 'b', 'i', 'd', 'd', 'e', 'n', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'i', 'z', 'e', 'F', 'D', 'i', 'a', 'g', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'i', 'z', 'e', 'B', 'D', 'i', 'a', 'g', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'Q', 't', ':', ':', 'C', 'u', 'r', 's', 'o', 'r', 'S', 'h', 'a', 'p', 'e', 0,
    'U', 'I', '_', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'C', 'o', 'm', 'b', 'o', 0,
    'Q', 't', ':', ':', 'P', 'e', 'n', 'C', 'a', 'p', 'S', 't', 'y', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'S', 't', 'r', 'o', 'k', 'e', 0,
    'K', 'e', 'y', '_', 'M', 'i', 'c', 'V', 'o', 'l', 'u', 'm', 'e', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'u', 'c', 'h', 'p', 'a', 'd', 'O', 'f', 'f', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'm', 'e', 'r', 'a', 'F', 'o', 'c', 'u', 's', 0,
    'K', 'e', 'y', '_', 'A', 'u', 'd', 'i', 'o', 'R', 'e', 'p', 'e', 'a', 't', 0,
    'K', 'e', 'y', '_', 'M', 'a', 'i', 'l', 'F', 'o', 'r', 'w', 'a', 'r', 'd', 0,
    'K', 'e', 'y', '_', 'S', 'p', 'l', 'i', 't', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 'F', 'o', 'r', 'w', 'a', 'r', 'd', 0,
    'K', 'e', 'y', '_', 'A', 'u', 'd', 'i', 'o', 'R', 'e', 'w', 'i', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'A', 'd', 'd', 'F', 'a', 'v', 'o', 'r', 'i', 't', 'e', 0,
    'K', 'e', 'y', '_', 'S', 'c', 'r', 'e', 'e', 'n', 'S', 'a', 'v', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'M', 'e', 'd', 'i', 'a', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'O', 'g', 'o', 'n', 'e', 'k', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'M', 'a', 'c', 'r', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'J', 'a', 'm', 'o', 0,
    'K', 'e', 'y', '_', 'E', 'i', 's', 'u', '_', 't', 'o', 'g', 'g', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'M', 'o', 'd', 'e', '_', 's', 'w', 'i', 't', 'c', 'h', 0,
    'K', 'e', 'y', '_', 'U', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'O', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'I', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'E', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'A', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'o', 'n', 'e', 's', 'u', 'p', 'e', 'r', 'i', 'o', 'r', 0,
    'K', 'e', 'y', '_', 't', 'w', 'o', 's', 'u', 'p', 'e', 'r', 'i', 'o', 'r', 0,
    'K', 'e', 'y', '_', 'o', 'r', 'd', 'f', 'e', 'm', 'i', 'n', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'A', 's', 'c', 'i', 'i', 'C', 'i', 'r', 'c', 'u', 'm', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'a', 'c', 'k', 'e', 't', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', 'R', 0,
    'K', 'e', 'y', '_', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', 'L', 0,
    'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'M', 'o', 'd', 'e', 0,
    'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'N', 'a', 't', 'i', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'S', 'm', 'a', 'l', 'l', 'S', 'i', 'z', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'a', 'x', 'i', 'm', 'i', 'z', 'e', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'i', 'n', 'i', 'm', 'i', 'z', 'e', 'd', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'F', 'l', 'a', 'g', 's', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'T', 'i', 't', 'l', 'e', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', '_', 'M', 'a', 's', 'k', 0,
    'D', 'e', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', 'O', 'r', 'd', 'e', 'r', 0,
    'Q', 't', ':', ':', 'F', 'o', 'c', 'u', 's', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'Q', 't', ':', ':', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 0,
    'C', 'o', 'n', 't', 'r', 'o', 'l', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 't', ':', ':', 'G', 'l', 'o', 'b', 'a', 'l', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'L', 'o', 'c', 'a', 'l', 'e', '>', 0,
    'Q', 'P', 'a', 'i', 'r', '<', 'i', 'n', 't', ',', 'i', 'n', 't', '>', 0,
    'p', 'r', 'o', 'd', 'u', 'c', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'w', 'r', 'i', 't', 'e', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'a', 'u', 't', 'o', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 0,
    'e', 'n', 't', 'i', 't', 'y', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    'i', 's', 'S', 't', 'a', 'r', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'Q', 'W', 'a', 'i', 't', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 0,
    'Q', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', ':', ':', 'T', 'y', 'p', 'e', 0,
    'Q', 'U', 'u', 'i', 'd', ':', ':', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'Q', 'U', 'u', 'i', 'd', ':', ':', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 'V', 'a', 'l', 'u', 'e', 0,
    'f', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    't', 'o', 'p', 'L', 'e', 'v', 'e', 'l', 'D', 'o', 'm', 'a', 'i', 'n', 0,
    'D', 'e', 'c', 'o', 'd', 'e', 'R', 'e', 's', 'e', 'r', 'v', 'e', 'd', 0,
    'E', 'n', 'c', 'o', 'd', 'e', 'R', 'e', 's', 'e', 'r', 'v', 'e', 'd', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'F', 'i', 'l', 'e', 'n', 'a', 'm', 'e', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'U', 's', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    's', 'y', 's', 't', 'e', 'm', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 0,
    'n', 'e', 'x', 't', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'h', 'a', 's', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'E', 'a', 's', 'i', 'n', 'g', 'C', 'u', 'r', 'v', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'E', 'a', 's', 'e', 'I', 'n', 'O', 'u', 't', 'C', 'u', 'r', 'v', 'e', 0,
    'm', 'a', 'x', 'T', 'h', 'r', 'e', 'a', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'L', 'o', 'w', 'e', 's', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'q', 'S', 'e', 't', 'F', 'i', 'e', 'l', 'd', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'B', 'a', 's', 'e', 0,
    's', 'e', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'f', 'i', 'e', 'l', 'd', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    's', 'k', 'i', 'p', 'W', 'h', 'i', 't', 'e', 'S', 'p', 'a', 'c', 'e', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    't', 'o', 'N', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 0,
    'M', 'a', 'n', 'd', 'a', 't', 'o', 'r', 'y', 'B', 'r', 'e', 'a', 'k', 0,
    'Q', 'T', 'e', 'm', 'p', 'o', 'r', 'a', 'r', 'y', 'F', 'i', 'l', 'e', 0,
    'm', 'o', 'u', 'n', 't', 'e', 'd', 'V', 'o', 'l', 'u', 'm', 'e', 's', 0,
    'f', 'i', 'l', 'e', 'S', 'y', 's', 't', 'e', 'm', 'T', 'y', 'p', 'e', 0,
    'r', 'u', 'n', 'n', 'i', 'n', 'g', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'a', 's', 's', 'i', 'g', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'P', 'a', 'r', 'a', 'l', 'l', 'e', 'l', 'S', 't', 'a', 't', 'e', 's', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'T', 'e', 's', 't', 'M', 'o', 'd', 'e', 0,
    'f', 'i', 'n', 'd', 'E', 'x', 'e', 'c', 'u', 't', 'a', 'b', 'l', 'e', 0,
    'M', 'o', 'v', 'i', 'e', 's', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'P', 'a', 't', 'h', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 's', 0,
    'O', 'u', 't', 'O', 'f', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 's', 0,
    'b', 'e', 'g', 'i', 'n', 'R', 'e', 'a', 'd', 'A', 'r', 'r', 'a', 'y', 0,
    'c', 'a', 'p', 't', 'u', 'r', 'e', 'd', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'p', 'a', 't', 't', 'e', 'r', 'n', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'C', 'a', 'r', 'e', 't', 'W', 'o', 'n', 't', 'M', 'a', 't', 'c', 'h', 0,
    'W', '3', 'C', 'X', 'm', 'l', 'S', 'c', 'h', 'e', 'm', 'a', '1', '1', 0,
    'm', 'a', 'r', 'g', 'i', 'n', 's', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'm', 'o', 'v', 'e', 'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    't', 'r', 'y', 'L', 'o', 'c', 'k', 'F', 'o', 'r', 'R', 'e', 'a', 'd', 0,
    'Q', 'R', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 'L', 'o', 'c', 'k', 0,
    's', 'e', 'c', 'u', 'r', 'e', 'l', 'y', 'S', 'e', 'e', 'd', 'e', 'd', 0,
    'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'S', 't', 'a', 'r', 't', 'e', 'd', 0,
    's', 'e', 't', 'R', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'M', 'e', 'r', 'g', 'e', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 's', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'T', 'y', 'p', 'e', 0,
    'c', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 'C', 'o', 'u', 'n', 't', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'O', 'f', 'f', 's', 'e', 't', 0,
    'Q', 'S', 'i', 'g', 'n', 'a', 'l', 'B', 'l', 'o', 'c', 'k', 'e', 'r', 0,
    'd', 'u', 'm', 'p', 'O', 'b', 'j', 'e', 'c', 't', 'T', 'r', 'e', 'e', 0,
    'd', 'u', 'm', 'p', 'O', 'b', 'j', 'e', 'c', 't', 'I', 'n', 'f', 'o', 0,
    's', 'i', 'g', 'n', 'a', 'l', 's', 'B', 'l', 'o', 'c', 'k', 'e', 'd', 0,
    'q', 'F', 'l', 'o', 'a', 't', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 'F', 'o', 'r', 'U', 'r', 'l', 0,
    'M', 'a', 't', 'c', 'h', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 'L', 'i', 's', 't', 0,
    'Q', 'M', 'e', 't', 'a', 'C', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 'C', 'o', 'u', 'n', 't', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 'N', 'a', 'm', 'e', 's', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 'T', 'y', 'p', 'e', 's', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'u', 'l', 'e', 's', 0,
    'i', 's', 'D', 'e', 'b', 'u', 'g', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'M', 'e', 's', 's', 'a', 'g', 'e', 'L', 'o', 'g', 'g', 'e', 'r', 0,
    's', 'c', 'r', 'i', 'p', 't', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'S', 'y', 'm', 'b', 'o', 'l', 0,
    'f', 'i', 'r', 's', 't', 'D', 'a', 'y', 'O', 'f', 'W', 'e', 'e', 'k', 0,
    'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'S', 'y', 'm', 'b', 'o', 'l', 0,
    'M', 'a', 'h', 'a', 'j', 'a', 'n', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'D', 'u', 'p', 'l', 'o', 'y', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'a', 's', 's', 'a', 'V', 'a', 'h', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'H', 'i', 'r', 'a', 'g', 'a', 'n', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'U', 'g', 'a', 'r', 'i', 't', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'a', 'g', 'b', 'a', 'n', 'w', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'e', 'r', 'o', 'i', 't', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'a', 'n', 'd', 'a', 'e', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'a', 't', 'a', 'k', 'a', 'n', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'J', 'a', 'v', 'a', 'n', 'e', 's', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'u', 'g', 'i', 'n', 'e', 's', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'a', 'l', 'i', 'n', 'e', 's', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'J', 'a', 'p', 'a', 'n', 'e', 's', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'G', 'u', 'j', 'a', 'r', 'a', 't', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'G', 'e', 'o', 'r', 'g', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'E', 't', 'h', 'i', 'o', 'p', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'h', 'e', 'r', 'o', 'k', 'e', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'A', 'r', 'm', 'e', 'n', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'i', 'f', 'i', 'n', 'a', 'g', 'h', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'G', 'u', 'r', 'm', 'u', 'k', 'h', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'y', 'r', 'i', 'l', 'l', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', 'S', 'y', 's', 't', 'e', 'm', 0,
    'g', 'r', 'o', 'u', 'p', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'd', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'T', 'o', 'k', 'e', 'l', 'a', 'u', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'T', 'r', 'i', 's', 't', 'a', 'n', 'D', 'a', 'C', 'u', 'n', 'h', 'a', 0,
    'S', 'o', 'l', 'o', 'm', 'o', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'P', 'a', 'p', 'u', 'a', 'N', 'e', 'w', 'G', 'u', 'i', 'n', 'e', 'a', 0,
    'T', 'u', 'v', 'a', 'l', 'u', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'C', 'e', 'n', 't', 'r', 'a', 'l', 'K', 'u', 'r', 'd', 'i', 's', 'h', 0,
    'W', 'e', 's', 't', 'e', 'r', 'n', 'F', 'r', 'i', 's', 'i', 'a', 'n', 0,
    'K', 'o', 'y', 'r', 'a', 'b', 'o', 'r', 'o', 'S', 'e', 'n', 'n', 'i', 0,
    'N', 'o', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'f', 'r', 'o', 'm', 'B', 'i', 'n', 'a', 'r', 'y', 'D', 'a', 't', 'a', 0,
    'Q', 'I', 't', 'e', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'l', 'e', 'a', 'r', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'l', 'e', 'a', 'r', 'A', 'n', 'd', 'S', 'e', 'l', 'e', 'c', 't', 0,
    's', 'e', 't', 'E', 'r', 'r', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'b', 'y', 't', 'e', 's', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    's', 'e', 't', 'H', 'i', 's', 't', 'o', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'S', 'h', 'a', 'l', 'l', 'o', 'w', 'H', 'i', 's', 't', 'o', 'r', 'y', 0,
    'e', 'x', 't', 'r', 'a', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 's', 0,
    'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'S', 'u', 'f', 'f', 'i', 'x', 0,
    'F', 'i', 'l', 'e', 'A', 'c', 'c', 'e', 's', 's', 'T', 'i', 'm', 'e', 0,
    's', 'e', 't', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'E', 'v', 'e', 'n', 't', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'M', 'o', 'n', 'o', 't', 'o', 'n', 'i', 'c', 'C', 'l', 'o', 'c', 'k', 0,
    'S', 'u', 'b', 'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'i', 'e', 's', 0,
    'F', 'o', 'l', 'l', 'o', 'w', 'S', 'y', 'm', 'l', 'i', 'n', 'k', 's', 0,
    's', 'e', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 's', 0,
    'i', 's', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'P', 'a', 't', 'h', 0,
    'i', 's', 'R', 'e', 'l', 'a', 't', 'i', 'v', 'e', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'N', 'a', 'm', 'e', 'F', 'i', 'l', 't', 'e', 'r', 's', 0,
    'Q', 'D', 'i', 'r', ':', ':', 'S', 'o', 'r', 't', 'F', 'l', 'a', 'g', 0,
    'N', 'o', 'D', 'o', 't', 'A', 'n', 'd', 'D', 'o', 't', 'D', 'o', 't', 0,
    'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 'M', 'a', 's', 'k', 0,
    'Q', 'D', 'e', 'a', 'd', 'l', 'i', 'n', 'e', 'T', 'i', 'm', 'e', 'r', 0,
    'i', 's', 'D', 'a', 'y', 'l', 'i', 'g', 'h', 't', 'T', 'i', 'm', 'e', 0,
    's', 'h', 'o', 'r', 't', 'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'R', 'e', 'a', 'd', 'O', 'n', 'l', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'U', 'n', 'g', 'r', 'a', 'b', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'Q', 'u', 'e', 'r', 'y', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 0,
    'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'I', 'c', 'o', 'n', 'T', 'e', 'x', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'D', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'q', 'A', 'd', 'd', 'P', 'r', 'e', 'R', 'o', 'u', 't', 'i', 'n', 'e', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'P', 'i', 'd', 0,
    'd', 'i', 's', 'a', 'm', 'b', 'i', 'g', 'u', 'a', 't', 'i', 'o', 'n', 0,
    'a', 'd', 'd', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'P', 'a', 't', 'h', 0,
    'P', 'a', 'r', 's', 'e', 'A', 's', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'H', 'i', 'd', 'd', 'e', 'n', 'F', 'r', 'o', 'm', 'H', 'e', 'l', 'p', 0,
    's', 'e', 't', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'N', 'u', 'm', 'e', 'r', 'i', 'c', 'M', 'o', 'd', 'e', 0,
    'l', 'e', 'a', 'v', 'e', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'e', 'n', 't', 'e', 'r', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 'D', 'e', 'p', 't', 'h', 0,
    'E', 'x', 'p', 'e', 'c', 't', 'e', 'd', 'B', 'a', 's', 'e', '1', '6', 0,
    'E', 'x', 'p', 'e', 'c', 't', 'e', 'd', 'B', 'a', 's', 'e', '6', '4', 0,
    'N', 'e', 'g', 'a', 't', 'i', 'v', 'e', 'B', 'i', 'g', 'n', 'u', 'm', 0,
    'P', 'o', 's', 'i', 't', 'i', 'v', 'e', 'B', 'i', 'g', 'n', 'u', 'm', 0,
    'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'Q', 'C', 'b', 'o', 'r', 'K', 'n', 'o', 'w', 'n', 'T', 'a', 'g', 's', 0,
    'N', 'e', 's', 't', 'i', 'n', 'g', 'T', 'o', 'o', 'D', 'e', 'e', 'p', 0,
    'A', 'd', 'v', 'a', 'n', 'c', 'e', 'P', 'a', 's', 't', 'E', 'n', 'd', 0,
    'B', 'a', 's', 'e', '6', '4', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'r', 'i', 'g', 'h', 't', 'J', 'u', 's', 't', 'i', 'f', 'i', 'e', 'd', 0,
    'a', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'u', 'n', 't', 0,
    't', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'M', 'o', 'd', 'e', 'l', 0,
    'D', 'o', 'N', 'o', 't', 'U', 's', 'e', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'e', 'n', 'd', 'M', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'i', 'm', 'e', 0,
    'C', 'h', 'e', 'c', 'k', 's', 'u', 'm', 'I', 't', 'u', 'V', '4', '1', 0,
    'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'S', 'e', 'a', 'r', 'c', 'h', 0,
    'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'R', 'e', 't', 'u', 'r', 'n', 0,
    'A', 'd', 'd', 'T', 'o', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'M', 'o', 'm', 'e', 'n', 't', 'u', 'm', 0,
    'G', 'e', 's', 't', 'u', 'r', 'e', 'U', 'p', 'd', 'a', 't', 'e', 'd', 0,
    'G', 'e', 's', 't', 'u', 'r', 'e', 'S', 't', 'a', 'r', 't', 'e', 'd', 0,
    'I', 'm', 'h', 'P', 'r', 'e', 'f', 'e', 'r', 'L', 'a', 't', 'i', 'n', 0,
    'T', 'o', 'p', 'L', 'e', 'f', 't', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'M', 'i', 'n', 'i', 'm', 'u', 'm', 'D', 'e', 's', 'c', 'e', 'n', 't', 0,
    'A', 'A', '_', 'U', 's', 'e', 'O', 'p', 'e', 'n', 'G', 'L', 'E', 'S', 0,
    'Q', 't', ':', ':', 'M', 'a', 't', 'c', 'h', 'F', 'l', 'a', 'g', 's', 0,
    'M', 'a', 't', 'c', 'h', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 0,
    'I', 't', 'e', 'm', 'I', 's', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    'I', 't', 'e', 'm', 'I', 's', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'C', 'h', 'e', 'c', 'k', 'S', 't', 'a', 't', 'e', 'R', 'o', 'l', 'e', 0,
    'F', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 'R', 'o', 'l', 'e', 0,
    'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'R', 'o', 'l', 'e', 0,
    'D', 'e', 'c', 'o', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'o', 'l', 'e', 0,
    'Q', 't', ':', ':', 'C', 'h', 'e', 'c', 'k', 'S', 't', 'a', 't', 'e', 0,
    'Q', 't', ':', ':', 'D', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'T', 'y', 'p', 'e', 0,
    'I', 'm', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'D', 'a', 't', 'a', 0,
    'T', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'W', 'i', 'd', 'g', 'e', 't', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'A', 'u', 't', 'o', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'Q', 't', ':', ':', 'D', 'a', 't', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'T', 'o', 'p', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'D', 'r', 'a', 'g', 'L', 'i', 'n', 'k', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'D', 'r', 'a', 'g', 'M', 'o', 'v', 'e', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'D', 'r', 'a', 'g', 'C', 'o', 'p', 'y', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'O', 'p', 'e', 'n', 'H', 'a', 'n', 'd', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'U', 'I', '_', 'F', 'a', 'd', 'e', 'T', 'o', 'o', 'l', 't', 'i', 'p', 0,
    'U', 'I', '_', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'M', 'e', 'n', 'u', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'Q', 't', ':', ':', 'B', 'r', 'u', 's', 'h', 'S', 't', 'y', 'l', 'e', 0,
    'C', 'u', 's', 't', 'o', 'm', 'D', 'a', 's', 'h', 'L', 'i', 'n', 'e', 0,
    'D', 'a', 's', 'h', 'D', 'o', 't', 'D', 'o', 't', 'L', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'G', 'r', 'e', 'e', 'k', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'u', 'c', 'h', 'p', 'a', 'd', 'O', 'n', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'P', 'a', 'u', 's', 'e', 0,
    'K', 'e', 'y', '_', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'K', 'B', 0,
    'K', 'e', 'y', '_', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'P', 'B', 0,
    'K', 'e', 'y', '_', 'O', 'f', 'f', 'i', 'c', 'e', 'H', 'o', 'm', 'e', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'l', 'c', 'u', 'l', 'a', 't', 'o', 'r', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'M', 'a', 'i', 'l', 0,
    'K', 'e', 'y', '_', 'T', 'r', 'e', 'b', 'l', 'e', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'V', 'o', 'l', 'u', 'm', 'e', 'M', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'V', 'o', 'l', 'u', 'm', 'e', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'C', 'a', 'r', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'r', 'e', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'T', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'G', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'E', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'E', 'i', 's', 'u', '_', 'S', 'h', 'i', 'f', 't', 0,
    'K', 'e', 'y', '_', 'K', 'a', 'n', 'a', '_', 'S', 'h', 'i', 'f', 't', 0,
    'K', 'e', 'y', '_', 'y', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'U', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'O', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'I', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'E', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'A', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'o', 'n', 'e', 'q', 'u', 'a', 'r', 't', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'e', 'd', 0,
    'K', 'e', 'y', '_', 'e', 'x', 'c', 'l', 'a', 'm', 'd', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'A', 's', 'c', 'i', 'i', 'T', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'a', 'c', 'e', 'R', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'U', 'n', 'd', 'e', 'r', 's', 'c', 'o', 'r', 'e', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'r', 'e', 'n', 'R', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'A', 'p', 'o', 's', 't', 'r', 'o', 'p', 'h', 'e', 0,
    'K', 'e', 'y', '_', 'N', 'u', 'm', 'b', 'e', 'r', 'S', 'i', 'g', 'n', 0,
    'K', 'e', 'y', '_', 'S', 'c', 'r', 'o', 'l', 'l', 'L', 'o', 'c', 'k', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'N', 'o', 'S', 'h', 'a', 'd', 'o', 'w', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'M', 'i', 'n', 'i', 'S', 'i', 'z', 'e', 0,
    'W', 'A', '_', 'A', 'c', 'c', 'e', 'p', 't', 'D', 'r', 'o', 'p', 's', 0,
    'W', 'A', '_', 'Q', 'u', 'i', 't', 'O', 'n', 'C', 'l', 'o', 's', 'e', 0,
    'W', 'A', '_', 'G', 'r', 'o', 'u', 'p', 'L', 'e', 'a', 'd', 'e', 'r', 0,
    'W', 'A', '_', 'M', 'o', 'u', 's', 'e', 'N', 'o', 'M', 'a', 's', 'k', 0,
    'W', 'A', '_', 'R', 'i', 'g', 'h', 't', 'T', 'o', 'L', 'e', 'f', 't', 0,
    'W', 'A', '_', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'S', 'i', 'z', 'e', 0,
    'M', 'S', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'O', 'w', 'n', 'D', 'C', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 0,
    'T', 'e', 'x', 't', 'E', 'x', 'p', 'a', 'n', 'd', 'T', 'a', 'b', 's', 0,
    'T', 'e', 'x', 't', 'S', 'i', 'n', 'g', 'l', 'e', 'L', 'i', 'n', 'e', 0,
    'A', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', 'O', 'r', 'd', 'e', 'r', 0,
    'K', 'e', 'y', 'p', 'a', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'k', 'e', 'r', 'n', 'e', 'l', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'i', 's', 'E', 'n', 'd', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'q', 'u', 'a', 'l', 'i', 'f', 'i', 'e', 'd', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'K', 'e', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 't', 0,
    's', 'e', 't', 'S', 't', 'a', 'r', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'W', 'i', 't', 'h', 'o', 'u', 't', 'B', 'r', 'a', 'c', 'e', 's', 0,
    'E', 'm', 'b', 'e', 'd', 'd', 'e', 'd', 'P', 'O', 'S', 'I', 'X', 0,
    's', 'e', 't', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    'f', 'r', 'o', 'm', 'U', 's', 'e', 'r', 'I', 'n', 'p', 'u', 't', 0,
    'f', 'r', 'o', 'm', 'L', 'o', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 0,
    'E', 'n', 'c', 'o', 'd', 'e', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'P', 'r', 'e', 't', 't', 'y', 'D', 'e', 'c', 'o', 'd', 'e', 'd', 0,
    's', 'e', 't', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'h', 'o', 't', 0,
    's', 'e', 't', 'C', 'u', 'r', 'v', 'e', 'S', 'h', 'a', 'p', 'e', 0,
    's', 'e', 't', 'F', 'r', 'a', 'm', 'e', 'R', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 'r', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'r', 'e', 's', 'e', 'r', 'v', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'e', 'x', 'p', 'i', 'r', 'y', 'T', 'i', 'm', 'e', 'o', 'u', 't', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', 'b', 'a', 's', 'e', 0,
    'u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'b', 'a', 's', 'e', 0,
    's', 'e', 't', 'F', 'i', 'e', 'l', 'd', 'W', 'i', 'd', 't', 'h', 0,
    'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'B', 'a', 's', 'e', 0,
    'F', 'i', 'x', 'e', 'd', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'S', 'm', 'a', 'r', 't', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'M', 'i', 'b', 's', 0,
    'N', 'o', 't', 'A', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'R', 'e', 'm', 'o', 'v', 'e', 0,
    'Q', 'T', 'e', 'm', 'p', 'o', 'r', 'a', 'r', 'y', 'D', 'i', 'r', 0,
    's', 'e', 't', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    'c', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 't', 'a', 't', 'e', 'M', 'a', 'c', 'h', 'i', 'n', 'e', 0,
    'a', 'd', 'd', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'E', 'r', 'r', 'o', 'r', 'S', 't', 'a', 't', 'e', 0,
    'M', 'u', 's', 'i', 'c', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'F', 'o', 'n', 't', 's', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 'R', 'o', 'l', 'e', 0,
    's', 'i', 'g', 'n', 'a', 'l', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'S', 'i', 'g', 'n', 'a', 'l', 'M', 'a', 'p', 'p', 'e', 'r', 0,
    'A', 'l', 'r', 'e', 'a', 'd', 'y', 'E', 'x', 'i', 's', 't', 's', 0,
    'Q', 'S', 'h', 'a', 'r', 'e', 'd', 'M', 'e', 'm', 'o', 'r', 'y', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'A', 'r', 'r', 'a', 'y', 'I', 'n', 'd', 'e', 'x', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'c', 'a', 'n', 'c', 'e', 'l', 'W', 'r', 'i', 't', 'i', 'n', 'g', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'c', 'a', 'p', 't', 'u', 'r', 'e', 'd', 'S', 't', 'a', 'r', 't', 0,
    'N', 'o', 'M', 'a', 't', 'c', 'h', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'c', 'a', 'p', 't', 'u', 'r', 'e', 'd', 'T', 'e', 'x', 't', 's', 0,
    'm', 'a', 't', 'c', 'h', 'e', 'd', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'p', 'a', 't', 't', 'e', 'r', 'n', 'S', 'y', 'n', 't', 'a', 'x', 0,
    'C', 'a', 'r', 'e', 't', 'A', 't', 'O', 'f', 'f', 's', 'e', 't', 0,
    't', 'o', 'A', 'l', 'i', 'g', 'n', 'e', 'd', 'R', 'e', 'c', 't', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    'r', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 'L', 'o', 'c', 'k', 0,
    'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 'O', 'c', 'c', 'u', 'r', 'r', 'e', 'd', 0,
    's', 't', 'a', 'r', 't', 'D', 'e', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'F', 'a', 'i', 'l', 'e', 'd', 'T', 'o', 'S', 't', 'a', 'r', 't', 0,
    'Q', 'P', 'l', 'u', 'g', 'i', 'n', 'L', 'o', 'a', 'd', 'e', 'r', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'N', 'o', 'u', 'g', 'a', 't', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'K', 'i', 't', 'K', 'a', 't', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 'N', 'a', 'm', 'e', 0,
    'p', 'y', 'q', 't', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'e', 0,
    'Q', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', 0,
    'I', 's', 'E', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'I', 'n', 'd', 'e', 'x', 0,
    'Q', 'M', 'e', 't', 'a', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'I', 'n', 'f', 'o', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'q', 'E', 'r', 'r', 'n', 'o', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 0,
    'Q', 't', 'C', 'r', 'i', 't', 'i', 'c', 'a', 'l', 'M', 's', 'g', 0,
    's', 't', 'a', 'l', 'e', 'L', 'o', 'c', 'k', 'T', 'i', 'm', 'e', 0,
    'M', 'a', 'r', 'c', 'h', 'e', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'u', 'l', 't', 'a', 'n', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'i', 'r', 'h', 'u', 't', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'i', 'd', 'd', 'h', 'a', 'm', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'A', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'G', 'r', 'a', 'n', 't', 'h', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'E', 'l', 'b', 'a', 's', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'r', 'a', 'i', 'l', 'l', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'a', 'i', 'V', 'i', 'e', 't', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'a', 'g', 'a', 'l', 'o', 'g', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'h', 'a', 'v', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'h', 'a', 'r', 'a', 'd', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'P', 'h', 'a', 'g', 's', 'P', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 's', 'm', 'a', 'n', 'y', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'l', 'C', 'h', 'i', 'k', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'B', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'a', 'y', 'a', 'h', 'L', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'H', 'a', 'n', 'u', 'n', 'o', 'o', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'y', 'p', 'r', 'i', 'o', 't', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'A', 'v', 'e', 's', 't', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'i', 'n', 'h', 'a', 'l', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'i', 'b', 'e', 't', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'y', 'a', 'n', 'm', 'a', 'r', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'a', 'n', 'n', 'a', 'd', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'e', 'n', 'g', 'a', 'l', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'D', 'e', 's', 'e', 'r', 'e', 't', 'S', 'c', 'r', 'i', 'p', 't', 0,
    't', 'e', 'x', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'E', 'u', 'r', 'o', 'p', 'e', 'a', 'n', 'U', 'n', 'i', 'o', 'n', 0,
    'T', 'u', 'v', 'a', 'l', 'u', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'C', 'a', 'n', 'a', 'r', 'y', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'C', 'o', 'n', 'g', 'o', 'K', 'i', 'n', 's', 'h', 'a', 's', 'a', 0,
    'W', 'e', 's', 't', 'e', 'r', 'n', 'S', 'a', 'h', 'a', 'r', 'a', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'K', 'i', 'n', 'g', 'd', 'o', 'm', 0,
    'N', 'o', 'r', 'f', 'o', 'l', 'k', 'I', 's', 'l', 'a', 'n', 'd', 0,
    'L', 'i', 'e', 'c', 'h', 't', 'e', 'n', 's', 't', 'e', 'i', 'n', 0,
    'C', 'z', 'e', 'c', 'h', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 0,
    'C', 'a', 'y', 'm', 'a', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'A', 'm', 'e', 'r', 'i', 'c', 'a', 'n', 'S', 'a', 'm', 'o', 'a', 0,
    'L', 'u', 'x', 'e', 'm', 'b', 'o', 'u', 'r', 'g', 'i', 's', 'h', 0,
    'S', 'o', 'u', 't', 'h', 'e', 'r', 'n', 'S', 'o', 't', 'h', 'o', 0,
    'M', 'a', 'k', 'h', 'u', 'w', 'a', 'M', 'e', 'e', 't', 't', 'o', 0,
    'N', 'o', 'r', 't', 'h', 'e', 'r', 'n', 'S', 'o', 't', 'h', 'o', 0,
    'S', 'e', 'r', 'b', 'o', 'C', 'r', 'o', 'a', 't', 'i', 'a', 'n', 0,
    'R', 'h', 'a', 'e', 't', 'o', 'R', 'o', 'm', 'a', 'n', 'c', 'e', 0,
    'N', 'a', 'u', 'r', 'u', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'L', 'i', 'b', 'r', 'a', 'r', 'i', 'e', 's', 'P', 'a', 't', 'h', 0,
    'Q', 'J', 's', 'o', 'n', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'M', 'i', 's', 's', 'i', 'n', 'g', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'i', 's', 'R', 'o', 'w', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'T', 'o', 'g', 'g', 'l', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'S', 'e', 'l', 'e', 'c', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'Q', 'H', 'i', 's', 't', 'o', 'r', 'y', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'F', 'i', 'l', 'e', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 0,
    'F', 'i', 'l', 'e', 'B', 'i', 'r', 't', 'h', 'T', 'i', 'm', 'e', 0,
    'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'y', 'm', 'L', 'i', 'n', 'k', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'Q', 'E', 'l', 'a', 'p', 's', 'e', 'd', 'T', 'i', 'm', 'e', 'r', 0,
    't', 'o', 'C', 'u', 'b', 'i', 'c', 'S', 'p', 'l', 'i', 'n', 'e', 0,
    'a', 'd', 'd', 'T', 'C', 'B', 'S', 'e', 'g', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'C', 'u', 's', 't', 'o', 'm', 'T', 'y', 'p', 'e', 0,
    'l', 'i', 's', 't', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'a', 'd', 'd', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 0,
    'e', 'n', 't', 'r', 'y', 'I', 'n', 'f', 'o', 'L', 'i', 's', 't', 0,
    'c', 'a', 'n', 'o', 'n', 'i', 'c', 'a', 'l', 'P', 'a', 't', 'h', 0,
    'Q', 'D', 'i', 'r', ':', ':', 'F', 'i', 'l', 't', 'e', 'r', 's', 0,
    'd', 'e', 'a', 'd', 'l', 'i', 'n', 'e', 'N', 'S', 'e', 'c', 's', 0,
    'o', 'f', 'f', 's', 'e', 't', 'F', 'r', 'o', 'm', 'U', 't', 'c', 0,
    'o', 'f', 'f', 's', 'e', 't', 'S', 'e', 'c', 'o', 'n', 'd', 's', 0,
    'f', 'r', 'o', 'm', 'J', 'u', 'l', 'i', 'a', 'n', 'D', 'a', 'y', 0,
    'l', 'o', 'n', 'g', 'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'P', 'a', 'n', 'e', 'l', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'P', 'r', 'e', 'p', 'a', 'r', 'e', 0,
    'T', 'o', 'o', 'l', 'T', 'i', 'p', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'M', 'a', 'c', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'T', 'o', 'o', 'l', 'B', 'a', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'A', 'c', 't', 'i', 'o', 'n', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'A', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'B', 'l', 'o', 'c', 'k', 'e', 'd', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'U', 'p', 'd', 'a', 't', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'L', 'a', 'y', 'o', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'P', 'o', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'C', 'h', 'i', 'l', 'd', 'P', 'o', 'l', 'i', 's', 'h', 'e', 'd', 0,
    't', 'e', 's', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'a', 'd', 'd', 'H', 'e', 'l', 'p', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'r', 'e', 'a', 'd', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'i', 's', 'L', 'e', 'n', 'g', 't', 'h', 'K', 'n', 'o', 'w', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'O', 'f', 'f', 's', 'e', 't', 0,
    'C', 'O', 'S', 'E', '_', 'E', 'n', 'c', 'r', 'y', 'p', 't', '0', 0,
    'I', 'l', 'l', 'e', 'g', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'l', 'e', 'f', 't', 'J', 'u', 's', 't', 'i', 'f', 'i', 'e', 'd', 0,
    't', 'a', 'k', 'e', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'm', 'a', 'p', 'F', 'r', 'o', 'm', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'e', 'n', 'd', 'R', 'e', 's', 'e', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'b', 'e', 'g', 'i', 'n', 'M', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'e', 'n', 'd', 'R', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'e', 'n', 'd', 'I', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 's', 0,
    'l', 'a', 'y', 'o', 'u', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'i', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    's', 'e', 't', 'H', 'e', 'a', 'd', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', 'T', 'i', 'm', 'e', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 's', 0,
    't', 'o', 't', 'a', 'l', 'D', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'N', 'o', 'S', 'c', 'r', 'o', 'l', 'l', 'P', 'h', 'a', 's', 'e', 0,
    'W', 'h', 'i', 't', 'e', 'S', 'p', 'a', 'c', 'e', 'P', 'r', 'e', 0,
    'C', 'u', 's', 't', 'o', 'm', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'I', 'm', 'h', 'N', 'o', 'E', 'd', 'i', 't', 'M', 'e', 'n', 'u', 0,
    'I', 'm', 'h', 'D', 'i', 'g', 'i', 't', 's', 'O', 'n', 'l', 'y', 0,
    'I', 'm', 'h', 'H', 'i', 'd', 'd', 'e', 'n', 'T', 'e', 'x', 't', 0,
    'B', 'o', 't', 't', 'o', 'm', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'S', 'i', 'z', 'e', 0,
    'A', 'A', '_', 'S', 'e', 't', 'P', 'a', 'l', 'e', 't', 't', 'e', 0,
    'M', 'a', 't', 'c', 'h', 'W', 'i', 'l', 'd', 'c', 'a', 'r', 'd', 0,
    'M', 'a', 't', 'c', 'h', 'E', 'n', 'd', 's', 'W', 'i', 't', 'h', 0,
    'M', 'a', 't', 'c', 'h', 'C', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    'Q', 't', ':', ':', 'M', 'a', 't', 'c', 'h', 'F', 'l', 'a', 'g', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'F', 'l', 'a', 'g', 's', 0,
    'I', 't', 'e', 'm', 'I', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'r', 'R', 'o', 'l', 'e', 0,
    'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'R', 'o', 'l', 'e', 0,
    'S', 't', 'a', 't', 'u', 's', 'T', 'i', 'p', 'R', 'o', 'l', 'e', 0,
    'N', 'o', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'N', 'o', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'C', 'l', 'i', 'p', 0,
    'T', 'o', 'p', 'L', 'e', 'f', 't', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'Q', 't', ':', ':', 'D', 'a', 'y', 'O', 'f', 'W', 'e', 'e', 'k', 0,
    'O', 'f', 'f', 's', 'e', 't', 'F', 'r', 'o', 'm', 'U', 'T', 'C', 0,
    'I', 'S', 'O', 'D', 'a', 't', 'e', 'W', 'i', 't', 'h', 'M', 's', 0,
    'N', 'o', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'T', 'i', 'm', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'S', 'i', 'z', 'e', 'A', 'l', 'l', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'i', 'z', 'e', 'H', 'o', 'r', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'i', 'z', 'e', 'V', 'e', 'r', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'U', 'p', 'A', 'r', 'r', 'o', 'w', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'D', 'e', 'n', 's', 'e', '7', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '6', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '5', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '4', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '3', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '2', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '1', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'M', 'P', 'e', 'n', 'J', 'o', 'i', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 't', ':', ':', 'A', 'r', 'r', 'o', 'w', 'T', 'y', 'p', 'e', 0,
    'K', 'e', 'y', '_', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'V', 'o', 'i', 'c', 'e', 'D', 'i', 'a', 'l', 0,
    'K', 'e', 'y', '_', 'P', 'o', 'w', 'e', 'r', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'H', 'i', 'b', 'e', 'r', 'n', 'a', 't', 'e', 0,
    'K', 'e', 'y', '_', 'B', 'l', 'u', 'e', 't', 'o', 'o', 't', 'h', 0,
    'K', 'e', 'y', '_', 'M', 'e', 's', 's', 'e', 'n', 'g', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 's', 0,
    'K', 'e', 'y', '_', 'C', 'l', 'e', 'a', 'r', 'G', 'r', 'a', 'b', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'm', 'm', 'u', 'n', 'i', 't', 'y', 0,
    'K', 'e', 'y', '_', 'L', 'i', 'g', 'h', 't', 'B', 'u', 'l', 'b', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'L', 'a', 's', 't', 0,
    'K', 'e', 'y', '_', 'F', 'a', 'v', 'o', 'r', 'i', 't', 'e', 's', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'N', 'e', 'x', 't', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'S', 't', 'o', 'p', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'P', 'l', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'B', 'a', 's', 's', 'B', 'o', 'o', 's', 't', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'H', 'o', 'r', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'H', 'o', 'o', 'k', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'I', 'o', 't', 'a', 0,
    'K', 'e', 'y', '_', 'K', 'a', 'n', 'a', '_', 'L', 'o', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'd', 'e', 'i', 'n', 'p', 'u', 't', 0,
    'K', 'e', 'y', '_', 'M', 'u', 'l', 't', 'i', '_', 'k', 'e', 'y', 0,
    'K', 'e', 'y', '_', 'm', 'a', 's', 'c', 'u', 'l', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'p', 'a', 'r', 'a', 'g', 'r', 'a', 'p', 'h', 0,
    'K', 'e', 'y', '_', 'p', 'l', 'u', 's', 'm', 'i', 'n', 'u', 's', 0,
    'K', 'e', 'y', '_', 'c', 'o', 'p', 'y', 'r', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'b', 'r', 'o', 'k', 'e', 'n', 'b', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'a', 'c', 'e', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'Q', 'u', 'o', 't', 'e', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 's', 'l', 'a', 's', 'h', 0,
    'K', 'e', 'y', '_', 'S', 'e', 'm', 'i', 'c', 'o', 'l', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'r', 'e', 'n', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'A', 'm', 'p', 'e', 'r', 's', 'a', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 's', 'p', 'a', 'c', 'e', 0,
    'O', 'r', 'd', 'e', 'r', 'e', 'd', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'D', 'i', 'f', 'f', 'u', 's', 'e', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'S', 't', 'y', 'l', 'e', 'S', 'h', 'e', 'e', 't', 0,
    'W', 'A', '_', 'S', 'e', 't', 'P', 'a', 'l', 'e', 't', 't', 'e', 0,
    'W', 'A', '_', 'U', 'n', 'd', 'e', 'r', 'M', 'o', 'u', 's', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'N', 'o', 'S', 't', 'a', 't', 'e', 0,
    'F', 'o', 'r', 'e', 'i', 'g', 'n', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'T', 'e', 'x', 't', 'D', 'o', 'n', 't', 'P', 'r', 'i', 'n', 't', 0,
    'Q', 't', ':', ':', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'B', 'a', 's', 'e', 'l', 'i', 'n', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 0,
    'Q', 't', ':', ':', 'S', 'o', 'r', 't', 'O', 'r', 'd', 'e', 'r', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '2', '4', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '2', '3', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '2', '2', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '2', '1', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '2', '0', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '9', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '8', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '7', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '6', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '5', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '4', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '3', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '2', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '1', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', '0', 0,
    'F', 'o', 'r', 'w', 'a', 'r', 'd', 'B', 'u', 't', 't', 'o', 'n', 0,
    'U', 'N', 'I', 'C', 'O', 'D', 'E', '_', 'A', 'C', 'C', 'E', 'L', 0,
    'M', 'O', 'D', 'I', 'F', 'I', 'E', 'R', '_', 'M', 'A', 'S', 'K', 0,
    'S', 'h', 'i', 'f', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'q', 'F', 'u', 'z', 'z', 'y', 'C', 'o', 'm', 'p', 'a', 'r', 'e', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'i', 'n', 't', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'q', 'r', 'e', 'a', 'l', '>', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'o', 'm', 'm', 'e', 'n', 't', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'i', 's', 'W', 'h', 'i', 't', 'e', 's', 'p', 'a', 'c', 'e', 0,
    'i', 's', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 0,
    'i', 's', 'E', 'n', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'h', 'a', 's', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'U', 'r', 'i', 0,
    'c', 'o', 'm', 'm', 'o', 'n', 'P', 'r', 'e', 'f', 'i', 'x', 0,
    'i', 's', 'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 0,
    'i', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'e', 'd', 0,
    's', 'e', 't', 'K', 'e', 'y', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'U', 'u', 'i', 'd', 'V', '5', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'U', 'u', 'i', 'd', 'V', '3', 0,
    'a', 'd', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    'h', 'a', 's', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    'i', 'd', 'n', 'W', 'h', 'i', 't', 'e', 'l', 'i', 's', 't', 0,
    's', 'e', 't', 'A', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', 0,
    'F', 'u', 'l', 'l', 'y', 'D', 'e', 'c', 'o', 'd', 'e', 'd', 0,
    'F', 'u', 'l', 'l', 'y', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 0,
    'E', 'n', 'c', 'o', 'd', 'e', 'S', 'p', 'a', 'c', 'e', 's', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'S', 'c', 'h', 'e', 'm', 'e', 0,
    'T', 'o', 'l', 'e', 'r', 'a', 'n', 't', 'M', 'o', 'd', 'e', 0,
    'Q', 'U', 'r', 'l', 'T', 'w', 'o', 'F', 'l', 'a', 'g', 's', 0,
    'l', 'o', 'a', 'd', 'F', 'r', 'o', 'm', 'D', 'a', 't', 'a', 0,
    'a', 'b', 'b', 'r', 'e', 'v', 'i', 'a', 't', 'i', 'o', 'n', 0,
    'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'T', 'i', 'm', 'e', 0,
    'i', 's', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'h', 'o', 't', 0,
    'v', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'f', 'r', 'a', 'm', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'v', 'a', 'l', 'u', 'e', 'F', 'o', 'r', 'T', 'i', 'm', 'e', 0,
    'f', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'T', 'i', 'm', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'E', 'a', 's', 'e', 'O', 'u', 't', 'C', 'u', 'r', 'v', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 'c', 'k', 'S', 'i', 'z', 'e', 0,
    'I', 'd', 'l', 'e', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'n', 'o', 'f', 'o', 'r', 'c', 'e', 'p', 'o', 'i', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'e', 'c', 'o', 'd', 'e', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'H', 'e', 'a', 'd', 'e', 'r', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'H', 't', 'm', 'l', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'A', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 0,
    'f', 'i', 'l', 'e', 'T', 'e', 'm', 'p', 'l', 'a', 't', 'e', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'S', 't', 'o', 'r', 'a', 'g', 'e', 'I', 'n', 'f', 'o', 0,
    'H', 'i', 'g', 'h', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    's', 'e', 't', 'C', 'h', 'i', 'l', 'd', 'M', 'o', 'd', 'e', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'S', 't', 'a', 't', 'e', 0,
    'H', 'o', 'm', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'T', 'e', 'm', 'p', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    's', 'e', 'n', 'd', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'N', 'a', 't', 'i', 'v', 'e', 'K', 'e', 'y', 0,
    'N', 'a', 't', 'i', 'v', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'e', 'd', 0,
    'm', 'a', 't', 'c', 'h', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'c', 'a', 'p', 't', 'u', 'r', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'W', 'i', 'l', 'd', 'c', 'a', 'r', 'd', 'U', 'n', 'i', 'x', 0,
    'm', 'a', 'r', 'g', 'i', 'n', 's', 'A', 'd', 'd', 'e', 'd', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    'Q', 'W', 'r', 'i', 't', 'e', 'L', 'o', 'c', 'k', 'e', 'r', 0,
    'l', 'o', 'c', 'k', 'F', 'o', 'r', 'W', 'r', 'i', 't', 'e', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    's', 'e', 't', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 's', 0,
    't', 'a', 'r', 'g', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 'g', 'm', 'e', 'n', 't', 'C', 'o', 'u', 'n', 't', 0,
    'm', 'i', 'c', 'r', 'o', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'm', 'i', 'n', 'o', 'r', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'm', 'a', 'j', 'o', 'r', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'O', 'S', 'X', 'E', 'l', 'C', 'a', 'p', 'i', 't', 'a', 'n', 0,
    'O', 'S', 'X', 'M', 'a', 'v', 'e', 'r', 'i', 'c', 'k', 's', 0,
    'Q', '_', 'R', 'E', 'T', 'U', 'R', 'N', '_', 'A', 'R', 'G', 0,
    'i', 'n', 'v', 'o', 'k', 'e', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'm', 'e', 't', 'h', 'o', 'd', 'O', 'f', 'f', 's', 'e', 't', 0,
    'u', 's', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'b', 'l', 'o', 'c', 'k', 'S', 'i', 'g', 'n', 'a', 'l', 's', 0,
    'i', 's', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'W', 'i', 'd', 'g', 'e', 't', 'T', 'y', 'p', 'e', 0,
    'f', 'i', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'N', 'o', 'n', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 0,
    'Q', 'M', 'u', 't', 'e', 'x', 'L', 'o', 'c', 'k', 'e', 'r', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'a', 'l', 'l', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 's', 0,
    'g', 'l', 'o', 'b', 'P', 'a', 't', 't', 'e', 'r', 'n', 's', 0,
    'a', 'l', 'l', 'M', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 's', 0,
    'M', 'a', 't', 'c', 'h', 'C', 'o', 'n', 't', 'e', 'n', 't', 0,
    'M', 'a', 't', 'c', 'h', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'r', 'e', 't', 'r', 'i', 'e', 'v', 'e', 'D', 'a', 't', 'a', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'D', 'a', 't', 'a', 0,
    's', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'D', 'a', 't', 'a', 0,
    'i', 's', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'e', 'd', 0,
    'Q', 'K', 'e', 'y', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', 0,
    'F', 'i', 'r', 's', 't', 'G', 'u', 'i', 'T', 'y', 'p', 'e', 0,
    'L', 'a', 's', 't', 'C', 'o', 'r', 'e', 'T', 'y', 'p', 'e', 0,
    'n', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'i', 's', 'R', 'e', 's', 'e', 't', 't', 'a', 'b', 'l', 'e', 0,
    'h', 'a', 's', 'S', 't', 'd', 'C', 'p', 'p', 'S', 'e', 't', 0,
    'i', 's', 'S', 'c', 'r', 'i', 'p', 't', 'a', 'b', 'l', 'e', 0,
    'i', 's', 'D', 'e', 's', 'i', 'g', 'n', 'a', 'b', 'l', 'e', 0,
    'c', 'a', 't', 'e', 'g', 'o', 'r', 'y', 'N', 'a', 'm', 'e', 0,
    'Q', 't', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 'M', 's', 'g', 0,
    'T', 'a', 'n', 'g', 'u', 't', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'H', 'a', 't', 'r', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'h', 'o', 'j', 'k', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'R', 'e', 'j', 'a', 'n', 'g', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'r', 'k', 'h', 'o', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'y', 'd', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'y', 'c', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'e', 'p', 'c', 'h', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'a', 'i', 't', 'h', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'H', 'a', 'n', 'g', 'u', 'l', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'G', 'o', 't', 'h', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'F', 'r', 'a', 's', 'e', 'r', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'o', 'p', 't', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'h', 'a', 'k', 'm', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'a', 'r', 'i', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'r', 'a', 'h', 'm', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'S', 'y', 'r', 'i', 'a', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'h', 'a', 'a', 'n', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'e', 'l', 'u', 'g', 'u', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'o', 'r', 'e', 'a', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'H', 'e', 'b', 'r', 'e', 'w', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'A', 'r', 'a', 'b', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'p', 'o', 's', 'i', 't', 'i', 'v', 'e', 'S', 'i', 'g', 'n', 0,
    'M', 'e', 't', 'r', 'i', 'c', 'S', 'y', 's', 't', 'e', 'm', 0,
    'n', 'e', 'g', 'a', 't', 'i', 'v', 'e', 'S', 'i', 'g', 'n', 0,
    'd', 'e', 'c', 'i', 'm', 'a', 'l', 'P', 'o', 'i', 'n', 't', 0,
    'N', 'a', 'r', 'r', 'o', 'w', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'L', 'a', 't', 'i', 'n', 'A', 'm', 'e', 'r', 'i', 'c', 'a', 0,
    'A', 'l', 'a', 'n', 'd', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'S', 't', 'a', 't', 'e', 's', 0,
    'T', 'u', 'r', 'k', 'm', 'e', 'n', 'i', 's', 't', 'a', 'n', 0,
    'N', 'e', 'w', 'C', 'a', 'l', 'e', 'd', 'o', 'n', 'i', 'a', 0,
    'N', 'a', 'u', 'r', 'u', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'G', 'u', 'i', 'n', 'e', 'a', 'B', 'i', 's', 's', 'a', 'u', 0,
    'F', 'r', 'e', 'n', 'c', 'h', 'G', 'u', 'i', 'a', 'n', 'a', 0,
    'F', 'a', 'r', 'o', 'e', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'C', 'o', 'c', 'o', 's', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'B', 'o', 'u', 'v', 'e', 't', 'I', 's', 'l', 'a', 'n', 'd', 0,
    'N', 'o', 'r', 't', 'h', 'e', 'r', 'n', 'L', 'u', 'r', 'i', 0,
    'S', 'o', 'u', 't', 'h', 'e', 'r', 'n', 'S', 'a', 'm', 'i', 0,
    'U', 'p', 'p', 'e', 'r', 'S', 'o', 'r', 'b', 'i', 'a', 'n', 0,
    'L', 'o', 'w', 'e', 'r', 'S', 'o', 'r', 'b', 'i', 'a', 'n', 0,
    'N', 'o', 'r', 't', 'h', 'e', 'r', 'n', 'T', 'h', 'a', 'i', 0,
    'E', 'a', 's', 't', 'e', 'r', 'n', 'K', 'a', 'y', 'a', 'h', 0,
    'A', 'n', 'c', 'i', 'e', 'n', 't', 'G', 'r', 'e', 'e', 'k', 0,
    'C', 'o', 'n', 'g', 'o', 'S', 'w', 'a', 'h', 'i', 'l', 'i', 0,
    'K', 'a', 'b', 'u', 'v', 'e', 'r', 'd', 'i', 'a', 'n', 'u', 0,
    'N', 'o', 'r', 't', 'h', 'N', 'd', 'e', 'b', 'e', 'l', 'e', 0,
    'N', 'o', 'r', 't', 'h', 'e', 'r', 'n', 'S', 'a', 'm', 'i', 0,
    'S', 'o', 'u', 't', 'h', 'N', 'd', 'e', 'b', 'e', 'l', 'e', 0,
    'L', 'a', 's', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'B', 'y', 'e', 'l', 'o', 'r', 'u', 's', 's', 'i', 'a', 'n', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'V', 'e', 'c', 't', 'o', 'r', 0,
    'i', 's', 'D', 'e', 'b', 'u', 'g', 'B', 'u', 'i', 'l', 'd', 0,
    'A', 'r', 'c', 'h', 'D', 'a', 't', 'a', 'P', 'a', 't', 'h', 0,
    'E', 'x', 'a', 'm', 'p', 'l', 'e', 's', 'P', 'a', 't', 'h', 0,
    'S', 'e', 't', 't', 'i', 'n', 'g', 's', 'P', 'a', 't', 'h', 0,
    'B', 'i', 'n', 'a', 'r', 'i', 'e', 's', 'P', 'a', 't', 'h', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'I', 'n', 'f', 'o', 0,
    's', 'e', 't', 'L', 'o', 'a', 'd', 'H', 'i', 'n', 't', 's', 0,
    'D', 'e', 'e', 'p', 'B', 'i', 'n', 'd', 'H', 'i', 'n', 't', 0,
    't', 'o', 'B', 'i', 'n', 'a', 'r', 'y', 'D', 'a', 't', 'a', 0,
    'I', 'l', 'l', 'e', 'g', 'a', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'm', 'o', 'd', 'e', 'l', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 'R', 'o', 'w', 's', 0,
    'h', 'a', 's', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'a', 'b', 'o', 'u', 't', 'T', 'o', 'C', 'l', 'o', 's', 'e', 0,
    'b', 'y', 't', 'e', 's', 'W', 'r', 'i', 't', 't', 'e', 'n', 0,
    'b', 'y', 't', 'e', 's', 'T', 'o', 'W', 'r', 'i', 't', 'e', 0,
    'E', 'x', 'i', 's', 't', 'i', 'n', 'g', 'O', 'n', 'l', 'y', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'a', 't', 'e', 0,
    'a', 'l', 'l', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 's', 0,
    'i', 's', 'N', 'a', 't', 'i', 'v', 'e', 'P', 'a', 't', 'h', 0,
    'l', 'a', 's', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'i', 's', 'E', 'x', 'e', 'c', 'u', 't', 'a', 'b', 'l', 'e', 0,
    'r', 'e', 'a', 'd', 'L', 'i', 'n', 'e', 'D', 'a', 't', 'a', 0,
    'i', 's', 'S', 'e', 'q', 'u', 'e', 'n', 't', 'i', 'a', 'l', 0,
    'T', 'i', 'm', 'e', 'O', 'u', 't', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'E', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'n', 's', 'e', 'c', 's', 'E', 'l', 'a', 'p', 's', 'e', 'd', 0,
    's', 'e', 't', 'O', 'v', 'e', 'r', 's', 'h', 'o', 'o', 't', 0,
    's', 'e', 't', 'A', 'm', 'p', 'l', 'i', 't', 'u', 'd', 'e', 0,
    'B', 'e', 'z', 'i', 'e', 'r', 'S', 'p', 'l', 'i', 'n', 'e', 0,
    'O', 'u', 't', 'I', 'n', 'E', 'l', 'a', 's', 't', 'i', 'c', 0,
    'I', 'n', 'O', 'u', 't', 'E', 'l', 'a', 's', 't', 'i', 'c', 0,
    'Q', 'E', 'a', 's', 'i', 'n', 'g', 'C', 'u', 'r', 'v', 'e', 0,
    'Q', 'D', 'i', 'r', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'm', 'a', 'k', 'e', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 0,
    'a', 'b', 's', 'o', 'l', 'u', 't', 'e', 'P', 'a', 't', 'h', 0,
    'Q', 'D', 'i', 'r', ':', ':', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    't', 'o', 'P', 'y', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    's', 'h', 'o', 'r', 't', 'D', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'R', 'a', 'w', 'D', 'a', 't', 'a', 0,
    'r', 'e', 'a', 'd', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'Q', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'e', 't', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'L', 'i', 't', 't', 'l', 'e', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'N', 'a', 'm', 'e', 0,
    'G', 'r', 'a', 'b', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'C', 'u', 'r', 's', 'o', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'Z', 'O', 'r', 'd', 'e', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'L', 'o', 'c', 'a', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'C', 'h', 'i', 'l', 'd', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'H', 'i', 'd', 'e', 'T', 'o', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'S', 'h', 'o', 'w', 'T', 'o', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'T', 'h', 'r', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'P', 'a', 'r', 'e', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'Q', 'E', 'v', 'e', 'n', 't', ':', ':', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'l', 'i', 'b', 'r', 'a', 'r', 'y', 'P', 'a', 't', 'h', 's', 0,
    's', 'e', 't', 'V', 'a', 'l', 'u', 'e', 'N', 'a', 'm', 'e', 0,
    't', 'o', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'm', 'a', 'x', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 0,
    'C', 'O', 'S', 'E', '_', 'E', 'n', 'c', 'r', 'y', 'p', 't', 0,
    'D', 'a', 't', 'a', 'T', 'o', 'o', 'L', 'a', 'r', 'g', 'e', 0,
    'G', 'a', 'r', 'b', 'a', 'g', 'e', 'A', 't', 'E', 'n', 'd', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    '_', '_', 'c', 'o', 'n', 't', 'a', 'i', 'n', 's', '_', '_', 0,
    'o', 'n', 'T', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 0,
    'a', 'd', 'd', 'A', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 0,
    't', 'a', 'r', 'g', 'e', 't', 'S', 't', 'a', 't', 'e', 's', 0,
    'I', 'n', 'd', 'e', 'x', 'I', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'M', 'o', 'v', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'i', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'r', 'o', 'w', 's', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    'c', 'a', 'n', 'F', 'e', 't', 'c', 'h', 'M', 'o', 'r', 'e', 0,
    'd', 'r', 'o', 'p', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    's', 'i', 'b', 'l', 'i', 'n', 'g', 'A', 't', 'R', 'o', 'w', 0,
    'a', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'l', 'o', 'c', 'k', 0,
    's', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'L', 'o', 'o', 'p', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'N', 'e', 'x', 't', 0,
    'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'S', 'e', 'n', 'd', 0,
    'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'D', 'o', 'n', 'e', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'U', 'p', 'd', 'a', 't', 'e', 0,
    'S', 'w', 'i', 'p', 'e', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'P', 'i', 'n', 'c', 'h', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'B', 'o', 't', 't', 'o', 'm', 0,
    'I', 'm', 'h', 'M', 'u', 'l', 't', 'i', 'L', 'i', 'n', 'e', 0,
    'I', 'm', 'h', 'L', 'a', 't', 'i', 'n', 'O', 'n', 'l', 'y', 0,
    'Q', 't', ':', ':', 'T', 'i', 'l', 'e', 'R', 'u', 'l', 'e', 0,
    'T', 'i', 't', 'l', 'e', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 0,
    'R', 'e', 'l', 'a', 't', 'i', 'v', 'e', 'S', 'i', 'z', 'e', 0,
    'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'S', 'i', 'z', 'e', 0,
    'Q', 't', ':', ':', 'S', 'i', 'z', 'e', 'M', 'o', 'd', 'e', 0,
    'M', 'a', 's', 'k', 'O', 'u', 't', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 't', ':', ':', 'M', 'a', 's', 'k', 'M', 'o', 'd', 'e', 0,
    'T', 'e', 'x', 't', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'M', 'a', 't', 'c', 'h', 'E', 'x', 'a', 'c', 't', 'l', 'y', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'F', 'l', 'a', 'g', 0,
    'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 'R', 'o', 'l', 'e', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'Q', 'u', 'e', 'r', 'y', 'I', 'n', 'p', 'u', 't', 0,
    'I', 'm', 'M', 'i', 'c', 'r', 'o', 'F', 'o', 'c', 'u', 's', 0,
    'Q', 't', ':', ':', 'F', 'i', 'l', 'l', 'R', 'u', 'l', 'e', 0,
    'Q', 't', ':', ':', 'T', 'i', 'm', 'e', 'S', 'p', 'e', 'c', 0,
    'P', 'r', 'e', 'c', 'i', 's', 'e', 'T', 'i', 'm', 'e', 'r', 0,
    'C', 'u', 's', 't', 'o', 'm', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'B', 'i', 't', 'm', 'a', 'p', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'p', 'l', 'i', 't', 'H', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'p', 'l', 'i', 't', 'V', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'Q', 't', ':', ':', 'U', 'I', 'E', 'f', 'f', 'e', 'c', 't', 0,
    'F', 'D', 'i', 'a', 'g', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'B', 'D', 'i', 'a', 'g', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'S', 'o', 'l', 'i', 'd', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'S', 'v', 'g', 'M', 'i', 't', 'e', 'r', 'J', 'o', 'i', 'n', 0,
    'M', 'P', 'e', 'n', 'C', 'a', 'p', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 't', ':', ':', 'P', 'e', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', 0,
    'K', 'e', 'y', '_', 'S', 'u', 'b', 't', 'i', 't', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'P', 'i', 'c', 't', 'u', 'r', 'e', 's', 0,
    'K', 'e', 'y', '_', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 'l', 0,
    'K', 'e', 'y', '_', 'T', 'a', 's', 'k', 'P', 'a', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'l', 'e', 'n', 'd', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'E', 'x', 'p', 'l', 'o', 'r', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'D', 'o', 'L', 'i', 's', 't', 0,
    'K', 'e', 'y', '_', 'H', 'o', 't', 'L', 'i', 'n', 'k', 's', 0,
    'K', 'e', 'y', '_', 'P', 'o', 'w', 'e', 'r', 'O', 'f', 'f', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'e', 'x', 't', '4', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'e', 'x', 't', '3', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'e', 'x', 't', '2', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'e', 'x', 't', '1', 0,
    'K', 'e', 'y', '_', 'H', 'o', 'm', 'e', 'P', 'a', 'g', 'e', 0,
    'K', 'e', 'y', '_', 'T', 'r', 'e', 'b', 'l', 'e', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'B', 'a', 's', 's', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'V', 'o', 'l', 'u', 'm', 'e', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'K', 'a', 't', 'a', 'k', 'a', 'n', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'i', 'r', 'a', 'g', 'a', 'n', 'a', 0,
    'K', 'e', 'y', '_', 'M', 'u', 'h', 'e', 'n', 'k', 'a', 'n', 0,
    'K', 'e', 'y', '_', 'd', 'i', 'v', 'i', 's', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'O', 'o', 'b', 'l', 'i', 'q', 'u', 'e', 0,
    'K', 'e', 'y', '_', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'y', 0,
    'K', 'e', 'y', '_', 'C', 'c', 'e', 'd', 'i', 'l', 'l', 'a', 0,
    'K', 'e', 'y', '_', 'c', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 0,
    'K', 'e', 'y', '_', 's', 't', 'e', 'r', 'l', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'Q', 'u', 'e', 's', 't', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'A', 's', 't', 'e', 'r', 'i', 's', 'k', 0,
    'K', 'e', 'y', '_', 'Q', 'u', 'o', 't', 'e', 'D', 'b', 'l', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'p', 's', 'L', 'o', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'g', 'e', 'D', 'o', 'w', 'n', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'S', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'W', 'A', '_', 'S', 'e', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'S', 'p', 'l', 'a', 's', 'h', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'T', 'e', 'x', 't', 'W', 'o', 'r', 'd', 'W', 'r', 'a', 'p', 0,
    'T', 'e', 'x', 't', 'D', 'o', 'n', 't', 'C', 'l', 'i', 'p', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'F', 'l', 'a', 'g', 0,
    'A', 'l', 'i', 'g', 'n', 'V', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'A', 'l', 'i', 'g', 'n', 'J', 'u', 's', 't', 'i', 'f', 'y', 0,
    'A', 'l', 'i', 'g', 'n', 'H', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'A', 'l', 'i', 'g', 'n', 'L', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '9', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '8', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '7', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '6', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '5', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '4', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '3', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '2', 0,
    'E', 'x', 't', 'r', 'a', 'B', 'u', 't', 't', 'o', 'n', '1', 0,
    'M', 'i', 'd', 'd', 'l', 'e', 'B', 'u', 't', 't', 'o', 'n', 0,
    'Q', 't', ':', ':', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'M', 'e', 't', 'a', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'q', 'S', 'h', 'a', 'r', 'e', 'd', 'B', 'u', 'i', 'l', 'd', 0,
    'P', 'Y', 'Q', 'T', '_', 'V', 'E', 'R', 'S', 'I', 'O', 'N', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'C', 'o', 'r', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'U', 'r', 'l', '>', 0,
    'p', 'r', 'o', 'd', 'u', 'c', 't', 'T', 'y', 'p', 'e', 0,
    'C', 'u', 's', 't', 'o', 'm', 'E', 'r', 'r', 'o', 'r', 0,
    'd', 't', 'd', 'S', 'y', 's', 't', 'e', 'm', 'I', 'd', 0,
    'd', 't', 'd', 'P', 'u', 'b', 'l', 'i', 'c', 'I', 'd', 0,
    't', 'o', 'k', 'e', 'n', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'u', 'f', 'f', 'i', 'x', 'I', 'n', 'd', 'e', 'x', 0,
    's', 'e', 't', 'E', 'n', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'f', 'r', 'o', 'm', 'R', 'f', 'c', '4', '1', '2', '2', 0,
    't', 'o', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'i', 's', 'L', 'o', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 0,
    'h', 'a', 's', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'f', 'r', 'o', 'm', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 0,
    't', 'o', 'L', 'o', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'P', 'o', 'r', 't', 0,
    's', 'e', 't', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'Q', 'u', 'e', 'r', 'y', 0,
    'D', 'e', 'c', 'o', 'd', 'e', 'd', 'M', 'o', 'd', 'e', 0,
    'Q', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'o', 'r', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'N', 'a', 'm', 'e', 0,
    'G', 'e', 'n', 'e', 'r', 'i', 'c', 'T', 'i', 'm', 'e', 0,
    's', 'e', 't', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'e', 'a', 's', 'i', 'n', 'g', 'C', 'u', 'r', 'v', 'e', 0,
    's', 'e', 't', 'E', 'n', 'd', 'F', 'r', 'a', 'm', 'e', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'C', 'u', 'r', 'v', 'e', 0,
    'E', 'a', 's', 'e', 'I', 'n', 'C', 'u', 'r', 'v', 'e', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'D', 'o', 'n', 'e', 0,
    'Q', 'T', 'h', 'r', 'e', 'a', 'd', 'P', 'o', 'o', 'l', 0,
    's', 'e', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'L', 'o', 'w', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'q', 'S', 'e', 't', 'P', 'a', 'd', 'C', 'h', 'a', 'r', 0,
    'n', 'o', 'f', 'o', 'r', 'c', 'e', 's', 'i', 'g', 'n', 0,
    'i', 'n', 't', 'e', 'g', 'e', 'r', 'B', 'a', 's', 'e', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', 0,
    'f', 'r', 'o', 'm', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'm', 'a', 'k', 'e', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 0,
    'm', 'a', 'k', 'e', 'D', 'e', 'c', 'o', 'd', 'e', 'r', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'M', 'i', 'b', 0,
    's', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'S', 't', 'a', 'r', 't', 'O', 'f', 'I', 't', 'e', 'm', 0,
    's', 'e', 't', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'S', 't', 'a', 't', 'e', 0,
    's', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    't', 'r', 'a', 'n', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    'd', 'i', 's', 'p', 'l', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'S', 'o', 'r', 't', 'R', 'o', 'l', 'e', 0,
    's', 'e', 't', 'I', 'n', 'i', 'C', 'o', 'd', 'e', 'c', 0,
    'c', 'h', 'i', 'l', 'd', 'G', 'r', 'o', 'u', 'p', 's', 0,
    'S', 'y', 's', 't', 'e', 'm', 'S', 'c', 'o', 'p', 'e', 0,
    'F', 'o', 'r', 'm', 'a', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'A', 'c', 'c', 'e', 's', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 'n', 's', 'e', 'r', 't', 'P', 'a', 'u', 's', 'e', 0,
    'c', 'a', 'p', 't', 'u', 'r', 'e', 'd', 'E', 'n', 'd', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'M', 'a', 't', 'c', 'h', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'M', 'a', 't', 'c', 'h', 0,
    'l', 'a', 's', 't', 'I', 'n', 'd', 'e', 'x', 'I', 'n', 0,
    'C', 'a', 'r', 'e', 't', 'A', 't', 'Z', 'e', 'r', 'o', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 'p', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    'Q', 'R', 'e', 'a', 'd', 'L', 'o', 'c', 'k', 'e', 'r', 0,
    'l', 'o', 'c', 'k', 'F', 'o', 'r', 'R', 'e', 'a', 'd', 0,
    'r', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    's', 'e', 't', 'D', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 'O', 'r', 'e', 'o', 0,
    'M', 'a', 'c', 'O', 'S', 'M', 'o', 'j', 'a', 'v', 'e', 0,
    'M', 'a', 'c', 'O', 'S', 'S', 'i', 'e', 'r', 'r', 'a', 0,
    'O', 'S', 'X', 'Y', 'o', 's', 'e', 'm', 'i', 't', 'e', 0,
    'c', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'o', 'r', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'S', 'l', 'o', 't', 0,
    'm', 'e', 't', 'h', 'o', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'M', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', '_', 'C', 'L', 'A', 'S', 'S', 'I', 'N', 'F', 'O', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'd', 'e', 'l', 'e', 't', 'e', 'L', 'a', 't', 'e', 'r', 0,
    's', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    '_', '_', 'g', 'e', 't', 'a', 't', 't', 'r', '_', '_', 0,
    'i', 's', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 0,
    'M', 'o', 'v', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'J', 's', 'o', 'n', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'Q', 'u', 'a', 't', 'e', 'r', 'n', 'i', 'o', 'n', 0,
    'Q', 'O', 'b', 'j', 'e', 'c', 't', 'S', 't', 'a', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'Q', 'S', 'i', 'z', 'e', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'v', 'a', 'l', 'u', 'e', 'T', 'o', 'K', 'e', 'y', 's', 0,
    'k', 'e', 'y', 's', 'T', 'o', 'V', 'a', 'l', 'u', 'e', 0,
    'm', 'e', 't', 'h', 'o', 'd', 'I', 'n', 'd', 'e', 'x', 0,
    'Q', 'M', 'e', 't', 'a', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'Q', 't', 'S', 'y', 's', 't', 'e', 'm', 'M', 's', 'g', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'k', 'I', 'n', 'f', 'o', 0,
    'q', 'u', 'o', 't', 'e', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'u', 'i', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 0,
    'O', 's', 'a', 'g', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'A', 'd', 'l', 'a', 'm', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'a', 'k', 'r', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'a', 'i', 'L', 'e', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'R', 'u', 'n', 'i', 'c', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'g', 'h', 'a', 'm', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'i', 'm', 'b', 'u', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'a', 'n', 'n', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'u', 'h', 'i', 'd', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'a', 't', 'a', 'k', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'B', 'a', 'm', 'u', 'm', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'a', 'm', 'i', 'l', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'O', 'r', 'i', 'y', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'K', 'h', 'm', 'e', 'r', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'G', 'r', 'e', 'e', 'k', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'a', 't', 'i', 'n', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'e', 'x', 'p', 'o', 'n', 'e', 'n', 't', 'i', 'a', 'l', 0,
    'S', 'h', 'o', 'r', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'S', 'i', 'n', 't', 'M', 'a', 'a', 'r', 't', 'e', 'n', 0,
    'D', 'i', 'e', 'g', 'o', 'G', 'a', 'r', 'c', 'i', 'a', 0,
    'S', 'a', 'i', 'n', 't', 'H', 'e', 'l', 'e', 'n', 'a', 0,
    'L', 'a', 's', 't', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'S', 'a', 'i', 'n', 't', 'M', 'a', 'r', 't', 'i', 'n', 0,
    'S', 'w', 'i', 't', 'z', 'e', 'r', 'l', 'a', 'n', 'd', 0,
    'S', 'o', 'u', 't', 'h', 'A', 'f', 'r', 'i', 'c', 'a', 0,
    'S', 'i', 'e', 'r', 'r', 'a', 'L', 'e', 'o', 'n', 'e', 0,
    'S', 'a', 'u', 'd', 'i', 'A', 'r', 'a', 'b', 'i', 'a', 0,
    'P', 'h', 'i', 'l', 'i', 'p', 'p', 'i', 'n', 'e', 's', 0,
    'N', 'e', 't', 'h', 'e', 'r', 'l', 'a', 'n', 'd', 's', 0,
    'C', 'o', 'o', 'k', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'B', 'u', 'r', 'k', 'i', 'n', 'a', 'F', 'a', 's', 'o', 0,
    'A', 'f', 'g', 'h', 'a', 'n', 'i', 's', 't', 'a', 'n', 0,
    'M', 'a', 'z', 'a', 'n', 'd', 'e', 'r', 'a', 'n', 'i', 0,
    'E', 'a', 's', 't', 'e', 'r', 'n', 'C', 'h', 'a', 'm', 0,
    'M', 'a', 'r', 's', 'h', 'a', 'l', 'l', 'e', 's', 'e', 0,
    'L', 'u', 'b', 'a', 'K', 'a', 't', 'a', 'n', 'g', 'a', 0,
    'A', 'n', 'y', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'K', 'o', 'y', 'r', 'a', 'C', 'h', 'i', 'i', 'n', 'i', 0,
    'S', 'w', 'i', 's', 's', 'G', 'e', 'r', 'm', 'a', 'n', 0,
    'K', 'i', 'n', 'y', 'a', 'r', 'w', 'a', 'n', 'd', 'a', 0,
    'I', 'n', 't', 'e', 'r', 'l', 'i', 'n', 'g', 'u', 'e', 0,
    'I', 'n', 't', 'e', 'r', 'l', 'i', 'n', 'g', 'u', 'a', 0,
    'G', 'r', 'e', 'e', 'n', 'l', 'a', 'n', 'd', 'i', 'c', 0,
    'A', 'z', 'e', 'r', 'b', 'a', 'i', 'j', 'a', 'n', 'i', 0,
    'P', 'l', 'u', 'g', 'i', 'n', 's', 'P', 'a', 't', 'h', 0,
    'H', 'e', 'a', 'd', 'e', 'r', 's', 'P', 'a', 't', 'h', 0,
    'f', 'r', 'o', 'm', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'D', 'e', 'e', 'p', 'N', 'e', 's', 't', 'i', 'n', 'g', 0,
    '_', '_', 'd', 'e', 'l', 'i', 't', 'e', 'm', '_', '_', 0,
    '_', '_', 's', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'e', 'd', 0,
    's', 'e', 't', 'O', 'p', 'e', 'n', 'M', 'o', 'd', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'h', 'i', 's', 't', 'o', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'D', 'e', 'e', 'p', 'H', 'i', 's', 't', 'o', 'r', 'y', 0,
    'Q', 'F', 'i', 'n', 'a', 'l', 'S', 't', 'a', 't', 'e', 0,
    'f', 'i', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 't', 'h', 's', 0,
    'a', 'b', 's', 'o', 'l', 'u', 't', 'e', 'D', 'i', 'r', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'T', 'i', 'm', 'e', 0,
    'R', 'e', 's', 'i', 'z', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'R', 'e', 'n', 'a', 'm', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'p', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 's', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 'F', 'l', 'a', 'g', 's', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'Q', 'F', 'i', 'l', 'e', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'e', 'v', 'e', 'n', 't', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'i', 's', 'M', 'o', 'n', 'o', 't', 'o', 'n', 'i', 'c', 0,
    'T', 'i', 'c', 'k', 'C', 'o', 'u', 'n', 't', 'e', 'r', 0,
    'C', 'o', 's', 'i', 'n', 'e', 'C', 'u', 'r', 'v', 'e', 0,
    'O', 'u', 't', 'I', 'n', 'B', 'o', 'u', 'n', 'c', 'e', 0,
    'I', 'n', 'O', 'u', 't', 'B', 'o', 'u', 'n', 'c', 'e', 0,
    's', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 's', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'P', 'a', 't', 'h', 0,
    'n', 'a', 'm', 'e', 'F', 'i', 'l', 't', 'e', 'r', 's', 0,
    's', 'e', 't', 'D', 'e', 'a', 'd', 'l', 'i', 'n', 'e', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 0,
    't', 'o', 'L', 'o', 'c', 'a', 'l', 'T', 'i', 'm', 'e', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 'S', 'p', 'e', 'c', 0,
    't', 'o', 'J', 'u', 'l', 'i', 'a', 'n', 'D', 'a', 'y', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'D', 'a', 't', 'e', 0,
    'l', 'o', 'n', 'g', 'D', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'd', 'a', 'y', 's', 'I', 'n', 'M', 'o', 'n', 't', 'h', 0,
    'r', 'e', 'a', 'd', 'R', 'a', 'w', 'D', 'a', 't', 'a', 0,
    'r', 'e', 'a', 'd', 'Q', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'w', 'r', 'i', 't', 'e', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'w', 'r', 'i', 't', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'U', 'I', 'n', 't', '6', '4', 0,
    'w', 'r', 'i', 't', 'e', 'U', 'I', 'n', 't', '3', '2', 0,
    'w', 'r', 'i', 't', 'e', 'U', 'I', 'n', 't', '1', '6', 0,
    's', 'k', 'i', 'p', 'R', 'a', 'w', 'D', 'a', 't', 'a', 0,
    'r', 'e', 's', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'W', 'r', 'i', 't', 'e', 'F', 'a', 'i', 'l', 'e', 'd', 0,
    'R', 'e', 'a', 'd', 'P', 'a', 's', 't', 'E', 'n', 'd', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', 0,
    'Q', 'C', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'T', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 'p', 't', 'e', 'd', 0,
    's', 'p', 'o', 'n', 't', 'a', 'n', 'e', 'o', 'u', 's', 0,
    'T', 'o', 'u', 'c', 'h', 'C', 'a', 'n', 'c', 'e', 'l', 0,
    'W', 'i', 'n', 'I', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'T', 'o', 'u', 'c', 'h', 'U', 'p', 'd', 'a', 't', 'e', 0,
    'U', 'n', 'g', 'r', 'a', 'b', 'M', 'o', 'u', 's', 'e', 0,
    'A', 'c', 't', 'i', 'o', 'n', 'A', 'd', 'd', 'e', 'd', 0,
    'S', 't', 'y', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'P', 'r', 'e', 's', 's', 0,
    'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'U', 'p', 'd', 'a', 't', 'e', 'L', 'a', 't', 'e', 'r', 0,
    'W', 'i', 'n', 'E', 'v', 'e', 'n', 't', 'A', 'c', 't', 0,
    'a', 'b', 'o', 'u', 't', 'T', 'o', 'Q', 'u', 'i', 't', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'h', 'o', 'w', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'o', 'p', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 's', 0,
    'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'n', 'u', 'm', 'e', 'r', 'i', 'c', 'M', 'o', 'd', 'e', 0,
    'i', 's', 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 0,
    'i', 's', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    'i', 's', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'E', 'n', 'd', 'O', 'f', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'M', 'i', 'm', 'e', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'E', 'n', 'c', 'o', 'd', 'e', 'd', 'C', 'b', 'o', 'r', 0,
    'I', 'l', 'l', 'e', 'g', 'a', 'l', 'T', 'y', 'p', 'e', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'T', 'y', 'p', 'e', 0,
    'q', 'U', 'n', 'c', 'o', 'm', 'p', 'r', 'e', 's', 's', 0,
    'f', 'r', 'o', 'm', 'R', 'a', 'w', 'D', 'a', 't', 'a', 0,
    't', 'o', 'U', 'L', 'o', 'n', 'g', 'L', 'o', 'n', 'g', 0,
    'l', 'a', 's', 't', 'I', 'n', 'd', 'e', 'x', 'O', 'f', 0,
    'c', 'a', 'n', 'R', 'e', 'a', 'd', 'L', 'i', 'n', 'e', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'Q', 'B', 'a', 's', 'i', 'c', 'T', 'i', 'm', 'e', 'r', 0,
    'a', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 'A', 't', 0,
    't', 'a', 'r', 'g', 'e', 't', 'S', 't', 'a', 't', 'e', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'S', 't', 'a', 't', 'e', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'S', 't', 'a', 't', 'e', 0,
    'm', 'a', 'p', 'T', 'o', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'M', 'o', 'd', 'e', 'l', 0,
    'e', 'n', 'd', 'M', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'I', 'n', 'd', 'e', 'x', 0,
    'r', 'o', 'w', 's', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'd', 'a', 't', 'a', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'b', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'I', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'h', 'a', 's', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'c', 'l', 'o', 's', 'i', 'n', 'g', 'D', 'o', 'w', 'n', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'S', 't', 'a', 't', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'L', 'o', 'o', 'p', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'i', 'm', 'e', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'B', 'e', 'g', 'i', 'n', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'R', 'i', 'g', 'h', 't', 0,
    'S', 't', 'r', 'e', 't', 'c', 'h', 'T', 'i', 'l', 'e', 0,
    'M', 'a', 'x', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 0,
    'M', 'i', 'n', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 0,
    'M', 'a', 's', 'k', 'I', 'n', 'C', 'o', 'l', 'o', 'r', 0,
    'A', 'A', '_', 'U', 's', 'e', '9', '6', 'D', 'p', 'i', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'o', 'd', 'a', 'l', 0,
    'M', 'a', 't', 'c', 'h', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    'N', 'o', 'I', 't', 'e', 'm', 'F', 'l', 'a', 'g', 's', 0,
    'T', 'o', 'o', 'l', 'T', 'i', 'p', 'R', 'o', 'l', 'e', 0,
    'D', 'i', 's', 'p', 'l', 'a', 'y', 'R', 'o', 'l', 'e', 0,
    'L', 'e', 'f', 't', 'T', 'o', 'R', 'i', 'g', 'h', 't', 0,
    'R', 'e', 'p', 'l', 'a', 'c', 'e', 'C', 'l', 'i', 'p', 0,
    'W', 'i', 'n', 'd', 'i', 'n', 'g', 'F', 'i', 'l', 'l', 0,
    'O', 'd', 'd', 'E', 'v', 'e', 'n', 'F', 'i', 'l', 'l', 0,
    'R', 'F', 'C', '2', '8', '2', '2', 'D', 'a', 't', 'e', 0,
    'B', 'l', 'a', 'n', 'k', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'I', 'B', 'e', 'a', 'm', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'C', 'r', 'o', 's', 's', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'U', 'I', '_', 'F', 'a', 'd', 'e', 'M', 'e', 'n', 'u', 0,
    'D', 'a', 's', 'h', 'D', 'o', 't', 'L', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'M', 'i', 'c', 'M', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'H', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'G', 0,
    'K', 'e', 'y', '_', 'S', 'u', 's', 'p', 'e', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'p', 'M', 'e', 'n', 'u', 0,
    'K', 'e', 'y', '_', 'B', 'a', 't', 't', 'e', 'r', 'y', 0,
    'K', 'e', 'y', '_', 'Z', 'o', 'o', 'm', 'O', 'u', 't', 0,
    'K', 'e', 'y', '_', 'S', 'u', 'p', 'p', 'o', 'r', 't', 0,
    'K', 'e', 'y', '_', 'M', 'y', 'S', 'i', 't', 'e', 's', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'e', 't', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'D', 'i', 's', 'p', 'l', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'F', 'i', 'n', 'a', 'n', 'c', 'e', 0,
    'K', 'e', 'y', '_', 'H', 'i', 's', 't', 'o', 'r', 'y', 0,
    'K', 'e', 'y', '_', 'P', 'r', 'i', 'n', 't', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'E', 'x', 'e', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'u', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'F', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'E', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'D', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'C', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'B', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'A', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '9', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '8', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '7', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '6', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '5', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '4', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '3', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '2', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '1', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '0', 0,
    'K', 'e', 'y', '_', 'O', 'p', 'e', 'n', 'U', 'r', 'l', 0,
    'K', 'e', 'y', '_', 'S', 't', 'a', 'n', 'd', 'b', 'y', 0,
    'K', 'e', 'y', '_', 'R', 'e', 'f', 'r', 'e', 's', 'h', 0,
    'K', 'e', 'y', '_', 'F', 'o', 'r', 'w', 'a', 'r', 'd', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'u', 'r', 'o', 'k', 'u', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'k', 'a', 'k', 'u', 0,
    'K', 'e', 'y', '_', 'Z', 'e', 'n', 'k', 'a', 'k', 'u', 0,
    'K', 'e', 'y', '_', 'o', 'n', 'e', 'h', 'a', 'l', 'f', 0,
    'K', 'e', 'y', '_', 'c', 'e', 'd', 'i', 'l', 'l', 'a', 0,
    'K', 'e', 'y', '_', 'n', 'o', 't', 's', 'i', 'g', 'n', 0,
    'K', 'e', 'y', '_', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'G', 'r', 'e', 'a', 't', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'P', 'e', 'r', 'c', 'e', 'n', 't', 0,
    'K', 'e', 'y', '_', 'H', 'y', 'p', 'e', 'r', '_', 'R', 0,
    'K', 'e', 'y', '_', 'H', 'y', 'p', 'e', 'r', '_', 'L', 0,
    'K', 'e', 'y', '_', 'S', 'u', 'p', 'e', 'r', '_', 'R', 0,
    'K', 'e', 'y', '_', 'S', 'u', 'p', 'e', 'r', '_', 'L', 0,
    'K', 'e', 'y', '_', 'N', 'u', 'm', 'L', 'o', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 't', 'a', 'b', 0,
    'A', 'v', 'o', 'i', 'd', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'S', 'e', 't', 'S', 't', 'y', 'l', 'e', 0,
    'W', 'A', '_', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'C', 'o', 'v', 'e', 'r', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'E', 'l', 'i', 'd', 'e', 'M', 'i', 'd', 'd', 'l', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'A', 'l', 'i', 'g', 'n', 'B', 'o', 't', 't', 'o', 'm', 0,
    'S', 't', 'r', 'o', 'n', 'g', 'F', 'o', 'c', 'u', 's', 0,
    'R', 'i', 'g', 'h', 't', 'B', 'u', 't', 't', 'o', 'n', 0,
    'A', 'l', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    't', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'd', 'a', 'r', 'k', 'M', 'a', 'g', 'e', 'n', 't', 'a', 0,
    'Q', 'L', 'i', 's', 't', '<', 'i', 'n', 't', '>', 0,
    'k', 'e', 'r', 'n', 'e', 'l', 'T', 'y', 'p', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'D', 'A', 'T', 'A', 0,
    'r', 'a', 'i', 's', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'l', 'i', 'n', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'i', 's', 'P', 'r', 'e', 'f', 'i', 'x', 'O', 'f', 0,
    'k', 'e', 'y', 'V', 'a', 'l', 'u', 'e', 'A', 't', 0,
    's', 't', 'a', 'r', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'n', 'a', 'm', 'e', 'T', 'o', 'T', 'y', 'p', 'e', 0,
    't', 'y', 'p', 'e', 'T', 'o', 'N', 'a', 'm', 'e', 0,
    'c', 'a', 'n', 'C', 'o', 'n', 'v', 'e', 'r', 't', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'U', 'u', 'i', 'd', 0,
    'W', 'i', 't', 'h', 'B', 'r', 'a', 'c', 'e', 's', 0,
    'V', 'e', 'r', 'U', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    'V', 'a', 'r', 'U', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    'q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    'i', 's', 'P', 'a', 'r', 'e', 'n', 't', 'O', 'f', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 't', 'h', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'P', 'o', 'r', 't', 0,
    'S', 't', 'r', 'i', 'c', 't', 'M', 'o', 'd', 'e', 0,
    'o', 'f', 'f', 's', 'e', 't', 'D', 'a', 't', 'a', 0,
    'O', 'f', 'f', 's', 'e', 't', 'N', 'a', 'm', 'e', 0,
    's', 'i', 'n', 'g', 'l', 'e', 'S', 'h', 'o', 't', 0,
    'c', 'u', 'r', 'v', 'e', 'S', 'h', 'a', 'p', 'e', 0,
    's', 't', 'a', 'r', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'i', 's', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    's', 'c', 'i', 'e', 'n', 't', 'i', 'f', 'i', 'c', 0,
    'n', 'o', 's', 'h', 'o', 'w', 'b', 'a', 's', 'e', 0,
    'f', 'i', 'e', 'l', 'd', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'P', 'a', 'd', 'C', 'h', 'a', 'r', 0,
    'F', 'o', 'r', 'c', 'e', 'P', 'o', 'i', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'o', 'd', 'e', 'c', 0,
    'S', 'o', 'f', 't', 'H', 'y', 'p', 'h', 'e', 'n', 0,
    'a', 'u', 't', 'o', 'R', 'e', 'm', 'o', 'v', 'e', 0,
    's', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', 'R', 'e', 'f', 0,
    'i', 's', 'R', 'e', 'a', 'd', 'O', 'n', 'l', 'y', 0,
    'b', 'y', 't', 'e', 's', 'T', 'o', 't', 'a', 'l', 0,
    's', 'e', 't', 'R', 'u', 'n', 'n', 'i', 'n', 'g', 0,
    'i', 's', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'd', 0,
    'c', 'l', 'e', 'a', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    'e', 'r', 'r', 'o', 'r', 'S', 't', 'a', 't', 'e', 0,
    'L', 'o', 'c', 'a', 't', 'e', 'F', 'i', 'l', 'e', 0,
    'f', 'i', 'l', 't', 'e', 'r', 'R', 'o', 'l', 'e', 0,
    's', 'o', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'e', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 'T', 'o', 0,
    's', 'e', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 0,
    'i', 's', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'b', 'e', 'g', 'i', 'n', 'G', 'r', 'o', 'u', 'p', 0,
    't', 'r', 'y', 'A', 'c', 'q', 'u', 'i', 'r', 'e', 0,
    'Q', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', 0,
    'a', 'u', 't', 'o', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'e', 'x', 'a', 'c', 't', 'M', 'a', 't', 'c', 'h', 0,
    's', 'e', 't', 'M', 'i', 'n', 'i', 'm', 'a', 'l', 0,
    't', 'r', 'a', 'n', 's', 'p', 'o', 's', 'e', 'd', 0,
    'm', 'o', 'v', 'e', 'B', 'o', 't', 't', 'o', 'm', 0,
    'b', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'T', 'o', 'p', 'L', 'e', 'f', 't', 0,
    'm', 'o', 'v', 'e', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 0,
    'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '6', '4', 0,
    'n', 'u', 'l', 'l', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    's', 'e', 't', 'P', 'r', 'o', 'g', 'r', 'a', 'm', 0,
    'e', 'x', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'N', 'o', 't', 'R', 'u', 'n', 'n', 'i', 'n', 'g', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'E', 'x', 'i', 't', 0,
    'd', 'o', 't', 'P', 'r', 'o', 'd', 'u', 'c', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 's', '8', '_', '1', 0,
    's', 'u', 'p', 'e', 'r', 'C', 'l', 'a', 's', 's', 0,
    'Q', 'T', '_', 'T', 'R', '_', 'N', 'O', 'O', 'P', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    's', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', 'r', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'N', 'a', 'm', 'e', 0,
    'm', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'C', 'b', 'o', 'r', 'A', 'r', 'r', 'a', 'y', 0,
    'Q', 'C', 'b', 'o', 'r', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'J', 's', 'o', 'n', 'A', 'r', 'r', 'a', 'y', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', '4', 'x', '4', 0,
    'Q', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'i', 's', 'C', 'o', 'n', 's', 't', 'a', 'n', 't', 0,
    'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'i', 's', 'E', 'n', 'u', 'm', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'F', 'l', 'a', 'g', 'T', 'y', 'p', 'e', 0,
    'v', 'a', 'l', 'u', 'e', 'T', 'o', 'K', 'e', 'y', 0,
    'k', 'e', 'y', 'T', 'o', 'V', 'a', 'l', 'u', 'e', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'T', 'y', 'p', 'e', 0,
    'm', 'e', 't', 'h', 'o', 'd', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 't', 'F', 'a', 't', 'a', 'l', 'M', 's', 'g', 0,
    'Q', 't', 'D', 'e', 'b', 'u', 'g', 'M', 's', 'g', 0,
    'J', 'a', 'm', 'o', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'N', 'e', 'w', 'a', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'A', 'h', 'o', 'm', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'M', 'o', 'd', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'h', 'a', 'm', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'T', 'h', 'a', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    't', 'o', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    't', 'i', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'd', 'a', 't', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'L', 'o', 'n', 'g', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'S', 'o', 'u', 't', 'h', 'S', 'u', 'd', 'a', 'n', 0,
    'S', 'a', 'i', 'n', 't', 'L', 'u', 'c', 'i', 'a', 0,
    'S', 'o', 'u', 't', 'h', 'K', 'o', 'r', 'e', 'a', 0,
    'N', 'o', 'r', 't', 'h', 'K', 'o', 'r', 'e', 'a', 0,
    'M', 'o', 'n', 't', 'e', 'n', 'e', 'g', 'r', 'o', 0,
    'U', 'z', 'b', 'e', 'k', 'i', 's', 't', 'a', 'n', 0,
    'T', 'a', 'j', 'i', 'k', 'i', 's', 't', 'a', 'n', 0,
    'S', 'e', 'y', 'c', 'h', 'e', 'l', 'l', 'e', 's', 0,
    'P', 'u', 'e', 'r', 't', 'o', 'R', 'i', 'c', 'o', 0,
    'N', 'e', 'w', 'Z', 'e', 'a', 'l', 'a', 'n', 'd', 0,
    'M', 'o', 'z', 'a', 'm', 'b', 'i', 'q', 'u', 'e', 0,
    'M', 'o', 'n', 't', 's', 'e', 'r', 'r', 'a', 't', 0,
    'M', 'i', 'c', 'r', 'o', 'n', 'e', 's', 'i', 'a', 0,
    'M', 'a', 'u', 'r', 'i', 't', 'a', 'n', 'i', 'a', 0,
    'M', 'a', 'r', 't', 'i', 'n', 'i', 'q', 'u', 'e', 0,
    'M', 'a', 'd', 'a', 'g', 'a', 's', 'c', 'a', 'r', 0,
    'L', 'u', 'x', 'e', 'm', 'b', 'o', 'u', 'r', 'g', 0,
    'K', 'y', 'r', 'g', 'y', 'z', 's', 't', 'a', 'n', 0,
    'K', 'a', 'z', 'a', 'k', 'h', 's', 't', 'a', 'n', 0,
    'G', 'u', 'a', 'd', 'e', 'l', 'o', 'u', 'p', 'e', 0,
    'E', 'l', 'S', 'a', 'l', 'v', 'a', 'd', 'o', 'r', 0,
    'I', 'v', 'o', 'r', 'y', 'C', 'o', 'a', 's', 't', 0,
    'B', 'a', 'n', 'g', 'l', 'a', 'd', 'e', 's', 'h', 0,
    'A', 'z', 'e', 'r', 'b', 'a', 'i', 'j', 'a', 'n', 0,
    'A', 'n', 't', 'a', 'r', 'c', 't', 'i', 'c', 'a', 0,
    'A', 'n', 'y', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'P', 'a', 'p', 'i', 'a', 'm', 'e', 'n', 't', 'o', 0,
    'S', 'a', 'u', 'r', 'a', 's', 'h', 't', 'r', 'a', 0,
    'P', 'h', 'o', 'e', 'n', 'i', 'c', 'i', 'a', 'n', 0,
    'O', 'l', 'd', 'T', 'u', 'r', 'k', 'i', 's', 'h', 0,
    'O', 'l', 'd', 'P', 'e', 'r', 's', 'i', 'a', 'n', 0,
    'L', 'i', 'm', 'b', 'u', 'r', 'g', 'i', 's', 'h', 0,
    'B', 'e', 'l', 'a', 'r', 'u', 's', 'i', 'a', 'n', 0,
    'V', 'i', 'e', 't', 'n', 'a', 'm', 'e', 's', 'e', 0,
    'P', 'o', 'r', 't', 'u', 'g', 'u', 'e', 's', 'e', 0,
    'M', 'a', 'c', 'e', 'd', 'o', 'n', 'i', 'a', 'n', 0,
    'L', 'i', 't', 'h', 'u', 'a', 'n', 'i', 'a', 'n', 0,
    'I', 'n', 'd', 'o', 'n', 'e', 's', 'i', 'a', 'n', 0,
    'u', 'n', 'i', 't', 'V', 'e', 'c', 't', 'o', 'r', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 'd', 0,
    'P', 'r', 'e', 'f', 'i', 'x', 'P', 'a', 't', 'h', 0,
    'Q', 'J', 's', 'o', 'n', 'V', 'a', 'l', 'u', 'e', 0,
    'v', 'a', 'l', 'i', 'd', 'a', 't', 'i', 'o', 'n', 0,
    'i', 's', 'S', 'e', 'l', 'e', 'c', 't', 'e', 'd', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 0,
    'U', 'n', 'b', 'u', 'f', 'f', 'e', 'r', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 't', 'h', 0,
    'b', 'u', 'n', 'd', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'C', 'a', 'c', 'h', 'i', 'n', 'g', 0,
    'p', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 0,
    'i', 's', 'W', 'r', 'i', 't', 'a', 'b', 'l', 'e', 0,
    '_', '_', 'f', 's', 'p', 'a', 't', 'h', '_', '_', 0,
    'u', 'n', 's', 'e', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'W', 'r', 'i', 't', 'e', 'O', 't', 'h', 'e', 'r', 0,
    'W', 'r', 'i', 't', 'e', 'G', 'r', 'o', 'u', 'p', 0,
    'W', 'r', 'i', 't', 'e', 'O', 'w', 'n', 'e', 'r', 0,
    'A', 'b', 'o', 'r', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'F', 'a', 't', 'a', 'l', 'E', 'r', 'r', 'o', 'r', 0,
    'W', 'r', 'i', 't', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'd', 'e', 'c', 'o', 'd', 'e', 'N', 'a', 'm', 'e', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'N', 'a', 'm', 'e', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 'L', 'o', 'o', 'p', 0,
    'i', 'n', 'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    'S', 'y', 's', 't', 'e', 'm', 'T', 'i', 'm', 'e', 0,
    'c', 'u', 's', 't', 'o', 'm', 'T', 'y', 'p', 'e', 0,
    'O', 'u', 't', 'I', 'n', 'Q', 'u', 'i', 'n', 't', 0,
    'I', 'n', 'O', 'u', 't', 'Q', 'u', 'i', 'n', 't', 0,
    'O', 'u', 't', 'I', 'n', 'Q', 'u', 'a', 'r', 't', 0,
    'I', 'n', 'O', 'u', 't', 'Q', 'u', 'a', 'r', 't', 0,
    'O', 'u', 't', 'I', 'n', 'C', 'u', 'b', 'i', 'c', 0,
    'I', 'n', 'O', 'u', 't', 'C', 'u', 'b', 'i', 'c', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'i', 's', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 0,
    'i', 's', 'R', 'e', 'l', 'a', 't', 'i', 'v', 'e', 0,
    'i', 's', 'R', 'e', 'a', 'd', 'a', 'b', 'l', 'e', 0,
    's', 'e', 't', 'S', 'o', 'r', 't', 'i', 'n', 'g', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'C', 'a', 's', 'e', 0,
    'S', 'o', 'r', 't', 'B', 'y', 'M', 'a', 's', 'k', 0,
    'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 's', 'k', 0,
    'A', 'l', 'l', 'E', 'n', 't', 'r', 'i', 'e', 's', 0,
    'N', 'o', 'S', 'y', 'm', 'L', 'i', 'n', 'k', 's', 0,
    'h', 'a', 's', 'E', 'x', 'p', 'i', 'r', 'e', 'd', 0,
    't', 'o', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 0,
    'f', 'r', 'o', 'm', 'T', 'i', 'm', 'e', '_', 't', 0,
    't', 'o', 'T', 'i', 'm', 'e', 'S', 'p', 'e', 'c', 0,
    'i', 's', 'L', 'e', 'a', 'p', 'Y', 'e', 'a', 'r', 0,
    'f', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'w', 'e', 'e', 'k', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'y', 'e', 'a', 'r', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'd', 'a', 'y', 's', 'I', 'n', 'Y', 'e', 'a', 'r', 0,
    'w', 'r', 'i', 't', 'e', 'B', 'y', 't', 'e', 's', 0,
    'w', 'r', 'i', 't', 'e', 'F', 'l', 'o', 'a', 't', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', '6', '4', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', '3', '2', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', '1', '6', 0,
    'w', 'r', 'i', 't', 'e', 'U', 'I', 'n', 't', '8', 0,
    'r', 'e', 'a', 'd', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'r', 'e', 'a', 'd', 'U', 'I', 'n', 't', '6', '4', 0,
    'r', 'e', 'a', 'd', 'U', 'I', 'n', 't', '3', '2', 0,
    'r', 'e', 'a', 'd', 'U', 'I', 'n', 't', '1', '6', 0,
    's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'h', 'a', 's', 'h', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'K', 'e', 'c', 'c', 'a', 'k', '_', '5', '1', '2', 0,
    'K', 'e', 'c', 'c', 'a', 'k', '_', '3', '8', '4', 0,
    'K', 'e', 'c', 'c', 'a', 'k', '_', '2', '5', '6', 0,
    'K', 'e', 'c', 'c', 'a', 'k', '_', '2', '2', '4', 0,
    'i', 's', 'A', 'c', 'c', 'e', 'p', 't', 'e', 'd', 0,
    'T', 'o', 'u', 'c', 'h', 'B', 'e', 'g', 'i', 'n', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'M', 'o', 'v', 'e', 0,
    'C', 'h', 'i', 'l', 'd', 'A', 'd', 'd', 'e', 'd', 0,
    'K', 'e', 'y', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'C', 'o', 'd', 'e', 0,
    'a', 'd', 'd', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'r', 'e', 'a', 'd', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'T', 'e', 'x', 't', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'B', 'y', 't', 'e', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 't', 'a', 'r', 't', 'A', 'r', 'r', 'a', 'y', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'N', 'u', 'l', 'l', 0,
    'C', 'O', 'S', 'E', '_', 'S', 'i', 'g', 'n', '1', 0,
    'U', 'n', 'i', 'x', 'T', 'i', 'm', 'e', '_', 't', 0,
    'Q', 'C', 'b', 'o', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'p', 'u', 's', 'h', '_', 'f', 'r', 'o', 'n', 't', 0,
    'f', 'r', 'o', 'm', 'B', 'a', 's', 'e', '6', '4', 0,
    't', 'o', 'L', 'o', 'n', 'g', 'L', 'o', 'n', 'g', 0,
    's', 'i', 'm', 'p', 'l', 'i', 'f', 'i', 'e', 'd', 0,
    's', 't', 'a', 'r', 't', 's', 'W', 'i', 't', 'h', 0,
    'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    '_', '_', 'r', 's', 'h', 'i', 'f', 't', '_', '_', 0,
    '_', '_', 'l', 's', 'h', 'i', 'f', 't', '_', '_', 0,
    'i', 's', 'D', 'e', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'a', 'n', 'i', 'm', 'a', 't', 'i', 'o', 'n', 's', 0,
    'c', 'h', 'e', 'c', 'k', 'I', 'n', 'd', 'e', 'x', 0,
    'd', 'e', 'c', 'o', 'd', 'e', 'D', 'a', 't', 'a', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'D', 'a', 't', 'a', 0,
    'm', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'e', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'i', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 's', 0,
    'h', 'e', 'a', 'd', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'I', 'd', 0,
    's', 't', 'a', 'r', 't', 'i', 'n', 'g', 'U', 'p', 0,
    'E', 'n', 't', 'e', 'r', 'K', 'e', 'y', 'G', 'o', 0,
    'N', 'o', 'T', 'a', 'b', 'F', 'o', 'c', 'u', 's', 0,
    'B', 'o', 't', 't', 'o', 'm', 'E', 'd', 'g', 'e', 0,
    'P', 'a', 'n', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'T', 'a', 'p', 'G', 'e', 's', 't', 'u', 'r', 'e', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'L', 'e', 'f', 't', 0,
    'R', 'e', 'p', 'e', 'a', 't', 'T', 'i', 'l', 'e', 0,
    'T', 'o', 'p', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'A', 'c', 't', 'i', 'o', 'n', 'M', 'a', 's', 'k', 0,
    'L', 'i', 'n', 'k', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'p', 'y', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'Q', 'u', 'e', 'r', 'y', 'A', 'l', 'l', 0,
    'Q', 't', ':', ':', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'L', 'a', 's', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'B', 'u', 's', 'y', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'W', 'a', 'i', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'U', 'I', '_', 'G', 'e', 'n', 'e', 'r', 'a', 'l', 0,
    'V', 'e', 'r', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'H', 'o', 'r', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'R', 'i', 'g', 'h', 't', 'A', 'r', 'r', 'o', 'w', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'U', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'u', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'O', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'o', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'I', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'i', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'E', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'a', 0,
    'K', 'e', 'y', '_', 'Y', 'e', 'l', 'l', 'o', 'w', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'm', 'e', 'r', 'a', 0,
    'K', 'e', 'y', '_', 'W', 'e', 'b', 'C', 'a', 'm', 0,
    'K', 'e', 'y', '_', 'Z', 'o', 'o', 'm', 'I', 'n', 0,
    'K', 'e', 'y', '_', 'T', 'r', 'a', 'v', 'e', 'l', 0,
    'K', 'e', 'y', '_', 'R', 'e', 'l', 'o', 'a', 'd', 0,
    'K', 'e', 'y', '_', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'n', 'u', 'P', 'B', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'n', 'u', 'K', 'B', 0,
    'K', 'e', 'y', '_', 'M', 'a', 'r', 'k', 'e', 't', 0,
    'K', 'e', 'y', '_', 'L', 'o', 'g', 'O', 'f', 'f', 0,
    'K', 'e', 'y', '_', 'i', 'T', 'o', 'u', 'c', 'h', 0,
    'K', 'e', 'y', '_', 'W', 'a', 'k', 'e', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'n', 'c', 'e', 'l', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'p', 0,
    'K', 'e', 'y', '_', 'S', 'e', 'l', 'e', 'c', 't', 0,
    'K', 'e', 'y', '_', 'S', 'e', 'a', 'r', 'c', 'h', 0,
    'K', 'e', 'y', '_', 'B', 'a', 's', 's', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', 0,
    'K', 'e', 'y', '_', 'M', 'a', 's', 's', 'y', 'o', 0,
    'K', 'e', 'y', '_', 'R', 'o', 'm', 'a', 'j', 'i', 0,
    'K', 'e', 'y', '_', 'H', 'e', 'n', 'k', 'a', 'n', 0,
    'K', 'e', 'y', '_', 's', 's', 'h', 'a', 'r', 'p', 0,
    'K', 'e', 'y', '_', 'Y', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'U', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'U', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'O', 't', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'O', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'O', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'N', 't', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'I', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'I', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'A', 't', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'A', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'A', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'd', 'e', 'g', 'r', 'e', 'e', 0,
    'K', 'e', 'y', '_', 'm', 'a', 'c', 'r', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'h', 'y', 'p', 'h', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'P', 'e', 'r', 'i', 'o', 'd', 0,
    'K', 'e', 'y', '_', 'D', 'o', 'l', 'l', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'E', 'x', 'c', 'l', 'a', 'm', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'g', 'e', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'S', 'y', 's', 'R', 'e', 'q', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'K', 'e', 'y', '_', 'I', 'n', 's', 'e', 'r', 't', 0,
    'K', 'e', 'y', '_', 'R', 'e', 't', 'u', 'r', 'n', 0,
    'K', 'e', 'y', '_', 'E', 's', 'c', 'a', 'p', 'e', 0,
    'O', 'p', 'a', 'q', 'u', 'e', 'M', 'o', 'd', 'e', 0,
    'Q', 't', ':', ':', 'B', 'G', 'M', 'o', 'd', 'e', 0,
    'A', 'u', 't', 'o', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'R', 'e', 's', 'i', 'z', 'e', 'd', 0,
    'W', 'A', '_', 'S', 'e', 't', 'F', 'o', 'n', 't', 0,
    'W', 'A', '_', 'L', 'a', 'i', 'd', 'O', 'u', 't', 0,
    'E', 'l', 'i', 'd', 'e', 'R', 'i', 'g', 'h', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'R', 'i', 'g', 'h', 't', 0,
    'W', 'h', 'e', 'e', 'l', 'F', 'o', 'c', 'u', 's', 0,
    'C', 'l', 'i', 'c', 'k', 'F', 'o', 'c', 'u', 's', 0,
    'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 0,
    'T', 'a', 's', 'k', 'B', 'u', 't', 't', 'o', 'n', 0,
    'B', 'a', 'c', 'k', 'B', 'u', 't', 't', 'o', 'n', 0,
    'L', 'e', 'f', 't', 'B', 'u', 't', 't', 'o', 'n', 0,
    'A', 'l', 'l', 'B', 'u', 't', 't', 'o', 'n', 's', 0,
    'N', 'o', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'd', 'a', 'r', 'k', 'Y', 'e', 'l', 'l', 'o', 'w', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    'b', 'e', 'h', 'a', 'v', 'i', 'o', 'u', 'r', 0,
    'i', 's', 'C', 'o', 'm', 'm', 'e', 'n', 't', 0,
    't', 'o', 'k', 'e', 'n', 'T', 'y', 'p', 'e', 0,
    's', 'e', 'g', 'm', 'e', 'n', 't', 'A', 't', 0,
    'k', 'e', 'y', 'V', 'a', 'l', 'u', 'e', 's', 0,
    't', 'o', 'R', 'f', 'c', '4', '1', '2', '2', 0,
    'M', 'i', 'c', 'r', 'o', 's', 'o', 'f', 't', 0,
    'Q', 'U', 'r', 'l', 'Q', 'u', 'e', 'r', 'y', 0,
    't', 'o', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 0,
    'a', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', 0,
    's', 'e', 't', 'S', 'c', 'h', 'e', 'm', 'e', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'S', 'h', 'o', 'r', 't', 'N', 'a', 'm', 'e', 0,
    'Q', 'T', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 0,
    'Q', 'T', 'i', 'm', 'e', 'L', 'i', 'n', 'e', 0,
    'l', 'o', 'o', 'p', 'L', 'e', 'v', 'e', 'l', 0,
    's', 't', 'a', 'c', 'k', 'S', 'i', 'z', 'e', 0,
    'm', 'a', 'x', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'F', 'o', 'r', 'c', 'e', 'S', 'i', 'g', 'n', 0,
    't', 'o', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'c', 'a', 'n', 'E', 'n', 'c', 'o', 'd', 'e', 0,
    'E', 'n', 'd', 'O', 'f', 'I', 't', 'e', 'm', 0,
    's', 'u', 'b', 'v', 'o', 'l', 'u', 'm', 'e', 0,
    'b', 'l', 'o', 'c', 'k', 'S', 'i', 'z', 'e', 0,
    'b', 'y', 't', 'e', 's', 'F', 'r', 'e', 'e', 0,
    'c', 'h', 'i', 'l', 'd', 'M', 'o', 'd', 'e', 0,
    'l', 'o', 'c', 'a', 't', 'e', 'A', 'l', 'l', 0,
    's', 'o', 'r', 't', 'O', 'r', 'd', 'e', 'r', 0,
    'E', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n', 0,
    'b', 'o', 'u', 'n', 'd', 'e', 'd', 'T', 'o', 0,
    't', 'r', 'a', 'n', 's', 'p', 'o', 's', 'e', 0,
    's', 'e', 't', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'K', 'e', 'y', 0,
    'c', 'o', 'n', 's', 't', 'D', 'a', 't', 'a', 0,
    'c', 'h', 'i', 'l', 'd', 'K', 'e', 'y', 's', 0,
    'U', 's', 'e', 'r', 'S', 'c', 'o', 'p', 'e', 0,
    'I', 'n', 'i', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', 0,
    's', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'Q', 'S', 'a', 'v', 'e', 'F', 'i', 'l', 'e', 0,
    'Q', 'R', 'u', 'n', 'n', 'a', 'b', 'l', 'e', 0,
    'Q', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'm', 'a', 't', 'c', 'h', 'T', 'y', 'p', 'e', 0,
    'c', 'a', 'r', 'e', 't', 'M', 'o', 'd', 'e', 0,
    'i', 's', 'M', 'i', 'n', 'i', 'm', 'a', 'l', 0,
    's', 'e', 't', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'C', 'o', 'o', 'r', 'd', 's', 0,
    'g', 'e', 't', 'C', 'o', 'o', 'r', 'd', 's', 0,
    'm', 'o', 'v', 'e', 'R', 'i', 'g', 'h', 't', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'I', 'd', 0,
    't', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'e', 0,
    'C', 'r', 'a', 's', 'h', 'E', 'x', 'i', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 's', '1', '0', 0,
    'c', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 0,
    'c', 'l', 'a', 's', 's', 'N', 'a', 'm', 'e', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 'e', 'd', 0,
    's', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'k', 'i', 'l', 'l', 'T', 'i', 'm', 'e', 'r', 0,
    'f', 'i', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 0,
    'q', 'I', 's', 'F', 'i', 'n', 'i', 't', 'e', 0,
    '_', '_', 'e', 'n', 't', 'e', 'r', '_', '_', 0,
    'i', 's', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'Q', 'M', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'h', 'a', 's', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'c', 'o', 'l', 'o', 'r', 'D', 'a', 't', 'a', 0,
    'i', 'm', 'a', 'g', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    't', 'y', 'p', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 'F', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '4', 'D', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '3', 'D', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '2', 'D', 0,
    'Q', 'M', 'e', 't', 'a', 'T', 'y', 'p', 'e', 0,
    'Q', 'M', 'e', 't', 'a', 'E', 'n', 'u', 'm', 0,
    'P', 'r', 'o', 't', 'e', 'c', 't', 'e', 'd', 0,
    't', 'o', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    'Q', 'M', 'a', 'r', 'g', 'i', 'n', 's', 'F', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 0,
    'i', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'q', 'C', 'r', 'i', 't', 'i', 'c', 'a', 'l', 0,
    'Q', 't', 'I', 'n', 'f', 'o', 'M', 's', 'g', 0,
    'Q', 't', 'M', 's', 'g', 'T', 'y', 'p', 'e', 0,
    'Q', 'L', 'o', 'c', 'k', 'F', 'i', 'l', 'e', 0,
    'b', 'c', 'p', '4', '7', 'N', 'a', 'm', 'e', 0,
    'M', 'r', 'o', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'N', 'k', 'o', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'V', 'a', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'L', 'a', 'o', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'A', 'n', 'y', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'm', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'z', 'e', 'r', 'o', 'D', 'i', 'g', 'i', 't', 0,
    'I', 's', 'l', 'e', 'O', 'f', 'M', 'a', 'n', 0,
    'V', 'e', 'n', 'e', 'z', 'u', 'e', 'l', 'a', 0,
    'S', 'w', 'a', 'z', 'i', 'l', 'a', 'n', 'd', 0,
    'S', 'i', 'n', 'g', 'a', 'p', 'o', 'r', 'e', 0,
    'S', 'a', 'n', 'M', 'a', 'r', 'i', 'n', 'o', 0,
    'N', 'i', 'c', 'a', 'r', 'a', 'g', 'u', 'a', 0,
    'M', 'a', 'u', 'r', 'i', 't', 'i', 'u', 's', 0,
    'M', 'a', 'c', 'e', 'd', 'o', 'n', 'i', 'a', 0,
    'L', 'i', 't', 'h', 'u', 'a', 'n', 'i', 'a', 0,
    'I', 'n', 'd', 'o', 'n', 'e', 's', 'i', 'a', 0,
    'G', 'u', 'a', 't', 'e', 'm', 'a', 'l', 'a', 0,
    'G', 'r', 'e', 'e', 'n', 'l', 'a', 'n', 'd', 0,
    'G', 'i', 'b', 'r', 'a', 'l', 't', 'a', 'r', 0,
    'E', 'a', 's', 't', 'T', 'i', 'm', 'o', 'r', 0,
    'C', 'o', 's', 't', 'a', 'R', 'i', 'c', 'a', 0,
    'C', 'a', 'p', 'e', 'V', 'e', 'r', 'd', 'e', 0,
    'A', 'u', 's', 't', 'r', 'a', 'l', 'i', 'a', 0,
    'A', 'r', 'g', 'e', 'n', 't', 'i', 'n', 'a', 0,
    'C', 'a', 'n', 't', 'o', 'n', 'e', 's', 'e', 0,
    'T', 'e', 'd', 'i', 'm', 'C', 'h', 'i', 'n', 0,
    'H', 'm', 'o', 'n', 'g', 'N', 'j', 'u', 'a', 0,
    'S', 'k', 'o', 'l', 't', 'S', 'a', 'm', 'i', 0,
    'I', 'n', 'a', 'r', 'i', 'S', 'a', 'm', 'i', 0,
    'S', 'a', 'm', 'a', 'r', 'i', 't', 'a', 'n', 0,
    'B', 'a', 't', 'a', 'k', 'T', 'o', 'b', 'a', 0,
    'A', 'r', 'a', 'g', 'o', 'n', 'e', 's', 'e', 0,
    'N', 'g', 'i', 'e', 'm', 'b', 'o', 'o', 'n', 0,
    'S', 'a', 'r', 'd', 'i', 'n', 'i', 'a', 'n', 0,
    'J', 'o', 'l', 'a', 'F', 'o', 'n', 'y', 'i', 0,
    'C', 'o', 'l', 'o', 'g', 'n', 'i', 'a', 'n', 0,
    'T', 'a', 'c', 'h', 'e', 'l', 'h', 'i', 't', 0,
    'L', 'o', 'w', 'G', 'e', 'r', 'm', 'a', 'n', 0,
    'S', 'i', 'c', 'h', 'u', 'a', 'n', 'Y', 'i', 0,
    'U', 'k', 'r', 'a', 'i', 'n', 'i', 'a', 'n', 0,
    'S', 'u', 'n', 'd', 'a', 'n', 'e', 's', 'e', 0,
    'S', 'l', 'o', 'v', 'e', 'n', 'i', 'a', 'n', 0,
    'N', 'o', 'r', 'w', 'e', 'g', 'i', 'a', 'n', 0,
    'M', 'o', 'n', 'g', 'o', 'l', 'i', 'a', 'n', 0,
    'M', 'o', 'l', 'd', 'a', 'v', 'i', 'a', 'n', 0,
    'M', 'a', 'l', 'a', 'y', 'a', 'l', 'a', 'm', 0,
    'I', 'n', 'u', 'k', 't', 'i', 't', 'u', 't', 0,
    'I', 'c', 'e', 'l', 'a', 'n', 'd', 'i', 'c', 0,
    'H', 'u', 'n', 'g', 'a', 'r', 'i', 'a', 'n', 0,
    'E', 's', 'p', 'e', 'r', 'a', 'n', 't', 'o', 0,
    'C', 'a', 'm', 'b', 'o', 'd', 'i', 'a', 'n', 0,
    'B', 'u', 'l', 'g', 'a', 'r', 'i', 'a', 'n', 0,
    'A', 'f', 'r', 'i', 'k', 'a', 'a', 'n', 's', 0,
    'A', 'b', 'k', 'h', 'a', 'z', 'i', 'a', 'n', 0,
    'f', 'r', 'o', 'm', 'P', 'o', 'l', 'a', 'r', 0,
    's', 'e', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 0,
    's', 'e', 't', 'P', 'o', 'i', 'n', 't', 's', 0,
    'b', 'u', 'i', 'l', 'd', 'D', 'a', 't', 'e', 0,
    'T', 'e', 's', 't', 's', 'P', 'a', 't', 'h', 0,
    'i', 's', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 0,
    'l', 'o', 'a', 'd', 'H', 'i', 'n', 't', 's', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    't', 'o', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    't', 'a', 'k', 'e', 'F', 'i', 'r', 's', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'l', 'l', 0,
    'r', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 0,
    'u', 'n', 'g', 'e', 't', 'C', 'h', 'a', 'r', 0,
    'R', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 0,
    'W', 'r', 'i', 't', 'e', 'O', 'n', 'l', 'y', 0,
    'b', 'i', 'r', 't', 'h', 'T', 'i', 'm', 'e', 0,
    'i', 's', 'S', 'y', 'm', 'L', 'i', 'n', 'k', 0,
    'Q', 'F', 'i', 'l', 'e', 'I', 'n', 'f', 'o', 0,
    'N', 'o', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'R', 'e', 'a', 'd', 'O', 't', 'h', 'e', 'r', 0,
    'R', 'e', 'a', 'd', 'G', 'r', 'o', 'u', 'p', 0,
    'W', 'r', 'i', 't', 'e', 'U', 's', 'e', 'r', 0,
    'R', 'e', 'a', 'd', 'O', 'w', 'n', 'e', 'r', 0,
    'C', 'o', 'p', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'O', 'p', 'e', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    'R', 'e', 'a', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 's', 'R', 'u', 'n', 'n', 'i', 'n', 'g', 0,
    'A', 'l', 'l', 'E', 'v', 'e', 'n', 't', 's', 0,
    'c', 'l', 'o', 'c', 'k', 'T', 'y', 'p', 'e', 0,
    'o', 'v', 'e', 'r', 's', 'h', 'o', 'o', 't', 0,
    's', 'e', 't', 'P', 'e', 'r', 'i', 'o', 'd', 0,
    'a', 'm', 'p', 'l', 'i', 't', 'u', 'd', 'e', 0,
    'T', 'C', 'B', 'S', 'p', 'l', 'i', 'n', 'e', 0,
    'S', 'i', 'n', 'e', 'C', 'u', 'r', 'v', 'e', 0,
    'O', 'u', 't', 'I', 'n', 'B', 'a', 'c', 'k', 0,
    'I', 'n', 'O', 'u', 't', 'B', 'a', 'c', 'k', 0,
    'O', 'u', 't', 'I', 'n', 'C', 'i', 'r', 'c', 0,
    'I', 'n', 'O', 'u', 't', 'C', 'i', 'r', 'c', 0,
    'O', 'u', 't', 'I', 'n', 'E', 'x', 'p', 'o', 0,
    'I', 'n', 'O', 'u', 't', 'E', 'x', 'p', 'o', 0,
    'O', 'u', 't', 'I', 'n', 'S', 'i', 'n', 'e', 0,
    'I', 'n', 'O', 'u', 't', 'S', 'i', 'n', 'e', 0,
    'O', 'u', 't', 'I', 'n', 'Q', 'u', 'a', 'd', 0,
    'I', 'n', 'O', 'u', 't', 'Q', 'u', 'a', 'd', 0,
    'c', 'l', 'e', 'a', 'n', 'P', 'a', 't', 'h', 0,
    'e', 'n', 't', 'r', 'y', 'L', 'i', 's', 't', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'D', 'i', 'r', 's', 'F', 'i', 'r', 's', 't', 0,
    'i', 's', 'F', 'o', 'r', 'e', 'v', 'e', 'r', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', '_', 't', 0,
    'Q', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    'a', 'd', 'd', 'M', 'o', 'n', 't', 'h', 's', 0,
    'd', 'a', 'y', 'O', 'f', 'Y', 'e', 'a', 'r', 0,
    'd', 'a', 'y', 'O', 'f', 'W', 'e', 'e', 'k', 0,
    'r', 'e', 'a', 'd', 'B', 'y', 't', 'e', 's', 0,
    'w', 'r', 'i', 't', 'e', 'B', 'o', 'o', 'l', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', '8', 0,
    'r', 'e', 'a', 'd', 'F', 'l', 'o', 'a', 't', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', '6', '4', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', '3', '2', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', '1', '6', 0,
    'r', 'e', 'a', 'd', 'U', 'I', 'n', 't', '8', 0,
    'b', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'B', 'i', 'g', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    'G', 'r', 'a', 'b', 'M', 'o', 'u', 's', 'e', 0,
    'S', 't', 'a', 't', 'u', 's', 'T', 'i', 'p', 0,
    'O', 'k', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'C', 'l', 'i', 'p', 'b', 'o', 'a', 'r', 'd', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'p', 'o', 's', 't', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 'n', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'r', 'r', 'o', 'r', 'T', 'e', 'x', 't', 0,
    'a', 'r', 'g', 'u', 'm', 'e', 'n', 't', 's', 0,
    'a', 'd', 'd', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'H', 'i', 'd', 'd', 'e', 'n', 0,
    'v', 'a', 'l', 'u', 'e', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'Q', 'C', 'o', 'l', 'l', 'a', 't', 'o', 'r', 0,
    't', 'o', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'i', 's', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 0,
    'i', 's', 'F', 'l', 'o', 'a', 't', '1', '6', 0,
    'i', 's', 'I', 'n', 't', 'e', 'g', 'e', 'r', 0,
    'l', 'a', 's', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'H', 'a', 'l', 'f', 'F', 'l', 'o', 'a', 't', 0,
    's', 'e', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'C', 'O', 'S', 'E', '_', 'S', 'i', 'g', 'n', 0,
    'C', 'O', 'S', 'E', '_', 'M', 'a', 'c', '0', 0,
    'E', 'n', 'd', 'O', 'f', 'F', 'i', 'l', 'e', 0,
    'q', 'C', 'h', 'e', 'c', 'k', 's', 'u', 'm', 0,
    'q', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 0,
    's', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'p', 'u', 's', 'h', '_', 'b', 'a', 'c', 'k', 0,
    'p', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'w', 'r', 'i', 't', 'e', 'D', 'a', 't', 'a', 0,
    's', 'e', 't', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'Q', 'I', 'O', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    't', 'o', 'g', 'g', 'l', 'e', 'B', 'i', 't', 0,
    'Q', 'B', 'i', 't', 'A', 'r', 'r', 'a', 'y', 0,
    'e', 'v', 'e', 'n', 't', 'T', 'e', 's', 't', 0,
    't', 'r', 'i', 'g', 'g', 'e', 'r', 'e', 'd', 0,
    's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'o', 'w', 's', 'M', 'o', 'v', 'e', 'd', 0,
    'r', 'o', 'l', 'e', 'N', 'a', 'm', 'e', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 0,
    'i', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 0,
    'f', 'e', 't', 'c', 'h', 'M', 'o', 'r', 'e', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 's', 0,
    'e', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'i', 'n', 't', 'e', 'r', 'r', 'u', 'p', 't', 0,
    't', 'i', 'm', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'P', 'a', 'u', 's', 'e', 'd', 0,
    'l', 'o', 'o', 'p', 'C', 'o', 'u', 'n', 't', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'E', 'd', 'g', 'e', 's', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'E', 'n', 'd', 0,
    'R', 'i', 'g', 'h', 't', 'E', 'd', 'g', 'e', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'T', 'o', 'p', 0,
    'R', 'o', 'u', 'n', 'd', 'T', 'i', 'l', 'e', 0,
    'N', 'o', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'M', 'a', 't', 'c', 'h', 'W', 'r', 'a', 'p', 0,
    'U', 'n', 'c', 'h', 'e', 'c', 'k', 'e', 'd', 0,
    'I', 'm', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'W', 'e', 'd', 'n', 'e', 's', 'd', 'a', 'y', 0,
    'L', 'o', 'c', 'a', 'l', 'D', 'a', 't', 'e', 0,
    'P', 'l', 'a', 'i', 'n', 'T', 'e', 'x', 't', 0,
    'R', 'o', 'u', 'n', 'd', 'J', 'o', 'i', 'n', 0,
    'B', 'e', 'v', 'e', 'l', 'J', 'o', 'i', 'n', 0,
    'S', 'q', 'u', 'a', 'r', 'e', 'C', 'a', 'p', 0,
    'M', 'P', 'e', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'S', 'o', 'l', 'i', 'd', 'L', 'i', 'n', 'e', 0,
    'L', 'e', 'f', 't', 'A', 'r', 'r', 'o', 'w', 0,
    'D', 'o', 'w', 'n', 'A', 'r', 'r', 'o', 'w', 0,
    'K', 'e', 'y', '_', 'G', 'u', 'i', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'G', 'r', 'e', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'M', 'u', 's', 'i', 'c', 0,
    'K', 'e', 'y', '_', 'V', 'i', 'd', 'e', 'o', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'o', 'l', 's', 0,
    'K', 'e', 'y', '_', 'S', 'p', 'e', 'l', 'l', 0,
    'K', 'e', 'y', '_', 'R', 'e', 'p', 'l', 'y', 0,
    'K', 'e', 'y', '_', 'P', 'h', 'o', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'P', 'a', 's', 't', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'x', 'c', 'e', 'l', 0,
    'K', 'e', 'y', '_', 'C', 'l', 'o', 's', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'j', 'e', 'c', 't', 0,
    'K', 'e', 'y', '_', 'S', 'l', 'e', 'e', 'p', 0,
    'K', 'e', 'y', '_', 'K', 'a', 'n', 'j', 'i', 0,
    'K', 'e', 'y', '_', 'A', 'l', 't', 'G', 'r', 0,
    'K', 'e', 'y', '_', 'T', 'H', 'O', 'R', 'N', 0,
    'K', 'e', 'y', '_', 'A', 'r', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'q', 'u', 'a', 'l', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'l', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'S', 'l', 'a', 's', 'h', 0,
    'K', 'e', 'y', '_', 'M', 'i', 'n', 'u', 's', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'm', 'm', 'a', 0,
    'K', 'e', 'y', '_', 'S', 'p', 'a', 'c', 'e', 0,
    'K', 'e', 'y', '_', 'S', 'h', 'i', 'f', 't', 0,
    'K', 'e', 'y', '_', 'R', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'C', 'l', 'e', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'P', 'r', 'i', 'n', 't', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'u', 's', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'n', 't', 'e', 'r', 0,
    'C', 'o', 'l', 'o', 'r', 'O', 'n', 'l', 'y', 0,
    'A', 'u', 't', 'o', 'C', 'o', 'l', 'o', 'r', 0,
    'W', 'A', '_', 'M', 'a', 'p', 'p', 'e', 'd', 0,
    'S', 'u', 'b', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'E', 'l', 'i', 'd', 'e', 'N', 'o', 'n', 'e', 0,
    'E', 'l', 'i', 'd', 'e', 'L', 'e', 'f', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'L', 'e', 'f', 't', 0,
    'M', 'i', 'd', 'B', 'u', 't', 't', 'o', 'n', 0,
    'd', 'a', 'r', 'k', 'G', 'r', 'e', 'e', 'n', 0,
    'l', 'i', 'g', 'h', 't', 'G', 'r', 'a', 'y', 0,
    'b', 'u', 'i', 'l', 'd', 'A', 'b', 'i', 0,
    'W', 'o', 'r', 'd', 'S', 'i', 'z', 'e', 0,
    'Q', 'S', 'y', 's', 'I', 'n', 'f', 'o', 0,
    'w', 'r', 'i', 't', 'e', 'D', 'T', 'D', 0,
    'h', 'a', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'r', 'e', 'a', 'd', 'N', 'e', 'x', 't', 0,
    'p', 'u', 'b', 'l', 'i', 'c', 'I', 'd', 0,
    's', 'y', 's', 't', 'e', 'm', 'I', 'd', 0,
    's', 'e', 'g', 'm', 'e', 'n', 't', 's', 0,
    'e', 'n', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'U', 's', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'Q', 'u', 'e', 'r', 'y', 0,
    'h', 'a', 's', 'Q', 'u', 'e', 'r', 'y', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 'd', 0,
    'f', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'p', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    'u', 's', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    'u', 's', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'n', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'L', 'o', 'n', 'g', 'N', 'a', 'm', 'e', 0,
    'e', 'n', 'd', 'F', 'r', 'a', 'm', 'e', 0,
    't', 'r', 'y', 'S', 't', 'a', 'r', 't', 0,
    's', 'e', 't', 'C', 'o', 'd', 'e', 'c', 0,
    'S', 'h', 'o', 'w', 'B', 'a', 's', 'e', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'S', 'e', 'n', 't', 'e', 'n', 'c', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'e', 'm', 'e', 0,
    'a', 'd', 'd', 'S', 't', 'a', 't', 'e', 0,
    's', 'o', 'r', 't', 'R', 'o', 'l', 'e', 0,
    'l', 'e', 's', 's', 'T', 'h', 'a', 'n', 0,
    'N', 'o', 't', 'F', 'o', 'u', 'n', 'd', 0,
    'K', 'e', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 'n', 'i', 'C', 'o', 'd', 'e', 'c', 0,
    's', 'e', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'e', 'n', 'd', 'G', 'r', 'o', 'u', 'p', 0,
    'a', 'd', 'd', 'P', 'a', 'u', 's', 'e', 0,
    'p', 'e', 'e', 'k', 'N', 'e', 'x', 't', 0,
    'c', 'a', 'p', 't', 'u', 'r', 'e', 'd', 0,
    'h', 'a', 's', 'M', 'a', 't', 'c', 'h', 0,
    'o', 'p', 't', 'i', 'm', 'i', 'z', 'e', 0,
    's', 'e', 't', 'W', 'i', 'd', 't', 'h', 0,
    'a', 'd', 'j', 'u', 's', 't', 'e', 'd', 0,
    'm', 'o', 'v', 'e', 'L', 'e', 'f', 't', 0,
    't', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 0,
    'S', 't', 'a', 'r', 't', 'i', 'n', 'g', 0,
    'T', 'i', 'm', 'e', 'd', 'o', 'u', 't', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 's', '8', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 's', '7', 0,
    'p', 'y', 'q', 't', 'S', 'l', 'o', 't', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    '_', '_', 'e', 'x', 'i', 't', '_', '_', 0,
    'i', 'n', 'h', 'e', 'r', 'i', 't', 's', 0,
    's', 'u', 'f', 'f', 'i', 'x', 'e', 's', 0,
    'i', 'c', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'h', 'a', 's', 'C', 'o', 'l', 'o', 'r', 0,
    'h', 'a', 's', 'I', 'm', 'a', 'g', 'e', 0,
    'Q', 'C', 'b', 'o', 'r', 'M', 'a', 'p', 0,
    'V', 'o', 'i', 'd', 'S', 't', 'a', 'r', 0,
    'Q', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'Q', 'P', 'a', 'l', 'e', 't', 't', 'e', 0,
    'u', 's', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'S', 't', 'o', 'r', 'e', 'd', 0,
    'e', 'n', 'u', 'm', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'S', 'c', 'o', 'p', 'e', 'd', 0,
    'k', 'e', 'y', 'C', 'o', 'u', 'n', 't', 0,
    't', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 0,
    '_', '_', 'i', 'd', 'i', 'v', '_', '_', 0,
    's', 'e', 't', 'R', 'i', 'g', 'h', 't', 0,
    'Q', 'M', 'a', 'r', 'g', 'i', 'n', 's', 0,
    '_', '_', 'c', 'a', 'l', 'l', '_', '_', 0,
    'q', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 0,
    'c', 'r', 'i', 't', 'i', 'c', 'a', 'l', 0,
    'c', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', 0,
    'i', 's', 'L', 'o', 'c', 'k', 'e', 'd', 0,
    'w', 'e', 'e', 'k', 'd', 'a', 'y', 's', 0,
    'Y', 'i', 'S', 'c', 'r', 'i', 'p', 't', 0,
    'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'G', 'u', 'e', 'r', 'n', 's', 'e', 'y', 0,
    'Z', 'i', 'm', 'b', 'a', 'b', 'w', 'e', 0,
    'T', 'h', 'a', 'i', 'l', 'a', 'n', 'd', 0,
    'T', 'a', 'n', 'z', 'a', 'n', 'i', 'a', 0,
    'S', 'u', 'r', 'i', 'n', 'a', 'm', 'e', 0,
    'S', 'r', 'i', 'L', 'a', 'n', 'k', 'a', 0,
    'S', 'l', 'o', 'v', 'e', 'n', 'i', 'a', 0,
    'S', 'l', 'o', 'v', 'a', 'k', 'i', 'a', 0,
    'P', 'o', 'r', 't', 'u', 'g', 'a', 'l', 0,
    'P', 'i', 't', 'c', 'a', 'i', 'r', 'n', 0,
    'P', 'a', 'r', 'a', 'g', 'u', 'a', 'y', 0,
    'P', 'a', 'k', 'i', 's', 't', 'a', 'n', 0,
    'M', 'o', 'n', 'g', 'o', 'l', 'i', 'a', 0,
    'M', 'a', 'l', 'd', 'i', 'v', 'e', 's', 0,
    'M', 'a', 'l', 'a', 'y', 's', 'i', 'a', 0,
    'K', 'i', 'r', 'i', 'b', 'a', 't', 'i', 0,
    'H', 'o', 'n', 'g', 'K', 'o', 'n', 'g', 0,
    'H', 'o', 'n', 'd', 'u', 'r', 'a', 's', 0,
    'E', 't', 'h', 'i', 'o', 'p', 'i', 'a', 0,
    'D', 'o', 'm', 'i', 'n', 'i', 'c', 'a', 0,
    'D', 'j', 'i', 'b', 'o', 'u', 't', 'i', 0,
    'C', 'o', 'l', 'o', 'm', 'b', 'i', 'a', 0,
    'C', 'a', 'm', 'e', 'r', 'o', 'o', 'n', 0,
    'C', 'a', 'm', 'b', 'o', 'd', 'i', 'a', 0,
    'B', 'u', 'l', 'g', 'a', 'r', 'i', 'a', 0,
    'B', 'o', 't', 's', 'w', 'a', 'n', 'a', 0,
    'B', 'a', 'r', 'b', 'a', 'd', 'o', 's', 0,
    'A', 'n', 'g', 'u', 'i', 'l', 'l', 'a', 0,
    'T', 'o', 'k', 'P', 'i', 's', 'i', 'n', 0,
    'B', 'h', 'o', 'j', 'p', 'u', 'r', 'i', 0,
    'M', 'a', 'i', 't', 'h', 'i', 'l', 'i', 0,
    'L', 'e', 'z', 'g', 'h', 'i', 'a', 'n', 0,
    'W', 'a', 'r', 'l', 'p', 'i', 'r', 'i', 0,
    'L', 'u', 'l', 'e', 'S', 'a', 'm', 'i', 0,
    'P', 'r', 'u', 's', 's', 'i', 'a', 'n', 0,
    'U', 'g', 'a', 'r', 'i', 't', 'i', 'c', 0,
    'T', 'a', 'g', 'b', 'a', 'n', 'w', 'a', 0,
    'P', 'a', 'r', 't', 'h', 'i', 'a', 'n', 0,
    'O', 'l', 'd', 'N', 'o', 'r', 's', 'e', 0,
    'O', 'l', 'd', 'I', 'r', 'i', 's', 'h', 0,
    'M', 'e', 'r', 'o', 'i', 't', 'i', 'c', 0,
    'M', 'a', 'n', 'i', 'p', 'u', 'r', 'i', 0,
    'M', 'a', 'n', 'd', 'i', 'n', 'g', 'o', 0,
    'E', 't', 'r', 'u', 's', 'c', 'a', 'n', 0,
    'B', 'u', 'g', 'i', 'n', 'e', 's', 'e', 0,
    'B', 'a', 'l', 'i', 'n', 'e', 's', 'e', 0,
    'A', 'k', 'k', 'a', 'd', 'i', 'a', 'n', 0,
    'A', 's', 't', 'u', 'r', 'i', 'a', 'n', 0,
    'K', 'w', 'a', 'n', 'y', 'a', 'm', 'a', 0,
    'H', 'i', 'r', 'i', 'M', 'o', 't', 'u', 0,
    'C', 'h', 'a', 'm', 'o', 'r', 'r', 'o', 0,
    'T', 'a', 'h', 'i', 't', 'i', 'a', 'n', 0,
    'D', 'z', 'o', 'n', 'g', 'k', 'h', 'a', 0,
    'S', 'h', 'a', 'm', 'b', 'a', 'l', 'a', 0,
    'K', 'a', 'l', 'e', 'n', 'j', 'i', 'n', 0,
    'M', 'o', 'r', 'i', 's', 'y', 'e', 'n', 0,
    'C', 'h', 'e', 'r', 'o', 'k', 'e', 'e', 0,
    'N', 'y', 'a', 'n', 'k', 'o', 'l', 'e', 0,
    'F', 'i', 'l', 'i', 'p', 'i', 'n', 'o', 0,
    'H', 'a', 'w', 'a', 'i', 'i', 'a', 'n', 0,
    'F', 'r', 'i', 'u', 'l', 'i', 'a', 'n', 0,
    'T', 'i', 'g', 'r', 'i', 'n', 'y', 'a', 0,
    'S', 'a', 'n', 's', 'k', 'r', 'i', 't', 0,
    'R', 'o', 'm', 'a', 'n', 'i', 'a', 'n', 0,
    'M', 'a', 'l', 'a', 'g', 'a', 's', 'y', 0,
    'K', 'a', 's', 'h', 'm', 'i', 'r', 'i', 0,
    'J', 'a', 'v', 'a', 'n', 'e', 's', 'e', 0,
    'J', 'a', 'p', 'a', 'n', 'e', 's', 'e', 0,
    'G', 'u', 'j', 'a', 'r', 'a', 't', 'i', 0,
    'G', 'e', 'o', 'r', 'g', 'i', 'a', 'n', 0,
    'G', 'a', 'l', 'i', 'c', 'i', 'a', 'n', 0,
    'E', 's', 't', 'o', 'n', 'i', 'a', 'n', 0,
    'C', 'o', 'r', 's', 'i', 'c', 'a', 'n', 0,
    'A', 's', 's', 'a', 'm', 'e', 's', 'e', 0,
    'A', 'r', 'm', 'e', 'n', 'i', 'a', 'n', 0,
    'A', 'l', 'b', 'a', 'n', 'i', 'a', 'n', 0,
    's', 'e', 't', 'A', 'n', 'g', 'l', 'e', 0,
    'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'l', 'i', 'c', 'e', 'n', 's', 'e', 'e', 0,
    'i', 's', 'L', 'o', 'a', 'd', 'e', 'd', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 0,
    't', 'o', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'A', 'r', 'r', 'a', 'y', 0,
    'i', 's', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'f', 'r', 'o', 'm', 'J', 's', 'o', 'n', 0,
    'I', 'n', 'd', 'e', 'n', 't', 'e', 'd', 0,
    'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    't', 'a', 'k', 'e', 'L', 'a', 's', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 't', 0,
    'D', 'e', 's', 'e', 'l', 'e', 'c', 't', 0,
    'N', 'o', 'U', 'p', 'd', 'a', 't', 'e', 0,
    'r', 'e', 'a', 'd', 'L', 'i', 'n', 'e', 0,
    'T', 'r', 'u', 'n', 'c', 'a', 't', 'e', 0,
    'a', 'd', 'd', 'P', 'a', 't', 'h', 's', 0,
    'i', 's', 'B', 'u', 'n', 'd', 'l', 'e', 0,
    'l', 'a', 's', 't', 'R', 'e', 'a', 'd', 0,
    'b', 'a', 's', 'e', 'N', 'a', 'm', 'e', 0,
    'f', 'i', 'l', 'e', 'T', 'i', 'm', 'e', 0,
    'E', 'x', 'e', 'O', 't', 'h', 'e', 'r', 0,
    'E', 'x', 'e', 'G', 'r', 'o', 'u', 'p', 0,
    'R', 'e', 'a', 'd', 'U', 's', 'e', 'r', 0,
    'E', 'x', 'e', 'O', 'w', 'n', 'e', 'r', 0,
    'f', 'i', 'l', 'e', 'I', 'n', 'f', 'o', 0,
    't', 'e', 'm', 'p', 'P', 'a', 't', 'h', 0,
    'r', 'o', 'o', 't', 'P', 'a', 't', 'h', 0,
    'h', 'o', 'm', 'e', 'P', 'a', 't', 'h', 0,
    'f', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'f', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'D', 'i', 'r', 's', 'L', 'a', 's', 't', 0,
    'R', 'e', 'v', 'e', 'r', 's', 'e', 'd', 0,
    'U', 'n', 's', 'o', 'r', 't', 'e', 'd', 0,
    'N', 'o', 'D', 'o', 't', 'D', 'o', 't', 0,
    'N', 'o', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'T', 'y', 'p', 'e', 'M', 'a', 's', 'k', 0,
    '_', '_', 'i', 's', 'u', 'b', '_', '_', 0,
    'a', 'd', 'd', 'N', 'S', 'e', 'c', 's', 0,
    'd', 'e', 'a', 'd', 'l', 'i', 'n', 'e', 0,
    't', 'i', 'm', 'e', 'Z', 'o', 'n', 'e', 0,
    't', 'o', 'T', 'i', 'm', 'e', '_', 't', 0,
    't', 'i', 'm', 'e', 'S', 'p', 'e', 'c', 0,
    'a', 'd', 'd', 'M', 'S', 'e', 'c', 's', 0,
    't', 'o', 'P', 'y', 'T', 'i', 'm', 'e', 0,
    'a', 'd', 'd', 'Y', 'e', 'a', 'r', 's', 0,
    't', 'o', 'P', 'y', 'D', 'a', 't', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', 0,
    'r', 'e', 'a', 'd', 'B', 'o', 'o', 'l', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', '8', 0,
    'S', 'h', 'a', '3', '_', '5', '1', '2', 0,
    'S', 'h', 'a', '3', '_', '3', '8', '4', 0,
    'S', 'h', 'a', '3', '_', '2', '5', '6', 0,
    'S', 'h', 'a', '3', '_', '2', '2', '4', 0,
    'p', 'o', 'l', 'i', 's', 'h', 'e', 'd', 0,
    'T', 'o', 'u', 'c', 'h', 'E', 'n', 'd', 0,
    'F', 'i', 'l', 'e', 'O', 'p', 'e', 'n', 0,
    'I', 'c', 'o', 'n', 'D', 'r', 'a', 'g', 0,
    'M', 'e', 't', 'a', 'C', 'a', 'l', 'l', 0,
    'F', 'o', 'c', 'u', 's', 'O', 'u', 't', 0,
    'K', 'e', 'y', 'P', 'r', 'e', 's', 's', 0,
    'p', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 0,
    'h', 'e', 'l', 'p', 'T', 'e', 'x', 't', 0,
    's', 'h', 'o', 'w', 'H', 'e', 'l', 'p', 0,
    'e', 'x', 'i', 't', 'C', 'o', 'd', 'e', 0,
    's', 'e', 't', 'F', 'l', 'a', 'g', 's', 0,
    'i', 's', 'H', 'i', 'd', 'd', 'e', 'n', 0,
    'i', 's', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'i', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 't', 'a', 'r', 't', 'M', 'a', 'p', 0,
    'e', 'n', 'd', 'A', 'r', 'r', 'a', 'y', 0,
    'C', 'O', 'S', 'E', '_', 'M', 'a', 'c', 0,
    'B', 'i', 'g', 'f', 'l', 'o', 'a', 't', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'r', 'e', 'p', 'e', 'a', 't', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    'c', 'a', 'p', 'a', 'c', 'i', 't', 'y', 0,
    '_', '_', 'i', 'm', 'u', 'l', '_', '_', 0,
    '_', '_', 'r', 'e', 'p', 'r', '_', '_', 0,
    't', 'o', 'B', 'a', 's', 'e', '6', '4', 0,
    't', 'o', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    't', 'o', 'U', 'S', 'h', 'o', 'r', 't', 0,
    '_', '_', 'i', 'a', 'd', 'd', '_', '_', 0,
    'e', 'n', 'd', 's', 'W', 'i', 't', 'h', 0,
    'r', 'e', 'a', 'd', 'D', 'a', 't', 'a', 0,
    'o', 'p', 'e', 'n', 'M', 'o', 'd', 'e', 0,
    'f', 'r', 'o', 'm', 'B', 'i', 't', 's', 0,
    'c', 'l', 'e', 'a', 'r', 'B', 'i', 't', 0,
    't', 'r', 'u', 'n', 'c', 'a', 't', 'e', 0,
    'i', 's', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'N', 'o', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'm', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    'i', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'r', 'o', 'w', 'C', 'o', 'u', 'n', 't', 0,
    'h', 'a', 's', 'I', 'n', 'd', 'e', 'x', 0,
    'i', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'i', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'f', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'B', 'a', 'c', 'k', 'w', 'a', 'r', 'd', 0,
    'L', 'e', 'f', 't', 'E', 'd', 'g', 'e', 0,
    'Q', 't', ':', ':', 'E', 'd', 'g', 'e', 0,
    'F', 'u', 'z', 'z', 'y', 'H', 'i', 't', 0,
    'E', 'x', 'a', 'c', 't', 'H', 'i', 't', 0,
    'Q', 't', ':', ':', 'A', 'x', 'i', 's', 0,
    'N', 'o', 'n', 'M', 'o', 'd', 'a', 'l', 0,
    'U', 's', 'e', 'r', 'R', 'o', 'l', 'e', 0,
    'F', 'o', 'n', 't', 'R', 'o', 'l', 'e', 0,
    'E', 'd', 'i', 't', 'R', 'o', 'l', 'e', 0,
    'S', 'a', 't', 'u', 'r', 'd', 'a', 'y', 0,
    'T', 'h', 'u', 'r', 's', 'd', 'a', 'y', 0,
    'T', 'e', 'x', 't', 'D', 'a', 't', 'e', 0,
    'A', 'u', 't', 'o', 'T', 'e', 'x', 't', 0,
    'R', 'i', 'c', 'h', 'T', 'e', 'x', 't', 0,
    'R', 'o', 'u', 'n', 'd', 'C', 'a', 'p', 0,
    'K', 'e', 'y', '_', 'R', 'e', 'd', 'o', 0,
    'K', 'e', 'y', '_', 'U', 'n', 'd', 'o', 0,
    'K', 'e', 'y', '_', 'F', 'i', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'O', 'p', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'E', 'x', 'i', 't', 0,
    'K', 'e', 'y', '_', 'I', 'n', 'f', 'o', 0,
    'K', 'e', 'y', '_', 'B', 'l', 'u', 'e', 0,
    'K', 'e', 'y', '_', 'V', 'i', 'e', 'w', 0,
    'K', 'e', 'y', '_', 'T', 'i', 'm', 'e', 0,
    'K', 'e', 'y', '_', 'W', 'L', 'A', 'N', 0,
    'K', 'e', 'y', '_', 'A', 'w', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'X', 'f', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'W', 'o', 'r', 'd', 0,
    'K', 'e', 'y', '_', 'S', 'e', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'S', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'N', 'e', 'w', 's', 0,
    'K', 'e', 'y', '_', 'G', 'a', 'm', 'e', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'p', 'y', 0,
    'K', 'e', 'y', '_', 'B', 'o', 'o', 'k', 0,
    'K', 'e', 'y', '_', 'S', 'h', 'o', 'p', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'm', 'o', 0,
    'K', 'e', 'y', '_', 'Z', 'o', 'o', 'm', 0,
    'K', 'e', 'y', '_', 'P', 'l', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'F', 'l', 'i', 'p', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'l', 'l', 0,
    'K', 'e', 'y', '_', 'S', 't', 'o', 'p', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'c', 'e', 'n', 't', 0,
    'K', 'e', 'y', '_', 'L', 'e', 's', 's', 0,
    'K', 'e', 'y', '_', 'P', 'l', 'u', 's', 0,
    'K', 'e', 'y', '_', 'H', 'e', 'l', 'p', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'n', 'u', 0,
    'K', 'e', 'y', '_', 'M', 'e', 't', 'a', 0,
    'K', 'e', 'y', '_', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'H', 'o', 'm', 'e', 0,
    'M', 'o', 'n', 'o', 'O', 'n', 'l', 'y', 0,
    'W', 'A', '_', 'H', 'o', 'v', 'e', 'r', 0,
    'W', 'A', '_', 'M', 'o', 'v', 'e', 'd', 0,
    'A', 'l', 'i', 'g', 'n', 'T', 'o', 'p', 0,
    'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 0,
    'X', 'B', 'u', 't', 't', 'o', 'n', '2', 0,
    'X', 'B', 'u', 't', 't', 'o', 'n', '1', 0,
    'N', 'o', 'B', 'u', 't', 't', 'o', 'n', 0,
    'd', 'a', 'r', 'k', 'C', 'y', 'a', 'n', 0,
    'd', 'a', 'r', 'k', 'B', 'l', 'u', 'e', 0,
    'd', 'a', 'r', 'k', 'G', 'r', 'a', 'y', 0,
    'q', 'u', 'i', 'n', 't', 'p', 't', 'r', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'q', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'q', 'R', 'o', 'u', 'n', 'd', '6', '4', 0,
    'd', 't', 'd', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'C', 'D', 'A', 'T', 'A', 0,
    'N', 'o', 'T', 'o', 'k', 'e', 'n', 0,
    'w', 'a', 'k', 'e', 'A', 'l', 'l', 0,
    'w', 'a', 'k', 'e', 'O', 'n', 'e', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 0,
    'm', 'a', 't', 'c', 'h', 'e', 's', 0,
    'f', 'r', 'o', 'm', 'A', 'c', 'e', 0,
    's', 'e', 't', 'P', 'o', 'r', 't', 0,
    's', 'e', 't', 'H', 'o', 's', 't', 0,
    't', 'r', 'y', 'T', 'a', 'k', 'e', 0,
    'Q', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'p', 'a', 'd', 'C', 'h', 'a', 'r', 0,
    'm', 'i', 'b', 'E', 'n', 'u', 'm', 0,
    't', 'o', 'S', 't', 'a', 'r', 't', 0,
    'i', 's', 'R', 'e', 'a', 'd', 'y', 0,
    's', 't', 'o', 'p', 'p', 'e', 'd', 0,
    'm', 'a', 'p', 'p', 'i', 'n', 'g', 0,
    'Q', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'a', 'l', 'l', 'K', 'e', 'y', 's', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'a', 'c', 'q', 'u', 'i', 'r', 'e', 0,
    'm', 'a', 'p', 'R', 'o', 'o', 't', 0,
    'N', 'o', 'M', 'a', 't', 'c', 'h', 0,
    'R', 'e', 'g', 'E', 'x', 'p', '2', 0,
    's', 'e', 't', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'R', 'e', 'c', 't', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 'p', 0,
    'g', 'l', 'o', 'b', 'a', 'l', '_', 0,
    'd', 'i', 's', 'c', 'a', 'r', 'd', 0,
    'b', 'o', 'u', 'n', 'd', 'e', 'd', 0,
    's', 't', 'a', 'r', 't', 'e', 'd', 0,
    'e', 'x', 'e', 'c', 'u', 't', 'e', 0,
    'p', 'r', 'o', 'g', 'r', 'a', 'm', 0,
    'C', 'r', 'a', 's', 'h', 'e', 'd', 0,
    't', 'o', 'P', 'o', 'i', 'n', 't', 0,
    'A', 'n', 'd', 'r', 'o', 'i', 'd', 0,
    'W', 'a', 't', 'c', 'h', 'O', 'S', 0,
    'u', 'n', 'b', 'l', 'o', 'c', 'k', 0,
    'r', 'e', 'b', 'l', 'o', 'c', 'k', 0,
    'Q', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'Q', '_', 'E', 'N', 'U', 'M', 'S', 0,
    'a', 'l', 'i', 'a', 's', 'e', 's', 0,
    'c', 'o', 'm', 'm', 'e', 'n', 't', 0,
    'f', 'o', 'r', 'm', 'a', 't', 's', 0,
    'h', 'a', 's', 'H', 't', 'm', 'l', 0,
    's', 'e', 't', 'H', 't', 'm', 'l', 0,
    'h', 'a', 's', 'T', 'e', 'x', 't', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 0,
    'h', 'a', 's', 'U', 'r', 'l', 's', 0,
    's', 'e', 't', 'U', 'r', 'l', 's', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'Q', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'Q', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'Q', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    'Q', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'Q', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    'Q', 'P', 'o', 'i', 'n', 't', 'F', 0,
    'i', 's', 'F', 'i', 'n', 'a', 'l', 0,
    'P', 'r', 'i', 'v', 'a', 't', 'e', 0,
    '_', '_', 'p', 'o', 's', '_', '_', 0,
    '_', '_', 'n', 'e', 'g', '_', '_', 0,
    '_', '_', 'd', 'i', 'v', '_', '_', 0,
    's', 'e', 't', 'L', 'e', 'f', 't', 0,
    'w', 'a', 'r', 'n', 'i', 'n', 'g', 0,
    't', 'r', 'y', 'L', 'o', 'c', 'k', 0,
    'd', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'c', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'B', 'o', 'n', 'a', 'i', 'r', 'e', 0,
    'V', 'i', 'e', 't', 'n', 'a', 'm', 0,
    'C', 'u', 'r', 'a', 'S', 'a', 'o', 0,
    'V', 'a', 'n', 'u', 'a', 't', 'u', 0,
    'U', 'r', 'u', 'g', 'u', 'a', 'y', 0,
    'U', 'k', 'r', 'a', 'i', 'n', 'e', 0,
    'T', 'u', 'n', 'i', 's', 'i', 'a', 0,
    'T', 'o', 'k', 'e', 'l', 'a', 'u', 0,
    'S', 'o', 'm', 'a', 'l', 'i', 'a', 0,
    'S', 'e', 'n', 'e', 'g', 'a', 'l', 0,
    'R', 'o', 'm', 'a', 'n', 'i', 'a', 0,
    'R', 'e', 'u', 'n', 'i', 'o', 'n', 0,
    'N', 'i', 'g', 'e', 'r', 'i', 'a', 0,
    'N', 'a', 'm', 'i', 'b', 'i', 'a', 0,
    'M', 'y', 'a', 'n', 'm', 'a', 'r', 0,
    'M', 'o', 'r', 'o', 'c', 'c', 'o', 0,
    'M', 'o', 'l', 'd', 'o', 'v', 'a', 0,
    'M', 'a', 'y', 'o', 't', 't', 'e', 0,
    'L', 'i', 'b', 'e', 'r', 'i', 'a', 0,
    'L', 'e', 's', 'o', 't', 'h', 'o', 0,
    'L', 'e', 'b', 'a', 'n', 'o', 'n', 0,
    'J', 'a', 'm', 'a', 'i', 'c', 'a', 0,
    'I', 'r', 'e', 'l', 'a', 'n', 'd', 0,
    'I', 'c', 'e', 'l', 'a', 'n', 'd', 0,
    'H', 'u', 'n', 'g', 'a', 'r', 'y', 0,
    'G', 'r', 'e', 'n', 'a', 'd', 'a', 0,
    'G', 'e', 'r', 'm', 'a', 'n', 'y', 0,
    'G', 'e', 'o', 'r', 'g', 'i', 'a', 0,
    'F', 'i', 'n', 'l', 'a', 'n', 'd', 0,
    'E', 's', 't', 'o', 'n', 'i', 'a', 0,
    'E', 'r', 'i', 't', 'r', 'e', 'a', 0,
    'E', 'c', 'u', 'a', 'd', 'o', 'r', 0,
    'D', 'e', 'n', 'm', 'a', 'r', 'k', 0,
    'C', 'r', 'o', 'a', 't', 'i', 'a', 0,
    'C', 'o', 'm', 'o', 'r', 'o', 's', 0,
    'B', 'u', 'r', 'u', 'n', 'd', 'i', 0,
    'B', 'o', 'l', 'i', 'v', 'i', 'a', 0,
    'B', 'e', 'r', 'm', 'u', 'd', 'a', 0,
    'B', 'e', 'l', 'g', 'i', 'u', 'm', 0,
    'B', 'e', 'l', 'a', 'r', 'u', 's', 0,
    'B', 'a', 'h', 'r', 'a', 'i', 'n', 0,
    'B', 'a', 'h', 'a', 'm', 'a', 's', 0,
    'A', 'u', 's', 't', 'r', 'i', 'a', 0,
    'A', 'r', 'm', 'e', 'n', 'i', 'a', 0,
    'A', 'n', 'd', 'o', 'r', 'r', 'a', 0,
    'A', 'l', 'g', 'e', 'r', 'i', 'a', 0,
    'A', 'l', 'b', 'a', 'n', 'i', 'a', 0,
    'S', 'a', 'r', 'a', 'i', 'k', 'i', 0,
    'P', 'a', 'l', 'a', 'u', 'a', 'n', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'A', 0,
    'K', 'e', 'n', 'y', 'a', 'n', 'g', 0,
    'M', 'a', 'p', 'u', 'c', 'h', 'e', 0,
    'S', 'y', 'l', 'h', 'e', 't', 'i', 0,
    'S', 'a', 'n', 't', 'a', 'l', 'i', 0,
    'S', 'a', 'b', 'a', 'e', 'a', 'n', 0,
    'P', 'a', 'h', 'l', 'a', 'v', 'i', 0,
    'H', 'a', 'n', 'u', 'n', 'o', 'o', 0,
    'A', 'r', 'a', 'm', 'a', 'i', 'c', 0,
    'A', 'v', 'e', 's', 't', 'a', 'n', 0,
    'W', 'a', 'l', 'l', 'o', 'o', 'n', 0,
    'H', 'a', 'i', 't', 'i', 'a', 'n', 0,
    'C', 'h', 'u', 'v', 'a', 's', 'h', 0,
    'C', 'h', 'e', 'c', 'h', 'e', 'n', 0,
    'S', 'i', 'n', 'h', 'a', 'l', 'a', 0,
    'O', 's', 's', 'e', 't', 'i', 'c', 0,
    'R', 'o', 'm', 'a', 'n', 's', 'h', 0,
    'Y', 'a', 'n', 'g', 'b', 'e', 'n', 0,
    'T', 'a', 's', 'a', 'w', 'a', 'q', 0,
    'M', 'u', 'n', 'd', 'a', 'n', 'g', 0,
    'M', 'a', 'c', 'h', 'a', 'm', 'e', 0,
    'M', 'a', 'k', 'o', 'n', 'd', 'e', 0,
    'B', 'a', 'm', 'b', 'a', 'r', 'a', 0,
    'S', 'a', 'm', 'b', 'u', 'r', 'u', 0,
    'K', 'o', 'n', 'k', 'a', 'n', 'i', 0,
    'C', 'o', 'r', 'n', 'i', 's', 'h', 0,
    'B', 'o', 's', 'n', 'i', 'a', 'n', 0,
    'Y', 'i', 'd', 'd', 'i', 's', 'h', 0,
    'V', 'o', 'l', 'a', 'p', 'u', 'k', 0,
    'T', 'u', 'r', 'k', 'm', 'e', 'n', 0,
    'T', 'i', 'b', 'e', 't', 'a', 'n', 0,
    'T', 'a', 'g', 'a', 'l', 'o', 'g', 0,
    'S', 'w', 'e', 'd', 'i', 's', 'h', 0,
    'S', 'p', 'a', 'n', 'i', 's', 'h', 0,
    'S', 'e', 'r', 'b', 'i', 'a', 'n', 0,
    'R', 'u', 's', 's', 'i', 'a', 'n', 0,
    'Q', 'u', 'e', 'c', 'h', 'u', 'a', 0,
    'P', 'u', 'n', 'j', 'a', 'b', 'i', 0,
    'O', 'c', 'c', 'i', 't', 'a', 'n', 0,
    'M', 'a', 'r', 'a', 't', 'h', 'i', 0,
    'M', 'a', 'l', 't', 'e', 's', 'e', 0,
    'L', 'i', 'n', 'g', 'a', 'l', 'a', 0,
    'L', 'a', 't', 'v', 'i', 'a', 'n', 0,
    'K', 'u', 'r', 'u', 'n', 'd', 'i', 0,
    'K', 'i', 'r', 'g', 'h', 'i', 'z', 0,
    'K', 'a', 'n', 'n', 'a', 'd', 'a', 0,
    'I', 't', 'a', 'l', 'i', 'a', 'n', 0,
    'I', 'n', 'u', 'p', 'i', 'a', 'k', 0,
    'G', 'u', 'a', 'r', 'a', 'n', 'i', 0,
    'F', 'i', 'n', 'n', 'i', 's', 'h', 0,
    'F', 'a', 'r', 'o', 'e', 's', 'e', 0,
    'E', 'n', 'g', 'l', 'i', 's', 'h', 0,
    'C', 'a', 't', 'a', 'l', 'a', 'n', 0,
    'B', 'u', 'r', 'm', 'e', 's', 'e', 0,
    'B', 'i', 's', 'l', 'a', 'm', 'a', 0,
    'B', 'h', 'u', 't', 'a', 'n', 'i', 0,
    'B', 'e', 'n', 'g', 'a', 'l', 'i', 0,
    'B', 'a', 's', 'h', 'k', 'i', 'r', 0,
    'A', 'm', 'h', 'a', 'r', 'i', 'c', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'a', 'n', 'g', 'l', 'e', 'T', 'o', 0,
    'p', 'o', 'i', 'n', 't', 'A', 't', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 0,
    't', 'o', 'A', 'r', 'r', 'a', 'y', 0,
    'C', 'o', 'm', 'p', 'a', 'c', 't', 0,
    'v', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'r', 'a', 'w', 'D', 'a', 't', 'a', 0,
    'p', 'u', 't', 'C', 'h', 'a', 'r', 0,
    'r', 'e', 'a', 'd', 'A', 'l', 'l', 0,
    'N', 'e', 'w', 'O', 'n', 'l', 'y', 0,
    'N', 'o', 't', 'O', 'p', 'e', 'n', 0,
    'a', 'd', 'd', 'P', 'a', 't', 'h', 0,
    'c', 'a', 'c', 'h', 'i', 'n', 'g', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'g', 'r', 'o', 'u', 'p', 'I', 'd', 0,
    'o', 'w', 'n', 'e', 'r', 'I', 'd', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 0,
    'E', 'x', 'e', 'U', 's', 'e', 'r', 0,
    't', 'i', 'm', 'e', 'o', 'u', 't', 0,
    's', 'e', 't', 'T', 'y', 'p', 'e', 0,
    'r', 'e', 'f', 'r', 'e', 's', 'h', 0,
    's', 'o', 'r', 't', 'i', 'n', 'g', 0,
    'd', 'i', 'r', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'P', 'a', 't', 'h', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 0,
    'A', 'l', 'l', 'D', 'i', 'r', 's', 0,
    '_', '_', 's', 'u', 'b', '_', '_', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 0,
    'e', 'l', 'a', 'p', 's', 'e', 'd', 0,
    'r', 'e', 's', 't', 'a', 'r', 't', 0,
    'm', 's', 'e', 'c', 's', 'T', 'o', 0,
    'a', 'd', 'd', 'S', 'e', 'c', 's', 0,
    'g', 'e', 't', 'D', 'a', 't', 'e', 0,
    's', 'e', 't', 'D', 'a', 't', 'e', 0,
    'a', 'd', 'd', 'D', 'a', 'y', 's', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', 0,
    'Q', 't', '_', '5', '_', '1', '2', 0,
    'Q', 't', '_', '5', '_', '1', '1', 0,
    'Q', 't', '_', '5', '_', '1', '0', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'M', 'a', 'x', 'U', 's', 'e', 'r', 0,
    'S', 'o', 'c', 'k', 'A', 'c', 't', 0,
    'F', 'o', 'c', 'u', 's', 'I', 'n', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 0,
    's', 'o', 'r', 't', 'K', 'e', 'y', 0,
    'i', 's', 'F', 'a', 'l', 's', 'e', 0,
    'i', 's', 'F', 'l', 'o', 'a', 't', 0,
    'i', 's', 'A', 'r', 'r', 'a', 'y', 0,
    'h', 'a', 's', 'N', 'e', 'x', 't', 0,
    'r', 'e', 'p', 'a', 'r', 's', 'e', 0,
    'a', 'd', 'd', 'D', 'a', 't', 'a', 0,
    'D', 'e', 'c', 'i', 'm', 'a', 'l', 0,
    'N', 'o', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 'n', 'd', 'e', 'x', 'I', 'n', 0,
    'p', 'a', 't', 't', 'e', 'r', 'n', 0,
    '_', '_', 'a', 'd', 'd', '_', '_', 0,
    'i', 's', 'L', 'o', 'w', 'e', 'r', 0,
    'i', 's', 'U', 'p', 'p', 'e', 'r', 0,
    'c', 'o', 'm', 'p', 'a', 'r', 'e', 0,
    'c', 'h', 'o', 'p', 'p', 'e', 'd', 0,
    'p', 'e', 'r', 'c', 'e', 'n', 't', 0,
    'i', 'n', 'c', 'l', 'u', 'd', 'e', 0,
    'e', 'x', 'c', 'l', 'u', 'd', 'e', 0,
    's', 'q', 'u', 'e', 'e', 'z', 'e', 0,
    'r', 'e', 's', 'e', 'r', 'v', 'e', 0,
    '_', '_', 'm', 'u', 'l', '_', '_', 0,
    '_', '_', 's', 't', 'r', '_', '_', 0,
    'f', 'r', 'o', 'm', 'H', 'e', 'x', 0,
    't', 'o', 'F', 'l', 'o', 'a', 't', 0,
    't', 'o', 'U', 'L', 'o', 'n', 'g', 0,
    't', 'o', 'S', 'h', 'o', 'r', 't', 0,
    'r', 'e', 'p', 'l', 'a', 'c', 'e', 0,
    'p', 'r', 'e', 'p', 'e', 'n', 'd', 0,
    't', 'r', 'i', 'm', 'm', 'e', 'd', 0,
    't', 'o', 'U', 'p', 'p', 'e', 'r', 0,
    't', 'o', 'L', 'o', 'w', 'e', 'r', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 0,
    'Q', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    't', 'e', 's', 't', 'B', 'i', 't', 0,
    'i', 's', 'E', 'm', 'p', 't', 'y', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    'o', 'n', 'E', 'n', 't', 'r', 'y', 0,
    'm', 'a', 'c', 'h', 'i', 'n', 'e', 0,
    'o', 'p', 't', 'i', 'o', 'n', 's', 0,
    'p', 'a', 'r', 'e', 'n', 't', 's', 0,
    't', 'o', 'p', 'L', 'e', 'f', 't', 0,
    'i', 'n', 'd', 'e', 'x', 'e', 's', 0,
    's', 'i', 'b', 'l', 'i', 'n', 'g', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 0,
    't', 'i', 'm', 'e', 'r', 'I', 'd', 0,
    'T', 'o', 'p', 'E', 'd', 'g', 'e', 0,
    'I', 'm', 'h', 'T', 'i', 'm', 'e', 0,
    'I', 'm', 'h', 'D', 'a', 't', 'e', 0,
    'I', 'm', 'h', 'N', 'o', 'n', 'e', 0,
    'I', 'm', 'H', 'i', 'n', 't', 's', 0,
    'T', 'u', 'e', 's', 'd', 'a', 'y', 0,
    'I', 'S', 'O', 'D', 'a', 't', 'e', 0,
    'N', 'o', 'B', 'r', 'u', 's', 'h', 0,
    'F', 'l', 'a', 't', 'C', 'a', 'p', 0,
    'U', 'p', 'A', 'r', 'r', 'o', 'w', 0,
    'N', 'o', 'A', 'r', 'r', 'o', 'w', 0,
    'K', 'e', 'y', '_', 'N', 'e', 'w', 0,
    'K', 'e', 'y', '_', 'R', 'e', 'd', 0,
    'K', 'e', 'y', '_', 'U', 'W', 'B', 0,
    'K', 'e', 'y', '_', 'D', 'O', 'S', 0,
    'K', 'e', 'y', '_', 'C', 'u', 't', 0,
    'K', 'e', 'y', '_', 'W', 'W', 'W', 0,
    'K', 'e', 'y', '_', 'Y', 'e', 's', 0,
    'K', 'e', 'y', '_', 'E', 'T', 'H', 0,
    'K', 'e', 'y', '_', 'y', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'A', 'n', 'y', 0,
    'K', 'e', 'y', '_', 'F', '3', '5', 0,
    'K', 'e', 'y', '_', 'F', '3', '4', 0,
    'K', 'e', 'y', '_', 'F', '3', '3', 0,
    'K', 'e', 'y', '_', 'F', '3', '2', 0,
    'K', 'e', 'y', '_', 'F', '3', '1', 0,
    'K', 'e', 'y', '_', 'F', '3', '0', 0,
    'K', 'e', 'y', '_', 'F', '2', '9', 0,
    'K', 'e', 'y', '_', 'F', '2', '8', 0,
    'K', 'e', 'y', '_', 'F', '2', '7', 0,
    'K', 'e', 'y', '_', 'F', '2', '6', 0,
    'K', 'e', 'y', '_', 'F', '2', '5', 0,
    'K', 'e', 'y', '_', 'F', '2', '4', 0,
    'K', 'e', 'y', '_', 'F', '2', '3', 0,
    'K', 'e', 'y', '_', 'F', '2', '2', 0,
    'K', 'e', 'y', '_', 'F', '2', '1', 0,
    'K', 'e', 'y', '_', 'F', '2', '0', 0,
    'K', 'e', 'y', '_', 'F', '1', '9', 0,
    'K', 'e', 'y', '_', 'F', '1', '8', 0,
    'K', 'e', 'y', '_', 'F', '1', '7', 0,
    'K', 'e', 'y', '_', 'F', '1', '6', 0,
    'K', 'e', 'y', '_', 'F', '1', '5', 0,
    'K', 'e', 'y', '_', 'F', '1', '4', 0,
    'K', 'e', 'y', '_', 'F', '1', '3', 0,
    'K', 'e', 'y', '_', 'F', '1', '2', 0,
    'K', 'e', 'y', '_', 'F', '1', '1', 0,
    'K', 'e', 'y', '_', 'F', '1', '0', 0,
    'K', 'e', 'y', '_', 'A', 'l', 't', 0,
    'K', 'e', 'y', '_', 'E', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'T', 'a', 'b', 0,
    'Q', 't', ':', ':', 'K', 'e', 'y', 0,
    'N', 'o', 'F', 'o', 'c', 'u', 's', 0,
    'd', 'a', 'r', 'k', 'R', 'e', 'd', 0,
    'm', 'a', 'g', 'e', 'n', 't', 'a', 0,
    'q', 'i', 'n', 't', 'p', 't', 'r', 0,
    'q', 'I', 's', 'N', 'u', 'l', 'l', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    'R', 'a', 'n', 'd', 'o', 'm', 0,
    's', 'c', 'h', 'e', 'm', 'e', 0,
    's', 'e', 't', 'U', 'r', 'l', 0,
    'Q', 'T', 'i', 'm', 'e', 'r', 0,
    'u', 's', 'l', 'e', 'e', 'p', 0,
    'm', 's', 'l', 'e', 'e', 'p', 0,
    'C', 'r', 'e', 'a', 't', 'e', 0,
    'Q', 'S', 't', 'a', 't', 'e', 0,
    'l', 'o', 'c', 'a', 't', 'e', 0,
    's', 'o', 'c', 'k', 'e', 't', 0,
    't', 'o', 'S', 'i', 'z', 'e', 0,
    's', 'c', 'a', 'l', 'e', 'd', 0,
    'm', 'a', 'p', 'p', 'e', 'd', 0,
    'a', 't', 't', 'a', 'c', 'h', 0,
    'c', 'r', 'e', 'a', 't', 'e', 0,
    'c', 'a', 'n', 'c', 'e', 'l', 0,
    'c', 'o', 'm', 'm', 'i', 't', 0,
    'e', 's', 'c', 'a', 'p', 'e', 0,
    't', 'o', 'R', 'e', 'c', 't', 0,
    'u', 'n', 'i', 't', 'e', 'd', 0,
    'a', 'd', 'j', 'u', 's', 't', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 0,
    'v', 'm', 'i', 'c', 'r', 'o', 0,
    'v', 'm', 'i', 'n', 'o', 'r', 0,
    'Q', '_', 'F', 'L', 'A', 'G', 0,
    'Q', '_', 'E', 'N', 'U', 'M', 0,
    's', 'i', 'g', 'n', 'a', 'l', 0,
    's', 'e', 'n', 'd', 'e', 'r', 0,
    'q', 'I', 's', 'N', 'a', 'N', 0,
    'q', 'I', 's', 'I', 'n', 'f', 0,
    'Q', 'M', 'u', 't', 'e', 'x', 0,
    'r', 'e', 'l', 'o', 'c', 'k', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 0,
    'Q', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 'B', 'r', 'u', 's', 'h', 0,
    'Q', 'P', 'o', 'i', 'n', 't', 0,
    'Q', 'S', 'i', 'z', 'e', 'F', 0,
    'Q', 'R', 'e', 'c', 't', 'F', 0,
    'i', 's', 'U', 's', 'e', 'r', 0,
    'i', 's', 'F', 'l', 'a', 'g', 0,
    'i', 'n', 'v', 'o', 'k', 'e', 0,
    'v', 'a', 'l', 'u', 'e', '9', 0,
    'v', 'a', 'l', 'u', 'e', '8', 0,
    'v', 'a', 'l', 'u', 'e', '7', 0,
    'v', 'a', 'l', 'u', 'e', '6', 0,
    'v', 'a', 'l', 'u', 'e', '5', 0,
    'v', 'a', 'l', 'u', 'e', '4', 0,
    'v', 'a', 'l', 'u', 'e', '3', 0,
    'v', 'a', 'l', 'u', 'e', '2', 0,
    'v', 'a', 'l', 'u', 'e', '1', 0,
    'v', 'a', 'l', 'u', 'e', '0', 0,
    'a', 'c', 'c', 'e', 's', 's', 0,
    'P', 'u', 'b', 'l', 'i', 'c', 0,
    's', 'e', 't', 'K', 'e', 'y', 0,
    's', 'e', 't', 'T', 'o', 'p', 0,
    'q', 'F', 'a', 't', 'a', 'l', 0,
    'q', 'D', 'e', 'b', 'u', 'g', 0,
    'u', 'n', 'l', 'o', 'c', 'k', 0,
    's', 'c', 'r', 'i', 'p', 't', 0,
    'p', 'm', 'T', 'e', 'x', 't', 0,
    'a', 'm', 'T', 'e', 'x', 't', 0,
    't', 'o', 'T', 'i', 'm', 'e', 0,
    't', 'o', 'D', 'a', 't', 'e', 0,
    's', 'y', 's', 't', 'e', 'm', 0,
    'E', 'u', 'r', 'o', 'p', 'e', 0,
    'K', 'o', 's', 'o', 'v', 'o', 0,
    'J', 'e', 'r', 's', 'e', 'y', 0,
    'R', 'u', 's', 's', 'i', 'a', 0,
    'B', 'r', 'u', 'n', 'e', 'i', 0,
    'S', 'e', 'r', 'b', 'i', 'a', 0,
    'Z', 'a', 'm', 'b', 'i', 'a', 0,
    'U', 'g', 'a', 'n', 'd', 'a', 0,
    'T', 'u', 'v', 'a', 'l', 'u', 0,
    'T', 'u', 'r', 'k', 'e', 'y', 0,
    'T', 'a', 'i', 'w', 'a', 'n', 0,
    'S', 'w', 'e', 'd', 'e', 'n', 0,
    'R', 'w', 'a', 'n', 'd', 'a', 0,
    'P', 'o', 'l', 'a', 'n', 'd', 0,
    'P', 'a', 'n', 'a', 'm', 'a', 0,
    'N', 'o', 'r', 'w', 'a', 'y', 0,
    'M', 'o', 'n', 'a', 'c', 'o', 0,
    'M', 'e', 'x', 'i', 'c', 'o', 0,
    'M', 'a', 'l', 'a', 'w', 'i', 0,
    'L', 'a', 't', 'v', 'i', 'a', 0,
    'K', 'u', 'w', 'a', 'i', 't', 0,
    'J', 'o', 'r', 'd', 'a', 'n', 0,
    'I', 's', 'r', 'a', 'e', 'l', 0,
    'G', 'u', 'y', 'a', 'n', 'a', 0,
    'G', 'r', 'e', 'e', 'c', 'e', 0,
    'G', 'a', 'm', 'b', 'i', 'a', 0,
    'F', 'r', 'a', 'n', 'c', 'e', 0,
    'C', 'y', 'p', 'r', 'u', 's', 0,
    'C', 'a', 'n', 'a', 'd', 'a', 0,
    'B', 'r', 'a', 'z', 'i', 'l', 0,
    'B', 'h', 'u', 't', 'a', 'n', 0,
    'B', 'e', 'l', 'i', 'z', 'e', 0,
    'A', 'n', 'g', 'o', 'l', 'a', 0,
    'T', 'a', 'n', 'g', 'u', 't', 0,
    'N', 'e', 'w', 'a', 'r', 'i', 0,
    'M', 'o', 'h', 'a', 'w', 'k', 0,
    'L', 'a', 'k', 'o', 't', 'a', 0,
    'A', 'k', 'o', 'o', 's', 'e', 0,
    'T', 'a', 'i', 'N', 'u', 'a', 0,
    'T', 'a', 'i', 'D', 'a', 'm', 0,
    'R', 'e', 'j', 'a', 'n', 'g', 0,
    'L', 'y', 'd', 'i', 'a', 'n', 0,
    'L', 'y', 'c', 'i', 'a', 'n', 0,
    'L', 'e', 'p', 'c', 'h', 'a', 0,
    'I', 'n', 'g', 'u', 's', 'h', 0,
    'G', 'o', 't', 'h', 'i', 'c', 0,
    'C', 'o', 'p', 't', 'i', 'c', 0,
    'C', 'h', 'a', 'k', 'm', 'a', 0,
    'C', 'a', 'r', 'i', 'a', 'n', 0,
    'U', 'i', 'g', 'h', 'u', 'r', 0,
    'N', 'g', 'o', 'm', 'b', 'a', 0,
    'O', 'j', 'i', 'b', 'w', 'a', 0,
    'N', 'd', 'o', 'n', 'g', 'a', 0,
    'N', 'a', 'v', 'a', 'h', 'o', 0,
    'K', 'a', 'n', 'u', 'r', 'i', 0,
    'H', 'e', 'r', 'e', 'r', 'o', 0,
    'C', 'h', 'u', 'r', 'c', 'h', 0,
    'A', 'v', 'a', 'r', 'i', 'c', 0,
    'N', 'y', 'a', 'n', 'j', 'a', 0,
    'T', 'o', 'n', 'g', 'a', 'n', 0,
    'T', 's', 'w', 'a', 'n', 'a', 0,
    'F', 'i', 'j', 'i', 'a', 'n', 0,
    'W', 'a', 'l', 's', 'e', 'r', 0,
    'K', 'w', 'a', 's', 'i', 'o', 0,
    'E', 'w', 'o', 'n', 'd', 'o', 0,
    'K', 'a', 'b', 'y', 'l', 'e', 0,
    'K', 'i', 'k', 'u', 'y', 'u', 0,
    'T', 'a', 'r', 'o', 'k', 'o', 0,
    'K', 'p', 'e', 'l', 'l', 'e', 0,
    'W', 'a', 'l', 'a', 'm', 'o', 0,
    'S', 'i', 'd', 'a', 'm', 'o', 0,
    'S', 'y', 'r', 'i', 'a', 'c', 0,
    'D', 'i', 'v', 'e', 'h', 'i', 0,
    'Z', 'h', 'u', 'a', 'n', 'g', 0,
    'Y', 'o', 'r', 'u', 'b', 'a', 0,
    'T', 's', 'o', 'n', 'g', 'a', 0,
    'T', 'e', 'l', 'u', 'g', 'u', 0,
    'S', 'o', 'm', 'a', 'l', 'i', 0,
    'S', 'l', 'o', 'v', 'a', 'k', 0,
    'S', 'i', 'n', 'd', 'h', 'i', 0,
    'S', 'a', 'm', 'o', 'a', 'n', 0,
    'P', 'a', 's', 'h', 't', 'o', 0,
    'N', 'e', 'p', 'a', 'l', 'i', 0,
    'K', 'o', 'r', 'e', 'a', 'n', 0,
    'K', 'a', 'z', 'a', 'k', 'h', 0,
    'H', 'e', 'b', 'r', 'e', 'w', 0,
    'G', 'a', 'e', 'l', 'i', 'c', 0,
    'F', 'r', 'e', 'n', 'c', 'h', 0,
    'D', 'a', 'n', 'i', 's', 'h', 0,
    'B', 'r', 'e', 't', 'o', 'n', 0,
    'B', 'i', 'h', 'a', 'r', 'i', 0,
    'B', 'a', 's', 'q', 'u', 'e', 0,
    'A', 'y', 'm', 'a', 'r', 'a', 0,
    'A', 'r', 'a', 'b', 'i', 'c', 0,
    't', 'o', 'L', 'i', 'n', 'e', 0,
    'Q', 'L', 'i', 'n', 'e', 'F', 0,
    'c', 'e', 'n', 't', 'e', 'r', 0,
    'u', 'n', 'l', 'o', 'a', 'd', 0,
    's', 'y', 'm', 'b', 'o', 'l', 0,
    't', 'o', 'J', 's', 'o', 'n', 0,
    't', 'a', 'k', 'e', 'A', 't', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    'b', 'o', 't', 't', 'o', 'm', 0,
    'i', 's', 'O', 'p', 'e', 'n', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 0,
    'i', 's', 'F', 'i', 'l', 'e', 0,
    's', 'u', 'f', 'f', 'i', 'x', 0,
    'o', 'f', 'f', 's', 'e', 't', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 0,
    'p', 'e', 'r', 'i', 'o', 'd', 0,
    'C', 'u', 's', 't', 'o', 'm', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 0,
    'p', 'r', 'e', 'f', 'i', 'x', 0,
    'd', 'r', 'i', 'v', 'e', 's', 0,
    'r', 'e', 'n', 'a', 'm', 'e', 0,
    'i', 's', 'R', 'o', 'o', 't', 0,
    'e', 'x', 'i', 's', 't', 's', 0,
    'r', 'm', 'p', 'a', 't', 'h', 0,
    'm', 'k', 'p', 'a', 't', 'h', 0,
    'f', 'i', 'l', 't', 'e', 'r', 0,
    'N', 'o', 'S', 'o', 'r', 't', 0,
    'D', 'r', 'i', 'v', 'e', 's', 0,
    's', 'e', 't', 'H', 'M', 'S', 0,
    'm', 'i', 'n', 'u', 't', 'e', 0,
    's', 'e', 'c', 'o', 'n', 'd', 0,
    'd', 'a', 'y', 's', 'T', 'o', 0,
    's', 't', 'a', 't', 'u', 's', 0,
    'Q', 't', '_', '5', '_', '9', 0,
    'Q', 't', '_', '5', '_', '8', 0,
    'Q', 't', '_', '5', '_', '7', 0,
    'Q', 't', '_', '5', '_', '6', 0,
    'Q', 't', '_', '5', '_', '5', 0,
    'Q', 't', '_', '5', '_', '4', 0,
    'Q', 't', '_', '5', '_', '3', 0,
    'Q', 't', '_', '5', '_', '2', 0,
    'Q', 't', '_', '5', '_', '1', 0,
    'Q', 't', '_', '5', '_', '0', 0,
    'Q', 't', '_', '4', '_', '9', 0,
    'Q', 't', '_', '4', '_', '8', 0,
    'Q', 't', '_', '4', '_', '7', 0,
    'Q', 't', '_', '4', '_', '6', 0,
    'Q', 't', '_', '4', '_', '5', 0,
    'Q', 't', '_', '4', '_', '4', 0,
    'Q', 't', '_', '4', '_', '3', 0,
    'Q', 't', '_', '4', '_', '2', 0,
    'Q', 't', '_', '4', '_', '1', 0,
    'Q', 't', '_', '4', '_', '0', 0,
    'Q', 't', '_', '3', '_', '3', 0,
    'Q', 't', '_', '3', '_', '1', 0,
    'Q', 't', '_', '3', '_', '0', 0,
    'Q', 't', '_', '2', '_', '1', 0,
    'Q', 't', '_', '2', '_', '0', 0,
    'Q', 't', '_', '1', '_', '0', 0,
    'm', 'e', 't', 'h', 'o', 'd', 0,
    'S', 'h', 'a', '5', '1', '2', 0,
    'S', 'h', 'a', '3', '8', '4', 0,
    'S', 'h', 'a', '2', '5', '6', 0,
    'S', 'h', 'a', '2', '2', '4', 0,
    'i', 'g', 'n', 'o', 'r', 'e', 0,
    'a', 'c', 'c', 'e', 'p', 't', 0,
    'E', 'x', 'p', 'o', 's', 'e', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 0,
    'P', 'o', 'l', 'i', 's', 'h', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 0,
    'n', 'o', 't', 'i', 'f', 'y', 0,
    'v', 'a', 'l', 'u', 'e', 's', 0,
    's', 'y', 'n', 't', 'a', 'x', 0,
    's', 't', 'r', 'i', 'n', 'g', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    't', 'o', 'B', 'o', 'o', 'l', 0,
    'i', 's', 'B', 'o', 'o', 'l', 0,
    'i', 's', 'T', 'r', 'u', 'e', 0,
    'e', 'n', 'd', 'M', 'a', 'p', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 0,
    's', 'e', 't', 'N', 'u', 'm', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    't', 'o', 'L', 'o', 'n', 'g', 0,
    't', 'o', 'U', 'I', 'n', 't', 0,
    '_', '_', 'g', 'e', '_', '_', 0,
    '_', '_', 'l', 'e', '_', '_', 0,
    '_', '_', 'g', 't', '_', '_', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 0,
    'i', 'n', 's', 'e', 'r', 't', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 0,
    'l', 'e', 'n', 'g', 't', 'h', 0,
    'm', 'a', 'x', 'l', 'e', 'n', 0,
    'b', 'u', 'f', 'f', 'e', 'r', 0,
    's', 'e', 't', 'B', 'i', 't', 0,
    'd', 'e', 't', 'a', 'c', 'h', 0,
    'r', 'e', 's', 'i', 'z', 'e', 0,
    'i', 's', 'N', 'u', 'l', 'l', 0,
    'o', 'n', 'E', 'x', 'i', 't', 0,
    'e', 'x', 'i', 't', 'e', 'd', 0,
    'r', 'e', 'v', 'e', 'r', 't', 0,
    's', 'u', 'b', 'm', 'i', 't', 0,
    '_', '_', 'l', 't', '_', '_', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'r', 'e', 's', 'u', 'l', 't', 0,
    'w', 'a', 'k', 'e', 'U', 'p', 0,
    'o', 'b', 'j', 'e', 'c', 't', 0,
    't', 'h', 'r', 'e', 'a', 'd', 0,
    'r', 'e', 's', 'u', 'm', 'e', 0,
    'p', 'o', 'l', 'i', 'c', 'y', 0,
    'I', 'm', 'F', 'o', 'n', 't', 0,
    'N', 'o', 'C', 'l', 'i', 'p', 0,
    'S', 'u', 'n', 'd', 'a', 'y', 0,
    'F', 'r', 'i', 'd', 'a', 'y', 0,
    'M', 'o', 'n', 'd', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'G', 'o', 0,
    'K', 'e', 'y', '_', 'C', 'D', 0,
    'K', 'e', 'y', '_', 'N', 'o', 0,
    'K', 'e', 'y', '_', 'A', 'E', 0,
    'K', 'e', 'y', '_', 'm', 'u', 0,
    'K', 'e', 'y', '_', 'A', 't', 0,
    'K', 'e', 'y', '_', 'F', '9', 0,
    'K', 'e', 'y', '_', 'F', '8', 0,
    'K', 'e', 'y', '_', 'F', '7', 0,
    'K', 'e', 'y', '_', 'F', '6', 0,
    'K', 'e', 'y', '_', 'F', '5', 0,
    'K', 'e', 'y', '_', 'F', '4', 0,
    'K', 'e', 'y', '_', 'F', '3', 0,
    'K', 'e', 'y', '_', 'F', '2', 0,
    'K', 'e', 'y', '_', 'F', '1', 0,
    'K', 'e', 'y', '_', 'U', 'p', 0,
    'D', 'r', 'a', 'w', 'e', 'r', 0,
    'y', 'e', 'l', 'l', 'o', 'w', 0,
    'c', 'o', 'l', 'o', 'r', '1', 0,
    'c', 'o', 'l', 'o', 'r', '0', 0,
    'q', 's', 'r', 'a', 'n', 'd', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    'Q', 'F', 'l', 'a', 'g', 's', 0,
    'q', 'R', 'o', 'u', 'n', 'd', 0,
    'i', 's', 'D', 'T', 'D', 0,
    'I', 'd', '1', '2', '8', 0,
    'q', 'u', 'e', 'r', 'y', 0,
    't', 'o', 'A', 'c', 'e', 0,
    'a', 't', 'U', 't', 'c', 0,
    'f', 'i', 'x', 'e', 'd', 0,
    't', 'o', 'E', 'n', 'd', 0,
    's', 'c', 'a', 'l', 'e', 0,
    'c', 'o', 'd', 'e', 'c', 0,
    'M', 'a', 'c', 'O', 'S', 0,
    'Q', '_', 'A', 'R', 'G', 0,
    'q', 'Q', 'N', 'a', 'N', 0,
    'q', 'S', 'N', 'a', 'N', 0,
    'm', 'u', 't', 'e', 'x', 0,
    'S', 'C', 'h', 'a', 'r', 0,
    'Q', 'U', 'u', 'i', 'd', 0,
    'U', 'C', 'h', 'a', 'r', 0,
    'Q', 'I', 'c', 'o', 'n', 0,
    'Q', 'F', 'o', 'n', 't', 0,
    'Q', 'S', 'i', 'z', 'e', 0,
    'Q', 'R', 'e', 'c', 't', 0,
    's', 'c', 'o', 'p', 'e', 0,
    'q', 'I', 'n', 'f', 'o', 0,
    'f', 'a', 't', 'a', 'l', 0,
    'd', 'e', 'b', 'u', 'g', 0,
    's', 't', 'y', 'l', 'e', 0,
    'W', 'o', 'r', 'l', 'd', 0,
    'T', 'o', 'n', 'g', 'a', 0,
    'S', 'y', 'r', 'i', 'a', 0,
    'L', 'i', 'b', 'y', 'a', 0,
    'Y', 'e', 'm', 'e', 'n', 0,
    'S', 'p', 'a', 'i', 'n', 0,
    'Q', 'a', 't', 'a', 'r', 0,
    'P', 'a', 'l', 'a', 'u', 0,
    'N', 'i', 'g', 'e', 'r', 0,
    'N', 'e', 'p', 'a', 'l', 0,
    'M', 'a', 'l', 't', 'a', 0,
    'M', 'a', 'c', 'a', 'u', 0,
    'K', 'e', 'n', 'y', 'a', 0,
    'J', 'a', 'p', 'a', 'n', 0,
    'I', 't', 'a', 'l', 'y', 0,
    'I', 'n', 'd', 'i', 'a', 0,
    'H', 'a', 'i', 't', 'i', 0,
    'G', 'h', 'a', 'n', 'a', 0,
    'G', 'a', 'b', 'o', 'n', 0,
    'E', 'g', 'y', 'p', 't', 0,
    'C', 'h', 'i', 'n', 'a', 0,
    'C', 'h', 'i', 'l', 'e', 0,
    'B', 'e', 'n', 'i', 'n', 0,
    'A', 'r', 'u', 'b', 'a', 0,
    'O', 's', 'a', 'g', 'e', 0,
    'B', 'a', 's', 's', 'a', 0,
    'M', 'e', 'n', 'd', 'e', 0,
    'K', 'i', 'c', 'h', 'e', 0,
    'L', 'i', 'm', 'b', 'u', 0,
    'D', 'o', 'g', 'r', 'i', 0,
    'B', 'u', 'h', 'i', 'd', 0,
    'B', 'a', 'm', 'u', 'n', 0,
    'K', 'o', 'n', 'g', 'o', 0,
    'S', 'w', 'a', 't', 'i', 0,
    'S', 'a', 'n', 'g', 'o', 0,
    'K', 'h', 'm', 'e', 'r', 0,
    'O', 'r', 'o', 'm', 'o', 0,
    'S', 'a', 'n', 'g', 'u', 0,
    'S', 'a', 'k', 'h', 'a', 0,
    'B', 'a', 'f', 'i', 'a', 0,
    'D', 'u', 'a', 'l', 'a', 0,
    'Z', 'a', 'r', 'm', 'a', 0,
    'B', 'a', 's', 'a', 'a', 0,
    'A', 'g', 'h', 'e', 'm', 0,
    'R', 'u', 'n', 'd', 'i', 0,
    'C', 'h', 'i', 'g', 'a', 0,
    'L', 'u', 'y', 'i', 'a', 0,
    'M', 'a', 's', 'a', 'i', 0,
    'B', 'e', 'm', 'b', 'a', 0,
    'G', 'a', 'n', 'd', 'a', 0,
    'L', 'a', 'n', 'g', 'i', 0,
    'V', 'u', 'n', 'j', 'o', 0,
    'R', 'o', 'm', 'b', 'o', 0,
    'F', 'u', 'l', 'a', 'h', 0,
    'T', 'a', 'i', 't', 'a', 0,
    'G', 'u', 's', 'i', 'i', 0,
    'C', 'h', 'e', 'w', 'a', 0,
    'V', 'e', 'n', 'd', 'a', 0,
    'T', 'i', 'g', 'r', 'e', 0,
    'A', 't', 's', 'a', 'm', 0,
    'K', 'a', 'm', 'b', 'a', 0,
    'X', 'h', 'o', 's', 'a', 0,
    'W', 'o', 'l', 'o', 'f', 0,
    'W', 'e', 'l', 's', 'h', 0,
    'U', 'z', 'b', 'e', 'k', 0,
    'U', 'i', 'g', 'u', 'r', 0,
    'T', 'a', 't', 'a', 'r', 0,
    'T', 'a', 'm', 'i', 'l', 0,
    'T', 'a', 'j', 'i', 'k', 0,
    'S', 'h', 'o', 'n', 'a', 0,
    'O', 'r', 'i', 'y', 'a', 0,
    'M', 'a', 'o', 'r', 'i', 0,
    'M', 'a', 'l', 'a', 'y', 0,
    'H', 'i', 'n', 'd', 'i', 0,
    'H', 'a', 'u', 's', 'a', 0,
    'D', 'u', 't', 'c', 'h', 0,
    'C', 'z', 'e', 'c', 'h', 0,
    's', 'e', 't', 'P', '2', 0,
    's', 'e', 't', 'P', '1', 0,
    'Q', 'L', 'i', 'n', 'e', 0,
    'a', 'r', 'r', 'a', 'y', 0,
    'm', 'e', 'r', 'g', 'e', 0,
    'w', 'r', 'i', 't', 'e', 0,
    'f', 'i', 'l', 'e', 's', 0,
    'p', 'a', 't', 'h', 's', 0,
    'o', 'w', 'n', 'e', 'r', 0,
    'i', 's', 'D', 'i', 'r', 0,
    'u', 'n', 'm', 'a', 'p', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'Q', 'F', 'i', 'l', 'e', 0,
    'r', 'm', 'd', 'i', 'r', 0,
    'm', 'k', 'd', 'i', 'r', 0,
    'N', 'o', 'D', 'o', 't', 0,
    'F', 'i', 'l', 'e', 's', 0,
    'n', 's', 'e', 'c', 's', 0,
    't', 'o', 'U', 'T', 'C', 0,
    'Q', 'T', 'i', 'm', 'e', 0,
    'm', 'o', 'n', 't', 'h', 0,
    'Q', 'D', 'a', 't', 'e', 0,
    'a', 'd', 'd', 'e', 'd', 0,
    'P', 'a', 'i', 'n', 't', 0,
    'N', 'o', 'n', 'e', '_', 0,
    'e', 'x', 'e', 'c', '_', 0,
    'i', 's', 'S', 'e', 't', 0,
    'n', 'a', 'm', 'e', 's', 0,
    'Q', 'C', 'h', 'a', 'r', 0,
    'i', 's', 'T', 'a', 'g', 0,
    'i', 's', 'M', 'a', 'p', 0,
    'r', 'e', 's', 'e', 't', 0,
    't', 'o', 'H', 'e', 'x', 0,
    't', 'o', 'I', 'n', 't', 0,
    's', 'p', 'l', 'i', 't', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'a', 't', 'E', 'n', 'd', 0,
    'c', 'l', 'o', 's', 'e', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    'f', 'i', 'r', 's', 't', 0,
    'm', 'a', 't', 'c', 'h', 0,
    'b', 'u', 'd', 'd', 'y', 0,
    'o', 'r', 'd', 'e', 'r', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'r', 'o', 'l', 'e', 's', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'm', 'o', 'd', 'e', 'l', 0,
    'c', 'h', 'i', 'l', 'd', 0,
    'a', 'w', 'a', 'k', 'e', 0,
    'f', 'l', 'u', 's', 'h', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'm', 's', 'e', 'c', 's', 0,
    'p', 'a', 'u', 's', 'e', 0,
    'g', 'r', 'o', 'u', 'p', 0,
    'Z', 'A', 'x', 'i', 's', 0,
    'Y', 'A', 'x', 'i', 's', 0,
    'X', 'A', 'x', 'i', 's', 0,
    'N', 'o', 'P', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'Z', 0,
    'K', 'e', 'y', '_', 'Y', 0,
    'K', 'e', 'y', '_', 'X', 0,
    'K', 'e', 'y', '_', 'W', 0,
    'K', 'e', 'y', '_', 'V', 0,
    'K', 'e', 'y', '_', 'U', 0,
    'K', 'e', 'y', '_', 'T', 0,
    'K', 'e', 'y', '_', 'S', 0,
    'K', 'e', 'y', '_', 'R', 0,
    'K', 'e', 'y', '_', 'Q', 0,
    'K', 'e', 'y', '_', 'P', 0,
    'K', 'e', 'y', '_', 'O', 0,
    'K', 'e', 'y', '_', 'N', 0,
    'K', 'e', 'y', '_', 'M', 0,
    'K', 'e', 'y', '_', 'L', 0,
    'K', 'e', 'y', '_', 'K', 0,
    'K', 'e', 'y', '_', 'J', 0,
    'K', 'e', 'y', '_', 'I', 0,
    'K', 'e', 'y', '_', 'H', 0,
    'K', 'e', 'y', '_', 'G', 0,
    'K', 'e', 'y', '_', 'F', 0,
    'K', 'e', 'y', '_', 'E', 0,
    'K', 'e', 'y', '_', 'D', 0,
    'K', 'e', 'y', '_', 'C', 0,
    'K', 'e', 'y', '_', 'B', 0,
    'K', 'e', 'y', '_', 'A', 0,
    'K', 'e', 'y', '_', '9', 0,
    'K', 'e', 'y', '_', '8', 0,
    'K', 'e', 'y', '_', '7', 0,
    'K', 'e', 'y', '_', '6', 0,
    'K', 'e', 'y', '_', '5', 0,
    'K', 'e', 'y', '_', '4', 0,
    'K', 'e', 'y', '_', '3', 0,
    'K', 'e', 'y', '_', '2', 0,
    'K', 'e', 'y', '_', '1', 0,
    'K', 'e', 'y', '_', '0', 0,
    'P', 'o', 'p', 'u', 'p', 0,
    'S', 'H', 'I', 'F', 'T', 0,
    'g', 'r', 'e', 'e', 'n', 0,
    'w', 'h', 'i', 't', 'e', 0,
    'b', 'l', 'a', 'c', 'k', 0,
    'q', 'r', 'a', 'n', 'd', 0,
    's', 'a', 'v', 'e', 0,
    'h', 'o', 's', 't', 0,
    'e', 'n', 'd', 'l', 0,
    'h', 'e', 'x', '_', 0,
    'o', 'c', 't', '_', 0,
    'b', 'i', 'n', '_', 0,
    's', 'y', 'n', 'c', 0,
    'k', 'i', 'l', 'l', 0,
    's', 'e', 't', 'Y', 0,
    's', 'e', 't', 'X', 0,
    'T', 'v', 'O', 'S', 0,
    'q', 'I', 'n', 'f', 0,
    'h', 't', 'm', 'l', 0,
    'u', 'r', 'l', 's', 0,
    'Q', 'P', 'e', 'n', 0,
    'Q', 'U', 'r', 'l', 0,
    'V', 'o', 'i', 'd', 0,
    'k', 'e', 'y', 's', 0,
    'i', 'n', 'f', 'o', 0,
    'L', 'a', 'o', 's', 0,
    'F', 'i', 'j', 'i', 0,
    'T', 'o', 'g', 'o', 0,
    'P', 'e', 'r', 'u', 0,
    'O', 'm', 'a', 'n', 0,
    'N', 'i', 'u', 'e', 0,
    'M', 'a', 'l', 'i', 0,
    'I', 'r', 'a', 'q', 0,
    'I', 'r', 'a', 'n', 0,
    'G', 'u', 'a', 'm', 0,
    'C', 'u', 'b', 'a', 0,
    'C', 'h', 'a', 'd', 0,
    'A', 'h', 'o', 'm', 0,
    'M', 'o', 'n', 'o', 0,
    'S', 'o', 'r', 'a', 0,
    'L', 'i', 's', 'u', 0,
    'K', 'a', 'k', 'o', 0,
    'P', 'a', 'l', 'i', 0,
    'K', 'o', 'm', 'i', 0,
    'C', 'r', 'e', 'e', 0,
    'N', 'u', 'e', 'r', 0,
    'B', 'o', 'd', 'o', 0,
    'S', 'a', 'h', 'o', 0,
    'T', 'e', 's', 'o', 0,
    'S', 'o', 'g', 'a', 0,
    'N', 'a', 'm', 'a', 0,
    'M', 'e', 'r', 'u', 0,
    'E', 'm', 'b', 'u', 0,
    'B', 'e', 'n', 'a', 0,
    'S', 'e', 'n', 'a', 0,
    'T', 'y', 'a', 'p', 0,
    'K', 'o', 'r', 'o', 0,
    'G', 'e', 'e', 'z', 0,
    'B', 'l', 'i', 'n', 0,
    'I', 'g', 'b', 'o', 0,
    'A', 'k', 'a', 'n', 0,
    'M', 'a', 'n', 'x', 0,
    'Z', 'u', 'l', 'u', 0,
    'U', 'r', 'd', 'u', 0,
    'A', 'f', 'a', 'r', 0,
    'A', 'f', 'a', 'n', 0,
    's', 'k', 'i', 'p', 0,
    'p', 'e', 'e', 'k', 0,
    'f', 'i', 'l', 'e', 0,
    'c', 'o', 'p', 'y', 0,
    'l', 'i', 'n', 'k', 0,
    't', 'e', 'm', 'p', 0,
    'r', 'o', 'o', 't', 0,
    'h', 'o', 'm', 'e', 0,
    'c', 'd', 'U', 'p', 0,
    'Q', 'D', 'i', 'r', 0,
    's', 'p', 'e', 'c', 0,
    't', 'i', 'm', 'e', 0,
    'h', 'o', 'u', 'r', 0,
    'y', 'e', 'a', 'r', 0,
    'h', 'a', 's', 'h', 0,
    'S', 'h', 'a', '1', 0,
    'S', 'h', 'o', 'w', 0,
    'q', 'u', 'i', 't', 0,
    'e', 'x', 'i', 't', 0,
    'e', 'x', 'e', 'c', 0,
    'm', 'o', 'd', 'e', 0,
    'n', 'e', 'x', 't', 0,
    'c', 'h', 'o', 'p', 0,
    's', 'e', 'e', 'k', 0,
    'o', 'p', 'e', 'n', 0,
    'b', 'i', 't', 's', 0,
    'f', 'i', 'l', 'l', 0,
    'm', 's', 'e', 'c', 0,
    't', 'y', 'p', 'e', 0,
    'f', 'r', 'o', 'm', 0,
    'h', 'i', 'n', 't', 0,
    'l', 'a', 's', 't', 0,
    's', 'p', 'a', 'n', 0,
    'h', 'i', 't', 's', 0,
    's', 'o', 'r', 't', 0,
    's', 'w', 'a', 'p', 0,
    'd', 'a', 't', 'a', 0,
    'r', 'o', 'l', 'e', 0,
    's', 't', 'o', 'p', 0,
    'T', 'o', 'o', 'l', 0,
    'C', 'T', 'R', 'L', 0,
    'M', 'E', 'T', 'A', 0,
    'c', 'y', 'a', 'n', 0,
    'b', 'l', 'u', 'e', 0,
    'g', 'r', 'a', 'y', 0,
    's', 'e', 'e', 'd', 0,
    'q', 'A', 'b', 's', 0,
    'D', 'C', 'E', 0,
    'N', 'C', 'S', 0,
    'u', 't', 'c', 0,
    'b', 'o', 'm', 0,
    'r', 'u', 'n', 0,
    'c', 'a', 'p', 0,
    'm', 'a', 'x', 0,
    'm', 'i', 'n', 0,
    'I', 'O', 'S', 0,
    'a', 'd', 'd', 0,
    'p', 'i', 'd', 0,
    'M', 'r', 'u', 0,
    'N', 'k', 'o', 0,
    'L', 'a', 'o', 0,
    'V', 'a', 'i', 0,
    'L', 'u', 'o', 0,
    'R', 'w', 'a', 0,
    'A', 's', 'u', 0,
    'E', 'w', 'e', 0,
    'J', 'j', 'u', 0,
    'T', 'w', 'i', 0,
    'M', 'd', '5', 0,
    'M', 'd', '4', 0,
    't', 'a', 'g', 0,
    'm', 'i', 'd', 0,
    'p', 'o', 's', 0,
    'A', 'L', 'T', 0,
    'H', 'o', 0,
    'L', 'u', 0,
    'G', 'a', 0,
    'd', 'x', 0,
    'y', '2', 0,
    'x', '2', 0,
    'y', '1', 0,
    'x', '1', 0,
    'c', 'd', 0,
    'O', 'k', 0,
    'p', '1', 0,
};
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
#include <qglobal.h>
#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
static int PYQT_VERSION = 0x050c00;
static const char *PYQT_VERSION_STR = "5.12";
#line 141 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
QT_BEGIN_NAMESPACE
extern bool qRegisterResourceData(int, const unsigned char *, const unsigned char *, const unsigned char *);
extern bool qUnregisterResourceData(int, const unsigned char *, const unsigned char *, const unsigned char *);
QT_END_NAMESPACE
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 25 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborcommon.sip"
#include <qcborcommon.h>
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
#if QT_VERSION >= 0x050100
// The list of Python pre routines.
static PyObject *qtcore_PreRoutines = NULL;

// Call all of the registered Python pre routines.
static void qtcore_CallPreRoutines()
{
    for (Py_ssize_t i = 0; i < PyList_Size(qtcore_PreRoutines); ++i)
    {
        PyObject *pr = PyList_GetItem(qtcore_PreRoutines, i);

        if (pr != Py_None)
        {
            PyObject *res = PyObject_CallObject(pr, NULL);

            Py_XDECREF(res);
        }
    }
}
#endif


// The list of Python post routines.
static PyObject *qtcore_PostRoutines = NULL;

// Call all of the registered Python post routines.
static void qtcore_CallPostRoutines()
{
    for (Py_ssize_t i = 0; i < PyList_Size(qtcore_PostRoutines); ++i)
    {
        PyObject *pr = PyList_GetItem(qtcore_PostRoutines, i);

        if (pr != Py_None)
        {
            PyObject *res = PyObject_CallObject(pr, NULL);

            Py_XDECREF(res);
        }
    }
}
#line 251 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
#include <QCoreApplication>
#include <QThread>

#if defined(Q_OS_WIN)
#include <conio.h>
#include <QTimer>
#else
#include <QSocketNotifier>
#endif

// This is the input hook that will process events while the interpreter is
// waiting for interactive input.
extern "C" {static int qtcore_input_hook();}

static int qtcore_input_hook()
{
    QCoreApplication *app = QCoreApplication::instance();

    if (app && app->thread() == QThread::currentThread())
    {
#if defined(Q_OS_WIN)
        QTimer timer;
        QObject::connect(&timer, SIGNAL(timeout()), app, SLOT(quit()));

        while (!_kbhit())
        {
            // The delay is based on feedback from users.
            timer.start(35);
            QCoreApplication::exec();
            timer.stop();
        }

        QObject::disconnect(&timer, SIGNAL(timeout()), app, SLOT(quit()));
#else
        QSocketNotifier notifier(0, QSocketNotifier::Read, 0);
        QObject::connect(&notifier, SIGNAL(activated(int)), app, SLOT(quit()));
        QCoreApplication::exec();
        QObject::disconnect(&notifier, SIGNAL(activated(int)), app, SLOT(quit()));
#endif
    }

    return 0;
}
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
#include <qlogging.h>
#line 188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
// The user supplied Python handler.
static PyObject *qtcore_PyMessageHandler = 0;

// The C++ wrapper around the Python handler.
static void qtcore_MessageHandler(QtMsgType type, const QMessageLogContext &context, const QString &msg)
{
    PyObject *res;

    SIP_BLOCK_THREADS
    
    res = sipCallMethod(0, qtcore_PyMessageHandler, "FDD", type, sipType_QtMsgType, &context, sipType_QMessageLogContext, NULL, &msg, sipType_QString, NULL);

    Py_XDECREF(res);

    if (res != NULL && res != Py_None)
    {
        PyErr_SetString(PyExc_TypeError, "invalid result type from PyQt message handler");
        res = NULL;
    }

    if (res == NULL)
        pyqt5_err_print();

    SIP_UNBLOCK_THREADS
}
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnumeric.sip"
#include <qnumeric.h>
#line 735 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
// Disable the (supposedly) compulsory parts of the Qt support API.
#define sipQtCreateUniversalSlot    0
#define sipQtDestroyUniversalSlot   0
#define sipQtFindSlot               0
#define sipQtConnect                0
#define sipQtDisconnect             0
#define sipQtSameSignalSlotName     0
#define sipQtFindSipslot            0
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 5262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

 ::QString sipVH_QtCore_66(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QString(a0), sipType_QString, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

 ::QString sipVH_QtCore_65(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0,const char*a1,const char*a2,int a3)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "AAAi", a0, a1, a2, a3);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

 ::qreal sipVH_QtCore_64(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
     ::qreal sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "d", &sipRes);

    return sipRes;
}

 ::QString sipVH_QtCore_63(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0,int a1, ::QTextCodec::ConverterState*a2)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "gD", a0, (SIP_SSIZE_T)a1, a2, sipType_QTextCodec_ConverterState, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

QList< ::QByteArray> sipVH_QtCore_62(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QList< ::QByteArray> sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0100QByteArray, &sipRes);

    return sipRes;
}

 ::QByteArray sipVH_QtCore_61(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QByteArray sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QByteArray, &sipRes);

    return sipRes;
}

bool sipVH_QtCore_60(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, new  ::QModelIndex(a1), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtCore_59(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,const  ::QModelIndex& a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iN", a0, new  ::QModelIndex(a1), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QVariant sipVH_QtCore_58(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QVariant& a0,const  ::QVariant& a1, ::qreal a2)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NNd", new  ::QVariant(a0), sipType_QVariant, SIP_NULLPTR, new  ::QVariant(a1), sipType_QVariant, SIP_NULLPTR, a2);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

void sipVH_QtCore_57(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QVariant& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QVariant(a0), sipType_QVariant, SIP_NULLPTR);
}

 ::QVariant sipVH_QtCore_56(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0, ::QVariant::Type a1)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NF", new  ::QString(a0), sipType_QString, SIP_NULLPTR, a1, sipType_QVariant_Type);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtCore_55(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QString(a0), sipType_QString, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtCore_54(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QItemSelection& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NN", new  ::QItemSelection(a0), sipType_QItemSelection, SIP_NULLPTR, new  ::QItemSelectionModel::SelectionFlags(a1), sipType_QItemSelectionModel_SelectionFlags, SIP_NULLPTR);
}

void sipVH_QtCore_53(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NN", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, new  ::QItemSelectionModel::SelectionFlags(a1), sipType_QItemSelectionModel_SelectionFlags, SIP_NULLPTR);
}

bool sipVH_QtCore_52(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QFileDevice::Permissions a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QFileDevice::Permissions(a0), sipType_QFileDevice_Permissions, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QFileDevice::Permissions sipVH_QtCore_51(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QFileDevice::Permissions sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QFileDevice_Permissions, &sipRes);

    return sipRes;
}

 ::QString sipVH_QtCore_50(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

 ::qint64 sipVH_QtCore_49(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0,PY_LONG_LONG a1)
{
     ::qint64 sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "g", a0, (SIP_SSIZE_T)a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "n", &sipRes);

    return sipRes;
}

 ::qint64 sipVH_QtCore_48(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, char*a0, ::qint64 a1)
{
     ::qint64 sipRes = 0;
    int sipIsErr = 0;

#line 271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "n", a1);
        
        if (result != NULL)
        {
            PyObject *buf;
        
            sipParseResult(&sipIsErr, sipMethod, result, "O", &buf);
        
            if (buf == Py_None)
                sipRes = -1L;
            else if (!SIPBytes_Check(buf))
            {
                sipBadCatcherResult(sipMethod);
                sipIsErr = 1;
            }
            else
            {
                memcpy(a0, SIPBytes_AsString(buf), SIPBytes_Size(buf));
                sipRes = SIPBytes_Size(buf);
            }
        
            Py_DECREF(buf);
            Py_DECREF(result);
        }
#line 5459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    Py_DECREF(sipMethod);

    if (sipIsErr)
        sipCallErrorHandler(sipErrorHandler, sipPySelf, sipGILState);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

 ::qint64 sipVH_QtCore_47(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, char*a0, ::qint64 a1)
{
     ::qint64 sipRes = 0;
    int sipIsErr = 0;

#line 206 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "n", a1);
        
        if (result != NULL)
        {
            PyObject *buf;
        
            sipParseResult(&sipIsErr, sipMethod, result, "O", &buf);
        
            if (buf == Py_None)
                sipRes = -1L;
            else if (!SIPBytes_Check(buf))
            {
                sipBadCatcherResult(sipMethod);
                sipIsErr = 1;
            }
            else
            {
                memcpy(a0, SIPBytes_AsString(buf), SIPBytes_Size(buf));
                sipRes = SIPBytes_Size(buf);
            }
        
            Py_DECREF(buf);
            Py_DECREF(result);
        }
#line 5501 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    Py_DECREF(sipMethod);

    if (sipIsErr)
        sipCallErrorHandler(sipErrorHandler, sipPySelf, sipGILState);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_46(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::qint64 a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "n", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::qint64 sipVH_QtCore_45(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::qint64 sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "n", &sipRes);

    return sipRes;
}

bool sipVH_QtCore_44(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QIODevice::OpenMode a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QIODevice::OpenMode(a0), sipType_QIODevice_OpenMode, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QItemSelection sipVH_QtCore_43(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QItemSelection& a0)
{
     ::QItemSelection sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QItemSelection(a0), sipType_QItemSelection, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QItemSelection, &sipRes);

    return sipRes;
}

void sipVH_QtCore_42(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QAbstractItemModel*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QAbstractItemModel, SIP_NULLPTR);
}

bool sipVH_QtCore_41(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QByteArray& a0,void*a1,long*a2)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NV", new  ::QByteArray(a0), sipType_QByteArray, SIP_NULLPTR, a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bl)", &sipRes, a2);

    return sipRes;
}

bool sipVH_QtCore_40(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NiiNi", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, a1, a2, new  ::QModelIndex(a3), sipType_QModelIndex, SIP_NULLPTR, a4);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QHash<int, ::QByteArray> sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QHash_1800_0100QByteArray, &sipRes);

    return sipRes;
}

 ::QSize sipVH_QtCore_38(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
     ::QSize sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QSize, &sipRes);

    return sipRes;
}

 ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4)
{
     ::QModelIndexList sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NiNiN", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, a1, new  ::QVariant(a2), sipType_QVariant, SIP_NULLPTR, a3, new  ::Qt::MatchFlags(a4), sipType_Qt_MatchFlags, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0100QModelIndex, &sipRes);

    return sipRes;
}

void sipVH_QtCore_36(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0, ::Qt::SortOrder a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iF", a0, a1, sipType_Qt_SortOrder);
}

 ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
     ::Qt::ItemFlags sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_Qt_ItemFlags, &sipRes);

    return sipRes;
}

void sipVH_QtCore_34(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);
}

bool sipVH_QtCore_33(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,int a1,const  ::QModelIndex& a2)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iiN", a0, a1, new  ::QModelIndex(a2), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::Qt::DropActions sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_Qt_DropActions, &sipRes);

    return sipRes;
}

bool sipVH_QtCore_31(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DFiiN", const_cast< ::QMimeData *>(a0), sipType_QMimeData, SIP_NULLPTR, a1, sipType_Qt_DropAction, a2, a3, new  ::QModelIndex(a4), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QMimeData* sipVH_QtCore_30(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndexList& a0)
{
     ::QMimeData* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndexList(a0), sipType_QList_0100QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QMimeData, &sipRes);

    return sipRes;
}

 ::QStringList sipVH_QtCore_29(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QStringList sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QStringList, &sipRes);

    return sipRes;
}

bool sipVH_QtCore_28(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, new QMap<int, ::QVariant>(a1), sipType_QMap_1800_0100QVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
    QMap<int, ::QVariant> sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QMap_1800_0100QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtCore_26(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iFNi", a0, a1, sipType_Qt_Orientation, new  ::QVariant(a2), sipType_QVariant, SIP_NULLPTR, a3);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QVariant sipVH_QtCore_25(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0, ::Qt::Orientation a1,int a2)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iFi", a0, a1, sipType_Qt_Orientation, a2);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtCore_24(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NNi", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, new  ::QVariant(a1), sipType_QVariant, SIP_NULLPTR, a2);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::QVariant sipVH_QtCore_23(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0,int a1)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "Ni", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR, a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

bool sipVH_QtCore_22(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

int sipVH_QtCore_21(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

 ::QModelIndex sipVH_QtCore_20(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QModelIndex& a0)
{
     ::QModelIndex sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QModelIndex(a0), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QModelIndex, &sipRes);

    return sipRes;
}

 ::QModelIndex sipVH_QtCore_19(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,int a1,const  ::QModelIndex& a2)
{
     ::QModelIndex sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "iiN", a0, a1, new  ::QModelIndex(a2), sipType_QModelIndex, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QModelIndex, &sipRes);

    return sipRes;
}

int sipVH_QtCore_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

void sipVH_QtCore_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

QList< ::QAbstractEventDispatcher::TimerInfo> sipVH_QtCore_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0)
{
    QList< ::QAbstractEventDispatcher::TimerInfo> sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QObject, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0100QAbstractEventDispatcher_TimerInfo, &sipRes);

    return sipRes;
}

bool sipVH_QtCore_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QObject, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtCore_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "i", a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtCore_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0,int a1, ::Qt::TimerType a2, ::QObject*a3)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiFD", a0, a1, a2, sipType_Qt_TimerType, a3, sipType_QObject, SIP_NULLPTR);
}

void sipVH_QtCore_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QSocketNotifier*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QSocketNotifier, SIP_NULLPTR);
}

bool sipVH_QtCore_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtCore_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEventLoop::ProcessEventsFlags a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "N", new  ::QEventLoop::ProcessEventsFlags(a0), sipType_QEventLoop_ProcessEventsFlags, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtCore_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QAbstractAnimation::Direction a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "F", a0, sipType_QAbstractAnimation_Direction);
}

void sipVH_QtCore_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "FF", a0, sipType_QAbstractAnimation_State, a1, sipType_QAbstractAnimation_State);
}

void sipVH_QtCore_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "i", a0);
}

int sipVH_QtCore_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    int sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "i", &sipRes);

    return sipRes;
}

void sipVH_QtCore_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMetaMethod& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QMetaMethod(a0), sipType_QMetaMethod, SIP_NULLPTR);
}

void sipVH_QtCore_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);
}

void sipVH_QtCore_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QChildEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QChildEvent, SIP_NULLPTR);
}

void sipVH_QtCore_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTimerEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTimerEvent, SIP_NULLPTR);
}

bool sipVH_QtCore_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", a0, sipType_QObject, SIP_NULLPTR, a1, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtCore_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}


void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t)
{
#line 22 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_virtual_error_handler.sip"
    pyqt5_err_print();
#line 5923 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


PyDoc_STRVAR(doc_qSetRealNumberPrecision, "qSetRealNumberPrecision(int) -> QTextStreamManipulator");

extern "C" {static PyObject *func_qSetRealNumberPrecision(PyObject *,PyObject *);}
static PyObject *func_qSetRealNumberPrecision(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QTextStreamManipulator*sipRes;

            sipRes = new  ::QTextStreamManipulator(qSetRealNumberPrecision(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextStreamManipulator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qSetRealNumberPrecision, doc_qSetRealNumberPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qSetPadChar, "qSetPadChar(str) -> QTextStreamManipulator");

extern "C" {static PyObject *func_qSetPadChar(PyObject *,PyObject *);}
static PyObject *func_qSetPadChar(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QChar,&a0, &a0State))
        {
             ::QTextStreamManipulator*sipRes;

            sipRes = new  ::QTextStreamManipulator(qSetPadChar(*a0));
            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextStreamManipulator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qSetPadChar, doc_qSetPadChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qSetFieldWidth, "qSetFieldWidth(int) -> QTextStreamManipulator");

extern "C" {static PyObject *func_qSetFieldWidth(PyObject *,PyObject *);}
static PyObject *func_qSetFieldWidth(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QTextStreamManipulator*sipRes;

            sipRes = new  ::QTextStreamManipulator(qSetFieldWidth(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextStreamManipulator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qSetFieldWidth, doc_qSetFieldWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_ws, "ws(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_ws(PyObject *,PyObject *);}
static PyObject *func_ws(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &ws(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_ws, doc_ws);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_bom, "bom(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_bom(PyObject *,PyObject *);}
static PyObject *func_bom(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &bom(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_bom, doc_bom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_reset, "reset(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_reset(PyObject *,PyObject *);}
static PyObject *func_reset(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &reset(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_reset, doc_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_flush, "flush(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_flush(PyObject *,PyObject *);}
static PyObject *func_flush(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &flush(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_flush, doc_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_endl, "endl(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_endl(PyObject *,PyObject *);}
static PyObject *func_endl(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &endl(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_endl, doc_endl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_center, "center(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_center(PyObject *,PyObject *);}
static PyObject *func_center(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &center(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_center, doc_center);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_right, "right(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_right(PyObject *,PyObject *);}
static PyObject *func_right(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &right(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_right, doc_right);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_left, "left(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_left(PyObject *,PyObject *);}
static PyObject *func_left(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &left(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_left, doc_left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_scientific, "scientific(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_scientific(PyObject *,PyObject *);}
static PyObject *func_scientific(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &scientific(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_scientific, doc_scientific);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_fixed, "fixed(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_fixed(PyObject *,PyObject *);}
static PyObject *func_fixed(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &fixed(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_fixed, doc_fixed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_lowercasedigits, "lowercasedigits(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_lowercasedigits(PyObject *,PyObject *);}
static PyObject *func_lowercasedigits(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &lowercasedigits(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_lowercasedigits, doc_lowercasedigits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_lowercasebase, "lowercasebase(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_lowercasebase(PyObject *,PyObject *);}
static PyObject *func_lowercasebase(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &lowercasebase(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_lowercasebase, doc_lowercasebase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_uppercasedigits, "uppercasedigits(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_uppercasedigits(PyObject *,PyObject *);}
static PyObject *func_uppercasedigits(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &uppercasedigits(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_uppercasedigits, doc_uppercasedigits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_uppercasebase, "uppercasebase(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_uppercasebase(PyObject *,PyObject *);}
static PyObject *func_uppercasebase(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &uppercasebase(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_uppercasebase, doc_uppercasebase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_noforcepoint, "noforcepoint(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_noforcepoint(PyObject *,PyObject *);}
static PyObject *func_noforcepoint(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &noforcepoint(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_noforcepoint, doc_noforcepoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_noforcesign, "noforcesign(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_noforcesign(PyObject *,PyObject *);}
static PyObject *func_noforcesign(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &noforcesign(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_noforcesign, doc_noforcesign);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_noshowbase, "noshowbase(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_noshowbase(PyObject *,PyObject *);}
static PyObject *func_noshowbase(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &noshowbase(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_noshowbase, doc_noshowbase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_forcepoint, "forcepoint(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_forcepoint(PyObject *,PyObject *);}
static PyObject *func_forcepoint(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &forcepoint(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_forcepoint, doc_forcepoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_forcesign, "forcesign(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_forcesign(PyObject *,PyObject *);}
static PyObject *func_forcesign(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &forcesign(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_forcesign, doc_forcesign);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_showbase, "showbase(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_showbase(PyObject *,PyObject *);}
static PyObject *func_showbase(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &showbase(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_showbase, doc_showbase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_hex_, "hex_(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_hex_(PyObject *,PyObject *);}
static PyObject *func_hex_(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &hex(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_hex_, doc_hex_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_dec, "dec(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_dec(PyObject *,PyObject *);}
static PyObject *func_dec(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &dec(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_dec, doc_dec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_oct_, "oct_(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_oct_(PyObject *,PyObject *);}
static PyObject *func_oct_(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &oct(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_oct_, doc_oct_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_bin_, "bin_(QTextStream) -> QTextStream");

extern "C" {static PyObject *func_bin_(PyObject *,PyObject *);}
static PyObject *func_bin_(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QTextStream, &a0))
        {
             ::QTextStream*sipRes;

            sipRes = &bin(*a0);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_bin_, doc_bin_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Q_RETURN_ARG, "Q_RETURN_ARG(object) -> QGenericReturnArgument");

extern "C" {static PyObject *func_Q_RETURN_ARG(PyObject *,PyObject *);}
static PyObject *func_Q_RETURN_ARG(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
    sipRes = qpycore_ReturnFactory(a0);
#line 6702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_Q_RETURN_ARG, doc_Q_RETURN_ARG);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Q_ARG, "Q_ARG(object, object) -> QGenericArgument");

extern "C" {static PyObject *func_Q_ARG(PyObject *,PyObject *);}
static PyObject *func_Q_ARG(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0P0", &a0, &a1))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
    sipRes = qpycore_ArgumentFactory(a0, a1);
#line 6733 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_Q_ARG, doc_Q_ARG);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_pyqtSlot, "@pyqtSlot(*types, name: Optional[str], result: Optional[str])\n"
"\n"
"This is a decorator applied to Python methods of a QObject that marks them\n"
"as Qt slots.\n"
"The non-keyword arguments are the types of the slot arguments and each may\n"
"be a Python type object or a string specifying a C++ type.\n"
"name is the name of the slot and defaults to the name of the method.\n"
"result is type of the value returned by the slot.");

extern "C" {static PyObject *func_pyqtSlot(PyObject *,PyObject *, PyObject *);}
static PyObject *func_pyqtSlot(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
#line 696 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    return qpycore_pyqtslot(sipArgs, sipKwds);
#line 6760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


PyDoc_STRVAR(doc_QT_TRANSLATE_NOOP, "QT_TRANSLATE_NOOP(str, str) -> str");

extern "C" {static PyObject *func_QT_TRANSLATE_NOOP(PyObject *,PyObject *);}
static PyObject *func_QT_TRANSLATE_NOOP(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0P0", &a0, &a1))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 679 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    Py_INCREF(a1);
    sipRes = a1;
#line 6783 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_QT_TRANSLATE_NOOP, doc_QT_TRANSLATE_NOOP);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QT_TR_NOOP_UTF8, "QT_TR_NOOP_UTF8(str) -> str");

extern "C" {static PyObject *func_QT_TR_NOOP_UTF8(PyObject *,PyObject *);}
static PyObject *func_QT_TR_NOOP_UTF8(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 673 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    Py_INCREF(a0);
    sipRes = a0;
#line 6814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_QT_TR_NOOP_UTF8, doc_QT_TR_NOOP_UTF8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QT_TR_NOOP, "QT_TR_NOOP(str) -> str");

extern "C" {static PyObject *func_QT_TR_NOOP(PyObject *,PyObject *);}
static PyObject *func_QT_TR_NOOP(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 667 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    Py_INCREF(a0);
    sipRes = a0;
#line 6845 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_QT_TR_NOOP, doc_QT_TR_NOOP);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Q_FLAGS, "Q_FLAGS(*)");

extern "C" {static PyObject *func_Q_FLAGS(PyObject *,PyObject *);}
static PyObject *func_Q_FLAGS(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "W", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 662 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    sipRes = qpycore_Flags(a0);
#line 6875 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_DECREF(a0);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_Q_FLAGS, doc_Q_FLAGS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Q_FLAG, "Q_FLAG(Union[type, enum.Enum])");

extern "C" {static PyObject *func_Q_FLAG(PyObject *,PyObject *);}
static PyObject *func_Q_FLAG(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    sipRes = qpycore_Flag(a0);
#line 6907 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_Q_FLAG, doc_Q_FLAG);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Q_ENUMS, "Q_ENUMS(*)");

extern "C" {static PyObject *func_Q_ENUMS(PyObject *,PyObject *);}
static PyObject *func_Q_ENUMS(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "W", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 652 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    sipRes = qpycore_Enums(a0);
#line 6937 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_DECREF(a0);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_Q_ENUMS, doc_Q_ENUMS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Q_ENUM, "Q_ENUM(Union[type, enum.Enum])");

extern "C" {static PyObject *func_Q_ENUM(PyObject *,PyObject *);}
static PyObject *func_Q_ENUM(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 647 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    sipRes = qpycore_Enum(a0);
#line 6969 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_Q_ENUM, doc_Q_ENUM);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_Q_CLASSINFO, "Q_CLASSINFO(str, str)");

extern "C" {static PyObject *func_Q_CLASSINFO(PyObject *,PyObject *);}
static PyObject *func_Q_CLASSINFO(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AAAA", &a0Keep, &a0, &a1Keep, &a1))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    sipRes = qpycore_ClassInfo(a0, a1);
#line 7002 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_Q_CLASSINFO, doc_Q_CLASSINFO);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qFloatDistance, "qFloatDistance(float, float) -> int");

extern "C" {static PyObject *func_qFloatDistance(PyObject *,PyObject *);}
static PyObject *func_qFloatDistance(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
             ::quint64 sipRes;

            sipRes = qFloatDistance(a0,a1);

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qFloatDistance, doc_qFloatDistance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qQNaN, "qQNaN() -> float");

extern "C" {static PyObject *func_qQNaN(PyObject *,PyObject *);}
static PyObject *func_qQNaN(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            double sipRes;

            sipRes = qQNaN();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qQNaN, doc_qQNaN);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qSNaN, "qSNaN() -> float");

extern "C" {static PyObject *func_qSNaN(PyObject *,PyObject *);}
static PyObject *func_qSNaN(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            double sipRes;

            sipRes = qSNaN();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qSNaN, doc_qSNaN);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qInf, "qInf() -> float");

extern "C" {static PyObject *func_qInf(PyObject *,PyObject *);}
static PyObject *func_qInf(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            double sipRes;

            sipRes = qInf();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qInf, doc_qInf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qIsNaN, "qIsNaN(float) -> bool");

extern "C" {static PyObject *func_qIsNaN(PyObject *,PyObject *);}
static PyObject *func_qIsNaN(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            bool sipRes;

            sipRes = qIsNaN(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qIsNaN, doc_qIsNaN);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qIsFinite, "qIsFinite(float) -> bool");

extern "C" {static PyObject *func_qIsFinite(PyObject *,PyObject *);}
static PyObject *func_qIsFinite(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            bool sipRes;

            sipRes = qIsFinite(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qIsFinite, doc_qIsFinite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qIsInf, "qIsInf(float) -> bool");

extern "C" {static PyObject *func_qIsInf(PyObject *,PyObject *);}
static PyObject *func_qIsInf(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            bool sipRes;

            sipRes = qIsInf(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qIsInf, doc_qIsInf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qFormatLogMessage, "qFormatLogMessage(QtMsgType, QMessageLogContext, str) -> str");

extern "C" {static PyObject *func_qFormatLogMessage(PyObject *,PyObject *);}
static PyObject *func_qFormatLogMessage(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QtMsgType a0;
        const  ::QMessageLogContext* a1;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "EJ9J1", sipType_QtMsgType, &a0, sipType_QMessageLogContext, &a1, sipType_QString,&a2, &a2State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(qFormatLogMessage(a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qFormatLogMessage, doc_qFormatLogMessage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qSetMessagePattern, "qSetMessagePattern(str)");

extern "C" {static PyObject *func_qSetMessagePattern(PyObject *,PyObject *);}
static PyObject *func_qSetMessagePattern(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            qSetMessagePattern(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qSetMessagePattern, doc_qSetMessagePattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qInstallMessageHandler, "qInstallMessageHandler(Optional[Callable[[QtMsgType, QMessageLogContext, str], None]]) -> Optional[Callable[[QtMsgType, QMessageLogContext, str], None]]");

extern "C" {static PyObject *func_qInstallMessageHandler(PyObject *,PyObject *);}
static PyObject *func_qInstallMessageHandler(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "H", &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 171 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
    // Treat None as the default handler.
    QtMessageHandler old = qInstallMessageHandler((a0 != Py_None) ? qtcore_MessageHandler : 0);
    
    // If we recognise the old handler, then return it.  Otherwise return
    // the default handler.  This doesn't exactly mimic the Qt behaviour
    // but it is probably close enough for the way it will be used.
    sipRes = (old == qtcore_MessageHandler) ? qtcore_PyMessageHandler : Py_None;
    Py_INCREF(sipRes);
    
    // Save the new Python handler.
    Py_XDECREF(qtcore_PyMessageHandler);
    qtcore_PyMessageHandler = a0;
    Py_INCREF(qtcore_PyMessageHandler);
#line 7298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qInstallMessageHandler, doc_qInstallMessageHandler);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qWarning, "qWarning(str)");

extern "C" {static PyObject *func_qWarning(PyObject *,PyObject *);}
static PyObject *func_qWarning(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
#line 161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
    const char *file, *function;
    int line = qpycore_current_context(&file, &function);
    
    Py_BEGIN_ALLOW_THREADS
    QMessageLogger(file, line, function).warning("%s", a0);
    Py_END_ALLOW_THREADS
#line 7332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qWarning, doc_qWarning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qInfo, "qInfo(str)");

extern "C" {static PyObject *func_qInfo(PyObject *,PyObject *);}
static PyObject *func_qInfo(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
#line 150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
    const char *file, *function;
    int line = qpycore_current_context(&file, &function);
    
    Py_BEGIN_ALLOW_THREADS
    QMessageLogger(file, line, function).info("%s", a0);
    Py_END_ALLOW_THREADS
#line 7368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qInfo, doc_qInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qFatal, "qFatal(str)");

extern "C" {static PyObject *func_qFatal(PyObject *,PyObject *);}
static PyObject *func_qFatal(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
    const char *file, *function;
    int line = qpycore_current_context(&file, &function);
    
    Py_BEGIN_ALLOW_THREADS
    QMessageLogger(file, line, function).fatal("%s", a0);
    Py_END_ALLOW_THREADS
#line 7404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qFatal, doc_qFatal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qErrnoWarning, "qErrnoWarning(int, str)\n"
"qErrnoWarning(str)");

extern "C" {static PyObject *func_qErrnoWarning(PyObject *,PyObject *);}
static PyObject *func_qErrnoWarning(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "iAA", &a0, &a1Keep, &a1))
        {
#line 125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
    Py_BEGIN_ALLOW_THREADS
    qErrnoWarning(a0, "%s", a1);
    Py_END_ALLOW_THREADS
#line 7440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            Py_DECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
#line 132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
    Py_BEGIN_ALLOW_THREADS
    qErrnoWarning("%s", a0);
    Py_END_ALLOW_THREADS
#line 7458 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qErrnoWarning, doc_qErrnoWarning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qDebug, "qDebug(str)");

extern "C" {static PyObject *func_qDebug(PyObject *,PyObject *);}
static PyObject *func_qDebug(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
#line 115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
    const char *file, *function;
    int line = qpycore_current_context(&file, &function);
    
    Py_BEGIN_ALLOW_THREADS
    QMessageLogger(file, line, function).debug("%s", a0);
    Py_END_ALLOW_THREADS
#line 7494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qDebug, doc_qDebug);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qCritical, "qCritical(str)");

extern "C" {static PyObject *func_qCritical(PyObject *,PyObject *);}
static PyObject *func_qCritical(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
    const char *file, *function;
    int line = qpycore_current_context(&file, &function);
    
    Py_BEGIN_ALLOW_THREADS
    QMessageLogger(file, line, function).critical("%s", a0);
    Py_END_ALLOW_THREADS
#line 7530 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qCritical, doc_qCritical);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_pyqtRestoreInputHook, "pyqtRestoreInputHook()");

extern "C" {static PyObject *func_pyqtRestoreInputHook(PyObject *,PyObject *);}
static PyObject *func_pyqtRestoreInputHook(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
#line 246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
    // Restore the input hook.
    PyOS_InputHook = qtcore_input_hook;
#line 7559 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_pyqtRestoreInputHook, doc_pyqtRestoreInputHook);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_pyqtRemoveInputHook, "pyqtRemoveInputHook()");

extern "C" {static PyObject *func_pyqtRemoveInputHook(PyObject *,PyObject *);}
static PyObject *func_pyqtRemoveInputHook(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
#line 240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
    // Clear the Python input hook installed when the module was initialised.
    PyOS_InputHook = 0;
#line 7587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_pyqtRemoveInputHook, doc_pyqtRemoveInputHook);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qAddPreRoutine, "qAddPreRoutine(Callable[[], None])");

extern "C" {static PyObject *func_qAddPreRoutine(PyObject *,PyObject *);}
static PyObject *func_qAddPreRoutine(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "F", &a0))
        {
            int sipIsErr = 0;

#line 175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
    // Add it to the list of pre routines if it already exists.
    if (qtcore_PreRoutines != NULL)
    {
        if (PyList_Append(qtcore_PreRoutines, a0) < 0)
            sipIsErr = 1;
    }
    else if ((qtcore_PreRoutines = PyList_New(1)) != NULL)
    {
        Py_INCREF(a0);
        PyList_SetItem(qtcore_PreRoutines, 0, a0);
    
        qAddPreRoutine(qtcore_CallPreRoutines);
    }
    else
    {
        sipIsErr = 1;
    }
#line 7634 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qAddPreRoutine, doc_qAddPreRoutine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qRemovePostRoutine, "qRemovePostRoutine(Callable[..., None])");

extern "C" {static PyObject *func_qRemovePostRoutine(PyObject *,PyObject *);}
static PyObject *func_qRemovePostRoutine(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "F", &a0))
        {
#line 160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
    // Remove it from the list of post routines if it exists.
    if (qtcore_PostRoutines != NULL)
        for (Py_ssize_t i = 0; i < PyList_Size(qtcore_PostRoutines); ++i)
            if (PyList_GetItem(qtcore_PostRoutines, i) == a0)
            {
                Py_INCREF(Py_None);
                PyList_SetItem(qtcore_PostRoutines, i, Py_None);
    
                break;
            }
#line 7675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qRemovePostRoutine, doc_qRemovePostRoutine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qAddPostRoutine, "qAddPostRoutine(Callable[..., None])");

extern "C" {static PyObject *func_qAddPostRoutine(PyObject *,PyObject *);}
static PyObject *func_qAddPostRoutine(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "F", &a0))
        {
            int sipIsErr = 0;

#line 125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
    // Add it to the list of post routines if it already exists.
    if (qtcore_PostRoutines != NULL)
    {
        // See if there is an empty slot.
        bool app = true;
    
        for (Py_ssize_t i = 0; i < PyList_Size(qtcore_PostRoutines); ++i)
            if (PyList_GetItem(qtcore_PostRoutines, i) == Py_None)
            {
                Py_INCREF(a0);
                PyList_SetItem(qtcore_PostRoutines, i, a0);
    
                app = false;
    
                break;
            }
    
        if (app && PyList_Append(qtcore_PostRoutines, a0) < 0)
            sipIsErr = 1;
    }
    else if ((qtcore_PostRoutines = PyList_New(1)) != NULL)
    {
        Py_INCREF(a0);
        PyList_SetItem(qtcore_PostRoutines, 0, a0);
    
        qAddPostRoutine(qtcore_CallPostRoutines);
    }
    else
    {
        sipIsErr = 1;
    }
#line 7736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qAddPostRoutine, doc_qAddPostRoutine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qChecksum, "qChecksum(bytes) -> int\n"
"qChecksum(bytes, Qt.ChecksumType) -> int");

extern "C" {static PyObject *func_qChecksum(PyObject *,PyObject *);}
static PyObject *func_qChecksum(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        SIP_SSIZE_T a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "k", &a0, &a1))
        {
             ::quint16 sipRes;

            sipRes = qChecksum(a0,(uint)a1);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::Qt::ChecksumType a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "kE", &a0, &a1, sipType_Qt_ChecksumType, &a2))
        {
             ::quint16 sipRes;

            sipRes = qChecksum(a0,(uint)a1,a2);

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qChecksum, doc_qChecksum);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qUncompress, "qUncompress(Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *func_qUncompress(PyObject *,PyObject *);}
static PyObject *func_qUncompress(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(qUncompress(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qUncompress, doc_qUncompress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qCompress, "qCompress(Union[QByteArray, bytes, bytearray], compressionLevel: int = -1) -> QByteArray");

extern "C" {static PyObject *func_qCompress(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qCompress(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_compressionLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|i", sipType_QByteArray, &a0, &a0State, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(qCompress(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qCompress, doc_qCompress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qEnvironmentVariable, "qEnvironmentVariable(str) -> str\n"
"qEnvironmentVariable(str, str) -> str");

extern "C" {static PyObject *func_qEnvironmentVariable(PyObject *,PyObject *);}
static PyObject *func_qEnvironmentVariable(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(qEnvironmentVariable(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "AAJ1", &a0Keep, &a0, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(qEnvironmentVariable(a0,*a1));
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qEnvironmentVariable, doc_qEnvironmentVariable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_pyqtPickleProtocol, "pyqtPickleProtocol() -> Optional[int]");

extern "C" {static PyObject *func_pyqtPickleProtocol(PyObject *,PyObject *);}
static PyObject *func_pyqtPickleProtocol(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 222 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
    sipRes = qpycore_pickle_protocol;
    if (!sipRes)
        sipRes = Py_None;
    
    Py_INCREF(sipRes);
#line 7942 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_pyqtPickleProtocol, doc_pyqtPickleProtocol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_pyqtSetPickleProtocol, "pyqtSetPickleProtocol(Optional[int])");

extern "C" {static PyObject *func_pyqtSetPickleProtocol(PyObject *,PyObject *);}
static PyObject *func_pyqtSetPickleProtocol(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0", &a0))
        {
#line 215 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
    Py_XDECREF(qpycore_pickle_protocol);
    qpycore_pickle_protocol = a0;
    Py_INCREF(qpycore_pickle_protocol);
#line 7972 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_pyqtSetPickleProtocol, doc_pyqtSetPickleProtocol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qrand, "qrand() -> int");

extern "C" {static PyObject *func_qrand(PyObject *,PyObject *);}
static PyObject *func_qrand(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes = qrand();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qrand, doc_qrand);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qsrand, "qsrand(int)");

extern "C" {static PyObject *func_qsrand(PyObject *,PyObject *);}
static PyObject *func_qsrand(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            qsrand(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qsrand, doc_qsrand);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qIsNull, "qIsNull(float) -> bool");

extern "C" {static PyObject *func_qIsNull(PyObject *,PyObject *);}
static PyObject *func_qIsNull(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            bool sipRes;

            sipRes = qIsNull(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qIsNull, doc_qIsNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qFuzzyCompare, "qFuzzyCompare(float, float) -> bool");

extern "C" {static PyObject *func_qFuzzyCompare(PyObject *,PyObject *);}
static PyObject *func_qFuzzyCompare(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        double a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
            bool sipRes;

            sipRes = qFuzzyCompare(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qFuzzyCompare, doc_qFuzzyCompare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qUnregisterResourceData, "qUnregisterResourceData(int, bytes, bytes, bytes) -> bool");

extern "C" {static PyObject *func_qUnregisterResourceData(PyObject *,PyObject *);}
static PyObject *func_qUnregisterResourceData(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const unsigned char* a1;
        const unsigned char* a2;
        const unsigned char* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "isss", &a0, &a1, &a2, &a3))
        {
            bool sipRes;

            sipRes = qUnregisterResourceData(a0,a1,a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qUnregisterResourceData, doc_qUnregisterResourceData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qRegisterResourceData, "qRegisterResourceData(int, bytes, bytes, bytes) -> bool");

extern "C" {static PyObject *func_qRegisterResourceData(PyObject *,PyObject *);}
static PyObject *func_qRegisterResourceData(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const unsigned char* a1;
        const unsigned char* a2;
        const unsigned char* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "isss", &a0, &a1, &a2, &a3))
        {
            bool sipRes;

            sipRes = qRegisterResourceData(a0,a1,a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qRegisterResourceData, doc_qRegisterResourceData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qSharedBuild, "qSharedBuild() -> bool");

extern "C" {static PyObject *func_qSharedBuild(PyObject *,PyObject *);}
static PyObject *func_qSharedBuild(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = qSharedBuild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qSharedBuild, doc_qSharedBuild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qVersion, "qVersion() -> str");

extern "C" {static PyObject *func_qVersion(PyObject *,PyObject *);}
static PyObject *func_qVersion(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            const char*sipRes;

            sipRes = qVersion();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qVersion, doc_qVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qRound64, "qRound64(float) -> int");

extern "C" {static PyObject *func_qRound64(PyObject *,PyObject *);}
static PyObject *func_qRound64(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
             ::qint64 sipRes;

            sipRes = qRound64(a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qRound64, doc_qRound64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qRound, "qRound(float) -> int");

extern "C" {static PyObject *func_qRound(PyObject *,PyObject *);}
static PyObject *func_qRound(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            int sipRes;

            sipRes = qRound(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qRound, doc_qRound);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qAbs, "qAbs(float) -> float");

extern "C" {static PyObject *func_qAbs(PyObject *,PyObject *);}
static PyObject *func_qAbs(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "d", &a0))
        {
            double sipRes;

            sipRes = qAbs(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qAbs, doc_qAbs);

    return SIP_NULLPTR;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QObject(void **);}
static const sipTypeDef *sipSubClass_QObject(void **sipCppRet)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QSettings, &sipType_QSettings, -1, 1},
        {sipName_QAbstractAnimation, &sipType_QAbstractAnimation, 25, 2},
        {sipName_QAbstractState, &sipType_QAbstractState, 31, 3},
    #if QT_VERSION >= 0x050200
        {sipName_QFileSelector, &sipType_QFileSelector, -1, 4},
    #else
        {0, 0, -1, 4},
    #endif
        {sipName_QTimer, &sipType_QTimer, -1, 5},
        {sipName_QItemSelectionModel, &sipType_QItemSelectionModel, -1, 6},
        {sipName_QSocketNotifier, &sipType_QSocketNotifier, -1, 7},
        {sipName_QIODevice, &sipType_QIODevice, 35, 8},
        {sipName_QObjectCleanupHandler, &sipType_QObjectCleanupHandler, -1, 9},
        {sipName_QAbstractTransition, &sipType_QAbstractTransition, 41, 10},
        {sipName_QThread, &sipType_QThread, -1, 11},
        {sipName_QTranslator, &sipType_QTranslator, -1, 12},
        {sipName_QPluginLoader, &sipType_QPluginLoader, -1, 13},
    #if defined(Q_OS_WIN)
        {sipName_QWinEventNotifier, &sipType_QWinEventNotifier, -1, 14},
    #else
        {0, 0, -1, 14},
    #endif
        {sipName_QMimeData, &sipType_QMimeData, -1, 15},
        {sipName_QSignalMapper, &sipType_QSignalMapper, -1, 16},
        {sipName_QAbstractEventDispatcher, &sipType_QAbstractEventDispatcher, -1, 17},
        {sipName_QThreadPool, &sipType_QThreadPool, -1, 18},
        {sipName_QCoreApplication, &sipType_QCoreApplication, -1, 19},
        {sipName_QFileSystemWatcher, &sipType_QFileSystemWatcher, -1, 20},
        {sipName_QSharedMemory, &sipType_QSharedMemory, -1, 21},
        {sipName_QAbstractItemModel, &sipType_QAbstractItemModel, 43, 22},
        {sipName_QEventLoop, &sipType_QEventLoop, -1, 23},
        {sipName_QLibrary, &sipType_QLibrary, -1, 24},
        {sipName_QTimeLine, &sipType_QTimeLine, -1, -1},
        {sipName_QPauseAnimation, &sipType_QPauseAnimation, -1, 26},
        {sipName_QAnimationGroup, &sipType_QAnimationGroup, 28, 27},
        {sipName_QVariantAnimation, &sipType_QVariantAnimation, 30, -1},
        {sipName_QSequentialAnimationGroup, &sipType_QSequentialAnimationGroup, -1, 29},
        {sipName_QParallelAnimationGroup, &sipType_QParallelAnimationGroup, -1, -1},
        {sipName_QPropertyAnimation, &sipType_QPropertyAnimation, -1, -1},
        {sipName_QHistoryState, &sipType_QHistoryState, -1, 32},
        {sipName_QFinalState, &sipType_QFinalState, -1, 33},
        {sipName_QState, &sipType_QState, 34, -1},
        {sipName_QStateMachine, &sipType_QStateMachine, -1, -1},
        {sipName_QBuffer, &sipType_QBuffer, -1, 36},
        {sipName_QFileDevice, &sipType_QFileDevice, 38, 37},
    #if !defined(QT_NO_PROCESS)
        {sipName_QProcess, &sipType_QProcess, -1, -1},
    #else
        {0, 0, -1, -1},
    #endif
    #if QT_VERSION >= 0x050100
        {sipName_QSaveFile, &sipType_QSaveFile, -1, 39},
    #else
        {0, 0, -1, 39},
    #endif
        {sipName_QFile, &sipType_QFile, 40, -1},
        {sipName_QTemporaryFile, &sipType_QTemporaryFile, -1, -1},
        {sipName_QSignalTransition, &sipType_QSignalTransition, -1, 42},
        {sipName_QEventTransition, &sipType_QEventTransition, -1, -1},
        {sipName_QAbstractListModel, &sipType_QAbstractListModel, 46, 44},
        {sipName_QAbstractProxyModel, &sipType_QAbstractProxyModel, 47, 45},
        {sipName_QAbstractTableModel, &sipType_QAbstractTableModel, -1, -1},
        {sipName_QStringListModel, &sipType_QStringListModel, -1, -1},
        {sipName_QSortFilterProxyModel, &sipType_QSortFilterProxyModel, -1, 48},
        {sipName_QIdentityProxyModel, &sipType_QIdentityProxyModel, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 8397 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QEvent(void **);}
static const sipTypeDef *sipSubClass_QEvent(void **sipCppRet)
{
     ::QEvent *sipCpp = reinterpret_cast< ::QEvent *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
    switch (sipCpp->type())
    {
    case QEvent::Timer:
        sipType = sipType_QTimerEvent;
        break;
    
    case QEvent::ChildAdded:
    case QEvent::ChildPolished:
    case QEvent::ChildRemoved:
        sipType = sipType_QChildEvent;
        break;
    
    case QEvent::DynamicPropertyChange:
        sipType = sipType_QDynamicPropertyChangeEvent;
        break;
    
    case QEvent::StateMachineSignal:
        sipType = sipType_QStateMachine_SignalEvent;
        break;
    
    case QEvent::StateMachineWrapped:
        sipType = sipType_QStateMachine_WrappedEvent;
        break;
    
    default:
        sipType = 0;
    }
#line 8438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    return sipType;
}


/* This defines each external type declared in this module, */
static sipExternalTypeDef externalTypesTable[] = {
    {326, "QWidget"},
    {-1, SIP_NULLPTR}
};


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOption___or__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOption a0;
         ::QUrl::ComponentFormattingOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QUrl_ComponentFormattingOption, &a0, sipType_QUrl_ComponentFormattingOptions, &a1, &a1State))
        {
             ::QUrl::ComponentFormattingOptions*sipRes;

            sipRes = new  ::QUrl::ComponentFormattingOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QUrl_ComponentFormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_ComponentFormattingOptions,SIP_NULLPTR);
        }
    }

    {
         ::QUrl::ComponentFormattingOption a0;
         ::QUrl::FormattingOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QUrl_ComponentFormattingOption, &a0, sipType_QUrl_FormattingOptions, &a1, &a1State))
        {
             ::QUrl::FormattingOptions*sipRes;

            sipRes = new  ::QUrl::FormattingOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QUrl_FormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_FormattingOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QUrl_ComponentFormattingOption[] = {
    {(void *)slot_QUrl_ComponentFormattingOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QUrl_UrlFormattingOption___or__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UrlFormattingOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::UrlFormattingOption a0;
         ::QUrl::FormattingOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QUrl_UrlFormattingOption, &a0, sipType_QUrl_FormattingOptions, &a1, &a1State))
        {
             ::QUrl::FormattingOptions*sipRes;

            sipRes = new  ::QUrl::FormattingOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QUrl_FormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_FormattingOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QUrl_UrlFormattingOption[] = {
    {(void *)slot_QUrl_UrlFormattingOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextStream_NumberFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::NumberFlag a0;
         ::QTextStream::NumberFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTextStream_NumberFlag, &a0, sipType_QTextStream_NumberFlags, &a1, &a1State))
        {
             ::QTextStream::NumberFlags*sipRes;

            sipRes = new  ::QTextStream::NumberFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QTextStream_NumberFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextStream_NumberFlag[] = {
    {(void *)slot_QTextStream_NumberFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextCodec_ConversionFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec::ConversionFlag a0;
         ::QTextCodec::ConversionFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTextCodec_ConversionFlag, &a0, sipType_QTextCodec_ConversionFlags, &a1, &a1State))
        {
             ::QTextCodec::ConversionFlags*sipRes;

            sipRes = new  ::QTextCodec::ConversionFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QTextCodec_ConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextCodec_ConversionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextCodec_ConversionFlag[] = {
    {(void *)slot_QTextCodec_ConversionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReason___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReason___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBoundaryFinder::BoundaryReason a0;
         ::QTextBoundaryFinder::BoundaryReasons* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QTextBoundaryFinder_BoundaryReason, &a0, sipType_QTextBoundaryFinder_BoundaryReasons, &a1, &a1State))
        {
             ::QTextBoundaryFinder::BoundaryReasons*sipRes;

            sipRes = new  ::QTextBoundaryFinder::BoundaryReasons((a0 | *a1));
            sipReleaseType(a1,sipType_QTextBoundaryFinder_BoundaryReasons,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextBoundaryFinder_BoundaryReasons,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextBoundaryFinder_BoundaryReason[] = {
    {(void *)slot_QTextBoundaryFinder_BoundaryReason___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QStandardPaths_LocateOption___or__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::LocateOption a0;
         ::QStandardPaths::LocateOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QStandardPaths_LocateOption, &a0, sipType_QStandardPaths_LocateOptions, &a1, &a1State))
        {
             ::QStandardPaths::LocateOptions*sipRes;

            sipRes = new  ::QStandardPaths::LocateOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QStandardPaths_LocateOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStandardPaths_LocateOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QStandardPaths_LocateOption[] = {
    {(void *)slot_QStandardPaths_LocateOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QRegularExpression_MatchOption___or__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::MatchOption a0;
         ::QRegularExpression::MatchOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QRegularExpression_MatchOption, &a0, sipType_QRegularExpression_MatchOptions, &a1, &a1State))
        {
             ::QRegularExpression::MatchOptions*sipRes;

            sipRes = new  ::QRegularExpression::MatchOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QRegularExpression_MatchOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_MatchOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QRegularExpression_MatchOption[] = {
    {(void *)slot_QRegularExpression_MatchOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QRegularExpression_PatternOption___or__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::PatternOption a0;
         ::QRegularExpression::PatternOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QRegularExpression_PatternOption, &a0, sipType_QRegularExpression_PatternOptions, &a1, &a1State))
        {
             ::QRegularExpression::PatternOptions*sipRes;

            sipRes = new  ::QRegularExpression::PatternOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QRegularExpression_PatternOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_PatternOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QRegularExpression_PatternOption[] = {
    {(void *)slot_QRegularExpression_PatternOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QMetaType_TypeFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMetaType::TypeFlag a0;
         ::QMetaType::TypeFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QMetaType_TypeFlag, &a0, sipType_QMetaType_TypeFlags, &a1, &a1State))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QMetaType_TypeFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QMetaType_TypeFlag[] = {
    {(void *)slot_QMetaType_TypeFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QLocale_NumberOption___or__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::NumberOption a0;
         ::QLocale::NumberOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QLocale_NumberOption, &a0, sipType_QLocale_NumberOptions, &a1, &a1State))
        {
             ::QLocale::NumberOptions*sipRes;

            sipRes = new  ::QLocale::NumberOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QLocale_NumberOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QLocale_NumberOption[] = {
    {(void *)slot_QLocale_NumberOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QLibrary_LoadHint___or__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHint___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibrary::LoadHint a0;
         ::QLibrary::LoadHints* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QLibrary_LoadHint, &a0, sipType_QLibrary_LoadHints, &a1, &a1State))
        {
             ::QLibrary::LoadHints*sipRes;

            sipRes = new  ::QLibrary::LoadHints((a0 | *a1));
            sipReleaseType(a1,sipType_QLibrary_LoadHints,a1State);

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QLibrary_LoadHint[] = {
    {(void *)slot_QLibrary_LoadHint___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionModel::SelectionFlag a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QItemSelectionModel_SelectionFlag, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
             ::QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new  ::QItemSelectionModel::SelectionFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QItemSelectionModel_SelectionFlag[] = {
    {(void *)slot_QItemSelectionModel_SelectionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QIODevice_OpenModeFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenModeFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice::OpenModeFlag a0;
         ::QIODevice::OpenMode* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QIODevice_OpenModeFlag, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
             ::QIODevice::OpenMode*sipRes;

            sipRes = new  ::QIODevice::OpenMode((a0 | *a1));
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QIODevice_OpenModeFlag[] = {
    {(void *)slot_QIODevice_OpenModeFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QFileDevice_Permission___or__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permission___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::Permission a0;
         ::QFileDevice::Permissions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QFileDevice_Permission, &a0, sipType_QFileDevice_Permissions, &a1, &a1State))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions((a0 | *a1));
            sipReleaseType(a1,sipType_QFileDevice_Permissions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QFileDevice_Permission[] = {
    {(void *)slot_QFileDevice_Permission___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlag a0;
         ::QEventLoop::ProcessEventsFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QEventLoop_ProcessEventsFlag, &a0, sipType_QEventLoop_ProcessEventsFlags, &a1, &a1State))
        {
             ::QEventLoop::ProcessEventsFlags*sipRes;

            sipRes = new  ::QEventLoop::ProcessEventsFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QEventLoop_ProcessEventsFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QEventLoop_ProcessEventsFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QEventLoop_ProcessEventsFlag[] = {
    {(void *)slot_QEventLoop_ProcessEventsFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QDirIterator_IteratorFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDirIterator::IteratorFlag a0;
         ::QDirIterator::IteratorFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QDirIterator_IteratorFlag, &a0, sipType_QDirIterator_IteratorFlags, &a1, &a1State))
        {
             ::QDirIterator::IteratorFlags*sipRes;

            sipRes = new  ::QDirIterator::IteratorFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QDirIterator_IteratorFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDirIterator_IteratorFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QDirIterator_IteratorFlag[] = {
    {(void *)slot_QDirIterator_IteratorFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QDir_SortFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::SortFlag a0;
         ::QDir::SortFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QDir_SortFlag, &a0, sipType_QDir_SortFlags, &a1, &a1State))
        {
             ::QDir::SortFlags*sipRes;

            sipRes = new  ::QDir::SortFlags((a0 | *a1));
            sipReleaseType(a1,sipType_QDir_SortFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QDir_SortFlag[] = {
    {(void *)slot_QDir_SortFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QDir_Filter___or__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filter___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filter a0;
         ::QDir::Filters* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QDir_Filter, &a0, sipType_QDir_Filters, &a1, &a1State))
        {
             ::QDir::Filters*sipRes;

            sipRes = new  ::QDir::Filters((a0 | *a1));
            sipReleaseType(a1,sipType_QDir_Filters,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QDir_Filter[] = {
    {(void *)slot_QDir_Filter___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QCommandLineOption_Flag___or__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineOption::Flag a0;
         ::QCommandLineOption::Flags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QCommandLineOption_Flag, &a0, sipType_QCommandLineOption_Flags, &a1, &a1State))
        {
             ::QCommandLineOption::Flags*sipRes;

            sipRes = new  ::QCommandLineOption::Flags((a0 | *a1));
            sipReleaseType(a1,sipType_QCommandLineOption_Flags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QCommandLineOption_Flag[] = {
    {(void *)slot_QCommandLineOption_Flag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QByteArray_Base64Option___or__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Option___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray::Base64Option a0;
         ::QByteArray::Base64Options* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QByteArray_Base64Option, &a0, sipType_QByteArray_Base64Options, &a1, &a1State))
        {
             ::QByteArray::Base64Options*sipRes;

            sipRes = new  ::QByteArray::Base64Options((a0 | *a1));
            sipReleaseType(a1,sipType_QByteArray_Base64Options,a1State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray_Base64Options,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QByteArray_Base64Option[] = {
    {(void *)slot_QByteArray_Base64Option___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOption___or__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel::CheckIndexOption a0;
         ::QAbstractItemModel::CheckIndexOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QAbstractItemModel_CheckIndexOption, &a0, sipType_QAbstractItemModel_CheckIndexOptions, &a1, &a1State))
        {
             ::QAbstractItemModel::CheckIndexOptions*sipRes;

            sipRes = new  ::QAbstractItemModel::CheckIndexOptions((a0 | *a1));
            sipReleaseType(a1,sipType_QAbstractItemModel_CheckIndexOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractItemModel_CheckIndexOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QAbstractItemModel_CheckIndexOption[] = {
    {(void *)slot_QAbstractItemModel_CheckIndexOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_MouseEventFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseEventFlag a0;
         ::Qt::MouseEventFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_MouseEventFlag, &a0, sipType_Qt_MouseEventFlags, &a1, &a1State))
        {
             ::Qt::MouseEventFlags*sipRes;

            sipRes = new  ::Qt::MouseEventFlags((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_MouseEventFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseEventFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_MouseEventFlag[] = {
    {(void *)slot_Qt_MouseEventFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_Edge___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edge___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Edge a0;
         ::Qt::Edges* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_Edge, &a0, sipType_Qt_Edges, &a1, &a1State))
        {
             ::Qt::Edges*sipRes;

            sipRes = new  ::Qt::Edges((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_Edges,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Edges,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_Edge[] = {
    {(void *)slot_Qt_Edge___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_ScreenOrientation___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientation___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientation a0;
         ::Qt::ScreenOrientations* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_ScreenOrientation, &a0, sipType_Qt_ScreenOrientations, &a1, &a1State))
        {
             ::Qt::ScreenOrientations*sipRes;

            sipRes = new  ::Qt::ScreenOrientations((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_ScreenOrientations,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ScreenOrientations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_ScreenOrientation[] = {
    {(void *)slot_Qt_ScreenOrientation___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_GestureFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::GestureFlag a0;
         ::Qt::GestureFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_GestureFlag, &a0, sipType_Qt_GestureFlags, &a1, &a1State))
        {
             ::Qt::GestureFlags*sipRes;

            sipRes = new  ::Qt::GestureFlags((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_GestureFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_GestureFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_GestureFlag[] = {
    {(void *)slot_Qt_GestureFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_TouchPointState___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointState___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TouchPointState a0;
         ::Qt::TouchPointStates* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_TouchPointState, &a0, sipType_Qt_TouchPointStates, &a1, &a1State))
        {
             ::Qt::TouchPointStates*sipRes;

            sipRes = new  ::Qt::TouchPointStates((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_TouchPointStates,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TouchPointStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_TouchPointState[] = {
    {(void *)slot_Qt_TouchPointState___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_InputMethodHint___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHint___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodHint a0;
         ::Qt::InputMethodHints* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_InputMethodHint, &a0, sipType_Qt_InputMethodHints, &a1, &a1State))
        {
             ::Qt::InputMethodHints*sipRes;

            sipRes = new  ::Qt::InputMethodHints((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_InputMethodHints,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_InputMethodHint[] = {
    {(void *)slot_Qt_InputMethodHint___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_TextInteractionFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextInteractionFlag a0;
         ::Qt::TextInteractionFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_TextInteractionFlag, &a0, sipType_Qt_TextInteractionFlags, &a1, &a1State))
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_TextInteractionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_TextInteractionFlag[] = {
    {(void *)slot_Qt_TextInteractionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_MatchFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MatchFlag a0;
         ::Qt::MatchFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_MatchFlag, &a0, sipType_Qt_MatchFlags, &a1, &a1State))
        {
             ::Qt::MatchFlags*sipRes;

            sipRes = new  ::Qt::MatchFlags((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MatchFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_MatchFlag[] = {
    {(void *)slot_Qt_MatchFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_ItemFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ItemFlag a0;
         ::Qt::ItemFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_ItemFlag, &a0, sipType_Qt_ItemFlags, &a1, &a1State))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_ItemFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_ItemFlag[] = {
    {(void *)slot_Qt_ItemFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_DropAction___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropAction___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DropAction a0;
         ::Qt::DropActions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_DropAction, &a0, sipType_Qt_DropActions, &a1, &a1State))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_DropActions,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_DropAction[] = {
    {(void *)slot_Qt_DropAction___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_InputMethodQuery___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQuery___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQuery a0;
         ::Qt::InputMethodQueries* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_InputMethodQuery, &a0, sipType_Qt_InputMethodQueries, &a1, &a1State))
        {
             ::Qt::InputMethodQueries*sipRes;

            sipRes = new  ::Qt::InputMethodQueries((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_InputMethodQueries,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodQueries,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_InputMethodQuery[] = {
    {(void *)slot_Qt_InputMethodQuery___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_ToolBarArea___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarArea___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ToolBarArea a0;
         ::Qt::ToolBarAreas* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_ToolBarArea, &a0, sipType_Qt_ToolBarAreas, &a1, &a1State))
        {
             ::Qt::ToolBarAreas*sipRes;

            sipRes = new  ::Qt::ToolBarAreas((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_ToolBarAreas,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ToolBarAreas,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_ToolBarArea[] = {
    {(void *)slot_Qt_ToolBarArea___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_DockWidgetArea___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetArea___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DockWidgetArea a0;
         ::Qt::DockWidgetAreas* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_DockWidgetArea, &a0, sipType_Qt_DockWidgetAreas, &a1, &a1State))
        {
             ::Qt::DockWidgetAreas*sipRes;

            sipRes = new  ::Qt::DockWidgetAreas((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_DockWidgetAreas,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DockWidgetAreas,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_DockWidgetArea[] = {
    {(void *)slot_Qt_DockWidgetArea___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_ImageConversionFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ImageConversionFlag a0;
         ::Qt::ImageConversionFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_ImageConversionFlag, &a0, sipType_Qt_ImageConversionFlags, &a1, &a1State))
        {
             ::Qt::ImageConversionFlags*sipRes;

            sipRes = new  ::Qt::ImageConversionFlags((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ImageConversionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_ImageConversionFlag[] = {
    {(void *)slot_Qt_ImageConversionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_WindowState___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowState___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowState a0;
         ::Qt::WindowStates* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_WindowState, &a0, sipType_Qt_WindowStates, &a1, &a1State))
        {
             ::Qt::WindowStates*sipRes;

            sipRes = new  ::Qt::WindowStates((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_WindowStates,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_WindowState[] = {
    {(void *)slot_Qt_WindowState___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_WindowType___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowType___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowType a0;
         ::Qt::WindowFlags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_WindowType, &a0, sipType_Qt_WindowFlags, &a1, &a1State))
        {
             ::Qt::WindowFlags*sipRes;

            sipRes = new  ::Qt::WindowFlags((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_WindowType[] = {
    {(void *)slot_Qt_WindowType___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_AlignmentFlag___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_AlignmentFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::AlignmentFlag a0;
         ::Qt::Alignment* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_AlignmentFlag, &a0, sipType_Qt_Alignment, &a1, &a1State))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_Alignment,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_AlignmentFlag[] = {
    {(void *)slot_Qt_AlignmentFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_Orientation___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientation___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Orientation a0;
         ::Qt::Orientations* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_Orientation, &a0, sipType_Qt_Orientations, &a1, &a1State))
        {
             ::Qt::Orientations*sipRes;

            sipRes = new  ::Qt::Orientations((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_Orientations,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_Orientation[] = {
    {(void *)slot_Qt_Orientation___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_MouseButton___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButton___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseButton a0;
         ::Qt::MouseButtons* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_MouseButton, &a0, sipType_Qt_MouseButtons, &a1, &a1State))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_MouseButtons,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_MouseButton[] = {
    {(void *)slot_Qt_MouseButton___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_KeyboardModifier___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifier___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::KeyboardModifier a0;
         ::Qt::KeyboardModifiers* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_Qt_KeyboardModifier, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers((a0 | *a1));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_KeyboardModifier[] = {
    {(void *)slot_Qt_KeyboardModifier___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSysInfo__Endian, {0}, 0}, sipNameNr_Endian, 259, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSysInfo__Sizes, {0}, 0}, sipNameNr_Sizes, 259, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QXmlStreamReader__Error, {0}, 0}, sipNameNr_Error, 334, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QXmlStreamReader__ReadElementTextBehaviour, {0}, 0}, sipNameNr_ReadElementTextBehaviour, 334, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QXmlStreamReader__TokenType, {0}, 0}, sipNameNr_TokenType, 334, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QVariant__Type, {0}, 0}, sipNameNr_Type, 312, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUuid__StringFormat, {0}, 0}, sipNameNr_StringFormat, 308, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUuid__Version, {0}, 0}, sipNameNr_Version, 308, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUuid__Variant, {0}, 0}, sipNameNr_Variant, 308, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUrl__UserInputResolutionOption, {0}, 0}, sipNameNr_UserInputResolutionOption, 299, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUrl__ComponentFormattingOption, {0}, 0}, sipNameNr_ComponentFormattingOption, 299, slots_QUrl_ComponentFormattingOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUrl__UrlFormattingOption, {0}, 0}, sipNameNr_UrlFormattingOption, 299, slots_QUrl_UrlFormattingOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUrl__ParsingMode, {0}, 0}, sipNameNr_ParsingMode, 299, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTimeZone__NameType, {0}, 0}, sipNameNr_NameType, 292, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTimeZone__TimeType, {0}, 0}, sipNameNr_TimeType, 292, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTimeLine__State, {0}, 0}, sipNameNr_State, 288, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTimeLine__Direction, {0}, 0}, sipNameNr_Direction, 288, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTimeLine__CurveShape, {0}, 0}, sipNameNr_CurveShape, 288, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QThread__Priority, {0}, 0}, sipNameNr_Priority, 284, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextStream__Status, {0}, 0}, sipNameNr_Status, 277, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextStream__NumberFlag, {0}, 0}, sipNameNr_NumberFlag, 277, slots_QTextStream_NumberFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextStream__FieldAlignment, {0}, 0}, sipNameNr_FieldAlignment, 277, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextStream__RealNumberNotation, {0}, 0}, sipNameNr_RealNumberNotation, 277, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextCodec__ConversionFlag, {0}, 0}, sipNameNr_ConversionFlag, 271, slots_QTextCodec_ConversionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextBoundaryFinder__BoundaryType, {0}, 0}, sipNameNr_BoundaryType, 267, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextBoundaryFinder__BoundaryReason, {0}, 0}, sipNameNr_BoundaryReason, 267, slots_QTextBoundaryFinder_BoundaryReason},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSystemSemaphore__SystemSemaphoreError, {0}, 0}, sipNameNr_SystemSemaphoreError, 262, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSystemSemaphore__AccessMode, {0}, 0}, sipNameNr_AccessMode, 262, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QStateMachine__Error, {0}, 0}, sipNameNr_Error, 249, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QStateMachine__EventPriority, {0}, 0}, sipNameNr_EventPriority, 249, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QState__RestorePolicy, {0}, 0}, sipNameNr_RestorePolicy, 246, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QState__ChildMode, {0}, 0}, sipNameNr_ChildMode, 246, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QStandardPaths__LocateOption, {0}, 0}, sipNameNr_LocateOption, 242, slots_QStandardPaths_LocateOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QStandardPaths__StandardLocation, {0}, 0}, sipNameNr_StandardLocation, 242, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSocketNotifier__Type, {0}, 0}, sipNameNr_Type, 239, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSharedMemory__SharedMemoryError, {0}, 0}, sipNameNr_SharedMemoryError, 231, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSharedMemory__AccessMode, {0}, 0}, sipNameNr_AccessMode, 231, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSettings__Scope, {0}, 0}, sipNameNr_Scope, 227, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSettings__Format, {0}, 0}, sipNameNr_Format, 227, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSettings__Status, {0}, 0}, sipNameNr_Status, 227, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRegularExpression__MatchOption, {0}, 0}, sipNameNr_MatchOption, 212, slots_QRegularExpression_MatchOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRegularExpression__MatchType, {0}, 0}, sipNameNr_MatchType, 212, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRegularExpression__PatternOption, {0}, 0}, sipNameNr_PatternOption, 212, slots_QRegularExpression_PatternOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRegExp__CaretMode, {0}, 0}, sipNameNr_CaretMode, 209, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRegExp__PatternSyntax, {0}, 0}, sipNameNr_PatternSyntax, 209, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QReadWriteLock__RecursionMode, {0}, 0}, sipNameNr_RecursionMode, 205, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__InputChannelMode, {0}, 0}, sipNameNr_InputChannelMode, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ProcessChannelMode, {0}, 0}, sipNameNr_ProcessChannelMode, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ProcessChannel, {0}, 0}, sipNameNr_ProcessChannel, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ProcessState, {0}, 0}, sipNameNr_ProcessState, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ProcessError, {0}, 0}, sipNameNr_ProcessError, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ExitStatus, {0}, 0}, sipNameNr_ExitStatus, 194, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOperatingSystemVersion__OSType, {0}, 0}, sipNameNr_OSType, 185, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMutex__RecursionMode, {0}, 0}, sipNameNr_RecursionMode, 180, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMimeDatabase__MatchMode, {0}, 0}, sipNameNr_MatchMode, 176, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMetaType__TypeFlag, {0}, 0}, sipNameNr_TypeFlag, 171, slots_QMetaType_TypeFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMetaType__Type, {0}, 0}, sipNameNr_Type, 171, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMetaMethod__MethodType, {0}, 0}, sipNameNr_MethodType, 165, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMetaMethod__Access, {0}, 0}, sipNameNr_Access, 165, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QtMsgType, {0}, 0}, sipNameNr_QtMsgType, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLockFile__LockError, {0}, 0}, sipNameNr_LockError, 154, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__DataSizeFormat, {0}, 0}, sipNameNr_DataSizeFormat, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__FloatingPointPrecisionOption, {0}, 0}, sipNameNr_FloatingPointPrecisionOption, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__QuotationStyle, {0}, 0}, sipNameNr_QuotationStyle, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__CurrencySymbolFormat, {0}, 0}, sipNameNr_CurrencySymbolFormat, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__Script, {0}, 0}, sipNameNr_Script, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__MeasurementSystem, {0}, 0}, sipNameNr_MeasurementSystem, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__FormatType, {0}, 0}, sipNameNr_FormatType, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__NumberOption, {0}, 0}, sipNameNr_NumberOption, 141, slots_QLocale_NumberOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__Country, {0}, 0}, sipNameNr_Country, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__Language, {0}, 0}, sipNameNr_Language, 141, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLineF__IntersectType, {0}, 0}, sipNameNr_IntersectType, 119, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLibraryInfo__LibraryLocation, {0}, 0}, sipNameNr_LibraryLocation, 116, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLibrary__LoadHint, {0}, 0}, sipNameNr_LoadHint, 113, slots_QLibrary_LoadHint},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QJsonValue__Type, {0}, 0}, sipNameNr_Type, 111, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QJsonDocument__JsonFormat, {0}, 0}, sipNameNr_JsonFormat, 105, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QJsonDocument__DataValidation, {0}, 0}, sipNameNr_DataValidation, 105, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QJsonParseError__ParseError, {0}, 0}, sipNameNr_ParseError, 109, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QItemSelectionModel__SelectionFlag, {0}, 0}, sipNameNr_SelectionFlag, 100, slots_QItemSelectionModel_SelectionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QIODevice__OpenModeFlag, {0}, 0}, sipNameNr_OpenModeFlag, 95, slots_QIODevice_OpenModeFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QHistoryState__HistoryType, {0}, 0}, sipNameNr_HistoryType, 93, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFileDevice__FileTime, {0}, 0}, sipNameNr_FileTime, 77, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFileDevice__MemoryMapFlags, {0}, 0}, sipNameNr_MemoryMapFlags, 77, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFileDevice__FileHandleFlag, {0}, 0}, sipNameNr_FileHandleFlag, 77, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFileDevice__Permission, {0}, 0}, sipNameNr_Permission, 77, slots_QFileDevice_Permission},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFileDevice__FileError, {0}, 0}, sipNameNr_FileError, 77, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QEventLoop__ProcessEventsFlag, {0}, 0}, sipNameNr_ProcessEventsFlag, 71, slots_QEventLoop_ProcessEventsFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QElapsedTimer__ClockType, {0}, 0}, sipNameNr_ClockType, 67, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QEasingCurve__Type, {0}, 0}, sipNameNr_Type, 65, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDirIterator__IteratorFlag, {0}, 0}, sipNameNr_IteratorFlag, 61, slots_QDirIterator_IteratorFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDir__SortFlag, {0}, 0}, sipNameNr_SortFlag, 56, slots_QDir_SortFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDir__Filter, {0}, 0}, sipNameNr_Filter, 56, slots_QDir_Filter},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDeadlineTimer__ForeverConstant, {0}, 0}, sipNameNr_ForeverConstant, 54, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDate__MonthNameType, {0}, 0}, sipNameNr_MonthNameType, 51, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDataStream__FloatingPointPrecision, {0}, 0}, sipNameNr_FloatingPointPrecision, 46, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDataStream__Status, {0}, 0}, sipNameNr_Status, 46, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDataStream__ByteOrder, {0}, 0}, sipNameNr_ByteOrder, 46, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDataStream__Version, {0}, 0}, sipNameNr_Version, 46, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCryptographicHash__Algorithm, {0}, 0}, sipNameNr_Algorithm, 44, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QEvent__Type, {0}, 0}, sipNameNr_Type, 69, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCommandLineParser__OptionsAfterPositionalArgumentsMode, {0}, 0}, sipNameNr_OptionsAfterPositionalArgumentsMode, 40, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCommandLineParser__SingleDashWordOptionMode, {0}, 0}, sipNameNr_SingleDashWordOptionMode, 40, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCommandLineOption__Flag, {0}, 0}, sipNameNr_Flag, 37, slots_QCommandLineOption_Flag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCborStreamReader__StringResultCode, {0}, 0}, sipNameNr_StringResultCode, 29, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCborStreamReader__Type, {0}, 0}, sipNameNr_Type, 29, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_SCOPED_ENUM, sipNameNr_QCborKnownTags, {0}, 0}, sipNameNr_QCborKnownTags, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCborError__Code, {0}, 0}, sipNameNr_Code, 25, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_SCOPED_ENUM, sipNameNr_QCborSimpleType, {0}, 0}, sipNameNr_QCborSimpleType, -1, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QByteArray__Base64Option, {0}, 0}, sipNameNr_Base64Option, 21, slots_QByteArray_Base64Option},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractTransition__TransitionType, {0}, 0}, sipNameNr_TransitionType, 15, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_SCOPED_ENUM, sipNameNr_QAbstractItemModel__CheckIndexOption, {0}, 0}, sipNameNr_CheckIndexOption, 6, slots_QAbstractItemModel_CheckIndexOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractItemModel__LayoutChangeHint, {0}, 0}, sipNameNr_LayoutChangeHint, 6, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractAnimation__DeletionPolicy, {0}, 0}, sipNameNr_DeletionPolicy, 0, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractAnimation__State, {0}, 0}, sipNameNr_State, 0, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractAnimation__Direction, {0}, 0}, sipNameNr_Direction, 0, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ChecksumType, {0}, 0}, sipNameNr_ChecksumType, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__EnterKeyType, {0}, 0}, sipNameNr_EnterKeyType, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ItemSelectionOperation, {0}, 0}, sipNameNr_ItemSelectionOperation, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TabFocusBehavior, {0}, 0}, sipNameNr_TabFocusBehavior, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__MouseEventFlag, {0}, 0}, sipNameNr_MouseEventFlag, 339, slots_Qt_MouseEventFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__MouseEventSource, {0}, 0}, sipNameNr_MouseEventSource, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ScrollPhase, {0}, 0}, sipNameNr_ScrollPhase, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__NativeGestureType, {0}, 0}, sipNameNr_NativeGestureType, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Edge, {0}, 0}, sipNameNr_Edge, 339, slots_Qt_Edge},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ApplicationState, {0}, 0}, sipNameNr_ApplicationState, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__HitTestAccuracy, {0}, 0}, sipNameNr_HitTestAccuracy, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WhiteSpaceMode, {0}, 0}, sipNameNr_WhiteSpaceMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__FindChildOption, {0}, 0}, sipNameNr_FindChildOption, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ScreenOrientation, {0}, 0}, sipNameNr_ScreenOrientation, 339, slots_Qt_ScreenOrientation},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__CursorMoveStyle, {0}, 0}, sipNameNr_CursorMoveStyle, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__NavigationMode, {0}, 0}, sipNameNr_NavigationMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__GestureFlag, {0}, 0}, sipNameNr_GestureFlag, 339, slots_Qt_GestureFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__GestureType, {0}, 0}, sipNameNr_GestureType, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__GestureState, {0}, 0}, sipNameNr_GestureState, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TouchPointState, {0}, 0}, sipNameNr_TouchPointState, 339, slots_Qt_TouchPointState},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__CoordinateSystem, {0}, 0}, sipNameNr_CoordinateSystem, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__AnchorPoint, {0}, 0}, sipNameNr_AnchorPoint, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__InputMethodHint, {0}, 0}, sipNameNr_InputMethodHint, 339, slots_Qt_InputMethodHint},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TileRule, {0}, 0}, sipNameNr_TileRule, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WindowFrameSection, {0}, 0}, sipNameNr_WindowFrameSection, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__SizeHint, {0}, 0}, sipNameNr_SizeHint, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__SizeMode, {0}, 0}, sipNameNr_SizeMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__EventPriority, {0}, 0}, sipNameNr_EventPriority, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Axis, {0}, 0}, sipNameNr_Axis, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__MaskMode, {0}, 0}, sipNameNr_MaskMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TextInteractionFlag, {0}, 0}, sipNameNr_TextInteractionFlag, 339, slots_Qt_TextInteractionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ItemSelectionMode, {0}, 0}, sipNameNr_ItemSelectionMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ApplicationAttribute, {0}, 0}, sipNameNr_ApplicationAttribute, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WindowModality, {0}, 0}, sipNameNr_WindowModality, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__MatchFlag, {0}, 0}, sipNameNr_MatchFlag, 339, slots_Qt_MatchFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ItemFlag, {0}, 0}, sipNameNr_ItemFlag, 339, slots_Qt_ItemFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ItemDataRole, {0}, 0}, sipNameNr_ItemDataRole, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__CheckState, {0}, 0}, sipNameNr_CheckState, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__DropAction, {0}, 0}, sipNameNr_DropAction, 339, slots_Qt_DropAction},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__LayoutDirection, {0}, 0}, sipNameNr_LayoutDirection, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ToolButtonStyle, {0}, 0}, sipNameNr_ToolButtonStyle, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__InputMethodQuery, {0}, 0}, sipNameNr_InputMethodQuery, 339, slots_Qt_InputMethodQuery},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ContextMenuPolicy, {0}, 0}, sipNameNr_ContextMenuPolicy, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__FocusReason, {0}, 0}, sipNameNr_FocusReason, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TransformationMode, {0}, 0}, sipNameNr_TransformationMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ClipOperation, {0}, 0}, sipNameNr_ClipOperation, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__FillRule, {0}, 0}, sipNameNr_FillRule, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ShortcutContext, {0}, 0}, sipNameNr_ShortcutContext, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ConnectionType, {0}, 0}, sipNameNr_ConnectionType, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Corner, {0}, 0}, sipNameNr_Corner, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__CaseSensitivity, {0}, 0}, sipNameNr_CaseSensitivity, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ScrollBarPolicy, {0}, 0}, sipNameNr_ScrollBarPolicy, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__DayOfWeek, {0}, 0}, sipNameNr_DayOfWeek, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TimeSpec, {0}, 0}, sipNameNr_TimeSpec, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__DateFormat, {0}, 0}, sipNameNr_DateFormat, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ToolBarArea, {0}, 0}, sipNameNr_ToolBarArea, 339, slots_Qt_ToolBarArea},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TimerType, {0}, 0}, sipNameNr_TimerType, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__DockWidgetArea, {0}, 0}, sipNameNr_DockWidgetArea, 339, slots_Qt_DockWidgetArea},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__AspectRatioMode, {0}, 0}, sipNameNr_AspectRatioMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TextFormat, {0}, 0}, sipNameNr_TextFormat, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__CursorShape, {0}, 0}, sipNameNr_CursorShape, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__UIEffect, {0}, 0}, sipNameNr_UIEffect, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__BrushStyle, {0}, 0}, sipNameNr_BrushStyle, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__PenJoinStyle, {0}, 0}, sipNameNr_PenJoinStyle, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__PenCapStyle, {0}, 0}, sipNameNr_PenCapStyle, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__PenStyle, {0}, 0}, sipNameNr_PenStyle, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ArrowType, {0}, 0}, sipNameNr_ArrowType, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Key, {0}, 0}, sipNameNr_Key, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__BGMode, {0}, 0}, sipNameNr_BGMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ImageConversionFlag, {0}, 0}, sipNameNr_ImageConversionFlag, 339, slots_Qt_ImageConversionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WidgetAttribute, {0}, 0}, sipNameNr_WidgetAttribute, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WindowState, {0}, 0}, sipNameNr_WindowState, 339, slots_Qt_WindowState},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WindowType, {0}, 0}, sipNameNr_WindowType, 339, slots_Qt_WindowType},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TextElideMode, {0}, 0}, sipNameNr_TextElideMode, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TextFlag, {0}, 0}, sipNameNr_TextFlag, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__AlignmentFlag, {0}, 0}, sipNameNr_AlignmentFlag, 339, slots_Qt_AlignmentFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__SortOrder, {0}, 0}, sipNameNr_SortOrder, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__FocusPolicy, {0}, 0}, sipNameNr_FocusPolicy, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Orientation, {0}, 0}, sipNameNr_Orientation, 339, slots_Qt_Orientation},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__MouseButton, {0}, 0}, sipNameNr_MouseButton, 339, slots_Qt_MouseButton},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Modifier, {0}, 0}, sipNameNr_Modifier, 339, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__KeyboardModifier, {0}, 0}, sipNameNr_KeyboardModifier, 339, slots_Qt_KeyboardModifier},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__GlobalColor, {0}, 0}, sipNameNr_GlobalColor, 339, SIP_NULLPTR},
};

/* These are the enum members of all global enums. */
static sipEnumMemberDef enummembers[] = {
    {sipName_Base64, static_cast<int>(::QCborKnownTags::Base64), 27},
    {sipName_Base64url, static_cast<int>(::QCborKnownTags::Base64url), 27},
    {sipName_Bigfloat, static_cast<int>(::QCborKnownTags::Bigfloat), 27},
    {sipName_COSE_Encrypt, static_cast<int>(::QCborKnownTags::COSE_Encrypt), 27},
    {sipName_COSE_Encrypt0, static_cast<int>(::QCborKnownTags::COSE_Encrypt0), 27},
    {sipName_COSE_Mac, static_cast<int>(::QCborKnownTags::COSE_Mac), 27},
    {sipName_COSE_Mac0, static_cast<int>(::QCborKnownTags::COSE_Mac0), 27},
    {sipName_COSE_Sign, static_cast<int>(::QCborKnownTags::COSE_Sign), 27},
    {sipName_COSE_Sign1, static_cast<int>(::QCborKnownTags::COSE_Sign1), 27},
    {sipName_DateTimeString, static_cast<int>(::QCborKnownTags::DateTimeString), 27},
    {sipName_Decimal, static_cast<int>(::QCborKnownTags::Decimal), 27},
    {sipName_EncodedCbor, static_cast<int>(::QCborKnownTags::EncodedCbor), 27},
    {sipName_ExpectedBase16, static_cast<int>(::QCborKnownTags::ExpectedBase16), 27},
    {sipName_ExpectedBase64, static_cast<int>(::QCborKnownTags::ExpectedBase64), 27},
    {sipName_ExpectedBase64url, static_cast<int>(::QCborKnownTags::ExpectedBase64url), 27},
    {sipName_False, static_cast<int>(::QCborSimpleType::False), 28},
    {sipName_MimeMessage, static_cast<int>(::QCborKnownTags::MimeMessage), 27},
    {sipName_NegativeBignum, static_cast<int>(::QCborKnownTags::NegativeBignum), 27},
    {sipName_Null, static_cast<int>(::QCborSimpleType::Null), 28},
    {sipName_PositiveBignum, static_cast<int>(::QCborKnownTags::PositiveBignum), 27},
    {sipName_QtCriticalMsg, static_cast<int>(::QtCriticalMsg), 445},
    {sipName_QtDebugMsg, static_cast<int>(::QtDebugMsg), 445},
    {sipName_QtFatalMsg, static_cast<int>(::QtFatalMsg), 445},
    {sipName_QtInfoMsg, static_cast<int>(::QtInfoMsg), 445},
    {sipName_QtSystemMsg, static_cast<int>(::QtSystemMsg), 445},
    {sipName_QtWarningMsg, static_cast<int>(::QtWarningMsg), 445},
    {sipName_RegularExpression, static_cast<int>(::QCborKnownTags::RegularExpression), 27},
    {sipName_Signature, static_cast<int>(::QCborKnownTags::Signature), 27},
    {sipName_True, static_cast<int>(::QCborSimpleType::True), 28},
    {sipName_Undefined, static_cast<int>(::QCborSimpleType::Undefined), 28},
    {sipName_UnixTime_t, static_cast<int>(::QCborKnownTags::UnixTime_t), 27},
    {sipName_Url, static_cast<int>(::QCborKnownTags::Url), 27},
    {sipName_Uuid, static_cast<int>(::QCborKnownTags::Uuid), 27},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_QtCore[] = {
    &sipTypeDef_QtCore_QAbstractAnimation.ctd_base,
    &enumTypes[112].etd_base,
    &enumTypes[114].etd_base,
    &enumTypes[113].etd_base,
    &sipTypeDef_QtCore_QAbstractEventDispatcher.ctd_base,
    &sipTypeDef_QtCore_QAbstractEventDispatcher_TimerInfo.ctd_base,
    &sipTypeDef_QtCore_QAbstractItemModel.ctd_base,
    &enumTypes[110].etd_base,
    &sipTypeDef_QtCore_QAbstractItemModel_CheckIndexOptions.ctd_base,
    &enumTypes[111].etd_base,
    &sipTypeDef_QtCore_QAbstractListModel.ctd_base,
    &sipTypeDef_QtCore_QAbstractNativeEventFilter.ctd_base,
    &sipTypeDef_QtCore_QAbstractProxyModel.ctd_base,
    &sipTypeDef_QtCore_QAbstractState.ctd_base,
    &sipTypeDef_QtCore_QAbstractTableModel.ctd_base,
    &sipTypeDef_QtCore_QAbstractTransition.ctd_base,
    &enumTypes[109].etd_base,
    &sipTypeDef_QtCore_QAnimationGroup.ctd_base,
    &sipTypeDef_QtCore_QBasicTimer.ctd_base,
    &sipTypeDef_QtCore_QBitArray.ctd_base,
    &sipTypeDef_QtCore_QBuffer.ctd_base,
    &sipTypeDef_QtCore_QByteArray.ctd_base,
    &enumTypes[108].etd_base,
    &sipTypeDef_QtCore_QByteArray_Base64Options.ctd_base,
    &sipTypeDef_QtCore_QByteArrayMatcher.ctd_base,
    &sipTypeDef_QtCore_QCborError.ctd_base,
    &enumTypes[106].etd_base,
    &enumTypes[105].etd_base,
    &enumTypes[107].etd_base,
    &sipTypeDef_QtCore_QCborStreamReader.ctd_base,
    &enumTypes[103].etd_base,
    &enumTypes[104].etd_base,
    &sipTypeDef_QtCore_QCborStreamWriter.ctd_base,
    &sipTypeDef_QtCore_QChar.mtd_base,
    &sipTypeDef_QtCore_QChildEvent.ctd_base,
    &sipTypeDef_QtCore_QCollator.ctd_base,
    &sipTypeDef_QtCore_QCollatorSortKey.ctd_base,
    &sipTypeDef_QtCore_QCommandLineOption.ctd_base,
    &enumTypes[102].etd_base,
    &sipTypeDef_QtCore_QCommandLineOption_Flags.ctd_base,
    &sipTypeDef_QtCore_QCommandLineParser.ctd_base,
    &enumTypes[100].etd_base,
    &enumTypes[101].etd_base,
    &sipTypeDef_QtCore_QCoreApplication.ctd_base,
    &sipTypeDef_QtCore_QCryptographicHash.ctd_base,
    &enumTypes[98].etd_base,
    &sipTypeDef_QtCore_QDataStream.ctd_base,
    &enumTypes[96].etd_base,
    &enumTypes[94].etd_base,
    &enumTypes[95].etd_base,
    &enumTypes[97].etd_base,
    &sipTypeDef_QtCore_QDate.ctd_base,
    &enumTypes[93].etd_base,
    &sipTypeDef_QtCore_QDateTime.ctd_base,
    &sipTypeDef_QtCore_QDeadlineTimer.ctd_base,
    &enumTypes[92].etd_base,
    &sipTypeDef_QtCore_QDir.ctd_base,
    &enumTypes[91].etd_base,
    &sipTypeDef_QtCore_QDir_Filters.ctd_base,
    &enumTypes[90].etd_base,
    &sipTypeDef_QtCore_QDir_SortFlags.ctd_base,
    &sipTypeDef_QtCore_QDirIterator.ctd_base,
    &enumTypes[89].etd_base,
    &sipTypeDef_QtCore_QDirIterator_IteratorFlags.ctd_base,
    &sipTypeDef_QtCore_QDynamicPropertyChangeEvent.ctd_base,
    &sipTypeDef_QtCore_QEasingCurve.ctd_base,
    &enumTypes[88].etd_base,
    &sipTypeDef_QtCore_QElapsedTimer.ctd_base,
    &enumTypes[87].etd_base,
    &sipTypeDef_QtCore_QEvent.ctd_base,
    &enumTypes[99].etd_base,
    &sipTypeDef_QtCore_QEventLoop.ctd_base,
    &enumTypes[86].etd_base,
    &sipTypeDef_QtCore_QEventLoop_ProcessEventsFlags.ctd_base,
    &sipTypeDef_QtCore_QEventLoopLocker.ctd_base,
    &sipTypeDef_QtCore_QEventTransition.ctd_base,
    &sipTypeDef_QtCore_QFile.ctd_base,
    &sipTypeDef_QtCore_QFileDevice.ctd_base,
    &enumTypes[85].etd_base,
    &enumTypes[83].etd_base,
    &sipTypeDef_QtCore_QFileDevice_FileHandleFlags.ctd_base,
    &enumTypes[81].etd_base,
    &enumTypes[82].etd_base,
    &enumTypes[84].etd_base,
    &sipTypeDef_QtCore_QFileDevice_Permissions.ctd_base,
    &sipTypeDef_QtCore_QFileInfo.ctd_base,
    &sipTypeDef_QtCore_QFileSelector.ctd_base,
    &sipTypeDef_QtCore_QFileSystemWatcher.ctd_base,
    &sipTypeDef_QtCore_QFinalState.ctd_base,
    &sipTypeDef_QtCore_QGenericArgument.ctd_base,
    &sipTypeDef_QtCore_QGenericReturnArgument.ctd_base,
    &sipTypeDef_QtCore_QHash_0100QString_0100QVariant.mtd_base,
    &sipTypeDef_QtCore_QHash_1800_0100QByteArray.mtd_base,
    &sipTypeDef_QtCore_QHistoryState.ctd_base,
    &enumTypes[80].etd_base,
    &sipTypeDef_QtCore_QIODevice.ctd_base,
    &sipTypeDef_QtCore_QIODevice_OpenMode.ctd_base,
    &enumTypes[79].etd_base,
    &sipTypeDef_QtCore_QIdentityProxyModel.ctd_base,
    &sipTypeDef_QtCore_QItemSelection.ctd_base,
    &sipTypeDef_QtCore_QItemSelectionModel.ctd_base,
    &enumTypes[78].etd_base,
    &sipTypeDef_QtCore_QItemSelectionModel_SelectionFlags.ctd_base,
    &sipTypeDef_QtCore_QItemSelectionRange.ctd_base,
    &sipTypeDef_QtCore_QJsonArray.mtd_base,
    &sipTypeDef_QtCore_QJsonDocument.ctd_base,
    &enumTypes[76].etd_base,
    &enumTypes[75].etd_base,
    &sipTypeDef_QtCore_QJsonObject.mtd_base,
    &sipTypeDef_QtCore_QJsonParseError.ctd_base,
    &enumTypes[77].etd_base,
    &sipTypeDef_QtCore_QJsonValue.ctd_base,
    &enumTypes[74].etd_base,
    &sipTypeDef_QtCore_QLibrary.ctd_base,
    &enumTypes[73].etd_base,
    &sipTypeDef_QtCore_QLibrary_LoadHints.ctd_base,
    &sipTypeDef_QtCore_QLibraryInfo.ctd_base,
    &enumTypes[72].etd_base,
    &sipTypeDef_QtCore_QLine.ctd_base,
    &sipTypeDef_QtCore_QLineF.ctd_base,
    &enumTypes[71].etd_base,
    &sipTypeDef_QtCore_QList_0101QAbstractAnimation.mtd_base,
    &sipTypeDef_QtCore_QList_0100QAbstractEventDispatcher_TimerInfo.mtd_base,
    &sipTypeDef_QtCore_QList_0101QAbstractState.mtd_base,
    &sipTypeDef_QtCore_QList_0101QAbstractTransition.mtd_base,
    &sipTypeDef_QtCore_QList_0100QByteArray.mtd_base,
    &sipTypeDef_QtCore_QList_0100QCommandLineOption.mtd_base,
    &sipTypeDef_QtCore_QList_0100QFileInfo.mtd_base,
    &sipTypeDef_QtCore_QList_0100QLocale.mtd_base,
    &sipTypeDef_QtCore_QList_0100QMimeType.mtd_base,
    &sipTypeDef_QtCore_QList_0100QModelIndex.mtd_base,
    &sipTypeDef_QtCore_QList_0101QObject.mtd_base,
    &sipTypeDef_QtCore_QList_0600QPair_0100QString_0100QString.mtd_base,
    &sipTypeDef_QtCore_QList_0600QPair_1800_1800.mtd_base,
    &sipTypeDef_QtCore_QList_0100QPersistentModelIndex.mtd_base,
    &sipTypeDef_QtCore_QList_0100QStorageInfo.mtd_base,
    &sipTypeDef_QtCore_QList_0100QUrl.mtd_base,
    &sipTypeDef_QtCore_QList_0100QVariant.mtd_base,
    &sipTypeDef_QtCore_QList_0100Qt_DayOfWeek.mtd_base,
    &sipTypeDef_QtCore_QList_1800.mtd_base,
    &sipTypeDef_QtCore_QList_2400.mtd_base,
    &sipTypeDef_QtCore_QLocale.ctd_base,
    &enumTypes[69].etd_base,
    &enumTypes[64].etd_base,
    &enumTypes[61].etd_base,
    &sipTypeDef_QtCore_QLocale_DataSizeFormats.ctd_base,
    &enumTypes[62].etd_base,
    &enumTypes[67].etd_base,
    &enumTypes[70].etd_base,
    &enumTypes[66].etd_base,
    &enumTypes[68].etd_base,
    &sipTypeDef_QtCore_QLocale_NumberOptions.ctd_base,
    &enumTypes[63].etd_base,
    &enumTypes[65].etd_base,
    &sipTypeDef_QtCore_QLockFile.ctd_base,
    &enumTypes[60].etd_base,
    &sipTypeDef_QtCore_QLoggingCategory.ctd_base,
    &sipTypeDef_QtCore_QMap_1800_0100QVariant.mtd_base,
    &sipTypeDef_QtCore_QMargins.ctd_base,
    &sipTypeDef_QtCore_QMarginsF.ctd_base,
    &sipTypeDef_QtCore_QMessageAuthenticationCode.ctd_base,
    &sipTypeDef_QtCore_QMessageLogContext.ctd_base,
    &sipTypeDef_QtCore_QMessageLogger.ctd_base,
    &sipTypeDef_QtCore_QMetaClassInfo.ctd_base,
    &sipTypeDef_QtCore_QMetaEnum.ctd_base,
    &sipTypeDef_QtCore_QMetaMethod.ctd_base,
    &enumTypes[58].etd_base,
    &enumTypes[57].etd_base,
    &sipTypeDef_QtCore_QMetaObject.ctd_base,
    &sipTypeDef_QtCore_QMetaObject_Connection.ctd_base,
    &sipTypeDef_QtCore_QMetaProperty.ctd_base,
    &sipTypeDef_QtCore_QMetaType.ctd_base,
    &enumTypes[56].etd_base,
    &enumTypes[55].etd_base,
    &sipTypeDef_QtCore_QMetaType_TypeFlags.ctd_base,
    &sipTypeDef_QtCore_QMimeData.ctd_base,
    &sipTypeDef_QtCore_QMimeDatabase.ctd_base,
    &enumTypes[54].etd_base,
    &sipTypeDef_QtCore_QMimeType.ctd_base,
    &sipTypeDef_QtCore_QModelIndex.ctd_base,
    &sipTypeDef_QtCore_QMutex.ctd_base,
    &enumTypes[53].etd_base,
    &sipTypeDef_QtCore_QMutexLocker.ctd_base,
    &sipTypeDef_QtCore_QObject.ctd_base,
    &sipTypeDef_QtCore_QObjectCleanupHandler.ctd_base,
    &sipTypeDef_QtCore_QOperatingSystemVersion.ctd_base,
    &enumTypes[52].etd_base,
    &sipTypeDef_QtCore_QPair_1800_1800.mtd_base,
    &sipTypeDef_QtCore_QParallelAnimationGroup.ctd_base,
    &sipTypeDef_QtCore_QPauseAnimation.ctd_base,
    &sipTypeDef_QtCore_QPersistentModelIndex.ctd_base,
    &sipTypeDef_QtCore_QPluginLoader.ctd_base,
    &sipTypeDef_QtCore_QPoint.ctd_base,
    &sipTypeDef_QtCore_QPointF.ctd_base,
    &sipTypeDef_QtCore_QProcess.ctd_base,
    &enumTypes[51].etd_base,
    &enumTypes[46].etd_base,
    &enumTypes[48].etd_base,
    &enumTypes[47].etd_base,
    &enumTypes[50].etd_base,
    &enumTypes[49].etd_base,
    &sipTypeDef_QtCore_QProcessEnvironment.ctd_base,
    &sipTypeDef_QtCore_QPropertyAnimation.ctd_base,
    &sipTypeDef_QtCore_QRandomGenerator.ctd_base,
    &sipTypeDef_QtCore_QReadLocker.ctd_base,
    &sipTypeDef_QtCore_QReadWriteLock.ctd_base,
    &enumTypes[45].etd_base,
    &sipTypeDef_QtCore_QRect.ctd_base,
    &sipTypeDef_QtCore_QRectF.ctd_base,
    &sipTypeDef_QtCore_QRegExp.ctd_base,
    &enumTypes[43].etd_base,
    &enumTypes[44].etd_base,
    &sipTypeDef_QtCore_QRegularExpression.ctd_base,
    &enumTypes[40].etd_base,
    &sipTypeDef_QtCore_QRegularExpression_MatchOptions.ctd_base,
    &enumTypes[41].etd_base,
    &enumTypes[42].etd_base,
    &sipTypeDef_QtCore_QRegularExpression_PatternOptions.ctd_base,
    &sipTypeDef_QtCore_QRegularExpressionMatch.ctd_base,
    &sipTypeDef_QtCore_QRegularExpressionMatchIterator.ctd_base,
    &sipTypeDef_QtCore_QResource.ctd_base,
    &sipTypeDef_QtCore_QRunnable.ctd_base,
    &sipTypeDef_QtCore_QSaveFile.ctd_base,
    &sipTypeDef_QtCore_QSemaphore.ctd_base,
    &sipTypeDef_QtCore_QSemaphoreReleaser.ctd_base,
    &sipTypeDef_QtCore_QSequentialAnimationGroup.ctd_base,
    &sipTypeDef_QtCore_QSet_0101QAbstractState.mtd_base,
    &sipTypeDef_QtCore_QSettings.ctd_base,
    &enumTypes[38].etd_base,
    &enumTypes[37].etd_base,
    &enumTypes[39].etd_base,
    &sipTypeDef_QtCore_QSharedMemory.ctd_base,
    &enumTypes[36].etd_base,
    &enumTypes[35].etd_base,
    &sipTypeDef_QtCore_QSignalBlocker.ctd_base,
    &sipTypeDef_QtCore_QSignalMapper.ctd_base,
    &sipTypeDef_QtCore_QSignalTransition.ctd_base,
    &sipTypeDef_QtCore_QSize.ctd_base,
    &sipTypeDef_QtCore_QSizeF.ctd_base,
    &sipTypeDef_QtCore_QSocketNotifier.ctd_base,
    &enumTypes[34].etd_base,
    &sipTypeDef_QtCore_QSortFilterProxyModel.ctd_base,
    &sipTypeDef_QtCore_QStandardPaths.ctd_base,
    &enumTypes[32].etd_base,
    &sipTypeDef_QtCore_QStandardPaths_LocateOptions.ctd_base,
    &enumTypes[33].etd_base,
    &sipTypeDef_QtCore_QState.ctd_base,
    &enumTypes[31].etd_base,
    &enumTypes[30].etd_base,
    &sipTypeDef_QtCore_QStateMachine.ctd_base,
    &enumTypes[28].etd_base,
    &enumTypes[29].etd_base,
    &sipTypeDef_QtCore_QStateMachine_SignalEvent.ctd_base,
    &sipTypeDef_QtCore_QStateMachine_WrappedEvent.ctd_base,
    &sipTypeDef_QtCore_QStorageInfo.ctd_base,
    &sipTypeDef_QtCore_QString.mtd_base,
    &sipTypeDef_QtCore_QStringList.mtd_base,
    &sipTypeDef_QtCore_QStringListModel.ctd_base,
    &sipTypeDef_QtCore_QStringRef.mtd_base,
    &sipTypeDef_QtCore_QSysInfo.ctd_base,
    &enumTypes[0].etd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef_QtCore_QSystemSemaphore.ctd_base,
    &enumTypes[27].etd_base,
    &enumTypes[26].etd_base,
    &sipTypeDef_QtCore_QTemporaryDir.ctd_base,
    &sipTypeDef_QtCore_QTemporaryFile.ctd_base,
    &sipTypeDef_QtCore_QTextBoundaryFinder.ctd_base,
    &enumTypes[25].etd_base,
    &sipTypeDef_QtCore_QTextBoundaryFinder_BoundaryReasons.ctd_base,
    &enumTypes[24].etd_base,
    &sipTypeDef_QtCore_QTextCodec.ctd_base,
    &enumTypes[23].etd_base,
    &sipTypeDef_QtCore_QTextCodec_ConversionFlags.ctd_base,
    &sipTypeDef_QtCore_QTextCodec_ConverterState.ctd_base,
    &sipTypeDef_QtCore_QTextDecoder.ctd_base,
    &sipTypeDef_QtCore_QTextEncoder.ctd_base,
    &sipTypeDef_QtCore_QTextStream.ctd_base,
    &enumTypes[21].etd_base,
    &enumTypes[20].etd_base,
    &sipTypeDef_QtCore_QTextStream_NumberFlags.ctd_base,
    &enumTypes[22].etd_base,
    &enumTypes[19].etd_base,
    &sipTypeDef_QtCore_QTextStreamManipulator.ctd_base,
    &sipTypeDef_QtCore_QThread.ctd_base,
    &enumTypes[18].etd_base,
    &sipTypeDef_QtCore_QThreadPool.ctd_base,
    &sipTypeDef_QtCore_QTime.ctd_base,
    &sipTypeDef_QtCore_QTimeLine.ctd_base,
    &enumTypes[17].etd_base,
    &enumTypes[16].etd_base,
    &enumTypes[15].etd_base,
    &sipTypeDef_QtCore_QTimeZone.ctd_base,
    &enumTypes[13].etd_base,
    &sipTypeDef_QtCore_QTimeZone_OffsetData.ctd_base,
    &enumTypes[14].etd_base,
    &sipTypeDef_QtCore_QTimer.ctd_base,
    &sipTypeDef_QtCore_QTimerEvent.ctd_base,
    &sipTypeDef_QtCore_QTranslator.ctd_base,
    &sipTypeDef_QtCore_QUrl.ctd_base,
    &enumTypes[10].etd_base,
    &sipTypeDef_QtCore_QUrl_ComponentFormattingOptions.ctd_base,
    &sipTypeDef_QtCore_QUrl_FormattingOptions.ctd_base,
    &enumTypes[12].etd_base,
    &enumTypes[11].etd_base,
    &enumTypes[9].etd_base,
    &sipTypeDef_QtCore_QUrl_UserInputResolutionOptions.ctd_base,
    &sipTypeDef_QtCore_QUrlQuery.ctd_base,
    &sipTypeDef_QtCore_QUuid.ctd_base,
    &enumTypes[6].etd_base,
    &enumTypes[8].etd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_QtCore_QVariant.ctd_base,
    &enumTypes[5].etd_base,
    &sipTypeDef_QtCore_QVariantAnimation.ctd_base,
    &sipTypeDef_QtCore_QVariantMap.mtd_base,
    &sipTypeDef_QtCore_QVector_0600QPair_2400_0100QVariant.mtd_base,
    &sipTypeDef_QtCore_QVector_0100QPointF.mtd_base,
    &sipTypeDef_QtCore_QVector_0100QTimeZone_OffsetData.mtd_base,
    &sipTypeDef_QtCore_QVector_0100QXmlStreamEntityDeclaration.mtd_base,
    &sipTypeDef_QtCore_QVector_0100QXmlStreamNamespaceDeclaration.mtd_base,
    &sipTypeDef_QtCore_QVector_0100QXmlStreamNotationDeclaration.mtd_base,
    &sipTypeDef_QtCore_QVector_1800.mtd_base,
    &sipTypeDef_QtCore_QVector_1600.mtd_base,
    &sipTypeDef_QtCore_QVersionNumber.ctd_base,
    &sipTypeDef_QtCore_QWaitCondition.ctd_base,
    0,
    &sipTypeDef_QtCore_QWriteLocker.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamAttribute.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamAttributes.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamEntityDeclaration.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamEntityResolver.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamNamespaceDeclaration.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamNotationDeclaration.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamReader.ctd_base,
    &enumTypes[2].etd_base,
    &enumTypes[3].etd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_QtCore_QXmlStreamWriter.ctd_base,
    &sipTypeDef_QtCore_Qt.ctd_base,
    &sipTypeDef_QtCore_Qt_Alignment.ctd_base,
    &enumTypes[190].etd_base,
    &enumTypes[136].etd_base,
    &enumTypes[147].etd_base,
    &enumTypes[124].etd_base,
    &sipTypeDef_QtCore_Qt_ApplicationStates.ctd_base,
    &enumTypes[181].etd_base,
    &enumTypes[173].etd_base,
    &enumTypes[143].etd_base,
    &enumTypes[183].etd_base,
    &enumTypes[177].etd_base,
    &enumTypes[165].etd_base,
    &enumTypes[152].etd_base,
    &enumTypes[115].etd_base,
    &enumTypes[160].etd_base,
    &enumTypes[163].etd_base,
    &enumTypes[157].etd_base,
    &enumTypes[135].etd_base,
    &enumTypes[164].etd_base,
    &enumTypes[129].etd_base,
    &enumTypes[175].etd_base,
    &enumTypes[169].etd_base,
    &enumTypes[167].etd_base,
    &enumTypes[172].etd_base,
    &sipTypeDef_QtCore_Qt_DockWidgetAreas.ctd_base,
    &enumTypes[153].etd_base,
    &sipTypeDef_QtCore_Qt_DropActions.ctd_base,
    &enumTypes[123].etd_base,
    &sipTypeDef_QtCore_Qt_Edges.ctd_base,
    &enumTypes[116].etd_base,
    &enumTypes[142].etd_base,
    &enumTypes[161].etd_base,
    &enumTypes[127].etd_base,
    &sipTypeDef_QtCore_Qt_FindChildOptions.ctd_base,
    &enumTypes[192].etd_base,
    &enumTypes[158].etd_base,
    &enumTypes[131].etd_base,
    &sipTypeDef_QtCore_Qt_GestureFlags.ctd_base,
    &enumTypes[133].etd_base,
    &enumTypes[132].etd_base,
    &enumTypes[197].etd_base,
    &enumTypes[125].etd_base,
    &enumTypes[184].etd_base,
    &sipTypeDef_QtCore_Qt_ImageConversionFlags.ctd_base,
    &enumTypes[137].etd_base,
    &sipTypeDef_QtCore_Qt_InputMethodHints.ctd_base,
    &sipTypeDef_QtCore_Qt_InputMethodQueries.ctd_base,
    &enumTypes[156].etd_base,
    &enumTypes[151].etd_base,
    &enumTypes[150].etd_base,
    &sipTypeDef_QtCore_Qt_ItemFlags.ctd_base,
    &enumTypes[146].etd_base,
    &enumTypes[117].etd_base,
    &enumTypes[182].etd_base,
    &enumTypes[196].etd_base,
    &sipTypeDef_QtCore_Qt_KeyboardModifiers.ctd_base,
    &enumTypes[154].etd_base,
    &enumTypes[144].etd_base,
    &enumTypes[149].etd_base,
    &sipTypeDef_QtCore_Qt_MatchFlags.ctd_base,
    &enumTypes[195].etd_base,
    &enumTypes[194].etd_base,
    &sipTypeDef_QtCore_Qt_MouseButtons.ctd_base,
    &enumTypes[119].etd_base,
    &sipTypeDef_QtCore_Qt_MouseEventFlags.ctd_base,
    &enumTypes[120].etd_base,
    &enumTypes[122].etd_base,
    &enumTypes[130].etd_base,
    &enumTypes[193].etd_base,
    &sipTypeDef_QtCore_Qt_Orientations.ctd_base,
    &enumTypes[179].etd_base,
    &enumTypes[178].etd_base,
    &enumTypes[180].etd_base,
    &enumTypes[128].etd_base,
    &sipTypeDef_QtCore_Qt_ScreenOrientations.ctd_base,
    &enumTypes[166].etd_base,
    &enumTypes[121].etd_base,
    &enumTypes[162].etd_base,
    &enumTypes[140].etd_base,
    &enumTypes[141].etd_base,
    &enumTypes[191].etd_base,
    &enumTypes[118].etd_base,
    &enumTypes[188].etd_base,
    &enumTypes[189].etd_base,
    &enumTypes[174].etd_base,
    &enumTypes[145].etd_base,
    &sipTypeDef_QtCore_Qt_TextInteractionFlags.ctd_base,
    &enumTypes[138].etd_base,
    &enumTypes[168].etd_base,
    &enumTypes[171].etd_base,
    &enumTypes[170].etd_base,
    &sipTypeDef_QtCore_Qt_ToolBarAreas.ctd_base,
    &enumTypes[155].etd_base,
    &enumTypes[134].etd_base,
    &sipTypeDef_QtCore_Qt_TouchPointStates.ctd_base,
    &enumTypes[159].etd_base,
    &enumTypes[176].etd_base,
    &enumTypes[126].etd_base,
    &enumTypes[185].etd_base,
    &sipTypeDef_QtCore_Qt_WindowFlags.ctd_base,
    &enumTypes[139].etd_base,
    &enumTypes[148].etd_base,
    &enumTypes[186].etd_base,
    &sipTypeDef_QtCore_Qt_WindowStates.ctd_base,
    &enumTypes[187].etd_base,
    &enumTypes[59].etd_base,
    &sipTypeDef_QtCore_qintptr.mtd_base,
    &sipTypeDef_QtCore_quintptr.mtd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"QFileInfoList", "QList<QFileInfo>"},
    {"QFunctionPointer", "void*"},
    {"QModelIndexList", "QList<QModelIndex>"},
    {"QObjectList", "QList<QObject*>"},
    {"QRandomGenerator::result_type", "uint"},
    {"QTimeZone::OffsetDataList", "QVector<QTimeZone::OffsetData>"},
    {"QVariantAnimation::KeyValues", "QVector<QPair<qreal,QVariant> >"},
    {"QVariantHash", "QHash<QString,QVariant>"},
    {"QVariantList", "QList<QVariant>"},
    {"QXmlStreamEntityDeclarations", "QVector<QXmlStreamEntityDeclaration>"},
    {"QXmlStreamNamespaceDeclarations", "QVector<QXmlStreamNamespaceDeclaration>"},
    {"QXmlStreamNotationDeclarations", "QVector<QXmlStreamNotationDeclaration>"},
    {"Q_PID", "long long"},
    {"Qt::HANDLE", "void*"},
    {"qint16", "short"},
    {"qint32", "int"},
    {"qint64", "long long"},
    {"qint8", "signed char"},
    {"qlonglong", "long long"},
    {"qreal", "double"},
    {"quint16", "unsigned short"},
    {"quint32", "uint"},
    {"quint64", "unsigned long long"},
    {"quint8", "unsigned char"},
    {"qulonglong", "unsigned long long"},
    {"uchar", "unsigned char"},
    {"uint", "uint"},
    {"ulong", "unsigned long"},
    {"ushort", "unsigned short"},
};


/*
 * This defines the virtual error handlers that this module implements and
 * can be used by other modules.
 */
static sipVirtErrorHandlerDef virtErrorHandlersTable[] = {
    {"PyQt5", sipVEH_QtCore_PyQt5},
    {SIP_NULLPTR, SIP_NULLPTR}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QObject, {183, 255, 0}, SIP_NULLPTR},
    {sipSubClass_QEvent, {69, 255, 0}, SIP_NULLPTR},
    {SIP_NULLPTR, {0, 0, 0}, SIP_NULLPTR}
};


/* Define the module's license. */
static sipLicenseDef module_license = {
    "gpl",
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* Define the strings to be added to this module dictionary. */
static sipStringInstanceDef stringInstances[] = {
    {sipName_PYQT_VERSION_STR, PYQT_VERSION_STR, 'A'},
    {sipName_QT_VERSION_STR, QT_VERSION_STR, 'A'},
    {0, 0, 0}
};


/* Define the ints to be added to this module dictionary. */
static sipIntInstanceDef intInstances[] = {
    {sipName_PYQT_VERSION, PYQT_VERSION},
    {sipName_QT_VERSION, QT_VERSION},
    {0, 0}
};


/* This defines the Qt support API. */

static sipQtAPI qtAPI = {
    &sipExportedTypes_QtCore[183],
    sipQtCreateUniversalSignal,
    sipQtFindUniversalSignal,
    sipQtCreateUniversalSlot,
    sipQtDestroyUniversalSlot,
    sipQtFindSlot,
    sipQtConnect,
    sipQtDisconnect,
    sipQtSameSignalSlotName,
    sipQtFindSipslot,
    sipQtEmitSignal,
    sipQtConnectPySignal,
    sipQtDisconnectPySignal
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtCore = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtCore,
    0,
    sipStrings_QtCore,
    SIP_NULLPTR,
    &qtAPI,
    448,
    sipExportedTypes_QtCore,
    externalTypesTable,
    33,
    enummembers,
    29,
    typedefsTable,
    virtErrorHandlersTable,
    convertorsTable,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, stringInstances, intInstances, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    &module_license,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtCore;

sip_qt_metaobject_func sip_QtCore_qt_metaobject;
sip_qt_metacall_func sip_QtCore_qt_metacall;
sip_qt_metacast_func sip_QtCore_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtCore
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtCore
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_MLNAME_CAST(sipName_qSetRealNumberPrecision), func_qSetRealNumberPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_qSetRealNumberPrecision)},
        {SIP_MLNAME_CAST(sipName_qSetPadChar), func_qSetPadChar, METH_VARARGS, SIP_MLDOC_CAST(doc_qSetPadChar)},
        {SIP_MLNAME_CAST(sipName_qSetFieldWidth), func_qSetFieldWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_qSetFieldWidth)},
        {SIP_MLNAME_CAST(sipName_ws), func_ws, METH_VARARGS, SIP_MLDOC_CAST(doc_ws)},
        {SIP_MLNAME_CAST(sipName_bom), func_bom, METH_VARARGS, SIP_MLDOC_CAST(doc_bom)},
        {SIP_MLNAME_CAST(sipName_reset), func_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_reset)},
        {SIP_MLNAME_CAST(sipName_flush), func_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_flush)},
        {SIP_MLNAME_CAST(sipName_endl), func_endl, METH_VARARGS, SIP_MLDOC_CAST(doc_endl)},
        {SIP_MLNAME_CAST(sipName_center), func_center, METH_VARARGS, SIP_MLDOC_CAST(doc_center)},
        {SIP_MLNAME_CAST(sipName_right), func_right, METH_VARARGS, SIP_MLDOC_CAST(doc_right)},
        {SIP_MLNAME_CAST(sipName_left), func_left, METH_VARARGS, SIP_MLDOC_CAST(doc_left)},
        {SIP_MLNAME_CAST(sipName_scientific), func_scientific, METH_VARARGS, SIP_MLDOC_CAST(doc_scientific)},
        {SIP_MLNAME_CAST(sipName_fixed), func_fixed, METH_VARARGS, SIP_MLDOC_CAST(doc_fixed)},
        {SIP_MLNAME_CAST(sipName_lowercasedigits), func_lowercasedigits, METH_VARARGS, SIP_MLDOC_CAST(doc_lowercasedigits)},
        {SIP_MLNAME_CAST(sipName_lowercasebase), func_lowercasebase, METH_VARARGS, SIP_MLDOC_CAST(doc_lowercasebase)},
        {SIP_MLNAME_CAST(sipName_uppercasedigits), func_uppercasedigits, METH_VARARGS, SIP_MLDOC_CAST(doc_uppercasedigits)},
        {SIP_MLNAME_CAST(sipName_uppercasebase), func_uppercasebase, METH_VARARGS, SIP_MLDOC_CAST(doc_uppercasebase)},
        {SIP_MLNAME_CAST(sipName_noforcepoint), func_noforcepoint, METH_VARARGS, SIP_MLDOC_CAST(doc_noforcepoint)},
        {SIP_MLNAME_CAST(sipName_noforcesign), func_noforcesign, METH_VARARGS, SIP_MLDOC_CAST(doc_noforcesign)},
        {SIP_MLNAME_CAST(sipName_noshowbase), func_noshowbase, METH_VARARGS, SIP_MLDOC_CAST(doc_noshowbase)},
        {SIP_MLNAME_CAST(sipName_forcepoint), func_forcepoint, METH_VARARGS, SIP_MLDOC_CAST(doc_forcepoint)},
        {SIP_MLNAME_CAST(sipName_forcesign), func_forcesign, METH_VARARGS, SIP_MLDOC_CAST(doc_forcesign)},
        {SIP_MLNAME_CAST(sipName_showbase), func_showbase, METH_VARARGS, SIP_MLDOC_CAST(doc_showbase)},
        {SIP_MLNAME_CAST(sipName_hex_), func_hex_, METH_VARARGS, SIP_MLDOC_CAST(doc_hex_)},
        {SIP_MLNAME_CAST(sipName_dec), func_dec, METH_VARARGS, SIP_MLDOC_CAST(doc_dec)},
        {SIP_MLNAME_CAST(sipName_oct_), func_oct_, METH_VARARGS, SIP_MLDOC_CAST(doc_oct_)},
        {SIP_MLNAME_CAST(sipName_bin_), func_bin_, METH_VARARGS, SIP_MLDOC_CAST(doc_bin_)},
        {SIP_MLNAME_CAST(sipName_Q_RETURN_ARG), func_Q_RETURN_ARG, METH_VARARGS, SIP_MLDOC_CAST(doc_Q_RETURN_ARG)},
        {SIP_MLNAME_CAST(sipName_Q_ARG), func_Q_ARG, METH_VARARGS, SIP_MLDOC_CAST(doc_Q_ARG)},
        {SIP_MLNAME_CAST(sipName_pyqtSlot), SIP_MLMETH_CAST(func_pyqtSlot), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_pyqtSlot)},
        {SIP_MLNAME_CAST(sipName_QT_TRANSLATE_NOOP), func_QT_TRANSLATE_NOOP, METH_VARARGS, SIP_MLDOC_CAST(doc_QT_TRANSLATE_NOOP)},
        {SIP_MLNAME_CAST(sipName_QT_TR_NOOP_UTF8), func_QT_TR_NOOP_UTF8, METH_VARARGS, SIP_MLDOC_CAST(doc_QT_TR_NOOP_UTF8)},
        {SIP_MLNAME_CAST(sipName_QT_TR_NOOP), func_QT_TR_NOOP, METH_VARARGS, SIP_MLDOC_CAST(doc_QT_TR_NOOP)},
        {SIP_MLNAME_CAST(sipName_Q_FLAGS), func_Q_FLAGS, METH_VARARGS, SIP_MLDOC_CAST(doc_Q_FLAGS)},
        {SIP_MLNAME_CAST(sipName_Q_FLAG), func_Q_FLAG, METH_VARARGS, SIP_MLDOC_CAST(doc_Q_FLAG)},
        {SIP_MLNAME_CAST(sipName_Q_ENUMS), func_Q_ENUMS, METH_VARARGS, SIP_MLDOC_CAST(doc_Q_ENUMS)},
        {SIP_MLNAME_CAST(sipName_Q_ENUM), func_Q_ENUM, METH_VARARGS, SIP_MLDOC_CAST(doc_Q_ENUM)},
        {SIP_MLNAME_CAST(sipName_Q_CLASSINFO), func_Q_CLASSINFO, METH_VARARGS, SIP_MLDOC_CAST(doc_Q_CLASSINFO)},
        {SIP_MLNAME_CAST(sipName_qFloatDistance), func_qFloatDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_qFloatDistance)},
        {SIP_MLNAME_CAST(sipName_qQNaN), func_qQNaN, METH_VARARGS, SIP_MLDOC_CAST(doc_qQNaN)},
        {SIP_MLNAME_CAST(sipName_qSNaN), func_qSNaN, METH_VARARGS, SIP_MLDOC_CAST(doc_qSNaN)},
        {SIP_MLNAME_CAST(sipName_qInf), func_qInf, METH_VARARGS, SIP_MLDOC_CAST(doc_qInf)},
        {SIP_MLNAME_CAST(sipName_qIsNaN), func_qIsNaN, METH_VARARGS, SIP_MLDOC_CAST(doc_qIsNaN)},
        {SIP_MLNAME_CAST(sipName_qIsFinite), func_qIsFinite, METH_VARARGS, SIP_MLDOC_CAST(doc_qIsFinite)},
        {SIP_MLNAME_CAST(sipName_qIsInf), func_qIsInf, METH_VARARGS, SIP_MLDOC_CAST(doc_qIsInf)},
        {SIP_MLNAME_CAST(sipName_qFormatLogMessage), func_qFormatLogMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_qFormatLogMessage)},
        {SIP_MLNAME_CAST(sipName_qSetMessagePattern), func_qSetMessagePattern, METH_VARARGS, SIP_MLDOC_CAST(doc_qSetMessagePattern)},
        {SIP_MLNAME_CAST(sipName_qInstallMessageHandler), func_qInstallMessageHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_qInstallMessageHandler)},
        {SIP_MLNAME_CAST(sipName_qWarning), func_qWarning, METH_VARARGS, SIP_MLDOC_CAST(doc_qWarning)},
        {SIP_MLNAME_CAST(sipName_qInfo), func_qInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_qInfo)},
        {SIP_MLNAME_CAST(sipName_qFatal), func_qFatal, METH_VARARGS, SIP_MLDOC_CAST(doc_qFatal)},
        {SIP_MLNAME_CAST(sipName_qErrnoWarning), func_qErrnoWarning, METH_VARARGS, SIP_MLDOC_CAST(doc_qErrnoWarning)},
        {SIP_MLNAME_CAST(sipName_qDebug), func_qDebug, METH_VARARGS, SIP_MLDOC_CAST(doc_qDebug)},
        {SIP_MLNAME_CAST(sipName_qCritical), func_qCritical, METH_VARARGS, SIP_MLDOC_CAST(doc_qCritical)},
        {SIP_MLNAME_CAST(sipName_pyqtRestoreInputHook), func_pyqtRestoreInputHook, METH_VARARGS, SIP_MLDOC_CAST(doc_pyqtRestoreInputHook)},
        {SIP_MLNAME_CAST(sipName_pyqtRemoveInputHook), func_pyqtRemoveInputHook, METH_VARARGS, SIP_MLDOC_CAST(doc_pyqtRemoveInputHook)},
        {SIP_MLNAME_CAST(sipName_qAddPreRoutine), func_qAddPreRoutine, METH_VARARGS, SIP_MLDOC_CAST(doc_qAddPreRoutine)},
        {SIP_MLNAME_CAST(sipName_qRemovePostRoutine), func_qRemovePostRoutine, METH_VARARGS, SIP_MLDOC_CAST(doc_qRemovePostRoutine)},
        {SIP_MLNAME_CAST(sipName_qAddPostRoutine), func_qAddPostRoutine, METH_VARARGS, SIP_MLDOC_CAST(doc_qAddPostRoutine)},
        {SIP_MLNAME_CAST(sipName_qChecksum), func_qChecksum, METH_VARARGS, SIP_MLDOC_CAST(doc_qChecksum)},
        {SIP_MLNAME_CAST(sipName_qUncompress), func_qUncompress, METH_VARARGS, SIP_MLDOC_CAST(doc_qUncompress)},
        {SIP_MLNAME_CAST(sipName_qCompress), SIP_MLMETH_CAST(func_qCompress), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qCompress)},
        {SIP_MLNAME_CAST(sipName_qEnvironmentVariable), func_qEnvironmentVariable, METH_VARARGS, SIP_MLDOC_CAST(doc_qEnvironmentVariable)},
        {SIP_MLNAME_CAST(sipName_pyqtPickleProtocol), func_pyqtPickleProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_pyqtPickleProtocol)},
        {SIP_MLNAME_CAST(sipName_pyqtSetPickleProtocol), func_pyqtSetPickleProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_pyqtSetPickleProtocol)},
        {SIP_MLNAME_CAST(sipName_qrand), func_qrand, METH_VARARGS, SIP_MLDOC_CAST(doc_qrand)},
        {SIP_MLNAME_CAST(sipName_qsrand), func_qsrand, METH_VARARGS, SIP_MLDOC_CAST(doc_qsrand)},
        {SIP_MLNAME_CAST(sipName_qIsNull), func_qIsNull, METH_VARARGS, SIP_MLDOC_CAST(doc_qIsNull)},
        {SIP_MLNAME_CAST(sipName_qFuzzyCompare), func_qFuzzyCompare, METH_VARARGS, SIP_MLDOC_CAST(doc_qFuzzyCompare)},
        {SIP_MLNAME_CAST(sipName_qUnregisterResourceData), func_qUnregisterResourceData, METH_VARARGS, SIP_MLDOC_CAST(doc_qUnregisterResourceData)},
        {SIP_MLNAME_CAST(sipName_qRegisterResourceData), func_qRegisterResourceData, METH_VARARGS, SIP_MLDOC_CAST(doc_qRegisterResourceData)},
        {SIP_MLNAME_CAST(sipName_qSharedBuild), func_qSharedBuild, METH_VARARGS, SIP_MLDOC_CAST(doc_qSharedBuild)},
        {SIP_MLNAME_CAST(sipName_qVersion), func_qVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_qVersion)},
        {SIP_MLNAME_CAST(sipName_qRound64), func_qRound64, METH_VARARGS, SIP_MLDOC_CAST(doc_qRound64)},
        {SIP_MLNAME_CAST(sipName_qRound), func_qRound, METH_VARARGS, SIP_MLDOC_CAST(doc_qRound)},
        {SIP_MLNAME_CAST(sipName_qAbs), func_qAbs, METH_VARARGS, SIP_MLDOC_CAST(doc_qAbs)},
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtCore",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtCore, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtCore), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("PyQt5.sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("PyQt5.sip"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtCore = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "PyQt5.sip._C_API"));
#else
    sipAPI_QtCore = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtCore == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

#line 746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
qpycore_init();
#line 10984 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtCore,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_QtCore_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtCore_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtCore_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtCore_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtCore,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#line 297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
// Process events from the input hook.
PyOS_InputHook = qtcore_input_hook;
#line 750 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
qpycore_post_init(sipModuleDict);
#line 11010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    SIP_MODULE_RETURN(sipModule);
}

#line 263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 11018 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QList_0600QPair_0100QString_0100QString(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0600QPair_0100QString_0100QString(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList<QPair<QString,QString> > *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList<QPair<QString,QString> > *>(sipSrc);
}


extern "C" {static void *array_QList_0600QPair_0100QString_0100QString(SIP_SSIZE_T);}
static void *array_QList_0600QPair_0100QString_0100QString(SIP_SSIZE_T sipNrElem)
{
    return new QList<QPair<QString,QString> >[sipNrElem];
}


extern "C" {static void *copy_QList_0600QPair_0100QString_0100QString(const void *, SIP_SSIZE_T);}
static void *copy_QList_0600QPair_0100QString_0100QString(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList<QPair<QString,QString> >(reinterpret_cast<const QList<QPair<QString,QString> > *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0600QPair_0100QString_0100QString(void *, int);}
static void release_QList_0600QPair_0100QString_0100QString(void *ptr, int)
{
    delete reinterpret_cast<QList<QPair<QString,QString> > *>(ptr);
}



extern "C" {static int convertTo_QList_0600QPair_0100QString_0100QString(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0600QPair_0100QString_0100QString(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList<QPair<QString,QString> > **sipCppPtr = reinterpret_cast<QList<QPair<QString,QString> > **>(sipCppPtrV);

#line 297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QPair<QString, QString> > *ql = new QList<QPair<QString, QString> >;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *seq = PyIter_Next(iter);

        if (!seq)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        Py_ssize_t sub_len;

        if (PySequence_Check(seq)
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(seq)
#endif
                && !PyUnicode_Check(seq))
            sub_len = PySequence_Size(seq);
        else
            sub_len = -1;

        if (sub_len != 2)
        {
            if (sub_len < 0)
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but a 2 element non-string sequence is expected",
                        i, sipPyTypeName(Py_TYPE(seq)));
            else
                PyErr_Format(PyExc_TypeError,
                        "index %zd is a sequence of %zd sub-elements but 2 sub-elements are expected",
                        i, sub_len);

            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyObject *itm1 = PySequence_GetItem(seq, 0);

        if (!itm1)
        {
            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        int state1;
        QString *s1 = reinterpret_cast<QString *>(
                sipForceConvertToType(itm1, sipType_QString, sipTransferObj,
                        SIP_NOT_NONE, &state1, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "the first sub-element of index %zd has type '%s' but 'QString' is expected",
                    i, sipPyTypeName(Py_TYPE(itm1)));

            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        PyObject *itm2 = PySequence_GetItem(seq, 1);

        if (!itm2)
        {
            sipReleaseType(s1, sipType_QString, state1);
            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        int state2;
        QString *s2 = reinterpret_cast<QString *>(
                sipForceConvertToType(itm2, sipType_QString, sipTransferObj,
                        SIP_NOT_NONE, &state2, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "the second sub-element of index %zd has type '%s' but 'QString' is expected",
                    i, sipPyTypeName(Py_TYPE(itm2)));

            Py_DECREF(itm2);
            sipReleaseType(s1, sipType_QString, state1);
            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(QPair<QString, QString>(*s1, *s2));

        sipReleaseType(s2, sipType_QString, state2);
        Py_DECREF(itm2);
        sipReleaseType(s1, sipType_QString, state1);
        Py_DECREF(itm1);
        Py_DECREF(seq);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 11210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0600QPair_0100QString_0100QString(void *, PyObject *);}
static PyObject *convertFrom_QList_0600QPair_0100QString_0100QString(void *sipCppV, PyObject *sipTransferObj)
{
   QList<QPair<QString,QString> > *sipCpp = reinterpret_cast<QList<QPair<QString,QString> > *>(sipCppV);

#line 268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        const QPair<QString, QString> &p = sipCpp->at(i);
        QString *s1 = new QString(p.first);
        QString *s2 = new QString(p.second);
        PyObject *pobj = sipBuildResult(NULL, "(NN)", s1, sipType_QString,
                sipTransferObj, s2, sipType_QString, sipTransferObj);

        if (!pobj)
        {
            delete s1;
            delete s2;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 11246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0600QPair_0100QString_0100QString = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_2300,     /* QList<QPair<QString,QString> > */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0600QPair_0100QString_0100QString,
    array_QList_0600QPair_0100QString_0100QString,
    copy_QList_0600QPair_0100QString_0100QString,
    release_QList_0600QPair_0100QString_0100QString,
    convertTo_QList_0600QPair_0100QString_0100QString,
    convertFrom_QList_0600QPair_0100QString_0100QString
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 11278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstorageinfo.sip"
#include <qstorageinfo.h>
#line 11282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QStorageInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QStorageInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QStorageInfo> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QStorageInfo> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QStorageInfo(SIP_SSIZE_T);}
static void *array_QList_0100QStorageInfo(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QStorageInfo>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QStorageInfo(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QStorageInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QStorageInfo>(reinterpret_cast<const QList< ::QStorageInfo> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QStorageInfo(void *, int);}
static void release_QList_0100QStorageInfo(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QStorageInfo> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QStorageInfo(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QStorageInfo(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QStorageInfo> **sipCppPtr = reinterpret_cast<QList< ::QStorageInfo> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QStorageInfo> *ql = new QList<QStorageInfo>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QStorageInfo *t = reinterpret_cast<QStorageInfo *>(
                sipForceConvertToType(itm, sipType_QStorageInfo, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QStorageInfo' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QStorageInfo, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 11392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QStorageInfo(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QStorageInfo(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QStorageInfo> *sipCpp = reinterpret_cast<QList< ::QStorageInfo> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QStorageInfo *t = new QStorageInfo(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QStorageInfo,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 11425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QStorageInfo = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_14718,     /* QList<QStorageInfo> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QStorageInfo,
    array_QList_0100QStorageInfo,
    copy_QList_0100QStorageInfo,
    release_QList_0100QStorageInfo,
    convertTo_QList_0100QStorageInfo,
    convertFrom_QList_0100QStorageInfo
};

#line 144 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qset.sip"
#include <qset.h>
#line 11457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 11461 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QSet_0101QAbstractState(void *, SIP_SSIZE_T, void *);}
static void assign_QSet_0101QAbstractState(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QSet< ::QAbstractState*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QSet< ::QAbstractState*> *>(sipSrc);
}


extern "C" {static void *array_QSet_0101QAbstractState(SIP_SSIZE_T);}
static void *array_QSet_0101QAbstractState(SIP_SSIZE_T sipNrElem)
{
    return new QSet< ::QAbstractState*>[sipNrElem];
}


extern "C" {static void *copy_QSet_0101QAbstractState(const void *, SIP_SSIZE_T);}
static void *copy_QSet_0101QAbstractState(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSet< ::QAbstractState*>(reinterpret_cast<const QSet< ::QAbstractState*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QSet_0101QAbstractState(void *, int);}
static void release_QSet_0101QAbstractState(void *ptr, int)
{
    delete reinterpret_cast<QSet< ::QAbstractState*> *>(ptr);
}



extern "C" {static int convertTo_QSet_0101QAbstractState(PyObject *, void **, int *, PyObject *);}
static int convertTo_QSet_0101QAbstractState(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QSet< ::QAbstractState*> **sipCppPtr = reinterpret_cast<QSet< ::QAbstractState*> **>(sipCppPtrV);

#line 182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qset.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QSet<QAbstractState *> *qs = new QSet<QAbstractState *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qs;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QAbstractState *t = reinterpret_cast<QAbstractState *>(
                sipForceConvertToType(itm, sipType_QAbstractState, sipTransferObj, 0,
                        0, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QAbstractState' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qs;
            Py_DECREF(iter);

            return 0;
        }

        qs->insert(t);

        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = qs;
 
    return sipGetState(sipTransferObj);
#line 11569 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QSet_0101QAbstractState(void *, PyObject *);}
static PyObject *convertFrom_QSet_0101QAbstractState(void *sipCppV, PyObject *sipTransferObj)
{
   QSet< ::QAbstractState*> *sipCpp = reinterpret_cast<QSet< ::QAbstractState*> *>(sipCppV);

#line 148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qset.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *s = PySet_New(0);

    if (s)
    {
        QSet<QAbstractState *>::const_iterator it = sipCpp->constBegin();
        QSet<QAbstractState *>::const_iterator end = sipCpp->constEnd();

        while (it != end)
        {
            // The explicit (void *) cast allows QAbstractState to be const.
            PyObject *tobj = sipConvertFromType((void *)*it, sipType_QAbstractState,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(s);
                s = 0;

                break;
            }

            PySet_Add(s, tobj);

            ++it;
        }
    }

    sipEnableGC(gc_enabled);

    return s;
#line 11610 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QSet_0101QAbstractState = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_10532,     /* QSet<QAbstractState*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QSet_0101QAbstractState,
    array_QSet_0101QAbstractState,
    copy_QSet_0101QAbstractState,
    release_QSet_0101QAbstractState,
    convertTo_QSet_0101QAbstractState,
    convertFrom_QSet_0101QAbstractState
};

#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 11642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 11646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0101QAbstractTransition(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QAbstractTransition(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QAbstractTransition*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QAbstractTransition*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QAbstractTransition(SIP_SSIZE_T);}
static void *array_QList_0101QAbstractTransition(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QAbstractTransition*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QAbstractTransition(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QAbstractTransition(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QAbstractTransition*>(reinterpret_cast<const QList< ::QAbstractTransition*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QAbstractTransition(void *, int);}
static void release_QList_0101QAbstractTransition(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QAbstractTransition*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QAbstractTransition(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QAbstractTransition(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QAbstractTransition*> **sipCppPtr = reinterpret_cast<QList< ::QAbstractTransition*> **>(sipCppPtrV);

#line 184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QAbstractTransition *> *ql = new QList<QAbstractTransition *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QAbstractTransition *t = reinterpret_cast<QAbstractTransition *>(
                sipForceConvertToType(itm, sipType_QAbstractTransition, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QAbstractTransition' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 11754 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QAbstractTransition(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QAbstractTransition(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QAbstractTransition*> *sipCpp = reinterpret_cast<QList< ::QAbstractTransition*> *>(sipCppV);

#line 153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QAbstractTransition *t = sipCpp->at(i);

            // The explicit (void *) cast allows QAbstractTransition to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QAbstractTransition,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 11792 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0101QAbstractTransition = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_3604,     /* QList<QAbstractTransition*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QAbstractTransition,
    array_QList_0101QAbstractTransition,
    copy_QList_0101QAbstractTransition,
    release_QList_0101QAbstractTransition,
    convertTo_QList_0101QAbstractTransition,
    convertFrom_QList_0101QAbstractTransition
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 11824 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimetype.sip"
#include <qmimetype.h>
#line 11828 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QMimeType(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QMimeType(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QMimeType> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QMimeType> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QMimeType(SIP_SSIZE_T);}
static void *array_QList_0100QMimeType(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QMimeType>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QMimeType(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QMimeType(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QMimeType>(reinterpret_cast<const QList< ::QMimeType> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QMimeType(void *, int);}
static void release_QList_0100QMimeType(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QMimeType> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QMimeType(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QMimeType(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QMimeType> **sipCppPtr = reinterpret_cast<QList< ::QMimeType> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QMimeType> *ql = new QList<QMimeType>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QMimeType *t = reinterpret_cast<QMimeType *>(
                sipForceConvertToType(itm, sipType_QMimeType, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QMimeType' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QMimeType, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 11938 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QMimeType(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QMimeType(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QMimeType> *sipCpp = reinterpret_cast<QList< ::QMimeType> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QMimeType *t = new QMimeType(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QMimeType,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 11971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QMimeType = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_23225,     /* QList<QMimeType> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QMimeType,
    array_QList_0100QMimeType,
    copy_QList_0100QMimeType,
    release_QList_0100QMimeType,
    convertTo_QList_0100QMimeType,
    convertFrom_QList_0100QMimeType
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12003 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 12007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QUrl(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QUrl(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QUrl> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QUrl> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QUrl(SIP_SSIZE_T);}
static void *array_QList_0100QUrl(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QUrl>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QUrl(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QUrl(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QUrl>(reinterpret_cast<const QList< ::QUrl> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QUrl(void *, int);}
static void release_QList_0100QUrl(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QUrl> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QUrl(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QUrl(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QUrl> **sipCppPtr = reinterpret_cast<QList< ::QUrl> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QUrl> *ql = new QList<QUrl>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QUrl *t = reinterpret_cast<QUrl *>(
                sipForceConvertToType(itm, sipType_QUrl, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QUrl' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QUrl, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 12117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QUrl(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QUrl(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QUrl> *sipCpp = reinterpret_cast<QList< ::QUrl> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QUrl *t = new QUrl(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QUrl,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 12150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QUrl = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_42878,     /* QList<QUrl> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QUrl,
    array_QList_0100QUrl,
    copy_QList_0100QUrl,
    release_QList_0100QUrl,
    convertTo_QList_0100QUrl,
    convertFrom_QList_0100QUrl
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 12186 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QLocale(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QLocale(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QLocale> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QLocale> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QLocale(SIP_SSIZE_T);}
static void *array_QList_0100QLocale(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QLocale>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QLocale(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QLocale(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QLocale>(reinterpret_cast<const QList< ::QLocale> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QLocale(void *, int);}
static void release_QList_0100QLocale(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QLocale> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QLocale(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QLocale(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QLocale> **sipCppPtr = reinterpret_cast<QList< ::QLocale> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QLocale> *ql = new QList<QLocale>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QLocale *t = reinterpret_cast<QLocale *>(
                sipForceConvertToType(itm, sipType_QLocale, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QLocale' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QLocale, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 12296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QLocale(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QLocale(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QLocale> *sipCpp = reinterpret_cast<QList< ::QLocale> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QLocale *t = new QLocale(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QLocale,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 12329 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QLocale = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_30160,     /* QList<QLocale> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QLocale,
    array_QList_0100QLocale,
    copy_QList_0100QLocale,
    release_QList_0100QLocale,
    convertTo_QList_0100QLocale,
    convertFrom_QList_0100QLocale
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 12361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 12365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QVector_0100QPointF(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QPointF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QPointF> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QPointF> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QPointF(SIP_SSIZE_T);}
static void *array_QVector_0100QPointF(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QPointF>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QPointF(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QPointF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QPointF>(reinterpret_cast<const QVector< ::QPointF> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QPointF(void *, int);}
static void release_QVector_0100QPointF(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QPointF> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QPointF(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QPointF(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QPointF> **sipCppPtr = reinterpret_cast<QVector< ::QPointF> **>(sipCppPtrV);

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QPointF> *qv = new QVector<QPointF>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QPointF *t = reinterpret_cast<QPointF *>(
                sipForceConvertToType(itm, sipType_QPointF, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QPointF' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QPointF, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 12475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QPointF(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QPointF(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QPointF> *sipCpp = reinterpret_cast<QVector< ::QPointF> *>(sipCppV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QPointF *t = new QPointF(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QPointF,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 12508 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_0100QPointF = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_23242,     /* QVector<QPointF> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QPointF,
    array_QVector_0100QPointF,
    copy_QVector_0100QPointF,
    release_QVector_0100QPointF,
    convertTo_QVector_0100QPointF,
    convertFrom_QVector_0100QPointF
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 12544 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QCommandLineOption(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QCommandLineOption(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QCommandLineOption> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QCommandLineOption> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QCommandLineOption(SIP_SSIZE_T);}
static void *array_QList_0100QCommandLineOption(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QCommandLineOption>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QCommandLineOption(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QCommandLineOption(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QCommandLineOption>(reinterpret_cast<const QList< ::QCommandLineOption> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QCommandLineOption(void *, int);}
static void release_QList_0100QCommandLineOption(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QCommandLineOption> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QCommandLineOption(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QCommandLineOption(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QCommandLineOption> **sipCppPtr = reinterpret_cast<QList< ::QCommandLineOption> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QCommandLineOption> *ql = new QList<QCommandLineOption>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QCommandLineOption *t = reinterpret_cast<QCommandLineOption *>(
                sipForceConvertToType(itm, sipType_QCommandLineOption, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QCommandLineOption' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QCommandLineOption, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 12654 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QCommandLineOption(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QCommandLineOption(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QCommandLineOption> *sipCpp = reinterpret_cast<QList< ::QCommandLineOption> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QCommandLineOption *t = new QCommandLineOption(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QCommandLineOption,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 12687 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QCommandLineOption = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_5387,     /* QList<QCommandLineOption> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QCommandLineOption,
    array_QList_0100QCommandLineOption,
    copy_QList_0100QCommandLineOption,
    release_QList_0100QCommandLineOption,
    convertTo_QList_0100QCommandLineOption,
    convertFrom_QList_0100QCommandLineOption
};

#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12719 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 12723 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0101QAbstractAnimation(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QAbstractAnimation(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QAbstractAnimation*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QAbstractAnimation*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QAbstractAnimation(SIP_SSIZE_T);}
static void *array_QList_0101QAbstractAnimation(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QAbstractAnimation*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QAbstractAnimation(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QAbstractAnimation(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QAbstractAnimation*>(reinterpret_cast<const QList< ::QAbstractAnimation*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QAbstractAnimation(void *, int);}
static void release_QList_0101QAbstractAnimation(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QAbstractAnimation*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QAbstractAnimation(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QAbstractAnimation(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QAbstractAnimation*> **sipCppPtr = reinterpret_cast<QList< ::QAbstractAnimation*> **>(sipCppPtrV);

#line 184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QAbstractAnimation *> *ql = new QList<QAbstractAnimation *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QAbstractAnimation *t = reinterpret_cast<QAbstractAnimation *>(
                sipForceConvertToType(itm, sipType_QAbstractAnimation, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QAbstractAnimation' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 12831 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QAbstractAnimation(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QAbstractAnimation(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QAbstractAnimation*> *sipCpp = reinterpret_cast<QList< ::QAbstractAnimation*> *>(sipCppV);

#line 153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QAbstractAnimation *t = sipCpp->at(i);

            // The explicit (void *) cast allows QAbstractAnimation to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QAbstractAnimation,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 12869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0101QAbstractAnimation = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_4388,     /* QList<QAbstractAnimation*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QAbstractAnimation,
    array_QList_0101QAbstractAnimation,
    copy_QList_0101QAbstractAnimation,
    release_QList_0101QAbstractAnimation,
    convertTo_QList_0101QAbstractAnimation,
    convertFrom_QList_0101QAbstractAnimation
};

#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12901 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 12905 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0101QAbstractState(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QAbstractState(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QAbstractState*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QAbstractState*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QAbstractState(SIP_SSIZE_T);}
static void *array_QList_0101QAbstractState(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QAbstractState*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QAbstractState(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QAbstractState(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QAbstractState*>(reinterpret_cast<const QList< ::QAbstractState*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QAbstractState(void *, int);}
static void release_QList_0101QAbstractState(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QAbstractState*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QAbstractState(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QAbstractState(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QAbstractState*> **sipCppPtr = reinterpret_cast<QList< ::QAbstractState*> **>(sipCppPtrV);

#line 184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QAbstractState *> *ql = new QList<QAbstractState *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QAbstractState *t = reinterpret_cast<QAbstractState *>(
                sipForceConvertToType(itm, sipType_QAbstractState, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QAbstractState' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 13013 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QAbstractState(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QAbstractState(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QAbstractState*> *sipCpp = reinterpret_cast<QList< ::QAbstractState*> *>(sipCppV);

#line 153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QAbstractState *t = sipCpp->at(i);

            // The explicit (void *) cast allows QAbstractState to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QAbstractState,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 13051 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0101QAbstractState = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_8968,     /* QList<QAbstractState*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QAbstractState,
    array_QList_0101QAbstractState,
    copy_QList_0101QAbstractState,
    release_QList_0101QAbstractState,
    convertTo_QList_0101QAbstractState,
    convertFrom_QList_0101QAbstractState
};

#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 13083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 13087 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QHash_1800_0100QByteArray(void *, SIP_SSIZE_T, void *);}
static void assign_QHash_1800_0100QByteArray(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QHash<int, ::QByteArray> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QHash<int, ::QByteArray> *>(sipSrc);
}


extern "C" {static void *array_QHash_1800_0100QByteArray(SIP_SSIZE_T);}
static void *array_QHash_1800_0100QByteArray(SIP_SSIZE_T sipNrElem)
{
    return new QHash<int, ::QByteArray>[sipNrElem];
}


extern "C" {static void *copy_QHash_1800_0100QByteArray(const void *, SIP_SSIZE_T);}
static void *copy_QHash_1800_0100QByteArray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QHash<int, ::QByteArray>(reinterpret_cast<const QHash<int, ::QByteArray> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QHash_1800_0100QByteArray(void *, int);}
static void release_QHash_1800_0100QByteArray(void *ptr, int)
{
    delete reinterpret_cast<QHash<int, ::QByteArray> *>(ptr);
}



extern "C" {static int convertTo_QHash_1800_0100QByteArray(PyObject *, void **, int *, PyObject *);}
static int convertTo_QHash_1800_0100QByteArray(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QHash<int, ::QByteArray> **sipCppPtr = reinterpret_cast<QHash<int, ::QByteArray> **>(sipCppPtrV);

#line 330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
    if (!sipIsErr)
        return PyDict_Check(sipPy);

    QHash<int, QByteArray> *qh = new QHash<int, QByteArray>;

    Py_ssize_t pos = 0;
    PyObject *kobj, *vobj;
 
    while (PyDict_Next(sipPy, &pos, &kobj, &vobj))
    {
        int k = sipLong_AsInt(kobj);

        if (PyErr_Occurred())
        {
            if (PyErr_ExceptionMatches(PyExc_TypeError))
                PyErr_Format(PyExc_TypeError,
                        "a dict key has type '%s' but 'int' is expected",
                        sipPyTypeName(Py_TYPE(kobj)));

            delete qh;
            *sipIsErr = 1;

            return 0;
        }

        int vstate;
        QByteArray *v = reinterpret_cast<QByteArray *>(
                sipForceConvertToType(vobj, sipType_QByteArray, sipTransferObj,
                        SIP_NOT_NONE, &vstate, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "a dict value has type '%s' but 'QByteArray' is expected",
                    sipPyTypeName(Py_TYPE(vobj)));

            delete qh;

            return 0;
        }

        qh->insert(k, *v);

        sipReleaseType(v, sipType_QByteArray, vstate);
    }
 
    *sipCppPtr = qh;
 
    return sipGetState(sipTransferObj);
#line 13175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QHash_1800_0100QByteArray(void *, PyObject *);}
static PyObject *convertFrom_QHash_1800_0100QByteArray(void *sipCppV, PyObject *sipTransferObj)
{
   QHash<int, ::QByteArray> *sipCpp = reinterpret_cast<QHash<int, ::QByteArray> *>(sipCppV);

#line 279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
    PyObject *d = PyDict_New();

    if (!d)
        return 0;

    QHash<int, QByteArray>::const_iterator it = sipCpp->constBegin();
    QHash<int, QByteArray>::const_iterator end = sipCpp->constEnd();

    while (it != end)
    {
        PyObject *kobj = SIPLong_FromLong(it.key());

        if (!kobj)
        {
            Py_DECREF(d);

            return 0;
        }

        QByteArray *v = new QByteArray(it.value());
        PyObject *vobj = sipConvertFromNewType(v, sipType_QByteArray,
                sipTransferObj);

        if (!vobj)
        {
            delete v;
            Py_DECREF(kobj);
            Py_DECREF(d);

            return 0;
        }

        int rc = PyDict_SetItem(d, kobj, vobj);

        Py_DECREF(vobj);
        Py_DECREF(kobj);

        if (rc < 0)
        {
            Py_DECREF(d);

            return 0;
        }

        ++it;
    }

    return d;
#line 13233 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QHash_1800_0100QByteArray = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_10554,     /* QHash<int,QByteArray> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QHash_1800_0100QByteArray,
    array_QHash_1800_0100QByteArray,
    copy_QHash_1800_0100QByteArray,
    release_QHash_1800_0100QByteArray,
    convertTo_QHash_1800_0100QByteArray,
    convertFrom_QHash_1800_0100QByteArray
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 13269 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QPersistentModelIndex(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QPersistentModelIndex(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QPersistentModelIndex> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QPersistentModelIndex> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QPersistentModelIndex(SIP_SSIZE_T);}
static void *array_QList_0100QPersistentModelIndex(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QPersistentModelIndex>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QPersistentModelIndex(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QPersistentModelIndex(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QPersistentModelIndex>(reinterpret_cast<const QList< ::QPersistentModelIndex> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QPersistentModelIndex(void *, int);}
static void release_QList_0100QPersistentModelIndex(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QPersistentModelIndex> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QPersistentModelIndex(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QPersistentModelIndex(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QPersistentModelIndex> **sipCppPtr = reinterpret_cast<QList< ::QPersistentModelIndex> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QPersistentModelIndex> *ql = new QList<QPersistentModelIndex>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QPersistentModelIndex *t = reinterpret_cast<QPersistentModelIndex *>(
                sipForceConvertToType(itm, sipType_QPersistentModelIndex, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QPersistentModelIndex' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QPersistentModelIndex, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 13379 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QPersistentModelIndex(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QPersistentModelIndex(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QPersistentModelIndex> *sipCpp = reinterpret_cast<QList< ::QPersistentModelIndex> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QPersistentModelIndex *t = new QPersistentModelIndex(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QPersistentModelIndex,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 13412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QPersistentModelIndex = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_2966,     /* QList<QPersistentModelIndex> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QPersistentModelIndex,
    array_QList_0100QPersistentModelIndex,
    copy_QList_0100QPersistentModelIndex,
    release_QList_0100QPersistentModelIndex,
    convertTo_QList_0100QPersistentModelIndex,
    convertFrom_QList_0100QPersistentModelIndex
};

#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 13444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 13448 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QMap_1800_0100QVariant(void *, SIP_SSIZE_T, void *);}
static void assign_QMap_1800_0100QVariant(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QMap<int, ::QVariant> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QMap<int, ::QVariant> *>(sipSrc);
}


extern "C" {static void *array_QMap_1800_0100QVariant(SIP_SSIZE_T);}
static void *array_QMap_1800_0100QVariant(SIP_SSIZE_T sipNrElem)
{
    return new QMap<int, ::QVariant>[sipNrElem];
}


extern "C" {static void *copy_QMap_1800_0100QVariant(const void *, SIP_SSIZE_T);}
static void *copy_QMap_1800_0100QVariant(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMap<int, ::QVariant>(reinterpret_cast<const QMap<int, ::QVariant> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QMap_1800_0100QVariant(void *, int);}
static void release_QMap_1800_0100QVariant(void *ptr, int)
{
    delete reinterpret_cast<QMap<int, ::QVariant> *>(ptr);
}



extern "C" {static int convertTo_QMap_1800_0100QVariant(PyObject *, void **, int *, PyObject *);}
static int convertTo_QMap_1800_0100QVariant(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QMap<int, ::QVariant> **sipCppPtr = reinterpret_cast<QMap<int, ::QVariant> **>(sipCppPtrV);

#line 201 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
    if (!sipIsErr)
        return PyDict_Check(sipPy);

    QMap<int, QVariant> *qm = new QMap<int, QVariant>;

    Py_ssize_t pos = 0;
    PyObject *kobj, *vobj;
 
    while (PyDict_Next(sipPy, &pos, &kobj, &vobj))
    {
        int k = sipLong_AsInt(kobj);

        if (PyErr_Occurred())
        {
            if (PyErr_ExceptionMatches(PyExc_TypeError))
                PyErr_Format(PyExc_TypeError,
                        "a dict key has type '%s' but 'int' is expected",
                        sipPyTypeName(Py_TYPE(kobj)));

            delete qm;
            *sipIsErr = 1;

            return 0;
        }

        int vstate;
        QVariant *v = reinterpret_cast<QVariant *>(
                sipForceConvertToType(vobj, sipType_QVariant, sipTransferObj,
                        SIP_NOT_NONE, &vstate, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "a dict value has type '%s' but 'QVariant' is expected",
                    sipPyTypeName(Py_TYPE(vobj)));

            delete qm;

            return 0;
        }

        qm->insert(k, *v);

        sipReleaseType(v, sipType_QVariant, vstate);
    }
 
    *sipCppPtr = qm;
 
    return sipGetState(sipTransferObj);
#line 13536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QMap_1800_0100QVariant(void *, PyObject *);}
static PyObject *convertFrom_QMap_1800_0100QVariant(void *sipCppV, PyObject *sipTransferObj)
{
   QMap<int, ::QVariant> *sipCpp = reinterpret_cast<QMap<int, ::QVariant> *>(sipCppV);

#line 150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
    PyObject *d = PyDict_New();

    if (!d)
        return 0;

    QMap<int, QVariant>::const_iterator it = sipCpp->constBegin();
    QMap<int, QVariant>::const_iterator end = sipCpp->constEnd();

    while (it != end)
    {
        PyObject *kobj = SIPLong_FromLong(it.key());

        if (!kobj)
        {
            Py_DECREF(d);

            return 0;
        }

        QVariant *v = new QVariant(it.value());
        PyObject *vobj = sipConvertFromNewType(v, sipType_QVariant,
                sipTransferObj);

        if (!vobj)
        {
            delete v;
            Py_DECREF(kobj);
            Py_DECREF(d);

            return 0;
        }

        int rc = PyDict_SetItem(d, kobj, vobj);

        Py_DECREF(vobj);
        Py_DECREF(kobj);

        if (rc < 0)
        {
            Py_DECREF(d);

            return 0;
        }

        ++it;
    }

    return d;
#line 13594 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QMap_1800_0100QVariant = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_17238,     /* QMap<int,QVariant> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QMap_1800_0100QVariant,
    array_QMap_1800_0100QVariant,
    copy_QMap_1800_0100QVariant,
    release_QMap_1800_0100QVariant,
    convertTo_QMap_1800_0100QVariant,
    convertFrom_QMap_1800_0100QVariant
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 13632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QAbstractEventDispatcher_TimerInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QAbstractEventDispatcher_TimerInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QAbstractEventDispatcher::TimerInfo> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QAbstractEventDispatcher::TimerInfo> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QAbstractEventDispatcher_TimerInfo(SIP_SSIZE_T);}
static void *array_QList_0100QAbstractEventDispatcher_TimerInfo(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QAbstractEventDispatcher::TimerInfo>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QAbstractEventDispatcher_TimerInfo(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QAbstractEventDispatcher_TimerInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QAbstractEventDispatcher::TimerInfo>(reinterpret_cast<const QList< ::QAbstractEventDispatcher::TimerInfo> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QAbstractEventDispatcher_TimerInfo(void *, int);}
static void release_QList_0100QAbstractEventDispatcher_TimerInfo(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QAbstractEventDispatcher::TimerInfo> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QAbstractEventDispatcher_TimerInfo(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QAbstractEventDispatcher_TimerInfo(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QAbstractEventDispatcher::TimerInfo> **sipCppPtr = reinterpret_cast<QList< ::QAbstractEventDispatcher::TimerInfo> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QAbstractEventDispatcher::TimerInfo> *ql = new QList<QAbstractEventDispatcher::TimerInfo>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QAbstractEventDispatcher::TimerInfo *t = reinterpret_cast<QAbstractEventDispatcher::TimerInfo *>(
                sipForceConvertToType(itm, sipType_QAbstractEventDispatcher_TimerInfo, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QAbstractEventDispatcher::TimerInfo' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QAbstractEventDispatcher_TimerInfo, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 13742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QAbstractEventDispatcher_TimerInfo(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QAbstractEventDispatcher_TimerInfo(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QAbstractEventDispatcher::TimerInfo> *sipCpp = reinterpret_cast<QList< ::QAbstractEventDispatcher::TimerInfo> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QAbstractEventDispatcher::TimerInfo *t = new QAbstractEventDispatcher::TimerInfo(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QAbstractEventDispatcher_TimerInfo,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 13775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QAbstractEventDispatcher_TimerInfo = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_101,     /* QList<QAbstractEventDispatcher::TimerInfo> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QAbstractEventDispatcher_TimerInfo,
    array_QList_0100QAbstractEventDispatcher_TimerInfo,
    copy_QList_0100QAbstractEventDispatcher_TimerInfo,
    release_QList_0100QAbstractEventDispatcher_TimerInfo,
    convertTo_QList_0100QAbstractEventDispatcher_TimerInfo,
    convertFrom_QList_0100QAbstractEventDispatcher_TimerInfo
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13807 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 13811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QByteArray(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QByteArray(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QByteArray> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QByteArray> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QByteArray(SIP_SSIZE_T);}
static void *array_QList_0100QByteArray(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QByteArray>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QByteArray(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QByteArray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QByteArray>(reinterpret_cast<const QList< ::QByteArray> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QByteArray(void *, int);}
static void release_QList_0100QByteArray(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QByteArray> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QByteArray(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QByteArray(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QByteArray> **sipCppPtr = reinterpret_cast<QList< ::QByteArray> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QByteArray> *ql = new QList<QByteArray>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QByteArray *t = reinterpret_cast<QByteArray *>(
                sipForceConvertToType(itm, sipType_QByteArray, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QByteArray' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QByteArray, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 13921 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QByteArray(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QByteArray(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QByteArray> *sipCpp = reinterpret_cast<QList< ::QByteArray> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QByteArray *t = new QByteArray(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QByteArray,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 13954 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QByteArray = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_20183,     /* QList<QByteArray> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QByteArray,
    array_QList_0100QByteArray,
    copy_QList_0100QByteArray,
    release_QList_0100QByteArray,
    convertTo_QList_0100QByteArray,
    convertFrom_QList_0100QByteArray
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 13986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 13990 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QVector_0100QXmlStreamNotationDeclaration(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QXmlStreamNotationDeclaration(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QXmlStreamNotationDeclaration> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QXmlStreamNotationDeclaration> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QXmlStreamNotationDeclaration(SIP_SSIZE_T);}
static void *array_QVector_0100QXmlStreamNotationDeclaration(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QXmlStreamNotationDeclaration>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QXmlStreamNotationDeclaration(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QXmlStreamNotationDeclaration(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QXmlStreamNotationDeclaration>(reinterpret_cast<const QVector< ::QXmlStreamNotationDeclaration> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QXmlStreamNotationDeclaration(void *, int);}
static void release_QVector_0100QXmlStreamNotationDeclaration(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QXmlStreamNotationDeclaration> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QXmlStreamNotationDeclaration(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QXmlStreamNotationDeclaration(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QXmlStreamNotationDeclaration> **sipCppPtr = reinterpret_cast<QVector< ::QXmlStreamNotationDeclaration> **>(sipCppPtrV);

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QXmlStreamNotationDeclaration> *qv = new QVector<QXmlStreamNotationDeclaration>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QXmlStreamNotationDeclaration *t = reinterpret_cast<QXmlStreamNotationDeclaration *>(
                sipForceConvertToType(itm, sipType_QXmlStreamNotationDeclaration, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QXmlStreamNotationDeclaration' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QXmlStreamNotationDeclaration, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 14100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QXmlStreamNotationDeclaration(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QXmlStreamNotationDeclaration(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QXmlStreamNotationDeclaration> *sipCpp = reinterpret_cast<QVector< ::QXmlStreamNotationDeclaration> *>(sipCppV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QXmlStreamNotationDeclaration *t = new QXmlStreamNotationDeclaration(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QXmlStreamNotationDeclaration,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 14133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_0100QXmlStreamNotationDeclaration = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_436,     /* QVector<QXmlStreamNotationDeclaration> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QXmlStreamNotationDeclaration,
    array_QVector_0100QXmlStreamNotationDeclaration,
    copy_QVector_0100QXmlStreamNotationDeclaration,
    release_QVector_0100QXmlStreamNotationDeclaration,
    convertTo_QVector_0100QXmlStreamNotationDeclaration,
    convertFrom_QVector_0100QXmlStreamNotationDeclaration
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 14165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 14169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QVector_0100QXmlStreamNamespaceDeclaration(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QXmlStreamNamespaceDeclaration(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QXmlStreamNamespaceDeclaration> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QXmlStreamNamespaceDeclaration> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QXmlStreamNamespaceDeclaration(SIP_SSIZE_T);}
static void *array_QVector_0100QXmlStreamNamespaceDeclaration(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QXmlStreamNamespaceDeclaration>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QXmlStreamNamespaceDeclaration(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QXmlStreamNamespaceDeclaration(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QXmlStreamNamespaceDeclaration>(reinterpret_cast<const QVector< ::QXmlStreamNamespaceDeclaration> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QXmlStreamNamespaceDeclaration(void *, int);}
static void release_QVector_0100QXmlStreamNamespaceDeclaration(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QXmlStreamNamespaceDeclaration> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QXmlStreamNamespaceDeclaration(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QXmlStreamNamespaceDeclaration(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QXmlStreamNamespaceDeclaration> **sipCppPtr = reinterpret_cast<QVector< ::QXmlStreamNamespaceDeclaration> **>(sipCppPtrV);

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QXmlStreamNamespaceDeclaration> *qv = new QVector<QXmlStreamNamespaceDeclaration>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QXmlStreamNamespaceDeclaration *t = reinterpret_cast<QXmlStreamNamespaceDeclaration *>(
                sipForceConvertToType(itm, sipType_QXmlStreamNamespaceDeclaration, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QXmlStreamNamespaceDeclaration' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QXmlStreamNamespaceDeclaration, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 14279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QXmlStreamNamespaceDeclaration(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QXmlStreamNamespaceDeclaration(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QXmlStreamNamespaceDeclaration> *sipCpp = reinterpret_cast<QVector< ::QXmlStreamNamespaceDeclaration> *>(sipCppV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QXmlStreamNamespaceDeclaration *t = new QXmlStreamNamespaceDeclaration(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QXmlStreamNamespaceDeclaration,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 14312 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_0100QXmlStreamNamespaceDeclaration = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_356,     /* QVector<QXmlStreamNamespaceDeclaration> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QXmlStreamNamespaceDeclaration,
    array_QVector_0100QXmlStreamNamespaceDeclaration,
    copy_QVector_0100QXmlStreamNamespaceDeclaration,
    release_QVector_0100QXmlStreamNamespaceDeclaration,
    convertTo_QVector_0100QXmlStreamNamespaceDeclaration,
    convertFrom_QVector_0100QXmlStreamNamespaceDeclaration
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 14344 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 14348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QVector_0100QXmlStreamEntityDeclaration(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QXmlStreamEntityDeclaration(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QXmlStreamEntityDeclaration> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QXmlStreamEntityDeclaration> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QXmlStreamEntityDeclaration(SIP_SSIZE_T);}
static void *array_QVector_0100QXmlStreamEntityDeclaration(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QXmlStreamEntityDeclaration>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QXmlStreamEntityDeclaration(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QXmlStreamEntityDeclaration(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QXmlStreamEntityDeclaration>(reinterpret_cast<const QVector< ::QXmlStreamEntityDeclaration> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QXmlStreamEntityDeclaration(void *, int);}
static void release_QVector_0100QXmlStreamEntityDeclaration(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QXmlStreamEntityDeclaration> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QXmlStreamEntityDeclaration(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QXmlStreamEntityDeclaration(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QXmlStreamEntityDeclaration> **sipCppPtr = reinterpret_cast<QVector< ::QXmlStreamEntityDeclaration> **>(sipCppPtrV);

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QXmlStreamEntityDeclaration> *qv = new QVector<QXmlStreamEntityDeclaration>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QXmlStreamEntityDeclaration *t = reinterpret_cast<QXmlStreamEntityDeclaration *>(
                sipForceConvertToType(itm, sipType_QXmlStreamEntityDeclaration, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QXmlStreamEntityDeclaration' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QXmlStreamEntityDeclaration, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 14458 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QXmlStreamEntityDeclaration(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QXmlStreamEntityDeclaration(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QXmlStreamEntityDeclaration> *sipCpp = reinterpret_cast<QVector< ::QXmlStreamEntityDeclaration> *>(sipCppV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QXmlStreamEntityDeclaration *t = new QXmlStreamEntityDeclaration(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QXmlStreamEntityDeclaration,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 14491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_0100QXmlStreamEntityDeclaration = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_668,     /* QVector<QXmlStreamEntityDeclaration> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QXmlStreamEntityDeclaration,
    array_QVector_0100QXmlStreamEntityDeclaration,
    copy_QVector_0100QXmlStreamEntityDeclaration,
    release_QVector_0100QXmlStreamEntityDeclaration,
    convertTo_QVector_0100QXmlStreamEntityDeclaration,
    convertFrom_QVector_0100QXmlStreamEntityDeclaration
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 14523 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 14527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QVariant(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QVariant(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QVariant> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QVariant> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QVariant(SIP_SSIZE_T);}
static void *array_QList_0100QVariant(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QVariant>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QVariant(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QVariant(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QVariant>(reinterpret_cast<const QList< ::QVariant> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QVariant(void *, int);}
static void release_QList_0100QVariant(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QVariant> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QVariant(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QVariant(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QVariant> **sipCppPtr = reinterpret_cast<QList< ::QVariant> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QVariant> *ql = new QList<QVariant>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QVariant *t = reinterpret_cast<QVariant *>(
                sipForceConvertToType(itm, sipType_QVariant, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QVariant' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QVariant, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 14637 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QVariant(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QVariant(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QVariant> *sipCpp = reinterpret_cast<QList< ::QVariant> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QVariant *t = new QVariant(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QVariant,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 14670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QVariant = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_26608,     /* QList<QVariant> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QVariant,
    array_QList_0100QVariant,
    copy_QList_0100QVariant,
    release_QList_0100QVariant,
    convertTo_QList_0100QVariant,
    convertFrom_QList_0100QVariant
};

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 14702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 14706 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 14709 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QHash_0100QString_0100QVariant(void *, SIP_SSIZE_T, void *);}
static void assign_QHash_0100QString_0100QVariant(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QHash< ::QString, ::QVariant> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QHash< ::QString, ::QVariant> *>(sipSrc);
}


extern "C" {static void *array_QHash_0100QString_0100QVariant(SIP_SSIZE_T);}
static void *array_QHash_0100QString_0100QVariant(SIP_SSIZE_T sipNrElem)
{
    return new QHash< ::QString, ::QVariant>[sipNrElem];
}


extern "C" {static void *copy_QHash_0100QString_0100QVariant(const void *, SIP_SSIZE_T);}
static void *copy_QHash_0100QString_0100QVariant(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QHash< ::QString, ::QVariant>(reinterpret_cast<const QHash< ::QString, ::QVariant> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QHash_0100QString_0100QVariant(void *, int);}
static void release_QHash_0100QString_0100QVariant(void *ptr, int)
{
    delete reinterpret_cast<QHash< ::QString, ::QVariant> *>(ptr);
}



extern "C" {static int convertTo_QHash_0100QString_0100QVariant(PyObject *, void **, int *, PyObject *);}
static int convertTo_QHash_0100QString_0100QVariant(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QHash< ::QString, ::QVariant> **sipCppPtr = reinterpret_cast<QHash< ::QString, ::QVariant> **>(sipCppPtrV);

#line 85 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
    if (!sipIsErr)
        return PyDict_Check(sipPy);

    QHash<QString, QVariant> *qh = new QHash<QString, QVariant>;

    Py_ssize_t pos = 0;
    PyObject *kobj, *vobj;
 
    while (PyDict_Next(sipPy, &pos, &kobj, &vobj))
    {
        int kstate;
        QString *k = reinterpret_cast<QString *>(
                sipForceConvertToType(kobj, sipType_QString, sipTransferObj,
                        SIP_NOT_NONE, &kstate, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "a dict key has type '%s' but 'QString' is expected",
                    sipPyTypeName(Py_TYPE(kobj)));

            delete qh;

            return 0;
        }

        int vstate;
        QVariant *v = reinterpret_cast<QVariant *>(
                sipForceConvertToType(vobj, sipType_QVariant, sipTransferObj,
                        SIP_NOT_NONE, &vstate, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "a dict value has type '%s' but 'QVariant' is expected",
                    sipPyTypeName(Py_TYPE(vobj)));

            sipReleaseType(k, sipType_QString, kstate);
            delete qh;

            return 0;
        }

        qh->insert(*k, *v);

        sipReleaseType(v, sipType_QVariant, vstate);
        sipReleaseType(k, sipType_QString, kstate);
    }
 
    *sipCppPtr = qh;
 
    return sipGetState(sipTransferObj);
#line 14800 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QHash_0100QString_0100QVariant(void *, PyObject *);}
static PyObject *convertFrom_QHash_0100QString_0100QVariant(void *sipCppV, PyObject *sipTransferObj)
{
   QHash< ::QString, ::QVariant> *sipCpp = reinterpret_cast<QHash< ::QString, ::QVariant> *>(sipCppV);

#line 31 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
    PyObject *d = PyDict_New();

    if (!d)
        return 0;

    QHash<QString, QVariant>::const_iterator it = sipCpp->constBegin();
    QHash<QString, QVariant>::const_iterator end = sipCpp->constEnd();

    while (it != end)
    {
        QString *k = new QString(it.key());
        PyObject *kobj = sipConvertFromNewType(k, sipType_QString,
                sipTransferObj);

        if (!kobj)
        {
            delete k;
            Py_DECREF(d);

            return 0;
        }

        QVariant *v = new QVariant(it.value());
        PyObject *vobj = sipConvertFromNewType(v, sipType_QVariant,
                sipTransferObj);

        if (!vobj)
        {
            delete v;
            Py_DECREF(kobj);
            Py_DECREF(d);

            return 0;
        }

        int rc = PyDict_SetItem(d, kobj, vobj);

        Py_DECREF(vobj);
        Py_DECREF(kobj);

        if (rc < 0)
        {
            Py_DECREF(d);

            return 0;
        }

        ++it;
    }

    return d;
#line 14861 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QHash_0100QString_0100QVariant = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_7576,     /* QHash<QString,QVariant> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QHash_0100QString_0100QVariant,
    array_QHash_0100QString_0100QVariant,
    copy_QHash_0100QString_0100QVariant,
    release_QHash_0100QString_0100QVariant,
    convertTo_QHash_0100QString_0100QVariant,
    convertFrom_QHash_0100QString_0100QVariant
};

#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 14894 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 14898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QVector_0600QPair_2400_0100QVariant(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0600QPair_2400_0100QVariant(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector<QPair< ::qreal,QVariant> > *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector<QPair< ::qreal,QVariant> > *>(sipSrc);
}


extern "C" {static void *array_QVector_0600QPair_2400_0100QVariant(SIP_SSIZE_T);}
static void *array_QVector_0600QPair_2400_0100QVariant(SIP_SSIZE_T sipNrElem)
{
    return new QVector<QPair< ::qreal,QVariant> >[sipNrElem];
}


extern "C" {static void *copy_QVector_0600QPair_2400_0100QVariant(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0600QPair_2400_0100QVariant(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector<QPair< ::qreal,QVariant> >(reinterpret_cast<const QVector<QPair< ::qreal,QVariant> > *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0600QPair_2400_0100QVariant(void *, int);}
static void release_QVector_0600QPair_2400_0100QVariant(void *ptr, int)
{
    delete reinterpret_cast<QVector<QPair< ::qreal,QVariant> > *>(ptr);
}



extern "C" {static int convertTo_QVector_0600QPair_2400_0100QVariant(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0600QPair_2400_0100QVariant(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector<QPair< ::qreal,QVariant> > **sipCppPtr = reinterpret_cast<QVector<QPair< ::qreal,QVariant> > **>(sipCppPtrV);

#line 171 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QPair<qreal, QVariant> > *qv = new QVector<QPair<qreal, QVariant> >;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *seq = PyIter_Next(iter);

        if (!seq)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        Py_ssize_t sub_len;

        if (PySequence_Check(seq)
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(seq)
#endif
                && !PyUnicode_Check(seq))
            sub_len = PySequence_Size(seq);
        else
            sub_len = -1;

        if (sub_len != 2)
        {
            if (sub_len < 0)
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but a 2 element non-string sequence is expected",
                        i, sipPyTypeName(Py_TYPE(seq)));
            else
                PyErr_Format(PyExc_TypeError,
                        "index %zd is a sequence of %zd sub-elements but 2 sub-elements are expected",
                        i, sub_len);

            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyObject *itm1 = PySequence_GetItem(seq, 0);

        if (!itm1)
        {
            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyErr_Clear();
        qreal s1 = PyFloat_AsDouble(itm1);

        if (PyErr_Occurred())
        {
            PyErr_Format(PyExc_TypeError,
                    "the first sub-element of index %zd has type '%s' but 'float' is expected",
                    i, sipPyTypeName(Py_TYPE(itm1)));

            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyObject *itm2 = PySequence_GetItem(seq, 1);

        if (!itm2)
        {
            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        int state2;
        QVariant *s2 = reinterpret_cast<QVariant *>(
                sipForceConvertToType(itm2, sipType_QVariant, sipTransferObj,
                        SIP_NOT_NONE, &state2, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "the second sub-element of index %zd has type '%s' but 'QVariant' is expected",
                    i, sipPyTypeName(Py_TYPE(itm2)));

            Py_DECREF(itm2);
            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(QPair<qreal, QVariant>(s1, *s2));

        sipReleaseType(s2, sipType_QVariant, state2);
        Py_DECREF(itm2);
        Py_DECREF(itm1);
        Py_DECREF(seq);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 15085 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0600QPair_2400_0100QVariant(void *, PyObject *);}
static PyObject *convertFrom_QVector_0600QPair_2400_0100QVariant(void *sipCppV, PyObject *sipTransferObj)
{
   QVector<QPair< ::qreal,QVariant> > *sipCpp = reinterpret_cast<QVector<QPair< ::qreal,QVariant> > *>(sipCppV);

#line 144 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        const QPair<qreal, QVariant> &p = sipCpp->at(i);
        QVariant *s2 = new QVariant(p.second);
        PyObject *pobj = sipBuildResult(NULL, "(dN)", (double)p.first, s2,
                sipType_QVariant, sipTransferObj);

        if (!pobj)
        {
            delete s2;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 15119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_0600QPair_2400_0100QVariant = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1948,     /* QVector<QPair<qreal,QVariant> > */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0600QPair_2400_0100QVariant,
    array_QVector_0600QPair_2400_0100QVariant,
    copy_QVector_0600QPair_2400_0100QVariant,
    release_QVector_0600QPair_2400_0100QVariant,
    convertTo_QVector_0600QPair_2400_0100QVariant,
    convertFrom_QVector_0600QPair_2400_0100QVariant
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 15151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 15157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QVector_0100QTimeZone_OffsetData(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QTimeZone_OffsetData(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QTimeZone::OffsetData> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QTimeZone::OffsetData> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QTimeZone_OffsetData(SIP_SSIZE_T);}
static void *array_QVector_0100QTimeZone_OffsetData(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QTimeZone::OffsetData>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QTimeZone_OffsetData(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QTimeZone_OffsetData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QTimeZone::OffsetData>(reinterpret_cast<const QVector< ::QTimeZone::OffsetData> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QTimeZone_OffsetData(void *, int);}
static void release_QVector_0100QTimeZone_OffsetData(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QTimeZone::OffsetData> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QTimeZone_OffsetData(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QTimeZone_OffsetData(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QTimeZone::OffsetData> **sipCppPtr = reinterpret_cast<QVector< ::QTimeZone::OffsetData> **>(sipCppPtrV);

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QTimeZone::OffsetData> *qv = new QVector<QTimeZone::OffsetData>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QTimeZone::OffsetData *t = reinterpret_cast<QTimeZone::OffsetData *>(
                sipForceConvertToType(itm, sipType_QTimeZone_OffsetData, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QTimeZone::OffsetData' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QTimeZone_OffsetData, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 15267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QTimeZone_OffsetData(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QTimeZone_OffsetData(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QTimeZone::OffsetData> *sipCpp = reinterpret_cast<QVector< ::QTimeZone::OffsetData> *>(sipCppV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QTimeZone::OffsetData *t = new QTimeZone::OffsetData(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QTimeZone_OffsetData,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 15300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_0100QTimeZone_OffsetData = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_2331,     /* QVector<QTimeZone::OffsetData> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QTimeZone_OffsetData,
    array_QVector_0100QTimeZone_OffsetData,
    copy_QVector_0100QTimeZone_OffsetData,
    release_QVector_0100QTimeZone_OffsetData,
    convertTo_QVector_0100QTimeZone_OffsetData,
    convertFrom_QVector_0100QTimeZone_OffsetData
};

#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 15332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 15336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0101QObject(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0101QObject(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QObject*> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QObject*> *>(sipSrc);
}


extern "C" {static void *array_QList_0101QObject(SIP_SSIZE_T);}
static void *array_QList_0101QObject(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QObject*>[sipNrElem];
}


extern "C" {static void *copy_QList_0101QObject(const void *, SIP_SSIZE_T);}
static void *copy_QList_0101QObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QObject*>(reinterpret_cast<const QList< ::QObject*> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0101QObject(void *, int);}
static void release_QList_0101QObject(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QObject*> *>(ptr);
}



extern "C" {static int convertTo_QList_0101QObject(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0101QObject(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QObject*> **sipCppPtr = reinterpret_cast<QList< ::QObject*> **>(sipCppPtrV);

#line 184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QObject *> *ql = new QList<QObject *>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        QObject *t = reinterpret_cast<QObject *>(
                sipForceConvertToType(itm, sipType_QObject, sipTransferObj, 0,
                        0, sipIsErr));
 
        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QObject' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(t);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 15444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0101QObject(void *, PyObject *);}
static PyObject *convertFrom_QList_0101QObject(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QObject*> *sipCpp = reinterpret_cast<QList< ::QObject*> *>(sipCppV);

#line 153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    int gc_enabled = sipEnableGC(0);
    PyObject *l = PyList_New(sipCpp->size());

    if (l)
    {
        for (int i = 0; i < sipCpp->size(); ++i)
        {
            QObject *t = sipCpp->at(i);

            // The explicit (void *) cast allows QObject to be const.
            PyObject *tobj = sipConvertFromType((void *)t, sipType_QObject,
                    sipTransferObj);

            if (!tobj)
            {
                Py_DECREF(l);
                l = 0;

                break;
            }

            PyList_SetItem(l, i, tobj);
        }
    }

    sipEnableGC(gc_enabled);

    return l;
#line 15482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0101QObject = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_26624,     /* QList<QObject*> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0101QObject,
    array_QList_0101QObject,
    copy_QList_0101QObject,
    release_QList_0101QObject,
    convertTo_QList_0101QObject,
    convertFrom_QList_0101QObject
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 15514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 15518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QModelIndex(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QModelIndex(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QModelIndex> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QModelIndex> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QModelIndex(SIP_SSIZE_T);}
static void *array_QList_0100QModelIndex(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QModelIndex>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QModelIndex(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QModelIndex(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QModelIndex>(reinterpret_cast<const QList< ::QModelIndex> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QModelIndex(void *, int);}
static void release_QList_0100QModelIndex(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QModelIndex> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QModelIndex(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QModelIndex(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QModelIndex> **sipCppPtr = reinterpret_cast<QList< ::QModelIndex> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QModelIndex> *ql = new QList<QModelIndex>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QModelIndex *t = reinterpret_cast<QModelIndex *>(
                sipForceConvertToType(itm, sipType_QModelIndex, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QModelIndex' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QModelIndex, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 15628 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QModelIndex(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QModelIndex(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QModelIndex> *sipCpp = reinterpret_cast<QList< ::QModelIndex> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QModelIndex *t = new QModelIndex(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QModelIndex,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 15661 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QModelIndex = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_17257,     /* QList<QModelIndex> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QModelIndex,
    array_QList_0100QModelIndex,
    copy_QList_0100QModelIndex,
    release_QList_0100QModelIndex,
    convertTo_QList_0100QModelIndex,
    convertFrom_QList_0100QModelIndex
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 15693 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 15697 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100QFileInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QFileInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QFileInfo> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QFileInfo> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QFileInfo(SIP_SSIZE_T);}
static void *array_QList_0100QFileInfo(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QFileInfo>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QFileInfo(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QFileInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QFileInfo>(reinterpret_cast<const QList< ::QFileInfo> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QFileInfo(void *, int);}
static void release_QList_0100QFileInfo(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QFileInfo> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QFileInfo(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QFileInfo(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QFileInfo> **sipCppPtr = reinterpret_cast<QList< ::QFileInfo> **>(sipCppPtrV);

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QFileInfo> *ql = new QList<QFileInfo>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QFileInfo *t = reinterpret_cast<QFileInfo *>(
                sipForceConvertToType(itm, sipType_QFileInfo, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QFileInfo' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QFileInfo, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 15807 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QFileInfo(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QFileInfo(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QFileInfo> *sipCpp = reinterpret_cast<QList< ::QFileInfo> *>(sipCppV);

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QFileInfo *t = new QFileInfo(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QFileInfo,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 15840 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100QFileInfo = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_23259,     /* QList<QFileInfo> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QFileInfo,
    array_QList_0100QFileInfo,
    copy_QList_0100QFileInfo,
    release_QList_0100QFileInfo,
    convertTo_QList_0100QFileInfo,
    convertFrom_QList_0100QFileInfo
};

#line 435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 15872 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QVector_1600(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_1600(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector< ::quint16> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector< ::quint16> *>(sipSrc);
}


extern "C" {static void *array_QVector_1600(SIP_SSIZE_T);}
static void *array_QVector_1600(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector< ::quint16>[sipNrElem];
}


extern "C" {static void *copy_QVector_1600(const void *, SIP_SSIZE_T);}
static void *copy_QVector_1600(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector< ::quint16>(reinterpret_cast<const  ::QVector< ::quint16> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_1600(void *, int);}
static void release_QVector_1600(void *ptr, int)
{
    delete reinterpret_cast< ::QVector< ::quint16> *>(ptr);
}



extern "C" {static int convertTo_QVector_1600(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_1600(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVector< ::quint16> **sipCppPtr = reinterpret_cast< ::QVector< ::quint16> **>(sipCppPtrV);

#line 462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<quint16> *qv = new QVector<quint16>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        quint16 val = sipLong_AsUnsignedShort(itm);

        if (PyErr_Occurred())
        {
            if (PyErr_ExceptionMatches(PyExc_TypeError))
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but 'int' is expected", i,
                        sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        qv->append(val);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 15981 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_1600(void *, PyObject *);}
static PyObject *convertFrom_QVector_1600(void *sipCppV, PyObject *)
{
    ::QVector< ::quint16> *sipCpp = reinterpret_cast< ::QVector< ::quint16> *>(sipCppV);

#line 439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *pobj = SIPLong_FromLong(sipCpp->value(i));

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 16011 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_1600 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_23276,     /* QVector<quint16> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_1600,
    array_QVector_1600,
    copy_QVector_1600,
    release_QVector_1600,
    convertTo_QVector_1600,
    convertFrom_QVector_1600
};

#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 16043 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QVector_1800(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_1800(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVector<int> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVector<int> *>(sipSrc);
}


extern "C" {static void *array_QVector_1800(SIP_SSIZE_T);}
static void *array_QVector_1800(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector<int>[sipNrElem];
}


extern "C" {static void *copy_QVector_1800(const void *, SIP_SSIZE_T);}
static void *copy_QVector_1800(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector<int>(reinterpret_cast<const  ::QVector<int> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_1800(void *, int);}
static void release_QVector_1800(void *ptr, int)
{
    delete reinterpret_cast< ::QVector<int> *>(ptr);
}



extern "C" {static int convertTo_QVector_1800(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_1800(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVector<int> **sipCppPtr = reinterpret_cast< ::QVector<int> **>(sipCppPtrV);

#line 355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<int> *qv = new QVector<int>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int val = sipLong_AsInt(itm);

        if (PyErr_Occurred())
        {
            if (PyErr_ExceptionMatches(PyExc_TypeError))
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but 'int' is expected", i,
                        sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        qv->append(val);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 16152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_1800(void *, PyObject *);}
static PyObject *convertFrom_QVector_1800(void *sipCppV, PyObject *)
{
    ::QVector<int> *sipCpp = reinterpret_cast< ::QVector<int> *>(sipCppV);

#line 332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *pobj = SIPLong_FromLong(sipCpp->value(i));

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 16182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_1800 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_38445,     /* QVector<int> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_1800,
    array_QVector_1800,
    copy_QVector_1800,
    release_QVector_1800,
    convertTo_QVector_1800,
    convertFrom_QVector_1800
};

#line 250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 16214 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QPair_1800_1800(void *, SIP_SSIZE_T, void *);}
static void assign_QPair_1800_1800(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPair<int,int> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPair<int,int> *>(sipSrc);
}


extern "C" {static void *array_QPair_1800_1800(SIP_SSIZE_T);}
static void *array_QPair_1800_1800(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPair<int,int>[sipNrElem];
}


extern "C" {static void *copy_QPair_1800_1800(const void *, SIP_SSIZE_T);}
static void *copy_QPair_1800_1800(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPair<int,int>(reinterpret_cast<const  ::QPair<int,int> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QPair_1800_1800(void *, int);}
static void release_QPair_1800_1800(void *ptr, int)
{
    delete reinterpret_cast< ::QPair<int,int> *>(ptr);
}



extern "C" {static int convertTo_QPair_1800_1800(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPair_1800_1800(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPair<int,int> **sipCppPtr = reinterpret_cast< ::QPair<int,int> **>(sipCppPtrV);

#line 258 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qpair.sip"
    if (!sipIsErr)
        return (PySequence_Check(sipPy)
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));

    Py_ssize_t len = PySequence_Size(sipPy);

    if (len != 2)
    {
        // A negative length should only be an internal error so let the
        // original exception stand.
        if (len >= 0)
            PyErr_Format(PyExc_TypeError,
                    "sequence has %zd elements but 2 elements are expected",
                    len);

        *sipIsErr = 1;

        return 0;
    }

    PyObject *firstobj = PySequence_GetItem(sipPy, 0);

    if (!firstobj)
    {
        *sipIsErr = 1;

        return 0;
    }

    int first = sipLong_AsInt(firstobj);

    if (PyErr_Occurred())
    {
        if (PyErr_ExceptionMatches(PyExc_TypeError))
            PyErr_Format(PyExc_TypeError,
                    "the first element has type '%s' but 'int' is expected",
                    sipPyTypeName(Py_TYPE(firstobj)));

        *sipIsErr = 1;

        return 0;
    }

    PyObject *secondobj = PySequence_GetItem(sipPy, 1);

    if (!secondobj)
    {
        Py_DECREF(firstobj);
        *sipIsErr = 1;

        return 0;
    }

    int second = sipLong_AsInt(secondobj);

    if (PyErr_Occurred())
    {
        if (PyErr_ExceptionMatches(PyExc_TypeError))
            PyErr_Format(PyExc_TypeError,
                    "the second element has type '%s' but 'int' is expected",
                    sipPyTypeName(Py_TYPE(secondobj)));

        Py_DECREF(secondobj);
        Py_DECREF(firstobj);
        *sipIsErr = 1;

        return 0;
    }

    *sipCppPtr = new QPair<int, int>(first, second);

    Py_DECREF(secondobj);
    Py_DECREF(firstobj);
 
    return sipGetState(sipTransferObj);
#line 16332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QPair_1800_1800(void *, PyObject *);}
static PyObject *convertFrom_QPair_1800_1800(void *sipCppV, PyObject *)
{
    ::QPair<int,int> *sipCpp = reinterpret_cast< ::QPair<int,int> *>(sipCppV);

#line 254 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qpair.sip"
    return Py_BuildValue("(ii)", sipCpp->first, sipCpp->second);
#line 16343 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QPair_1800_1800 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_30175,     /* QPair<int,int> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QPair_1800_1800,
    array_QPair_1800_1800,
    copy_QPair_1800_1800,
    release_QPair_1800_1800,
    convertTo_QPair_1800_1800,
    convertFrom_QPair_1800_1800
};

#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 16375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QVariantMap(void *, SIP_SSIZE_T, void *);}
static void assign_QVariantMap(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVariantMap *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVariantMap *>(sipSrc);
}


extern "C" {static void *array_QVariantMap(SIP_SSIZE_T);}
static void *array_QVariantMap(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVariantMap[sipNrElem];
}


extern "C" {static void *copy_QVariantMap(const void *, SIP_SSIZE_T);}
static void *copy_QVariantMap(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVariantMap(reinterpret_cast<const  ::QVariantMap *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVariantMap(void *, int);}
static void release_QVariantMap(void *ptr, int)
{
    delete reinterpret_cast< ::QVariantMap *>(ptr);
}



extern "C" {static int convertTo_QVariantMap(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVariantMap(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVariantMap **sipCppPtr = reinterpret_cast< ::QVariantMap **>(sipCppPtrV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvariantmap.sip"
    if (!sipIsErr)
        return PyDict_Check(sipPy);

    QVariantMap *qvm = new QVariantMap;

    if (!qpycore_toQVariantMap(sipPy, *qvm))
    {
        delete qvm;
        return 0;
    }

    *sipCppPtr = qvm;
 
    return sipGetState(sipTransferObj);
#line 16429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVariantMap(void *, PyObject *);}
static PyObject *convertFrom_QVariantMap(void *sipCppV, PyObject *)
{
    ::QVariantMap *sipCpp = reinterpret_cast< ::QVariantMap *>(sipCppV);

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvariantmap.sip"
    return qpycore_fromQVariantMap(*sipCpp);
#line 16440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVariantMap = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_QVariantMap,     /* QVariantMap */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVariantMap,
    array_QVariantMap,
    copy_QVariantMap,
    release_QVariantMap,
    convertTo_QVariantMap,
    convertFrom_QVariantMap
};

#line 31 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonarray.sip"
#include <qjsonarray.h>
#line 16472 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QJsonArray(void *, SIP_SSIZE_T, void *);}
static void assign_QJsonArray(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QJsonArray *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QJsonArray *>(sipSrc);
}


extern "C" {static void *array_QJsonArray(SIP_SSIZE_T);}
static void *array_QJsonArray(SIP_SSIZE_T sipNrElem)
{
    return new  ::QJsonArray[sipNrElem];
}


extern "C" {static void *copy_QJsonArray(const void *, SIP_SSIZE_T);}
static void *copy_QJsonArray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QJsonArray(reinterpret_cast<const  ::QJsonArray *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QJsonArray(void *, int);}
static void release_QJsonArray(void *ptr, int)
{
    delete reinterpret_cast< ::QJsonArray *>(ptr);
}



extern "C" {static int convertTo_QJsonArray(PyObject *, void **, int *, PyObject *);}
static int convertTo_QJsonArray(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QJsonArray **sipCppPtr = reinterpret_cast< ::QJsonArray **>(sipCppPtrV);

#line 61 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonarray.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QJsonArray *ql = new QJsonArray;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QJsonValue *t = reinterpret_cast<QJsonValue *>(
                sipForceConvertToType(itm, sipType_QJsonValue, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QJsonValue' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QJsonValue, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 16583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QJsonArray(void *, PyObject *);}
static PyObject *convertFrom_QJsonArray(void *sipCppV, PyObject *sipTransferObj)
{
    ::QJsonArray *sipCpp = reinterpret_cast< ::QJsonArray *>(sipCppV);

#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonarray.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QJsonValue *t = new QJsonValue(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QJsonValue,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 16616 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QJsonArray = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_QJsonArray,     /* QJsonArray */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QJsonArray,
    array_QJsonArray,
    copy_QJsonArray,
    release_QJsonArray,
    convertTo_QJsonArray,
    convertFrom_QJsonArray
};

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 16648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QStringList(void *, SIP_SSIZE_T, void *);}
static void assign_QStringList(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QStringList *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QStringList *>(sipSrc);
}


extern "C" {static void *array_QStringList(SIP_SSIZE_T);}
static void *array_QStringList(SIP_SSIZE_T sipNrElem)
{
    return new  ::QStringList[sipNrElem];
}


extern "C" {static void *copy_QStringList(const void *, SIP_SSIZE_T);}
static void *copy_QStringList(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QStringList(reinterpret_cast<const  ::QStringList *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QStringList(void *, int);}
static void release_QStringList(void *ptr, int)
{
    delete reinterpret_cast< ::QStringList *>(ptr);
}



extern "C" {static int convertTo_QStringList(PyObject *, void **, int *, PyObject *);}
static int convertTo_QStringList(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QStringList **sipCppPtr = reinterpret_cast< ::QStringList **>(sipCppPtrV);

#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QStringList *ql = new QStringList;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QString *t = reinterpret_cast<QString *>(
                sipForceConvertToType(itm, sipType_QString, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'str' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QString, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 16759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QStringList(void *, PyObject *);}
static PyObject *convertFrom_QStringList(void *sipCppV, PyObject *sipTransferObj)
{
    ::QStringList *sipCpp = reinterpret_cast< ::QStringList *>(sipCppV);

#line 40 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QString *t = new QString(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QString,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 16792 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QStringList = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_QStringList,     /* QStringList */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QStringList,
    array_QStringList,
    copy_QStringList,
    release_QStringList,
    convertTo_QStringList,
    convertFrom_QStringList
};

#line 856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <Qt>
#line 16824 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 16828 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static void assign_QList_0100Qt_DayOfWeek(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100Qt_DayOfWeek(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QList< ::Qt::DayOfWeek> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QList< ::Qt::DayOfWeek> *>(sipSrc);
}


extern "C" {static void *array_QList_0100Qt_DayOfWeek(SIP_SSIZE_T);}
static void *array_QList_0100Qt_DayOfWeek(SIP_SSIZE_T sipNrElem)
{
    return new  ::QList< ::Qt::DayOfWeek>[sipNrElem];
}


extern "C" {static void *copy_QList_0100Qt_DayOfWeek(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100Qt_DayOfWeek(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QList< ::Qt::DayOfWeek>(reinterpret_cast<const  ::QList< ::Qt::DayOfWeek> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100Qt_DayOfWeek(void *, int);}
static void release_QList_0100Qt_DayOfWeek(void *ptr, int)
{
    delete reinterpret_cast< ::QList< ::Qt::DayOfWeek> *>(ptr);
}



extern "C" {static int convertTo_QList_0100Qt_DayOfWeek(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100Qt_DayOfWeek(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QList< ::Qt::DayOfWeek> **sipCppPtr = reinterpret_cast< ::QList< ::Qt::DayOfWeek> **>(sipCppPtrV);

#line 884 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<Qt::DayOfWeek> *ql = new QList<Qt::DayOfWeek>;

    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int v = sipConvertToEnum(itm, sipType_Qt_DayOfWeek);

        if (PyErr_Occurred())
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'Qt.DayOfWeek' is expected",
                    i, sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        ql->append(static_cast<Qt::DayOfWeek>(v));

        Py_DECREF(itm);
    }

    Py_DECREF(iter);

    *sipCppPtr = ql;

    return sipGetState(sipTransferObj);
#line 16935 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100Qt_DayOfWeek(void *, PyObject *);}
static PyObject *convertFrom_QList_0100Qt_DayOfWeek(void *sipCppV, PyObject *)
{
    ::QList< ::Qt::DayOfWeek> *sipCpp = reinterpret_cast< ::QList< ::Qt::DayOfWeek> *>(sipCppV);

#line 860 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *eobj = sipConvertFromEnum(sipCpp->at(i),
                sipType_Qt_DayOfWeek);

        if (!eobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, eobj);
    }

    return l;
#line 16966 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0100Qt_DayOfWeek = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_12534,     /* QList<Qt::DayOfWeek> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100Qt_DayOfWeek,
    array_QList_0100Qt_DayOfWeek,
    copy_QList_0100Qt_DayOfWeek,
    release_QList_0100Qt_DayOfWeek,
    convertTo_QList_0100Qt_DayOfWeek,
    convertFrom_QList_0100Qt_DayOfWeek
};

#line 751 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 16998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QList_2400(void *, SIP_SSIZE_T, void *);}
static void assign_QList_2400(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QList< ::qreal> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QList< ::qreal> *>(sipSrc);
}


extern "C" {static void *array_QList_2400(SIP_SSIZE_T);}
static void *array_QList_2400(SIP_SSIZE_T sipNrElem)
{
    return new  ::QList< ::qreal>[sipNrElem];
}


extern "C" {static void *copy_QList_2400(const void *, SIP_SSIZE_T);}
static void *copy_QList_2400(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QList< ::qreal>(reinterpret_cast<const  ::QList< ::qreal> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_2400(void *, int);}
static void release_QList_2400(void *ptr, int)
{
    delete reinterpret_cast< ::QList< ::qreal> *>(ptr);
}



extern "C" {static int convertTo_QList_2400(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_2400(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QList< ::qreal> **sipCppPtr = reinterpret_cast< ::QList< ::qreal> **>(sipCppPtrV);

#line 778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<qreal> *ql = new QList<qreal>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        PyErr_Clear();
        double val = PyFloat_AsDouble(itm);
        
        if (PyErr_Occurred())
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'float' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        ql->append(val);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 17107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_2400(void *, PyObject *);}
static PyObject *convertFrom_QList_2400(void *sipCppV, PyObject *)
{
    ::QList< ::qreal> *sipCpp = reinterpret_cast< ::QList< ::qreal> *>(sipCppV);

#line 755 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *pobj = PyFloat_FromDouble(sipCpp->value(i));

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 17137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_2400 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_38458,     /* QList<qreal> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_2400,
    array_QList_2400,
    copy_QList_2400,
    release_QList_2400,
    convertTo_QList_2400,
    convertFrom_QList_2400
};

#line 646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 17169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QList_1800(void *, SIP_SSIZE_T, void *);}
static void assign_QList_1800(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QList<int> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QList<int> *>(sipSrc);
}


extern "C" {static void *array_QList_1800(SIP_SSIZE_T);}
static void *array_QList_1800(SIP_SSIZE_T sipNrElem)
{
    return new  ::QList<int>[sipNrElem];
}


extern "C" {static void *copy_QList_1800(const void *, SIP_SSIZE_T);}
static void *copy_QList_1800(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QList<int>(reinterpret_cast<const  ::QList<int> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_1800(void *, int);}
static void release_QList_1800(void *ptr, int)
{
    delete reinterpret_cast< ::QList<int> *>(ptr);
}



extern "C" {static int convertTo_QList_1800(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_1800(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QList<int> **sipCppPtr = reinterpret_cast< ::QList<int> **>(sipCppPtrV);

#line 673 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<int> *ql = new QList<int>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int val = sipLong_AsInt(itm);

        if (PyErr_Occurred())
        {
            if (PyErr_ExceptionMatches(PyExc_TypeError))
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but 'int' is expected", i,
                        sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        ql->append(val);

        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 17278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_1800(void *, PyObject *);}
static PyObject *convertFrom_QList_1800(void *sipCppV, PyObject *)
{
    ::QList<int> *sipCpp = reinterpret_cast< ::QList<int> *>(sipCppV);

#line 650 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        PyObject *pobj = SIPLong_FromLong(sipCpp->value(i));

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 17308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_1800 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_46886,     /* QList<int> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_1800,
    array_QList_1800,
    copy_QList_1800,
    release_QList_1800,
    convertTo_QList_1800,
    convertFrom_QList_1800
};

#line 460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 17341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QList_0600QPair_1800_1800(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0600QPair_1800_1800(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QList<QPair<int,int> > *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QList<QPair<int,int> > *>(sipSrc);
}


extern "C" {static void *array_QList_0600QPair_1800_1800(SIP_SSIZE_T);}
static void *array_QList_0600QPair_1800_1800(SIP_SSIZE_T sipNrElem)
{
    return new  ::QList<QPair<int,int> >[sipNrElem];
}


extern "C" {static void *copy_QList_0600QPair_1800_1800(const void *, SIP_SSIZE_T);}
static void *copy_QList_0600QPair_1800_1800(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QList<QPair<int,int> >(reinterpret_cast<const  ::QList<QPair<int,int> > *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0600QPair_1800_1800(void *, int);}
static void release_QList_0600QPair_1800_1800(void *ptr, int)
{
    delete reinterpret_cast< ::QList<QPair<int,int> > *>(ptr);
}



extern "C" {static int convertTo_QList_0600QPair_1800_1800(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0600QPair_1800_1800(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QList<QPair<int,int> > **sipCppPtr = reinterpret_cast< ::QList<QPair<int,int> > **>(sipCppPtrV);

#line 489 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QPair<int, int> > *ql = new QList<QPair<int, int> >;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *seq = PyIter_Next(iter);

        if (!seq)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        Py_ssize_t sub_len;

        if (PySequence_Check(seq)
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(seq)
#endif
                && !PyUnicode_Check(seq))
            sub_len = PySequence_Size(seq);
        else
            sub_len = -1;

        if (sub_len != 2)
        {
            if (sub_len < 0)
                PyErr_Format(PyExc_TypeError,
                        "index %zd has type '%s' but a 2 element non-string sequence is expected",
                        i, sipPyTypeName(Py_TYPE(seq)));
            else
                PyErr_Format(PyExc_TypeError,
                        "index %zd is a sequence of %zd sub-elements but 2 sub-elements are expected",
                        i, sub_len);

            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyObject *itm1 = PySequence_GetItem(seq, 0);

        if (!itm1)
        {
            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        int first = sipLong_AsInt(itm1);

        if (PyErr_Occurred())
        {
            if (PyErr_ExceptionMatches(PyExc_TypeError))
                PyErr_Format(PyExc_TypeError,
                        "the first sub-element of index %zd has type '%s' but 'int' is expected",
                        i, sipPyTypeName(Py_TYPE(itm1)));

            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        PyObject *itm2 = PySequence_GetItem(seq, 1);

        if (!itm2)
        {
            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        int second = sipLong_AsInt(itm2);

        if (PyErr_Occurred())
        {
            if (PyErr_ExceptionMatches(PyExc_TypeError))
                PyErr_Format(PyExc_TypeError,
                        "the second sub-element of index %zd has type '%s' but 'int' is expected",
                        i, sipPyTypeName(Py_TYPE(itm2)));

            Py_DECREF(itm2);
            Py_DECREF(itm1);
            Py_DECREF(seq);
            delete ql;
            Py_DECREF(iter);
            *sipIsErr = 1;

            return 0;
        }

        ql->append(QPair<int, int>(first, second));

        Py_DECREF(itm2);
        Py_DECREF(itm1);
        Py_DECREF(seq);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 17527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0600QPair_1800_1800(void *, PyObject *);}
static PyObject *convertFrom_QList_0600QPair_1800_1800(void *sipCppV, PyObject *)
{
    ::QList<QPair<int,int> > *sipCpp = reinterpret_cast< ::QList<QPair<int,int> > *>(sipCppV);

#line 465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        const QPair<int, int> &p = sipCpp->at(i);
        PyObject *pobj = Py_BuildValue((char *)"ii", p.first, p.second);

        if (!pobj)
        {
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, pobj);
    }

    return l;
#line 17558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QList_0600QPair_1800_1800 = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_8991,     /* QList<QPair<int,int> > */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0600QPair_1800_1800,
    array_QList_0600QPair_1800_1800,
    copy_QList_0600QPair_1800_1800,
    release_QList_0600QPair_1800_1800,
    convertTo_QList_0600QPair_1800_1800,
    convertFrom_QList_0600QPair_1800_1800
};

#line 25 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonobject.sip"
#include <qjsonobject.h>
#line 17590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QJsonObject(void *, SIP_SSIZE_T, void *);}
static void assign_QJsonObject(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QJsonObject *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QJsonObject *>(sipSrc);
}


extern "C" {static void *array_QJsonObject(SIP_SSIZE_T);}
static void *array_QJsonObject(SIP_SSIZE_T sipNrElem)
{
    return new  ::QJsonObject[sipNrElem];
}


extern "C" {static void *copy_QJsonObject(const void *, SIP_SSIZE_T);}
static void *copy_QJsonObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QJsonObject(reinterpret_cast<const  ::QJsonObject *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QJsonObject(void *, int);}
static void release_QJsonObject(void *ptr, int)
{
    delete reinterpret_cast< ::QJsonObject *>(ptr);
}



extern "C" {static int convertTo_QJsonObject(PyObject *, void **, int *, PyObject *);}
static int convertTo_QJsonObject(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QJsonObject **sipCppPtr = reinterpret_cast< ::QJsonObject **>(sipCppPtrV);

#line 83 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonobject.sip"
    if (!sipIsErr)
        return PyDict_Check(sipPy);

    QJsonObject *jo = new QJsonObject;

    Py_ssize_t pos = 0;
    PyObject *kobj, *vobj;
 
    while (PyDict_Next(sipPy, &pos, &kobj, &vobj))
    {
        int kstate;
        QString *k = reinterpret_cast<QString *>(
                sipForceConvertToType(kobj, sipType_QString, sipTransferObj,
                        SIP_NOT_NONE, &kstate, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "a key has type '%s' but 'str' is expected",
                    sipPyTypeName(Py_TYPE(kobj)));

            delete jo;

            return 0;
        }

        int vstate;
        QJsonValue *v = reinterpret_cast<QJsonValue *>(
                sipForceConvertToType(vobj, sipType_QJsonValue, sipTransferObj,
                        SIP_NOT_NONE, &vstate, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "a value has type '%s' but 'QJsonValue' is expected",
                    sipPyTypeName(Py_TYPE(vobj)));

            sipReleaseType(k, sipType_QString, kstate);
            delete jo;

            return 0;
        }

        jo->insert(*k, *v);

        sipReleaseType(v, sipType_QJsonValue, vstate);
        sipReleaseType(k, sipType_QString, kstate);
    }
 
    *sipCppPtr = jo;
 
    return sipGetState(sipTransferObj);
#line 17682 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QJsonObject(void *, PyObject *);}
static PyObject *convertFrom_QJsonObject(void *sipCppV, PyObject *sipTransferObj)
{
    ::QJsonObject *sipCpp = reinterpret_cast< ::QJsonObject *>(sipCppV);

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonobject.sip"
    PyObject *d = PyDict_New();

    if (!d)
        return 0;

    QJsonObject::const_iterator it = sipCpp->constBegin();
    QJsonObject::const_iterator end = sipCpp->constEnd();

    while (it != end)
    {
        QString *k = new QString(it.key());
        PyObject *kobj = sipConvertFromNewType(k, sipType_QString,
                sipTransferObj);

        if (!kobj)
        {
            delete k;
            Py_DECREF(d);

            return 0;
        }

        QJsonValue *v = new QJsonValue(it.value());
        PyObject *vobj = sipConvertFromNewType(v, sipType_QJsonValue,
                sipTransferObj);

        if (!vobj)
        {
            delete v;
            Py_DECREF(kobj);
            Py_DECREF(d);

            return 0;
        }

        int rc = PyDict_SetItem(d, kobj, vobj);

        Py_DECREF(vobj);
        Py_DECREF(kobj);

        if (rc < 0)
        {
            Py_DECREF(d);

            return 0;
        }

        ++it;
    }

    return d;
#line 17743 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QJsonObject = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_QJsonObject,     /* QJsonObject */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QJsonObject,
    array_QJsonObject,
    copy_QJsonObject,
    release_QJsonObject,
    convertTo_QJsonObject,
    convertFrom_QJsonObject
};

#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsysinfo.sip"
#include <qsysinfo.h>
#line 17775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 17779 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QSysInfo_buildAbi, "buildAbi() -> str");

extern "C" {static PyObject *meth_QSysInfo_buildAbi(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_buildAbi(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::buildAbi());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_buildAbi, doc_QSysInfo_buildAbi);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSysInfo_buildCpuArchitecture, "buildCpuArchitecture() -> str");

extern "C" {static PyObject *meth_QSysInfo_buildCpuArchitecture(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_buildCpuArchitecture(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::buildCpuArchitecture());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_buildCpuArchitecture, doc_QSysInfo_buildCpuArchitecture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSysInfo_currentCpuArchitecture, "currentCpuArchitecture() -> str");

extern "C" {static PyObject *meth_QSysInfo_currentCpuArchitecture(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_currentCpuArchitecture(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::currentCpuArchitecture());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_currentCpuArchitecture, doc_QSysInfo_currentCpuArchitecture);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSysInfo_kernelType, "kernelType() -> str");

extern "C" {static PyObject *meth_QSysInfo_kernelType(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_kernelType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::kernelType());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_kernelType, doc_QSysInfo_kernelType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSysInfo_kernelVersion, "kernelVersion() -> str");

extern "C" {static PyObject *meth_QSysInfo_kernelVersion(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_kernelVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::kernelVersion());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_kernelVersion, doc_QSysInfo_kernelVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSysInfo_prettyProductName, "prettyProductName() -> str");

extern "C" {static PyObject *meth_QSysInfo_prettyProductName(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_prettyProductName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::prettyProductName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_prettyProductName, doc_QSysInfo_prettyProductName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSysInfo_productType, "productType() -> str");

extern "C" {static PyObject *meth_QSysInfo_productType(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_productType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::productType());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_productType, doc_QSysInfo_productType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSysInfo_productVersion, "productVersion() -> str");

extern "C" {static PyObject *meth_QSysInfo_productVersion(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_productVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::productVersion());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_productVersion, doc_QSysInfo_productVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSysInfo_machineHostName, "machineHostName() -> str");

extern "C" {static PyObject *meth_QSysInfo_machineHostName(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_machineHostName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QSysInfo::machineHostName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_machineHostName, doc_QSysInfo_machineHostName);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSysInfo(void *, int);}
static void release_QSysInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSysInfo *>(sipCppV);
}


extern "C" {static void assign_QSysInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QSysInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSysInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSysInfo *>(sipSrc);
}


extern "C" {static void *array_QSysInfo(SIP_SSIZE_T);}
static void *array_QSysInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSysInfo[sipNrElem];
}


extern "C" {static void *copy_QSysInfo(const void *, SIP_SSIZE_T);}
static void *copy_QSysInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSysInfo(reinterpret_cast<const  ::QSysInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSysInfo(sipSimpleWrapper *);}
static void dealloc_QSysInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSysInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSysInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSysInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSysInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSysInfo();

            return sipCpp;
        }
    }

    {
        const  ::QSysInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSysInfo, &a0))
        {
            sipCpp = new  ::QSysInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSysInfo[] = {
    {SIP_MLNAME_CAST(sipName_buildAbi), meth_QSysInfo_buildAbi, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_buildAbi)},
    {SIP_MLNAME_CAST(sipName_buildCpuArchitecture), meth_QSysInfo_buildCpuArchitecture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_buildCpuArchitecture)},
    {SIP_MLNAME_CAST(sipName_currentCpuArchitecture), meth_QSysInfo_currentCpuArchitecture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_currentCpuArchitecture)},
    {SIP_MLNAME_CAST(sipName_kernelType), meth_QSysInfo_kernelType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_kernelType)},
    {SIP_MLNAME_CAST(sipName_kernelVersion), meth_QSysInfo_kernelVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_kernelVersion)},
    {SIP_MLNAME_CAST(sipName_machineHostName), meth_QSysInfo_machineHostName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_machineHostName)},
    {SIP_MLNAME_CAST(sipName_prettyProductName), meth_QSysInfo_prettyProductName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_prettyProductName)},
    {SIP_MLNAME_CAST(sipName_productType), meth_QSysInfo_productType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_productType)},
    {SIP_MLNAME_CAST(sipName_productVersion), meth_QSysInfo_productVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_productVersion)}
};

static sipEnumMemberDef enummembers_QSysInfo[] = {
    {sipName_BigEndian, static_cast<int>( ::QSysInfo::BigEndian), 260},
    {sipName_ByteOrder, static_cast<int>( ::QSysInfo::ByteOrder), 260},
    {sipName_LittleEndian, static_cast<int>( ::QSysInfo::LittleEndian), 260},
    {sipName_WordSize, static_cast<int>( ::QSysInfo::WordSize), 261},
};

PyDoc_STRVAR(doc_QSysInfo, "\1QSysInfo()\n"
"QSysInfo(QSysInfo)");


static pyqt5ClassPluginDef plugin_QSysInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSysInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSysInfo,
        {SIP_NULLPTR},
        &plugin_QSysInfo
    },
    {
        sipNameNr_QSysInfo,
        {0, 0, 1},
        9, methods_QSysInfo,
        4, enummembers_QSysInfo,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSysInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSysInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSysInfo,
    assign_QSysInfo,
    array_QSysInfo,
    copy_QSysInfo,
    release_QSysInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 397 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 18168 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 18172 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 18175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 294 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 18178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 18181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 18184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 18187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 18190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QXmlStreamWriter_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QXmlStreamWriter_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setDevice, doc_QXmlStreamWriter_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QXmlStreamWriter_device(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_device, doc_QXmlStreamWriter_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_setCodec, "setCodec(self, QTextCodec)\n"
"setCodec(self, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_setCodec(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec* a0;
        PyObject *a0Keep;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            sipCpp->setCodec(a0);

            sipKeepReference(sipSelf, -11, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->setCodec(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setCodec, doc_QXmlStreamWriter_setCodec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_codec, "codec(self) -> QTextCodec");

extern "C" {static PyObject *meth_QXmlStreamWriter_codec(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_codec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
             ::QTextCodec*sipRes;

            sipRes = sipCpp->codec();

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_codec, doc_QXmlStreamWriter_codec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_setAutoFormatting, "setAutoFormatting(self, bool)");

extern "C" {static PyObject *meth_QXmlStreamWriter_setAutoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setAutoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0))
        {
            sipCpp->setAutoFormatting(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setAutoFormatting, doc_QXmlStreamWriter_setAutoFormatting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_autoFormatting, "autoFormatting(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamWriter_autoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_autoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoFormatting();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_autoFormatting, doc_QXmlStreamWriter_autoFormatting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_setAutoFormattingIndent, "setAutoFormattingIndent(self, int)");

extern "C" {static PyObject *meth_QXmlStreamWriter_setAutoFormattingIndent(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_setAutoFormattingIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, &a0))
        {
            sipCpp->setAutoFormattingIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_setAutoFormattingIndent, doc_QXmlStreamWriter_setAutoFormattingIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_autoFormattingIndent, "autoFormattingIndent(self) -> int");

extern "C" {static PyObject *meth_QXmlStreamWriter_autoFormattingIndent(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_autoFormattingIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->autoFormattingIndent();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_autoFormattingIndent, doc_QXmlStreamWriter_autoFormattingIndent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeAttribute, "writeAttribute(self, str, str)\n"
"writeAttribute(self, str, str, str)\n"
"writeAttribute(self, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeAttribute(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->writeAttribute(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp->writeAttribute(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QXmlStreamAttribute* a0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            sipCpp->writeAttribute(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeAttribute, doc_QXmlStreamWriter_writeAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeAttributes, "writeAttributes(self, QXmlStreamAttributes)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeAttributes(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes* a0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamAttributes, &a0))
        {
            sipCpp->writeAttributes(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeAttributes, doc_QXmlStreamWriter_writeAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeCDATA, "writeCDATA(self, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeCDATA(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCDATA, doc_QXmlStreamWriter_writeCDATA);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeCharacters, "writeCharacters(self, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeCharacters(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCharacters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeCharacters(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCharacters, doc_QXmlStreamWriter_writeCharacters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeComment, "writeComment(self, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeComment(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeComment(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeComment, doc_QXmlStreamWriter_writeComment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeDTD, "writeDTD(self, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeDTD(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeDTD, doc_QXmlStreamWriter_writeDTD);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeEmptyElement, "writeEmptyElement(self, str)\n"
"writeEmptyElement(self, str, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeEmptyElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEmptyElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeEmptyElement(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->writeEmptyElement(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEmptyElement, doc_QXmlStreamWriter_writeEmptyElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeTextElement, "writeTextElement(self, str, str)\n"
"writeTextElement(self, str, str, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeTextElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeTextElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->writeTextElement(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp->writeTextElement(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeTextElement, doc_QXmlStreamWriter_writeTextElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeEndDocument, "writeEndDocument(self)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeEndDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEndDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            sipCpp->writeEndDocument();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEndDocument, doc_QXmlStreamWriter_writeEndDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeEndElement, "writeEndElement(self)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeEndElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEndElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            sipCpp->writeEndElement();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEndElement, doc_QXmlStreamWriter_writeEndElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeEntityReference, "writeEntityReference(self, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeEntityReference(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeEntityReference, doc_QXmlStreamWriter_writeEntityReference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeNamespace, "writeNamespace(self, str, prefix: str = '')");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeNamespace(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeNamespace(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QXmlStreamWriter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->writeNamespace(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeNamespace, doc_QXmlStreamWriter_writeNamespace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeDefaultNamespace, "writeDefaultNamespace(self, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeDefaultNamespace(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeDefaultNamespace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeDefaultNamespace(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeDefaultNamespace, doc_QXmlStreamWriter_writeDefaultNamespace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeProcessingInstruction, "writeProcessingInstruction(self, str, data: str = '')");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeProcessingInstruction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QXmlStreamWriter *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->writeProcessingInstruction(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeProcessingInstruction, doc_QXmlStreamWriter_writeProcessingInstruction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeStartDocument, "writeStartDocument(self)\n"
"writeStartDocument(self, str)\n"
"writeStartDocument(self, str, bool)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeStartDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeStartDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            sipCpp->writeStartDocument();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeStartDocument(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1b", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->writeStartDocument(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeStartDocument, doc_QXmlStreamWriter_writeStartDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeStartElement, "writeStartElement(self, str)\n"
"writeStartElement(self, str, str)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeStartElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeStartElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->writeStartElement(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->writeStartElement(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeStartElement, doc_QXmlStreamWriter_writeStartElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_writeCurrentToken, "writeCurrentToken(self, QXmlStreamReader)");

extern "C" {static PyObject *meth_QXmlStreamWriter_writeCurrentToken(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_writeCurrentToken(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader* a0;
         ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamWriter, &sipCpp, sipType_QXmlStreamReader, &a0))
        {
            sipCpp->writeCurrentToken(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_writeCurrentToken, doc_QXmlStreamWriter_writeCurrentToken);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamWriter_hasError, "hasError(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamWriter_hasError(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamWriter_hasError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamWriter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamWriter, sipName_hasError, doc_QXmlStreamWriter_hasError);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamWriter(void *, int);}
static void release_QXmlStreamWriter(void *sipCppV, int)
{
    delete reinterpret_cast< ::QXmlStreamWriter *>(sipCppV);
}


extern "C" {static void dealloc_QXmlStreamWriter(sipSimpleWrapper *);}
static void dealloc_QXmlStreamWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamWriter(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamWriter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamWriter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamWriter *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QXmlStreamWriter();

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new  ::QXmlStreamWriter(a0);

            return sipCpp;
        }
    }

    {
         ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J0", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QXmlStreamWriter(a0);
            sipReleaseType(a0,sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QXmlStreamWriter[] = {
    {SIP_MLNAME_CAST(sipName_autoFormatting), meth_QXmlStreamWriter_autoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_autoFormatting)},
    {SIP_MLNAME_CAST(sipName_autoFormattingIndent), meth_QXmlStreamWriter_autoFormattingIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_autoFormattingIndent)},
    {SIP_MLNAME_CAST(sipName_codec), meth_QXmlStreamWriter_codec, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_codec)},
    {SIP_MLNAME_CAST(sipName_device), meth_QXmlStreamWriter_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_device)},
    {SIP_MLNAME_CAST(sipName_hasError), meth_QXmlStreamWriter_hasError, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_hasError)},
    {SIP_MLNAME_CAST(sipName_setAutoFormatting), meth_QXmlStreamWriter_setAutoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_setAutoFormatting)},
    {SIP_MLNAME_CAST(sipName_setAutoFormattingIndent), meth_QXmlStreamWriter_setAutoFormattingIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_setAutoFormattingIndent)},
    {SIP_MLNAME_CAST(sipName_setCodec), meth_QXmlStreamWriter_setCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_setCodec)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QXmlStreamWriter_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_setDevice)},
    {SIP_MLNAME_CAST(sipName_writeAttribute), meth_QXmlStreamWriter_writeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeAttribute)},
    {SIP_MLNAME_CAST(sipName_writeAttributes), meth_QXmlStreamWriter_writeAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeAttributes)},
    {SIP_MLNAME_CAST(sipName_writeCDATA), meth_QXmlStreamWriter_writeCDATA, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeCDATA)},
    {SIP_MLNAME_CAST(sipName_writeCharacters), meth_QXmlStreamWriter_writeCharacters, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeCharacters)},
    {SIP_MLNAME_CAST(sipName_writeComment), meth_QXmlStreamWriter_writeComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeComment)},
    {SIP_MLNAME_CAST(sipName_writeCurrentToken), meth_QXmlStreamWriter_writeCurrentToken, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeCurrentToken)},
    {SIP_MLNAME_CAST(sipName_writeDTD), meth_QXmlStreamWriter_writeDTD, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeDTD)},
    {SIP_MLNAME_CAST(sipName_writeDefaultNamespace), meth_QXmlStreamWriter_writeDefaultNamespace, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeDefaultNamespace)},
    {SIP_MLNAME_CAST(sipName_writeEmptyElement), meth_QXmlStreamWriter_writeEmptyElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeEmptyElement)},
    {SIP_MLNAME_CAST(sipName_writeEndDocument), meth_QXmlStreamWriter_writeEndDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeEndDocument)},
    {SIP_MLNAME_CAST(sipName_writeEndElement), meth_QXmlStreamWriter_writeEndElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeEndElement)},
    {SIP_MLNAME_CAST(sipName_writeEntityReference), meth_QXmlStreamWriter_writeEntityReference, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeEntityReference)},
    {SIP_MLNAME_CAST(sipName_writeNamespace), SIP_MLMETH_CAST(meth_QXmlStreamWriter_writeNamespace), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeNamespace)},
    {SIP_MLNAME_CAST(sipName_writeProcessingInstruction), SIP_MLMETH_CAST(meth_QXmlStreamWriter_writeProcessingInstruction), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeProcessingInstruction)},
    {SIP_MLNAME_CAST(sipName_writeStartDocument), meth_QXmlStreamWriter_writeStartDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeStartDocument)},
    {SIP_MLNAME_CAST(sipName_writeStartElement), meth_QXmlStreamWriter_writeStartElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeStartElement)},
    {SIP_MLNAME_CAST(sipName_writeTextElement), meth_QXmlStreamWriter_writeTextElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamWriter_writeTextElement)}
};

PyDoc_STRVAR(doc_QXmlStreamWriter, "\1QXmlStreamWriter()\n"
"QXmlStreamWriter(QIODevice)\n"
"QXmlStreamWriter(Union[QByteArray, bytes, bytearray])");


static pyqt5ClassPluginDef plugin_QXmlStreamWriter = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamWriter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamWriter,
        {SIP_NULLPTR},
        &plugin_QXmlStreamWriter
    },
    {
        sipNameNr_QXmlStreamWriter,
        {0, 0, 1},
        26, methods_QXmlStreamWriter,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamWriter,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QXmlStreamWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QXmlStreamWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 294 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 19278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 19282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 19285 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19288 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 19291 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19294 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 19297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 19300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 19303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 19306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 19309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 19312 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 19315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QXmlStreamReader_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QXmlStreamReader_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_setDevice, doc_QXmlStreamReader_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QXmlStreamReader_device(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_device, doc_QXmlStreamReader_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_addData, "addData(self, Union[QByteArray, bytes, bytearray])\n"
"addData(self, str)");

extern "C" {static PyObject *meth_QXmlStreamReader_addData(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->addData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->addData(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_addData, doc_QXmlStreamReader_addData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_clear, "clear(self)");

extern "C" {static PyObject *meth_QXmlStreamReader_clear(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_clear, doc_QXmlStreamReader_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_atEnd, doc_QXmlStreamReader_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_readNext, "readNext(self) -> QXmlStreamReader.TokenType");

extern "C" {static PyObject *meth_QXmlStreamReader_readNext(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_readNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QXmlStreamReader::TokenType sipRes;

            sipRes = sipCpp->readNext();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QXmlStreamReader_TokenType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_readNext, doc_QXmlStreamReader_readNext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_tokenType, "tokenType(self) -> QXmlStreamReader.TokenType");

extern "C" {static PyObject *meth_QXmlStreamReader_tokenType(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_tokenType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QXmlStreamReader::TokenType sipRes;

            sipRes = sipCpp->tokenType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QXmlStreamReader_TokenType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_tokenType, doc_QXmlStreamReader_tokenType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_tokenString, "tokenString(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_tokenString(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_tokenString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->tokenString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_tokenString, doc_QXmlStreamReader_tokenString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_setNamespaceProcessing, "setNamespaceProcessing(self, bool)");

extern "C" {static PyObject *meth_QXmlStreamReader_setNamespaceProcessing(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setNamespaceProcessing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QXmlStreamReader, &sipCpp, &a0))
        {
            sipCpp->setNamespaceProcessing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_setNamespaceProcessing, doc_QXmlStreamReader_setNamespaceProcessing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_namespaceProcessing, "namespaceProcessing(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_namespaceProcessing(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceProcessing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->namespaceProcessing();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_namespaceProcessing, doc_QXmlStreamReader_namespaceProcessing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isStartDocument, "isStartDocument(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isStartDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStartDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStartDocument();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isStartDocument, doc_QXmlStreamReader_isStartDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isEndDocument, "isEndDocument(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isEndDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEndDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEndDocument();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isEndDocument, doc_QXmlStreamReader_isEndDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isStartElement, "isStartElement(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isStartElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStartElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStartElement();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isStartElement, doc_QXmlStreamReader_isStartElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isEndElement, "isEndElement(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isEndElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEndElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEndElement();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isEndElement, doc_QXmlStreamReader_isEndElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isCharacters, "isCharacters(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isCharacters(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isCharacters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCharacters();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isCharacters, doc_QXmlStreamReader_isCharacters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isWhitespace, "isWhitespace(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isWhitespace(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isWhitespace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWhitespace();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isWhitespace, doc_QXmlStreamReader_isWhitespace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isCDATA, "isCDATA(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCDATA();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isCDATA, doc_QXmlStreamReader_isCDATA);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isComment, "isComment(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isComment(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isComment();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isComment, doc_QXmlStreamReader_isComment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isDTD, "isDTD(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDTD();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isDTD, doc_QXmlStreamReader_isDTD);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isEntityReference, "isEntityReference(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEntityReference();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isEntityReference, doc_QXmlStreamReader_isEntityReference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isProcessingInstruction, "isProcessingInstruction(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isProcessingInstruction();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isProcessingInstruction, doc_QXmlStreamReader_isProcessingInstruction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isStandaloneDocument, "isStandaloneDocument(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isStandaloneDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStandaloneDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStandaloneDocument();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isStandaloneDocument, doc_QXmlStreamReader_isStandaloneDocument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_documentVersion, "documentVersion(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_documentVersion(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_documentVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->documentVersion());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_documentVersion, doc_QXmlStreamReader_documentVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_documentEncoding, "documentEncoding(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_documentEncoding(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_documentEncoding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->documentEncoding());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_documentEncoding, doc_QXmlStreamReader_documentEncoding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_lineNumber, "lineNumber(self) -> int");

extern "C" {static PyObject *meth_QXmlStreamReader_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->lineNumber();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_lineNumber, doc_QXmlStreamReader_lineNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_columnNumber, "columnNumber(self) -> int");

extern "C" {static PyObject *meth_QXmlStreamReader_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->columnNumber();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_columnNumber, doc_QXmlStreamReader_columnNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_characterOffset, "characterOffset(self) -> int");

extern "C" {static PyObject *meth_QXmlStreamReader_characterOffset(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_characterOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->characterOffset();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_characterOffset, doc_QXmlStreamReader_characterOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_attributes, "attributes(self) -> QXmlStreamAttributes");

extern "C" {static PyObject *meth_QXmlStreamReader_attributes(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QXmlStreamAttributes*sipRes;

            sipRes = new  ::QXmlStreamAttributes(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QXmlStreamAttributes,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_attributes, doc_QXmlStreamReader_attributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_readElementText, "readElementText(self, behaviour: QXmlStreamReader.ReadElementTextBehaviour = QXmlStreamReader.ErrorOnUnexpectedElement) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_readElementText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_readElementText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamReader::ReadElementTextBehaviour a0 = QXmlStreamReader::ErrorOnUnexpectedElement;
         ::QXmlStreamReader *sipCpp;

        static const char *sipKwdList[] = {
            sipName_behaviour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QXmlStreamReader_ReadElementTextBehaviour, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->readElementText(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_readElementText, doc_QXmlStreamReader_readElementText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_name, "name(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_name(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_name, doc_QXmlStreamReader_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_namespaceUri, "namespaceUri(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_namespaceUri(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceUri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->namespaceUri());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_namespaceUri, doc_QXmlStreamReader_namespaceUri);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_qualifiedName, "qualifiedName(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_qualifiedName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_qualifiedName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->qualifiedName());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_qualifiedName, doc_QXmlStreamReader_qualifiedName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_prefix, "prefix(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_prefix(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->prefix());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_prefix, doc_QXmlStreamReader_prefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_processingInstructionTarget, "processingInstructionTarget(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_processingInstructionTarget(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_processingInstructionTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->processingInstructionTarget());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_processingInstructionTarget, doc_QXmlStreamReader_processingInstructionTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_processingInstructionData, "processingInstructionData(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_processingInstructionData(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_processingInstructionData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->processingInstructionData());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_processingInstructionData, doc_QXmlStreamReader_processingInstructionData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_text, "text(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_text(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_text, doc_QXmlStreamReader_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_namespaceDeclarations, "namespaceDeclarations(self) -> List[QXmlStreamNamespaceDeclaration]");

extern "C" {static PyObject *meth_QXmlStreamReader_namespaceDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QXmlStreamNamespaceDeclarations*sipRes;

            sipRes = new  ::QXmlStreamNamespaceDeclarations(sipCpp->namespaceDeclarations());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamNamespaceDeclaration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_namespaceDeclarations, doc_QXmlStreamReader_namespaceDeclarations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_addExtraNamespaceDeclaration, "addExtraNamespaceDeclaration(self, QXmlStreamNamespaceDeclaration)");

extern "C" {static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclaration(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclaration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNamespaceDeclaration* a0;
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QXmlStreamNamespaceDeclaration, &a0))
        {
            sipCpp->addExtraNamespaceDeclaration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_addExtraNamespaceDeclaration, doc_QXmlStreamReader_addExtraNamespaceDeclaration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_addExtraNamespaceDeclarations, "addExtraNamespaceDeclarations(self, Iterable[QXmlStreamNamespaceDeclaration])");

extern "C" {static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNamespaceDeclarations* a0;
        int a0State = 0;
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QVector_0100QXmlStreamNamespaceDeclaration,&a0, &a0State))
        {
            sipCpp->addExtraNamespaceDeclarations(*a0);
            sipReleaseType(const_cast< ::QXmlStreamNamespaceDeclarations *>(a0),sipType_QVector_0100QXmlStreamNamespaceDeclaration,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_addExtraNamespaceDeclarations, doc_QXmlStreamReader_addExtraNamespaceDeclarations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_notationDeclarations, "notationDeclarations(self) -> List[QXmlStreamNotationDeclaration]");

extern "C" {static PyObject *meth_QXmlStreamReader_notationDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_notationDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QXmlStreamNotationDeclarations*sipRes;

            sipRes = new  ::QXmlStreamNotationDeclarations(sipCpp->notationDeclarations());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamNotationDeclaration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_notationDeclarations, doc_QXmlStreamReader_notationDeclarations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_entityDeclarations, "entityDeclarations(self) -> List[QXmlStreamEntityDeclaration]");

extern "C" {static PyObject *meth_QXmlStreamReader_entityDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_entityDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QXmlStreamEntityDeclarations*sipRes;

            sipRes = new  ::QXmlStreamEntityDeclarations(sipCpp->entityDeclarations());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamEntityDeclaration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_entityDeclarations, doc_QXmlStreamReader_entityDeclarations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_dtdName, "dtdName(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_dtdName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->dtdName());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_dtdName, doc_QXmlStreamReader_dtdName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_dtdPublicId, "dtdPublicId(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_dtdPublicId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdPublicId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->dtdPublicId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_dtdPublicId, doc_QXmlStreamReader_dtdPublicId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_dtdSystemId, "dtdSystemId(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_dtdSystemId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdSystemId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->dtdSystemId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_dtdSystemId, doc_QXmlStreamReader_dtdSystemId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_raiseError, "raiseError(self, message: str = '')");

extern "C" {static PyObject *meth_QXmlStreamReader_raiseError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_raiseError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
         ::QXmlStreamReader *sipCpp;

        static const char *sipKwdList[] = {
            sipName_message,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->raiseError(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_raiseError, doc_QXmlStreamReader_raiseError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_errorString, doc_QXmlStreamReader_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_error, "error(self) -> QXmlStreamReader.Error");

extern "C" {static PyObject *meth_QXmlStreamReader_error(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QXmlStreamReader::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QXmlStreamReader_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_error, doc_QXmlStreamReader_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_hasError, "hasError(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_hasError(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_hasError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_hasError, doc_QXmlStreamReader_hasError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_setEntityResolver, "setEntityResolver(self, QXmlStreamEntityResolver)");

extern "C" {static PyObject *meth_QXmlStreamReader_setEntityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setEntityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamEntityResolver* a0;
        PyObject *a0Keep;
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlStreamReader, &sipCpp, &a0Keep, sipType_QXmlStreamEntityResolver, &a0))
        {
            sipCpp->setEntityResolver(a0);

            sipKeepReference(sipSelf, -10, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_setEntityResolver, doc_QXmlStreamReader_setEntityResolver);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_entityResolver, "entityResolver(self) -> QXmlStreamEntityResolver");

extern "C" {static PyObject *meth_QXmlStreamReader_entityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_entityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
             ::QXmlStreamEntityResolver*sipRes;

            sipRes = sipCpp->entityResolver();

            return sipConvertFromType(sipRes,sipType_QXmlStreamEntityResolver,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_entityResolver, doc_QXmlStreamReader_entityResolver);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_readNextStartElement, "readNextStartElement(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_readNextStartElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_readNextStartElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->readNextStartElement();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_readNextStartElement, doc_QXmlStreamReader_readNextStartElement);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamReader_skipCurrentElement, "skipCurrentElement(self)");

extern "C" {static PyObject *meth_QXmlStreamReader_skipCurrentElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_skipCurrentElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            sipCpp->skipCurrentElement();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_skipCurrentElement, doc_QXmlStreamReader_skipCurrentElement);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamReader(void *, int);}
static void release_QXmlStreamReader(void *sipCppV, int)
{
    delete reinterpret_cast< ::QXmlStreamReader *>(sipCppV);
}


extern "C" {static void dealloc_QXmlStreamReader(sipSimpleWrapper *);}
static void dealloc_QXmlStreamReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamReader(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamReader(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamReader *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QXmlStreamReader();

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new  ::QXmlStreamReader(a0);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QXmlStreamReader(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QXmlStreamReader(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QXmlStreamReader[] = {
    {SIP_MLNAME_CAST(sipName_addData), meth_QXmlStreamReader_addData, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_addData)},
    {SIP_MLNAME_CAST(sipName_addExtraNamespaceDeclaration), meth_QXmlStreamReader_addExtraNamespaceDeclaration, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_addExtraNamespaceDeclaration)},
    {SIP_MLNAME_CAST(sipName_addExtraNamespaceDeclarations), meth_QXmlStreamReader_addExtraNamespaceDeclarations, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_addExtraNamespaceDeclarations)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QXmlStreamReader_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_atEnd)},
    {SIP_MLNAME_CAST(sipName_attributes), meth_QXmlStreamReader_attributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_attributes)},
    {SIP_MLNAME_CAST(sipName_characterOffset), meth_QXmlStreamReader_characterOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_characterOffset)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QXmlStreamReader_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_clear)},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QXmlStreamReader_columnNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_columnNumber)},
    {SIP_MLNAME_CAST(sipName_device), meth_QXmlStreamReader_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_device)},
    {SIP_MLNAME_CAST(sipName_documentEncoding), meth_QXmlStreamReader_documentEncoding, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_documentEncoding)},
    {SIP_MLNAME_CAST(sipName_documentVersion), meth_QXmlStreamReader_documentVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_documentVersion)},
    {SIP_MLNAME_CAST(sipName_dtdName), meth_QXmlStreamReader_dtdName, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_dtdName)},
    {SIP_MLNAME_CAST(sipName_dtdPublicId), meth_QXmlStreamReader_dtdPublicId, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_dtdPublicId)},
    {SIP_MLNAME_CAST(sipName_dtdSystemId), meth_QXmlStreamReader_dtdSystemId, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_dtdSystemId)},
    {SIP_MLNAME_CAST(sipName_entityDeclarations), meth_QXmlStreamReader_entityDeclarations, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_entityDeclarations)},
    {SIP_MLNAME_CAST(sipName_entityResolver), meth_QXmlStreamReader_entityResolver, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_entityResolver)},
    {SIP_MLNAME_CAST(sipName_error), meth_QXmlStreamReader_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QXmlStreamReader_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_errorString)},
    {SIP_MLNAME_CAST(sipName_hasError), meth_QXmlStreamReader_hasError, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_hasError)},
    {SIP_MLNAME_CAST(sipName_isCDATA), meth_QXmlStreamReader_isCDATA, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isCDATA)},
    {SIP_MLNAME_CAST(sipName_isCharacters), meth_QXmlStreamReader_isCharacters, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isCharacters)},
    {SIP_MLNAME_CAST(sipName_isComment), meth_QXmlStreamReader_isComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isComment)},
    {SIP_MLNAME_CAST(sipName_isDTD), meth_QXmlStreamReader_isDTD, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isDTD)},
    {SIP_MLNAME_CAST(sipName_isEndDocument), meth_QXmlStreamReader_isEndDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isEndDocument)},
    {SIP_MLNAME_CAST(sipName_isEndElement), meth_QXmlStreamReader_isEndElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isEndElement)},
    {SIP_MLNAME_CAST(sipName_isEntityReference), meth_QXmlStreamReader_isEntityReference, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isEntityReference)},
    {SIP_MLNAME_CAST(sipName_isProcessingInstruction), meth_QXmlStreamReader_isProcessingInstruction, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isProcessingInstruction)},
    {SIP_MLNAME_CAST(sipName_isStandaloneDocument), meth_QXmlStreamReader_isStandaloneDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isStandaloneDocument)},
    {SIP_MLNAME_CAST(sipName_isStartDocument), meth_QXmlStreamReader_isStartDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isStartDocument)},
    {SIP_MLNAME_CAST(sipName_isStartElement), meth_QXmlStreamReader_isStartElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isStartElement)},
    {SIP_MLNAME_CAST(sipName_isWhitespace), meth_QXmlStreamReader_isWhitespace, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isWhitespace)},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QXmlStreamReader_lineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_lineNumber)},
    {SIP_MLNAME_CAST(sipName_name), meth_QXmlStreamReader_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_name)},
    {SIP_MLNAME_CAST(sipName_namespaceDeclarations), meth_QXmlStreamReader_namespaceDeclarations, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_namespaceDeclarations)},
    {SIP_MLNAME_CAST(sipName_namespaceProcessing), meth_QXmlStreamReader_namespaceProcessing, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_namespaceProcessing)},
    {SIP_MLNAME_CAST(sipName_namespaceUri), meth_QXmlStreamReader_namespaceUri, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_namespaceUri)},
    {SIP_MLNAME_CAST(sipName_notationDeclarations), meth_QXmlStreamReader_notationDeclarations, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_notationDeclarations)},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QXmlStreamReader_prefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_prefix)},
    {SIP_MLNAME_CAST(sipName_processingInstructionData), meth_QXmlStreamReader_processingInstructionData, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_processingInstructionData)},
    {SIP_MLNAME_CAST(sipName_processingInstructionTarget), meth_QXmlStreamReader_processingInstructionTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_processingInstructionTarget)},
    {SIP_MLNAME_CAST(sipName_qualifiedName), meth_QXmlStreamReader_qualifiedName, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_qualifiedName)},
    {SIP_MLNAME_CAST(sipName_raiseError), SIP_MLMETH_CAST(meth_QXmlStreamReader_raiseError), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamReader_raiseError)},
    {SIP_MLNAME_CAST(sipName_readElementText), SIP_MLMETH_CAST(meth_QXmlStreamReader_readElementText), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamReader_readElementText)},
    {SIP_MLNAME_CAST(sipName_readNext), meth_QXmlStreamReader_readNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_readNext)},
    {SIP_MLNAME_CAST(sipName_readNextStartElement), meth_QXmlStreamReader_readNextStartElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_readNextStartElement)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QXmlStreamReader_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_setDevice)},
    {SIP_MLNAME_CAST(sipName_setEntityResolver), meth_QXmlStreamReader_setEntityResolver, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_setEntityResolver)},
    {SIP_MLNAME_CAST(sipName_setNamespaceProcessing), meth_QXmlStreamReader_setNamespaceProcessing, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_setNamespaceProcessing)},
    {SIP_MLNAME_CAST(sipName_skipCurrentElement), meth_QXmlStreamReader_skipCurrentElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_skipCurrentElement)},
    {SIP_MLNAME_CAST(sipName_text), meth_QXmlStreamReader_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_text)},
    {SIP_MLNAME_CAST(sipName_tokenString), meth_QXmlStreamReader_tokenString, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_tokenString)},
    {SIP_MLNAME_CAST(sipName_tokenType), meth_QXmlStreamReader_tokenType, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_tokenType)}
};

static sipEnumMemberDef enummembers_QXmlStreamReader[] = {
    {sipName_Characters, static_cast<int>( ::QXmlStreamReader::Characters), 337},
    {sipName_Comment, static_cast<int>( ::QXmlStreamReader::Comment), 337},
    {sipName_CustomError, static_cast<int>( ::QXmlStreamReader::CustomError), 335},
    {sipName_DTD, static_cast<int>( ::QXmlStreamReader::DTD), 337},
    {sipName_EndDocument, static_cast<int>( ::QXmlStreamReader::EndDocument), 337},
    {sipName_EndElement, static_cast<int>( ::QXmlStreamReader::EndElement), 337},
    {sipName_EntityReference, static_cast<int>( ::QXmlStreamReader::EntityReference), 337},
    {sipName_ErrorOnUnexpectedElement, static_cast<int>( ::QXmlStreamReader::ErrorOnUnexpectedElement), 336},
    {sipName_IncludeChildElements, static_cast<int>( ::QXmlStreamReader::IncludeChildElements), 336},
    {sipName_Invalid, static_cast<int>( ::QXmlStreamReader::Invalid), 337},
    {sipName_NoError, static_cast<int>( ::QXmlStreamReader::NoError), 335},
    {sipName_NoToken, static_cast<int>( ::QXmlStreamReader::NoToken), 337},
    {sipName_NotWellFormedError, static_cast<int>( ::QXmlStreamReader::NotWellFormedError), 335},
    {sipName_PrematureEndOfDocumentError, static_cast<int>( ::QXmlStreamReader::PrematureEndOfDocumentError), 335},
    {sipName_ProcessingInstruction, static_cast<int>( ::QXmlStreamReader::ProcessingInstruction), 337},
    {sipName_SkipChildElements, static_cast<int>( ::QXmlStreamReader::SkipChildElements), 336},
    {sipName_StartDocument, static_cast<int>( ::QXmlStreamReader::StartDocument), 337},
    {sipName_StartElement, static_cast<int>( ::QXmlStreamReader::StartElement), 337},
    {sipName_UnexpectedElementError, static_cast<int>( ::QXmlStreamReader::UnexpectedElementError), 335},
};

PyDoc_STRVAR(doc_QXmlStreamReader, "\1QXmlStreamReader()\n"
"QXmlStreamReader(QIODevice)\n"
"QXmlStreamReader(Union[QByteArray, bytes, bytearray])\n"
"QXmlStreamReader(str)");


static pyqt5ClassPluginDef plugin_QXmlStreamReader = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamReader = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamReader,
        {SIP_NULLPTR},
        &plugin_QXmlStreamReader
    },
    {
        sipNameNr_QXmlStreamReader,
        {0, 0, 1},
        52, methods_QXmlStreamReader,
        19, enummembers_QXmlStreamReader,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamReader,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QXmlStreamReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QXmlStreamReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 21027 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQXmlStreamEntityResolver : public  ::QXmlStreamEntityResolver
{
public:
    sipQXmlStreamEntityResolver();
    sipQXmlStreamEntityResolver(const  ::QXmlStreamEntityResolver&);
    virtual ~sipQXmlStreamEntityResolver();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString resolveUndeclaredEntity(const  ::QString&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlStreamEntityResolver(const sipQXmlStreamEntityResolver &);
    sipQXmlStreamEntityResolver &operator = (const sipQXmlStreamEntityResolver &);

    char sipPyMethods[1];
};

sipQXmlStreamEntityResolver::sipQXmlStreamEntityResolver():  ::QXmlStreamEntityResolver(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlStreamEntityResolver::sipQXmlStreamEntityResolver(const  ::QXmlStreamEntityResolver& a0):  ::QXmlStreamEntityResolver(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlStreamEntityResolver::~sipQXmlStreamEntityResolver()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QString sipQXmlStreamEntityResolver::resolveUndeclaredEntity(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_resolveUndeclaredEntity);

    if (!sipMeth)
        return  ::QXmlStreamEntityResolver::resolveUndeclaredEntity(a0);

    extern  ::QString sipVH_QtCore_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtCore_66(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QXmlStreamEntityResolver_resolveUndeclaredEntity, "resolveUndeclaredEntity(self, str) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityResolver_resolveUndeclaredEntity(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityResolver_resolveUndeclaredEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QXmlStreamEntityResolver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamEntityResolver, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QXmlStreamEntityResolver::resolveUndeclaredEntity(*a0) : sipCpp->resolveUndeclaredEntity(*a0)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityResolver, sipName_resolveUndeclaredEntity, doc_QXmlStreamEntityResolver_resolveUndeclaredEntity);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamEntityResolver(void *, int);}
static void release_QXmlStreamEntityResolver(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQXmlStreamEntityResolver *>(sipCppV);
    else
        delete reinterpret_cast< ::QXmlStreamEntityResolver *>(sipCppV);
}


extern "C" {static void assign_QXmlStreamEntityResolver(void *, SIP_SSIZE_T, void *);}
static void assign_QXmlStreamEntityResolver(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QXmlStreamEntityResolver *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QXmlStreamEntityResolver *>(sipSrc);
}


extern "C" {static void *array_QXmlStreamEntityResolver(SIP_SSIZE_T);}
static void *array_QXmlStreamEntityResolver(SIP_SSIZE_T sipNrElem)
{
    return new  ::QXmlStreamEntityResolver[sipNrElem];
}


extern "C" {static void *copy_QXmlStreamEntityResolver(const void *, SIP_SSIZE_T);}
static void *copy_QXmlStreamEntityResolver(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QXmlStreamEntityResolver(reinterpret_cast<const  ::QXmlStreamEntityResolver *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlStreamEntityResolver(sipSimpleWrapper *);}
static void dealloc_QXmlStreamEntityResolver(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQXmlStreamEntityResolver *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamEntityResolver(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QXmlStreamEntityResolver(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamEntityResolver(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlStreamEntityResolver *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQXmlStreamEntityResolver();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QXmlStreamEntityResolver* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlStreamEntityResolver, &a0))
        {
            sipCpp = new sipQXmlStreamEntityResolver(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QXmlStreamEntityResolver[] = {
    {SIP_MLNAME_CAST(sipName_resolveUndeclaredEntity), meth_QXmlStreamEntityResolver_resolveUndeclaredEntity, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamEntityResolver_resolveUndeclaredEntity)}
};

PyDoc_STRVAR(doc_QXmlStreamEntityResolver, "\1QXmlStreamEntityResolver()\n"
"QXmlStreamEntityResolver(QXmlStreamEntityResolver)");


static pyqt5ClassPluginDef plugin_QXmlStreamEntityResolver = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamEntityResolver = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamEntityResolver,
        {SIP_NULLPTR},
        &plugin_QXmlStreamEntityResolver
    },
    {
        sipNameNr_QXmlStreamEntityResolver,
        {0, 0, 1},
        1, methods_QXmlStreamEntityResolver,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamEntityResolver,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QXmlStreamEntityResolver,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamEntityResolver,
    assign_QXmlStreamEntityResolver,
    array_QXmlStreamEntityResolver,
    copy_QXmlStreamEntityResolver,
    release_QXmlStreamEntityResolver,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 21268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21272 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_name, "name(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_name(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_name, doc_QXmlStreamEntityDeclaration_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_notationName, "notationName(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_notationName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_notationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->notationName());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_notationName, doc_QXmlStreamEntityDeclaration_notationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_systemId, "systemId(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_systemId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_systemId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->systemId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_systemId, doc_QXmlStreamEntityDeclaration_systemId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_publicId, "publicId(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_publicId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_publicId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->publicId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_publicId, doc_QXmlStreamEntityDeclaration_publicId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration_value, "value(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamEntityDeclaration_value(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamEntityDeclaration_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamEntityDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamEntityDeclaration, sipName_value, doc_QXmlStreamEntityDeclaration_value);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamEntityDeclaration___ne__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamEntityDeclaration___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamEntityDeclaration *sipCpp = reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamEntityDeclaration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamEntityDeclaration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamEntityDeclaration::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QXmlStreamEntityDeclaration, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QXmlStreamEntityDeclaration___eq__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamEntityDeclaration___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamEntityDeclaration *sipCpp = reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamEntityDeclaration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamEntityDeclaration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamEntityDeclaration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamEntityDeclaration::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QXmlStreamEntityDeclaration, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamEntityDeclaration(void *, int);}
static void release_QXmlStreamEntityDeclaration(void *sipCppV, int)
{
    delete reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipCppV);
}


extern "C" {static void assign_QXmlStreamEntityDeclaration(void *, SIP_SSIZE_T, void *);}
static void assign_QXmlStreamEntityDeclaration(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QXmlStreamEntityDeclaration *>(sipSrc);
}


extern "C" {static void *array_QXmlStreamEntityDeclaration(SIP_SSIZE_T);}
static void *array_QXmlStreamEntityDeclaration(SIP_SSIZE_T sipNrElem)
{
    return new  ::QXmlStreamEntityDeclaration[sipNrElem];
}


extern "C" {static void *copy_QXmlStreamEntityDeclaration(const void *, SIP_SSIZE_T);}
static void *copy_QXmlStreamEntityDeclaration(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QXmlStreamEntityDeclaration(reinterpret_cast<const  ::QXmlStreamEntityDeclaration *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlStreamEntityDeclaration(sipSimpleWrapper *);}
static void dealloc_QXmlStreamEntityDeclaration(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamEntityDeclaration(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamEntityDeclaration(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamEntityDeclaration(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamEntityDeclaration *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QXmlStreamEntityDeclaration();

            return sipCpp;
        }
    }

    {
        const  ::QXmlStreamEntityDeclaration* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlStreamEntityDeclaration, &a0))
        {
            sipCpp = new  ::QXmlStreamEntityDeclaration(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QXmlStreamEntityDeclaration[] = {
    {(void *)slot_QXmlStreamEntityDeclaration___ne__, ne_slot},
    {(void *)slot_QXmlStreamEntityDeclaration___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QXmlStreamEntityDeclaration[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QXmlStreamEntityDeclaration_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamEntityDeclaration_name)},
    {SIP_MLNAME_CAST(sipName_notationName), meth_QXmlStreamEntityDeclaration_notationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamEntityDeclaration_notationName)},
    {SIP_MLNAME_CAST(sipName_publicId), meth_QXmlStreamEntityDeclaration_publicId, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamEntityDeclaration_publicId)},
    {SIP_MLNAME_CAST(sipName_systemId), meth_QXmlStreamEntityDeclaration_systemId, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamEntityDeclaration_systemId)},
    {SIP_MLNAME_CAST(sipName_value), meth_QXmlStreamEntityDeclaration_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamEntityDeclaration_value)}
};

PyDoc_STRVAR(doc_QXmlStreamEntityDeclaration, "\1QXmlStreamEntityDeclaration()\n"
"QXmlStreamEntityDeclaration(QXmlStreamEntityDeclaration)");


static pyqt5ClassPluginDef plugin_QXmlStreamEntityDeclaration = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamEntityDeclaration = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamEntityDeclaration,
        {SIP_NULLPTR},
        &plugin_QXmlStreamEntityDeclaration
    },
    {
        sipNameNr_QXmlStreamEntityDeclaration,
        {0, 0, 1},
        5, methods_QXmlStreamEntityDeclaration,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamEntityDeclaration,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QXmlStreamEntityDeclaration,
    init_type_QXmlStreamEntityDeclaration,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamEntityDeclaration,
    assign_QXmlStreamEntityDeclaration,
    array_QXmlStreamEntityDeclaration,
    copy_QXmlStreamEntityDeclaration,
    release_QXmlStreamEntityDeclaration,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 21628 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QXmlStreamNotationDeclaration_name, "name(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamNotationDeclaration_name(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamNotationDeclaration_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNotationDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamNotationDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamNotationDeclaration, sipName_name, doc_QXmlStreamNotationDeclaration_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamNotationDeclaration_systemId, "systemId(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamNotationDeclaration_systemId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamNotationDeclaration_systemId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNotationDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamNotationDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->systemId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamNotationDeclaration, sipName_systemId, doc_QXmlStreamNotationDeclaration_systemId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamNotationDeclaration_publicId, "publicId(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamNotationDeclaration_publicId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamNotationDeclaration_publicId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNotationDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamNotationDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->publicId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamNotationDeclaration, sipName_publicId, doc_QXmlStreamNotationDeclaration_publicId);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamNotationDeclaration___ne__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamNotationDeclaration___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamNotationDeclaration *sipCpp = reinterpret_cast< ::QXmlStreamNotationDeclaration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamNotationDeclaration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNotationDeclaration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamNotationDeclaration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamNotationDeclaration::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QXmlStreamNotationDeclaration, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QXmlStreamNotationDeclaration___eq__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamNotationDeclaration___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamNotationDeclaration *sipCpp = reinterpret_cast< ::QXmlStreamNotationDeclaration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamNotationDeclaration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNotationDeclaration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamNotationDeclaration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamNotationDeclaration::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QXmlStreamNotationDeclaration, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamNotationDeclaration(void *, int);}
static void release_QXmlStreamNotationDeclaration(void *sipCppV, int)
{
    delete reinterpret_cast< ::QXmlStreamNotationDeclaration *>(sipCppV);
}


extern "C" {static void assign_QXmlStreamNotationDeclaration(void *, SIP_SSIZE_T, void *);}
static void assign_QXmlStreamNotationDeclaration(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QXmlStreamNotationDeclaration *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QXmlStreamNotationDeclaration *>(sipSrc);
}


extern "C" {static void *array_QXmlStreamNotationDeclaration(SIP_SSIZE_T);}
static void *array_QXmlStreamNotationDeclaration(SIP_SSIZE_T sipNrElem)
{
    return new  ::QXmlStreamNotationDeclaration[sipNrElem];
}


extern "C" {static void *copy_QXmlStreamNotationDeclaration(const void *, SIP_SSIZE_T);}
static void *copy_QXmlStreamNotationDeclaration(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QXmlStreamNotationDeclaration(reinterpret_cast<const  ::QXmlStreamNotationDeclaration *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlStreamNotationDeclaration(sipSimpleWrapper *);}
static void dealloc_QXmlStreamNotationDeclaration(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamNotationDeclaration(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamNotationDeclaration(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamNotationDeclaration(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamNotationDeclaration *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QXmlStreamNotationDeclaration();

            return sipCpp;
        }
    }

    {
        const  ::QXmlStreamNotationDeclaration* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlStreamNotationDeclaration, &a0))
        {
            sipCpp = new  ::QXmlStreamNotationDeclaration(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QXmlStreamNotationDeclaration[] = {
    {(void *)slot_QXmlStreamNotationDeclaration___ne__, ne_slot},
    {(void *)slot_QXmlStreamNotationDeclaration___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QXmlStreamNotationDeclaration[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QXmlStreamNotationDeclaration_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamNotationDeclaration_name)},
    {SIP_MLNAME_CAST(sipName_publicId), meth_QXmlStreamNotationDeclaration_publicId, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamNotationDeclaration_publicId)},
    {SIP_MLNAME_CAST(sipName_systemId), meth_QXmlStreamNotationDeclaration_systemId, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamNotationDeclaration_systemId)}
};

PyDoc_STRVAR(doc_QXmlStreamNotationDeclaration, "\1QXmlStreamNotationDeclaration()\n"
"QXmlStreamNotationDeclaration(QXmlStreamNotationDeclaration)");


static pyqt5ClassPluginDef plugin_QXmlStreamNotationDeclaration = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamNotationDeclaration = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamNotationDeclaration,
        {SIP_NULLPTR},
        &plugin_QXmlStreamNotationDeclaration
    },
    {
        sipNameNr_QXmlStreamNotationDeclaration,
        {0, 0, 1},
        3, methods_QXmlStreamNotationDeclaration,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamNotationDeclaration,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QXmlStreamNotationDeclaration,
    init_type_QXmlStreamNotationDeclaration,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamNotationDeclaration,
    assign_QXmlStreamNotationDeclaration,
    array_QXmlStreamNotationDeclaration,
    copy_QXmlStreamNotationDeclaration,
    release_QXmlStreamNotationDeclaration,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 21930 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21934 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21937 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QXmlStreamNamespaceDeclaration_prefix, "prefix(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamNamespaceDeclaration_prefix(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamNamespaceDeclaration_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNamespaceDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamNamespaceDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->prefix());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamNamespaceDeclaration, sipName_prefix, doc_QXmlStreamNamespaceDeclaration_prefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamNamespaceDeclaration_namespaceUri, "namespaceUri(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamNamespaceDeclaration_namespaceUri(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamNamespaceDeclaration_namespaceUri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNamespaceDeclaration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamNamespaceDeclaration, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->namespaceUri());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamNamespaceDeclaration, sipName_namespaceUri, doc_QXmlStreamNamespaceDeclaration_namespaceUri);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamNamespaceDeclaration___ne__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamNamespaceDeclaration___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamNamespaceDeclaration *sipCpp = reinterpret_cast< ::QXmlStreamNamespaceDeclaration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamNamespaceDeclaration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNamespaceDeclaration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamNamespaceDeclaration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamNamespaceDeclaration::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QXmlStreamNamespaceDeclaration, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QXmlStreamNamespaceDeclaration___eq__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamNamespaceDeclaration___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamNamespaceDeclaration *sipCpp = reinterpret_cast< ::QXmlStreamNamespaceDeclaration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamNamespaceDeclaration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamNamespaceDeclaration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamNamespaceDeclaration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamNamespaceDeclaration::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QXmlStreamNamespaceDeclaration, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamNamespaceDeclaration(void *, int);}
static void release_QXmlStreamNamespaceDeclaration(void *sipCppV, int)
{
    delete reinterpret_cast< ::QXmlStreamNamespaceDeclaration *>(sipCppV);
}


extern "C" {static void assign_QXmlStreamNamespaceDeclaration(void *, SIP_SSIZE_T, void *);}
static void assign_QXmlStreamNamespaceDeclaration(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QXmlStreamNamespaceDeclaration *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QXmlStreamNamespaceDeclaration *>(sipSrc);
}


extern "C" {static void *array_QXmlStreamNamespaceDeclaration(SIP_SSIZE_T);}
static void *array_QXmlStreamNamespaceDeclaration(SIP_SSIZE_T sipNrElem)
{
    return new  ::QXmlStreamNamespaceDeclaration[sipNrElem];
}


extern "C" {static void *copy_QXmlStreamNamespaceDeclaration(const void *, SIP_SSIZE_T);}
static void *copy_QXmlStreamNamespaceDeclaration(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QXmlStreamNamespaceDeclaration(reinterpret_cast<const  ::QXmlStreamNamespaceDeclaration *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlStreamNamespaceDeclaration(sipSimpleWrapper *);}
static void dealloc_QXmlStreamNamespaceDeclaration(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamNamespaceDeclaration(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamNamespaceDeclaration(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamNamespaceDeclaration(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamNamespaceDeclaration *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QXmlStreamNamespaceDeclaration();

            return sipCpp;
        }
    }

    {
        const  ::QXmlStreamNamespaceDeclaration* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlStreamNamespaceDeclaration, &a0))
        {
            sipCpp = new  ::QXmlStreamNamespaceDeclaration(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp = new  ::QXmlStreamNamespaceDeclaration(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QXmlStreamNamespaceDeclaration[] = {
    {(void *)slot_QXmlStreamNamespaceDeclaration___ne__, ne_slot},
    {(void *)slot_QXmlStreamNamespaceDeclaration___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QXmlStreamNamespaceDeclaration[] = {
    {SIP_MLNAME_CAST(sipName_namespaceUri), meth_QXmlStreamNamespaceDeclaration_namespaceUri, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamNamespaceDeclaration_namespaceUri)},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QXmlStreamNamespaceDeclaration_prefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamNamespaceDeclaration_prefix)}
};

PyDoc_STRVAR(doc_QXmlStreamNamespaceDeclaration, "\1QXmlStreamNamespaceDeclaration()\n"
"QXmlStreamNamespaceDeclaration(QXmlStreamNamespaceDeclaration)\n"
"QXmlStreamNamespaceDeclaration(str, str)");


static pyqt5ClassPluginDef plugin_QXmlStreamNamespaceDeclaration = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamNamespaceDeclaration = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamNamespaceDeclaration,
        {SIP_NULLPTR},
        &plugin_QXmlStreamNamespaceDeclaration
    },
    {
        sipNameNr_QXmlStreamNamespaceDeclaration,
        {0, 0, 1},
        2, methods_QXmlStreamNamespaceDeclaration,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamNamespaceDeclaration,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QXmlStreamNamespaceDeclaration,
    init_type_QXmlStreamNamespaceDeclaration,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamNamespaceDeclaration,
    assign_QXmlStreamNamespaceDeclaration,
    array_QXmlStreamNamespaceDeclaration,
    copy_QXmlStreamNamespaceDeclaration,
    release_QXmlStreamNamespaceDeclaration,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 22224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 22228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 22231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 22234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QXmlStreamAttributes_value, "value(self, str, str) -> str\n"
"value(self, str) -> str");

extern "C" {static PyObject *meth_QXmlStreamAttributes_value(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->value(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->value(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_value, doc_QXmlStreamAttributes_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_append, "append(self, str, str, str)\n"
"append(self, str, str)\n"
"append(self, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_append(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp->append(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->append(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QXmlStreamAttribute* a0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            sipCpp->append(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_append, doc_QXmlStreamAttributes_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_hasAttribute, "hasAttribute(self, str) -> bool\n"
"hasAttribute(self, str, str) -> bool");

extern "C" {static PyObject *meth_QXmlStreamAttributes_hasAttribute(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_hasAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasAttribute(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->hasAttribute(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_hasAttribute, doc_QXmlStreamAttributes_hasAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_at, "at(self, int) -> QXmlStreamAttribute");

extern "C" {static PyObject *meth_QXmlStreamAttributes_at(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0))
        {
             ::QXmlStreamAttribute*sipRes;

            sipRes = new  ::QXmlStreamAttribute(sipCpp->at(a0));

            return sipConvertFromNewType(sipRes,sipType_QXmlStreamAttribute,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_at, doc_QXmlStreamAttributes_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_clear, "clear(self)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_clear(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_clear, doc_QXmlStreamAttributes_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_contains, "contains(self, QXmlStreamAttribute) -> bool");

extern "C" {static PyObject *meth_QXmlStreamAttributes_contains(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_contains, doc_QXmlStreamAttributes_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_count, "count(self, QXmlStreamAttribute) -> int\n"
"count(self) -> int");

extern "C" {static PyObject *meth_QXmlStreamAttributes_count(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            int sipRes;

            sipRes = sipCpp->count(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_count, doc_QXmlStreamAttributes_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_data, "data(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QXmlStreamAttributes_data(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->data();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_data, doc_QXmlStreamAttributes_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_fill, "fill(self, QXmlStreamAttribute, size: int = -1)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        int a1 = -1;
         ::QXmlStreamAttributes *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0, &a1))
        {
            sipCpp->fill(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_fill, doc_QXmlStreamAttributes_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_first, "first(self) -> QXmlStreamAttribute");

extern "C" {static PyObject *meth_QXmlStreamAttributes_first(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
             ::QXmlStreamAttribute*sipRes;

            sipRes = &sipCpp->first();

            return sipConvertFromType(sipRes,sipType_QXmlStreamAttribute,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_first, doc_QXmlStreamAttributes_first);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_indexOf, "indexOf(self, QXmlStreamAttribute, from_: int = 0) -> int");

extern "C" {static PyObject *meth_QXmlStreamAttributes_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        int a1 = 0;
        const  ::QXmlStreamAttributes *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_indexOf, doc_QXmlStreamAttributes_indexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_insert, "insert(self, int, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_insert(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QXmlStreamAttribute* a1;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0, sipType_QXmlStreamAttribute, &a1))
        {
            sipCpp->insert(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_insert, doc_QXmlStreamAttributes_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamAttributes_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_isEmpty, doc_QXmlStreamAttributes_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_last, "last(self) -> QXmlStreamAttribute");

extern "C" {static PyObject *meth_QXmlStreamAttributes_last(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
             ::QXmlStreamAttribute*sipRes;

            sipRes = &sipCpp->last();

            return sipConvertFromType(sipRes,sipType_QXmlStreamAttribute,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_last, doc_QXmlStreamAttributes_last);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_lastIndexOf, "lastIndexOf(self, QXmlStreamAttribute, from_: int = -1) -> int");

extern "C" {static PyObject *meth_QXmlStreamAttributes_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
        int a1 = -1;
        const  ::QXmlStreamAttributes *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexOf(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_lastIndexOf, doc_QXmlStreamAttributes_lastIndexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_prepend, "prepend(self, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_prepend(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, sipType_QXmlStreamAttribute, &a0))
        {
            sipCpp->prepend(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_prepend, doc_QXmlStreamAttributes_prepend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_remove, "remove(self, int)\n"
"remove(self, int, int)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_remove(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0))
        {
            sipCpp->remove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0, &a1))
        {
            sipCpp->remove(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_remove, doc_QXmlStreamAttributes_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_replace, "replace(self, int, QXmlStreamAttribute)");

extern "C" {static PyObject *meth_QXmlStreamAttributes_replace(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QXmlStreamAttribute* a1;
         ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp, &a0, sipType_QXmlStreamAttribute, &a1))
        {
            sipCpp->replace(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_replace, doc_QXmlStreamAttributes_replace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttributes_size, "size(self) -> int");

extern "C" {static PyObject *meth_QXmlStreamAttributes_size(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttributes_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttributes, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName_size, doc_QXmlStreamAttributes_size);

    return SIP_NULLPTR;
}


extern "C" {static int slot_QXmlStreamAttributes___contains__(PyObject *,PyObject *);}
static int slot_QXmlStreamAttributes___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttribute, &a0))
        {
            int sipRes = 0;

#line 216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
// It looks like you can't assign QBool to int.
sipRes = bool(sipCpp->contains(*a0));
#line 22935 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QXmlStreamAttributes___delitem__(PyObject *,PyObject *);}
static int slot_QXmlStreamAttributes___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
if ((a0 = (int)sipConvertFromSequenceIndex(a0, sipCpp->count())) < 0)
    sipIsErr = 1;
else
    sipCpp->remove(a0);
#line 22970 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    for (Py_ssize_t i = 0; i < slicelength; ++i)
    {
        sipCpp->remove(start);
        start += step - 1;
    }
}
#line 23001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName___delitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QXmlStreamAttributes___setitem__(PyObject *,PyObject *);}
static int slot_QXmlStreamAttributes___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QXmlStreamAttribute* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ9", &a0, sipType_QXmlStreamAttribute, &a1))
        {
            int sipIsErr = 0;

#line 127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    (*sipCpp)[a0] = *a1;
#line 23044 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const  ::QXmlStreamAttributes* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QXmlStreamAttributes, &a1))
        {
            int sipIsErr = 0;

#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    int vlen = a1->count();

    if (vlen != slicelength)
    {
        sipBadLengthForSlice(vlen, slicelength);
        sipIsErr = 1;
    }
    else
    {
        QVector<QXmlStreamAttribute>::const_iterator it = a1->begin();

        for (Py_ssize_t i = 0; i < slicelength; ++i)
        {
            (*sipCpp)[start] = *it;
            start += step;
            ++it;
        }
    }
}
#line 23089 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QXmlStreamAttributes___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttributes___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QXmlStreamAttribute*sipRes = 0;
            int sipIsErr = 0;

#line 115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());

if (idx < 0)
    sipIsErr = 1;
else
    sipRes = new QXmlStreamAttribute(sipCpp->operator[]((int)idx));
#line 23130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QXmlStreamAttribute,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QXmlStreamAttributes*sipRes = 0;
            int sipIsErr = 0;

#line 196 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
Py_ssize_t start, stop, step, slicelength;

if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
{
    sipIsErr = 1;
}
else
{
    sipRes = new QXmlStreamAttributes();

    for (Py_ssize_t i = 0; i < slicelength; ++i)
    {
        (*sipRes) += (*sipCpp)[start];
        start += step;
    }
}
#line 23164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QXmlStreamAttributes,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttributes, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamAttributes___eq__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttributes___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttributes, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamAttributes::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QXmlStreamAttributes, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QXmlStreamAttributes___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttributes___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttributes, &a0))
        {
            sipCpp-> ::QXmlStreamAttributes::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QXmlStreamAttribute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttribute, &a0))
        {
            sipCpp-> ::QXmlStreamAttributes::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamAttributes___ne__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttributes___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttributes* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttributes, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamAttributes::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QXmlStreamAttributes, sipSelf, sipArg);
}


extern "C" {static SIP_SSIZE_T slot_QXmlStreamAttributes___len__(PyObject *);}
static SIP_SSIZE_T slot_QXmlStreamAttributes___len__(PyObject *sipSelf)
{
     ::QXmlStreamAttributes *sipCpp = reinterpret_cast< ::QXmlStreamAttributes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttributes));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 23300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamAttributes(void *, int);}
static void release_QXmlStreamAttributes(void *sipCppV, int)
{
    delete reinterpret_cast< ::QXmlStreamAttributes *>(sipCppV);
}


extern "C" {static void assign_QXmlStreamAttributes(void *, SIP_SSIZE_T, void *);}
static void assign_QXmlStreamAttributes(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QXmlStreamAttributes *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QXmlStreamAttributes *>(sipSrc);
}


extern "C" {static void *array_QXmlStreamAttributes(SIP_SSIZE_T);}
static void *array_QXmlStreamAttributes(SIP_SSIZE_T sipNrElem)
{
    return new  ::QXmlStreamAttributes[sipNrElem];
}


extern "C" {static void *copy_QXmlStreamAttributes(const void *, SIP_SSIZE_T);}
static void *copy_QXmlStreamAttributes(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QXmlStreamAttributes(reinterpret_cast<const  ::QXmlStreamAttributes *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlStreamAttributes(sipSimpleWrapper *);}
static void dealloc_QXmlStreamAttributes(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamAttributes(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamAttributes(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamAttributes(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamAttributes *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QXmlStreamAttributes();

            return sipCpp;
        }
    }

    {
        const  ::QXmlStreamAttributes* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlStreamAttributes, &a0))
        {
            sipCpp = new  ::QXmlStreamAttributes(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QXmlStreamAttributes[] = {
    {(void *)slot_QXmlStreamAttributes___contains__, contains_slot},
    {(void *)slot_QXmlStreamAttributes___delitem__, delitem_slot},
    {(void *)slot_QXmlStreamAttributes___setitem__, setitem_slot},
    {(void *)slot_QXmlStreamAttributes___getitem__, getitem_slot},
    {(void *)slot_QXmlStreamAttributes___eq__, eq_slot},
    {(void *)slot_QXmlStreamAttributes___iadd__, iconcat_slot},
    {(void *)slot_QXmlStreamAttributes___ne__, ne_slot},
    {(void *)slot_QXmlStreamAttributes___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QXmlStreamAttributes[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QXmlStreamAttributes_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_append)},
    {SIP_MLNAME_CAST(sipName_at), meth_QXmlStreamAttributes_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_at)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QXmlStreamAttributes_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QXmlStreamAttributes_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_contains)},
    {SIP_MLNAME_CAST(sipName_count), meth_QXmlStreamAttributes_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_count)},
    {SIP_MLNAME_CAST(sipName_data), meth_QXmlStreamAttributes_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_data)},
    {SIP_MLNAME_CAST(sipName_fill), SIP_MLMETH_CAST(meth_QXmlStreamAttributes_fill), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_fill)},
    {SIP_MLNAME_CAST(sipName_first), meth_QXmlStreamAttributes_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_first)},
    {SIP_MLNAME_CAST(sipName_hasAttribute), meth_QXmlStreamAttributes_hasAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_hasAttribute)},
    {SIP_MLNAME_CAST(sipName_indexOf), SIP_MLMETH_CAST(meth_QXmlStreamAttributes_indexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_indexOf)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QXmlStreamAttributes_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_insert)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QXmlStreamAttributes_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_isEmpty)},
    {SIP_MLNAME_CAST(sipName_last), meth_QXmlStreamAttributes_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_last)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), SIP_MLMETH_CAST(meth_QXmlStreamAttributes_lastIndexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QXmlStreamAttributes_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_prepend)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QXmlStreamAttributes_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_remove)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QXmlStreamAttributes_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_replace)},
    {SIP_MLNAME_CAST(sipName_size), meth_QXmlStreamAttributes_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_size)},
    {SIP_MLNAME_CAST(sipName_value), meth_QXmlStreamAttributes_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttributes_value)}
};

PyDoc_STRVAR(doc_QXmlStreamAttributes, "\1QXmlStreamAttributes()\n"
"QXmlStreamAttributes(QXmlStreamAttributes)");


static pyqt5ClassPluginDef plugin_QXmlStreamAttributes = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamAttributes = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamAttributes,
        {SIP_NULLPTR},
        &plugin_QXmlStreamAttributes
    },
    {
        sipNameNr_QXmlStreamAttributes,
        {0, 0, 1},
        19, methods_QXmlStreamAttributes,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamAttributes,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QXmlStreamAttributes,
    init_type_QXmlStreamAttributes,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamAttributes,
    assign_QXmlStreamAttributes,
    array_QXmlStreamAttributes,
    copy_QXmlStreamAttributes,
    release_QXmlStreamAttributes,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 23479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 23483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 23486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QXmlStreamAttribute_namespaceUri, "namespaceUri(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamAttribute_namespaceUri(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttribute_namespaceUri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttribute, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->namespaceUri());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttribute, sipName_namespaceUri, doc_QXmlStreamAttribute_namespaceUri);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttribute_name, "name(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamAttribute_name(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttribute_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttribute, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttribute, sipName_name, doc_QXmlStreamAttribute_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttribute_qualifiedName, "qualifiedName(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamAttribute_qualifiedName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttribute_qualifiedName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttribute, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->qualifiedName());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttribute, sipName_qualifiedName, doc_QXmlStreamAttribute_qualifiedName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttribute_prefix, "prefix(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamAttribute_prefix(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttribute_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttribute, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->prefix());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttribute, sipName_prefix, doc_QXmlStreamAttribute_prefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttribute_value, "value(self) -> str");

extern "C" {static PyObject *meth_QXmlStreamAttribute_value(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttribute_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttribute, &sipCpp))
        {
             ::QStringRef*sipRes;

            sipRes = new  ::QStringRef(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttribute, sipName_value, doc_QXmlStreamAttribute_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QXmlStreamAttribute_isDefault, "isDefault(self) -> bool");

extern "C" {static PyObject *meth_QXmlStreamAttribute_isDefault(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamAttribute_isDefault(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamAttribute, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDefault();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamAttribute, sipName_isDefault, doc_QXmlStreamAttribute_isDefault);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QXmlStreamAttribute___ne__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttribute___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttribute *sipCpp = reinterpret_cast< ::QXmlStreamAttribute *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttribute));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttribute, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamAttribute::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QXmlStreamAttribute, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QXmlStreamAttribute___eq__(PyObject *,PyObject *);}
static PyObject *slot_QXmlStreamAttribute___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QXmlStreamAttribute *sipCpp = reinterpret_cast< ::QXmlStreamAttribute *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QXmlStreamAttribute));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QXmlStreamAttribute* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QXmlStreamAttribute, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QXmlStreamAttribute::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QXmlStreamAttribute, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamAttribute(void *, int);}
static void release_QXmlStreamAttribute(void *sipCppV, int)
{
    delete reinterpret_cast< ::QXmlStreamAttribute *>(sipCppV);
}


extern "C" {static void assign_QXmlStreamAttribute(void *, SIP_SSIZE_T, void *);}
static void assign_QXmlStreamAttribute(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QXmlStreamAttribute *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QXmlStreamAttribute *>(sipSrc);
}


extern "C" {static void *array_QXmlStreamAttribute(SIP_SSIZE_T);}
static void *array_QXmlStreamAttribute(SIP_SSIZE_T sipNrElem)
{
    return new  ::QXmlStreamAttribute[sipNrElem];
}


extern "C" {static void *copy_QXmlStreamAttribute(const void *, SIP_SSIZE_T);}
static void *copy_QXmlStreamAttribute(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QXmlStreamAttribute(reinterpret_cast<const  ::QXmlStreamAttribute *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlStreamAttribute(sipSimpleWrapper *);}
static void dealloc_QXmlStreamAttribute(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlStreamAttribute(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QXmlStreamAttribute(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamAttribute(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QXmlStreamAttribute *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QXmlStreamAttribute();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp = new  ::QXmlStreamAttribute(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp = new  ::QXmlStreamAttribute(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QXmlStreamAttribute* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QXmlStreamAttribute, &a0))
        {
            sipCpp = new  ::QXmlStreamAttribute(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QXmlStreamAttribute[] = {
    {(void *)slot_QXmlStreamAttribute___ne__, ne_slot},
    {(void *)slot_QXmlStreamAttribute___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QXmlStreamAttribute[] = {
    {SIP_MLNAME_CAST(sipName_isDefault), meth_QXmlStreamAttribute_isDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttribute_isDefault)},
    {SIP_MLNAME_CAST(sipName_name), meth_QXmlStreamAttribute_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttribute_name)},
    {SIP_MLNAME_CAST(sipName_namespaceUri), meth_QXmlStreamAttribute_namespaceUri, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttribute_namespaceUri)},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QXmlStreamAttribute_prefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttribute_prefix)},
    {SIP_MLNAME_CAST(sipName_qualifiedName), meth_QXmlStreamAttribute_qualifiedName, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttribute_qualifiedName)},
    {SIP_MLNAME_CAST(sipName_value), meth_QXmlStreamAttribute_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamAttribute_value)}
};

PyDoc_STRVAR(doc_QXmlStreamAttribute, "\1QXmlStreamAttribute()\n"
"QXmlStreamAttribute(str, str)\n"
"QXmlStreamAttribute(str, str, str)\n"
"QXmlStreamAttribute(QXmlStreamAttribute)");


static pyqt5ClassPluginDef plugin_QXmlStreamAttribute = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QXmlStreamAttribute = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamAttribute,
        {SIP_NULLPTR},
        &plugin_QXmlStreamAttribute
    },
    {
        sipNameNr_QXmlStreamAttribute,
        {0, 0, 1},
        6, methods_QXmlStreamAttribute,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QXmlStreamAttribute,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QXmlStreamAttribute,
    init_type_QXmlStreamAttribute,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QXmlStreamAttribute,
    assign_QXmlStreamAttribute,
    array_QXmlStreamAttribute,
    copy_QXmlStreamAttribute,
    release_QXmlStreamAttribute,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qwaitcondition.sip"
#include <qwaitcondition.h>
#line 23910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmutex.sip"
#include <qmutex.h>
#line 23914 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
#include <qreadwritelock.h>
#line 23917 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdeadlinetimer.sip"
#include <qdeadlinetimer.h>
#line 23920 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QWaitCondition_wait, "wait(self, QMutex, msecs: int = ULONG_MAX) -> bool\n"
"wait(self, QReadWriteLock, msecs: int = ULONG_MAX) -> bool\n"
"wait(self, QMutex, QDeadlineTimer) -> bool\n"
"wait(self, QReadWriteLock, QDeadlineTimer) -> bool");

extern "C" {static PyObject *meth_QWaitCondition_wait(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWaitCondition_wait(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMutex* a0;
        unsigned long a1 = ULONG_MAX;
         ::QWaitCondition *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|m", &sipSelf, sipType_QWaitCondition, &sipCpp, sipType_QMutex, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wait(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QReadWriteLock* a0;
        unsigned long a1 = ULONG_MAX;
         ::QWaitCondition *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|m", &sipSelf, sipType_QWaitCondition, &sipCpp, sipType_QReadWriteLock, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wait(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QMutex* a0;
         ::QDeadlineTimer* a1;
         ::QWaitCondition *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ8J9", &sipSelf, sipType_QWaitCondition, &sipCpp, sipType_QMutex, &a0, sipType_QDeadlineTimer, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wait(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QReadWriteLock* a0;
         ::QDeadlineTimer* a1;
         ::QWaitCondition *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ8J9", &sipSelf, sipType_QWaitCondition, &sipCpp, sipType_QReadWriteLock, &a0, sipType_QDeadlineTimer, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wait(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWaitCondition, sipName_wait, doc_QWaitCondition_wait);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWaitCondition_wakeOne, "wakeOne(self)");

extern "C" {static PyObject *meth_QWaitCondition_wakeOne(PyObject *, PyObject *);}
static PyObject *meth_QWaitCondition_wakeOne(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWaitCondition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWaitCondition, &sipCpp))
        {
            sipCpp->wakeOne();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWaitCondition, sipName_wakeOne, doc_QWaitCondition_wakeOne);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWaitCondition_wakeAll, "wakeAll(self)");

extern "C" {static PyObject *meth_QWaitCondition_wakeAll(PyObject *, PyObject *);}
static PyObject *meth_QWaitCondition_wakeAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWaitCondition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWaitCondition, &sipCpp))
        {
            sipCpp->wakeAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWaitCondition, sipName_wakeAll, doc_QWaitCondition_wakeAll);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWaitCondition(void *, int);}
static void release_QWaitCondition(void *sipCppV, int)
{
    delete reinterpret_cast< ::QWaitCondition *>(sipCppV);
}


extern "C" {static void dealloc_QWaitCondition(sipSimpleWrapper *);}
static void dealloc_QWaitCondition(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWaitCondition(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QWaitCondition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWaitCondition(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QWaitCondition *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QWaitCondition();

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QWaitCondition[] = {
    {SIP_MLNAME_CAST(sipName_wait), SIP_MLMETH_CAST(meth_QWaitCondition_wait), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWaitCondition_wait)},
    {SIP_MLNAME_CAST(sipName_wakeAll), meth_QWaitCondition_wakeAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QWaitCondition_wakeAll)},
    {SIP_MLNAME_CAST(sipName_wakeOne), meth_QWaitCondition_wakeOne, METH_VARARGS, SIP_MLDOC_CAST(doc_QWaitCondition_wakeOne)}
};

PyDoc_STRVAR(doc_QWaitCondition, "\1QWaitCondition()");


static pyqt5ClassPluginDef plugin_QWaitCondition = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QWaitCondition = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWaitCondition,
        {SIP_NULLPTR},
        &plugin_QWaitCondition
    },
    {
        sipNameNr_QWaitCondition,
        {0, 0, 1},
        3, methods_QWaitCondition,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QWaitCondition,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QWaitCondition,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QWaitCondition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QWaitCondition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qversionnumber.sip"
#include <qversionnumber.h>
#line 24181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 24185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 24188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QVersionNumber_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QVersionNumber_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_isNull, doc_QVersionNumber_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_isNormalized, "isNormalized(self) -> bool");

extern "C" {static PyObject *meth_QVersionNumber_isNormalized(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_isNormalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNormalized();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_isNormalized, doc_QVersionNumber_isNormalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_majorVersion, "majorVersion(self) -> int");

extern "C" {static PyObject *meth_QVersionNumber_majorVersion(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_majorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->majorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_majorVersion, doc_QVersionNumber_majorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_minorVersion, "minorVersion(self) -> int");

extern "C" {static PyObject *meth_QVersionNumber_minorVersion(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_minorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_minorVersion, doc_QVersionNumber_minorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_microVersion, "microVersion(self) -> int");

extern "C" {static PyObject *meth_QVersionNumber_microVersion(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_microVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->microVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_microVersion, doc_QVersionNumber_microVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_normalized, "normalized(self) -> QVersionNumber");

extern "C" {static PyObject *meth_QVersionNumber_normalized(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
             ::QVersionNumber*sipRes;

            sipRes = new  ::QVersionNumber(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QVersionNumber,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_normalized, doc_QVersionNumber_normalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_segments, "segments(self) -> List[int]");

extern "C" {static PyObject *meth_QVersionNumber_segments(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_segments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
             ::QVector<int>*sipRes;

            sipRes = new  ::QVector<int>(sipCpp->segments());

            return sipConvertFromNewType(sipRes,sipType_QVector_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_segments, doc_QVersionNumber_segments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_segmentAt, "segmentAt(self, int) -> int");

extern "C" {static PyObject *meth_QVersionNumber_segmentAt(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_segmentAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVersionNumber, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->segmentAt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_segmentAt, doc_QVersionNumber_segmentAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_segmentCount, "segmentCount(self) -> int");

extern "C" {static PyObject *meth_QVersionNumber_segmentCount(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_segmentCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->segmentCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_segmentCount, doc_QVersionNumber_segmentCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_isPrefixOf, "isPrefixOf(self, QVersionNumber) -> bool");

extern "C" {static PyObject *meth_QVersionNumber_isPrefixOf(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_isPrefixOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVersionNumber, &sipCpp, sipType_QVersionNumber, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isPrefixOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_isPrefixOf, doc_QVersionNumber_isPrefixOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_compare, "compare(QVersionNumber, QVersionNumber) -> int");

extern "C" {static PyObject *meth_QVersionNumber_compare(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_compare(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;
        const  ::QVersionNumber* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVersionNumber, &a0, sipType_QVersionNumber, &a1))
        {
            int sipRes;

            sipRes =  ::QVersionNumber::compare(*a0,*a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_compare, doc_QVersionNumber_compare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_commonPrefix, "commonPrefix(QVersionNumber, QVersionNumber) -> QVersionNumber");

extern "C" {static PyObject *meth_QVersionNumber_commonPrefix(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_commonPrefix(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;
        const  ::QVersionNumber* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVersionNumber, &a0, sipType_QVersionNumber, &a1))
        {
             ::QVersionNumber*sipRes;

            sipRes = new  ::QVersionNumber( ::QVersionNumber::commonPrefix(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QVersionNumber,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_commonPrefix, doc_QVersionNumber_commonPrefix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QVersionNumber_toString(PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVersionNumber, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_toString, doc_QVersionNumber_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVersionNumber_fromString, "fromString(str) -> Tuple[QVersionNumber, int]");

extern "C" {static PyObject *meth_QVersionNumber_fromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QVersionNumber_fromString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_QString,&a0, &a0State))
        {
             ::QVersionNumber*sipRes;

            sipRes = new  ::QVersionNumber( ::QVersionNumber::fromString(*a0,&a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QVersionNumber,SIP_NULLPTR);
            return sipBuildResult(0,"(Ri)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVersionNumber, sipName_fromString, doc_QVersionNumber_fromString);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVersionNumber___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVersionNumber___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVersionNumber *sipCpp = reinterpret_cast< ::QVersionNumber *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVersionNumber));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVersionNumber, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QVersionNumber, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVersionNumber___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVersionNumber___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVersionNumber *sipCpp = reinterpret_cast< ::QVersionNumber *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVersionNumber));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVersionNumber, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QVersionNumber, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVersionNumber___lt__(PyObject *,PyObject *);}
static PyObject *slot_QVersionNumber___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVersionNumber *sipCpp = reinterpret_cast< ::QVersionNumber *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVersionNumber));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVersionNumber, &a0))
        {
            bool sipRes;

            sipRes = operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QVersionNumber, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVersionNumber___le__(PyObject *,PyObject *);}
static PyObject *slot_QVersionNumber___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVersionNumber *sipCpp = reinterpret_cast< ::QVersionNumber *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVersionNumber));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVersionNumber, &a0))
        {
            bool sipRes;

            sipRes = operator<=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QVersionNumber, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVersionNumber___gt__(PyObject *,PyObject *);}
static PyObject *slot_QVersionNumber___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVersionNumber *sipCpp = reinterpret_cast< ::QVersionNumber *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVersionNumber));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVersionNumber, &a0))
        {
            bool sipRes;

            sipRes = operator>((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QVersionNumber, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVersionNumber___ge__(PyObject *,PyObject *);}
static PyObject *slot_QVersionNumber___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVersionNumber *sipCpp = reinterpret_cast< ::QVersionNumber *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVersionNumber));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVersionNumber* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVersionNumber, &a0))
        {
            bool sipRes;

            sipRes = operator>=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QVersionNumber, sipSelf, sipArg);
}


extern "C" {static long slot_QVersionNumber___hash__(PyObject *);}
static long slot_QVersionNumber___hash__(PyObject *sipSelf)
{
     ::QVersionNumber *sipCpp = reinterpret_cast< ::QVersionNumber *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVersionNumber));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qversionnumber.sip"
        sipRes = qHash(*sipCpp);
#line 24802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVersionNumber(void *, int);}
static void release_QVersionNumber(void *sipCppV, int)
{
    delete reinterpret_cast< ::QVersionNumber *>(sipCppV);
}


extern "C" {static void assign_QVersionNumber(void *, SIP_SSIZE_T, void *);}
static void assign_QVersionNumber(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVersionNumber *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVersionNumber *>(sipSrc);
}


extern "C" {static void *array_QVersionNumber(SIP_SSIZE_T);}
static void *array_QVersionNumber(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVersionNumber[sipNrElem];
}


extern "C" {static void *copy_QVersionNumber(const void *, SIP_SSIZE_T);}
static void *copy_QVersionNumber(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVersionNumber(reinterpret_cast<const  ::QVersionNumber *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVersionNumber(sipSimpleWrapper *);}
static void dealloc_QVersionNumber(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVersionNumber(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QVersionNumber(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVersionNumber(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QVersionNumber *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QVersionNumber();

            return sipCpp;
        }
    }

    {
        const  ::QVector<int>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QVector_1800,&a0, &a0State))
        {
            sipCpp = new  ::QVersionNumber(*a0);
            sipReleaseType(const_cast< ::QVector<int> *>(a0),sipType_QVector_1800,a0State);

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QVersionNumber(a0);

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new  ::QVersionNumber(a0,a1);

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iii", &a0, &a1, &a2))
        {
            sipCpp = new  ::QVersionNumber(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QVersionNumber* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QVersionNumber, &a0))
        {
            sipCpp = new  ::QVersionNumber(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVersionNumber[] = {
    {(void *)slot_QVersionNumber___eq__, eq_slot},
    {(void *)slot_QVersionNumber___ne__, ne_slot},
    {(void *)slot_QVersionNumber___lt__, lt_slot},
    {(void *)slot_QVersionNumber___le__, le_slot},
    {(void *)slot_QVersionNumber___gt__, gt_slot},
    {(void *)slot_QVersionNumber___ge__, ge_slot},
    {(void *)slot_QVersionNumber___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVersionNumber[] = {
    {SIP_MLNAME_CAST(sipName_commonPrefix), meth_QVersionNumber_commonPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_commonPrefix)},
    {SIP_MLNAME_CAST(sipName_compare), meth_QVersionNumber_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_compare)},
    {SIP_MLNAME_CAST(sipName_fromString), SIP_MLMETH_CAST(meth_QVersionNumber_fromString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QVersionNumber_fromString)},
    {SIP_MLNAME_CAST(sipName_isNormalized), meth_QVersionNumber_isNormalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_isNormalized)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QVersionNumber_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_isNull)},
    {SIP_MLNAME_CAST(sipName_isPrefixOf), meth_QVersionNumber_isPrefixOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_isPrefixOf)},
    {SIP_MLNAME_CAST(sipName_majorVersion), meth_QVersionNumber_majorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_majorVersion)},
    {SIP_MLNAME_CAST(sipName_microVersion), meth_QVersionNumber_microVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_microVersion)},
    {SIP_MLNAME_CAST(sipName_minorVersion), meth_QVersionNumber_minorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_minorVersion)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QVersionNumber_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_normalized)},
    {SIP_MLNAME_CAST(sipName_segmentAt), meth_QVersionNumber_segmentAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_segmentAt)},
    {SIP_MLNAME_CAST(sipName_segmentCount), meth_QVersionNumber_segmentCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_segmentCount)},
    {SIP_MLNAME_CAST(sipName_segments), meth_QVersionNumber_segments, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_segments)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QVersionNumber_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QVersionNumber_toString)}
};

PyDoc_STRVAR(doc_QVersionNumber, "\1QVersionNumber()\n"
"QVersionNumber(Iterable[int])\n"
"QVersionNumber(int)\n"
"QVersionNumber(int, int)\n"
"QVersionNumber(int, int, int)\n"
"QVersionNumber(QVersionNumber)");


static pyqt5ClassPluginDef plugin_QVersionNumber = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QVersionNumber = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVersionNumber,
        {SIP_NULLPTR},
        &plugin_QVersionNumber
    },
    {
        sipNameNr_QVersionNumber,
        {0, 0, 1},
        14, methods_QVersionNumber,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QVersionNumber,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QVersionNumber,
    init_type_QVersionNumber,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QVersionNumber,
    assign_QVersionNumber,
    array_QVersionNumber,
    copy_QVersionNumber,
    release_QVersionNumber,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 25032 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 25036 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QVariant_value, "value(self) -> object");

extern "C" {static PyObject *meth_QVariant_value(PyObject *, PyObject *);}
static PyObject *meth_QVariant_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
        sipRes = qpycore_PyObject_FromQVariant(*sipCpp);
#line 25056 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_value, doc_QVariant_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_type, "type(self) -> QVariant.Type");

extern "C" {static PyObject *meth_QVariant_type(PyObject *, PyObject *);}
static PyObject *meth_QVariant_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
             ::QVariant::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QVariant_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_type, doc_QVariant_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_userType, "userType(self) -> int");

extern "C" {static PyObject *meth_QVariant_userType(PyObject *, PyObject *);}
static PyObject *meth_QVariant_userType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->userType();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_userType, doc_QVariant_userType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_typeName, "typeName(self) -> str");

extern "C" {static PyObject *meth_QVariant_typeName(PyObject *, PyObject *);}
static PyObject *meth_QVariant_typeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->typeName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_typeName, doc_QVariant_typeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_canConvert, "canConvert(self, int) -> bool");

extern "C" {static PyObject *meth_QVariant_canConvert(PyObject *, PyObject *);}
static PyObject *meth_QVariant_canConvert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariant, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->canConvert(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_canConvert, doc_QVariant_canConvert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_convert, "convert(self, int) -> bool");

extern "C" {static PyObject *meth_QVariant_convert(PyObject *, PyObject *);}
static PyObject *meth_QVariant_convert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariant, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->convert(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_convert, doc_QVariant_convert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QVariant_isValid(PyObject *, PyObject *);}
static PyObject *meth_QVariant_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isValid, doc_QVariant_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QVariant_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVariant_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_isNull, doc_QVariant_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_clear, "clear(self)");

extern "C" {static PyObject *meth_QVariant_clear(PyObject *, PyObject *);}
static PyObject *meth_QVariant_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariant, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_clear, doc_QVariant_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_load, "load(self, QDataStream)");

extern "C" {static PyObject *meth_QVariant_load(PyObject *, PyObject *);}
static PyObject *meth_QVariant_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_load, doc_QVariant_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_save, "save(self, QDataStream)");

extern "C" {static PyObject *meth_QVariant_save(PyObject *, PyObject *);}
static PyObject *meth_QVariant_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
        const  ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_save, doc_QVariant_save);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_typeToName, "typeToName(int) -> str");

extern "C" {static PyObject *meth_QVariant_typeToName(PyObject *, PyObject *);}
static PyObject *meth_QVariant_typeToName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const char*sipRes;

            sipRes =  ::QVariant::typeToName(a0);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_typeToName, doc_QVariant_typeToName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_nameToType, "nameToType(str) -> QVariant.Type");

extern "C" {static PyObject *meth_QVariant_nameToType(PyObject *, PyObject *);}
static PyObject *meth_QVariant_nameToType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
             ::QVariant::Type sipRes;

            sipRes =  ::QVariant::nameToType(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QVariant_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_nameToType, doc_QVariant_nameToType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariant_swap, "swap(self, QVariant)");

extern "C" {static PyObject *meth_QVariant_swap(PyObject *, PyObject *);}
static PyObject *meth_QVariant_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QVariant* a0;
         ::QVariant *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QVariant, &sipCpp, sipType_QVariant, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariant, sipName_swap, doc_QVariant_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QVariant___ge__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator>=(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___gt__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator>(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___le__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator<=(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___lt__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator<(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator!=(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QVariant, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVariant___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVariant___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVariant));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QVariant::operator==(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QVariant, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QVariant(void *, int);}
static void release_QVariant(void *sipCppV, int)
{
    delete reinterpret_cast< ::QVariant *>(sipCppV);
}


extern "C" {static void assign_QVariant(void *, SIP_SSIZE_T, void *);}
static void assign_QVariant(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QVariant *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QVariant *>(sipSrc);
}


extern "C" {static void *array_QVariant(SIP_SSIZE_T);}
static void *array_QVariant(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVariant[sipNrElem];
}


extern "C" {static void *copy_QVariant(const void *, SIP_SSIZE_T);}
static void *copy_QVariant(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVariant(reinterpret_cast<const  ::QVariant *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVariant(sipSimpleWrapper *);}
static void dealloc_QVariant(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVariant(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QVariant(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVariant(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QVariant *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QVariant();

            return sipCpp;
        }
    }

    {
         ::QVariant::Type a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "XE", sipType_QVariant_Type, &a0))
        {
            sipCpp = new  ::QVariant(a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "P0", &a0))
        {
#line 128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
        int is_err = 0;
        QVariant var = qpycore_PyObject_AsQVariant(a0, &is_err);
        
        if (is_err)
            sipCpp = 0;
        else
            sipCpp = new QVariant(var);
#line 25733 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QVariant, &a0, &a0State))
        {
            sipCpp = new  ::QVariant(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QVariant(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVariant(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QVariant **sipCppPtr = reinterpret_cast< ::QVariant **>(sipCppPtrV);

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
if (sipIsErr == NULL)
    // We can convert everything to a QVariant.
    return 1;

// If it is already a QVariant then just return it.
if (Py_TYPE(sipPy) == sipTypeAsPyTypeObject(sipType_QVariant))
{
    *sipCppPtr = reinterpret_cast<QVariant *>(sipConvertToType(sipPy,
            sipType_QVariant, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

// Convert it to a QVariant.
QVariant var = qpycore_PyObject_AsQVariant(sipPy, sipIsErr);

if (*sipIsErr)
    return 0;

*sipCppPtr = new QVariant(var);

return sipGetState(sipTransferObj);
#line 25784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVariant(void *, PyObject *);}
static PyObject *convertFrom_QVariant(void *sipCppV, PyObject *)
{
    ::QVariant *sipCpp = reinterpret_cast< ::QVariant *>(sipCppV);

#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
return qpycore_PyObject_FromQVariant(*sipCpp);
#line 25795 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVariant[] = {
    {(void *)slot_QVariant___ge__, ge_slot},
    {(void *)slot_QVariant___gt__, gt_slot},
    {(void *)slot_QVariant___le__, le_slot},
    {(void *)slot_QVariant___lt__, lt_slot},
    {(void *)slot_QVariant___ne__, ne_slot},
    {(void *)slot_QVariant___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVariant[] = {
    {SIP_MLNAME_CAST(sipName_canConvert), meth_QVariant_canConvert, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_canConvert)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QVariant_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_clear)},
    {SIP_MLNAME_CAST(sipName_convert), meth_QVariant_convert, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_convert)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QVariant_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QVariant_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_isValid)},
    {SIP_MLNAME_CAST(sipName_load), meth_QVariant_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_load)},
    {SIP_MLNAME_CAST(sipName_nameToType), meth_QVariant_nameToType, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_nameToType)},
    {SIP_MLNAME_CAST(sipName_save), meth_QVariant_save, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_save)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QVariant_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_swap)},
    {SIP_MLNAME_CAST(sipName_type), meth_QVariant_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_type)},
    {SIP_MLNAME_CAST(sipName_typeName), meth_QVariant_typeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_typeName)},
    {SIP_MLNAME_CAST(sipName_typeToName), meth_QVariant_typeToName, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_typeToName)},
    {SIP_MLNAME_CAST(sipName_userType), meth_QVariant_userType, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_userType)},
    {SIP_MLNAME_CAST(sipName_value), meth_QVariant_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariant_value)}
};

static sipEnumMemberDef enummembers_QVariant[] = {
    {sipName_BitArray, static_cast<int>( ::QVariant::BitArray), 313},
    {sipName_Bitmap, static_cast<int>( ::QVariant::Bitmap), 313},
    {sipName_Bool, static_cast<int>( ::QVariant::Bool), 313},
    {sipName_Brush, static_cast<int>( ::QVariant::Brush), 313},
    {sipName_ByteArray, static_cast<int>( ::QVariant::ByteArray), 313},
    {sipName_Char, static_cast<int>( ::QVariant::Char), 313},
    {sipName_Color, static_cast<int>( ::QVariant::Color), 313},
    {sipName_Cursor, static_cast<int>( ::QVariant::Cursor), 313},
    {sipName_Date, static_cast<int>( ::QVariant::Date), 313},
    {sipName_DateTime, static_cast<int>( ::QVariant::DateTime), 313},
    {sipName_Double, static_cast<int>( ::QVariant::Double), 313},
    {sipName_EasingCurve, static_cast<int>( ::QVariant::EasingCurve), 313},
    {sipName_Font, static_cast<int>( ::QVariant::Font), 313},
    {sipName_Hash, static_cast<int>( ::QVariant::Hash), 313},
    {sipName_Icon, static_cast<int>( ::QVariant::Icon), 313},
    {sipName_Image, static_cast<int>( ::QVariant::Image), 313},
    {sipName_Int, static_cast<int>( ::QVariant::Int), 313},
    {sipName_Invalid, static_cast<int>( ::QVariant::Invalid), 313},
    {sipName_KeySequence, static_cast<int>( ::QVariant::KeySequence), 313},
    {sipName_Line, static_cast<int>( ::QVariant::Line), 313},
    {sipName_LineF, static_cast<int>( ::QVariant::LineF), 313},
    {sipName_List, static_cast<int>( ::QVariant::List), 313},
    {sipName_Locale, static_cast<int>( ::QVariant::Locale), 313},
    {sipName_LongLong, static_cast<int>( ::QVariant::LongLong), 313},
    {sipName_Map, static_cast<int>( ::QVariant::Map), 313},
    {sipName_Matrix, static_cast<int>( ::QVariant::Matrix), 313},
    {sipName_Matrix4x4, static_cast<int>( ::QVariant::Matrix4x4), 313},
    {sipName_ModelIndex, static_cast<int>( ::QVariant::ModelIndex), 313},
    {sipName_Palette, static_cast<int>( ::QVariant::Palette), 313},
    {sipName_Pen, static_cast<int>( ::QVariant::Pen), 313},
    {sipName_PersistentModelIndex, static_cast<int>( ::QVariant::PersistentModelIndex), 313},
    {sipName_Pixmap, static_cast<int>( ::QVariant::Pixmap), 313},
    {sipName_Point, static_cast<int>( ::QVariant::Point), 313},
    {sipName_PointF, static_cast<int>( ::QVariant::PointF), 313},
    {sipName_Polygon, static_cast<int>( ::QVariant::Polygon), 313},
    {sipName_PolygonF, static_cast<int>( ::QVariant::PolygonF), 313},
    {sipName_Quaternion, static_cast<int>( ::QVariant::Quaternion), 313},
    {sipName_Rect, static_cast<int>( ::QVariant::Rect), 313},
    {sipName_RectF, static_cast<int>( ::QVariant::RectF), 313},
    {sipName_RegExp, static_cast<int>( ::QVariant::RegExp), 313},
    {sipName_Region, static_cast<int>( ::QVariant::Region), 313},
    {sipName_RegularExpression, static_cast<int>( ::QVariant::RegularExpression), 313},
    {sipName_Size, static_cast<int>( ::QVariant::Size), 313},
    {sipName_SizeF, static_cast<int>( ::QVariant::SizeF), 313},
    {sipName_SizePolicy, static_cast<int>( ::QVariant::SizePolicy), 313},
    {sipName_String, static_cast<int>( ::QVariant::String), 313},
    {sipName_StringList, static_cast<int>( ::QVariant::StringList), 313},
    {sipName_TextFormat, static_cast<int>( ::QVariant::TextFormat), 313},
    {sipName_TextLength, static_cast<int>( ::QVariant::TextLength), 313},
    {sipName_Time, static_cast<int>( ::QVariant::Time), 313},
    {sipName_Transform, static_cast<int>( ::QVariant::Transform), 313},
    {sipName_UInt, static_cast<int>( ::QVariant::UInt), 313},
    {sipName_ULongLong, static_cast<int>( ::QVariant::ULongLong), 313},
    {sipName_Url, static_cast<int>( ::QVariant::Url), 313},
    {sipName_UserType, static_cast<int>( ::QVariant::UserType), 313},
    {sipName_Uuid, static_cast<int>( ::QVariant::Uuid), 313},
    {sipName_Vector2D, static_cast<int>( ::QVariant::Vector2D), 313},
    {sipName_Vector3D, static_cast<int>( ::QVariant::Vector3D), 313},
    {sipName_Vector4D, static_cast<int>( ::QVariant::Vector4D), 313},
};

PyDoc_STRVAR(doc_QVariant, "\1QVariant()\n"
"QVariant(QVariant.Type)\n"
"QVariant(object)\n"
"QVariant(QVariant)");


static pyqt5ClassPluginDef plugin_QVariant = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QVariant = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ALLOW_NONE|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVariant,
        {SIP_NULLPTR},
        &plugin_QVariant
    },
    {
        sipNameNr_QVariant,
        {0, 0, 1},
        14, methods_QVariant,
        59, enummembers_QVariant,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QVariant,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QVariant,
    init_type_QVariant,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QVariant,
    assign_QVariant,
    array_QVariant,
    copy_QVariant,
    release_QVariant,
    SIP_NULLPTR,
    convertTo_QVariant,
    convertFrom_QVariant,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/quuid.sip"
#include <quuid.h>
#line 25959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 25963 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 25966 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QUuid_toString, "toString(self) -> str\n"
"toString(self, QUuid.StringFormat) -> str");

extern "C" {static PyObject *meth_QUuid_toString(PyObject *, PyObject *);}
static PyObject *meth_QUuid_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
         ::QUuid::StringFormat a0;
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QUuid, &sipCpp, sipType_QUuid_StringFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_toString, doc_QUuid_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QUuid_isNull(PyObject *, PyObject *);}
static PyObject *meth_QUuid_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_isNull, doc_QUuid_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_createUuid, "createUuid() -> QUuid");

extern "C" {static PyObject *meth_QUuid_createUuid(PyObject *, PyObject *);}
static PyObject *meth_QUuid_createUuid(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuid());

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_createUuid, doc_QUuid_createUuid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_createUuidV3, "createUuidV3(QUuid, Union[QByteArray, bytes, bytearray]) -> QUuid\n"
"createUuidV3(QUuid, str) -> QUuid");

extern "C" {static PyObject *meth_QUuid_createUuidV3(PyObject *, PyObject *);}
static PyObject *meth_QUuid_createUuidV3(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUuid, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuidV3(*a0,*a1));
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    {
        const  ::QUuid* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUuid, &a0, sipType_QString,&a1, &a1State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuidV3(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_createUuidV3, doc_QUuid_createUuidV3);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_createUuidV5, "createUuidV5(QUuid, Union[QByteArray, bytes, bytearray]) -> QUuid\n"
"createUuidV5(QUuid, str) -> QUuid");

extern "C" {static PyObject *meth_QUuid_createUuidV5(PyObject *, PyObject *);}
static PyObject *meth_QUuid_createUuidV5(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUuid, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuidV5(*a0,*a1));
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    {
        const  ::QUuid* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_QUuid, &a0, sipType_QString,&a1, &a1State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::createUuidV5(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_createUuidV5, doc_QUuid_createUuidV5);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_variant, "variant(self) -> QUuid.Variant");

extern "C" {static PyObject *meth_QUuid_variant(PyObject *, PyObject *);}
static PyObject *meth_QUuid_variant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QUuid::Variant sipRes;

            sipRes = sipCpp->variant();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QUuid_Variant);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_variant, doc_QUuid_variant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_version, "version(self) -> QUuid.Version");

extern "C" {static PyObject *meth_QUuid_version(PyObject *, PyObject *);}
static PyObject *meth_QUuid_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QUuid::Version sipRes;

            sipRes = sipCpp->version();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QUuid_Version);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_version, doc_QUuid_version);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_toByteArray, "toByteArray(self) -> QByteArray\n"
"toByteArray(self, QUuid.StringFormat) -> QByteArray");

extern "C" {static PyObject *meth_QUuid_toByteArray(PyObject *, PyObject *);}
static PyObject *meth_QUuid_toByteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toByteArray());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
         ::QUuid::StringFormat a0;
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QUuid, &sipCpp, sipType_QUuid_StringFormat, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toByteArray(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_toByteArray, doc_QUuid_toByteArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_toRfc4122, "toRfc4122(self) -> QByteArray");

extern "C" {static PyObject *meth_QUuid_toRfc4122(PyObject *, PyObject *);}
static PyObject *meth_QUuid_toRfc4122(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUuid, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toRfc4122());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_toRfc4122, doc_QUuid_toRfc4122);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUuid_fromRfc4122, "fromRfc4122(Union[QByteArray, bytes, bytearray]) -> QUuid");

extern "C" {static PyObject *meth_QUuid_fromRfc4122(PyObject *, PyObject *);}
static PyObject *meth_QUuid_fromRfc4122(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QUuid*sipRes;

            sipRes = new  ::QUuid( ::QUuid::fromRfc4122(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUuid, sipName_fromRfc4122, doc_QUuid_fromRfc4122);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QUuid___le__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = operator<=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___ge__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = operator>=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___gt__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUuid::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___lt__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUuid::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUuid::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUuid___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUuid::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUuid___repr__(PyObject *);}
static PyObject *slot_QUuid___repr__(PyObject *sipSelf)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 71 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/quuid.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->toString());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QUuid(%R)", uni);
        #else
            sipRes = PyString_FromFormat("PyQt5.QtCore.QUuid(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
#line 26543 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QUuid___hash__(PyObject *);}
static long slot_QUuid___hash__(PyObject *sipSelf)
{
     ::QUuid *sipCpp = reinterpret_cast< ::QUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUuid));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/quuid.sip"
        sipRes = qHash(*sipCpp);
#line 26568 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUuid(void *, int);}
static void release_QUuid(void *sipCppV, int)
{
    delete reinterpret_cast< ::QUuid *>(sipCppV);
}


extern "C" {static void assign_QUuid(void *, SIP_SSIZE_T, void *);}
static void assign_QUuid(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QUuid *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QUuid *>(sipSrc);
}


extern "C" {static void *array_QUuid(SIP_SSIZE_T);}
static void *array_QUuid(SIP_SSIZE_T sipNrElem)
{
    return new  ::QUuid[sipNrElem];
}


extern "C" {static void *copy_QUuid(const void *, SIP_SSIZE_T);}
static void *copy_QUuid(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QUuid(reinterpret_cast<const  ::QUuid *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUuid(sipSimpleWrapper *);}
static void dealloc_QUuid(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUuid(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QUuid(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUuid(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QUuid *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QUuid();

            return sipCpp;
        }
    }

    {
         ::uint a0;
         ::ushort a1;
         ::ushort a2;
         ::uchar a3;
         ::uchar a4;
         ::uchar a5;
         ::uchar a6;
         ::uchar a7;
         ::uchar a8;
         ::uchar a9;
         ::uchar a10;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "uttMMMMMMMM", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
        {
            sipCpp = new  ::QUuid(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QUuid(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QUuid(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QUuid* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QUuid, &a0))
        {
            sipCpp = new  ::QUuid(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUuid[] = {
    {(void *)slot_QUuid___le__, le_slot},
    {(void *)slot_QUuid___ge__, ge_slot},
    {(void *)slot_QUuid___gt__, gt_slot},
    {(void *)slot_QUuid___lt__, lt_slot},
    {(void *)slot_QUuid___ne__, ne_slot},
    {(void *)slot_QUuid___eq__, eq_slot},
    {(void *)slot_QUuid___repr__, repr_slot},
    {(void *)slot_QUuid___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUuid[] = {
    {SIP_MLNAME_CAST(sipName_createUuid), meth_QUuid_createUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_createUuid)},
    {SIP_MLNAME_CAST(sipName_createUuidV3), meth_QUuid_createUuidV3, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_createUuidV3)},
    {SIP_MLNAME_CAST(sipName_createUuidV5), meth_QUuid_createUuidV5, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_createUuidV5)},
    {SIP_MLNAME_CAST(sipName_fromRfc4122), meth_QUuid_fromRfc4122, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_fromRfc4122)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QUuid_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_isNull)},
    {SIP_MLNAME_CAST(sipName_toByteArray), meth_QUuid_toByteArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_toByteArray)},
    {SIP_MLNAME_CAST(sipName_toRfc4122), meth_QUuid_toRfc4122, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_toRfc4122)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QUuid_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_toString)},
    {SIP_MLNAME_CAST(sipName_variant), meth_QUuid_variant, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_variant)},
    {SIP_MLNAME_CAST(sipName_version), meth_QUuid_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QUuid_version)}
};

static sipEnumMemberDef enummembers_QUuid[] = {
    {sipName_DCE, static_cast<int>( ::QUuid::DCE), 310},
    {sipName_EmbeddedPOSIX, static_cast<int>( ::QUuid::EmbeddedPOSIX), 311},
    {sipName_Id128, static_cast<int>( ::QUuid::Id128), 309},
    {sipName_Md5, static_cast<int>( ::QUuid::Md5), 311},
    {sipName_Microsoft, static_cast<int>( ::QUuid::Microsoft), 310},
    {sipName_NCS, static_cast<int>( ::QUuid::NCS), 310},
    {sipName_Name, static_cast<int>( ::QUuid::Name), 311},
    {sipName_Random, static_cast<int>( ::QUuid::Random), 311},
    {sipName_Reserved, static_cast<int>( ::QUuid::Reserved), 310},
    {sipName_Sha1, static_cast<int>( ::QUuid::Sha1), 311},
    {sipName_Time, static_cast<int>( ::QUuid::Time), 311},
    {sipName_VarUnknown, static_cast<int>( ::QUuid::VarUnknown), 310},
    {sipName_VerUnknown, static_cast<int>( ::QUuid::VerUnknown), 311},
    {sipName_WithBraces, static_cast<int>( ::QUuid::WithBraces), 309},
    {sipName_WithoutBraces, static_cast<int>( ::QUuid::WithoutBraces), 309},
};

PyDoc_STRVAR(doc_QUuid, "\1QUuid()\n"
"QUuid(int, int, int, int, int, int, int, int, int, int, int)\n"
"QUuid(str)\n"
"QUuid(Union[QByteArray, bytes, bytearray])\n"
"QUuid(QUuid)");


static pyqt5ClassPluginDef plugin_QUuid = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QUuid = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUuid,
        {SIP_NULLPTR},
        &plugin_QUuid
    },
    {
        sipNameNr_QUuid,
        {0, 0, 1},
        10, methods_QUuid,
        15, enummembers_QUuid,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUuid,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QUuid,
    init_type_QUuid,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QUuid,
    assign_QUuid,
    array_QUuid,
    copy_QUuid,
    release_QUuid,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurlquery.sip"
#include <qurlquery.h>
#line 26809 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 26813 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 26816 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 26819 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 26822 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 26825 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 26829 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QUrlQuery_swap, "swap(self, QUrlQuery)");

extern "C" {static PyObject *meth_QUrlQuery_swap(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrlQuery* a0;
         ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QUrlQuery, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_swap, doc_QUrlQuery_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QUrlQuery_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlQuery, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_isEmpty, doc_QUrlQuery_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QUrlQuery_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlQuery, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDetached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_isDetached, doc_QUrlQuery_isDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_clear, "clear(self)");

extern "C" {static PyObject *meth_QUrlQuery_clear(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlQuery, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_clear, doc_QUrlQuery_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_query, "query(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrlQuery_query(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_query(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrlQuery *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->query(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_query, doc_QUrlQuery_query);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_setQuery, "setQuery(self, str)");

extern "C" {static PyObject *meth_QUrlQuery_setQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_setQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setQuery(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_setQuery, doc_QUrlQuery_setQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_toString, "toString(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrlQuery_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrlQuery *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_toString, doc_QUrlQuery_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_setQueryDelimiters, "setQueryDelimiters(self, str, str)");

extern "C" {static PyObject *meth_QUrlQuery_setQueryDelimiters(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_setQueryDelimiters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
         ::QChar* a1;
        int a1State = 0;
         ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QChar,&a0, &a0State, sipType_QChar,&a1, &a1State))
        {
            sipCpp->setQueryDelimiters(*a0,*a1);
            sipReleaseType(a0,sipType_QChar,a0State);
            sipReleaseType(a1,sipType_QChar,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_setQueryDelimiters, doc_QUrlQuery_setQueryDelimiters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_queryValueDelimiter, "queryValueDelimiter(self) -> str");

extern "C" {static PyObject *meth_QUrlQuery_queryValueDelimiter(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_queryValueDelimiter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlQuery, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->queryValueDelimiter());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_queryValueDelimiter, doc_QUrlQuery_queryValueDelimiter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_queryPairDelimiter, "queryPairDelimiter(self) -> str");

extern "C" {static PyObject *meth_QUrlQuery_queryPairDelimiter(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_queryPairDelimiter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrlQuery, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->queryPairDelimiter());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_queryPairDelimiter, doc_QUrlQuery_queryPairDelimiter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_setQueryItems, "setQueryItems(self, Iterable[Tuple[str, str]])");

extern "C" {static PyObject *meth_QUrlQuery_setQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_setQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList<QPair<QString,QString> >* a0;
        int a0State = 0;
         ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QList_0600QPair_0100QString_0100QString,&a0, &a0State))
        {
            sipCpp->setQueryItems(*a0);
            sipReleaseType(const_cast<QList<QPair<QString,QString> > *>(a0),sipType_QList_0600QPair_0100QString_0100QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_setQueryItems, doc_QUrlQuery_setQueryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_queryItems, "queryItems(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> List[Tuple[str, str]]");

extern "C" {static PyObject *meth_QUrlQuery_queryItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_queryItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrlQuery *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
            QList<QPair<QString,QString> >*sipRes;

            sipRes = new QList<QPair<QString,QString> >(sipCpp->queryItems(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QString_0100QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_queryItems, doc_QUrlQuery_queryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_hasQueryItem, "hasQueryItem(self, str) -> bool");

extern "C" {static PyObject *meth_QUrlQuery_hasQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_hasQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasQueryItem(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_hasQueryItem, doc_QUrlQuery_hasQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_addQueryItem, "addQueryItem(self, str, str)");

extern "C" {static PyObject *meth_QUrlQuery_addQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_addQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->addQueryItem(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_addQueryItem, doc_QUrlQuery_addQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_removeQueryItem, "removeQueryItem(self, str)");

extern "C" {static PyObject *meth_QUrlQuery_removeQueryItem(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_removeQueryItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeQueryItem(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_removeQueryItem, doc_QUrlQuery_removeQueryItem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_queryItemValue, "queryItemValue(self, str, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrlQuery_queryItemValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_queryItemValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ComponentFormattingOptions a1def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a1 = &a1def;
        int a1State = 0;
        const  ::QUrlQuery *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ComponentFormattingOptions, &a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->queryItemValue(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QUrl_ComponentFormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_queryItemValue, doc_QUrlQuery_queryItemValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_allQueryItemValues, "allQueryItemValues(self, str, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> List[str]");

extern "C" {static PyObject *meth_QUrlQuery_allQueryItemValues(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_allQueryItemValues(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ComponentFormattingOptions a1def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a1 = &a1def;
        int a1State = 0;
        const  ::QUrlQuery *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ComponentFormattingOptions, &a1, &a1State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->allQueryItemValues(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QUrl_ComponentFormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_allQueryItemValues, doc_QUrlQuery_allQueryItemValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_removeAllQueryItems, "removeAllQueryItems(self, str)");

extern "C" {static PyObject *meth_QUrlQuery_removeAllQueryItems(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_removeAllQueryItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeAllQueryItems(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_removeAllQueryItems, doc_QUrlQuery_removeAllQueryItems);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_defaultQueryValueDelimiter, "defaultQueryValueDelimiter() -> str");

extern "C" {static PyObject *meth_QUrlQuery_defaultQueryValueDelimiter(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_defaultQueryValueDelimiter(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar( ::QUrlQuery::defaultQueryValueDelimiter());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_defaultQueryValueDelimiter, doc_QUrlQuery_defaultQueryValueDelimiter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrlQuery_defaultQueryPairDelimiter, "defaultQueryPairDelimiter() -> str");

extern "C" {static PyObject *meth_QUrlQuery_defaultQueryPairDelimiter(PyObject *, PyObject *);}
static PyObject *meth_QUrlQuery_defaultQueryPairDelimiter(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar( ::QUrlQuery::defaultQueryPairDelimiter());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrlQuery, sipName_defaultQueryPairDelimiter, doc_QUrlQuery_defaultQueryPairDelimiter);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QUrlQuery___hash__(PyObject *);}
static long slot_QUrlQuery___hash__(PyObject *sipSelf)
{
     ::QUrlQuery *sipCpp = reinterpret_cast< ::QUrlQuery *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrlQuery));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurlquery.sip"
        sipRes = qHash(*sipCpp);
#line 27471 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QUrlQuery___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrlQuery___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrlQuery *sipCpp = reinterpret_cast< ::QUrlQuery *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrlQuery));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrlQuery* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrlQuery, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUrlQuery::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QUrlQuery, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrlQuery___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrlQuery___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrlQuery *sipCpp = reinterpret_cast< ::QUrlQuery *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrlQuery));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrlQuery* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrlQuery, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUrlQuery::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QUrlQuery, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrlQuery(void *, int);}
static void release_QUrlQuery(void *sipCppV, int)
{
    delete reinterpret_cast< ::QUrlQuery *>(sipCppV);
}


extern "C" {static void assign_QUrlQuery(void *, SIP_SSIZE_T, void *);}
static void assign_QUrlQuery(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QUrlQuery *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QUrlQuery *>(sipSrc);
}


extern "C" {static void *array_QUrlQuery(SIP_SSIZE_T);}
static void *array_QUrlQuery(SIP_SSIZE_T sipNrElem)
{
    return new  ::QUrlQuery[sipNrElem];
}


extern "C" {static void *copy_QUrlQuery(const void *, SIP_SSIZE_T);}
static void *copy_QUrlQuery(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QUrlQuery(reinterpret_cast<const  ::QUrlQuery *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUrlQuery(sipSimpleWrapper *);}
static void dealloc_QUrlQuery(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUrlQuery(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QUrlQuery(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUrlQuery(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QUrlQuery *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QUrlQuery();

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QUrl, &a0))
        {
            sipCpp = new  ::QUrlQuery(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QUrlQuery(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QUrlQuery* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QUrlQuery, &a0))
        {
            sipCpp = new  ::QUrlQuery(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrlQuery[] = {
    {(void *)slot_QUrlQuery___hash__, hash_slot},
    {(void *)slot_QUrlQuery___ne__, ne_slot},
    {(void *)slot_QUrlQuery___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUrlQuery[] = {
    {SIP_MLNAME_CAST(sipName_addQueryItem), meth_QUrlQuery_addQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_addQueryItem)},
    {SIP_MLNAME_CAST(sipName_allQueryItemValues), SIP_MLMETH_CAST(meth_QUrlQuery_allQueryItemValues), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrlQuery_allQueryItemValues)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QUrlQuery_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_clear)},
    {SIP_MLNAME_CAST(sipName_defaultQueryPairDelimiter), meth_QUrlQuery_defaultQueryPairDelimiter, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_defaultQueryPairDelimiter)},
    {SIP_MLNAME_CAST(sipName_defaultQueryValueDelimiter), meth_QUrlQuery_defaultQueryValueDelimiter, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_defaultQueryValueDelimiter)},
    {SIP_MLNAME_CAST(sipName_hasQueryItem), meth_QUrlQuery_hasQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_hasQueryItem)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QUrlQuery_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_isDetached)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QUrlQuery_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_isEmpty)},
    {SIP_MLNAME_CAST(sipName_query), SIP_MLMETH_CAST(meth_QUrlQuery_query), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrlQuery_query)},
    {SIP_MLNAME_CAST(sipName_queryItemValue), SIP_MLMETH_CAST(meth_QUrlQuery_queryItemValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrlQuery_queryItemValue)},
    {SIP_MLNAME_CAST(sipName_queryItems), SIP_MLMETH_CAST(meth_QUrlQuery_queryItems), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrlQuery_queryItems)},
    {SIP_MLNAME_CAST(sipName_queryPairDelimiter), meth_QUrlQuery_queryPairDelimiter, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_queryPairDelimiter)},
    {SIP_MLNAME_CAST(sipName_queryValueDelimiter), meth_QUrlQuery_queryValueDelimiter, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_queryValueDelimiter)},
    {SIP_MLNAME_CAST(sipName_removeAllQueryItems), meth_QUrlQuery_removeAllQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_removeAllQueryItems)},
    {SIP_MLNAME_CAST(sipName_removeQueryItem), meth_QUrlQuery_removeQueryItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_removeQueryItem)},
    {SIP_MLNAME_CAST(sipName_setQuery), meth_QUrlQuery_setQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_setQuery)},
    {SIP_MLNAME_CAST(sipName_setQueryDelimiters), meth_QUrlQuery_setQueryDelimiters, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_setQueryDelimiters)},
    {SIP_MLNAME_CAST(sipName_setQueryItems), meth_QUrlQuery_setQueryItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_setQueryItems)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QUrlQuery_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrlQuery_swap)},
    {SIP_MLNAME_CAST(sipName_toString), SIP_MLMETH_CAST(meth_QUrlQuery_toString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrlQuery_toString)}
};

PyDoc_STRVAR(doc_QUrlQuery, "\1QUrlQuery()\n"
"QUrlQuery(QUrl)\n"
"QUrlQuery(str)\n"
"QUrlQuery(QUrlQuery)");


static pyqt5ClassPluginDef plugin_QUrlQuery = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QUrlQuery = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUrlQuery,
        {SIP_NULLPTR},
        &plugin_QUrlQuery
    },
    {
        sipNameNr_QUrlQuery,
        {0, 0, 1},
        20, methods_QUrlQuery,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUrlQuery,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QUrlQuery,
    init_type_QUrlQuery,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QUrlQuery,
    assign_QUrlQuery,
    array_QUrlQuery,
    copy_QUrlQuery,
    release_QUrlQuery,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 27738 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 27742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static long slot_QUrl_UserInputResolutionOptions___hash__(PyObject *);}
static long slot_QUrl_UserInputResolutionOptions___hash__(PyObject *sipSelf)
{
     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QUrl::UserInputResolutionOptions::Int();
#line 27760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QUrl_UserInputResolutionOptions___bool__(PyObject *);}
static int slot_QUrl_UserInputResolutionOptions___bool__(PyObject *sipSelf)
{
     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QUrl::UserInputResolutionOptions::Int() != 0);
#line 27785 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl::UserInputResolutionOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QUrl_UserInputResolutionOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QUrl::UserInputResolutionOptions::Int() != a0->operator QUrl::UserInputResolutionOptions::Int());
#line 27815 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QUrl::UserInputResolutionOptions *>(a0),sipType_QUrl_UserInputResolutionOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QUrl_UserInputResolutionOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl::UserInputResolutionOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QUrl_UserInputResolutionOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QUrl::UserInputResolutionOptions::Int() == a0->operator QUrl::UserInputResolutionOptions::Int());
#line 27851 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QUrl::UserInputResolutionOptions *>(a0),sipType_QUrl_UserInputResolutionOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QUrl_UserInputResolutionOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_UserInputResolutionOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QUrl::UserInputResolutionOptions(*sipCpp ^ a0);
#line 27890 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::UserInputResolutionOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QUrl_UserInputResolutionOptions, &a0, &a0State, &a1))
        {
             ::QUrl::UserInputResolutionOptions*sipRes;

            sipRes = new  ::QUrl::UserInputResolutionOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QUrl_UserInputResolutionOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_UserInputResolutionOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_UserInputResolutionOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QUrl::UserInputResolutionOptions(*sipCpp | a0);
#line 27962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::UserInputResolutionOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QUrl_UserInputResolutionOptions, &a0, &a0State, &a1))
        {
             ::QUrl::UserInputResolutionOptions*sipRes;

            sipRes = new  ::QUrl::UserInputResolutionOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QUrl_UserInputResolutionOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_UserInputResolutionOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_UserInputResolutionOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QUrl::UserInputResolutionOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::UserInputResolutionOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QUrl_UserInputResolutionOptions, &a0, &a0State, &a1))
        {
             ::QUrl::UserInputResolutionOptions*sipRes;

            sipRes = new  ::QUrl::UserInputResolutionOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QUrl_UserInputResolutionOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_UserInputResolutionOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___invert__(PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___invert__(PyObject *sipSelf)
{
     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QUrl::UserInputResolutionOptions*sipRes;

            sipRes = new  ::QUrl::UserInputResolutionOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QUrl_UserInputResolutionOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QUrl_UserInputResolutionOptions___int__(PyObject *);}
static PyObject *slot_QUrl_UserInputResolutionOptions___int__(PyObject *sipSelf)
{
     ::QUrl::UserInputResolutionOptions *sipCpp = reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_UserInputResolutionOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrl_UserInputResolutionOptions(void *, int);}
static void release_QUrl_UserInputResolutionOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipCppV);
}


extern "C" {static void assign_QUrl_UserInputResolutionOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QUrl_UserInputResolutionOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QUrl::UserInputResolutionOptions *>(sipSrc);
}


extern "C" {static void *array_QUrl_UserInputResolutionOptions(SIP_SSIZE_T);}
static void *array_QUrl_UserInputResolutionOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QUrl::UserInputResolutionOptions[sipNrElem];
}


extern "C" {static void *copy_QUrl_UserInputResolutionOptions(const void *, SIP_SSIZE_T);}
static void *copy_QUrl_UserInputResolutionOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QUrl::UserInputResolutionOptions(reinterpret_cast<const  ::QUrl::UserInputResolutionOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUrl_UserInputResolutionOptions(sipSimpleWrapper *);}
static void dealloc_QUrl_UserInputResolutionOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUrl_UserInputResolutionOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QUrl_UserInputResolutionOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUrl_UserInputResolutionOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QUrl::UserInputResolutionOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QUrl::UserInputResolutionOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QUrl::UserInputResolutionOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QUrl::UserInputResolutionOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QUrl_UserInputResolutionOptions, &a0, &a0State))
        {
            sipCpp = new  ::QUrl::UserInputResolutionOptions(*a0);
            sipReleaseType(const_cast< ::QUrl::UserInputResolutionOptions *>(a0),sipType_QUrl_UserInputResolutionOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QUrl_UserInputResolutionOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QUrl_UserInputResolutionOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QUrl::UserInputResolutionOptions **sipCppPtr = reinterpret_cast< ::QUrl::UserInputResolutionOptions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QUrl::UserInputResolutionOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QUrl_UserInputResolutionOption)) ||
            sipCanConvertToType(sipPy, sipType_QUrl_UserInputResolutionOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QUrl_UserInputResolutionOption)))
{
    *sipCppPtr = new QUrl::UserInputResolutionOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QUrl::UserInputResolutionOptions *>(sipConvertToType(sipPy, sipType_QUrl_UserInputResolutionOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 28230 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrl_UserInputResolutionOptions[] = {
    {(void *)slot_QUrl_UserInputResolutionOptions___hash__, hash_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___bool__, bool_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___ne__, ne_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___eq__, eq_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___ixor__, ixor_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___xor__, xor_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___ior__, ior_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___or__, or_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___iand__, iand_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___and__, and_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___invert__, invert_slot},
    {(void *)slot_QUrl_UserInputResolutionOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QUrl_UserInputResolutionOptions, "\1QUrl.UserInputResolutionOptions()\n"
"QUrl.UserInputResolutionOptions(Union[QUrl.UserInputResolutionOptions, QUrl.UserInputResolutionOption])\n"
"QUrl.UserInputResolutionOptions(QUrl.UserInputResolutionOptions)");


static pyqt5ClassPluginDef plugin_QUrl_UserInputResolutionOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QUrl_UserInputResolutionOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUrl__UserInputResolutionOptions,
        {SIP_NULLPTR},
        &plugin_QUrl_UserInputResolutionOptions
    },
    {
        sipNameNr_UserInputResolutionOptions,
        {299, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUrl_UserInputResolutionOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QUrl_UserInputResolutionOptions,
    init_type_QUrl_UserInputResolutionOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QUrl_UserInputResolutionOptions,
    assign_QUrl_UserInputResolutionOptions,
    array_QUrl_UserInputResolutionOptions,
    copy_QUrl_UserInputResolutionOptions,
    release_QUrl_UserInputResolutionOptions,
    SIP_NULLPTR,
    convertTo_QUrl_UserInputResolutionOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 28318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 28322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static long slot_QUrl_ComponentFormattingOptions___hash__(PyObject *);}
static long slot_QUrl_ComponentFormattingOptions___hash__(PyObject *sipSelf)
{
     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QUrl::ComponentFormattingOptions::Int();
#line 28340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QUrl_ComponentFormattingOptions___bool__(PyObject *);}
static int slot_QUrl_ComponentFormattingOptions___bool__(PyObject *sipSelf)
{
     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QUrl::ComponentFormattingOptions::Int() != 0);
#line 28365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl::ComponentFormattingOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QUrl::ComponentFormattingOptions::Int() != a0->operator QUrl::ComponentFormattingOptions::Int());
#line 28395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QUrl::ComponentFormattingOptions *>(a0),sipType_QUrl_ComponentFormattingOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QUrl_ComponentFormattingOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl::ComponentFormattingOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QUrl::ComponentFormattingOptions::Int() == a0->operator QUrl::ComponentFormattingOptions::Int());
#line 28431 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QUrl::ComponentFormattingOptions *>(a0),sipType_QUrl_ComponentFormattingOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QUrl_ComponentFormattingOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_ComponentFormattingOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QUrl::ComponentFormattingOptions(*sipCpp ^ a0);
#line 28470 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QUrl_ComponentFormattingOptions, &a0, &a0State, &a1))
        {
             ::QUrl::ComponentFormattingOptions*sipRes;

            sipRes = new  ::QUrl::ComponentFormattingOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_ComponentFormattingOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_ComponentFormattingOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QUrl::ComponentFormattingOptions(*sipCpp | a0);
#line 28542 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QUrl_ComponentFormattingOptions, &a0, &a0State, &a1))
        {
             ::QUrl::ComponentFormattingOptions*sipRes;

            sipRes = new  ::QUrl::ComponentFormattingOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_ComponentFormattingOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_ComponentFormattingOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QUrl::ComponentFormattingOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QUrl_ComponentFormattingOptions, &a0, &a0State, &a1))
        {
             ::QUrl::ComponentFormattingOptions*sipRes;

            sipRes = new  ::QUrl::ComponentFormattingOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_ComponentFormattingOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___invert__(PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___invert__(PyObject *sipSelf)
{
     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QUrl::ComponentFormattingOptions*sipRes;

            sipRes = new  ::QUrl::ComponentFormattingOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QUrl_ComponentFormattingOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QUrl_ComponentFormattingOptions___int__(PyObject *);}
static PyObject *slot_QUrl_ComponentFormattingOptions___int__(PyObject *sipSelf)
{
     ::QUrl::ComponentFormattingOptions *sipCpp = reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_ComponentFormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrl_ComponentFormattingOptions(void *, int);}
static void release_QUrl_ComponentFormattingOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipCppV);
}


extern "C" {static void assign_QUrl_ComponentFormattingOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QUrl_ComponentFormattingOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QUrl::ComponentFormattingOptions *>(sipSrc);
}


extern "C" {static void *array_QUrl_ComponentFormattingOptions(SIP_SSIZE_T);}
static void *array_QUrl_ComponentFormattingOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QUrl::ComponentFormattingOptions[sipNrElem];
}


extern "C" {static void *copy_QUrl_ComponentFormattingOptions(const void *, SIP_SSIZE_T);}
static void *copy_QUrl_ComponentFormattingOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QUrl::ComponentFormattingOptions(reinterpret_cast<const  ::QUrl::ComponentFormattingOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUrl_ComponentFormattingOptions(sipSimpleWrapper *);}
static void dealloc_QUrl_ComponentFormattingOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUrl_ComponentFormattingOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QUrl_ComponentFormattingOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUrl_ComponentFormattingOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QUrl::ComponentFormattingOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QUrl::ComponentFormattingOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QUrl::ComponentFormattingOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QUrl::ComponentFormattingOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
            sipCpp = new  ::QUrl::ComponentFormattingOptions(*a0);
            sipReleaseType(const_cast< ::QUrl::ComponentFormattingOptions *>(a0),sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QUrl_ComponentFormattingOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QUrl_ComponentFormattingOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QUrl::ComponentFormattingOptions **sipCppPtr = reinterpret_cast< ::QUrl::ComponentFormattingOptions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QUrl::ComponentFormattingOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QUrl_ComponentFormattingOption)) ||
            sipCanConvertToType(sipPy, sipType_QUrl_ComponentFormattingOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QUrl_ComponentFormattingOption)))
{
    *sipCppPtr = new QUrl::ComponentFormattingOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QUrl::ComponentFormattingOptions *>(sipConvertToType(sipPy, sipType_QUrl_ComponentFormattingOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 28810 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrl_ComponentFormattingOptions[] = {
    {(void *)slot_QUrl_ComponentFormattingOptions___hash__, hash_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___bool__, bool_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___ne__, ne_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___eq__, eq_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___ixor__, ixor_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___xor__, xor_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___ior__, ior_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___or__, or_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___iand__, iand_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___and__, and_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___invert__, invert_slot},
    {(void *)slot_QUrl_ComponentFormattingOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QUrl_ComponentFormattingOptions, "\1QUrl.ComponentFormattingOptions()\n"
"QUrl.ComponentFormattingOptions(Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption])\n"
"QUrl.ComponentFormattingOptions(QUrl.ComponentFormattingOptions)");


static pyqt5ClassPluginDef plugin_QUrl_ComponentFormattingOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QUrl_ComponentFormattingOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUrl__ComponentFormattingOptions,
        {SIP_NULLPTR},
        &plugin_QUrl_ComponentFormattingOptions
    },
    {
        sipNameNr_ComponentFormattingOptions,
        {299, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUrl_ComponentFormattingOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QUrl_ComponentFormattingOptions,
    init_type_QUrl_ComponentFormattingOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QUrl_ComponentFormattingOptions,
    assign_QUrl_ComponentFormattingOptions,
    array_QUrl_ComponentFormattingOptions,
    copy_QUrl_ComponentFormattingOptions,
    release_QUrl_ComponentFormattingOptions,
    SIP_NULLPTR,
    convertTo_QUrl_ComponentFormattingOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 28898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 28902 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static int slot_QUrl_FormattingOptions___bool__(PyObject *);}
static int slot_QUrl_FormattingOptions___bool__(PyObject *sipSelf)
{
     ::QUrl::FormattingOptions *sipCpp = reinterpret_cast< ::QUrl::FormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_FormattingOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
        sipRes = (sipCpp->operator int() != 0);
#line 28920 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl::FormattingOptions *sipCpp = reinterpret_cast< ::QUrl::FormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_FormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl::FormattingOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 63 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
        sipRes = (sipCpp->operator int() != a0->operator int());
#line 28950 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QUrl::FormattingOptions *>(a0),sipType_QUrl_FormattingOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QUrl_FormattingOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl::FormattingOptions *sipCpp = reinterpret_cast< ::QUrl::FormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_FormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl::FormattingOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
        sipRes = (sipCpp->operator int() == a0->operator int());
#line 28986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QUrl::FormattingOptions *>(a0),sipType_QUrl_FormattingOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QUrl_FormattingOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___invert__(PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___invert__(PyObject *sipSelf)
{
     ::QUrl::FormattingOptions *sipCpp = reinterpret_cast< ::QUrl::FormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_FormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QUrl::FormattingOptions*sipRes;

            sipRes = new  ::QUrl::FormattingOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QUrl_FormattingOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QUrl_FormattingOptions, &a0, &a0State, &a1))
        {
             ::QUrl::FormattingOptions*sipRes;

            sipRes = new  ::QUrl::FormattingOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_FormattingOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions* a0;
        int a0State = 0;
         ::QUrl::FormattingOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_QUrl_FormattingOptions, &a0, &a0State, sipType_QUrl_FormattingOptions, &a1, &a1State))
        {
             ::QUrl::FormattingOptions*sipRes;

            sipRes = new  ::QUrl::FormattingOptions((*a0 ^ *a1));
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);
            sipReleaseType(a1,sipType_QUrl_FormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_FormattingOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions* a0;
        int a0State = 0;
         ::QUrl::FormattingOptions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_QUrl_FormattingOptions, &a0, &a0State, sipType_QUrl_FormattingOptions, &a1, &a1State))
        {
             ::QUrl::FormattingOptions*sipRes;

            sipRes = new  ::QUrl::FormattingOptions((*a0 | *a1));
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);
            sipReleaseType(a1,sipType_QUrl_FormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_FormattingOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___int__(PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___int__(PyObject *sipSelf)
{
     ::QUrl::FormattingOptions *sipCpp = reinterpret_cast< ::QUrl::FormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_FormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_FormattingOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::FormattingOptions *sipCpp = reinterpret_cast< ::QUrl::FormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_FormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            sipCpp-> ::QUrl::FormattingOptions::operator^=(*a0);
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_FormattingOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::FormattingOptions *sipCpp = reinterpret_cast< ::QUrl::FormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_FormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            sipCpp-> ::QUrl::FormattingOptions::operator|=(*a0);
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QUrl_FormattingOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QUrl_FormattingOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QUrl_FormattingOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QUrl::FormattingOptions *sipCpp = reinterpret_cast< ::QUrl::FormattingOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl_FormattingOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QUrl::FormattingOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrl_FormattingOptions(void *, int);}
static void release_QUrl_FormattingOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QUrl::FormattingOptions *>(sipCppV);
}


extern "C" {static void dealloc_QUrl_FormattingOptions(sipSimpleWrapper *);}
static void dealloc_QUrl_FormattingOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUrl_FormattingOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QUrl_FormattingOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUrl_FormattingOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QUrl::FormattingOptions *sipCpp = SIP_NULLPTR;

    {
        const  ::QUrl::FormattingOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
            sipCpp = new  ::QUrl::FormattingOptions(*a0);
            sipReleaseType(const_cast< ::QUrl::FormattingOptions *>(a0),sipType_QUrl_FormattingOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QUrl_FormattingOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QUrl_FormattingOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QUrl::FormattingOptions **sipCppPtr = reinterpret_cast< ::QUrl::FormattingOptions **>(sipCppPtrV);

#line 72 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
// Allow an instance of the base enums whenever a QUrl::FormattingOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QUrl_UrlFormattingOption)) ||
            PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QUrl_ComponentFormattingOption)) ||
            sipCanConvertToType(sipPy, sipType_QUrl_FormattingOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QUrl_UrlFormattingOption)) ||
     PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QUrl_ComponentFormattingOption)))
{
    *sipCppPtr = new QUrl::FormattingOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QUrl::FormattingOptions *>(sipConvertToType(sipPy, sipType_QUrl_FormattingOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 29330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrl_FormattingOptions[] = {
    {(void *)slot_QUrl_FormattingOptions___bool__, bool_slot},
    {(void *)slot_QUrl_FormattingOptions___ne__, ne_slot},
    {(void *)slot_QUrl_FormattingOptions___eq__, eq_slot},
    {(void *)slot_QUrl_FormattingOptions___invert__, invert_slot},
    {(void *)slot_QUrl_FormattingOptions___and__, and_slot},
    {(void *)slot_QUrl_FormattingOptions___xor__, xor_slot},
    {(void *)slot_QUrl_FormattingOptions___or__, or_slot},
    {(void *)slot_QUrl_FormattingOptions___int__, int_slot},
    {(void *)slot_QUrl_FormattingOptions___ixor__, ixor_slot},
    {(void *)slot_QUrl_FormattingOptions___ior__, ior_slot},
    {(void *)slot_QUrl_FormattingOptions___iand__, iand_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QUrl_FormattingOptions, "\1QUrl.FormattingOptions(QUrl.FormattingOptions)");


static pyqt5ClassPluginDef plugin_QUrl_FormattingOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QUrl_FormattingOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUrl__FormattingOptions,
        {SIP_NULLPTR},
        &plugin_QUrl_FormattingOptions
    },
    {
        sipNameNr_FormattingOptions,
        {299, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUrl_FormattingOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QUrl_FormattingOptions,
    init_type_QUrl_FormattingOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QUrl_FormattingOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QUrl_FormattingOptions,
    SIP_NULLPTR,
    convertTo_QUrl_FormattingOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 29413 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 29417 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 29420 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 29423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 29426 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 29429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurlquery.sip"
#include <qurlquery.h>
#line 29432 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 29435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 29438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <QHash>
#line 29441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QUrl_url, "url(self, options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_url(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_url(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::FormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->url(*a0));
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_url, doc_QUrl_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setUrl, "setUrl(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setUrl(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUrl, doc_QUrl_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isValid(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isValid, doc_QUrl_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isEmpty, doc_QUrl_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_clear, "clear(self)");

extern "C" {static PyObject *meth_QUrl_clear(PyObject *, PyObject *);}
static PyObject *meth_QUrl_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_clear, doc_QUrl_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setScheme, "setScheme(self, str)");

extern "C" {static PyObject *meth_QUrl_setScheme(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setScheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setScheme(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setScheme, doc_QUrl_setScheme);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_scheme, "scheme(self) -> str");

extern "C" {static PyObject *meth_QUrl_scheme(PyObject *, PyObject *);}
static PyObject *meth_QUrl_scheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->scheme());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_scheme, doc_QUrl_scheme);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setAuthority, "setAuthority(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setAuthority(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setAuthority(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setAuthority(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setAuthority, doc_QUrl_setAuthority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_authority, "authority(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_authority(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_authority(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->authority(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_authority, doc_QUrl_authority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setUserInfo, "setUserInfo(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setUserInfo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUserInfo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setUserInfo(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUserInfo, doc_QUrl_setUserInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_userInfo, "userInfo(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_userInfo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_userInfo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->userInfo(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_userInfo, doc_QUrl_userInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setUserName, "setUserName(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode)");

extern "C" {static PyObject *meth_QUrl_setUserName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setUserName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::DecodedMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setUserName(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setUserName, doc_QUrl_setUserName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_userName, "userName(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_userName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_userName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::FullyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->userName(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_userName, doc_QUrl_userName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setPassword, "setPassword(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode)");

extern "C" {static PyObject *meth_QUrl_setPassword(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPassword(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::DecodedMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setPassword(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPassword, doc_QUrl_setPassword);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_password, "password(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_password(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_password(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::FullyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->password(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_password, doc_QUrl_password);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setHost, "setHost(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode)");

extern "C" {static PyObject *meth_QUrl_setHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::DecodedMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setHost(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setHost, doc_QUrl_setHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_host, "host(self, Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_host(PyObject *, PyObject *);}
static PyObject *meth_QUrl_host(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::FullyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->host(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_host, doc_QUrl_host);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setPort, "setPort(self, int)");

extern "C" {static PyObject *meth_QUrl_setPort(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QUrl, &sipCpp, &a0))
        {
            sipCpp->setPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPort, doc_QUrl_setPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_port, "port(self, defaultPort: int = -1) -> int");

extern "C" {static PyObject *meth_QUrl_port(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_port(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = -1;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultPort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QUrl, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->port(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_port, doc_QUrl_port);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setPath, "setPath(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode)");

extern "C" {static PyObject *meth_QUrl_setPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::DecodedMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setPath(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setPath, doc_QUrl_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_path, "path(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_path(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_path(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::FullyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->path(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_path, doc_QUrl_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setFragment, "setFragment(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)");

extern "C" {static PyObject *meth_QUrl_setFragment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setFragment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setFragment(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setFragment, doc_QUrl_setFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fragment, "fragment(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_fragment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_fragment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fragment(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fragment, doc_QUrl_fragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_resolved, "resolved(self, QUrl) -> QUrl");

extern "C" {static PyObject *meth_QUrl_resolved(PyObject *, PyObject *);}
static PyObject *meth_QUrl_resolved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->resolved(*a0));

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_resolved, doc_QUrl_resolved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isRelative, "isRelative(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRelative();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isRelative, doc_QUrl_isRelative);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isParentOf, "isParentOf(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QUrl_isParentOf(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isParentOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isParentOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isParentOf, doc_QUrl_isParentOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromLocalFile, "fromLocalFile(str) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromLocalFile(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl( ::QUrl::fromLocalFile(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromLocalFile, doc_QUrl_fromLocalFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toLocalFile, "toLocalFile(self) -> str");

extern "C" {static PyObject *meth_QUrl_toLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toLocalFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toLocalFile());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toLocalFile, doc_QUrl_toLocalFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toString, "toString(self, options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::FormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0));
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toString, doc_QUrl_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toEncoded, "toEncoded(self, options: QUrl.FormattingOptions = QUrl.FullyEncoded) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toEncoded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toEncoded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions a0def = QUrl::FullyEncoded;
         ::QUrl::FormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toEncoded(*a0));
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toEncoded, doc_QUrl_toEncoded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromEncoded, "fromEncoded(Union[QByteArray, bytes, bytearray], mode: QUrl.ParsingMode = QUrl.TolerantMode) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromEncoded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromEncoded(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QByteArray, &a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl( ::QUrl::fromEncoded(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromEncoded, doc_QUrl_fromEncoded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_detach, "detach(self)");

extern "C" {static PyObject *meth_QUrl_detach(PyObject *, PyObject *);}
static PyObject *meth_QUrl_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            sipCpp->detach();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_detach, doc_QUrl_detach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDetached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isDetached, doc_QUrl_isDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromPercentEncoding, "fromPercentEncoding(Union[QByteArray, bytes, bytearray]) -> str");

extern "C" {static PyObject *meth_QUrl_fromPercentEncoding(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromPercentEncoding(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QUrl::fromPercentEncoding(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromPercentEncoding, doc_QUrl_fromPercentEncoding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toPercentEncoding, "toPercentEncoding(str, exclude: Union[QByteArray, bytes, bytearray] = QByteArray(), include: Union[QByteArray, bytes, bytearray] = QByteArray()) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toPercentEncoding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toPercentEncoding(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;
        const  ::QByteArray& a2def = QByteArray();
        const  ::QByteArray* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_exclude,
            sipName_include,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J1J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QByteArray, &a2, &a2State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QUrl::toPercentEncoding(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toPercentEncoding, doc_QUrl_toPercentEncoding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_hasQuery, "hasQuery(self) -> bool");

extern "C" {static PyObject *meth_QUrl_hasQuery(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasQuery();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasQuery, doc_QUrl_hasQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_hasFragment, "hasFragment(self) -> bool");

extern "C" {static PyObject *meth_QUrl_hasFragment(PyObject *, PyObject *);}
static PyObject *meth_QUrl_hasFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFragment();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_hasFragment, doc_QUrl_hasFragment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QUrl_errorString(PyObject *, PyObject *);}
static PyObject *meth_QUrl_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_errorString, doc_QUrl_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromAce, "fromAce(Union[QByteArray, bytes, bytearray]) -> str");

extern "C" {static PyObject *meth_QUrl_fromAce(PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromAce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QUrl::fromAce(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromAce, doc_QUrl_fromAce);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toAce, "toAce(str) -> QByteArray");

extern "C" {static PyObject *meth_QUrl_toAce(PyObject *, PyObject *);}
static PyObject *meth_QUrl_toAce(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QUrl::toAce(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toAce, doc_QUrl_toAce);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_idnWhitelist, "idnWhitelist() -> List[str]");

extern "C" {static PyObject *meth_QUrl_idnWhitelist(PyObject *, PyObject *);}
static PyObject *meth_QUrl_idnWhitelist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QUrl::idnWhitelist());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_idnWhitelist, doc_QUrl_idnWhitelist);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setIdnWhitelist, "setIdnWhitelist(Iterable[str])");

extern "C" {static PyObject *meth_QUrl_setIdnWhitelist(PyObject *, PyObject *);}
static PyObject *meth_QUrl_setIdnWhitelist(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
             ::QUrl::setIdnWhitelist(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setIdnWhitelist, doc_QUrl_setIdnWhitelist);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromUserInput, "fromUserInput(str) -> QUrl\n"
"fromUserInput(str, str, options: Union[QUrl.UserInputResolutionOptions, QUrl.UserInputResolutionOption] = QUrl.DefaultResolution) -> QUrl");

extern "C" {static PyObject *meth_QUrl_fromUserInput(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromUserInput(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1", sipType_QString,&a0, &a0State))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl( ::QUrl::fromUserInput(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QUrl::UserInputResolutionOptions a2def = QUrl::DefaultResolution;
         ::QUrl::UserInputResolutionOptions* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J1|J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl_UserInputResolutionOptions, &a2, &a2State))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl( ::QUrl::fromUserInput(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QUrl_UserInputResolutionOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromUserInput, doc_QUrl_fromUserInput);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_swap, "swap(self, QUrl)");

extern "C" {static PyObject *meth_QUrl_swap(PyObject *, PyObject *);}
static PyObject *meth_QUrl_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl* a0;
         ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_swap, doc_QUrl_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_topLevelDomain, "topLevelDomain(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_topLevelDomain(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_topLevelDomain(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::FullyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->topLevelDomain(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_topLevelDomain, doc_QUrl_topLevelDomain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_isLocalFile, "isLocalFile(self) -> bool");

extern "C" {static PyObject *meth_QUrl_isLocalFile(PyObject *, PyObject *);}
static PyObject *meth_QUrl_isLocalFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUrl, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLocalFile();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_isLocalFile, doc_QUrl_isLocalFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toDisplayString, "toDisplayString(self, options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_toDisplayString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toDisplayString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::FormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toDisplayString(*a0));
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toDisplayString, doc_QUrl_toDisplayString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_setQuery, "setQuery(self, str, mode: QUrl.ParsingMode = QUrl.TolerantMode)\n"
"setQuery(self, QUrlQuery)");

extern "C" {static PyObject *meth_QUrl_setQuery(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_setQuery(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;
         ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QUrl, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setQuery(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QUrlQuery* a0;
         ::QUrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrlQuery, &a0))
        {
            sipCpp->setQuery(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_setQuery, doc_QUrl_setQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_query, "query(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.PrettyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_query(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_query(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::PrettyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->query(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_query, doc_QUrl_query);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_toStringList, "toStringList(Iterable[QUrl], options: QUrl.FormattingOptions = QUrl.PrettyDecoded) -> List[str]");

extern "C" {static PyObject *meth_QUrl_toStringList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_toStringList(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QUrl>* a0;
        int a0State = 0;
         ::QUrl::FormattingOptions a1def = QUrl::PrettyDecoded;
         ::QUrl::FormattingOptions* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J1", sipType_QList_0100QUrl,&a0, &a0State, sipType_QUrl_FormattingOptions, &a1, &a1State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QUrl::toStringList(*a0,*a1));
            sipReleaseType(const_cast<QList< ::QUrl> *>(a0),sipType_QList_0100QUrl,a0State);
            sipReleaseType(a1,sipType_QUrl_FormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_toStringList, doc_QUrl_toStringList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fromStringList, "fromStringList(Iterable[str], mode: QUrl.ParsingMode = QUrl.TolerantMode) -> List[QUrl]");

extern "C" {static PyObject *meth_QUrl_fromStringList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_fromStringList(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QStringList,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            QList< ::QUrl>*sipRes;

            sipRes = new QList< ::QUrl>( ::QUrl::fromStringList(*a0,a1));
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fromStringList, doc_QUrl_fromStringList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_adjusted, "adjusted(self, QUrl.FormattingOptions) -> QUrl");

extern "C" {static PyObject *meth_QUrl_adjusted(PyObject *, PyObject *);}
static PyObject *meth_QUrl_adjusted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::FormattingOptions* a0;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_FormattingOptions, &a0, &a0State))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->adjusted(*a0));
            sipReleaseType(a0,sipType_QUrl_FormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_adjusted, doc_QUrl_adjusted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_fileName, "fileName(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.FullyDecoded) -> str");

extern "C" {static PyObject *meth_QUrl_fileName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUrl_fileName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::FullyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QUrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_fileName, doc_QUrl_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QUrl_matches, "matches(self, QUrl, QUrl.FormattingOptions) -> bool");

extern "C" {static PyObject *meth_QUrl_matches(PyObject *, PyObject *);}
static PyObject *meth_QUrl_matches(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QUrl::FormattingOptions* a1;
        int a1State = 0;
        const  ::QUrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QUrl, &sipCpp, sipType_QUrl, &a0, sipType_QUrl_FormattingOptions, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->matches(*a0,*a1);
            sipReleaseType(a1,sipType_QUrl_FormattingOptions,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUrl, sipName_matches, doc_QUrl_matches);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QUrl___ge__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QUrl::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QUrl, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl___ne__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUrl::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QUrl, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl___eq__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUrl::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QUrl, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl___lt__(PyObject *,PyObject *);}
static PyObject *slot_QUrl___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QUrl::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QUrl, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QUrl___repr__(PyObject *);}
static PyObject *slot_QUrl___repr__(PyObject *sipSelf)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->toString());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QUrl(%R)", uni);
        #else
            sipRes = PyString_FromFormat("PyQt5.QtCore.QUrl(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
#line 31403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QUrl___hash__(PyObject *);}
static long slot_QUrl___hash__(PyObject *sipSelf)
{
     ::QUrl *sipCpp = reinterpret_cast< ::QUrl *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QUrl));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
        sipRes = qHash(*sipCpp);
#line 31428 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUrl(void *, int);}
static void release_QUrl(void *sipCppV, int)
{
    delete reinterpret_cast< ::QUrl *>(sipCppV);
}


extern "C" {static void assign_QUrl(void *, SIP_SSIZE_T, void *);}
static void assign_QUrl(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QUrl *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QUrl *>(sipSrc);
}


extern "C" {static void *array_QUrl(SIP_SSIZE_T);}
static void *array_QUrl(SIP_SSIZE_T sipNrElem)
{
    return new  ::QUrl[sipNrElem];
}


extern "C" {static void *copy_QUrl(const void *, SIP_SSIZE_T);}
static void *copy_QUrl(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QUrl(reinterpret_cast<const  ::QUrl *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QUrl(sipSimpleWrapper *);}
static void dealloc_QUrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QUrl(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QUrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUrl(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QUrl *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QUrl();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::TolerantMode;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|E", sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp = new  ::QUrl(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QUrl, &a0))
        {
            sipCpp = new  ::QUrl(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QUrl[] = {
    {(void *)slot_QUrl___ge__, ge_slot},
    {(void *)slot_QUrl___ne__, ne_slot},
    {(void *)slot_QUrl___eq__, eq_slot},
    {(void *)slot_QUrl___lt__, lt_slot},
    {(void *)slot_QUrl___repr__, repr_slot},
    {(void *)slot_QUrl___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QUrl[] = {
    {SIP_MLNAME_CAST(sipName_adjusted), meth_QUrl_adjusted, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_adjusted)},
    {SIP_MLNAME_CAST(sipName_authority), SIP_MLMETH_CAST(meth_QUrl_authority), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_authority)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QUrl_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_clear)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QUrl_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_detach)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QUrl_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_errorString)},
    {SIP_MLNAME_CAST(sipName_fileName), SIP_MLMETH_CAST(meth_QUrl_fileName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_fileName)},
    {SIP_MLNAME_CAST(sipName_fragment), SIP_MLMETH_CAST(meth_QUrl_fragment), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_fragment)},
    {SIP_MLNAME_CAST(sipName_fromAce), meth_QUrl_fromAce, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromAce)},
    {SIP_MLNAME_CAST(sipName_fromEncoded), SIP_MLMETH_CAST(meth_QUrl_fromEncoded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_fromEncoded)},
    {SIP_MLNAME_CAST(sipName_fromLocalFile), meth_QUrl_fromLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromLocalFile)},
    {SIP_MLNAME_CAST(sipName_fromPercentEncoding), meth_QUrl_fromPercentEncoding, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_fromPercentEncoding)},
    {SIP_MLNAME_CAST(sipName_fromStringList), SIP_MLMETH_CAST(meth_QUrl_fromStringList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_fromStringList)},
    {SIP_MLNAME_CAST(sipName_fromUserInput), SIP_MLMETH_CAST(meth_QUrl_fromUserInput), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_fromUserInput)},
    {SIP_MLNAME_CAST(sipName_hasFragment), meth_QUrl_hasFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasFragment)},
    {SIP_MLNAME_CAST(sipName_hasQuery), meth_QUrl_hasQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_hasQuery)},
    {SIP_MLNAME_CAST(sipName_host), meth_QUrl_host, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_host)},
    {SIP_MLNAME_CAST(sipName_idnWhitelist), meth_QUrl_idnWhitelist, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_idnWhitelist)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QUrl_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isDetached)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QUrl_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isLocalFile), meth_QUrl_isLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isLocalFile)},
    {SIP_MLNAME_CAST(sipName_isParentOf), meth_QUrl_isParentOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isParentOf)},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QUrl_isRelative, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isRelative)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QUrl_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_isValid)},
    {SIP_MLNAME_CAST(sipName_matches), meth_QUrl_matches, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_matches)},
    {SIP_MLNAME_CAST(sipName_password), SIP_MLMETH_CAST(meth_QUrl_password), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_password)},
    {SIP_MLNAME_CAST(sipName_path), SIP_MLMETH_CAST(meth_QUrl_path), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_path)},
    {SIP_MLNAME_CAST(sipName_port), SIP_MLMETH_CAST(meth_QUrl_port), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_port)},
    {SIP_MLNAME_CAST(sipName_query), SIP_MLMETH_CAST(meth_QUrl_query), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_query)},
    {SIP_MLNAME_CAST(sipName_resolved), meth_QUrl_resolved, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_resolved)},
    {SIP_MLNAME_CAST(sipName_scheme), meth_QUrl_scheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_scheme)},
    {SIP_MLNAME_CAST(sipName_setAuthority), SIP_MLMETH_CAST(meth_QUrl_setAuthority), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setAuthority)},
    {SIP_MLNAME_CAST(sipName_setFragment), SIP_MLMETH_CAST(meth_QUrl_setFragment), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setFragment)},
    {SIP_MLNAME_CAST(sipName_setHost), SIP_MLMETH_CAST(meth_QUrl_setHost), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setHost)},
    {SIP_MLNAME_CAST(sipName_setIdnWhitelist), meth_QUrl_setIdnWhitelist, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setIdnWhitelist)},
    {SIP_MLNAME_CAST(sipName_setPassword), SIP_MLMETH_CAST(meth_QUrl_setPassword), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setPassword)},
    {SIP_MLNAME_CAST(sipName_setPath), SIP_MLMETH_CAST(meth_QUrl_setPath), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setPath)},
    {SIP_MLNAME_CAST(sipName_setPort), meth_QUrl_setPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setPort)},
    {SIP_MLNAME_CAST(sipName_setQuery), SIP_MLMETH_CAST(meth_QUrl_setQuery), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setQuery)},
    {SIP_MLNAME_CAST(sipName_setScheme), meth_QUrl_setScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_setScheme)},
    {SIP_MLNAME_CAST(sipName_setUrl), SIP_MLMETH_CAST(meth_QUrl_setUrl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setUrl)},
    {SIP_MLNAME_CAST(sipName_setUserInfo), SIP_MLMETH_CAST(meth_QUrl_setUserInfo), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setUserInfo)},
    {SIP_MLNAME_CAST(sipName_setUserName), SIP_MLMETH_CAST(meth_QUrl_setUserName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_setUserName)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QUrl_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_swap)},
    {SIP_MLNAME_CAST(sipName_toAce), meth_QUrl_toAce, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_toAce)},
    {SIP_MLNAME_CAST(sipName_toDisplayString), SIP_MLMETH_CAST(meth_QUrl_toDisplayString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toDisplayString)},
    {SIP_MLNAME_CAST(sipName_toEncoded), SIP_MLMETH_CAST(meth_QUrl_toEncoded), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toEncoded)},
    {SIP_MLNAME_CAST(sipName_toLocalFile), meth_QUrl_toLocalFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QUrl_toLocalFile)},
    {SIP_MLNAME_CAST(sipName_toPercentEncoding), SIP_MLMETH_CAST(meth_QUrl_toPercentEncoding), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toPercentEncoding)},
    {SIP_MLNAME_CAST(sipName_toString), SIP_MLMETH_CAST(meth_QUrl_toString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toString)},
    {SIP_MLNAME_CAST(sipName_toStringList), SIP_MLMETH_CAST(meth_QUrl_toStringList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_toStringList)},
    {SIP_MLNAME_CAST(sipName_topLevelDomain), SIP_MLMETH_CAST(meth_QUrl_topLevelDomain), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_topLevelDomain)},
    {SIP_MLNAME_CAST(sipName_url), SIP_MLMETH_CAST(meth_QUrl_url), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_url)},
    {SIP_MLNAME_CAST(sipName_userInfo), SIP_MLMETH_CAST(meth_QUrl_userInfo), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_userInfo)},
    {SIP_MLNAME_CAST(sipName_userName), SIP_MLMETH_CAST(meth_QUrl_userName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUrl_userName)}
};

static sipEnumMemberDef enummembers_QUrl[] = {
    {sipName_AssumeLocalFile, static_cast<int>( ::QUrl::AssumeLocalFile), 305},
    {sipName_DecodeReserved, static_cast<int>( ::QUrl::DecodeReserved), 300},
    {sipName_DecodedMode, static_cast<int>( ::QUrl::DecodedMode), 303},
    {sipName_DefaultResolution, static_cast<int>( ::QUrl::DefaultResolution), 305},
    {sipName_EncodeDelimiters, static_cast<int>( ::QUrl::EncodeDelimiters), 300},
    {sipName_EncodeReserved, static_cast<int>( ::QUrl::EncodeReserved), 300},
    {sipName_EncodeSpaces, static_cast<int>( ::QUrl::EncodeSpaces), 300},
    {sipName_EncodeUnicode, static_cast<int>( ::QUrl::EncodeUnicode), 300},
    {sipName_FullyDecoded, static_cast<int>( ::QUrl::FullyDecoded), 300},
    {sipName_FullyEncoded, static_cast<int>( ::QUrl::FullyEncoded), 300},
    {sipName_None_, static_cast<int>( ::QUrl::None), 304},
    {sipName_NormalizePathSegments, static_cast<int>( ::QUrl::NormalizePathSegments), 304},
    {sipName_PreferLocalFile, static_cast<int>( ::QUrl::PreferLocalFile), 304},
    {sipName_PrettyDecoded, static_cast<int>( ::QUrl::PrettyDecoded), 300},
    {sipName_RemoveAuthority, static_cast<int>( ::QUrl::RemoveAuthority), 304},
    {sipName_RemoveFilename, static_cast<int>( ::QUrl::RemoveFilename), 304},
    {sipName_RemoveFragment, static_cast<int>( ::QUrl::RemoveFragment), 304},
    {sipName_RemovePassword, static_cast<int>( ::QUrl::RemovePassword), 304},
    {sipName_RemovePath, static_cast<int>( ::QUrl::RemovePath), 304},
    {sipName_RemovePort, static_cast<int>( ::QUrl::RemovePort), 304},
    {sipName_RemoveQuery, static_cast<int>( ::QUrl::RemoveQuery), 304},
    {sipName_RemoveScheme, static_cast<int>( ::QUrl::RemoveScheme), 304},
    {sipName_RemoveUserInfo, static_cast<int>( ::QUrl::RemoveUserInfo), 304},
    {sipName_StrictMode, static_cast<int>( ::QUrl::StrictMode), 303},
    {sipName_StripTrailingSlash, static_cast<int>( ::QUrl::StripTrailingSlash), 304},
    {sipName_TolerantMode, static_cast<int>( ::QUrl::TolerantMode), 303},
};

PyDoc_STRVAR(doc_QUrl, "\1QUrl()\n"
"QUrl(str, mode: QUrl.ParsingMode = QUrl.TolerantMode)\n"
"QUrl(QUrl)");


static pyqt5ClassPluginDef plugin_QUrl = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QUrl = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QUrl,
        {SIP_NULLPTR},
        &plugin_QUrl
    },
    {
        sipNameNr_QUrl,
        {0, 0, 1},
        54, methods_QUrl,
        26, enummembers_QUrl,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QUrl,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QUrl,
    init_type_QUrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QUrl,
    assign_QUrl,
    array_QUrl,
    copy_QUrl,
    release_QUrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 31690 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 31694 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 31697 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 31700 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 31703 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31706 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31709 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31712 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 31715 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 31718 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 31721 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 31724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 31727 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 31730 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 31733 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 31736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 31739 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 31742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQTranslator : public  ::QTranslator
{
public:
    sipQTranslator( ::QObject*);
    virtual ~sipQTranslator();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool isEmpty() const SIP_OVERRIDE;
     ::QString translate(const char*,const char*,const char*,int) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTranslator(const sipQTranslator &);
    sipQTranslator &operator = (const sipQTranslator &);

    char sipPyMethods[9];
};

sipQTranslator::sipQTranslator( ::QObject*a0):  ::QTranslator(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTranslator::~sipQTranslator()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTranslator::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QTranslator);

    return  ::QTranslator::metaObject();
}

int sipQTranslator::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTranslator::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QTranslator,_c,_id,_a);

    return _id;
}

void *sipQTranslator::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QTranslator, _clname, &sipCpp) ? sipCpp :  ::QTranslator::qt_metacast(_clname));
}

bool sipQTranslator::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_isEmpty);

    if (!sipMeth)
        return  ::QTranslator::isEmpty();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QString sipQTranslator::translate(const char*a0,const char*a1,const char*a2,int a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_translate);

    if (!sipMeth)
        return  ::QTranslator::translate(a0,a1,a2,a3);

    extern  ::QString sipVH_QtCore_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,const char*,const char*,int);

    return sipVH_QtCore_65(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQTranslator::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTranslator::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTranslator::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTranslator::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQTranslator::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTranslator::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTranslator::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTranslator::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTranslator::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTranslator::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTranslator::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTranslator::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTranslator::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTranslator::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTranslator_translate, "translate(self, str, str, disambiguation: str = None, n: int = -1) -> str");

extern "C" {static PyObject *meth_QTranslator_translate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTranslator_translate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
        const char* a2 = 0;
        PyObject *a2Keep = 0;
        int a3 = -1;
        const  ::QTranslator *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_disambiguation,
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BAAAA|AAi", &sipSelf, sipType_QTranslator, &sipCpp, &a0Keep, &a0, &a1Keep, &a1, &a2Keep, &a2, &a3))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QTranslator::translate(a0,a1,a2,a3) : sipCpp->translate(a0,a1,a2,a3)));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);
            Py_XDECREF(a2Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTranslator, sipName_translate, doc_QTranslator_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTranslator_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QTranslator_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTranslator_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTranslator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTranslator, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTranslator::isEmpty() : sipCpp->isEmpty());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTranslator, sipName_isEmpty, doc_QTranslator_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTranslator_load, "load(self, str, directory: str = '', searchDelimiters: str = '', suffix: str = '') -> bool\n"
"load(self, QLocale, str, prefix: str = '', directory: str = '', suffix: str = '') -> bool");

extern "C" {static PyObject *meth_QTranslator_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTranslator_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QTranslator *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_directory,
            sipName_searchDelimiters,
            sipName_suffix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1J1J1", &sipSelf, sipType_QTranslator, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QLocale* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QTranslator *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_prefix,
            sipName_directory,
            sipName_suffix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|J1J1J1", &sipSelf, sipType_QTranslator, &sipCpp, sipType_QLocale, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,*a1,*a2,*a3,*a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTranslator, sipName_load, doc_QTranslator_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTranslator_loadFromData, "loadFromData(self, bytes, directory: str = '') -> bool");

extern "C" {static PyObject *meth_QTranslator_loadFromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTranslator_loadFromData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::uchar* a0;
        SIP_SSIZE_T a1;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QTranslator *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_directory,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bk|J1", &sipSelf, sipType_QTranslator, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0,(int)a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTranslator, sipName_loadFromData, doc_QTranslator_loadFromData);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTranslator(void *, const sipTypeDef *);}
static void *cast_QTranslator(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTranslator *sipCpp = reinterpret_cast< ::QTranslator *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTranslator(void *, int);}
static void release_QTranslator(void *sipCppV, int)
{
     ::QTranslator *sipCpp = reinterpret_cast< ::QTranslator *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTranslator(sipSimpleWrapper *);}
static void dealloc_QTranslator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTranslator *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTranslator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTranslator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTranslator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTranslator *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQTranslator(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTranslator[] = {{183, 255, 1}};


static PyMethodDef methods_QTranslator[] = {
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTranslator_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTranslator_isEmpty)},
    {SIP_MLNAME_CAST(sipName_load), SIP_MLMETH_CAST(meth_QTranslator_load), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTranslator_load)},
    {SIP_MLNAME_CAST(sipName_loadFromData), SIP_MLMETH_CAST(meth_QTranslator_loadFromData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTranslator_loadFromData)},
    {SIP_MLNAME_CAST(sipName_translate), SIP_MLMETH_CAST(meth_QTranslator_translate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTranslator_translate)}
};

PyDoc_STRVAR(doc_QTranslator, "\1QTranslator(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QTranslator = {
    & ::QTranslator::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTranslator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTranslator,
        {SIP_NULLPTR},
        &plugin_QTranslator
    },
    {
        sipNameNr_QTranslator,
        {0, 0, 1},
        4, methods_QTranslator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTranslator,
    -1,
    -1,
    supers_QTranslator,
    SIP_NULLPTR,
    init_type_QTranslator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTranslator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTranslator,
    cast_QTranslator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 32317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 32321 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 32324 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QTimeZone_OffsetData(void *, int);}
static void release_QTimeZone_OffsetData(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTimeZone::OffsetData *>(sipCppV);
}


extern "C" {static void assign_QTimeZone_OffsetData(void *, SIP_SSIZE_T, void *);}
static void assign_QTimeZone_OffsetData(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTimeZone::OffsetData *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTimeZone::OffsetData *>(sipSrc);
}


extern "C" {static void *array_QTimeZone_OffsetData(SIP_SSIZE_T);}
static void *array_QTimeZone_OffsetData(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTimeZone::OffsetData[sipNrElem];
}


extern "C" {static void *copy_QTimeZone_OffsetData(const void *, SIP_SSIZE_T);}
static void *copy_QTimeZone_OffsetData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTimeZone::OffsetData(reinterpret_cast<const  ::QTimeZone::OffsetData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTimeZone_OffsetData(sipSimpleWrapper *);}
static void dealloc_QTimeZone_OffsetData(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTimeZone_OffsetData(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTimeZone_OffsetData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTimeZone_OffsetData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTimeZone::OffsetData *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTimeZone::OffsetData();

            return sipCpp;
        }
    }

    {
        const  ::QTimeZone::OffsetData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTimeZone_OffsetData, &a0))
        {
            sipCpp = new  ::QTimeZone::OffsetData(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_abbreviation(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_abbreviation(void *sipSelf, PyObject *, PyObject *)
{
     ::QString*sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    sipVal = &sipCpp->abbreviation;

    return sipConvertFromType(sipVal, sipType_QString, SIP_NULLPTR);
}


extern "C" {static int varset_QTimeZone_OffsetData_abbreviation(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_abbreviation(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QString*sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QString *>(sipForceConvertToType(sipPy, sipType_QString, SIP_NULLPTR, SIP_NOT_NONE, &sipValState, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->abbreviation = *sipVal;

    sipReleaseType(sipVal, sipType_QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_atUtc(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_atUtc(void *sipSelf, PyObject *, PyObject *)
{
     ::QDateTime*sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    sipVal = &sipCpp->atUtc;

    return sipConvertFromType(sipVal, sipType_QDateTime, SIP_NULLPTR);
}


extern "C" {static int varset_QTimeZone_OffsetData_atUtc(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_atUtc(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QDateTime*sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QDateTime *>(sipForceConvertToType(sipPy, sipType_QDateTime, SIP_NULLPTR, SIP_NOT_NONE, &sipValState, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->atUtc = *sipVal;

    sipReleaseType(sipVal, sipType_QDateTime, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_daylightTimeOffset(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_daylightTimeOffset(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipCpp->daylightTimeOffset;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QTimeZone_OffsetData_daylightTimeOffset(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_daylightTimeOffset(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->daylightTimeOffset = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_offsetFromUtc(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_offsetFromUtc(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipCpp->offsetFromUtc;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QTimeZone_OffsetData_offsetFromUtc(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_offsetFromUtc(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->offsetFromUtc = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_standardTimeOffset(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_standardTimeOffset(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipCpp->standardTimeOffset;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QTimeZone_OffsetData_standardTimeOffset(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_standardTimeOffset(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QTimeZone::OffsetData *sipCpp = reinterpret_cast< ::QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->standardTimeOffset = sipVal;

    return 0;
}

sipVariableDef variables_QTimeZone_OffsetData[] = {
    {InstanceVariable, sipName_abbreviation, (PyMethodDef *)varget_QTimeZone_OffsetData_abbreviation, (PyMethodDef *)varset_QTimeZone_OffsetData_abbreviation, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_atUtc, (PyMethodDef *)varget_QTimeZone_OffsetData_atUtc, (PyMethodDef *)varset_QTimeZone_OffsetData_atUtc, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_daylightTimeOffset, (PyMethodDef *)varget_QTimeZone_OffsetData_daylightTimeOffset, (PyMethodDef *)varset_QTimeZone_OffsetData_daylightTimeOffset, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_offsetFromUtc, (PyMethodDef *)varget_QTimeZone_OffsetData_offsetFromUtc, (PyMethodDef *)varset_QTimeZone_OffsetData_offsetFromUtc, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_standardTimeOffset, (PyMethodDef *)varget_QTimeZone_OffsetData_standardTimeOffset, (PyMethodDef *)varset_QTimeZone_OffsetData_standardTimeOffset, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QTimeZone_OffsetData, "\1QTimeZone.OffsetData()\n"
"QTimeZone.OffsetData(QTimeZone.OffsetData)");


static pyqt5ClassPluginDef plugin_QTimeZone_OffsetData = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTimeZone_OffsetData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTimeZone__OffsetData,
        {SIP_NULLPTR},
        &plugin_QTimeZone_OffsetData
    },
    {
        sipNameNr_OffsetData,
        {292, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        5, variables_QTimeZone_OffsetData,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTimeZone_OffsetData,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTimeZone_OffsetData,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTimeZone_OffsetData,
    assign_QTimeZone_OffsetData,
    array_QTimeZone_OffsetData,
    copy_QTimeZone_OffsetData,
    release_QTimeZone_OffsetData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 32622 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 32626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 32629 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 32632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 32635 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 32638 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 32643 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 32646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QTimeZone_swap, "swap(self, QTimeZone)");

extern "C" {static PyObject *meth_QTimeZone_swap(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTimeZone* a0;
         ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QTimeZone, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_swap, doc_QTimeZone_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTimeZone_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeZone, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_isValid, doc_QTimeZone_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_id, "id(self) -> QByteArray");

extern "C" {static PyObject *meth_QTimeZone_id(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_id(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeZone, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->id());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_id, doc_QTimeZone_id);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_country, "country(self) -> QLocale.Country");

extern "C" {static PyObject *meth_QTimeZone_country(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_country(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeZone, &sipCpp))
        {
             ::QLocale::Country sipRes;

            sipRes = sipCpp->country();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocale_Country);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_country, doc_QTimeZone_country);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_comment, "comment(self) -> str");

extern "C" {static PyObject *meth_QTimeZone_comment(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_comment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeZone, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->comment());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_comment, doc_QTimeZone_comment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_displayName, "displayName(self, Union[QDateTime, datetime.datetime], nameType: QTimeZone.NameType = QTimeZone.DefaultName, locale: QLocale = QLocale()) -> str\n"
"displayName(self, QTimeZone.TimeType, nameType: QTimeZone.NameType = QTimeZone.DefaultName, locale: QLocale = QLocale()) -> str");

extern "C" {static PyObject *meth_QTimeZone_displayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_displayName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QTimeZone::NameType a1 = QTimeZone::DefaultName;
        const  ::QLocale& a2def = QLocale();
        const  ::QLocale* a2 = &a2def;
        const  ::QTimeZone *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_nameType,
            sipName_locale,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|EJ9", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QTimeZone_NameType, &a1, sipType_QLocale, &a2))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->displayName(*a0,a1,*a2));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
         ::QTimeZone::TimeType a0;
         ::QTimeZone::NameType a1 = QTimeZone::DefaultName;
        const  ::QLocale& a2def = QLocale();
        const  ::QLocale* a2 = &a2def;
        const  ::QTimeZone *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_nameType,
            sipName_locale,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|EJ9", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QTimeZone_TimeType, &a0, sipType_QTimeZone_NameType, &a1, sipType_QLocale, &a2))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->displayName(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_displayName, doc_QTimeZone_displayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_abbreviation, "abbreviation(self, Union[QDateTime, datetime.datetime]) -> str");

extern "C" {static PyObject *meth_QTimeZone_abbreviation(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_abbreviation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->abbreviation(*a0));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_abbreviation, doc_QTimeZone_abbreviation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_offsetFromUtc, "offsetFromUtc(self, Union[QDateTime, datetime.datetime]) -> int");

extern "C" {static PyObject *meth_QTimeZone_offsetFromUtc(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_offsetFromUtc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->offsetFromUtc(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_offsetFromUtc, doc_QTimeZone_offsetFromUtc);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_standardTimeOffset, "standardTimeOffset(self, Union[QDateTime, datetime.datetime]) -> int");

extern "C" {static PyObject *meth_QTimeZone_standardTimeOffset(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_standardTimeOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->standardTimeOffset(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_standardTimeOffset, doc_QTimeZone_standardTimeOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_daylightTimeOffset, "daylightTimeOffset(self, Union[QDateTime, datetime.datetime]) -> int");

extern "C" {static PyObject *meth_QTimeZone_daylightTimeOffset(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_daylightTimeOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->daylightTimeOffset(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_daylightTimeOffset, doc_QTimeZone_daylightTimeOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_hasDaylightTime, "hasDaylightTime(self) -> bool");

extern "C" {static PyObject *meth_QTimeZone_hasDaylightTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_hasDaylightTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeZone, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasDaylightTime();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_hasDaylightTime, doc_QTimeZone_hasDaylightTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_isDaylightTime, "isDaylightTime(self, Union[QDateTime, datetime.datetime]) -> bool");

extern "C" {static PyObject *meth_QTimeZone_isDaylightTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_isDaylightTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isDaylightTime(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_isDaylightTime, doc_QTimeZone_isDaylightTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_offsetData, "offsetData(self, Union[QDateTime, datetime.datetime]) -> QTimeZone.OffsetData");

extern "C" {static PyObject *meth_QTimeZone_offsetData(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_offsetData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::QTimeZone::OffsetData*sipRes;

            sipRes = new  ::QTimeZone::OffsetData(sipCpp->offsetData(*a0));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTimeZone_OffsetData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_offsetData, doc_QTimeZone_offsetData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_hasTransitions, "hasTransitions(self) -> bool");

extern "C" {static PyObject *meth_QTimeZone_hasTransitions(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_hasTransitions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeZone, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasTransitions();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_hasTransitions, doc_QTimeZone_hasTransitions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_nextTransition, "nextTransition(self, Union[QDateTime, datetime.datetime]) -> QTimeZone.OffsetData");

extern "C" {static PyObject *meth_QTimeZone_nextTransition(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_nextTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::QTimeZone::OffsetData*sipRes;

            sipRes = new  ::QTimeZone::OffsetData(sipCpp->nextTransition(*a0));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTimeZone_OffsetData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_nextTransition, doc_QTimeZone_nextTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_previousTransition, "previousTransition(self, Union[QDateTime, datetime.datetime]) -> QTimeZone.OffsetData");

extern "C" {static PyObject *meth_QTimeZone_previousTransition(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_previousTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::QTimeZone::OffsetData*sipRes;

            sipRes = new  ::QTimeZone::OffsetData(sipCpp->previousTransition(*a0));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTimeZone_OffsetData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_previousTransition, doc_QTimeZone_previousTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_transitions, "transitions(self, Union[QDateTime, datetime.datetime], Union[QDateTime, datetime.datetime]) -> List[QTimeZone.OffsetData]");

extern "C" {static PyObject *meth_QTimeZone_transitions(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_transitions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QDateTime* a1;
        int a1State = 0;
        const  ::QTimeZone *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QTimeZone, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QDateTime, &a1, &a1State))
        {
             ::QTimeZone::OffsetDataList*sipRes;

            sipRes = new  ::QTimeZone::OffsetDataList(sipCpp->transitions(*a0,*a1));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);
            sipReleaseType(const_cast< ::QDateTime *>(a1),sipType_QDateTime,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTimeZone_OffsetData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_transitions, doc_QTimeZone_transitions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_systemTimeZoneId, "systemTimeZoneId() -> QByteArray");

extern "C" {static PyObject *meth_QTimeZone_systemTimeZoneId(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_systemTimeZoneId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QTimeZone::systemTimeZoneId());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_systemTimeZoneId, doc_QTimeZone_systemTimeZoneId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_isTimeZoneIdAvailable, "isTimeZoneIdAvailable(Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QTimeZone_isTimeZoneIdAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_isTimeZoneIdAvailable(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QTimeZone::isTimeZoneIdAvailable(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_isTimeZoneIdAvailable, doc_QTimeZone_isTimeZoneIdAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_availableTimeZoneIds, "availableTimeZoneIds() -> List[QByteArray]\n"
"availableTimeZoneIds(QLocale.Country) -> List[QByteArray]\n"
"availableTimeZoneIds(int) -> List[QByteArray]");

extern "C" {static PyObject *meth_QTimeZone_availableTimeZoneIds(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_availableTimeZoneIds(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QTimeZone::availableTimeZoneIds());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    {
         ::QLocale::Country a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "XE", sipType_QLocale_Country, &a0))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QTimeZone::availableTimeZoneIds(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QTimeZone::availableTimeZoneIds(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_availableTimeZoneIds, doc_QTimeZone_availableTimeZoneIds);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_ianaIdToWindowsId, "ianaIdToWindowsId(Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QTimeZone_ianaIdToWindowsId(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_ianaIdToWindowsId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QTimeZone::ianaIdToWindowsId(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_ianaIdToWindowsId, doc_QTimeZone_ianaIdToWindowsId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_windowsIdToDefaultIanaId, "windowsIdToDefaultIanaId(Union[QByteArray, bytes, bytearray]) -> QByteArray\n"
"windowsIdToDefaultIanaId(Union[QByteArray, bytes, bytearray], QLocale.Country) -> QByteArray");

extern "C" {static PyObject *meth_QTimeZone_windowsIdToDefaultIanaId(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_windowsIdToDefaultIanaId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QTimeZone::windowsIdToDefaultIanaId(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QLocale::Country a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1E", sipType_QByteArray, &a0, &a0State, sipType_QLocale_Country, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QTimeZone::windowsIdToDefaultIanaId(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_windowsIdToDefaultIanaId, doc_QTimeZone_windowsIdToDefaultIanaId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_windowsIdToIanaIds, "windowsIdToIanaIds(Union[QByteArray, bytes, bytearray]) -> List[QByteArray]\n"
"windowsIdToIanaIds(Union[QByteArray, bytes, bytearray], QLocale.Country) -> List[QByteArray]");

extern "C" {static PyObject *meth_QTimeZone_windowsIdToIanaIds(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_windowsIdToIanaIds(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QTimeZone::windowsIdToIanaIds(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QLocale::Country a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1E", sipType_QByteArray, &a0, &a0State, sipType_QLocale_Country, &a1))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QTimeZone::windowsIdToIanaIds(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_windowsIdToIanaIds, doc_QTimeZone_windowsIdToIanaIds);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_systemTimeZone, "systemTimeZone() -> QTimeZone");

extern "C" {static PyObject *meth_QTimeZone_systemTimeZone(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_systemTimeZone(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QTimeZone*sipRes;

            sipRes = new  ::QTimeZone( ::QTimeZone::systemTimeZone());

            return sipConvertFromNewType(sipRes,sipType_QTimeZone,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_systemTimeZone, doc_QTimeZone_systemTimeZone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeZone_utc, "utc() -> QTimeZone");

extern "C" {static PyObject *meth_QTimeZone_utc(PyObject *, PyObject *);}
static PyObject *meth_QTimeZone_utc(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QTimeZone*sipRes;

            sipRes = new  ::QTimeZone( ::QTimeZone::utc());

            return sipConvertFromNewType(sipRes,sipType_QTimeZone,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeZone, sipName_utc, doc_QTimeZone_utc);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTimeZone___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTimeZone___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTimeZone *sipCpp = reinterpret_cast< ::QTimeZone *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTimeZone));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTimeZone, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTimeZone::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QTimeZone, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTimeZone___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTimeZone___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTimeZone *sipCpp = reinterpret_cast< ::QTimeZone *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTimeZone));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTimeZone, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTimeZone::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QTimeZone, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTimeZone(void *, int);}
static void release_QTimeZone(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTimeZone *>(sipCppV);
}


extern "C" {static void assign_QTimeZone(void *, SIP_SSIZE_T, void *);}
static void assign_QTimeZone(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTimeZone *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTimeZone *>(sipSrc);
}


extern "C" {static void *array_QTimeZone(SIP_SSIZE_T);}
static void *array_QTimeZone(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTimeZone[sipNrElem];
}


extern "C" {static void *copy_QTimeZone(const void *, SIP_SSIZE_T);}
static void *copy_QTimeZone(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTimeZone(reinterpret_cast<const  ::QTimeZone *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTimeZone(sipSimpleWrapper *);}
static void dealloc_QTimeZone(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTimeZone(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTimeZone(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTimeZone(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTimeZone *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTimeZone();

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QTimeZone(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTimeZone(a0);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
         ::QLocale::Country a4 = QLocale::AnyCountry;
        const  ::QString& a5def = QString();
        const  ::QString* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_country,
            sipName_comment,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1iJ1J1|EJ1", sipType_QByteArray, &a0, &a0State, &a1, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QLocale_Country, &a4, sipType_QString,&a5, &a5State))
        {
            sipCpp = new  ::QTimeZone(*a0,a1,*a2,*a3,a4,*a5);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return sipCpp;
        }
    }

    {
        const  ::QTimeZone* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTimeZone, &a0))
        {
            sipCpp = new  ::QTimeZone(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTimeZone[] = {
    {(void *)slot_QTimeZone___ne__, ne_slot},
    {(void *)slot_QTimeZone___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTimeZone[] = {
    {SIP_MLNAME_CAST(sipName_abbreviation), meth_QTimeZone_abbreviation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_abbreviation)},
    {SIP_MLNAME_CAST(sipName_availableTimeZoneIds), meth_QTimeZone_availableTimeZoneIds, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_availableTimeZoneIds)},
    {SIP_MLNAME_CAST(sipName_comment), meth_QTimeZone_comment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_comment)},
    {SIP_MLNAME_CAST(sipName_country), meth_QTimeZone_country, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_country)},
    {SIP_MLNAME_CAST(sipName_daylightTimeOffset), meth_QTimeZone_daylightTimeOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_daylightTimeOffset)},
    {SIP_MLNAME_CAST(sipName_displayName), SIP_MLMETH_CAST(meth_QTimeZone_displayName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTimeZone_displayName)},
    {SIP_MLNAME_CAST(sipName_hasDaylightTime), meth_QTimeZone_hasDaylightTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_hasDaylightTime)},
    {SIP_MLNAME_CAST(sipName_hasTransitions), meth_QTimeZone_hasTransitions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_hasTransitions)},
    {SIP_MLNAME_CAST(sipName_ianaIdToWindowsId), meth_QTimeZone_ianaIdToWindowsId, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_ianaIdToWindowsId)},
    {SIP_MLNAME_CAST(sipName_id), meth_QTimeZone_id, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_id)},
    {SIP_MLNAME_CAST(sipName_isDaylightTime), meth_QTimeZone_isDaylightTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_isDaylightTime)},
    {SIP_MLNAME_CAST(sipName_isTimeZoneIdAvailable), meth_QTimeZone_isTimeZoneIdAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_isTimeZoneIdAvailable)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTimeZone_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_isValid)},
    {SIP_MLNAME_CAST(sipName_nextTransition), meth_QTimeZone_nextTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_nextTransition)},
    {SIP_MLNAME_CAST(sipName_offsetData), meth_QTimeZone_offsetData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_offsetData)},
    {SIP_MLNAME_CAST(sipName_offsetFromUtc), meth_QTimeZone_offsetFromUtc, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_offsetFromUtc)},
    {SIP_MLNAME_CAST(sipName_previousTransition), meth_QTimeZone_previousTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_previousTransition)},
    {SIP_MLNAME_CAST(sipName_standardTimeOffset), meth_QTimeZone_standardTimeOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_standardTimeOffset)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QTimeZone_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_swap)},
    {SIP_MLNAME_CAST(sipName_systemTimeZone), meth_QTimeZone_systemTimeZone, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_systemTimeZone)},
    {SIP_MLNAME_CAST(sipName_systemTimeZoneId), meth_QTimeZone_systemTimeZoneId, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_systemTimeZoneId)},
    {SIP_MLNAME_CAST(sipName_transitions), meth_QTimeZone_transitions, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_transitions)},
    {SIP_MLNAME_CAST(sipName_utc), meth_QTimeZone_utc, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_utc)},
    {SIP_MLNAME_CAST(sipName_windowsIdToDefaultIanaId), meth_QTimeZone_windowsIdToDefaultIanaId, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_windowsIdToDefaultIanaId)},
    {SIP_MLNAME_CAST(sipName_windowsIdToIanaIds), meth_QTimeZone_windowsIdToIanaIds, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeZone_windowsIdToIanaIds)}
};

static sipEnumMemberDef enummembers_QTimeZone[] = {
    {sipName_DaylightTime, static_cast<int>( ::QTimeZone::DaylightTime), 295},
    {sipName_DefaultName, static_cast<int>( ::QTimeZone::DefaultName), 293},
    {sipName_GenericTime, static_cast<int>( ::QTimeZone::GenericTime), 295},
    {sipName_LongName, static_cast<int>( ::QTimeZone::LongName), 293},
    {sipName_OffsetName, static_cast<int>( ::QTimeZone::OffsetName), 293},
    {sipName_ShortName, static_cast<int>( ::QTimeZone::ShortName), 293},
    {sipName_StandardTime, static_cast<int>( ::QTimeZone::StandardTime), 295},
};

PyDoc_STRVAR(doc_QTimeZone, "\1QTimeZone()\n"
"QTimeZone(Union[QByteArray, bytes, bytearray])\n"
"QTimeZone(int)\n"
"QTimeZone(Union[QByteArray, bytes, bytearray], int, str, str, country: QLocale.Country = QLocale.AnyCountry, comment: str = '')\n"
"QTimeZone(QTimeZone)");


static pyqt5ClassPluginDef plugin_QTimeZone = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTimeZone = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTimeZone,
        {SIP_NULLPTR},
        &plugin_QTimeZone
    },
    {
        sipNameNr_QTimeZone,
        {0, 0, 1},
        25, methods_QTimeZone,
        7, enummembers_QTimeZone,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTimeZone,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTimeZone,
    init_type_QTimeZone,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTimeZone,
    assign_QTimeZone,
    array_QTimeZone,
    copy_QTimeZone,
    release_QTimeZone,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimer.sip"
#include <qtimer.h>
#line 33789 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 33802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33820 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33823 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 33826 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33829 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 33832 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 33835 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 33838 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQTimer : public  ::QTimer
{
public:
    sipQTimer( ::QObject*);
    virtual ~sipQTimer();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTimer(const sipQTimer &);
    sipQTimer &operator = (const sipQTimer &);

    char sipPyMethods[7];
};

sipQTimer::sipQTimer( ::QObject*a0):  ::QTimer(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTimer::~sipQTimer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTimer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QTimer);

    return  ::QTimer::metaObject();
}

int sipQTimer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTimer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QTimer,_c,_id,_a);

    return _id;
}

void *sipQTimer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QTimer, _clname, &sipCpp) ? sipCpp :  ::QTimer::qt_metacast(_clname));
}

bool sipQTimer::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTimer::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTimer::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTimer::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQTimer::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTimer::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimer::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTimer::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimer::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTimer::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimer::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTimer::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimer::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTimer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTimer_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QTimer_isActive(PyObject *, PyObject *);}
static PyObject *meth_QTimer_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_isActive, doc_QTimer_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_timerId, "timerId(self) -> int");

extern "C" {static PyObject *meth_QTimer_timerId(PyObject *, PyObject *);}
static PyObject *meth_QTimer_timerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->timerId();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_timerId, doc_QTimer_timerId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_setInterval, "setInterval(self, int)");

extern "C" {static PyObject *meth_QTimer_setInterval(PyObject *, PyObject *);}
static PyObject *meth_QTimer_setInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimer, &sipCpp, &a0))
        {
            sipCpp->setInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_setInterval, doc_QTimer_setInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_interval, "interval(self) -> int");

extern "C" {static PyObject *meth_QTimer_interval(PyObject *, PyObject *);}
static PyObject *meth_QTimer_interval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->interval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_interval, doc_QTimer_interval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_isSingleShot, "isSingleShot(self) -> bool");

extern "C" {static PyObject *meth_QTimer_isSingleShot(PyObject *, PyObject *);}
static PyObject *meth_QTimer_isSingleShot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSingleShot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_isSingleShot, doc_QTimer_isSingleShot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_setSingleShot, "setSingleShot(self, bool)");

extern "C" {static PyObject *meth_QTimer_setSingleShot(PyObject *, PyObject *);}
static PyObject *meth_QTimer_setSingleShot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTimer, &sipCpp, &a0))
        {
            sipCpp->setSingleShot(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_setSingleShot, doc_QTimer_setSingleShot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_singleShot, "singleShot(int, PYQT_SLOT)\n"
"singleShot(int, Qt.TimerType, PYQT_SLOT)");

extern "C" {static PyObject *meth_QTimer_singleShot(PyObject *, PyObject *);}
static PyObject *meth_QTimer_singleShot(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        PyObject * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iP0", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 40 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimer.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_get_connection_parts(a1, 0, "()", true, &receiver, slot_signature)) == sipErrorNone)
        {
            QTimer::singleShot(a0, receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(1, a1);
        }
#line 34228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        int a0;
         ::Qt::TimerType a1;
        PyObject * a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "iEP0", &a0, sipType_Qt_TimerType, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimer.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_get_connection_parts(a2, 0, "()", true, &receiver, slot_signature)) == sipErrorNone)
        {
            QTimer::singleShot(a0, a1, receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(2, a2);
        }
#line 34264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_singleShot, doc_QTimer_singleShot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_start, "start(self, int)\n"
"start(self)");

extern "C" {static PyObject *meth_QTimer_start(PyObject *, PyObject *);}
static PyObject *meth_QTimer_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimer, &sipCpp, &a0))
        {
            sipCpp->start(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimer, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_start, doc_QTimer_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_stop, "stop(self)");

extern "C" {static PyObject *meth_QTimer_stop(PyObject *, PyObject *);}
static PyObject *meth_QTimer_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimer, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_stop, doc_QTimer_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QTimer_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTimer_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTimer, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTimer::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_timerEvent, doc_QTimer_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_setTimerType, "setTimerType(self, Qt.TimerType)");

extern "C" {static PyObject *meth_QTimer_setTimerType(PyObject *, PyObject *);}
static PyObject *meth_QTimer_setTimerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TimerType a0;
         ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTimer, &sipCpp, sipType_Qt_TimerType, &a0))
        {
            sipCpp->setTimerType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_setTimerType, doc_QTimer_setTimerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_timerType, "timerType(self) -> Qt.TimerType");

extern "C" {static PyObject *meth_QTimer_timerType(PyObject *, PyObject *);}
static PyObject *meth_QTimer_timerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimer, &sipCpp))
        {
             ::Qt::TimerType sipRes;

            sipRes = sipCpp->timerType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TimerType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_timerType, doc_QTimer_timerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimer_remainingTime, "remainingTime(self) -> int");

extern "C" {static PyObject *meth_QTimer_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_QTimer_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->remainingTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimer, sipName_remainingTime, doc_QTimer_remainingTime);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTimer(void *, const sipTypeDef *);}
static void *cast_QTimer(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTimer *sipCpp = reinterpret_cast< ::QTimer *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTimer(void *, int);}
static void release_QTimer(void *sipCppV, int)
{
     ::QTimer *sipCpp = reinterpret_cast< ::QTimer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTimer(sipSimpleWrapper *);}
static void dealloc_QTimer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTimer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTimer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTimer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTimer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTimer *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQTimer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTimer[] = {{183, 255, 1}};


static PyMethodDef methods_QTimer[] = {
    {SIP_MLNAME_CAST(sipName_interval), meth_QTimer_interval, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_interval)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QTimer_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_isActive)},
    {SIP_MLNAME_CAST(sipName_isSingleShot), meth_QTimer_isSingleShot, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_isSingleShot)},
    {SIP_MLNAME_CAST(sipName_remainingTime), meth_QTimer_remainingTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_remainingTime)},
    {SIP_MLNAME_CAST(sipName_setInterval), meth_QTimer_setInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_setInterval)},
    {SIP_MLNAME_CAST(sipName_setSingleShot), meth_QTimer_setSingleShot, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_setSingleShot)},
    {SIP_MLNAME_CAST(sipName_setTimerType), meth_QTimer_setTimerType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_setTimerType)},
    {SIP_MLNAME_CAST(sipName_singleShot), meth_QTimer_singleShot, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_singleShot)},
    {SIP_MLNAME_CAST(sipName_start), meth_QTimer_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QTimer_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_stop)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTimer_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_timerEvent)},
    {SIP_MLNAME_CAST(sipName_timerId), meth_QTimer_timerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_timerId)},
    {SIP_MLNAME_CAST(sipName_timerType), meth_QTimer_timerType, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimer_timerType)}
};

PyDoc_STRVAR(doc_QTimer, "\1QTimer(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTimer[] = {
    {"timeout()", "\1timeout(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QTimer = {
    & ::QTimer::staticMetaObject,
    0,
    signals_QTimer,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTimer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTimer,
        {SIP_NULLPTR},
        &plugin_QTimer
    },
    {
        sipNameNr_QTimer,
        {0, 0, 1},
        13, methods_QTimer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTimer,
    -1,
    -1,
    supers_QTimer,
    SIP_NULLPTR,
    init_type_QTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTimer,
    cast_QTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimeline.sip"
#include <qtimeline.h>
#line 34623 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 34627 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 34630 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34633 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 34636 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 34645 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 34648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 34651 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 34654 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 34657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 34660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 34663 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 34666 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 34669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 34672 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 34675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQTimeLine : public  ::QTimeLine
{
public:
    sipQTimeLine(int, ::QObject*);
    virtual ~sipQTimeLine();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::qreal valueForTime(int) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTimeLine(const sipQTimeLine &);
    sipQTimeLine &operator = (const sipQTimeLine &);

    char sipPyMethods[8];
};

sipQTimeLine::sipQTimeLine(int a0, ::QObject*a1):  ::QTimeLine(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTimeLine::~sipQTimeLine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTimeLine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QTimeLine);

    return  ::QTimeLine::metaObject();
}

int sipQTimeLine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTimeLine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QTimeLine,_c,_id,_a);

    return _id;
}

void *sipQTimeLine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QTimeLine, _clname, &sipCpp) ? sipCpp :  ::QTimeLine::qt_metacast(_clname));
}

 ::qreal sipQTimeLine::valueForTime(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_valueForTime);

    if (!sipMeth)
        return  ::QTimeLine::valueForTime(a0);

    extern  ::qreal sipVH_QtCore_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_64(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTimeLine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTimeLine::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTimeLine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTimeLine::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQTimeLine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTimeLine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimeLine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTimeLine::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimeLine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTimeLine::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimeLine::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTimeLine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimeLine::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTimeLine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTimeLine_state, "state(self) -> QTimeLine.State");

extern "C" {static PyObject *meth_QTimeLine_state(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
             ::QTimeLine::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTimeLine_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_state, doc_QTimeLine_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_loopCount, "loopCount(self) -> int");

extern "C" {static PyObject *meth_QTimeLine_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_loopCount, doc_QTimeLine_loopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setLoopCount, "setLoopCount(self, int)");

extern "C" {static PyObject *meth_QTimeLine_setLoopCount(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setLoopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setLoopCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setLoopCount, doc_QTimeLine_setLoopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_direction, "direction(self) -> QTimeLine.Direction");

extern "C" {static PyObject *meth_QTimeLine_direction(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
             ::QTimeLine::Direction sipRes;

            sipRes = sipCpp->direction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTimeLine_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_direction, doc_QTimeLine_direction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setDirection, "setDirection(self, QTimeLine.Direction)");

extern "C" {static PyObject *meth_QTimeLine_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTimeLine::Direction a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimeLine_Direction, &a0))
        {
            sipCpp->setDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setDirection, doc_QTimeLine_setDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QTimeLine_duration(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->duration();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_duration, doc_QTimeLine_duration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setDuration, "setDuration(self, int)");

extern "C" {static PyObject *meth_QTimeLine_setDuration(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setDuration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setDuration, doc_QTimeLine_setDuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_startFrame, "startFrame(self) -> int");

extern "C" {static PyObject *meth_QTimeLine_startFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_startFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->startFrame();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_startFrame, doc_QTimeLine_startFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setStartFrame, "setStartFrame(self, int)");

extern "C" {static PyObject *meth_QTimeLine_setStartFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setStartFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setStartFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setStartFrame, doc_QTimeLine_setStartFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_endFrame, "endFrame(self) -> int");

extern "C" {static PyObject *meth_QTimeLine_endFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_endFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->endFrame();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_endFrame, doc_QTimeLine_endFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setEndFrame, "setEndFrame(self, int)");

extern "C" {static PyObject *meth_QTimeLine_setEndFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setEndFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setEndFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setEndFrame, doc_QTimeLine_setEndFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setFrameRange, "setFrameRange(self, int, int)");

extern "C" {static PyObject *meth_QTimeLine_setFrameRange(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setFrameRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTimeLine, &sipCpp, &a0, &a1))
        {
            sipCpp->setFrameRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setFrameRange, doc_QTimeLine_setFrameRange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_updateInterval, "updateInterval(self) -> int");

extern "C" {static PyObject *meth_QTimeLine_updateInterval(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_updateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->updateInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_updateInterval, doc_QTimeLine_updateInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setUpdateInterval, "setUpdateInterval(self, int)");

extern "C" {static PyObject *meth_QTimeLine_setUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setUpdateInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setUpdateInterval, doc_QTimeLine_setUpdateInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_curveShape, "curveShape(self) -> QTimeLine.CurveShape");

extern "C" {static PyObject *meth_QTimeLine_curveShape(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_curveShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
             ::QTimeLine::CurveShape sipRes;

            sipRes = sipCpp->curveShape();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTimeLine_CurveShape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_curveShape, doc_QTimeLine_curveShape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setCurveShape, "setCurveShape(self, QTimeLine.CurveShape)");

extern "C" {static PyObject *meth_QTimeLine_setCurveShape(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setCurveShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTimeLine::CurveShape a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimeLine_CurveShape, &a0))
        {
            sipCpp->setCurveShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setCurveShape, doc_QTimeLine_setCurveShape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_currentTime, "currentTime(self) -> int");

extern "C" {static PyObject *meth_QTimeLine_currentTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentTime, doc_QTimeLine_currentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_currentFrame, "currentFrame(self) -> int");

extern "C" {static PyObject *meth_QTimeLine_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentFrame();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentFrame, doc_QTimeLine_currentFrame);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_currentValue, "currentValue(self) -> float");

extern "C" {static PyObject *meth_QTimeLine_currentValue(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->currentValue();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentValue, doc_QTimeLine_currentValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_frameForTime, "frameForTime(self, int) -> int");

extern "C" {static PyObject *meth_QTimeLine_frameForTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_frameForTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->frameForTime(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_frameForTime, doc_QTimeLine_frameForTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_valueForTime, "valueForTime(self, int) -> float");

extern "C" {static PyObject *meth_QTimeLine_valueForTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_valueForTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
             ::qreal sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QTimeLine::valueForTime(a0) : sipCpp->valueForTime(a0));

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_valueForTime, doc_QTimeLine_valueForTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_resume, "resume(self)");

extern "C" {static PyObject *meth_QTimeLine_resume(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            sipCpp->resume();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_resume, doc_QTimeLine_resume);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setCurrentTime, "setCurrentTime(self, int)");

extern "C" {static PyObject *meth_QTimeLine_setCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setCurrentTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setCurrentTime, doc_QTimeLine_setCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setPaused, "setPaused(self, bool)");

extern "C" {static PyObject *meth_QTimeLine_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setPaused(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setPaused, doc_QTimeLine_setPaused);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_start, "start(self)");

extern "C" {static PyObject *meth_QTimeLine_start(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_start, doc_QTimeLine_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_stop, "stop(self)");

extern "C" {static PyObject *meth_QTimeLine_stop(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_stop, doc_QTimeLine_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_toggleDirection, "toggleDirection(self)");

extern "C" {static PyObject *meth_QTimeLine_toggleDirection(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_toggleDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            sipCpp->toggleDirection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_toggleDirection, doc_QTimeLine_toggleDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QTimeLine_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QTimeLine::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_timerEvent, doc_QTimeLine_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_easingCurve, "easingCurve(self) -> QEasingCurve");

extern "C" {static PyObject *meth_QTimeLine_easingCurve(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_easingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
             ::QEasingCurve*sipRes;

            sipRes = new  ::QEasingCurve(sipCpp->easingCurve());

            return sipConvertFromNewType(sipRes,sipType_QEasingCurve,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_easingCurve, doc_QTimeLine_easingCurve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTimeLine_setEasingCurve, "setEasingCurve(self, Union[QEasingCurve, QEasingCurve.Type])");

extern "C" {static PyObject *meth_QTimeLine_setEasingCurve(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setEasingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve* a0;
        int a0State = 0;
         ::QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QEasingCurve, &a0, &a0State))
        {
            sipCpp->setEasingCurve(*a0);
            sipReleaseType(const_cast< ::QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setEasingCurve, doc_QTimeLine_setEasingCurve);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTimeLine(void *, const sipTypeDef *);}
static void *cast_QTimeLine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTimeLine *sipCpp = reinterpret_cast< ::QTimeLine *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTimeLine(void *, int);}
static void release_QTimeLine(void *sipCppV, int)
{
     ::QTimeLine *sipCpp = reinterpret_cast< ::QTimeLine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTimeLine(sipSimpleWrapper *);}
static void dealloc_QTimeLine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTimeLine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTimeLine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTimeLine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTimeLine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTimeLine *sipCpp = SIP_NULLPTR;

    {
        int a0 = 1000;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            sipName_duration,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|iJH", &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQTimeLine(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTimeLine[] = {{183, 255, 1}};


static PyMethodDef methods_QTimeLine[] = {
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QTimeLine_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_currentFrame)},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_QTimeLine_currentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_currentTime)},
    {SIP_MLNAME_CAST(sipName_currentValue), meth_QTimeLine_currentValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_currentValue)},
    {SIP_MLNAME_CAST(sipName_curveShape), meth_QTimeLine_curveShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_curveShape)},
    {SIP_MLNAME_CAST(sipName_direction), meth_QTimeLine_direction, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_direction)},
    {SIP_MLNAME_CAST(sipName_duration), meth_QTimeLine_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_duration)},
    {SIP_MLNAME_CAST(sipName_easingCurve), meth_QTimeLine_easingCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_easingCurve)},
    {SIP_MLNAME_CAST(sipName_endFrame), meth_QTimeLine_endFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_endFrame)},
    {SIP_MLNAME_CAST(sipName_frameForTime), meth_QTimeLine_frameForTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_frameForTime)},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QTimeLine_loopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_loopCount)},
    {SIP_MLNAME_CAST(sipName_resume), meth_QTimeLine_resume, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_resume)},
    {SIP_MLNAME_CAST(sipName_setCurrentTime), meth_QTimeLine_setCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setCurrentTime)},
    {SIP_MLNAME_CAST(sipName_setCurveShape), meth_QTimeLine_setCurveShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setCurveShape)},
    {SIP_MLNAME_CAST(sipName_setDirection), meth_QTimeLine_setDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setDirection)},
    {SIP_MLNAME_CAST(sipName_setDuration), meth_QTimeLine_setDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setDuration)},
    {SIP_MLNAME_CAST(sipName_setEasingCurve), meth_QTimeLine_setEasingCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setEasingCurve)},
    {SIP_MLNAME_CAST(sipName_setEndFrame), meth_QTimeLine_setEndFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setEndFrame)},
    {SIP_MLNAME_CAST(sipName_setFrameRange), meth_QTimeLine_setFrameRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setFrameRange)},
    {SIP_MLNAME_CAST(sipName_setLoopCount), meth_QTimeLine_setLoopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setLoopCount)},
    {SIP_MLNAME_CAST(sipName_setPaused), meth_QTimeLine_setPaused, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setPaused)},
    {SIP_MLNAME_CAST(sipName_setStartFrame), meth_QTimeLine_setStartFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setStartFrame)},
    {SIP_MLNAME_CAST(sipName_setUpdateInterval), meth_QTimeLine_setUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_start), meth_QTimeLine_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_start)},
    {SIP_MLNAME_CAST(sipName_startFrame), meth_QTimeLine_startFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_startFrame)},
    {SIP_MLNAME_CAST(sipName_state), meth_QTimeLine_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QTimeLine_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_stop)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTimeLine_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toggleDirection), meth_QTimeLine_toggleDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_toggleDirection)},
    {SIP_MLNAME_CAST(sipName_updateInterval), meth_QTimeLine_updateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_updateInterval)},
    {SIP_MLNAME_CAST(sipName_valueForTime), meth_QTimeLine_valueForTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_valueForTime)}
};

static sipEnumMemberDef enummembers_QTimeLine[] = {
    {sipName_Backward, static_cast<int>( ::QTimeLine::Backward), 290},
    {sipName_CosineCurve, static_cast<int>( ::QTimeLine::CosineCurve), 289},
    {sipName_EaseInCurve, static_cast<int>( ::QTimeLine::EaseInCurve), 289},
    {sipName_EaseInOutCurve, static_cast<int>( ::QTimeLine::EaseInOutCurve), 289},
    {sipName_EaseOutCurve, static_cast<int>( ::QTimeLine::EaseOutCurve), 289},
    {sipName_Forward, static_cast<int>( ::QTimeLine::Forward), 290},
    {sipName_LinearCurve, static_cast<int>( ::QTimeLine::LinearCurve), 289},
    {sipName_NotRunning, static_cast<int>( ::QTimeLine::NotRunning), 291},
    {sipName_Paused, static_cast<int>( ::QTimeLine::Paused), 291},
    {sipName_Running, static_cast<int>( ::QTimeLine::Running), 291},
    {sipName_SineCurve, static_cast<int>( ::QTimeLine::SineCurve), 289},
};

PyDoc_STRVAR(doc_QTimeLine, "\1QTimeLine(duration: int = 1000, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTimeLine[] = {
    {"valueChanged(qreal)", "\1valueChanged(self, float)", SIP_NULLPTR, SIP_NULLPTR},
    {"stateChanged(QTimeLine::State)", "\1stateChanged(self, QTimeLine.State)", SIP_NULLPTR, SIP_NULLPTR},
    {"frameChanged(int)", "\1frameChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QTimeLine = {
    & ::QTimeLine::staticMetaObject,
    0,
    signals_QTimeLine,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTimeLine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTimeLine,
        {SIP_NULLPTR},
        &plugin_QTimeLine
    },
    {
        sipNameNr_QTimeLine,
        {0, 0, 1},
        30, methods_QTimeLine,
        11, enummembers_QTimeLine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTimeLine,
    -1,
    -1,
    supers_QTimeLine,
    SIP_NULLPTR,
    init_type_QTimeLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTimeLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTimeLine,
    cast_QTimeLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthreadpool.sip"
#include <qthreadpool.h>
#line 35917 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 35921 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrunnable.sip"
#include <qrunnable.h>
#line 35924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 35927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 35930 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 35933 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 35936 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 35939 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 35942 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 35945 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 35948 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 35951 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 35954 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 35957 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 35960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 35963 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 35966 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 35969 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQThreadPool : public  ::QThreadPool
{
public:
    sipQThreadPool( ::QObject*);
    virtual ~sipQThreadPool();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQThreadPool(const sipQThreadPool &);
    sipQThreadPool &operator = (const sipQThreadPool &);

    char sipPyMethods[7];
};

sipQThreadPool::sipQThreadPool( ::QObject*a0):  ::QThreadPool(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQThreadPool::~sipQThreadPool()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQThreadPool::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QThreadPool);

    return  ::QThreadPool::metaObject();
}

int sipQThreadPool::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QThreadPool::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QThreadPool,_c,_id,_a);

    return _id;
}

void *sipQThreadPool::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QThreadPool, _clname, &sipCpp) ? sipCpp :  ::QThreadPool::qt_metacast(_clname));
}

bool sipQThreadPool::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QThreadPool::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQThreadPool::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QThreadPool::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQThreadPool::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QThreadPool::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThreadPool::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QThreadPool::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThreadPool::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QThreadPool::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThreadPool::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QThreadPool::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThreadPool::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QThreadPool::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QThreadPool_globalInstance, "globalInstance() -> QThreadPool");

extern "C" {static PyObject *meth_QThreadPool_globalInstance(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_globalInstance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QThreadPool*sipRes;
            PyObject *sipResObj;

            sipRes =  ::QThreadPool::globalInstance();

            sipResObj = sipConvertFromType(sipRes,sipType_QThreadPool,SIP_NULLPTR);

            sipKeepReference(SIP_NULLPTR, -9, sipResObj);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_globalInstance, doc_QThreadPool_globalInstance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_start, "start(self, QRunnable, priority: int = 0)");

extern "C" {static PyObject *meth_QThreadPool_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRunnable* a0;
        PyObject *a0Wrapper;
        int a1 = 0;
         ::QThreadPool *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B@J8|i", &sipSelf, sipType_QThreadPool, &sipCpp, &a0Wrapper, sipType_QRunnable, &a0, &a1))
        {
#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthreadpool.sip"
        // We have to handle the object ownership manually.
        if (a0->autoDelete())
            sipTransferTo(a0Wrapper, sipSelf);
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->start(a0, a1);
        Py_END_ALLOW_THREADS
#line 36221 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_start, doc_QThreadPool_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_tryStart, "tryStart(self, QRunnable) -> bool");

extern "C" {static PyObject *meth_QThreadPool_tryStart(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_tryStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRunnable* a0;
        PyObject *a0Wrapper;
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QThreadPool, &sipCpp, &a0Wrapper, sipType_QRunnable, &a0))
        {
            bool sipRes = 0;

#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthreadpool.sip"
        // We have to handle the object ownership manually.
        if (a0->autoDelete())
            sipTransferTo(a0Wrapper, sipSelf);
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = sipCpp->tryStart(a0);
        Py_END_ALLOW_THREADS
#line 36260 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_tryStart, doc_QThreadPool_tryStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_tryTake, "tryTake(self, QRunnable) -> bool");

extern "C" {static PyObject *meth_QThreadPool_tryTake(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_tryTake(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRunnable* a0;
        PyObject *a0Wrapper;
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QThreadPool, &sipCpp, &a0Wrapper, sipType_QRunnable, &a0))
        {
            bool sipRes = 0;

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthreadpool.sip"
        Py_BEGIN_ALLOW_THREADS
        sipRes = sipCpp->tryTake(a0);
        Py_END_ALLOW_THREADS
        
        // We have to handle the object ownership manually.
        if (sipRes)
            sipTransferBack(a0Wrapper);
#line 36298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_tryTake, doc_QThreadPool_tryTake);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_expiryTimeout, "expiryTimeout(self) -> int");

extern "C" {static PyObject *meth_QThreadPool_expiryTimeout(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_expiryTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThreadPool, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->expiryTimeout();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_expiryTimeout, doc_QThreadPool_expiryTimeout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_setExpiryTimeout, "setExpiryTimeout(self, int)");

extern "C" {static PyObject *meth_QThreadPool_setExpiryTimeout(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_setExpiryTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QThreadPool, &sipCpp, &a0))
        {
            sipCpp->setExpiryTimeout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_setExpiryTimeout, doc_QThreadPool_setExpiryTimeout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_maxThreadCount, "maxThreadCount(self) -> int");

extern "C" {static PyObject *meth_QThreadPool_maxThreadCount(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_maxThreadCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThreadPool, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxThreadCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_maxThreadCount, doc_QThreadPool_maxThreadCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_setMaxThreadCount, "setMaxThreadCount(self, int)");

extern "C" {static PyObject *meth_QThreadPool_setMaxThreadCount(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_setMaxThreadCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QThreadPool, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaxThreadCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_setMaxThreadCount, doc_QThreadPool_setMaxThreadCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_activeThreadCount, "activeThreadCount(self) -> int");

extern "C" {static PyObject *meth_QThreadPool_activeThreadCount(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_activeThreadCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThreadPool, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->activeThreadCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_activeThreadCount, doc_QThreadPool_activeThreadCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_reserveThread, "reserveThread(self)");

extern "C" {static PyObject *meth_QThreadPool_reserveThread(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_reserveThread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThreadPool, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reserveThread();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_reserveThread, doc_QThreadPool_reserveThread);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_releaseThread, "releaseThread(self)");

extern "C" {static PyObject *meth_QThreadPool_releaseThread(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_releaseThread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThreadPool, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->releaseThread();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_releaseThread, doc_QThreadPool_releaseThread);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_waitForDone, "waitForDone(self, msecs: int = -1) -> bool");

extern "C" {static PyObject *meth_QThreadPool_waitForDone(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_waitForDone(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = -1;
         ::QThreadPool *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QThreadPool, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForDone(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_waitForDone, doc_QThreadPool_waitForDone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_clear, "clear(self)");

extern "C" {static PyObject *meth_QThreadPool_clear(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThreadPool, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_clear, doc_QThreadPool_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_cancel, "cancel(self, QRunnable)");

extern "C" {static PyObject *meth_QThreadPool_cancel(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRunnable* a0;
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QThreadPool, &sipCpp, sipType_QRunnable, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cancel(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_cancel, doc_QThreadPool_cancel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_setStackSize, "setStackSize(self, int)");

extern "C" {static PyObject *meth_QThreadPool_setStackSize(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_setStackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
         ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QThreadPool, &sipCpp, &a0))
        {
            sipCpp->setStackSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_setStackSize, doc_QThreadPool_setStackSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThreadPool_stackSize, "stackSize(self) -> int");

extern "C" {static PyObject *meth_QThreadPool_stackSize(PyObject *, PyObject *);}
static PyObject *meth_QThreadPool_stackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThreadPool *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThreadPool, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->stackSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThreadPool, sipName_stackSize, doc_QThreadPool_stackSize);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QThreadPool(void *, const sipTypeDef *);}
static void *cast_QThreadPool(void *sipCppV, const sipTypeDef *targetType)
{
     ::QThreadPool *sipCpp = reinterpret_cast< ::QThreadPool *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QThreadPool(void *, int);}
static void release_QThreadPool(void *sipCppV, int)
{
     ::QThreadPool *sipCpp = reinterpret_cast< ::QThreadPool *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QThreadPool(sipSimpleWrapper *);}
static void dealloc_QThreadPool(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQThreadPool *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QThreadPool(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QThreadPool(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QThreadPool(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQThreadPool *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQThreadPool(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QThreadPool[] = {{183, 255, 1}};


static PyMethodDef methods_QThreadPool[] = {
    {SIP_MLNAME_CAST(sipName_activeThreadCount), meth_QThreadPool_activeThreadCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_activeThreadCount)},
    {SIP_MLNAME_CAST(sipName_cancel), meth_QThreadPool_cancel, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_cancel)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QThreadPool_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_clear)},
    {SIP_MLNAME_CAST(sipName_expiryTimeout), meth_QThreadPool_expiryTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_expiryTimeout)},
    {SIP_MLNAME_CAST(sipName_globalInstance), meth_QThreadPool_globalInstance, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_globalInstance)},
    {SIP_MLNAME_CAST(sipName_maxThreadCount), meth_QThreadPool_maxThreadCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_maxThreadCount)},
    {SIP_MLNAME_CAST(sipName_releaseThread), meth_QThreadPool_releaseThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_releaseThread)},
    {SIP_MLNAME_CAST(sipName_reserveThread), meth_QThreadPool_reserveThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_reserveThread)},
    {SIP_MLNAME_CAST(sipName_setExpiryTimeout), meth_QThreadPool_setExpiryTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_setExpiryTimeout)},
    {SIP_MLNAME_CAST(sipName_setMaxThreadCount), meth_QThreadPool_setMaxThreadCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_setMaxThreadCount)},
    {SIP_MLNAME_CAST(sipName_setStackSize), meth_QThreadPool_setStackSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_setStackSize)},
    {SIP_MLNAME_CAST(sipName_stackSize), meth_QThreadPool_stackSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_stackSize)},
    {SIP_MLNAME_CAST(sipName_start), SIP_MLMETH_CAST(meth_QThreadPool_start), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThreadPool_start)},
    {SIP_MLNAME_CAST(sipName_tryStart), meth_QThreadPool_tryStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_tryStart)},
    {SIP_MLNAME_CAST(sipName_tryTake), meth_QThreadPool_tryTake, METH_VARARGS, SIP_MLDOC_CAST(doc_QThreadPool_tryTake)},
    {SIP_MLNAME_CAST(sipName_waitForDone), SIP_MLMETH_CAST(meth_QThreadPool_waitForDone), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThreadPool_waitForDone)}
};

PyDoc_STRVAR(doc_QThreadPool, "\1QThreadPool(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QThreadPool = {
    & ::QThreadPool::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QThreadPool = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QThreadPool,
        {SIP_NULLPTR},
        &plugin_QThreadPool
    },
    {
        sipNameNr_QThreadPool,
        {0, 0, 1},
        16, methods_QThreadPool,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QThreadPool,
    -1,
    -1,
    supers_QThreadPool,
    SIP_NULLPTR,
    init_type_QThreadPool,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QThreadPool,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QThreadPool,
    cast_QThreadPool,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 36814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36818 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 36821 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36824 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 36827 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36830 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36833 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36836 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36839 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36842 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36845 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36848 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36851 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36854 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 36857 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 36860 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 36863 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQThread : public  ::QThread
{
public:
    sipQThread( ::QObject*);
    virtual ~sipQThread();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void run() SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQThread(const sipQThread &);
    sipQThread &operator = (const sipQThread &);

    char sipPyMethods[8];
};

sipQThread::sipQThread( ::QObject*a0):  ::QThread(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQThread::~sipQThread()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQThread::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QThread);

    return  ::QThread::metaObject();
}

int sipQThread::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QThread::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QThread,_c,_id,_a);

    return _id;
}

void *sipQThread::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QThread, _clname, &sipCpp) ? sipCpp :  ::QThread::qt_metacast(_clname));
}

void sipQThread::run()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_run);

    if (!sipMeth)
    {
         ::QThread::run();
        sipEndThread();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);

    sipEndThread();
}

bool sipQThread::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QThread::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQThread::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QThread::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQThread::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QThread::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThread::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QThread::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThread::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QThread::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThread::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QThread::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQThread::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QThread::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QThread_currentThread, "currentThread() -> QThread");

extern "C" {static PyObject *meth_QThread_currentThread(PyObject *, PyObject *);}
static PyObject *meth_QThread_currentThread(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QThread*sipRes;

            sipRes =  ::QThread::currentThread();

            return sipConvertFromType(sipRes,sipType_QThread,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_currentThread, doc_QThread_currentThread);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_currentThreadId, "currentThreadId() -> sip.voidptr");

extern "C" {static PyObject *meth_QThread_currentThreadId(PyObject *, PyObject *);}
static PyObject *meth_QThread_currentThreadId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::Qt::HANDLE sipRes;

            sipRes =  ::QThread::currentThreadId();

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_currentThreadId, doc_QThread_currentThreadId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_idealThreadCount, "idealThreadCount() -> int");

extern "C" {static PyObject *meth_QThread_idealThreadCount(PyObject *, PyObject *);}
static PyObject *meth_QThread_idealThreadCount(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes =  ::QThread::idealThreadCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_idealThreadCount, doc_QThread_idealThreadCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_yieldCurrentThread, "yieldCurrentThread()");

extern "C" {static PyObject *meth_QThread_yieldCurrentThread(PyObject *, PyObject *);}
static PyObject *meth_QThread_yieldCurrentThread(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QThread::yieldCurrentThread();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_yieldCurrentThread, doc_QThread_yieldCurrentThread);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QThread_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QThread_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_isFinished, doc_QThread_isFinished);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QThread_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QThread_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_isRunning, doc_QThread_isRunning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_setPriority, "setPriority(self, QThread.Priority)");

extern "C" {static PyObject *meth_QThread_setPriority(PyObject *, PyObject *);}
static PyObject *meth_QThread_setPriority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread::Priority a0;
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QThread, &sipCpp, sipType_QThread_Priority, &a0))
        {
            sipCpp->setPriority(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_setPriority, doc_QThread_setPriority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_priority, "priority(self) -> QThread.Priority");

extern "C" {static PyObject *meth_QThread_priority(PyObject *, PyObject *);}
static PyObject *meth_QThread_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
             ::QThread::Priority sipRes;

            sipRes = sipCpp->priority();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QThread_Priority);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_priority, doc_QThread_priority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_setStackSize, "setStackSize(self, int)");

extern "C" {static PyObject *meth_QThread_setStackSize(PyObject *, PyObject *);}
static PyObject *meth_QThread_setStackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QThread, &sipCpp, &a0))
        {
            sipCpp->setStackSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_setStackSize, doc_QThread_setStackSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_stackSize, "stackSize(self) -> int");

extern "C" {static PyObject *meth_QThread_stackSize(PyObject *, PyObject *);}
static PyObject *meth_QThread_stackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->stackSize();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_stackSize, doc_QThread_stackSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_exit, "exit(self, returnCode: int = 0)");

extern "C" {static PyObject *meth_QThread_exit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_exit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QThread *sipCpp;

        static const char *sipKwdList[] = {
            sipName_returnCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QThread, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->exit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_exit, doc_QThread_exit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_start, "start(self, priority: QThread.Priority = QThread.InheritPriority)");

extern "C" {static PyObject *meth_QThread_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread::Priority a0 = QThread::InheritPriority;
         ::QThread *sipCpp;

        static const char *sipKwdList[] = {
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QThread, &sipCpp, sipType_QThread_Priority, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->start(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_start, doc_QThread_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_terminate, "terminate(self)");

extern "C" {static PyObject *meth_QThread_terminate(PyObject *, PyObject *);}
static PyObject *meth_QThread_terminate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            sipCpp->terminate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_terminate, doc_QThread_terminate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_quit, "quit(self)");

extern "C" {static PyObject *meth_QThread_quit(PyObject *, PyObject *);}
static PyObject *meth_QThread_quit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            sipCpp->quit();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_quit, doc_QThread_quit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_wait, "wait(self, msecs: int = ULONG_MAX) -> bool");

extern "C" {static PyObject *meth_QThread_wait(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_wait(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned long a0 = ULONG_MAX;
         ::QThread *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|m", &sipSelf, sipType_QThread, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wait(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_wait, doc_QThread_wait);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_run, "run(self)");

extern "C" {static PyObject *meth_QThread_run(PyObject *, PyObject *);}
static PyObject *meth_QThread_run(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QThread, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QThread::run() : sipCpp->run());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_run, doc_QThread_run);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_exec_, "exec_(self) -> int");

extern "C" {static PyObject *meth_QThread_exec_(PyObject *, PyObject *);}
static PyObject *meth_QThread_exec_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QThread, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_exec_, doc_QThread_exec_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_exec, "exec(self) -> int");

extern "C" {static PyObject *meth_QThread_exec(PyObject *, PyObject *);}
static PyObject *meth_QThread_exec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QThread, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_exec, doc_QThread_exec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_setTerminationEnabled, "setTerminationEnabled(enabled: bool = True)");

extern "C" {static PyObject *meth_QThread_setTerminationEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QThread_setTerminationEnabled(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 1;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|b", &a0))
        {
             ::QThread::setTerminationEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_setTerminationEnabled, doc_QThread_setTerminationEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QThread_event(PyObject *, PyObject *);}
static PyObject *meth_QThread_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QThread, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QThread::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_event, doc_QThread_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_sleep, "sleep(int)");

extern "C" {static PyObject *meth_QThread_sleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_sleep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned long a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "m", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QThread::sleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_sleep, doc_QThread_sleep);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_msleep, "msleep(int)");

extern "C" {static PyObject *meth_QThread_msleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_msleep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned long a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "m", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QThread::msleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_msleep, doc_QThread_msleep);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_usleep, "usleep(int)");

extern "C" {static PyObject *meth_QThread_usleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_usleep(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned long a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "m", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QThread::usleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_usleep, doc_QThread_usleep);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_eventDispatcher, "eventDispatcher(self) -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QThread_eventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QThread_eventDispatcher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
             ::QAbstractEventDispatcher*sipRes;

            sipRes = sipCpp->eventDispatcher();

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_eventDispatcher, doc_QThread_eventDispatcher);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_setEventDispatcher, "setEventDispatcher(self, QAbstractEventDispatcher)");

extern "C" {static PyObject *meth_QThread_setEventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QThread_setEventDispatcher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractEventDispatcher* a0;
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QThread, &sipCpp, sipType_QAbstractEventDispatcher, &a0))
        {
            sipCpp->setEventDispatcher(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_setEventDispatcher, doc_QThread_setEventDispatcher);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_requestInterruption, "requestInterruption(self)");

extern "C" {static PyObject *meth_QThread_requestInterruption(PyObject *, PyObject *);}
static PyObject *meth_QThread_requestInterruption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            sipCpp->requestInterruption();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_requestInterruption, doc_QThread_requestInterruption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_isInterruptionRequested, "isInterruptionRequested(self) -> bool");

extern "C" {static PyObject *meth_QThread_isInterruptionRequested(PyObject *, PyObject *);}
static PyObject *meth_QThread_isInterruptionRequested(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInterruptionRequested();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_isInterruptionRequested, doc_QThread_isInterruptionRequested);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QThread_loopLevel, "loopLevel(self) -> int");

extern "C" {static PyObject *meth_QThread_loopLevel(PyObject *, PyObject *);}
static PyObject *meth_QThread_loopLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QThread *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QThread, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopLevel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QThread, sipName_loopLevel, doc_QThread_loopLevel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QThread(void *, const sipTypeDef *);}
static void *cast_QThread(void *sipCppV, const sipTypeDef *targetType)
{
     ::QThread *sipCpp = reinterpret_cast< ::QThread *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QThread(void *, int);}
static void release_QThread(void *sipCppV, int)
{
     ::QThread *sipCpp = reinterpret_cast< ::QThread *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QThread(sipSimpleWrapper *);}
static void dealloc_QThread(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQThread *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QThread(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QThread(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QThread(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQThread *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQThread(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QThread[] = {{183, 255, 1}};


static PyMethodDef methods_QThread[] = {
    {SIP_MLNAME_CAST(sipName_currentThread), meth_QThread_currentThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_currentThread)},
    {SIP_MLNAME_CAST(sipName_currentThreadId), meth_QThread_currentThreadId, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_currentThreadId)},
    {SIP_MLNAME_CAST(sipName_event), meth_QThread_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_event)},
    {SIP_MLNAME_CAST(sipName_eventDispatcher), meth_QThread_eventDispatcher, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_eventDispatcher)},
    {SIP_MLNAME_CAST(sipName_exec), meth_QThread_exec, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QThread_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_exec_)},
    {SIP_MLNAME_CAST(sipName_exit), SIP_MLMETH_CAST(meth_QThread_exit), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_exit)},
    {SIP_MLNAME_CAST(sipName_idealThreadCount), meth_QThread_idealThreadCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_idealThreadCount)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QThread_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_isFinished)},
    {SIP_MLNAME_CAST(sipName_isInterruptionRequested), meth_QThread_isInterruptionRequested, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_isInterruptionRequested)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QThread_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_isRunning)},
    {SIP_MLNAME_CAST(sipName_loopLevel), meth_QThread_loopLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_loopLevel)},
    {SIP_MLNAME_CAST(sipName_msleep), meth_QThread_msleep, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_msleep)},
    {SIP_MLNAME_CAST(sipName_priority), meth_QThread_priority, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_priority)},
    {SIP_MLNAME_CAST(sipName_quit), meth_QThread_quit, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_quit)},
    {SIP_MLNAME_CAST(sipName_requestInterruption), meth_QThread_requestInterruption, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_requestInterruption)},
    {SIP_MLNAME_CAST(sipName_run), meth_QThread_run, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_run)},
    {SIP_MLNAME_CAST(sipName_setEventDispatcher), meth_QThread_setEventDispatcher, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_setEventDispatcher)},
    {SIP_MLNAME_CAST(sipName_setPriority), meth_QThread_setPriority, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_setPriority)},
    {SIP_MLNAME_CAST(sipName_setStackSize), meth_QThread_setStackSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_setStackSize)},
    {SIP_MLNAME_CAST(sipName_setTerminationEnabled), SIP_MLMETH_CAST(meth_QThread_setTerminationEnabled), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_setTerminationEnabled)},
    {SIP_MLNAME_CAST(sipName_sleep), meth_QThread_sleep, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_sleep)},
    {SIP_MLNAME_CAST(sipName_stackSize), meth_QThread_stackSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_stackSize)},
    {SIP_MLNAME_CAST(sipName_start), SIP_MLMETH_CAST(meth_QThread_start), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_start)},
    {SIP_MLNAME_CAST(sipName_terminate), meth_QThread_terminate, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_terminate)},
    {SIP_MLNAME_CAST(sipName_usleep), meth_QThread_usleep, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_usleep)},
    {SIP_MLNAME_CAST(sipName_wait), SIP_MLMETH_CAST(meth_QThread_wait), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QThread_wait)},
    {SIP_MLNAME_CAST(sipName_yieldCurrentThread), meth_QThread_yieldCurrentThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QThread_yieldCurrentThread)}
};

static sipEnumMemberDef enummembers_QThread[] = {
    {sipName_HighPriority, static_cast<int>( ::QThread::HighPriority), 285},
    {sipName_HighestPriority, static_cast<int>( ::QThread::HighestPriority), 285},
    {sipName_IdlePriority, static_cast<int>( ::QThread::IdlePriority), 285},
    {sipName_InheritPriority, static_cast<int>( ::QThread::InheritPriority), 285},
    {sipName_LowPriority, static_cast<int>( ::QThread::LowPriority), 285},
    {sipName_LowestPriority, static_cast<int>( ::QThread::LowestPriority), 285},
    {sipName_NormalPriority, static_cast<int>( ::QThread::NormalPriority), 285},
    {sipName_TimeCriticalPriority, static_cast<int>( ::QThread::TimeCriticalPriority), 285},
};

PyDoc_STRVAR(doc_QThread, "\1QThread(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QThread[] = {
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"started()", "\1started(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QThread = {
    & ::QThread::staticMetaObject,
    0,
    signals_QThread,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QThread = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QThread,
        {SIP_NULLPTR},
        &plugin_QThread
    },
    {
        sipNameNr_QThread,
        {0, 0, 1},
        28, methods_QThread,
        8, enummembers_QThread,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QThread,
    -1,
    -1,
    supers_QThread,
    SIP_NULLPTR,
    init_type_QThread,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QThread,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QThread,
    cast_QThread,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};




/* Call the instance's destructor. */
extern "C" {static void release_QTextStreamManipulator(void *, int);}
static void release_QTextStreamManipulator(void *, int)
{
}


static pyqt5ClassPluginDef plugin_QTextStreamManipulator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextStreamManipulator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextStreamManipulator,
        {SIP_NULLPTR},
        &plugin_QTextStreamManipulator
    },
    {
        sipNameNr_QTextStreamManipulator,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextStreamManipulator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 38131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 38135 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static long slot_QTextStream_NumberFlags___hash__(PyObject *);}
static long slot_QTextStream_NumberFlags___hash__(PyObject *sipSelf)
{
     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTextStream::NumberFlags::Int();
#line 38153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTextStream_NumberFlags___bool__(PyObject *);}
static int slot_QTextStream_NumberFlags___bool__(PyObject *sipSelf)
{
     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextStream::NumberFlags::Int() != 0);
#line 38178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream::NumberFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextStream_NumberFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextStream::NumberFlags::Int() != a0->operator QTextStream::NumberFlags::Int());
#line 38208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QTextStream::NumberFlags *>(a0),sipType_QTextStream_NumberFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QTextStream_NumberFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream::NumberFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextStream_NumberFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextStream::NumberFlags::Int() == a0->operator QTextStream::NumberFlags::Int());
#line 38244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QTextStream::NumberFlags *>(a0),sipType_QTextStream_NumberFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QTextStream_NumberFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextStream_NumberFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QTextStream::NumberFlags(*sipCpp ^ a0);
#line 38283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::NumberFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextStream_NumberFlags, &a0, &a0State, &a1))
        {
             ::QTextStream::NumberFlags*sipRes;

            sipRes = new  ::QTextStream::NumberFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTextStream_NumberFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextStream_NumberFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QTextStream::NumberFlags(*sipCpp | a0);
#line 38355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::NumberFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextStream_NumberFlags, &a0, &a0State, &a1))
        {
             ::QTextStream::NumberFlags*sipRes;

            sipRes = new  ::QTextStream::NumberFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QTextStream_NumberFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextStream_NumberFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTextStream::NumberFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::NumberFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextStream_NumberFlags, &a0, &a0State, &a1))
        {
             ::QTextStream::NumberFlags*sipRes;

            sipRes = new  ::QTextStream::NumberFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QTextStream_NumberFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___invert__(PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___invert__(PyObject *sipSelf)
{
     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTextStream::NumberFlags*sipRes;

            sipRes = new  ::QTextStream::NumberFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextStream_NumberFlags___int__(PyObject *);}
static PyObject *slot_QTextStream_NumberFlags___int__(PyObject *sipSelf)
{
     ::QTextStream::NumberFlags *sipCpp = reinterpret_cast< ::QTextStream::NumberFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextStream_NumberFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextStream_NumberFlags(void *, int);}
static void release_QTextStream_NumberFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextStream::NumberFlags *>(sipCppV);
}


extern "C" {static void assign_QTextStream_NumberFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QTextStream_NumberFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextStream::NumberFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextStream::NumberFlags *>(sipSrc);
}


extern "C" {static void *array_QTextStream_NumberFlags(SIP_SSIZE_T);}
static void *array_QTextStream_NumberFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextStream::NumberFlags[sipNrElem];
}


extern "C" {static void *copy_QTextStream_NumberFlags(const void *, SIP_SSIZE_T);}
static void *copy_QTextStream_NumberFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextStream::NumberFlags(reinterpret_cast<const  ::QTextStream::NumberFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextStream_NumberFlags(sipSimpleWrapper *);}
static void dealloc_QTextStream_NumberFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextStream_NumberFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextStream_NumberFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextStream_NumberFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextStream::NumberFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextStream::NumberFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextStream::NumberFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextStream::NumberFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTextStream_NumberFlags, &a0, &a0State))
        {
            sipCpp = new  ::QTextStream::NumberFlags(*a0);
            sipReleaseType(const_cast< ::QTextStream::NumberFlags *>(a0),sipType_QTextStream_NumberFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTextStream_NumberFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTextStream_NumberFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTextStream::NumberFlags **sipCppPtr = reinterpret_cast< ::QTextStream::NumberFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTextStream::NumberFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextStream_NumberFlag)) ||
            sipCanConvertToType(sipPy, sipType_QTextStream_NumberFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextStream_NumberFlag)))
{
    *sipCppPtr = new QTextStream::NumberFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTextStream::NumberFlags *>(sipConvertToType(sipPy, sipType_QTextStream_NumberFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 38623 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextStream_NumberFlags[] = {
    {(void *)slot_QTextStream_NumberFlags___hash__, hash_slot},
    {(void *)slot_QTextStream_NumberFlags___bool__, bool_slot},
    {(void *)slot_QTextStream_NumberFlags___ne__, ne_slot},
    {(void *)slot_QTextStream_NumberFlags___eq__, eq_slot},
    {(void *)slot_QTextStream_NumberFlags___ixor__, ixor_slot},
    {(void *)slot_QTextStream_NumberFlags___xor__, xor_slot},
    {(void *)slot_QTextStream_NumberFlags___ior__, ior_slot},
    {(void *)slot_QTextStream_NumberFlags___or__, or_slot},
    {(void *)slot_QTextStream_NumberFlags___iand__, iand_slot},
    {(void *)slot_QTextStream_NumberFlags___and__, and_slot},
    {(void *)slot_QTextStream_NumberFlags___invert__, invert_slot},
    {(void *)slot_QTextStream_NumberFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTextStream_NumberFlags, "\1QTextStream.NumberFlags()\n"
"QTextStream.NumberFlags(Union[QTextStream.NumberFlags, QTextStream.NumberFlag])\n"
"QTextStream.NumberFlags(QTextStream.NumberFlags)");


static pyqt5ClassPluginDef plugin_QTextStream_NumberFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextStream_NumberFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextStream__NumberFlags,
        {SIP_NULLPTR},
        &plugin_QTextStream_NumberFlags
    },
    {
        sipNameNr_NumberFlags,
        {277, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextStream_NumberFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextStream_NumberFlags,
    init_type_QTextStream_NumberFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextStream_NumberFlags,
    assign_QTextStream_NumberFlags,
    array_QTextStream_NumberFlags,
    copy_QTextStream_NumberFlags,
    release_QTextStream_NumberFlags,
    SIP_NULLPTR,
    convertTo_QTextStream_NumberFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 38711 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 38715 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 38718 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 38721 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 38724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38727 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 38730 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 38733 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 38736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQTextStream : public  ::QTextStream
{
public:
    sipQTextStream();
    sipQTextStream( ::QIODevice*);
    sipQTextStream( ::QByteArray*, ::QIODevice::OpenMode);
    ~sipQTextStream();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextStream(const sipQTextStream &);
    sipQTextStream &operator = (const sipQTextStream &);
};

sipQTextStream::sipQTextStream():  ::QTextStream(), sipPySelf(SIP_NULLPTR)
{
}

sipQTextStream::sipQTextStream( ::QIODevice*a0):  ::QTextStream(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQTextStream::sipQTextStream( ::QByteArray*a0, ::QIODevice::OpenMode a1):  ::QTextStream(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQTextStream::~sipQTextStream()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QTextStream_setCodec, "setCodec(self, QTextCodec)\n"
"setCodec(self, str)");

extern "C" {static PyObject *meth_QTextStream_setCodec(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec* a0;
        PyObject *a0Keep;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTextStream, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            sipCpp->setCodec(a0);

            sipKeepReference(sipSelf, -8, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QTextStream, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->setCodec(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setCodec, doc_QTextStream_setCodec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_codec, "codec(self) -> QTextCodec");

extern "C" {static PyObject *meth_QTextStream_codec(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_codec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextCodec*sipRes;

            sipRes = sipCpp->codec();

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_codec, doc_QTextStream_codec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setAutoDetectUnicode, "setAutoDetectUnicode(self, bool)");

extern "C" {static PyObject *meth_QTextStream_setAutoDetectUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setAutoDetectUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setAutoDetectUnicode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setAutoDetectUnicode, doc_QTextStream_setAutoDetectUnicode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_autoDetectUnicode, "autoDetectUnicode(self) -> bool");

extern "C" {static PyObject *meth_QTextStream_autoDetectUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_autoDetectUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoDetectUnicode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_autoDetectUnicode, doc_QTextStream_autoDetectUnicode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setGenerateByteOrderMark, "setGenerateByteOrderMark(self, bool)");

extern "C" {static PyObject *meth_QTextStream_setGenerateByteOrderMark(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setGenerateByteOrderMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setGenerateByteOrderMark(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setGenerateByteOrderMark, doc_QTextStream_setGenerateByteOrderMark);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_generateByteOrderMark, "generateByteOrderMark(self) -> bool");

extern "C" {static PyObject *meth_QTextStream_generateByteOrderMark(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_generateByteOrderMark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->generateByteOrderMark();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_generateByteOrderMark, doc_QTextStream_generateByteOrderMark);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QTextStream_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setDevice, doc_QTextStream_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QTextStream_device(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_device, doc_QTextStream_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QTextStream_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_atEnd, doc_QTextStream_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_reset, "reset(self)");

extern "C" {static PyObject *meth_QTextStream_reset(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_reset, doc_QTextStream_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_flush, "flush(self)");

extern "C" {static PyObject *meth_QTextStream_flush(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_flush, doc_QTextStream_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_seek, "seek(self, int) -> bool");

extern "C" {static PyObject *meth_QTextStream_seek(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->seek(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_seek, doc_QTextStream_seek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_skipWhiteSpace, "skipWhiteSpace(self)");

extern "C" {static PyObject *meth_QTextStream_skipWhiteSpace(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_skipWhiteSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            sipCpp->skipWhiteSpace();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_skipWhiteSpace, doc_QTextStream_skipWhiteSpace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_read, "read(self, int) -> str");

extern "C" {static PyObject *meth_QTextStream_read(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->read(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_read, doc_QTextStream_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_readLine, "readLine(self, maxLength: int = 0) -> str");

extern "C" {static PyObject *meth_QTextStream_readLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextStream_readLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0 = 0;
         ::QTextStream *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxLength,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|n", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->readLine(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_readLine, doc_QTextStream_readLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_readAll, "readAll(self) -> str");

extern "C" {static PyObject *meth_QTextStream_readAll(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_readAll, doc_QTextStream_readAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setFieldAlignment, "setFieldAlignment(self, QTextStream.FieldAlignment)");

extern "C" {static PyObject *meth_QTextStream_setFieldAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setFieldAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::FieldAlignment a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_FieldAlignment, &a0))
        {
            sipCpp->setFieldAlignment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setFieldAlignment, doc_QTextStream_setFieldAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_fieldAlignment, "fieldAlignment(self) -> QTextStream.FieldAlignment");

extern "C" {static PyObject *meth_QTextStream_fieldAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_fieldAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextStream::FieldAlignment sipRes;

            sipRes = sipCpp->fieldAlignment();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextStream_FieldAlignment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_fieldAlignment, doc_QTextStream_fieldAlignment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setPadChar, "setPadChar(self, str)");

extern "C" {static PyObject *meth_QTextStream_setPadChar(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setPadChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QChar* a0;
        int a0State = 0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QChar,&a0, &a0State))
        {
            sipCpp->setPadChar(*a0);
            sipReleaseType(a0,sipType_QChar,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setPadChar, doc_QTextStream_setPadChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_padChar, "padChar(self) -> str");

extern "C" {static PyObject *meth_QTextStream_padChar(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_padChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->padChar());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_padChar, doc_QTextStream_padChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setFieldWidth, "setFieldWidth(self, int)");

extern "C" {static PyObject *meth_QTextStream_setFieldWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setFieldWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setFieldWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setFieldWidth, doc_QTextStream_setFieldWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_fieldWidth, "fieldWidth(self) -> int");

extern "C" {static PyObject *meth_QTextStream_fieldWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_fieldWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fieldWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_fieldWidth, doc_QTextStream_fieldWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setNumberFlags, "setNumberFlags(self, Union[QTextStream.NumberFlags, QTextStream.NumberFlag])");

extern "C" {static PyObject *meth_QTextStream_setNumberFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setNumberFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::NumberFlags* a0;
        int a0State = 0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_NumberFlags, &a0, &a0State))
        {
            sipCpp->setNumberFlags(*a0);
            sipReleaseType(a0,sipType_QTextStream_NumberFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setNumberFlags, doc_QTextStream_setNumberFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_numberFlags, "numberFlags(self) -> QTextStream.NumberFlags");

extern "C" {static PyObject *meth_QTextStream_numberFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_numberFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextStream::NumberFlags*sipRes;

            sipRes = new  ::QTextStream::NumberFlags(sipCpp->numberFlags());

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_numberFlags, doc_QTextStream_numberFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setIntegerBase, "setIntegerBase(self, int)");

extern "C" {static PyObject *meth_QTextStream_setIntegerBase(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setIntegerBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setIntegerBase(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setIntegerBase, doc_QTextStream_setIntegerBase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_integerBase, "integerBase(self) -> int");

extern "C" {static PyObject *meth_QTextStream_integerBase(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_integerBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->integerBase();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_integerBase, doc_QTextStream_integerBase);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setRealNumberNotation, "setRealNumberNotation(self, QTextStream.RealNumberNotation)");

extern "C" {static PyObject *meth_QTextStream_setRealNumberNotation(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setRealNumberNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::RealNumberNotation a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_RealNumberNotation, &a0))
        {
            sipCpp->setRealNumberNotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setRealNumberNotation, doc_QTextStream_setRealNumberNotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_realNumberNotation, "realNumberNotation(self) -> QTextStream.RealNumberNotation");

extern "C" {static PyObject *meth_QTextStream_realNumberNotation(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_realNumberNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextStream::RealNumberNotation sipRes;

            sipRes = sipCpp->realNumberNotation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextStream_RealNumberNotation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_realNumberNotation, doc_QTextStream_realNumberNotation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setRealNumberPrecision, "setRealNumberPrecision(self, int)");

extern "C" {static PyObject *meth_QTextStream_setRealNumberPrecision(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setRealNumberPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextStream, &sipCpp, &a0))
        {
            sipCpp->setRealNumberPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setRealNumberPrecision, doc_QTextStream_setRealNumberPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_realNumberPrecision, "realNumberPrecision(self) -> int");

extern "C" {static PyObject *meth_QTextStream_realNumberPrecision(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_realNumberPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->realNumberPrecision();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_realNumberPrecision, doc_QTextStream_realNumberPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_status, "status(self) -> QTextStream.Status");

extern "C" {static PyObject *meth_QTextStream_status(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QTextStream::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextStream_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_status, doc_QTextStream_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setStatus, "setStatus(self, QTextStream.Status)");

extern "C" {static PyObject *meth_QTextStream_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream::Status a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QTextStream_Status, &a0))
        {
            sipCpp->setStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setStatus, doc_QTextStream_setStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_resetStatus, "resetStatus(self)");

extern "C" {static PyObject *meth_QTextStream_resetStatus(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_resetStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
            sipCpp->resetStatus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_resetStatus, doc_QTextStream_resetStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_pos, "pos(self) -> int");

extern "C" {static PyObject *meth_QTextStream_pos(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->pos();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_pos, doc_QTextStream_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QTextStream_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale* a0;
         ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextStream, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_setLocale, doc_QTextStream_setLocale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextStream_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QTextStream_locale(PyObject *, PyObject *);}
static PyObject *meth_QTextStream_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextStream, &sipCpp))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextStream, sipName_locale, doc_QTextStream_locale);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTextStream___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QTextStream, &a0, sipType_QString,&a1, &a1State))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 << *a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    {
         ::QTextStream* a0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QTextStream, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 << *a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    {
         ::QTextStream* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xd", sipType_QTextStream, &a0, &a1))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 << a1);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    {
         ::QTextStream* a0;
        PyObject * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9P0", sipType_QTextStream, &a0, &a1))
        {
             ::QTextStream*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextstream.sip"
        #if PY_MAJOR_VERSION < 3
        if (PyInt_Check(a1))
        {
            qlonglong val = PyInt_AsLong(a1);
        
            sipRes = &(*a0 << val);
        }
        else
        #endif
        {
            qlonglong val = sipLong_AsLongLong(a1);
        
            if (!PyErr_Occurred())
            {
                sipRes = &(*a0 << val);
            }
            else
            {
                // If it is positive then it might fit an unsigned long long.
        
                qulonglong uval = sipLong_AsUnsignedLongLong(a1);
        
                if (!PyErr_Occurred())
                {
                    sipRes = &(*a0 << uval);
                }
                else
                {
                    sipError = (PyErr_ExceptionMatches(PyExc_OverflowError)
                            ? sipErrorFail : sipErrorContinue);
                }
            }
        }
#line 39910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
         ::QTextStream* a0;
         ::QTextStreamManipulator* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTextStream, &a0, sipType_QTextStreamManipulator, &a1))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lshift_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextStream___rshift__(PyObject *,PyObject *);}
static PyObject *slot_QTextStream___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextStream* a0;
         ::QByteArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTextStream, &a0, sipType_QByteArray, &a1))
        {
             ::QTextStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QTextStream,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, rshift_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextStream(void *, int);}
static void release_QTextStream(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTextStream *>(sipCppV);
    else
        delete reinterpret_cast< ::QTextStream *>(sipCppV);
}


extern "C" {static void dealloc_QTextStream(sipSimpleWrapper *);}
static void dealloc_QTextStream(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextStream *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextStream(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextStream(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextStream(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextStream *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQTextStream();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new sipQTextStream(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QByteArray* a0;
         ::QIODevice::OpenMode a1def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1", sipType_QByteArray, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp = new sipQTextStream(a0,*a1);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextStream[] = {
    {(void *)slot_QTextStream___lshift__, lshift_slot},
    {(void *)slot_QTextStream___rshift__, rshift_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextStream[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QTextStream_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_atEnd)},
    {SIP_MLNAME_CAST(sipName_autoDetectUnicode), meth_QTextStream_autoDetectUnicode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_autoDetectUnicode)},
    {SIP_MLNAME_CAST(sipName_codec), meth_QTextStream_codec, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_codec)},
    {SIP_MLNAME_CAST(sipName_device), meth_QTextStream_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_device)},
    {SIP_MLNAME_CAST(sipName_fieldAlignment), meth_QTextStream_fieldAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_fieldAlignment)},
    {SIP_MLNAME_CAST(sipName_fieldWidth), meth_QTextStream_fieldWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_fieldWidth)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QTextStream_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_flush)},
    {SIP_MLNAME_CAST(sipName_generateByteOrderMark), meth_QTextStream_generateByteOrderMark, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_generateByteOrderMark)},
    {SIP_MLNAME_CAST(sipName_integerBase), meth_QTextStream_integerBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_integerBase)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QTextStream_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_locale)},
    {SIP_MLNAME_CAST(sipName_numberFlags), meth_QTextStream_numberFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_numberFlags)},
    {SIP_MLNAME_CAST(sipName_padChar), meth_QTextStream_padChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_padChar)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QTextStream_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_pos)},
    {SIP_MLNAME_CAST(sipName_read), meth_QTextStream_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_read)},
    {SIP_MLNAME_CAST(sipName_readAll), meth_QTextStream_readAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_readAll)},
    {SIP_MLNAME_CAST(sipName_readLine), SIP_MLMETH_CAST(meth_QTextStream_readLine), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextStream_readLine)},
    {SIP_MLNAME_CAST(sipName_realNumberNotation), meth_QTextStream_realNumberNotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_realNumberNotation)},
    {SIP_MLNAME_CAST(sipName_realNumberPrecision), meth_QTextStream_realNumberPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_realNumberPrecision)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QTextStream_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_reset)},
    {SIP_MLNAME_CAST(sipName_resetStatus), meth_QTextStream_resetStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_resetStatus)},
    {SIP_MLNAME_CAST(sipName_seek), meth_QTextStream_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_seek)},
    {SIP_MLNAME_CAST(sipName_setAutoDetectUnicode), meth_QTextStream_setAutoDetectUnicode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setAutoDetectUnicode)},
    {SIP_MLNAME_CAST(sipName_setCodec), meth_QTextStream_setCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setCodec)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QTextStream_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFieldAlignment), meth_QTextStream_setFieldAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setFieldAlignment)},
    {SIP_MLNAME_CAST(sipName_setFieldWidth), meth_QTextStream_setFieldWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setFieldWidth)},
    {SIP_MLNAME_CAST(sipName_setGenerateByteOrderMark), meth_QTextStream_setGenerateByteOrderMark, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setGenerateByteOrderMark)},
    {SIP_MLNAME_CAST(sipName_setIntegerBase), meth_QTextStream_setIntegerBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setIntegerBase)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QTextStream_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setLocale)},
    {SIP_MLNAME_CAST(sipName_setNumberFlags), meth_QTextStream_setNumberFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setNumberFlags)},
    {SIP_MLNAME_CAST(sipName_setPadChar), meth_QTextStream_setPadChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setPadChar)},
    {SIP_MLNAME_CAST(sipName_setRealNumberNotation), meth_QTextStream_setRealNumberNotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setRealNumberNotation)},
    {SIP_MLNAME_CAST(sipName_setRealNumberPrecision), meth_QTextStream_setRealNumberPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setRealNumberPrecision)},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QTextStream_setStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_setStatus)},
    {SIP_MLNAME_CAST(sipName_skipWhiteSpace), meth_QTextStream_skipWhiteSpace, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_skipWhiteSpace)},
    {SIP_MLNAME_CAST(sipName_status), meth_QTextStream_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextStream_status)}
};

static sipEnumMemberDef enummembers_QTextStream[] = {
    {sipName_AlignAccountingStyle, static_cast<int>( ::QTextStream::AlignAccountingStyle), 278},
    {sipName_AlignCenter, static_cast<int>( ::QTextStream::AlignCenter), 278},
    {sipName_AlignLeft, static_cast<int>( ::QTextStream::AlignLeft), 278},
    {sipName_AlignRight, static_cast<int>( ::QTextStream::AlignRight), 278},
    {sipName_FixedNotation, static_cast<int>( ::QTextStream::FixedNotation), 281},
    {sipName_ForcePoint, static_cast<int>( ::QTextStream::ForcePoint), 279},
    {sipName_ForceSign, static_cast<int>( ::QTextStream::ForceSign), 279},
    {sipName_Ok, static_cast<int>( ::QTextStream::Ok), 282},
    {sipName_ReadCorruptData, static_cast<int>( ::QTextStream::ReadCorruptData), 282},
    {sipName_ReadPastEnd, static_cast<int>( ::QTextStream::ReadPastEnd), 282},
    {sipName_ScientificNotation, static_cast<int>( ::QTextStream::ScientificNotation), 281},
    {sipName_ShowBase, static_cast<int>( ::QTextStream::ShowBase), 279},
    {sipName_SmartNotation, static_cast<int>( ::QTextStream::SmartNotation), 281},
    {sipName_UppercaseBase, static_cast<int>( ::QTextStream::UppercaseBase), 279},
    {sipName_UppercaseDigits, static_cast<int>( ::QTextStream::UppercaseDigits), 279},
    {sipName_WriteFailed, static_cast<int>( ::QTextStream::WriteFailed), 282},
};

PyDoc_STRVAR(doc_QTextStream, "\1QTextStream()\n"
"QTextStream(QIODevice)\n"
"QTextStream(QByteArray, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");


static pyqt5ClassPluginDef plugin_QTextStream = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextStream = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextStream,
        {SIP_NULLPTR},
        &plugin_QTextStream
    },
    {
        sipNameNr_QTextStream,
        {0, 0, 1},
        36, methods_QTextStream,
        16, enummembers_QTextStream,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextStream,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextStream,
    init_type_QTextStream,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextStream,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextStream,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40191 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 40197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 40200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QTextDecoder_toUnicode, "toUnicode(self, bytes) -> str\n"
"toUnicode(self, Union[QByteArray, bytes, bytearray]) -> str");

extern "C" {static PyObject *meth_QTextDecoder_toUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextDecoder_toUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QTextDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QTextDecoder, &sipCpp, &a0, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toUnicode(a0,(int)a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QTextDecoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDecoder, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toUnicode(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDecoder, sipName_toUnicode, doc_QTextDecoder_toUnicode);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextDecoder(void *, int);}
static void release_QTextDecoder(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextDecoder *>(sipCppV);
}


extern "C" {static void dealloc_QTextDecoder(sipSimpleWrapper *);}
static void dealloc_QTextDecoder(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextDecoder(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextDecoder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextDecoder(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextDecoder *sipCpp = SIP_NULLPTR;

    {
        const  ::QTextCodec* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextCodec, &a0))
        {
            sipCpp = new  ::QTextDecoder(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextCodec* a0;
         ::QTextCodec::ConversionFlags* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J1", sipType_QTextCodec, &a0, sipType_QTextCodec_ConversionFlags, &a1, &a1State))
        {
            sipCpp = new  ::QTextDecoder(a0,*a1);
            sipReleaseType(a1,sipType_QTextCodec_ConversionFlags,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextDecoder[] = {
    {SIP_MLNAME_CAST(sipName_toUnicode), meth_QTextDecoder_toUnicode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDecoder_toUnicode)}
};

PyDoc_STRVAR(doc_QTextDecoder, "\1QTextDecoder(QTextCodec)\n"
"QTextDecoder(QTextCodec, Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag])");


static pyqt5ClassPluginDef plugin_QTextDecoder = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextDecoder = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextDecoder,
        {SIP_NULLPTR},
        &plugin_QTextDecoder
    },
    {
        sipNameNr_QTextDecoder,
        {0, 0, 1},
        1, methods_QTextDecoder,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextDecoder,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextDecoder,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextDecoder,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextDecoder,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40372 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40379 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 40382 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 40385 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QTextEncoder_fromUnicode, "fromUnicode(self, str) -> QByteArray");

extern "C" {static PyObject *meth_QTextEncoder_fromUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextEncoder_fromUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEncoder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEncoder, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->fromUnicode(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEncoder, sipName_fromUnicode, doc_QTextEncoder_fromUnicode);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextEncoder(void *, int);}
static void release_QTextEncoder(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextEncoder *>(sipCppV);
}


extern "C" {static void dealloc_QTextEncoder(sipSimpleWrapper *);}
static void dealloc_QTextEncoder(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextEncoder(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextEncoder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextEncoder(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextEncoder *sipCpp = SIP_NULLPTR;

    {
        const  ::QTextCodec* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QTextCodec, &a0))
        {
            sipCpp = new  ::QTextEncoder(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextCodec* a0;
         ::QTextCodec::ConversionFlags* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J1", sipType_QTextCodec, &a0, sipType_QTextCodec_ConversionFlags, &a1, &a1State))
        {
            sipCpp = new  ::QTextEncoder(a0,*a1);
            sipReleaseType(a1,sipType_QTextCodec_ConversionFlags,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextEncoder[] = {
    {SIP_MLNAME_CAST(sipName_fromUnicode), meth_QTextEncoder_fromUnicode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEncoder_fromUnicode)}
};

PyDoc_STRVAR(doc_QTextEncoder, "\1QTextEncoder(QTextCodec)\n"
"QTextEncoder(QTextCodec, Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag])");


static pyqt5ClassPluginDef plugin_QTextEncoder = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextEncoder = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextEncoder,
        {SIP_NULLPTR},
        &plugin_QTextEncoder
    },
    {
        sipNameNr_QTextEncoder,
        {0, 0, 1},
        1, methods_QTextEncoder,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextEncoder,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextEncoder,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextEncoder,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextEncoder,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40542 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QTextCodec_ConverterState(void *, int);}
static void release_QTextCodec_ConverterState(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextCodec::ConverterState *>(sipCppV);
}


extern "C" {static void dealloc_QTextCodec_ConverterState(sipSimpleWrapper *);}
static void dealloc_QTextCodec_ConverterState(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextCodec_ConverterState(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextCodec_ConverterState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextCodec_ConverterState(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextCodec::ConverterState *sipCpp = SIP_NULLPTR;

    {
         ::QTextCodec::ConversionFlags a0def = QTextCodec::DefaultConversion;
         ::QTextCodec::ConversionFlags* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1", sipType_QTextCodec_ConversionFlags, &a0, &a0State))
        {
            sipCpp = new  ::QTextCodec::ConverterState(*a0);
            sipReleaseType(a0,sipType_QTextCodec_ConversionFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}

PyDoc_STRVAR(doc_QTextCodec_ConverterState, "\1QTextCodec.ConverterState(flags: Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag] = QTextCodec.DefaultConversion)");


static pyqt5ClassPluginDef plugin_QTextCodec_ConverterState = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextCodec_ConverterState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextCodec__ConverterState,
        {SIP_NULLPTR},
        &plugin_QTextCodec_ConverterState
    },
    {
        sipNameNr_ConverterState,
        {271, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextCodec_ConverterState,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextCodec_ConverterState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextCodec_ConverterState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextCodec_ConverterState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40656 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 40660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static long slot_QTextCodec_ConversionFlags___hash__(PyObject *);}
static long slot_QTextCodec_ConversionFlags___hash__(PyObject *sipSelf)
{
     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTextCodec::ConversionFlags::Int();
#line 40678 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTextCodec_ConversionFlags___bool__(PyObject *);}
static int slot_QTextCodec_ConversionFlags___bool__(PyObject *sipSelf)
{
     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextCodec::ConversionFlags::Int() != 0);
#line 40703 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCodec::ConversionFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextCodec_ConversionFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextCodec::ConversionFlags::Int() != a0->operator QTextCodec::ConversionFlags::Int());
#line 40733 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QTextCodec::ConversionFlags *>(a0),sipType_QTextCodec_ConversionFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QTextCodec_ConversionFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextCodec::ConversionFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextCodec_ConversionFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextCodec::ConversionFlags::Int() == a0->operator QTextCodec::ConversionFlags::Int());
#line 40769 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QTextCodec::ConversionFlags *>(a0),sipType_QTextCodec_ConversionFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QTextCodec_ConversionFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextCodec_ConversionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QTextCodec::ConversionFlags(*sipCpp ^ a0);
#line 40808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec::ConversionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextCodec_ConversionFlags, &a0, &a0State, &a1))
        {
             ::QTextCodec::ConversionFlags*sipRes;

            sipRes = new  ::QTextCodec::ConversionFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTextCodec_ConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextCodec_ConversionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextCodec_ConversionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QTextCodec::ConversionFlags(*sipCpp | a0);
#line 40880 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec::ConversionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextCodec_ConversionFlags, &a0, &a0State, &a1))
        {
             ::QTextCodec::ConversionFlags*sipRes;

            sipRes = new  ::QTextCodec::ConversionFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QTextCodec_ConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextCodec_ConversionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextCodec_ConversionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTextCodec::ConversionFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec::ConversionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextCodec_ConversionFlags, &a0, &a0State, &a1))
        {
             ::QTextCodec::ConversionFlags*sipRes;

            sipRes = new  ::QTextCodec::ConversionFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QTextCodec_ConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextCodec_ConversionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___invert__(PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___invert__(PyObject *sipSelf)
{
     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTextCodec::ConversionFlags*sipRes;

            sipRes = new  ::QTextCodec::ConversionFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTextCodec_ConversionFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextCodec_ConversionFlags___int__(PyObject *);}
static PyObject *slot_QTextCodec_ConversionFlags___int__(PyObject *sipSelf)
{
     ::QTextCodec::ConversionFlags *sipCpp = reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCodec_ConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCodec_ConversionFlags(void *, int);}
static void release_QTextCodec_ConversionFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipCppV);
}


extern "C" {static void assign_QTextCodec_ConversionFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QTextCodec_ConversionFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextCodec::ConversionFlags *>(sipSrc);
}


extern "C" {static void *array_QTextCodec_ConversionFlags(SIP_SSIZE_T);}
static void *array_QTextCodec_ConversionFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextCodec::ConversionFlags[sipNrElem];
}


extern "C" {static void *copy_QTextCodec_ConversionFlags(const void *, SIP_SSIZE_T);}
static void *copy_QTextCodec_ConversionFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextCodec::ConversionFlags(reinterpret_cast<const  ::QTextCodec::ConversionFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextCodec_ConversionFlags(sipSimpleWrapper *);}
static void dealloc_QTextCodec_ConversionFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextCodec_ConversionFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextCodec_ConversionFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextCodec_ConversionFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextCodec::ConversionFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextCodec::ConversionFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextCodec::ConversionFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextCodec::ConversionFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTextCodec_ConversionFlags, &a0, &a0State))
        {
            sipCpp = new  ::QTextCodec::ConversionFlags(*a0);
            sipReleaseType(const_cast< ::QTextCodec::ConversionFlags *>(a0),sipType_QTextCodec_ConversionFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTextCodec_ConversionFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTextCodec_ConversionFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTextCodec::ConversionFlags **sipCppPtr = reinterpret_cast< ::QTextCodec::ConversionFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTextCodec::ConversionFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextCodec_ConversionFlag)) ||
            sipCanConvertToType(sipPy, sipType_QTextCodec_ConversionFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextCodec_ConversionFlag)))
{
    *sipCppPtr = new QTextCodec::ConversionFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTextCodec::ConversionFlags *>(sipConvertToType(sipPy, sipType_QTextCodec_ConversionFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 41148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextCodec_ConversionFlags[] = {
    {(void *)slot_QTextCodec_ConversionFlags___hash__, hash_slot},
    {(void *)slot_QTextCodec_ConversionFlags___bool__, bool_slot},
    {(void *)slot_QTextCodec_ConversionFlags___ne__, ne_slot},
    {(void *)slot_QTextCodec_ConversionFlags___eq__, eq_slot},
    {(void *)slot_QTextCodec_ConversionFlags___ixor__, ixor_slot},
    {(void *)slot_QTextCodec_ConversionFlags___xor__, xor_slot},
    {(void *)slot_QTextCodec_ConversionFlags___ior__, ior_slot},
    {(void *)slot_QTextCodec_ConversionFlags___or__, or_slot},
    {(void *)slot_QTextCodec_ConversionFlags___iand__, iand_slot},
    {(void *)slot_QTextCodec_ConversionFlags___and__, and_slot},
    {(void *)slot_QTextCodec_ConversionFlags___invert__, invert_slot},
    {(void *)slot_QTextCodec_ConversionFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTextCodec_ConversionFlags, "\1QTextCodec.ConversionFlags()\n"
"QTextCodec.ConversionFlags(Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag])\n"
"QTextCodec.ConversionFlags(QTextCodec.ConversionFlags)");


static pyqt5ClassPluginDef plugin_QTextCodec_ConversionFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextCodec_ConversionFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextCodec__ConversionFlags,
        {SIP_NULLPTR},
        &plugin_QTextCodec_ConversionFlags
    },
    {
        sipNameNr_ConversionFlags,
        {271, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextCodec_ConversionFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextCodec_ConversionFlags,
    init_type_QTextCodec_ConversionFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextCodec_ConversionFlags,
    assign_QTextCodec_ConversionFlags,
    array_QTextCodec_ConversionFlags,
    copy_QTextCodec_ConversionFlags,
    release_QTextCodec_ConversionFlags,
    SIP_NULLPTR,
    convertTo_QTextCodec_ConversionFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 41236 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 41245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 41248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 41251 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 41254 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 41257 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 41260 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 41263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QTextCodec_codecForName, "codecForName(Union[QByteArray, bytes, bytearray]) -> QTextCodec\n"
"codecForName(str) -> QTextCodec");

extern "C" {static PyObject *meth_QTextCodec_codecForName(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_codecForName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QTextCodec*sipRes;

            sipRes =  ::QTextCodec::codecForName(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
             ::QTextCodec*sipRes;

            sipRes =  ::QTextCodec::codecForName(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_codecForName, doc_QTextCodec_codecForName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_codecForMib, "codecForMib(int) -> QTextCodec");

extern "C" {static PyObject *meth_QTextCodec_codecForMib(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_codecForMib(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QTextCodec*sipRes;

            sipRes =  ::QTextCodec::codecForMib(a0);

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_codecForMib, doc_QTextCodec_codecForMib);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_codecForHtml, "codecForHtml(Union[QByteArray, bytes, bytearray]) -> QTextCodec\n"
"codecForHtml(Union[QByteArray, bytes, bytearray], QTextCodec) -> QTextCodec");

extern "C" {static PyObject *meth_QTextCodec_codecForHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_codecForHtml(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QTextCodec*sipRes;

            sipRes =  ::QTextCodec::codecForHtml(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QTextCodec* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J8", sipType_QByteArray, &a0, &a0State, sipType_QTextCodec, &a1))
        {
             ::QTextCodec*sipRes;

            sipRes =  ::QTextCodec::codecForHtml(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_codecForHtml, doc_QTextCodec_codecForHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_codecForUtfText, "codecForUtfText(Union[QByteArray, bytes, bytearray]) -> QTextCodec\n"
"codecForUtfText(Union[QByteArray, bytes, bytearray], QTextCodec) -> QTextCodec");

extern "C" {static PyObject *meth_QTextCodec_codecForUtfText(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_codecForUtfText(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QTextCodec*sipRes;

            sipRes =  ::QTextCodec::codecForUtfText(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QTextCodec* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J8", sipType_QByteArray, &a0, &a0State, sipType_QTextCodec, &a1))
        {
             ::QTextCodec*sipRes;

            sipRes =  ::QTextCodec::codecForUtfText(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_codecForUtfText, doc_QTextCodec_codecForUtfText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_availableCodecs, "availableCodecs() -> List[QByteArray]");

extern "C" {static PyObject *meth_QTextCodec_availableCodecs(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_availableCodecs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>( ::QTextCodec::availableCodecs());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_availableCodecs, doc_QTextCodec_availableCodecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_availableMibs, "availableMibs() -> List[int]");

extern "C" {static PyObject *meth_QTextCodec_availableMibs(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_availableMibs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QList<int>*sipRes;

            sipRes = new  ::QList<int>( ::QTextCodec::availableMibs());

            return sipConvertFromNewType(sipRes,sipType_QList_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_availableMibs, doc_QTextCodec_availableMibs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_codecForLocale, "codecForLocale() -> QTextCodec");

extern "C" {static PyObject *meth_QTextCodec_codecForLocale(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_codecForLocale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QTextCodec*sipRes;

            sipRes =  ::QTextCodec::codecForLocale();

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_codecForLocale, doc_QTextCodec_codecForLocale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_setCodecForLocale, "setCodecForLocale(QTextCodec)");

extern "C" {static PyObject *meth_QTextCodec_setCodecForLocale(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_setCodecForLocale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "@J8", &a0Keep, sipType_QTextCodec, &a0))
        {
             ::QTextCodec::setCodecForLocale(a0);

            sipKeepReference(SIP_NULLPTR, -7, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_setCodecForLocale, doc_QTextCodec_setCodecForLocale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_makeDecoder, "makeDecoder(self, flags: Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag] = QTextCodec.DefaultConversion) -> QTextDecoder");

extern "C" {static PyObject *meth_QTextCodec_makeDecoder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_makeDecoder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec::ConversionFlags a0def = QTextCodec::DefaultConversion;
         ::QTextCodec::ConversionFlags* a0 = &a0def;
        int a0State = 0;
        const  ::QTextCodec *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QTextCodec, &sipCpp, sipType_QTextCodec_ConversionFlags, &a0, &a0State))
        {
             ::QTextDecoder*sipRes;

            sipRes = sipCpp->makeDecoder(*a0);
            sipReleaseType(a0,sipType_QTextCodec_ConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDecoder,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_makeDecoder, doc_QTextCodec_makeDecoder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_makeEncoder, "makeEncoder(self, flags: Union[QTextCodec.ConversionFlags, QTextCodec.ConversionFlag] = QTextCodec.DefaultConversion) -> QTextEncoder");

extern "C" {static PyObject *meth_QTextCodec_makeEncoder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_makeEncoder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec::ConversionFlags a0def = QTextCodec::DefaultConversion;
         ::QTextCodec::ConversionFlags* a0 = &a0def;
        int a0State = 0;
        const  ::QTextCodec *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QTextCodec, &sipCpp, sipType_QTextCodec_ConversionFlags, &a0, &a0State))
        {
             ::QTextEncoder*sipRes;

            sipRes = sipCpp->makeEncoder(*a0);
            sipReleaseType(a0,sipType_QTextCodec_ConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextEncoder,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_makeEncoder, doc_QTextCodec_makeEncoder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_canEncode, "canEncode(self, str) -> bool");

extern "C" {static PyObject *meth_QTextCodec_canEncode(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_canEncode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QTextCodec *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCodec, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->canEncode(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_canEncode, doc_QTextCodec_canEncode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_toUnicode, "toUnicode(self, Union[QByteArray, bytes, bytearray]) -> str\n"
"toUnicode(self, str) -> str\n"
"toUnicode(self, bytes, state: QTextCodec.ConverterState = None) -> str");

extern "C" {static PyObject *meth_QTextCodec_toUnicode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_toUnicode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QTextCodec *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QTextCodec, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toUnicode(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        const  ::QTextCodec *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Bs", &sipSelf, sipType_QTextCodec, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toUnicode(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QTextCodec::ConverterState* a2 = 0;
        const  ::QTextCodec *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bk|J8", &sipSelf, sipType_QTextCodec, &sipCpp, &a0, &a1, sipType_QTextCodec_ConverterState, &a2))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toUnicode(a0,(int)a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_toUnicode, doc_QTextCodec_toUnicode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_fromUnicode, "fromUnicode(self, str) -> QByteArray");

extern "C" {static PyObject *meth_QTextCodec_fromUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_fromUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QTextCodec *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCodec, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->fromUnicode(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_fromUnicode, doc_QTextCodec_fromUnicode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_name, "name(self) -> QByteArray");

extern "C" {static PyObject *meth_QTextCodec_name(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QTextCodec *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCodec, &sipCpp))
        {
             ::QByteArray*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QTextCodec, sipName_name);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QByteArray(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_name, doc_QTextCodec_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_aliases, "aliases(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QTextCodec_aliases(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_aliases(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextCodec *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCodec, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>((sipSelfWasArg ? sipCpp-> ::QTextCodec::aliases() : sipCpp->aliases()));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_aliases, doc_QTextCodec_aliases);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_mibEnum, "mibEnum(self) -> int");

extern "C" {static PyObject *meth_QTextCodec_mibEnum(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_mibEnum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QTextCodec *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCodec, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QTextCodec, sipName_mibEnum);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->mibEnum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_mibEnum, doc_QTextCodec_mibEnum);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextCodec_convertToUnicode, "convertToUnicode(self, bytes, QTextCodec.ConverterState) -> str");

extern "C" {static PyObject *meth_QTextCodec_convertToUnicode(PyObject *, PyObject *);}
static PyObject *meth_QTextCodec_convertToUnicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QTextCodec::ConverterState* a2;
        const  ::QTextCodec *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pkJ8", &sipSelf, sipType_QTextCodec, &sipCpp, &a0, &a1, sipType_QTextCodec_ConverterState, &a2))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QTextCodec, sipName_convertToUnicode);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QString(sipCpp->convertToUnicode(a0,(int)a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCodec, sipName_convertToUnicode, doc_QTextCodec_convertToUnicode);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCodec(void *, int);}
static void release_QTextCodec(void *, int)
{
}


static PyMethodDef methods_QTextCodec[] = {
    {SIP_MLNAME_CAST(sipName_aliases), meth_QTextCodec_aliases, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_aliases)},
    {SIP_MLNAME_CAST(sipName_availableCodecs), meth_QTextCodec_availableCodecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_availableCodecs)},
    {SIP_MLNAME_CAST(sipName_availableMibs), meth_QTextCodec_availableMibs, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_availableMibs)},
    {SIP_MLNAME_CAST(sipName_canEncode), meth_QTextCodec_canEncode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_canEncode)},
    {SIP_MLNAME_CAST(sipName_codecForHtml), meth_QTextCodec_codecForHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_codecForHtml)},
    {SIP_MLNAME_CAST(sipName_codecForLocale), meth_QTextCodec_codecForLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_codecForLocale)},
    {SIP_MLNAME_CAST(sipName_codecForMib), meth_QTextCodec_codecForMib, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_codecForMib)},
    {SIP_MLNAME_CAST(sipName_codecForName), meth_QTextCodec_codecForName, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_codecForName)},
    {SIP_MLNAME_CAST(sipName_codecForUtfText), meth_QTextCodec_codecForUtfText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_codecForUtfText)},
    {SIP_MLNAME_CAST(sipName_convertToUnicode), meth_QTextCodec_convertToUnicode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_convertToUnicode)},
    {SIP_MLNAME_CAST(sipName_fromUnicode), meth_QTextCodec_fromUnicode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_fromUnicode)},
    {SIP_MLNAME_CAST(sipName_makeDecoder), SIP_MLMETH_CAST(meth_QTextCodec_makeDecoder), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCodec_makeDecoder)},
    {SIP_MLNAME_CAST(sipName_makeEncoder), SIP_MLMETH_CAST(meth_QTextCodec_makeEncoder), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCodec_makeEncoder)},
    {SIP_MLNAME_CAST(sipName_mibEnum), meth_QTextCodec_mibEnum, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_mibEnum)},
    {SIP_MLNAME_CAST(sipName_name), meth_QTextCodec_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_name)},
    {SIP_MLNAME_CAST(sipName_setCodecForLocale), meth_QTextCodec_setCodecForLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCodec_setCodecForLocale)},
    {SIP_MLNAME_CAST(sipName_toUnicode), SIP_MLMETH_CAST(meth_QTextCodec_toUnicode), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCodec_toUnicode)}
};

static sipEnumMemberDef enummembers_QTextCodec[] = {
    {sipName_ConvertInvalidToNull, static_cast<int>( ::QTextCodec::ConvertInvalidToNull), 272},
    {sipName_DefaultConversion, static_cast<int>( ::QTextCodec::DefaultConversion), 272},
    {sipName_IgnoreHeader, static_cast<int>( ::QTextCodec::IgnoreHeader), 272},
};


static pyqt5ClassPluginDef plugin_QTextCodec = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextCodec = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextCodec,
        {SIP_NULLPTR},
        &plugin_QTextCodec
    },
    {
        sipNameNr_QTextCodec,
        {0, 0, 1},
        17, methods_QTextCodec,
        3, enummembers_QTextCodec,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTextCodec,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 41980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 41984 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static long slot_QTextBoundaryFinder_BoundaryReasons___hash__(PyObject *);}
static long slot_QTextBoundaryFinder_BoundaryReasons___hash__(PyObject *sipSelf)
{
     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QTextBoundaryFinder::BoundaryReasons::Int();
#line 42002 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QTextBoundaryFinder_BoundaryReasons___bool__(PyObject *);}
static int slot_QTextBoundaryFinder_BoundaryReasons___bool__(PyObject *sipSelf)
{
     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextBoundaryFinder::BoundaryReasons::Int() != 0);
#line 42027 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBoundaryFinder::BoundaryReasons* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextBoundaryFinder_BoundaryReasons, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextBoundaryFinder::BoundaryReasons::Int() != a0->operator QTextBoundaryFinder::BoundaryReasons::Int());
#line 42057 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QTextBoundaryFinder::BoundaryReasons *>(a0),sipType_QTextBoundaryFinder_BoundaryReasons,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QTextBoundaryFinder_BoundaryReasons, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBoundaryFinder::BoundaryReasons* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTextBoundaryFinder_BoundaryReasons, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QTextBoundaryFinder::BoundaryReasons::Int() == a0->operator QTextBoundaryFinder::BoundaryReasons::Int());
#line 42093 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QTextBoundaryFinder::BoundaryReasons *>(a0),sipType_QTextBoundaryFinder_BoundaryReasons,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QTextBoundaryFinder_BoundaryReasons, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextBoundaryFinder_BoundaryReasons)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QTextBoundaryFinder::BoundaryReasons(*sipCpp ^ a0);
#line 42132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___xor__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBoundaryFinder::BoundaryReasons* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextBoundaryFinder_BoundaryReasons, &a0, &a0State, &a1))
        {
             ::QTextBoundaryFinder::BoundaryReasons*sipRes;

            sipRes = new  ::QTextBoundaryFinder::BoundaryReasons((*a0 ^ a1));
            sipReleaseType(a0,sipType_QTextBoundaryFinder_BoundaryReasons,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextBoundaryFinder_BoundaryReasons,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___ior__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextBoundaryFinder_BoundaryReasons)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QTextBoundaryFinder::BoundaryReasons(*sipCpp | a0);
#line 42204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___or__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBoundaryFinder::BoundaryReasons* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextBoundaryFinder_BoundaryReasons, &a0, &a0State, &a1))
        {
             ::QTextBoundaryFinder::BoundaryReasons*sipRes;

            sipRes = new  ::QTextBoundaryFinder::BoundaryReasons((*a0 | a1));
            sipReleaseType(a0,sipType_QTextBoundaryFinder_BoundaryReasons,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextBoundaryFinder_BoundaryReasons,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___iand__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTextBoundaryFinder_BoundaryReasons)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QTextBoundaryFinder::BoundaryReasons::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___and__(PyObject *,PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBoundaryFinder::BoundaryReasons* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QTextBoundaryFinder_BoundaryReasons, &a0, &a0State, &a1))
        {
             ::QTextBoundaryFinder::BoundaryReasons*sipRes;

            sipRes = new  ::QTextBoundaryFinder::BoundaryReasons((*a0 & a1));
            sipReleaseType(a0,sipType_QTextBoundaryFinder_BoundaryReasons,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextBoundaryFinder_BoundaryReasons,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___invert__(PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___invert__(PyObject *sipSelf)
{
     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QTextBoundaryFinder::BoundaryReasons*sipRes;

            sipRes = new  ::QTextBoundaryFinder::BoundaryReasons(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QTextBoundaryFinder_BoundaryReasons,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___int__(PyObject *);}
static PyObject *slot_QTextBoundaryFinder_BoundaryReasons___int__(PyObject *sipSelf)
{
     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextBoundaryFinder_BoundaryReasons));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBoundaryFinder_BoundaryReasons(void *, int);}
static void release_QTextBoundaryFinder_BoundaryReasons(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipCppV);
}


extern "C" {static void assign_QTextBoundaryFinder_BoundaryReasons(void *, SIP_SSIZE_T, void *);}
static void assign_QTextBoundaryFinder_BoundaryReasons(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons *>(sipSrc);
}


extern "C" {static void *array_QTextBoundaryFinder_BoundaryReasons(SIP_SSIZE_T);}
static void *array_QTextBoundaryFinder_BoundaryReasons(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextBoundaryFinder::BoundaryReasons[sipNrElem];
}


extern "C" {static void *copy_QTextBoundaryFinder_BoundaryReasons(const void *, SIP_SSIZE_T);}
static void *copy_QTextBoundaryFinder_BoundaryReasons(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextBoundaryFinder::BoundaryReasons(reinterpret_cast<const  ::QTextBoundaryFinder::BoundaryReasons *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBoundaryFinder_BoundaryReasons(sipSimpleWrapper *);}
static void dealloc_QTextBoundaryFinder_BoundaryReasons(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextBoundaryFinder_BoundaryReasons(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextBoundaryFinder_BoundaryReasons(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBoundaryFinder_BoundaryReasons(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextBoundaryFinder::BoundaryReasons *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextBoundaryFinder::BoundaryReasons();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QTextBoundaryFinder::BoundaryReasons(a0);

            return sipCpp;
        }
    }

    {
        const  ::QTextBoundaryFinder::BoundaryReasons* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTextBoundaryFinder_BoundaryReasons, &a0, &a0State))
        {
            sipCpp = new  ::QTextBoundaryFinder::BoundaryReasons(*a0);
            sipReleaseType(const_cast< ::QTextBoundaryFinder::BoundaryReasons *>(a0),sipType_QTextBoundaryFinder_BoundaryReasons,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTextBoundaryFinder_BoundaryReasons(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTextBoundaryFinder_BoundaryReasons(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTextBoundaryFinder::BoundaryReasons **sipCppPtr = reinterpret_cast< ::QTextBoundaryFinder::BoundaryReasons **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QTextBoundaryFinder::BoundaryReasons is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextBoundaryFinder_BoundaryReason)) ||
            sipCanConvertToType(sipPy, sipType_QTextBoundaryFinder_BoundaryReasons, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QTextBoundaryFinder_BoundaryReason)))
{
    *sipCppPtr = new QTextBoundaryFinder::BoundaryReasons(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTextBoundaryFinder::BoundaryReasons *>(sipConvertToType(sipPy, sipType_QTextBoundaryFinder_BoundaryReasons, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 42472 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextBoundaryFinder_BoundaryReasons[] = {
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___hash__, hash_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___bool__, bool_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___ne__, ne_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___eq__, eq_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___ixor__, ixor_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___xor__, xor_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___ior__, ior_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___or__, or_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___iand__, iand_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___and__, and_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___invert__, invert_slot},
    {(void *)slot_QTextBoundaryFinder_BoundaryReasons___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QTextBoundaryFinder_BoundaryReasons, "\1QTextBoundaryFinder.BoundaryReasons()\n"
"QTextBoundaryFinder.BoundaryReasons(Union[QTextBoundaryFinder.BoundaryReasons, QTextBoundaryFinder.BoundaryReason])\n"
"QTextBoundaryFinder.BoundaryReasons(QTextBoundaryFinder.BoundaryReasons)");


static pyqt5ClassPluginDef plugin_QTextBoundaryFinder_BoundaryReasons = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextBoundaryFinder_BoundaryReasons = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextBoundaryFinder__BoundaryReasons,
        {SIP_NULLPTR},
        &plugin_QTextBoundaryFinder_BoundaryReasons
    },
    {
        sipNameNr_BoundaryReasons,
        {267, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextBoundaryFinder_BoundaryReasons,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTextBoundaryFinder_BoundaryReasons,
    init_type_QTextBoundaryFinder_BoundaryReasons,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextBoundaryFinder_BoundaryReasons,
    assign_QTextBoundaryFinder_BoundaryReasons,
    array_QTextBoundaryFinder_BoundaryReasons,
    copy_QTextBoundaryFinder_BoundaryReasons,
    release_QTextBoundaryFinder_BoundaryReasons,
    SIP_NULLPTR,
    convertTo_QTextBoundaryFinder_BoundaryReasons,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 42560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 42567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QTextBoundaryFinder_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTextBoundaryFinder_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_isValid, doc_QTextBoundaryFinder_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_type, "type(self) -> QTextBoundaryFinder.BoundaryType");

extern "C" {static PyObject *meth_QTextBoundaryFinder_type(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
             ::QTextBoundaryFinder::BoundaryType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QTextBoundaryFinder_BoundaryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_type, doc_QTextBoundaryFinder_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_string, "string(self) -> str");

extern "C" {static PyObject *meth_QTextBoundaryFinder_string(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_string(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->string());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_string, doc_QTextBoundaryFinder_string);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_toStart, "toStart(self)");

extern "C" {static PyObject *meth_QTextBoundaryFinder_toStart(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_toStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            sipCpp->toStart();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_toStart, doc_QTextBoundaryFinder_toStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_toEnd, "toEnd(self)");

extern "C" {static PyObject *meth_QTextBoundaryFinder_toEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_toEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            sipCpp->toEnd();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_toEnd, doc_QTextBoundaryFinder_toEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_position, "position(self) -> int");

extern "C" {static PyObject *meth_QTextBoundaryFinder_position(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->position();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_position, doc_QTextBoundaryFinder_position);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_setPosition, "setPosition(self, int)");

extern "C" {static PyObject *meth_QTextBoundaryFinder_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp, &a0))
        {
            sipCpp->setPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_setPosition, doc_QTextBoundaryFinder_setPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_toNextBoundary, "toNextBoundary(self) -> int");

extern "C" {static PyObject *meth_QTextBoundaryFinder_toNextBoundary(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_toNextBoundary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->toNextBoundary();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_toNextBoundary, doc_QTextBoundaryFinder_toNextBoundary);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_toPreviousBoundary, "toPreviousBoundary(self) -> int");

extern "C" {static PyObject *meth_QTextBoundaryFinder_toPreviousBoundary(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_toPreviousBoundary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->toPreviousBoundary();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_toPreviousBoundary, doc_QTextBoundaryFinder_toPreviousBoundary);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_isAtBoundary, "isAtBoundary(self) -> bool");

extern "C" {static PyObject *meth_QTextBoundaryFinder_isAtBoundary(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_isAtBoundary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAtBoundary();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_isAtBoundary, doc_QTextBoundaryFinder_isAtBoundary);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_boundaryReasons, "boundaryReasons(self) -> QTextBoundaryFinder.BoundaryReasons");

extern "C" {static PyObject *meth_QTextBoundaryFinder_boundaryReasons(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_boundaryReasons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
             ::QTextBoundaryFinder::BoundaryReasons*sipRes;

            sipRes = new  ::QTextBoundaryFinder::BoundaryReasons(sipCpp->boundaryReasons());

            return sipConvertFromNewType(sipRes,sipType_QTextBoundaryFinder_BoundaryReasons,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_boundaryReasons, doc_QTextBoundaryFinder_boundaryReasons);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBoundaryFinder(void *, int);}
static void release_QTextBoundaryFinder(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTextBoundaryFinder *>(sipCppV);
}


extern "C" {static void assign_QTextBoundaryFinder(void *, SIP_SSIZE_T, void *);}
static void assign_QTextBoundaryFinder(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTextBoundaryFinder *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTextBoundaryFinder *>(sipSrc);
}


extern "C" {static void *array_QTextBoundaryFinder(SIP_SSIZE_T);}
static void *array_QTextBoundaryFinder(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTextBoundaryFinder[sipNrElem];
}


extern "C" {static void *copy_QTextBoundaryFinder(const void *, SIP_SSIZE_T);}
static void *copy_QTextBoundaryFinder(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTextBoundaryFinder(reinterpret_cast<const  ::QTextBoundaryFinder *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBoundaryFinder(sipSimpleWrapper *);}
static void dealloc_QTextBoundaryFinder(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextBoundaryFinder(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTextBoundaryFinder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBoundaryFinder(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTextBoundaryFinder *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTextBoundaryFinder();

            return sipCpp;
        }
    }

    {
        const  ::QTextBoundaryFinder* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTextBoundaryFinder, &a0))
        {
            sipCpp = new  ::QTextBoundaryFinder(*a0);

            return sipCpp;
        }
    }

    {
         ::QTextBoundaryFinder::BoundaryType a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ1", sipType_QTextBoundaryFinder_BoundaryType, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new  ::QTextBoundaryFinder(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTextBoundaryFinder[] = {
    {SIP_MLNAME_CAST(sipName_boundaryReasons), meth_QTextBoundaryFinder_boundaryReasons, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_boundaryReasons)},
    {SIP_MLNAME_CAST(sipName_isAtBoundary), meth_QTextBoundaryFinder_isAtBoundary, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_isAtBoundary)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextBoundaryFinder_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_isValid)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextBoundaryFinder_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_position)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextBoundaryFinder_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_setPosition)},
    {SIP_MLNAME_CAST(sipName_string), meth_QTextBoundaryFinder_string, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_string)},
    {SIP_MLNAME_CAST(sipName_toEnd), meth_QTextBoundaryFinder_toEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_toEnd)},
    {SIP_MLNAME_CAST(sipName_toNextBoundary), meth_QTextBoundaryFinder_toNextBoundary, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_toNextBoundary)},
    {SIP_MLNAME_CAST(sipName_toPreviousBoundary), meth_QTextBoundaryFinder_toPreviousBoundary, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_toPreviousBoundary)},
    {SIP_MLNAME_CAST(sipName_toStart), meth_QTextBoundaryFinder_toStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_toStart)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTextBoundaryFinder_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_type)}
};

static sipEnumMemberDef enummembers_QTextBoundaryFinder[] = {
    {sipName_BreakOpportunity, static_cast<int>( ::QTextBoundaryFinder::BreakOpportunity), 268},
    {sipName_EndOfItem, static_cast<int>( ::QTextBoundaryFinder::EndOfItem), 268},
    {sipName_Grapheme, static_cast<int>( ::QTextBoundaryFinder::Grapheme), 270},
    {sipName_Line, static_cast<int>( ::QTextBoundaryFinder::Line), 270},
    {sipName_MandatoryBreak, static_cast<int>( ::QTextBoundaryFinder::MandatoryBreak), 268},
    {sipName_NotAtBoundary, static_cast<int>( ::QTextBoundaryFinder::NotAtBoundary), 268},
    {sipName_Sentence, static_cast<int>( ::QTextBoundaryFinder::Sentence), 270},
    {sipName_SoftHyphen, static_cast<int>( ::QTextBoundaryFinder::SoftHyphen), 268},
    {sipName_StartOfItem, static_cast<int>( ::QTextBoundaryFinder::StartOfItem), 268},
    {sipName_Word, static_cast<int>( ::QTextBoundaryFinder::Word), 270},
};

PyDoc_STRVAR(doc_QTextBoundaryFinder, "\1QTextBoundaryFinder()\n"
"QTextBoundaryFinder(QTextBoundaryFinder)\n"
"QTextBoundaryFinder(QTextBoundaryFinder.BoundaryType, str)");


static pyqt5ClassPluginDef plugin_QTextBoundaryFinder = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTextBoundaryFinder = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTextBoundaryFinder,
        {SIP_NULLPTR},
        &plugin_QTextBoundaryFinder
    },
    {
        sipNameNr_QTextBoundaryFinder,
        {0, 0, 1},
        11, methods_QTextBoundaryFinder,
        10, enummembers_QTextBoundaryFinder,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTextBoundaryFinder,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTextBoundaryFinder,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTextBoundaryFinder,
    assign_QTextBoundaryFinder,
    array_QTextBoundaryFinder,
    copy_QTextBoundaryFinder,
    release_QTextBoundaryFinder,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtemporaryfile.sip"
#include <qtemporaryfile.h>
#line 43052 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43056 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43059 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 43062 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43065 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 43068 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 43071 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 43074 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 43077 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 43080 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 43083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 43086 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 43089 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43092 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 43095 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 43098 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 43101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 43104 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 43107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 43110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 43113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 43116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQTemporaryFile : public  ::QTemporaryFile
{
public:
    sipQTemporaryFile();
    sipQTemporaryFile(const  ::QString&);
    sipQTemporaryFile( ::QObject*);
    sipQTemporaryFile(const  ::QString&, ::QObject*);
    virtual ~sipQTemporaryFile();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool setPermissions( ::QFileDevice::Permissions) SIP_OVERRIDE;
     ::QFileDevice::Permissions permissions() const SIP_OVERRIDE;
    bool resize( ::qint64) SIP_OVERRIDE;
     ::QString fileName() const SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTemporaryFile(const sipQTemporaryFile &);
    sipQTemporaryFile &operator = (const sipQTemporaryFile &);

    char sipPyMethods[27];
};

sipQTemporaryFile::sipQTemporaryFile():  ::QTemporaryFile(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTemporaryFile::sipQTemporaryFile(const  ::QString& a0):  ::QTemporaryFile(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTemporaryFile::sipQTemporaryFile( ::QObject*a0):  ::QTemporaryFile(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTemporaryFile::sipQTemporaryFile(const  ::QString& a0, ::QObject*a1):  ::QTemporaryFile(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTemporaryFile::~sipQTemporaryFile()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQTemporaryFile::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QTemporaryFile);

    return  ::QTemporaryFile::metaObject();
}

int sipQTemporaryFile::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTemporaryFile::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QTemporaryFile,_c,_id,_a);

    return _id;
}

void *sipQTemporaryFile::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QTemporaryFile, _clname, &sipCpp) ? sipCpp :  ::QTemporaryFile::qt_metacast(_clname));
}

bool sipQTemporaryFile::setPermissions( ::QFileDevice::Permissions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_setPermissions);

    if (!sipMeth)
        return  ::QTemporaryFile::setPermissions(a0);

    extern bool sipVH_QtCore_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFileDevice::Permissions);

    return sipVH_QtCore_52(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QFileDevice::Permissions sipQTemporaryFile::permissions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_permissions);

    if (!sipMeth)
        return  ::QTemporaryFile::permissions();

    extern  ::QFileDevice::Permissions sipVH_QtCore_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_51(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::resize( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_resize);

    if (!sipMeth)
        return  ::QTemporaryFile::resize(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QString sipQTemporaryFile::fileName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_fileName);

    if (!sipMeth)
        return  ::QTemporaryFile::fileName();

    extern  ::QString sipVH_QtCore_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_50(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQTemporaryFile::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTemporaryFile::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTemporaryFile::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTemporaryFile::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTemporaryFile::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTemporaryFile::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTemporaryFile::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTemporaryFile::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQTemporaryFile::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QTemporaryFile::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTemporaryFile::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QTemporaryFile::isSequential();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QTemporaryFile::open(a0);

    extern bool sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTemporaryFile::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QTemporaryFile::close();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQTemporaryFile::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QTemporaryFile::pos();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQTemporaryFile::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QTemporaryFile::size();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QTemporaryFile::seek(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTemporaryFile::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QTemporaryFile::atEnd();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QTemporaryFile::reset();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQTemporaryFile::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QTemporaryFile::bytesAvailable();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQTemporaryFile::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QTemporaryFile::bytesToWrite();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QTemporaryFile::canReadLine();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQTemporaryFile::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QTemporaryFile::waitForReadyRead(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTemporaryFile::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QTemporaryFile::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQTemporaryFile::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_readData);

    if (!sipMeth)
        return  ::QTemporaryFile::readData(a0,a1);

    extern  ::qint64 sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQTemporaryFile::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QTemporaryFile::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_48(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQTemporaryFile::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QTemporaryFile::writeData(a0,a1);

    extern  ::qint64 sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_49(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QTemporaryFile_autoRemove, "autoRemove(self) -> bool");

extern "C" {static PyObject *meth_QTemporaryFile_autoRemove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_autoRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoRemove();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_autoRemove, doc_QTemporaryFile_autoRemove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryFile_setAutoRemove, "setAutoRemove(self, bool)");

extern "C" {static PyObject *meth_QTemporaryFile_setAutoRemove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_setAutoRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTemporaryFile, &sipCpp, &a0))
        {
            sipCpp->setAutoRemove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_setAutoRemove, doc_QTemporaryFile_setAutoRemove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryFile_open, "open(self) -> bool\n"
"open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool");

extern "C" {static PyObject *meth_QTemporaryFile_open(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
         ::QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QTemporaryFile, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QTemporaryFile::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_open, doc_QTemporaryFile_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryFile_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QTemporaryFile_fileName(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QTemporaryFile::fileName() : sipCpp->fileName()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_fileName, doc_QTemporaryFile_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryFile_fileTemplate, "fileTemplate(self) -> str");

extern "C" {static PyObject *meth_QTemporaryFile_fileTemplate(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_fileTemplate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryFile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileTemplate());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_fileTemplate, doc_QTemporaryFile_fileTemplate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryFile_setFileTemplate, "setFileTemplate(self, str)");

extern "C" {static PyObject *meth_QTemporaryFile_setFileTemplate(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_setFileTemplate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTemporaryFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileTemplate(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_setFileTemplate, doc_QTemporaryFile_setFileTemplate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryFile_createNativeFile, "createNativeFile(str) -> QTemporaryFile\n"
"createNativeFile(QFile) -> QTemporaryFile");

extern "C" {static PyObject *meth_QTemporaryFile_createNativeFile(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_createNativeFile(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QTemporaryFile*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QTemporaryFile::createNativeFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTemporaryFile,SIP_NULLPTR);
        }
    }

    {
         ::QFile* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QFile, &a0))
        {
             ::QTemporaryFile*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QTemporaryFile::createNativeFile(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTemporaryFile,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_createNativeFile, doc_QTemporaryFile_createNativeFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryFile_rename, "rename(self, str) -> bool");

extern "C" {static PyObject *meth_QTemporaryFile_rename(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryFile_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTemporaryFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTemporaryFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->rename(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryFile, sipName_rename, doc_QTemporaryFile_rename);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTemporaryFile(void *, const sipTypeDef *);}
static void *cast_QTemporaryFile(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTemporaryFile *sipCpp = reinterpret_cast< ::QTemporaryFile *>(sipCppV);

    if (targetType == sipType_QFile)
        return static_cast< ::QFile *>(sipCpp);

    if (targetType == sipType_QFileDevice)
        return static_cast< ::QFileDevice *>(sipCpp);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTemporaryFile(void *, int);}
static void release_QTemporaryFile(void *sipCppV, int)
{
     ::QTemporaryFile *sipCpp = reinterpret_cast< ::QTemporaryFile *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTemporaryFile(sipSimpleWrapper *);}
static void dealloc_QTemporaryFile(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTemporaryFile *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTemporaryFile(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTemporaryFile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTemporaryFile(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTemporaryFile *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQTemporaryFile();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQTemporaryFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQTemporaryFile(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQTemporaryFile(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTemporaryFile[] = {{76, 255, 1}};


static PyMethodDef methods_QTemporaryFile[] = {
    {SIP_MLNAME_CAST(sipName_autoRemove), meth_QTemporaryFile_autoRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_autoRemove)},
    {SIP_MLNAME_CAST(sipName_createNativeFile), meth_QTemporaryFile_createNativeFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_createNativeFile)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QTemporaryFile_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_fileName)},
    {SIP_MLNAME_CAST(sipName_fileTemplate), meth_QTemporaryFile_fileTemplate, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_fileTemplate)},
    {SIP_MLNAME_CAST(sipName_open), meth_QTemporaryFile_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_open)},
    {SIP_MLNAME_CAST(sipName_rename), meth_QTemporaryFile_rename, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_rename)},
    {SIP_MLNAME_CAST(sipName_setAutoRemove), meth_QTemporaryFile_setAutoRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_setAutoRemove)},
    {SIP_MLNAME_CAST(sipName_setFileTemplate), meth_QTemporaryFile_setFileTemplate, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryFile_setFileTemplate)}
};

PyDoc_STRVAR(doc_QTemporaryFile, "\1QTemporaryFile()\n"
"QTemporaryFile(str)\n"
"QTemporaryFile(QObject)\n"
"QTemporaryFile(str, QObject)");


static pyqt5ClassPluginDef plugin_QTemporaryFile = {
    & ::QTemporaryFile::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTemporaryFile = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTemporaryFile,
        {SIP_NULLPTR},
        &plugin_QTemporaryFile
    },
    {
        sipNameNr_QTemporaryFile,
        {0, 0, 1},
        8, methods_QTemporaryFile,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTemporaryFile,
    -1,
    -1,
    supers_QTemporaryFile,
    SIP_NULLPTR,
    init_type_QTemporaryFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTemporaryFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTemporaryFile,
    cast_QTemporaryFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtemporarydir.sip"
#include <qtemporarydir.h>
#line 44119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QTemporaryDir_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QTemporaryDir_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_isValid, doc_QTemporaryDir_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryDir_autoRemove, "autoRemove(self) -> bool");

extern "C" {static PyObject *meth_QTemporaryDir_autoRemove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_autoRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoRemove();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_autoRemove, doc_QTemporaryDir_autoRemove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryDir_setAutoRemove, "setAutoRemove(self, bool)");

extern "C" {static PyObject *meth_QTemporaryDir_setAutoRemove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_setAutoRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTemporaryDir, &sipCpp, &a0))
        {
            sipCpp->setAutoRemove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_setAutoRemove, doc_QTemporaryDir_setAutoRemove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryDir_remove, "remove(self) -> bool");

extern "C" {static PyObject *meth_QTemporaryDir_remove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->remove();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_remove, doc_QTemporaryDir_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryDir_path, "path(self) -> str");

extern "C" {static PyObject *meth_QTemporaryDir_path(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_path, doc_QTemporaryDir_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryDir_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QTemporaryDir_errorString(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_errorString, doc_QTemporaryDir_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTemporaryDir_filePath, "filePath(self, str) -> str");

extern "C" {static PyObject *meth_QTemporaryDir_filePath(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTemporaryDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->filePath(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_filePath, doc_QTemporaryDir_filePath);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTemporaryDir(void *, int);}
static void release_QTemporaryDir(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTemporaryDir *>(sipCppV);
}


extern "C" {static void dealloc_QTemporaryDir(sipSimpleWrapper *);}
static void dealloc_QTemporaryDir(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTemporaryDir(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTemporaryDir(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTemporaryDir(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTemporaryDir *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTemporaryDir();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QTemporaryDir(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QTemporaryDir[] = {
    {SIP_MLNAME_CAST(sipName_autoRemove), meth_QTemporaryDir_autoRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_autoRemove)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QTemporaryDir_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_errorString)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QTemporaryDir_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_filePath)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTemporaryDir_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_isValid)},
    {SIP_MLNAME_CAST(sipName_path), meth_QTemporaryDir_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_path)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QTemporaryDir_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_remove)},
    {SIP_MLNAME_CAST(sipName_setAutoRemove), meth_QTemporaryDir_setAutoRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_setAutoRemove)}
};

PyDoc_STRVAR(doc_QTemporaryDir, "\1QTemporaryDir()\n"
"QTemporaryDir(str)");


static pyqt5ClassPluginDef plugin_QTemporaryDir = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTemporaryDir = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTemporaryDir,
        {SIP_NULLPTR},
        &plugin_QTemporaryDir
    },
    {
        sipNameNr_QTemporaryDir,
        {0, 0, 1},
        7, methods_QTemporaryDir,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTemporaryDir,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QTemporaryDir,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTemporaryDir,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTemporaryDir,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsystemsemaphore.sip"
#include <qsystemsemaphore.h>
#line 44449 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QSystemSemaphore_setKey, "setKey(self, str, initialValue: int = 0, mode: QSystemSemaphore.AccessMode = QSystemSemaphore.Open)");

extern "C" {static PyObject *meth_QSystemSemaphore_setKey(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_setKey(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
         ::QSystemSemaphore::AccessMode a2 = QSystemSemaphore::Open;
         ::QSystemSemaphore *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_initialValue,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QSystemSemaphore, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QSystemSemaphore_AccessMode, &a2))
        {
            sipCpp->setKey(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_setKey, doc_QSystemSemaphore_setKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSystemSemaphore_key, "key(self) -> str");

extern "C" {static PyObject *meth_QSystemSemaphore_key(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemSemaphore, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->key());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_key, doc_QSystemSemaphore_key);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSystemSemaphore_acquire, "acquire(self) -> bool");

extern "C" {static PyObject *meth_QSystemSemaphore_acquire(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_acquire(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemSemaphore, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->acquire();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_acquire, doc_QSystemSemaphore_acquire);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSystemSemaphore_release, "release(self, n: int = 1) -> bool");

extern "C" {static PyObject *meth_QSystemSemaphore_release(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_release(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
         ::QSystemSemaphore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QSystemSemaphore, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->release(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_release, doc_QSystemSemaphore_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSystemSemaphore_error, "error(self) -> QSystemSemaphore.SystemSemaphoreError");

extern "C" {static PyObject *meth_QSystemSemaphore_error(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemSemaphore, &sipCpp))
        {
             ::QSystemSemaphore::SystemSemaphoreError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSystemSemaphore_SystemSemaphoreError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_error, doc_QSystemSemaphore_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSystemSemaphore_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QSystemSemaphore_errorString(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemSemaphore, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_errorString, doc_QSystemSemaphore_errorString);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSystemSemaphore(void *, int);}
static void release_QSystemSemaphore(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSystemSemaphore *>(sipCppV);
}


extern "C" {static void dealloc_QSystemSemaphore(sipSimpleWrapper *);}
static void dealloc_QSystemSemaphore(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSystemSemaphore(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSystemSemaphore(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSystemSemaphore(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSystemSemaphore *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
         ::QSystemSemaphore::AccessMode a2 = QSystemSemaphore::Open;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_initialValue,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|iE", sipType_QString,&a0, &a0State, &a1, sipType_QSystemSemaphore_AccessMode, &a2))
        {
            sipCpp = new  ::QSystemSemaphore(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSystemSemaphore[] = {
    {SIP_MLNAME_CAST(sipName_acquire), meth_QSystemSemaphore_acquire, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemSemaphore_acquire)},
    {SIP_MLNAME_CAST(sipName_error), meth_QSystemSemaphore_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemSemaphore_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QSystemSemaphore_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemSemaphore_errorString)},
    {SIP_MLNAME_CAST(sipName_key), meth_QSystemSemaphore_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemSemaphore_key)},
    {SIP_MLNAME_CAST(sipName_release), SIP_MLMETH_CAST(meth_QSystemSemaphore_release), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSystemSemaphore_release)},
    {SIP_MLNAME_CAST(sipName_setKey), SIP_MLMETH_CAST(meth_QSystemSemaphore_setKey), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSystemSemaphore_setKey)}
};

static sipEnumMemberDef enummembers_QSystemSemaphore[] = {
    {sipName_AlreadyExists, static_cast<int>( ::QSystemSemaphore::AlreadyExists), 264},
    {sipName_Create, static_cast<int>( ::QSystemSemaphore::Create), 263},
    {sipName_KeyError, static_cast<int>( ::QSystemSemaphore::KeyError), 264},
    {sipName_NoError, static_cast<int>( ::QSystemSemaphore::NoError), 264},
    {sipName_NotFound, static_cast<int>( ::QSystemSemaphore::NotFound), 264},
    {sipName_Open, static_cast<int>( ::QSystemSemaphore::Open), 263},
    {sipName_OutOfResources, static_cast<int>( ::QSystemSemaphore::OutOfResources), 264},
    {sipName_PermissionDenied, static_cast<int>( ::QSystemSemaphore::PermissionDenied), 264},
    {sipName_UnknownError, static_cast<int>( ::QSystemSemaphore::UnknownError), 264},
};

PyDoc_STRVAR(doc_QSystemSemaphore, "\1QSystemSemaphore(str, initialValue: int = 0, mode: QSystemSemaphore.AccessMode = QSystemSemaphore.Open)");


static pyqt5ClassPluginDef plugin_QSystemSemaphore = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSystemSemaphore = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSystemSemaphore,
        {SIP_NULLPTR},
        &plugin_QSystemSemaphore
    },
    {
        sipNameNr_QSystemSemaphore,
        {0, 0, 1},
        6, methods_QSystemSemaphore,
        9, enummembers_QSystemSemaphore,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSystemSemaphore,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSystemSemaphore,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSystemSemaphore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSystemSemaphore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlistmodel.sip"
#include <qstringlistmodel.h>
#line 44771 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 44775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 44778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 44781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 44793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 44796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 44799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 44802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 44805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 44808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 44811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 44814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 44817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 44820 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 44823 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 44826 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44829 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 44832 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 44835 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44838 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44841 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44844 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 44847 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 44850 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 44853 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 44856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44859 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 44862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 44865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 44868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQStringListModel : public  ::QStringListModel
{
public:
    sipQStringListModel( ::QObject*);
    sipQStringListModel(const  ::QStringList&, ::QObject*);
    virtual ~sipQStringListModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStringListModel(const sipQStringListModel &);
    sipQStringListModel &operator = (const sipQStringListModel &);

    char sipPyMethods[38];
};

sipQStringListModel::sipQStringListModel( ::QObject*a0):  ::QStringListModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStringListModel::sipQStringListModel(const  ::QStringList& a0, ::QObject*a1):  ::QStringListModel(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStringListModel::~sipQStringListModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQStringListModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QStringListModel);

    return  ::QStringListModel::metaObject();
}

int sipQStringListModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QStringListModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QStringListModel,_c,_id,_a);

    return _id;
}

void *sipQStringListModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QStringListModel, _clname, &sipCpp) ? sipCpp :  ::QStringListModel::qt_metacast(_clname));
}

bool sipQStringListModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_moveColumns);

    if (!sipMeth)
        return  ::QStringListModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQStringListModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_moveRows);

    if (!sipMeth)
        return  ::QStringListModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQStringListModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QStringListModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int, ::QByteArray> sipQStringListModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_roleNames);

    if (!sipMeth)
        return  ::QStringListModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQStringListModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QStringListModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQStringListModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_revert);

    if (!sipMeth)
    {
         ::QStringListModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQStringListModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_submit);

    if (!sipMeth)
        return  ::QStringListModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QSize sipQStringListModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_span);

    if (!sipMeth)
        return  ::QStringListModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQStringListModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_match);

    if (!sipMeth)
        return  ::QStringListModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QModelIndex sipQStringListModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_buddy);

    if (!sipMeth)
        return  ::QStringListModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_sort);

    if (!sipMeth)
    {
         ::QStringListModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags sipQStringListModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QStringListModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQStringListModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QStringListModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QStringListModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQStringListModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_removeColumns);

    if (!sipMeth)
        return  ::QStringListModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_removeRows);

    if (!sipMeth)
        return  ::QStringListModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_insertColumns);

    if (!sipMeth)
        return  ::QStringListModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_insertRows);

    if (!sipMeth)
        return  ::QStringListModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::Qt::DropActions sipQStringListModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QStringListModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQStringListModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QStringListModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QMimeData* sipQStringListModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_mimeData);

    if (!sipMeth)
        return  ::QStringListModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQStringListModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QStringListModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQStringListModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_setItemData);

    if (!sipMeth)
        return  ::QStringListModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

QMap<int, ::QVariant> sipQStringListModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_itemData);

    if (!sipMeth)
        return  ::QStringListModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQStringListModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QStringListModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QVariant sipQStringListModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_headerData);

    if (!sipMeth)
        return  ::QStringListModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
        return  ::QStringListModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQStringListModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_data);

    if (!sipMeth)
        return  ::QStringListModel::data(a0,a1);

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

int sipQStringListModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_rowCount);

    if (!sipMeth)
        return  ::QStringListModel::rowCount(a0);

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQStringListModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_sibling);

    if (!sipMeth)
        return  ::QStringListModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQStringListModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_index);

    if (!sipMeth)
        return  ::QStringListModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QStringListModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQStringListModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QStringListModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQStringListModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QStringListModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QStringListModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QStringListModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QStringListModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QStringListModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QStringListModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QStringListModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStringListModel::rowCount(*a0) : sipCpp->rowCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_rowCount, doc_QStringListModel_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_data, "data(self, QModelIndex, int) -> Any");

extern "C" {static PyObject *meth_QStringListModel_data(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QStringListModel::data(*a0,a1) : sipCpp->data(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_data, doc_QStringListModel_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QStringListModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|i", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStringListModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_setData, doc_QStringListModel_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QStringListModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QStringListModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_flags, doc_QStringListModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStringListModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QStringListModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStringListModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_insertRows, doc_QStringListModel_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStringListModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QStringListModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStringListModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_removeRows, doc_QStringListModel_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_stringList, "stringList(self) -> List[str]");

extern "C" {static PyObject *meth_QStringListModel_stringList(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_stringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringListModel, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->stringList());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_stringList, doc_QStringListModel_stringList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_setStringList, "setStringList(self, Iterable[str])");

extern "C" {static PyObject *meth_QStringListModel_setStringList(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_setStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setStringList(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_setStringList, doc_QStringListModel_setStringList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QStringListModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QStringListModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QStringListModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_sort, doc_QStringListModel_sort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QStringListModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringListModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QStringListModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_supportedDropActions, doc_QStringListModel_supportedDropActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStringListModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QStringListModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QStringListModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QStringListModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_sibling, doc_QStringListModel_sibling);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStringListModel(void *, const sipTypeDef *);}
static void *cast_QStringListModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStringListModel *sipCpp = reinterpret_cast< ::QStringListModel *>(sipCppV);

    if (targetType == sipType_QAbstractListModel)
        return static_cast< ::QAbstractListModel *>(sipCpp);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStringListModel(void *, int);}
static void release_QStringListModel(void *sipCppV, int)
{
     ::QStringListModel *sipCpp = reinterpret_cast< ::QStringListModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QStringListModel(sipSimpleWrapper *);}
static void dealloc_QStringListModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQStringListModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStringListModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QStringListModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStringListModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStringListModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQStringListModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QStringList,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQStringListModel(*a0,a1);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStringListModel[] = {{10, 255, 1}};


static PyMethodDef methods_QStringListModel[] = {
    {SIP_MLNAME_CAST(sipName_data), meth_QStringListModel_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_data)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QStringListModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_flags)},
    {SIP_MLNAME_CAST(sipName_insertRows), SIP_MLMETH_CAST(meth_QStringListModel_insertRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_removeRows), SIP_MLMETH_CAST(meth_QStringListModel_removeRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), SIP_MLMETH_CAST(meth_QStringListModel_rowCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setData), SIP_MLMETH_CAST(meth_QStringListModel_setData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_setData)},
    {SIP_MLNAME_CAST(sipName_setStringList), meth_QStringListModel_setStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_setStringList)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QStringListModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_sibling)},
    {SIP_MLNAME_CAST(sipName_sort), SIP_MLMETH_CAST(meth_QStringListModel_sort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_sort)},
    {SIP_MLNAME_CAST(sipName_stringList), meth_QStringListModel_stringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_stringList)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QStringListModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_supportedDropActions)}
};

PyDoc_STRVAR(doc_QStringListModel, "\1QStringListModel(parent: QObject = None)\n"
"QStringListModel(Iterable[str], parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QStringListModel = {
    & ::QStringListModel::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStringListModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStringListModel,
        {SIP_NULLPTR},
        &plugin_QStringListModel
    },
    {
        sipNameNr_QStringListModel,
        {0, 0, 1},
        11, methods_QStringListModel,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStringListModel,
    -1,
    -1,
    supers_QStringListModel,
    SIP_NULLPTR,
    init_type_QStringListModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStringListModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStringListModel,
    cast_QStringListModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QStringRef(void *, SIP_SSIZE_T, void *);}
static void assign_QStringRef(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QStringRef *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QStringRef *>(sipSrc);
}


extern "C" {static void *array_QStringRef(SIP_SSIZE_T);}
static void *array_QStringRef(SIP_SSIZE_T sipNrElem)
{
    return new  ::QStringRef[sipNrElem];
}


extern "C" {static void *copy_QStringRef(const void *, SIP_SSIZE_T);}
static void *copy_QStringRef(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QStringRef(reinterpret_cast<const  ::QStringRef *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QStringRef(void *, int);}
static void release_QStringRef(void *ptr, int)
{
    delete reinterpret_cast< ::QStringRef *>(ptr);
}



extern "C" {static int convertTo_QStringRef(PyObject *, void **, int *, PyObject *);}
static int convertTo_QStringRef(PyObject *,void **,int *,PyObject *)
{
#line 72 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
    // Qt only ever returns a QStringRef so this conversion isn't needed.
    return 0;
#line 46154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QStringRef(void *, PyObject *);}
static PyObject *convertFrom_QStringRef(void *sipCppV, PyObject *)
{
    ::QStringRef *sipCpp = reinterpret_cast< ::QStringRef *>(sipCppV);

#line 77 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
    return qpycore_PyObject_FromQString(sipCpp->toString());
#line 46165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QStringRef = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_QStringRef,     /* QStringRef */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QStringRef,
    array_QStringRef,
    copy_QStringRef,
    release_QStringRef,
    convertTo_QStringRef,
    convertFrom_QStringRef
};

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



extern "C" {static void assign_QString(void *, SIP_SSIZE_T, void *);}
static void assign_QString(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QString *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QString *>(sipSrc);
}


extern "C" {static void *array_QString(SIP_SSIZE_T);}
static void *array_QString(SIP_SSIZE_T sipNrElem)
{
    return new  ::QString[sipNrElem];
}


extern "C" {static void *copy_QString(const void *, SIP_SSIZE_T);}
static void *copy_QString(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QString(reinterpret_cast<const  ::QString *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QString(void *, int);}
static void release_QString(void *ptr, int)
{
    delete reinterpret_cast< ::QString *>(ptr);
}



extern "C" {static int convertTo_QString(PyObject *, void **, int *, PyObject *);}
static int convertTo_QString(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QString **sipCppPtr = reinterpret_cast< ::QString **>(sipCppPtrV);

#line 31 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
if (sipIsErr == NULL)
#if PY_MAJOR_VERSION < 3
    return (sipPy == Py_None || PyString_Check(sipPy) || PyUnicode_Check(sipPy));
#else
    return (sipPy == Py_None || PyUnicode_Check(sipPy));
#endif

if (sipPy == Py_None)
{
    // None is the only way to create a null (as opposed to empty) QString.
    *sipCppPtr = new QString();

    return sipGetState(sipTransferObj);
}

#if PY_MAJOR_VERSION < 3
if (PyString_Check(sipPy))
{
    *sipCppPtr = new QString(PyString_AsString(sipPy));

    return sipGetState(sipTransferObj);
}
#endif

*sipCppPtr = new QString(qpycore_PyObject_AsQString(sipPy));

return sipGetState(sipTransferObj);
#line 46264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


extern "C" {static PyObject *convertFrom_QString(void *, PyObject *);}
static PyObject *convertFrom_QString(void *sipCppV, PyObject *)
{
    ::QString *sipCpp = reinterpret_cast< ::QString *>(sipCppV);

#line 61 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
    return qpycore_PyObject_FromQString(*sipCpp);
#line 46275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QString = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_ALLOW_NONE|SIP_TYPE_MAPPED,
        sipNameNr_QString,     /* QString */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QString,
    array_QString,
    copy_QString,
    release_QString,
    convertTo_QString,
    convertFrom_QString
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstorageinfo.sip"
#include <qstorageinfo.h>
#line 46307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 46314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 46320 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QStorageInfo_swap, "swap(self, QStorageInfo)");

extern "C" {static PyObject *meth_QStorageInfo_swap(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStorageInfo* a0;
         ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStorageInfo, &sipCpp, sipType_QStorageInfo, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_swap, doc_QStorageInfo_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_setPath, "setPath(self, str)");

extern "C" {static PyObject *meth_QStorageInfo_setPath(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStorageInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_setPath, doc_QStorageInfo_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_rootPath, "rootPath(self) -> str");

extern "C" {static PyObject *meth_QStorageInfo_rootPath(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_rootPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->rootPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_rootPath, doc_QStorageInfo_rootPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_device, "device(self) -> QByteArray");

extern "C" {static PyObject *meth_QStorageInfo_device(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->device());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_device, doc_QStorageInfo_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_fileSystemType, "fileSystemType(self) -> QByteArray");

extern "C" {static PyObject *meth_QStorageInfo_fileSystemType(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_fileSystemType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->fileSystemType());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_fileSystemType, doc_QStorageInfo_fileSystemType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_name, "name(self) -> str");

extern "C" {static PyObject *meth_QStorageInfo_name(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_name, doc_QStorageInfo_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_displayName, "displayName(self) -> str");

extern "C" {static PyObject *meth_QStorageInfo_displayName(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_displayName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->displayName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_displayName, doc_QStorageInfo_displayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_bytesTotal, "bytesTotal(self) -> int");

extern "C" {static PyObject *meth_QStorageInfo_bytesTotal(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_bytesTotal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->bytesTotal();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_bytesTotal, doc_QStorageInfo_bytesTotal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_bytesFree, "bytesFree(self) -> int");

extern "C" {static PyObject *meth_QStorageInfo_bytesFree(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_bytesFree(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->bytesFree();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_bytesFree, doc_QStorageInfo_bytesFree);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QStorageInfo_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->bytesAvailable();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_bytesAvailable, doc_QStorageInfo_bytesAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QStorageInfo_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_isReadOnly, doc_QStorageInfo_isReadOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_isReady, "isReady(self) -> bool");

extern "C" {static PyObject *meth_QStorageInfo_isReady(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_isReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReady();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_isReady, doc_QStorageInfo_isReady);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QStorageInfo_isValid(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_isValid, doc_QStorageInfo_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_refresh, "refresh(self)");

extern "C" {static PyObject *meth_QStorageInfo_refresh(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            sipCpp->refresh();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_refresh, doc_QStorageInfo_refresh);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_mountedVolumes, "mountedVolumes() -> List[QStorageInfo]");

extern "C" {static PyObject *meth_QStorageInfo_mountedVolumes(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_mountedVolumes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QStorageInfo>*sipRes;

            sipRes = new QList< ::QStorageInfo>( ::QStorageInfo::mountedVolumes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QStorageInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_mountedVolumes, doc_QStorageInfo_mountedVolumes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_root, "root() -> QStorageInfo");

extern "C" {static PyObject *meth_QStorageInfo_root(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_root(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStorageInfo*sipRes;

            sipRes = new  ::QStorageInfo( ::QStorageInfo::root());

            return sipConvertFromNewType(sipRes,sipType_QStorageInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_root, doc_QStorageInfo_root);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_isRoot, "isRoot(self) -> bool");

extern "C" {static PyObject *meth_QStorageInfo_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRoot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_isRoot, doc_QStorageInfo_isRoot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_blockSize, "blockSize(self) -> int");

extern "C" {static PyObject *meth_QStorageInfo_blockSize(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_blockSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blockSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_blockSize, doc_QStorageInfo_blockSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStorageInfo_subvolume, "subvolume(self) -> QByteArray");

extern "C" {static PyObject *meth_QStorageInfo_subvolume(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_subvolume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->subvolume());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_subvolume, doc_QStorageInfo_subvolume);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QStorageInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QStorageInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStorageInfo *sipCpp = reinterpret_cast< ::QStorageInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStorageInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStorageInfo, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QStorageInfo, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStorageInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QStorageInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStorageInfo *sipCpp = reinterpret_cast< ::QStorageInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStorageInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStorageInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStorageInfo, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QStorageInfo, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QStorageInfo(void *, int);}
static void release_QStorageInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QStorageInfo *>(sipCppV);
}


extern "C" {static void assign_QStorageInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QStorageInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QStorageInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QStorageInfo *>(sipSrc);
}


extern "C" {static void *array_QStorageInfo(SIP_SSIZE_T);}
static void *array_QStorageInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QStorageInfo[sipNrElem];
}


extern "C" {static void *copy_QStorageInfo(const void *, SIP_SSIZE_T);}
static void *copy_QStorageInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QStorageInfo(reinterpret_cast<const  ::QStorageInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStorageInfo(sipSimpleWrapper *);}
static void dealloc_QStorageInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStorageInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QStorageInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStorageInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QStorageInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QStorageInfo();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QStorageInfo(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QDir* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDir, &a0))
        {
            sipCpp = new  ::QStorageInfo(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QStorageInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QStorageInfo, &a0))
        {
            sipCpp = new  ::QStorageInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStorageInfo[] = {
    {(void *)slot_QStorageInfo___eq__, eq_slot},
    {(void *)slot_QStorageInfo___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QStorageInfo[] = {
    {SIP_MLNAME_CAST(sipName_blockSize), meth_QStorageInfo_blockSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_blockSize)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QStorageInfo_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesFree), meth_QStorageInfo_bytesFree, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_bytesFree)},
    {SIP_MLNAME_CAST(sipName_bytesTotal), meth_QStorageInfo_bytesTotal, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_bytesTotal)},
    {SIP_MLNAME_CAST(sipName_device), meth_QStorageInfo_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_device)},
    {SIP_MLNAME_CAST(sipName_displayName), meth_QStorageInfo_displayName, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_displayName)},
    {SIP_MLNAME_CAST(sipName_fileSystemType), meth_QStorageInfo_fileSystemType, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_fileSystemType)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QStorageInfo_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isReady), meth_QStorageInfo_isReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_isReady)},
    {SIP_MLNAME_CAST(sipName_isRoot), meth_QStorageInfo_isRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_isRoot)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QStorageInfo_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_isValid)},
    {SIP_MLNAME_CAST(sipName_mountedVolumes), meth_QStorageInfo_mountedVolumes, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_mountedVolumes)},
    {SIP_MLNAME_CAST(sipName_name), meth_QStorageInfo_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_name)},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QStorageInfo_refresh, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_refresh)},
    {SIP_MLNAME_CAST(sipName_root), meth_QStorageInfo_root, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_root)},
    {SIP_MLNAME_CAST(sipName_rootPath), meth_QStorageInfo_rootPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_rootPath)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QStorageInfo_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_setPath)},
    {SIP_MLNAME_CAST(sipName_subvolume), meth_QStorageInfo_subvolume, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_subvolume)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QStorageInfo_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_swap)}
};

PyDoc_STRVAR(doc_QStorageInfo, "\1QStorageInfo()\n"
"QStorageInfo(str)\n"
"QStorageInfo(QDir)\n"
"QStorageInfo(QStorageInfo)");


static pyqt5ClassPluginDef plugin_QStorageInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStorageInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStorageInfo,
        {SIP_NULLPTR},
        &plugin_QStorageInfo
    },
    {
        sipNameNr_QStorageInfo,
        {0, 0, 1},
        19, methods_QStorageInfo,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStorageInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QStorageInfo,
    init_type_QStorageInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStorageInfo,
    assign_QStorageInfo,
    array_QStorageInfo,
    copy_QStorageInfo,
    release_QStorageInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 47109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 47116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QStateMachine_WrappedEvent_object, "object(self) -> QObject");

extern "C" {static PyObject *meth_QStateMachine_WrappedEvent_object(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_WrappedEvent_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine::WrappedEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine_WrappedEvent, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->object();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WrappedEvent, sipName_object, doc_QStateMachine_WrappedEvent_object);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_WrappedEvent_event, "event(self) -> QEvent");

extern "C" {static PyObject *meth_QStateMachine_WrappedEvent_event(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_WrappedEvent_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine::WrappedEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine_WrappedEvent, &sipCpp))
        {
             ::QEvent*sipRes;

            sipRes = sipCpp->event();

            return sipConvertFromType(sipRes,sipType_QEvent,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WrappedEvent, sipName_event, doc_QStateMachine_WrappedEvent_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStateMachine_WrappedEvent(void *, const sipTypeDef *);}
static void *cast_QStateMachine_WrappedEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStateMachine::WrappedEvent *sipCpp = reinterpret_cast< ::QStateMachine::WrappedEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStateMachine_WrappedEvent(void *, int);}
static void release_QStateMachine_WrappedEvent(void *sipCppV, int)
{
    delete reinterpret_cast< ::QStateMachine::WrappedEvent *>(sipCppV);
}


extern "C" {static void dealloc_QStateMachine_WrappedEvent(sipSimpleWrapper *);}
static void dealloc_QStateMachine_WrappedEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStateMachine_WrappedEvent(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStateMachine_WrappedEvent[] = {{69, 255, 1}};


static PyMethodDef methods_QStateMachine_WrappedEvent[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QStateMachine_WrappedEvent_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_WrappedEvent_event)},
    {SIP_MLNAME_CAST(sipName_object), meth_QStateMachine_WrappedEvent_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_WrappedEvent_object)}
};


static pyqt5ClassPluginDef plugin_QStateMachine_WrappedEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStateMachine_WrappedEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStateMachine__WrappedEvent,
        {SIP_NULLPTR},
        &plugin_QStateMachine_WrappedEvent
    },
    {
        sipNameNr_WrappedEvent,
        {249, 255, 0},
        2, methods_QStateMachine_WrappedEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QStateMachine_WrappedEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStateMachine_WrappedEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStateMachine_WrappedEvent,
    cast_QStateMachine_WrappedEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 47277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47281 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 47284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 47287 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47290 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QStateMachine_SignalEvent_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QStateMachine_SignalEvent_sender(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_SignalEvent_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine::SignalEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine_SignalEvent, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->sender();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SignalEvent, sipName_sender, doc_QStateMachine_SignalEvent_sender);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_SignalEvent_signalIndex, "signalIndex(self) -> int");

extern "C" {static PyObject *meth_QStateMachine_SignalEvent_signalIndex(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_SignalEvent_signalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine::SignalEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine_SignalEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->signalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SignalEvent, sipName_signalIndex, doc_QStateMachine_SignalEvent_signalIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_SignalEvent_arguments, "arguments(self) -> List[Any]");

extern "C" {static PyObject *meth_QStateMachine_SignalEvent_arguments(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_SignalEvent_arguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine::SignalEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine_SignalEvent, &sipCpp))
        {
            QList< ::QVariant>*sipRes;

            sipRes = new QList< ::QVariant>(sipCpp->arguments());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SignalEvent, sipName_arguments, doc_QStateMachine_SignalEvent_arguments);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStateMachine_SignalEvent(void *, const sipTypeDef *);}
static void *cast_QStateMachine_SignalEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStateMachine::SignalEvent *sipCpp = reinterpret_cast< ::QStateMachine::SignalEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStateMachine_SignalEvent(void *, int);}
static void release_QStateMachine_SignalEvent(void *sipCppV, int)
{
    delete reinterpret_cast< ::QStateMachine::SignalEvent *>(sipCppV);
}


extern "C" {static void dealloc_QStateMachine_SignalEvent(sipSimpleWrapper *);}
static void dealloc_QStateMachine_SignalEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStateMachine_SignalEvent(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStateMachine_SignalEvent[] = {{69, 255, 1}};


static PyMethodDef methods_QStateMachine_SignalEvent[] = {
    {SIP_MLNAME_CAST(sipName_arguments), meth_QStateMachine_SignalEvent_arguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_SignalEvent_arguments)},
    {SIP_MLNAME_CAST(sipName_sender), meth_QStateMachine_SignalEvent_sender, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_SignalEvent_sender)},
    {SIP_MLNAME_CAST(sipName_signalIndex), meth_QStateMachine_SignalEvent_signalIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_SignalEvent_signalIndex)}
};


static pyqt5ClassPluginDef plugin_QStateMachine_SignalEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStateMachine_SignalEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStateMachine__SignalEvent,
        {SIP_NULLPTR},
        &plugin_QStateMachine_SignalEvent
    },
    {
        sipNameNr_SignalEvent,
        {249, 255, 0},
        3, methods_QStateMachine_SignalEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QStateMachine_SignalEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStateMachine_SignalEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStateMachine_SignalEvent,
    cast_QStateMachine_SignalEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 47478 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 47482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 47485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 144 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qset.sip"
#include <qset.h>
#line 47491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 47494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 47497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47503 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 47506 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47509 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 47512 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsignaltransition.sip"
#include <qsignaltransition.h>
#line 47515 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 47518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47521 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47524 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 47530 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47533 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 47539 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47542 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 47545 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 47548 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 47551 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQStateMachine : public  ::QStateMachine
{
public:
    sipQStateMachine( ::QObject*);
    sipQStateMachine( ::QState::ChildMode, ::QObject*);
    virtual ~sipQStateMachine();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onExit( ::QEvent*) SIP_OVERRIDE;
    void onEntry( ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStateMachine(const sipQStateMachine &);
    sipQStateMachine &operator = (const sipQStateMachine &);

    char sipPyMethods[9];
};

sipQStateMachine::sipQStateMachine( ::QObject*a0):  ::QStateMachine(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStateMachine::sipQStateMachine( ::QState::ChildMode a0, ::QObject*a1):  ::QStateMachine(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStateMachine::~sipQStateMachine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQStateMachine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QStateMachine);

    return  ::QStateMachine::metaObject();
}

int sipQStateMachine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QStateMachine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QStateMachine,_c,_id,_a);

    return _id;
}

void *sipQStateMachine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QStateMachine, _clname, &sipCpp) ? sipCpp :  ::QStateMachine::qt_metacast(_clname));
}

void sipQStateMachine::onExit( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_onExit);

    if (!sipMeth)
    {
         ::QStateMachine::onExit(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::onEntry( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_onEntry);

    if (!sipMeth)
    {
         ::QStateMachine::onEntry(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQStateMachine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QStateMachine::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQStateMachine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QStateMachine::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQStateMachine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QStateMachine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QStateMachine::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QStateMachine::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QStateMachine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QStateMachine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QStateMachine_addState, "addState(self, QAbstractState)");

extern "C" {static PyObject *meth_QStateMachine_addState(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_addState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractState* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QAbstractState, &a0))
        {
            sipCpp->addState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_addState, doc_QStateMachine_addState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_removeState, "removeState(self, QAbstractState)");

extern "C" {static PyObject *meth_QStateMachine_removeState(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_removeState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractState* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QAbstractState, &a0))
        {
            sipCpp->removeState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_removeState, doc_QStateMachine_removeState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_error, "error(self) -> QStateMachine.Error");

extern "C" {static PyObject *meth_QStateMachine_error(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
             ::QStateMachine::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QStateMachine_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_error, doc_QStateMachine_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QStateMachine_errorString(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_errorString, doc_QStateMachine_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_clearError, "clearError(self)");

extern "C" {static PyObject *meth_QStateMachine_clearError(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_clearError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            sipCpp->clearError();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_clearError, doc_QStateMachine_clearError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QStateMachine_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_isRunning, doc_QStateMachine_isRunning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_isAnimated, "isAnimated(self) -> bool");

extern "C" {static PyObject *meth_QStateMachine_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnimated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_isAnimated, doc_QStateMachine_isAnimated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_setAnimated, "setAnimated(self, bool)");

extern "C" {static PyObject *meth_QStateMachine_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            sipCpp->setAnimated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_setAnimated, doc_QStateMachine_setAnimated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_addDefaultAnimation, "addDefaultAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QStateMachine_addDefaultAnimation(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_addDefaultAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
        PyObject *a0Wrapper;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QStateMachine, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 82 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
        // We want to keep a reference to the animation but this is in addition to the
        // existing ones and does not replace them - so we can't use /KeepReference/.
        sipCpp->addDefaultAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = sipGetUserObject((sipSimpleWrapper *)sipSelf);
        
        if (!user)
        {
            user = PyList_New(0);
            sipSetUserObject((sipSimpleWrapper *)sipSelf, user);
        }
        
        if (user)
            PyList_Append(user, a0Wrapper);
#line 48041 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_addDefaultAnimation, doc_QStateMachine_addDefaultAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_defaultAnimations, "defaultAnimations(self) -> List[QAbstractAnimation]");

extern "C" {static PyObject *meth_QStateMachine_defaultAnimations(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_defaultAnimations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QList< ::QAbstractAnimation*>*sipRes;

            sipRes = new QList< ::QAbstractAnimation*>(sipCpp->defaultAnimations());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractAnimation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_defaultAnimations, doc_QStateMachine_defaultAnimations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_removeDefaultAnimation, "removeDefaultAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QStateMachine_removeDefaultAnimation(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_removeDefaultAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
        PyObject *a0Wrapper;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QStateMachine, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
        // Discard the extra animation reference that we took in addDefaultAnimation().
        sipCpp->removeDefaultAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = sipGetUserObject((sipSimpleWrapper *)sipSelf);
        
        if (user)
        {
            Py_ssize_t i = 0;
            
            // Note that we deal with an object appearing in the list more than once.
            while (i < PyList_Size(user))
                if (PyList_GetItem(user, i) == a0Wrapper)
                    PyList_SetSlice(user, i, i + 1, NULL);
                else
                    ++i;
        }
#line 48116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_removeDefaultAnimation, doc_QStateMachine_removeDefaultAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_globalRestorePolicy, "globalRestorePolicy(self) -> QState.RestorePolicy");

extern "C" {static PyObject *meth_QStateMachine_globalRestorePolicy(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_globalRestorePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
             ::QState::RestorePolicy sipRes;

            sipRes = sipCpp->globalRestorePolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QState_RestorePolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_globalRestorePolicy, doc_QStateMachine_globalRestorePolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_setGlobalRestorePolicy, "setGlobalRestorePolicy(self, QState.RestorePolicy)");

extern "C" {static PyObject *meth_QStateMachine_setGlobalRestorePolicy(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_setGlobalRestorePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QState::RestorePolicy a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QState_RestorePolicy, &a0))
        {
            sipCpp->setGlobalRestorePolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_setGlobalRestorePolicy, doc_QStateMachine_setGlobalRestorePolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_postEvent, "postEvent(self, QEvent, priority: QStateMachine.EventPriority = QStateMachine.NormalPriority)");

extern "C" {static PyObject *meth_QStateMachine_postEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_postEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEvent* a0;
         ::QStateMachine::EventPriority a1 = QStateMachine::NormalPriority;
         ::QStateMachine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:|E", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0, sipType_QStateMachine_EventPriority, &a1))
        {
            sipCpp->postEvent(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_postEvent, doc_QStateMachine_postEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_postDelayedEvent, "postDelayedEvent(self, QEvent, int) -> int");

extern "C" {static PyObject *meth_QStateMachine_postDelayedEvent(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_postDelayedEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEvent* a0;
        int a1;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:i", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->postDelayedEvent(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_postDelayedEvent, doc_QStateMachine_postDelayedEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_cancelDelayedEvent, "cancelDelayedEvent(self, int) -> bool");

extern "C" {static PyObject *meth_QStateMachine_cancelDelayedEvent(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_cancelDelayedEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->cancelDelayedEvent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_cancelDelayedEvent, doc_QStateMachine_cancelDelayedEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_configuration, "configuration(self) -> Set[QAbstractState]");

extern "C" {static PyObject *meth_QStateMachine_configuration(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QSet< ::QAbstractState*>*sipRes;

            sipRes = new QSet< ::QAbstractState*>(sipCpp->configuration());

            return sipConvertFromNewType(sipRes,sipType_QSet_0101QAbstractState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_configuration, doc_QStateMachine_configuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QStateMachine_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStateMachine::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_eventFilter, doc_QStateMachine_eventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_start, "start(self)");

extern "C" {static PyObject *meth_QStateMachine_start(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_start, doc_QStateMachine_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_stop, "stop(self)");

extern "C" {static PyObject *meth_QStateMachine_stop(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_stop, doc_QStateMachine_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_setRunning, "setRunning(self, bool)");

extern "C" {static PyObject *meth_QStateMachine_setRunning(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_setRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            sipCpp->setRunning(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_setRunning, doc_QStateMachine_setRunning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_onEntry, "onEntry(self, QEvent)");

extern "C" {static PyObject *meth_QStateMachine_onEntry(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_onEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QStateMachine::onEntry(a0) : sipCpp->onEntry(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_onEntry, doc_QStateMachine_onEntry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_onExit, "onExit(self, QEvent)");

extern "C" {static PyObject *meth_QStateMachine_onExit(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_onExit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QStateMachine::onExit(a0) : sipCpp->onExit(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_onExit, doc_QStateMachine_onExit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStateMachine_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QStateMachine_event(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QStateMachine::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_event, doc_QStateMachine_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStateMachine(void *, const sipTypeDef *);}
static void *cast_QStateMachine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStateMachine *sipCpp = reinterpret_cast< ::QStateMachine *>(sipCppV);

    if (targetType == sipType_QState)
        return static_cast< ::QState *>(sipCpp);

    if (targetType == sipType_QAbstractState)
        return static_cast< ::QAbstractState *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStateMachine(void *, int);}
static void release_QStateMachine(void *sipCppV, int)
{
     ::QStateMachine *sipCpp = reinterpret_cast< ::QStateMachine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QStateMachine(sipSimpleWrapper *);}
static void dealloc_QStateMachine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQStateMachine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStateMachine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QStateMachine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStateMachine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStateMachine *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQStateMachine(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QState::ChildMode a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QState_ChildMode, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQStateMachine(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStateMachine[] = {{246, 255, 1}};


static PyMethodDef methods_QStateMachine[] = {
    {SIP_MLNAME_CAST(sipName_addDefaultAnimation), meth_QStateMachine_addDefaultAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_addDefaultAnimation)},
    {SIP_MLNAME_CAST(sipName_addState), meth_QStateMachine_addState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_addState)},
    {SIP_MLNAME_CAST(sipName_cancelDelayedEvent), meth_QStateMachine_cancelDelayedEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_cancelDelayedEvent)},
    {SIP_MLNAME_CAST(sipName_clearError), meth_QStateMachine_clearError, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_clearError)},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QStateMachine_configuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_configuration)},
    {SIP_MLNAME_CAST(sipName_defaultAnimations), meth_QStateMachine_defaultAnimations, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_defaultAnimations)},
    {SIP_MLNAME_CAST(sipName_error), meth_QStateMachine_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QStateMachine_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_errorString)},
    {SIP_MLNAME_CAST(sipName_event), meth_QStateMachine_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QStateMachine_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_eventFilter)},
    {SIP_MLNAME_CAST(sipName_globalRestorePolicy), meth_QStateMachine_globalRestorePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_globalRestorePolicy)},
    {SIP_MLNAME_CAST(sipName_isAnimated), meth_QStateMachine_isAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_isAnimated)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QStateMachine_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_isRunning)},
    {SIP_MLNAME_CAST(sipName_onEntry), meth_QStateMachine_onEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), meth_QStateMachine_onExit, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_onExit)},
    {SIP_MLNAME_CAST(sipName_postDelayedEvent), meth_QStateMachine_postDelayedEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_postDelayedEvent)},
    {SIP_MLNAME_CAST(sipName_postEvent), SIP_MLMETH_CAST(meth_QStateMachine_postEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStateMachine_postEvent)},
    {SIP_MLNAME_CAST(sipName_removeDefaultAnimation), meth_QStateMachine_removeDefaultAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_removeDefaultAnimation)},
    {SIP_MLNAME_CAST(sipName_removeState), meth_QStateMachine_removeState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_removeState)},
    {SIP_MLNAME_CAST(sipName_setAnimated), meth_QStateMachine_setAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_setAnimated)},
    {SIP_MLNAME_CAST(sipName_setGlobalRestorePolicy), meth_QStateMachine_setGlobalRestorePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_setGlobalRestorePolicy)},
    {SIP_MLNAME_CAST(sipName_setRunning), meth_QStateMachine_setRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_setRunning)},
    {SIP_MLNAME_CAST(sipName_start), meth_QStateMachine_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QStateMachine_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_stop)}
};

static sipEnumMemberDef enummembers_QStateMachine[] = {
    {sipName_HighPriority, static_cast<int>( ::QStateMachine::HighPriority), 251},
    {sipName_NoCommonAncestorForTransitionError, static_cast<int>( ::QStateMachine::NoCommonAncestorForTransitionError), 250},
    {sipName_NoDefaultStateInHistoryStateError, static_cast<int>( ::QStateMachine::NoDefaultStateInHistoryStateError), 250},
    {sipName_NoError, static_cast<int>( ::QStateMachine::NoError), 250},
    {sipName_NoInitialStateError, static_cast<int>( ::QStateMachine::NoInitialStateError), 250},
    {sipName_NormalPriority, static_cast<int>( ::QStateMachine::NormalPriority), 251},
};

PyDoc_STRVAR(doc_QStateMachine, "\1QStateMachine(parent: QObject = None)\n"
"QStateMachine(QState.ChildMode, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QStateMachine[] = {
    {"runningChanged(bool)", "\1runningChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"stopped()", "\1stopped(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"started()", "\1started(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QStateMachine = {
    & ::QStateMachine::staticMetaObject,
    0,
    signals_QStateMachine,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStateMachine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStateMachine,
        {SIP_NULLPTR},
        &plugin_QStateMachine
    },
    {
        sipNameNr_QStateMachine,
        {0, 0, 1},
        24, methods_QStateMachine,
        6, enummembers_QStateMachine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStateMachine,
    -1,
    -1,
    supers_QStateMachine,
    SIP_NULLPTR,
    init_type_QStateMachine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStateMachine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStateMachine,
    cast_QStateMachine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 48712 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48716 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 48719 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 48722 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 48725 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48728 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 48731 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsignaltransition.sip"
#include <qsignaltransition.h>
#line 48734 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 48737 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48740 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48743 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48749 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48752 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48755 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48758 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48761 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 48764 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48767 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 48770 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 48773 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 48776 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQState : public  ::QState
{
public:
    sipQState( ::QState*);
    sipQState( ::QState::ChildMode, ::QState*);
    virtual ~sipQState();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    void onEntry( ::QEvent*) SIP_OVERRIDE;
    void onExit( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQState(const sipQState &);
    sipQState &operator = (const sipQState &);

    char sipPyMethods[9];
};

sipQState::sipQState( ::QState*a0):  ::QState(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQState::sipQState( ::QState::ChildMode a0, ::QState*a1):  ::QState(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQState::~sipQState()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQState::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QState);

    return  ::QState::metaObject();
}

int sipQState::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QState::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QState,_c,_id,_a);

    return _id;
}

void *sipQState::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QState, _clname, &sipCpp) ? sipCpp :  ::QState::qt_metacast(_clname));
}

void sipQState::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QState::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQState::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QState::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQState::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QState::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQState::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QState::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQState::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QState::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQState::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QState::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQState::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QState::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQState::onEntry( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_onEntry);

    if (!sipMeth)
    {
         ::QState::onEntry(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQState::onExit( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_onExit);

    if (!sipMeth)
    {
         ::QState::onExit(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QState_errorState, "errorState(self) -> QAbstractState");

extern "C" {static PyObject *meth_QState_errorState(PyObject *, PyObject *);}
static PyObject *meth_QState_errorState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QState, &sipCpp))
        {
             ::QAbstractState*sipRes;

            sipRes = sipCpp->errorState();

            return sipConvertFromType(sipRes,sipType_QAbstractState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_errorState, doc_QState_errorState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_setErrorState, "setErrorState(self, QAbstractState)");

extern "C" {static PyObject *meth_QState_setErrorState(PyObject *, PyObject *);}
static PyObject *meth_QState_setErrorState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractState* a0;
        PyObject *a0Keep;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QState, &sipCpp, &a0Keep, sipType_QAbstractState, &a0))
        {
            sipCpp->setErrorState(a0);

            sipKeepReference(sipSelf, -5, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_setErrorState, doc_QState_setErrorState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_addTransition, "addTransition(self, QAbstractTransition)\n"
"addTransition(self, pyqtBoundSignal, QAbstractState) -> QSignalTransition\n"
"addTransition(self, QAbstractState) -> QAbstractTransition");

extern "C" {static PyObject *meth_QState_addTransition(PyObject *, PyObject *);}
static PyObject *meth_QState_addTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractTransition* a0;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QState, &sipCpp, sipType_QAbstractTransition, &a0))
        {
            sipCpp->addTransition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        PyObject * a0;
         ::QAbstractState* a1;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0J8", &sipSelf, sipType_QState, &sipCpp, &a0, sipType_QAbstractState, &a1))
        {
             ::QSignalTransition*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
        QObject *sender;
        QByteArray signal_signature;
        
        if ((sipError = pyqt5_get_pyqtsignal_parts(a0, &sender, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->addTransition(sender, signal_signature.constData(), a1);
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 49118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QSignalTransition,SIP_NULLPTR);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
         ::QAbstractState* a0;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QState, &sipCpp, sipType_QAbstractState, &a0))
        {
             ::QAbstractTransition*sipRes;

            sipRes = sipCpp->addTransition(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractTransition,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_addTransition, doc_QState_addTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_removeTransition, "removeTransition(self, QAbstractTransition)");

extern "C" {static PyObject *meth_QState_removeTransition(PyObject *, PyObject *);}
static PyObject *meth_QState_removeTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractTransition* a0;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QState, &sipCpp, sipType_QAbstractTransition, &a0))
        {
            sipCpp->removeTransition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_removeTransition, doc_QState_removeTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_transitions, "transitions(self) -> List[QAbstractTransition]");

extern "C" {static PyObject *meth_QState_transitions(PyObject *, PyObject *);}
static PyObject *meth_QState_transitions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QState, &sipCpp))
        {
            QList< ::QAbstractTransition*>*sipRes;

            sipRes = new QList< ::QAbstractTransition*>(sipCpp->transitions());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractTransition,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_transitions, doc_QState_transitions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_initialState, "initialState(self) -> QAbstractState");

extern "C" {static PyObject *meth_QState_initialState(PyObject *, PyObject *);}
static PyObject *meth_QState_initialState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QState, &sipCpp))
        {
             ::QAbstractState*sipRes;

            sipRes = sipCpp->initialState();

            return sipConvertFromType(sipRes,sipType_QAbstractState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_initialState, doc_QState_initialState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_setInitialState, "setInitialState(self, QAbstractState)");

extern "C" {static PyObject *meth_QState_setInitialState(PyObject *, PyObject *);}
static PyObject *meth_QState_setInitialState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractState* a0;
        PyObject *a0Keep;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QState, &sipCpp, &a0Keep, sipType_QAbstractState, &a0))
        {
            sipCpp->setInitialState(a0);

            sipKeepReference(sipSelf, -6, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_setInitialState, doc_QState_setInitialState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_childMode, "childMode(self) -> QState.ChildMode");

extern "C" {static PyObject *meth_QState_childMode(PyObject *, PyObject *);}
static PyObject *meth_QState_childMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QState, &sipCpp))
        {
             ::QState::ChildMode sipRes;

            sipRes = sipCpp->childMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QState_ChildMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_childMode, doc_QState_childMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_setChildMode, "setChildMode(self, QState.ChildMode)");

extern "C" {static PyObject *meth_QState_setChildMode(PyObject *, PyObject *);}
static PyObject *meth_QState_setChildMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QState::ChildMode a0;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QState, &sipCpp, sipType_QState_ChildMode, &a0))
        {
            sipCpp->setChildMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_setChildMode, doc_QState_setChildMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_assignProperty, "assignProperty(self, QObject, str, Any)");

extern "C" {static PyObject *meth_QState_assignProperty(PyObject *, PyObject *);}
static PyObject *meth_QState_assignProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        const char* a1;
        PyObject *a1Keep;
        const  ::QVariant* a2;
        int a2State = 0;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8AAJ1", &sipSelf, sipType_QState, &sipCpp, sipType_QObject, &a0, &a1Keep, &a1, sipType_QVariant, &a2, &a2State))
        {
            sipCpp->assignProperty(a0,a1,*a2);
            Py_DECREF(a1Keep);
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_assignProperty, doc_QState_assignProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_onEntry, "onEntry(self, QEvent)");

extern "C" {static PyObject *meth_QState_onEntry(PyObject *, PyObject *);}
static PyObject *meth_QState_onEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QState, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QState::onEntry(a0) : sipCpp->onEntry(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_onEntry, doc_QState_onEntry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_onExit, "onExit(self, QEvent)");

extern "C" {static PyObject *meth_QState_onExit(PyObject *, PyObject *);}
static PyObject *meth_QState_onExit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QState, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QState::onExit(a0) : sipCpp->onExit(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_onExit, doc_QState_onExit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QState_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QState_event(PyObject *, PyObject *);}
static PyObject *meth_QState_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QState, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QState::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QState, sipName_event, doc_QState_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QState(void *, const sipTypeDef *);}
static void *cast_QState(void *sipCppV, const sipTypeDef *targetType)
{
     ::QState *sipCpp = reinterpret_cast< ::QState *>(sipCppV);

    if (targetType == sipType_QAbstractState)
        return static_cast< ::QAbstractState *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QState(void *, int);}
static void release_QState(void *sipCppV, int)
{
     ::QState *sipCpp = reinterpret_cast< ::QState *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QState(sipSimpleWrapper *);}
static void dealloc_QState(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQState *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QState(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QState(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQState *sipCpp = SIP_NULLPTR;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQState(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QState::ChildMode a0;
         ::QState* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QState_ChildMode, &a0, sipType_QState, &a1, sipOwner))
        {
            sipCpp = new sipQState(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QState[] = {{13, 255, 1}};


static PyMethodDef methods_QState[] = {
    {SIP_MLNAME_CAST(sipName_addTransition), meth_QState_addTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_addTransition)},
    {SIP_MLNAME_CAST(sipName_assignProperty), meth_QState_assignProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_assignProperty)},
    {SIP_MLNAME_CAST(sipName_childMode), meth_QState_childMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_childMode)},
    {SIP_MLNAME_CAST(sipName_errorState), meth_QState_errorState, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_errorState)},
    {SIP_MLNAME_CAST(sipName_event), meth_QState_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_event)},
    {SIP_MLNAME_CAST(sipName_initialState), meth_QState_initialState, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_initialState)},
    {SIP_MLNAME_CAST(sipName_onEntry), meth_QState_onEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), meth_QState_onExit, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_onExit)},
    {SIP_MLNAME_CAST(sipName_removeTransition), meth_QState_removeTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_removeTransition)},
    {SIP_MLNAME_CAST(sipName_setChildMode), meth_QState_setChildMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_setChildMode)},
    {SIP_MLNAME_CAST(sipName_setErrorState), meth_QState_setErrorState, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_setErrorState)},
    {SIP_MLNAME_CAST(sipName_setInitialState), meth_QState_setInitialState, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_setInitialState)},
    {SIP_MLNAME_CAST(sipName_transitions), meth_QState_transitions, METH_VARARGS, SIP_MLDOC_CAST(doc_QState_transitions)}
};

static sipEnumMemberDef enummembers_QState[] = {
    {sipName_DontRestoreProperties, static_cast<int>( ::QState::DontRestoreProperties), 248},
    {sipName_ExclusiveStates, static_cast<int>( ::QState::ExclusiveStates), 247},
    {sipName_ParallelStates, static_cast<int>( ::QState::ParallelStates), 247},
    {sipName_RestoreProperties, static_cast<int>( ::QState::RestoreProperties), 248},
};

PyDoc_STRVAR(doc_QState, "\1QState(parent: QState = None)\n"
"QState(QState.ChildMode, parent: QState = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QState[] = {
    {"errorStateChanged()", "\1errorStateChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"initialStateChanged()", "\1initialStateChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"childModeChanged()", "\1childModeChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"propertiesAssigned()", "\1propertiesAssigned(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QState = {
    & ::QState::staticMetaObject,
    0,
    signals_QState,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QState,
        {SIP_NULLPTR},
        &plugin_QState
    },
    {
        sipNameNr_QState,
        {0, 0, 1},
        13, methods_QState,
        4, enummembers_QState,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QState,
    -1,
    -1,
    supers_QState,
    SIP_NULLPTR,
    init_type_QState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QState,
    cast_QState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstandardpaths.sip"
#include <qstandardpaths.h>
#line 49636 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstandardpaths.sip"
#include <qstandardpaths.h>
#line 49640 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static long slot_QStandardPaths_LocateOptions___hash__(PyObject *);}
static long slot_QStandardPaths_LocateOptions___hash__(PyObject *sipSelf)
{
     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QStandardPaths::LocateOptions::Int();
#line 49658 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QStandardPaths_LocateOptions___bool__(PyObject *);}
static int slot_QStandardPaths_LocateOptions___bool__(PyObject *sipSelf)
{
     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QStandardPaths::LocateOptions::Int() != 0);
#line 49683 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardPaths::LocateOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStandardPaths_LocateOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QStandardPaths::LocateOptions::Int() != a0->operator QStandardPaths::LocateOptions::Int());
#line 49713 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QStandardPaths::LocateOptions *>(a0),sipType_QStandardPaths_LocateOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QStandardPaths_LocateOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStandardPaths::LocateOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QStandardPaths_LocateOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QStandardPaths::LocateOptions::Int() == a0->operator QStandardPaths::LocateOptions::Int());
#line 49749 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QStandardPaths::LocateOptions *>(a0),sipType_QStandardPaths_LocateOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QStandardPaths_LocateOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QStandardPaths_LocateOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QStandardPaths::LocateOptions(*sipCpp ^ a0);
#line 49788 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::LocateOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QStandardPaths_LocateOptions, &a0, &a0State, &a1))
        {
             ::QStandardPaths::LocateOptions*sipRes;

            sipRes = new  ::QStandardPaths::LocateOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QStandardPaths_LocateOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStandardPaths_LocateOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QStandardPaths_LocateOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QStandardPaths::LocateOptions(*sipCpp | a0);
#line 49860 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::LocateOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QStandardPaths_LocateOptions, &a0, &a0State, &a1))
        {
             ::QStandardPaths::LocateOptions*sipRes;

            sipRes = new  ::QStandardPaths::LocateOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QStandardPaths_LocateOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStandardPaths_LocateOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QStandardPaths_LocateOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QStandardPaths::LocateOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::LocateOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QStandardPaths_LocateOptions, &a0, &a0State, &a1))
        {
             ::QStandardPaths::LocateOptions*sipRes;

            sipRes = new  ::QStandardPaths::LocateOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QStandardPaths_LocateOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStandardPaths_LocateOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___invert__(PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___invert__(PyObject *sipSelf)
{
     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QStandardPaths::LocateOptions*sipRes;

            sipRes = new  ::QStandardPaths::LocateOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QStandardPaths_LocateOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QStandardPaths_LocateOptions___int__(PyObject *);}
static PyObject *slot_QStandardPaths_LocateOptions___int__(PyObject *sipSelf)
{
     ::QStandardPaths::LocateOptions *sipCpp = reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardPaths_LocateOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardPaths_LocateOptions(void *, int);}
static void release_QStandardPaths_LocateOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipCppV);
}


extern "C" {static void assign_QStandardPaths_LocateOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QStandardPaths_LocateOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QStandardPaths::LocateOptions *>(sipSrc);
}


extern "C" {static void *array_QStandardPaths_LocateOptions(SIP_SSIZE_T);}
static void *array_QStandardPaths_LocateOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QStandardPaths::LocateOptions[sipNrElem];
}


extern "C" {static void *copy_QStandardPaths_LocateOptions(const void *, SIP_SSIZE_T);}
static void *copy_QStandardPaths_LocateOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QStandardPaths::LocateOptions(reinterpret_cast<const  ::QStandardPaths::LocateOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStandardPaths_LocateOptions(sipSimpleWrapper *);}
static void dealloc_QStandardPaths_LocateOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStandardPaths_LocateOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QStandardPaths_LocateOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStandardPaths_LocateOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QStandardPaths::LocateOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QStandardPaths::LocateOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QStandardPaths::LocateOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QStandardPaths::LocateOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QStandardPaths_LocateOptions, &a0, &a0State))
        {
            sipCpp = new  ::QStandardPaths::LocateOptions(*a0);
            sipReleaseType(const_cast< ::QStandardPaths::LocateOptions *>(a0),sipType_QStandardPaths_LocateOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QStandardPaths_LocateOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QStandardPaths_LocateOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QStandardPaths::LocateOptions **sipCppPtr = reinterpret_cast< ::QStandardPaths::LocateOptions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QStandardPaths::LocateOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QStandardPaths_LocateOption)) ||
            sipCanConvertToType(sipPy, sipType_QStandardPaths_LocateOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QStandardPaths_LocateOption)))
{
    *sipCppPtr = new QStandardPaths::LocateOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QStandardPaths::LocateOptions *>(sipConvertToType(sipPy, sipType_QStandardPaths_LocateOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 50128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStandardPaths_LocateOptions[] = {
    {(void *)slot_QStandardPaths_LocateOptions___hash__, hash_slot},
    {(void *)slot_QStandardPaths_LocateOptions___bool__, bool_slot},
    {(void *)slot_QStandardPaths_LocateOptions___ne__, ne_slot},
    {(void *)slot_QStandardPaths_LocateOptions___eq__, eq_slot},
    {(void *)slot_QStandardPaths_LocateOptions___ixor__, ixor_slot},
    {(void *)slot_QStandardPaths_LocateOptions___xor__, xor_slot},
    {(void *)slot_QStandardPaths_LocateOptions___ior__, ior_slot},
    {(void *)slot_QStandardPaths_LocateOptions___or__, or_slot},
    {(void *)slot_QStandardPaths_LocateOptions___iand__, iand_slot},
    {(void *)slot_QStandardPaths_LocateOptions___and__, and_slot},
    {(void *)slot_QStandardPaths_LocateOptions___invert__, invert_slot},
    {(void *)slot_QStandardPaths_LocateOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QStandardPaths_LocateOptions, "\1QStandardPaths.LocateOptions()\n"
"QStandardPaths.LocateOptions(Union[QStandardPaths.LocateOptions, QStandardPaths.LocateOption])\n"
"QStandardPaths.LocateOptions(QStandardPaths.LocateOptions)");


static pyqt5ClassPluginDef plugin_QStandardPaths_LocateOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStandardPaths_LocateOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStandardPaths__LocateOptions,
        {SIP_NULLPTR},
        &plugin_QStandardPaths_LocateOptions
    },
    {
        sipNameNr_LocateOptions,
        {242, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStandardPaths_LocateOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QStandardPaths_LocateOptions,
    init_type_QStandardPaths_LocateOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QStandardPaths_LocateOptions,
    assign_QStandardPaths_LocateOptions,
    array_QStandardPaths_LocateOptions,
    copy_QStandardPaths_LocateOptions,
    release_QStandardPaths_LocateOptions,
    SIP_NULLPTR,
    convertTo_QStandardPaths_LocateOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstandardpaths.sip"
#include <qstandardpaths.h>
#line 50216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 50220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 50223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstandardpaths.sip"
#include <qstandardpaths.h>
#line 50226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QStandardPaths_writableLocation, "writableLocation(QStandardPaths.StandardLocation) -> str");

extern "C" {static PyObject *meth_QStandardPaths_writableLocation(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_writableLocation(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QStandardPaths_StandardLocation, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QStandardPaths::writableLocation(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_writableLocation, doc_QStandardPaths_writableLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_standardLocations, "standardLocations(QStandardPaths.StandardLocation) -> List[str]");

extern "C" {static PyObject *meth_QStandardPaths_standardLocations(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_standardLocations(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QStandardPaths_StandardLocation, &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QStandardPaths::standardLocations(a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_standardLocations, doc_QStandardPaths_standardLocations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_locate, "locate(QStandardPaths.StandardLocation, str, options: QStandardPaths.LocateOptions = QStandardPaths.LocateFile) -> str");

extern "C" {static PyObject *meth_QStandardPaths_locate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_locate(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QStandardPaths::LocateOptions a2def = QStandardPaths::LocateFile;
         ::QStandardPaths::LocateOptions* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "EJ1|J1", sipType_QStandardPaths_StandardLocation, &a0, sipType_QString,&a1, &a1State, sipType_QStandardPaths_LocateOptions, &a2, &a2State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QStandardPaths::locate(a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QStandardPaths_LocateOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_locate, doc_QStandardPaths_locate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_locateAll, "locateAll(QStandardPaths.StandardLocation, str, options: QStandardPaths.LocateOptions = QStandardPaths.LocateFile) -> List[str]");

extern "C" {static PyObject *meth_QStandardPaths_locateAll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_locateAll(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QStandardPaths::LocateOptions a2def = QStandardPaths::LocateFile;
         ::QStandardPaths::LocateOptions* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "EJ1|J1", sipType_QStandardPaths_StandardLocation, &a0, sipType_QString,&a1, &a1State, sipType_QStandardPaths_LocateOptions, &a2, &a2State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QStandardPaths::locateAll(a0,*a1,*a2));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QStandardPaths_LocateOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_locateAll, doc_QStandardPaths_locateAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_displayName, "displayName(QStandardPaths.StandardLocation) -> str");

extern "C" {static PyObject *meth_QStandardPaths_displayName(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_displayName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QStandardPaths::StandardLocation a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QStandardPaths_StandardLocation, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QStandardPaths::displayName(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_displayName, doc_QStandardPaths_displayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_findExecutable, "findExecutable(str, paths: Iterable[str] = []) -> str");

extern "C" {static PyObject *meth_QStandardPaths_findExecutable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_findExecutable(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList& a1def = QStringList();
        const  ::QStringList* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_paths,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QStandardPaths::findExecutable(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_findExecutable, doc_QStandardPaths_findExecutable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_enableTestMode, "enableTestMode(bool)");

extern "C" {static PyObject *meth_QStandardPaths_enableTestMode(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_enableTestMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QStandardPaths::enableTestMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_enableTestMode, doc_QStandardPaths_enableTestMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QStandardPaths_setTestModeEnabled, "setTestModeEnabled(bool)");

extern "C" {static PyObject *meth_QStandardPaths_setTestModeEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardPaths_setTestModeEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QStandardPaths::setTestModeEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardPaths, sipName_setTestModeEnabled, doc_QStandardPaths_setTestModeEnabled);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardPaths(void *, int);}
static void release_QStandardPaths(void *, int)
{
}


extern "C" {static void *init_type_QStandardPaths(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStandardPaths(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QStandardPaths *sipCpp = SIP_NULLPTR;

    {
        const  ::QStandardPaths* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QStandardPaths, &a0))
        {
            sipCpp = new  ::QStandardPaths(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QStandardPaths[] = {
    {SIP_MLNAME_CAST(sipName_displayName), meth_QStandardPaths_displayName, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardPaths_displayName)},
    {SIP_MLNAME_CAST(sipName_enableTestMode), meth_QStandardPaths_enableTestMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardPaths_enableTestMode)},
    {SIP_MLNAME_CAST(sipName_findExecutable), SIP_MLMETH_CAST(meth_QStandardPaths_findExecutable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardPaths_findExecutable)},
    {SIP_MLNAME_CAST(sipName_locate), SIP_MLMETH_CAST(meth_QStandardPaths_locate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardPaths_locate)},
    {SIP_MLNAME_CAST(sipName_locateAll), SIP_MLMETH_CAST(meth_QStandardPaths_locateAll), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardPaths_locateAll)},
    {SIP_MLNAME_CAST(sipName_setTestModeEnabled), meth_QStandardPaths_setTestModeEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardPaths_setTestModeEnabled)},
    {SIP_MLNAME_CAST(sipName_standardLocations), meth_QStandardPaths_standardLocations, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardPaths_standardLocations)},
    {SIP_MLNAME_CAST(sipName_writableLocation), meth_QStandardPaths_writableLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardPaths_writableLocation)}
};

static sipEnumMemberDef enummembers_QStandardPaths[] = {
    {sipName_AppConfigLocation, static_cast<int>( ::QStandardPaths::AppConfigLocation), 245},
    {sipName_AppDataLocation, static_cast<int>( ::QStandardPaths::AppDataLocation), 245},
    {sipName_AppLocalDataLocation, static_cast<int>( ::QStandardPaths::AppLocalDataLocation), 245},
    {sipName_ApplicationsLocation, static_cast<int>( ::QStandardPaths::ApplicationsLocation), 245},
    {sipName_CacheLocation, static_cast<int>( ::QStandardPaths::CacheLocation), 245},
    {sipName_ConfigLocation, static_cast<int>( ::QStandardPaths::ConfigLocation), 245},
    {sipName_DataLocation, static_cast<int>( ::QStandardPaths::DataLocation), 245},
    {sipName_DesktopLocation, static_cast<int>( ::QStandardPaths::DesktopLocation), 245},
    {sipName_DocumentsLocation, static_cast<int>( ::QStandardPaths::DocumentsLocation), 245},
    {sipName_DownloadLocation, static_cast<int>( ::QStandardPaths::DownloadLocation), 245},
    {sipName_FontsLocation, static_cast<int>( ::QStandardPaths::FontsLocation), 245},
    {sipName_GenericCacheLocation, static_cast<int>( ::QStandardPaths::GenericCacheLocation), 245},
    {sipName_GenericConfigLocation, static_cast<int>( ::QStandardPaths::GenericConfigLocation), 245},
    {sipName_GenericDataLocation, static_cast<int>( ::QStandardPaths::GenericDataLocation), 245},
    {sipName_HomeLocation, static_cast<int>( ::QStandardPaths::HomeLocation), 245},
    {sipName_LocateDirectory, static_cast<int>( ::QStandardPaths::LocateDirectory), 243},
    {sipName_LocateFile, static_cast<int>( ::QStandardPaths::LocateFile), 243},
    {sipName_MoviesLocation, static_cast<int>( ::QStandardPaths::MoviesLocation), 245},
    {sipName_MusicLocation, static_cast<int>( ::QStandardPaths::MusicLocation), 245},
    {sipName_PicturesLocation, static_cast<int>( ::QStandardPaths::PicturesLocation), 245},
    {sipName_RuntimeLocation, static_cast<int>( ::QStandardPaths::RuntimeLocation), 245},
    {sipName_TempLocation, static_cast<int>( ::QStandardPaths::TempLocation), 245},
};

PyDoc_STRVAR(doc_QStandardPaths, "\1QStandardPaths(QStandardPaths)");


static pyqt5ClassPluginDef plugin_QStandardPaths = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QStandardPaths = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QStandardPaths,
        {SIP_NULLPTR},
        &plugin_QStandardPaths
    },
    {
        sipNameNr_QStandardPaths,
        {0, 0, 1},
        8, methods_QStandardPaths,
        22, enummembers_QStandardPaths,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QStandardPaths,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QStandardPaths,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QStandardPaths,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsortfilterproxymodel.sip"
#include <qsortfilterproxymodel.h>
#line 50614 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 50618 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 50621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50624 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 50627 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50630 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 50633 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 50636 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 50642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50645 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 50648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 50651 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 50654 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 50657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 50660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 50663 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 50666 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 50669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 50672 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 50675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 50678 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 50681 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 50684 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 50687 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 50690 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 50693 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 50696 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 50699 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 50702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 50705 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 50708 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 50711 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 50714 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQSortFilterProxyModel : public  ::QSortFilterProxyModel
{
public:
    sipQSortFilterProxyModel( ::QObject*);
    virtual ~sipQSortFilterProxyModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool lessThan(const  ::QModelIndex&,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool filterAcceptsColumn(int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool filterAcceptsRow(int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool hasChildren(const  ::QModelIndex&) const SIP_OVERRIDE;
    int columnCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex parent(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void setSourceModel( ::QAbstractItemModel*) SIP_OVERRIDE;
     ::QModelIndex mapToSource(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex mapFromSource(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QItemSelection mapSelectionToSource(const  ::QItemSelection&) const SIP_OVERRIDE;
     ::QItemSelection mapSelectionFromSource(const  ::QItemSelection&) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSortFilterProxyModel(const sipQSortFilterProxyModel &);
    sipQSortFilterProxyModel &operator = (const sipQSortFilterProxyModel &);

    char sipPyMethods[49];
};

sipQSortFilterProxyModel::sipQSortFilterProxyModel( ::QObject*a0):  ::QSortFilterProxyModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSortFilterProxyModel::~sipQSortFilterProxyModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSortFilterProxyModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSortFilterProxyModel);

    return  ::QSortFilterProxyModel::metaObject();
}

int sipQSortFilterProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSortFilterProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSortFilterProxyModel,_c,_id,_a);

    return _id;
}

void *sipQSortFilterProxyModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSortFilterProxyModel, _clname, &sipCpp) ? sipCpp :  ::QSortFilterProxyModel::qt_metacast(_clname));
}

bool sipQSortFilterProxyModel::lessThan(const  ::QModelIndex& a0,const  ::QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_lessThan);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::lessThan(a0,a1);

    extern bool sipVH_QtCore_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&);

    return sipVH_QtCore_60(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSortFilterProxyModel::filterAcceptsColumn(int a0,const  ::QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_filterAcceptsColumn);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::filterAcceptsColumn(a0,a1);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QModelIndex&);

    return sipVH_QtCore_59(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSortFilterProxyModel::filterAcceptsRow(int a0,const  ::QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_filterAcceptsRow);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::filterAcceptsRow(a0,a1);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QModelIndex&);

    return sipVH_QtCore_59(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSortFilterProxyModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_moveColumns);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQSortFilterProxyModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_moveRows);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQSortFilterProxyModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int, ::QByteArray> sipQSortFilterProxyModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_roleNames);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQSortFilterProxyModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQSortFilterProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_revert);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSortFilterProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_submit);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QSize sipQSortFilterProxyModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_span);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQSortFilterProxyModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_match);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QModelIndex sipQSortFilterProxyModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_buddy);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_sort);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags sipQSortFilterProxyModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSortFilterProxyModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSortFilterProxyModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_removeColumns);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_removeRows);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_insertColumns);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_insertRows);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::Qt::DropActions sipQSortFilterProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSortFilterProxyModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QMimeData* sipQSortFilterProxyModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_mimeData);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQSortFilterProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,SIP_NULLPTR,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSortFilterProxyModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_setItemData);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

QMap<int, ::QVariant> sipQSortFilterProxyModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_itemData);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSortFilterProxyModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QVariant sipQSortFilterProxyModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_headerData);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQSortFilterProxyModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_data);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::data(a0,a1);

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSortFilterProxyModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_hasChildren);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::hasChildren(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQSortFilterProxyModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_columnCount);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::columnCount(a0);

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQSortFilterProxyModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,SIP_NULLPTR,sipName_rowCount);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::rowCount(a0);

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSortFilterProxyModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_sibling);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQSortFilterProxyModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_parent);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::parent(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSortFilterProxyModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,SIP_NULLPTR,sipName_index);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSortFilterProxyModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSortFilterProxyModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSortFilterProxyModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSortFilterProxyModel::setSourceModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,SIP_NULLPTR,sipName_setSourceModel);

    if (!sipMeth)
    {
         ::QSortFilterProxyModel::setSourceModel(a0);
        return;
    }

    extern void sipVH_QtCore_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtCore_42(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSortFilterProxyModel::mapToSource(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,SIP_NULLPTR,sipName_mapToSource);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mapToSource(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSortFilterProxyModel::mapFromSource(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,SIP_NULLPTR,sipName_mapFromSource);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mapFromSource(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QItemSelection sipQSortFilterProxyModel::mapSelectionToSource(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,SIP_NULLPTR,sipName_mapSelectionToSource);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mapSelectionToSource(a0);

    extern  ::QItemSelection sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QItemSelection sipQSortFilterProxyModel::mapSelectionFromSource(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,SIP_NULLPTR,sipName_mapSelectionFromSource);

    if (!sipMeth)
        return  ::QSortFilterProxyModel::mapSelectionFromSource(a0);

    extern  ::QItemSelection sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setSourceModel, "setSourceModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setSourceModel(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setSourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::setSourceModel(a0) : sipCpp->setSourceModel(a0));

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setSourceModel, doc_QSortFilterProxyModel_setSourceModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mapToSource, "mapToSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mapToSource(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mapToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mapToSource(*a0) : sipCpp->mapToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mapToSource, doc_QSortFilterProxyModel_mapToSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mapFromSource, "mapFromSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mapFromSource(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mapFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mapFromSource(*a0) : sipCpp->mapFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mapFromSource, doc_QSortFilterProxyModel_mapFromSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mapSelectionToSource, "mapSelectionToSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mapSelectionToSource(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mapSelectionToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mapSelectionToSource(*a0) : sipCpp->mapSelectionToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mapSelectionToSource, doc_QSortFilterProxyModel_mapSelectionToSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mapSelectionFromSource, "mapSelectionFromSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mapSelectionFromSource(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mapSelectionFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mapSelectionFromSource(*a0) : sipCpp->mapSelectionFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mapSelectionFromSource, doc_QSortFilterProxyModel_mapSelectionFromSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterRegExp, "filterRegExp(self) -> QRegExp");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterRegExp(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::QRegExp*sipRes;

            sipRes = new  ::QRegExp(sipCpp->filterRegExp());

            return sipConvertFromNewType(sipRes,sipType_QRegExp,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterRegExp, doc_QSortFilterProxyModel_filterRegExp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterRegularExpression, "filterRegularExpression(self) -> QRegularExpression");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterRegularExpression(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterRegularExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::QRegularExpression*sipRes;

            sipRes = new  ::QRegularExpression(sipCpp->filterRegularExpression());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterRegularExpression, doc_QSortFilterProxyModel_filterRegularExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterKeyColumn, "filterKeyColumn(self) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterKeyColumn(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterKeyColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->filterKeyColumn();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterKeyColumn, doc_QSortFilterProxyModel_filterKeyColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterKeyColumn, "setFilterKeyColumn(self, int)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterKeyColumn(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterKeyColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setFilterKeyColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterKeyColumn, doc_QSortFilterProxyModel_setFilterKeyColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterCaseSensitivity, "filterCaseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->filterCaseSensitivity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CaseSensitivity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterCaseSensitivity, doc_QSortFilterProxyModel_filterCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterCaseSensitivity, "setFilterCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CaseSensitivity a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setFilterCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterCaseSensitivity, doc_QSortFilterProxyModel_setFilterCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            sipCpp->invalidate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_invalidate, doc_QSortFilterProxyModel_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterFixedString, "setFilterFixedString(self, str)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterFixedString(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterFixedString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilterFixedString(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterFixedString, doc_QSortFilterProxyModel_setFilterFixedString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterRegExp, "setFilterRegExp(self, QRegExp)\n"
"setFilterRegExp(self, str)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterRegExp(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp* a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QRegExp, &a0))
        {
            sipCpp->setFilterRegExp(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilterRegExp(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterRegExp, doc_QSortFilterProxyModel_setFilterRegExp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterRegularExpression, "setFilterRegularExpression(self, QRegularExpression)\n"
"setFilterRegularExpression(self, str)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterRegularExpression(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterRegularExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression* a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QRegularExpression, &a0))
        {
            sipCpp->setFilterRegularExpression(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilterRegularExpression(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterRegularExpression, doc_QSortFilterProxyModel_setFilterRegularExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterWildcard, "setFilterWildcard(self, str)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterWildcard(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterWildcard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilterWildcard(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterWildcard, doc_QSortFilterProxyModel_setFilterWildcard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterAcceptsRow, "filterAcceptsRow(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterAcceptsRow(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterAcceptsRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::filterAcceptsRow(a0,*a1) : sipCpp->filterAcceptsRow(a0,*a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterAcceptsRow, doc_QSortFilterProxyModel_filterAcceptsRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterAcceptsColumn, "filterAcceptsColumn(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterAcceptsColumn(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterAcceptsColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::filterAcceptsColumn(a0,*a1) : sipCpp->filterAcceptsColumn(a0,*a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterAcceptsColumn, doc_QSortFilterProxyModel_filterAcceptsColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_lessThan, "lessThan(self, QModelIndex, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_lessThan(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_lessThan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::lessThan(*a0,*a1) : sipCpp->lessThan(*a0,*a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_lessThan, doc_QSortFilterProxyModel_lessThan);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_index, doc_QSortFilterProxyModel_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_parent, "parent(self, QModelIndex) -> QModelIndex\n"
"parent(self) -> QObject");

extern "C" {static PyObject *meth_QSortFilterProxyModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::parent(*a0) : sipCpp->parent(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_parent, doc_QSortFilterProxyModel_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::rowCount(*a0) : sipCpp->rowCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_rowCount, doc_QSortFilterProxyModel_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::columnCount(*a0) : sipCpp->columnCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_columnCount, doc_QSortFilterProxyModel_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_hasChildren, doc_QSortFilterProxyModel_hasChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QSortFilterProxyModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::data(*a0,a1) : sipCpp->data(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_data, doc_QSortFilterProxyModel_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|i", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setData, doc_QSortFilterProxyModel_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QSortFilterProxyModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiE|i", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_headerData, doc_QSortFilterProxyModel_headerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiEJ1|i", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant, &a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setHeaderData, doc_QSortFilterProxyModel_setHeaderData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mimeData, "mimeData(self, Iterable[QModelIndex]) -> QMimeData");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
             ::QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mimeData, doc_QSortFilterProxyModel_mimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_dropMimeData, doc_QSortFilterProxyModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_insertRows, doc_QSortFilterProxyModel_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_insertColumns, doc_QSortFilterProxyModel_insertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_removeRows, doc_QSortFilterProxyModel_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_removeColumns, "removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_removeColumns, doc_QSortFilterProxyModel_removeColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_fetchMore, "fetchMore(self, QModelIndex)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_fetchMore, doc_QSortFilterProxyModel_fetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_canFetchMore, "canFetchMore(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_canFetchMore(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_canFetchMore, doc_QSortFilterProxyModel_canFetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QSortFilterProxyModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_flags, doc_QSortFilterProxyModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_buddy, "buddy(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::buddy(*a0) : sipCpp->buddy(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_buddy, doc_QSortFilterProxyModel_buddy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_span, "span(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QSortFilterProxyModel_span(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::span(*a0) : sipCpp->span(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_span, doc_QSortFilterProxyModel_span);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_match, "match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QSortFilterProxyModel_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = 1;
         ::Qt::MatchFlags a4def = Qt::MatchStartsWith|Qt::MatchWrap;
         ::Qt::MatchFlags* a4 = &a4def;
        int a4State = 0;
        const  ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hits,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1|iJ1", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant, &a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_match, doc_QSortFilterProxyModel_match);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QSortFilterProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sort, doc_QSortFilterProxyModel_sort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sortCaseSensitivity, "sortCaseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sortCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sortCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->sortCaseSensitivity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CaseSensitivity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sortCaseSensitivity, doc_QSortFilterProxyModel_sortCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setSortCaseSensitivity, "setSortCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setSortCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setSortCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CaseSensitivity a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setSortCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setSortCaseSensitivity, doc_QSortFilterProxyModel_setSortCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_dynamicSortFilter, "dynamicSortFilter(self) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_dynamicSortFilter(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_dynamicSortFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dynamicSortFilter();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_dynamicSortFilter, doc_QSortFilterProxyModel_dynamicSortFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setDynamicSortFilter, "setDynamicSortFilter(self, bool)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setDynamicSortFilter(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setDynamicSortFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setDynamicSortFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setDynamicSortFilter, doc_QSortFilterProxyModel_setDynamicSortFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sortRole, "sortRole(self) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sortRole(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortRole();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sortRole, doc_QSortFilterProxyModel_sortRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setSortRole, "setSortRole(self, int)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setSortRole(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setSortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setSortRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setSortRole, doc_QSortFilterProxyModel_setSortRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sortColumn, "sortColumn(self) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sortColumn(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sortColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sortColumn();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sortColumn, doc_QSortFilterProxyModel_sortColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sortOrder, "sortOrder(self) -> Qt.SortOrder");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sortOrder(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sortOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::Qt::SortOrder sipRes;

            sipRes = sipCpp->sortOrder();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_SortOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sortOrder, doc_QSortFilterProxyModel_sortOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_filterRole, "filterRole(self) -> int");

extern "C" {static PyObject *meth_QSortFilterProxyModel_filterRole(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_filterRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->filterRole();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_filterRole, doc_QSortFilterProxyModel_filterRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setFilterRole, "setFilterRole(self, int)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setFilterRole(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setFilterRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setFilterRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setFilterRole, doc_QSortFilterProxyModel_setFilterRole);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_mimeTypes, "mimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QSortFilterProxyModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_mimeTypes, doc_QSortFilterProxyModel_mimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QSortFilterProxyModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_supportedDropActions, doc_QSortFilterProxyModel_supportedDropActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_isSortLocaleAware, "isSortLocaleAware(self) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_isSortLocaleAware(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_isSortLocaleAware(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortLocaleAware();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_isSortLocaleAware, doc_QSortFilterProxyModel_isSortLocaleAware);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setSortLocaleAware, "setSortLocaleAware(self, bool)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setSortLocaleAware(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setSortLocaleAware(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setSortLocaleAware(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setSortLocaleAware, doc_QSortFilterProxyModel_setSortLocaleAware);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSortFilterProxyModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QSortFilterProxyModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_sibling, doc_QSortFilterProxyModel_sibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_isRecursiveFilteringEnabled, "isRecursiveFilteringEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSortFilterProxyModel_isRecursiveFilteringEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_isRecursiveFilteringEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRecursiveFilteringEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_isRecursiveFilteringEnabled, doc_QSortFilterProxyModel_isRecursiveFilteringEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_setRecursiveFilteringEnabled, "setRecursiveFilteringEnabled(self, bool)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_setRecursiveFilteringEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_setRecursiveFilteringEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp, &a0))
        {
            sipCpp->setRecursiveFilteringEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_setRecursiveFilteringEnabled, doc_QSortFilterProxyModel_setRecursiveFilteringEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSortFilterProxyModel_invalidateFilter, "invalidateFilter(self)");

extern "C" {static PyObject *meth_QSortFilterProxyModel_invalidateFilter(PyObject *, PyObject *);}
static PyObject *meth_QSortFilterProxyModel_invalidateFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSortFilterProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSortFilterProxyModel, &sipCpp))
        {
            sipCpp->invalidateFilter();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSortFilterProxyModel, sipName_invalidateFilter, doc_QSortFilterProxyModel_invalidateFilter);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSortFilterProxyModel(void *, const sipTypeDef *);}
static void *cast_QSortFilterProxyModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSortFilterProxyModel *sipCpp = reinterpret_cast< ::QSortFilterProxyModel *>(sipCppV);

    if (targetType == sipType_QAbstractProxyModel)
        return static_cast< ::QAbstractProxyModel *>(sipCpp);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSortFilterProxyModel(void *, int);}
static void release_QSortFilterProxyModel(void *sipCppV, int)
{
     ::QSortFilterProxyModel *sipCpp = reinterpret_cast< ::QSortFilterProxyModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSortFilterProxyModel(sipSimpleWrapper *);}
static void dealloc_QSortFilterProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSortFilterProxyModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSortFilterProxyModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSortFilterProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSortFilterProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSortFilterProxyModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSortFilterProxyModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSortFilterProxyModel[] = {{12, 255, 1}};


static PyMethodDef methods_QSortFilterProxyModel[] = {
    {SIP_MLNAME_CAST(sipName_buddy), meth_QSortFilterProxyModel_buddy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_buddy)},
    {SIP_MLNAME_CAST(sipName_canFetchMore), meth_QSortFilterProxyModel_canFetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_canFetchMore)},
    {SIP_MLNAME_CAST(sipName_columnCount), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_columnCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_data), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QSortFilterProxyModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_dynamicSortFilter), meth_QSortFilterProxyModel_dynamicSortFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_dynamicSortFilter)},
    {SIP_MLNAME_CAST(sipName_fetchMore), meth_QSortFilterProxyModel_fetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_fetchMore)},
    {SIP_MLNAME_CAST(sipName_filterAcceptsColumn), meth_QSortFilterProxyModel_filterAcceptsColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_filterAcceptsColumn)},
    {SIP_MLNAME_CAST(sipName_filterAcceptsRow), meth_QSortFilterProxyModel_filterAcceptsRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_filterAcceptsRow)},
    {SIP_MLNAME_CAST(sipName_filterCaseSensitivity), meth_QSortFilterProxyModel_filterCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_filterCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_filterKeyColumn), meth_QSortFilterProxyModel_filterKeyColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_filterKeyColumn)},
    {SIP_MLNAME_CAST(sipName_filterRegExp), meth_QSortFilterProxyModel_filterRegExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_filterRegExp)},
    {SIP_MLNAME_CAST(sipName_filterRegularExpression), meth_QSortFilterProxyModel_filterRegularExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_filterRegularExpression)},
    {SIP_MLNAME_CAST(sipName_filterRole), meth_QSortFilterProxyModel_filterRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_filterRole)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QSortFilterProxyModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_hasChildren), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_headerData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_headerData)},
    {SIP_MLNAME_CAST(sipName_index), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_index), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_index)},
    {SIP_MLNAME_CAST(sipName_insertColumns), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_insertColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRows), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_insertRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QSortFilterProxyModel_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_invalidate)},
    {SIP_MLNAME_CAST(sipName_invalidateFilter), meth_QSortFilterProxyModel_invalidateFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_invalidateFilter)},
    {SIP_MLNAME_CAST(sipName_isRecursiveFilteringEnabled), meth_QSortFilterProxyModel_isRecursiveFilteringEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_isRecursiveFilteringEnabled)},
    {SIP_MLNAME_CAST(sipName_isSortLocaleAware), meth_QSortFilterProxyModel_isSortLocaleAware, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_isSortLocaleAware)},
    {SIP_MLNAME_CAST(sipName_lessThan), meth_QSortFilterProxyModel_lessThan, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_lessThan)},
    {SIP_MLNAME_CAST(sipName_mapFromSource), meth_QSortFilterProxyModel_mapFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_mapFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionFromSource), meth_QSortFilterProxyModel_mapSelectionFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_mapSelectionFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionToSource), meth_QSortFilterProxyModel_mapSelectionToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_mapSelectionToSource)},
    {SIP_MLNAME_CAST(sipName_mapToSource), meth_QSortFilterProxyModel_mapToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_mapToSource)},
    {SIP_MLNAME_CAST(sipName_match), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_match), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_match)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QSortFilterProxyModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QSortFilterProxyModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QSortFilterProxyModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_parent)},
    {SIP_MLNAME_CAST(sipName_removeColumns), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_removeColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_removeRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_rowCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setData), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_setData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setData)},
    {SIP_MLNAME_CAST(sipName_setDynamicSortFilter), meth_QSortFilterProxyModel_setDynamicSortFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setDynamicSortFilter)},
    {SIP_MLNAME_CAST(sipName_setFilterCaseSensitivity), meth_QSortFilterProxyModel_setFilterCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setFilterCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_setFilterFixedString), meth_QSortFilterProxyModel_setFilterFixedString, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setFilterFixedString)},
    {SIP_MLNAME_CAST(sipName_setFilterKeyColumn), meth_QSortFilterProxyModel_setFilterKeyColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setFilterKeyColumn)},
    {SIP_MLNAME_CAST(sipName_setFilterRegExp), meth_QSortFilterProxyModel_setFilterRegExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setFilterRegExp)},
    {SIP_MLNAME_CAST(sipName_setFilterRegularExpression), meth_QSortFilterProxyModel_setFilterRegularExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setFilterRegularExpression)},
    {SIP_MLNAME_CAST(sipName_setFilterRole), meth_QSortFilterProxyModel_setFilterRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setFilterRole)},
    {SIP_MLNAME_CAST(sipName_setFilterWildcard), meth_QSortFilterProxyModel_setFilterWildcard, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setFilterWildcard)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_setHeaderData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setRecursiveFilteringEnabled), meth_QSortFilterProxyModel_setRecursiveFilteringEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setRecursiveFilteringEnabled)},
    {SIP_MLNAME_CAST(sipName_setSortCaseSensitivity), meth_QSortFilterProxyModel_setSortCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setSortCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_setSortLocaleAware), meth_QSortFilterProxyModel_setSortLocaleAware, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setSortLocaleAware)},
    {SIP_MLNAME_CAST(sipName_setSortRole), meth_QSortFilterProxyModel_setSortRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setSortRole)},
    {SIP_MLNAME_CAST(sipName_setSourceModel), meth_QSortFilterProxyModel_setSourceModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_setSourceModel)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QSortFilterProxyModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_sibling)},
    {SIP_MLNAME_CAST(sipName_sort), SIP_MLMETH_CAST(meth_QSortFilterProxyModel_sort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_sort)},
    {SIP_MLNAME_CAST(sipName_sortCaseSensitivity), meth_QSortFilterProxyModel_sortCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_sortCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_sortColumn), meth_QSortFilterProxyModel_sortColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_sortColumn)},
    {SIP_MLNAME_CAST(sipName_sortOrder), meth_QSortFilterProxyModel_sortOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_sortOrder)},
    {SIP_MLNAME_CAST(sipName_sortRole), meth_QSortFilterProxyModel_sortRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_sortRole)},
    {SIP_MLNAME_CAST(sipName_span), meth_QSortFilterProxyModel_span, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_span)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QSortFilterProxyModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QSortFilterProxyModel_supportedDropActions)}
};

PyDoc_STRVAR(doc_QSortFilterProxyModel, "\1QSortFilterProxyModel(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QSortFilterProxyModel = {
    & ::QSortFilterProxyModel::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSortFilterProxyModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSortFilterProxyModel,
        {SIP_NULLPTR},
        &plugin_QSortFilterProxyModel
    },
    {
        sipNameNr_QSortFilterProxyModel,
        {0, 0, 1},
        59, methods_QSortFilterProxyModel,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSortFilterProxyModel,
    -1,
    -1,
    supers_QSortFilterProxyModel,
    SIP_NULLPTR,
    init_type_QSortFilterProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSortFilterProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSortFilterProxyModel,
    cast_QSortFilterProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsocketnotifier.sip"
#include <qsocketnotifier.h>
#line 53687 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 53691 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 53694 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53697 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 53700 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53703 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53706 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 53709 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 53712 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 53715 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 53718 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 53721 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 53724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 53727 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 53730 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 53733 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 53736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 53739 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQSocketNotifier : public  ::QSocketNotifier
{
public:
    sipQSocketNotifier( ::qintptr, ::QSocketNotifier::Type, ::QObject*);
    virtual ~sipQSocketNotifier();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSocketNotifier(const sipQSocketNotifier &);
    sipQSocketNotifier &operator = (const sipQSocketNotifier &);

    char sipPyMethods[7];
};

sipQSocketNotifier::sipQSocketNotifier( ::qintptr a0, ::QSocketNotifier::Type a1, ::QObject*a2):  ::QSocketNotifier(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSocketNotifier::~sipQSocketNotifier()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSocketNotifier::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSocketNotifier);

    return  ::QSocketNotifier::metaObject();
}

int sipQSocketNotifier::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSocketNotifier::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSocketNotifier,_c,_id,_a);

    return _id;
}

void *sipQSocketNotifier::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSocketNotifier, _clname, &sipCpp) ? sipCpp :  ::QSocketNotifier::qt_metacast(_clname));
}

bool sipQSocketNotifier::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSocketNotifier::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSocketNotifier::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSocketNotifier::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSocketNotifier::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSocketNotifier::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSocketNotifier::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSocketNotifier::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSocketNotifier::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSocketNotifier::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSocketNotifier::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSocketNotifier::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSocketNotifier::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSocketNotifier::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSocketNotifier_socket, "socket(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QSocketNotifier_socket(PyObject *, PyObject *);}
static PyObject *meth_QSocketNotifier_socket(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSocketNotifier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSocketNotifier, &sipCpp))
        {
             ::qintptr*sipRes;

            sipRes = new  ::qintptr(sipCpp->socket());

            return sipConvertFromNewType(sipRes,sipType_qintptr,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSocketNotifier, sipName_socket, doc_QSocketNotifier_socket);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSocketNotifier_type, "type(self) -> QSocketNotifier.Type");

extern "C" {static PyObject *meth_QSocketNotifier_type(PyObject *, PyObject *);}
static PyObject *meth_QSocketNotifier_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSocketNotifier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSocketNotifier, &sipCpp))
        {
             ::QSocketNotifier::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSocketNotifier_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSocketNotifier, sipName_type, doc_QSocketNotifier_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSocketNotifier_isEnabled, "isEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSocketNotifier_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSocketNotifier_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSocketNotifier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSocketNotifier, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSocketNotifier, sipName_isEnabled, doc_QSocketNotifier_isEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSocketNotifier_setEnabled, "setEnabled(self, bool)");

extern "C" {static PyObject *meth_QSocketNotifier_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSocketNotifier_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSocketNotifier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSocketNotifier, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSocketNotifier, sipName_setEnabled, doc_QSocketNotifier_setEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSocketNotifier_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSocketNotifier_event(PyObject *, PyObject *);}
static PyObject *meth_QSocketNotifier_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QSocketNotifier *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSocketNotifier, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSocketNotifier::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSocketNotifier, sipName_event, doc_QSocketNotifier_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSocketNotifier(void *, const sipTypeDef *);}
static void *cast_QSocketNotifier(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSocketNotifier *sipCpp = reinterpret_cast< ::QSocketNotifier *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSocketNotifier(void *, int);}
static void release_QSocketNotifier(void *sipCppV, int)
{
     ::QSocketNotifier *sipCpp = reinterpret_cast< ::QSocketNotifier *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSocketNotifier(sipSimpleWrapper *);}
static void dealloc_QSocketNotifier(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSocketNotifier *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSocketNotifier(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSocketNotifier(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSocketNotifier(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSocketNotifier *sipCpp = SIP_NULLPTR;

    {
         ::qintptr* a0;
        int a0State = 0;
         ::QSocketNotifier::Type a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1E|JH", sipType_qintptr,&a0, &a0State, sipType_QSocketNotifier_Type, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQSocketNotifier(*a0,a1,a2);
            sipReleaseType(a0,sipType_qintptr,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSocketNotifier[] = {{183, 255, 1}};


static PyMethodDef methods_QSocketNotifier[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QSocketNotifier_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSocketNotifier_event)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QSocketNotifier_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSocketNotifier_isEnabled)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QSocketNotifier_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSocketNotifier_setEnabled)},
    {SIP_MLNAME_CAST(sipName_socket), meth_QSocketNotifier_socket, METH_VARARGS, SIP_MLDOC_CAST(doc_QSocketNotifier_socket)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSocketNotifier_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSocketNotifier_type)}
};

static sipEnumMemberDef enummembers_QSocketNotifier[] = {
    {sipName_Exception, static_cast<int>( ::QSocketNotifier::Exception), 240},
    {sipName_Read, static_cast<int>( ::QSocketNotifier::Read), 240},
    {sipName_Write, static_cast<int>( ::QSocketNotifier::Write), 240},
};

PyDoc_STRVAR(doc_QSocketNotifier, "\1QSocketNotifier(sip.voidptr, QSocketNotifier.Type, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSocketNotifier[] = {
    {"activated(int)", "\1activated(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QSocketNotifier = {
    & ::QSocketNotifier::staticMetaObject,
    0,
    signals_QSocketNotifier,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSocketNotifier = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSocketNotifier,
        {SIP_NULLPTR},
        &plugin_QSocketNotifier
    },
    {
        sipNameNr_QSocketNotifier,
        {0, 0, 1},
        5, methods_QSocketNotifier,
        3, enummembers_QSocketNotifier,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSocketNotifier,
    -1,
    -1,
    supers_QSocketNotifier,
    SIP_NULLPTR,
    init_type_QSocketNotifier,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSocketNotifier,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSocketNotifier,
    cast_QSocketNotifier,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 97 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 54232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 54236 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54239 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QSizeF_transpose, "transpose(self)");

extern "C" {static PyObject *meth_QSizeF_transpose(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_transpose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSizeF, &sipCpp))
        {
            sipCpp->transpose();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_transpose, doc_QSizeF_transpose);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_scale, "scale(self, QSizeF, Qt.AspectRatioMode)\n"
"scale(self, float, float, Qt.AspectRatioMode)");

extern "C" {static PyObject *meth_QSizeF_scale(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
         ::Qt::AspectRatioMode a1;
         ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QSizeF, &sipCpp, sipType_QSizeF, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
            sipCpp->scale(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::Qt::AspectRatioMode a2;
         ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BddE", &sipSelf, sipType_QSizeF, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2))
        {
            sipCpp->scale(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_scale, doc_QSizeF_scale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QSizeF_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSizeF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_isNull, doc_QSizeF_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QSizeF_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSizeF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_isEmpty, doc_QSizeF_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSizeF_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSizeF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_isValid, doc_QSizeF_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_width, "width(self) -> float");

extern "C" {static PyObject *meth_QSizeF_width(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSizeF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_width, doc_QSizeF_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_height, "height(self) -> float");

extern "C" {static PyObject *meth_QSizeF_height(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSizeF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_height, doc_QSizeF_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QSizeF_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QSizeF, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_setWidth, doc_QSizeF_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_setHeight, "setHeight(self, float)");

extern "C" {static PyObject *meth_QSizeF_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QSizeF, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_setHeight, doc_QSizeF_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_expandedTo, "expandedTo(self, QSizeF) -> QSizeF");

extern "C" {static PyObject *meth_QSizeF_expandedTo(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_expandedTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSizeF, &sipCpp, sipType_QSizeF, &a0))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->expandedTo(*a0));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_expandedTo, doc_QSizeF_expandedTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_boundedTo, "boundedTo(self, QSizeF) -> QSizeF");

extern "C" {static PyObject *meth_QSizeF_boundedTo(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_boundedTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSizeF, &sipCpp, sipType_QSizeF, &a0))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->boundedTo(*a0));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_boundedTo, doc_QSizeF_boundedTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_toSize, "toSize(self) -> QSize");

extern "C" {static PyObject *meth_QSizeF_toSize(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_toSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSizeF, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->toSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_toSize, doc_QSizeF_toSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_scaled, "scaled(self, QSizeF, Qt.AspectRatioMode) -> QSizeF\n"
"scaled(self, float, float, Qt.AspectRatioMode) -> QSizeF");

extern "C" {static PyObject *meth_QSizeF_scaled(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_scaled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
         ::Qt::AspectRatioMode a1;
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QSizeF, &sipCpp, sipType_QSizeF, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->scaled(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::Qt::AspectRatioMode a2;
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BddE", &sipSelf, sipType_QSizeF, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->scaled(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_scaled, doc_QSizeF_scaled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSizeF_transposed, "transposed(self) -> QSizeF");

extern "C" {static PyObject *meth_QSizeF_transposed(PyObject *, PyObject *);}
static PyObject *meth_QSizeF_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSizeF, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSizeF, sipName_transposed, doc_QSizeF_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QSizeF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSizeF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSizeF, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QSizeF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSizeF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSizeF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSizeF, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QSizeF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSizeF___add__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
        const  ::QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QSizeF, &a0, sipType_QSizeF, &a1))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSizeF___sub__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
        const  ::QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QSizeF, &a0, sipType_QSizeF, &a1))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSizeF___mul__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QSizeF, &a0, &a1))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
        const  ::QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QSizeF, &a1))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSizeF___div__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QSizeF, &a0, &a1))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSizeF___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSizeF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSizeF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QSizeF::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSizeF___imul__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSizeF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSizeF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QSizeF::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSizeF___isub__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSizeF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSizeF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSizeF, &a0))
        {
            sipCpp-> ::QSizeF::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSizeF___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QSizeF___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSizeF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSizeF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSizeF, &a0))
        {
            sipCpp-> ::QSizeF::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QSizeF___bool__(PyObject *);}
static int slot_QSizeF___bool__(PyObject *sipSelf)
{
     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSizeF));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
        sipRes = sipCpp->isValid();
#line 55038 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSizeF___repr__(PyObject *);}
static PyObject *slot_QSizeF___repr__(PyObject *sipSelf)
{
     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSizeF));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QSizeF()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QSizeF()");
        #endif
        }
        else
        {
            PyObject *w = PyFloat_FromDouble(sipCpp->width());
            PyObject *h = PyFloat_FromDouble(sipCpp->height());
        
            if (w && h)
            {
        #if PY_MAJOR_VERSION >= 3
                sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QSizeF(%R, %R)", w, h);
        #else
                sipRes = PyString_FromString("PyQt5.QtCore.QSizeF(");
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(w));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(h));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
            }
        
            Py_XDECREF(w);
            Py_XDECREF(h);
        }
#line 55091 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSizeF(void *, int);}
static void release_QSizeF(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSizeF *>(sipCppV);
}


extern "C" {static PyObject *pickle_QSizeF(void *);}
static PyObject *pickle_QSizeF(void *sipCppV)
{
     ::QSizeF *sipCpp = reinterpret_cast< ::QSizeF *>(sipCppV);
    PyObject *sipRes;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
    sipRes = Py_BuildValue((char *)"dd", sipCpp->width(), sipCpp->height());
#line 55117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QSizeF(void *, SIP_SSIZE_T, void *);}
static void assign_QSizeF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSizeF *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSizeF *>(sipSrc);
}


extern "C" {static void *array_QSizeF(SIP_SSIZE_T);}
static void *array_QSizeF(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSizeF[sipNrElem];
}


extern "C" {static void *copy_QSizeF(const void *, SIP_SSIZE_T);}
static void *copy_QSizeF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSizeF(reinterpret_cast<const  ::QSizeF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSizeF(sipSimpleWrapper *);}
static void dealloc_QSizeF(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSizeF(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSizeF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSizeF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSizeF *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSizeF();

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSize, &a0))
        {
            sipCpp = new  ::QSizeF(*a0);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dd", &a0, &a1))
        {
            sipCpp = new  ::QSizeF(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QSizeF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSizeF, &a0))
        {
            sipCpp = new  ::QSizeF(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSizeF[] = {
    {(void *)slot_QSizeF___eq__, eq_slot},
    {(void *)slot_QSizeF___ne__, ne_slot},
    {(void *)slot_QSizeF___add__, add_slot},
    {(void *)slot_QSizeF___sub__, sub_slot},
    {(void *)slot_QSizeF___mul__, mul_slot},
    {(void *)slot_QSizeF___div__, div_slot},
    {(void *)slot_QSizeF___idiv__, idiv_slot},
    {(void *)slot_QSizeF___imul__, imul_slot},
    {(void *)slot_QSizeF___isub__, isub_slot},
    {(void *)slot_QSizeF___iadd__, iadd_slot},
    {(void *)slot_QSizeF___bool__, bool_slot},
    {(void *)slot_QSizeF___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSizeF[] = {
    {SIP_MLNAME_CAST(sipName_boundedTo), meth_QSizeF_boundedTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_boundedTo)},
    {SIP_MLNAME_CAST(sipName_expandedTo), meth_QSizeF_expandedTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_expandedTo)},
    {SIP_MLNAME_CAST(sipName_height), meth_QSizeF_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_height)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QSizeF_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSizeF_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSizeF_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_isValid)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QSizeF_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_scale)},
    {SIP_MLNAME_CAST(sipName_scaled), meth_QSizeF_scaled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_scaled)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QSizeF_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_setHeight)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QSizeF_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_setWidth)},
    {SIP_MLNAME_CAST(sipName_toSize), meth_QSizeF_toSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_toSize)},
    {SIP_MLNAME_CAST(sipName_transpose), meth_QSizeF_transpose, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_transpose)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QSizeF_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_transposed)},
    {SIP_MLNAME_CAST(sipName_width), meth_QSizeF_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QSizeF_width)}
};

PyDoc_STRVAR(doc_QSizeF, "\1QSizeF()\n"
"QSizeF(QSize)\n"
"QSizeF(float, float)\n"
"QSizeF(QSizeF)");


static pyqt5ClassPluginDef plugin_QSizeF = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSizeF = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSizeF,
        {SIP_NULLPTR},
        &plugin_QSizeF
    },
    {
        sipNameNr_QSizeF,
        {0, 0, 1},
        14, methods_QSizeF,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSizeF,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSizeF,
    init_type_QSizeF,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSizeF,
    assign_QSizeF,
    array_QSizeF,
    copy_QSizeF,
    release_QSizeF,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QSizeF,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 55310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QSize_transpose, "transpose(self)");

extern "C" {static PyObject *meth_QSize_transpose(PyObject *, PyObject *);}
static PyObject *meth_QSize_transpose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            sipCpp->transpose();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_transpose, doc_QSize_transpose);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_scale, "scale(self, QSize, Qt.AspectRatioMode)\n"
"scale(self, int, int, Qt.AspectRatioMode)");

extern "C" {static PyObject *meth_QSize_scale(PyObject *, PyObject *);}
static PyObject *meth_QSize_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::Qt::AspectRatioMode a1;
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QSize, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
            sipCpp->scale(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::Qt::AspectRatioMode a2;
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiE", &sipSelf, sipType_QSize, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2))
        {
            sipCpp->scale(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_scale, doc_QSize_scale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QSize_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSize_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_isNull, doc_QSize_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QSize_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QSize_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_isEmpty, doc_QSize_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSize_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSize_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_isValid, doc_QSize_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_width, "width(self) -> int");

extern "C" {static PyObject *meth_QSize_width(PyObject *, PyObject *);}
static PyObject *meth_QSize_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_width, doc_QSize_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_height, "height(self) -> int");

extern "C" {static PyObject *meth_QSize_height(PyObject *, PyObject *);}
static PyObject *meth_QSize_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_height, doc_QSize_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_setWidth, "setWidth(self, int)");

extern "C" {static PyObject *meth_QSize_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QSize_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSize, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_setWidth, doc_QSize_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_setHeight, "setHeight(self, int)");

extern "C" {static PyObject *meth_QSize_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QSize_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSize, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_setHeight, doc_QSize_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_expandedTo, "expandedTo(self, QSize) -> QSize");

extern "C" {static PyObject *meth_QSize_expandedTo(PyObject *, PyObject *);}
static PyObject *meth_QSize_expandedTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSize, &sipCpp, sipType_QSize, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->expandedTo(*a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_expandedTo, doc_QSize_expandedTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_boundedTo, "boundedTo(self, QSize) -> QSize");

extern "C" {static PyObject *meth_QSize_boundedTo(PyObject *, PyObject *);}
static PyObject *meth_QSize_boundedTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSize, &sipCpp, sipType_QSize, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->boundedTo(*a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_boundedTo, doc_QSize_boundedTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_scaled, "scaled(self, QSize, Qt.AspectRatioMode) -> QSize\n"
"scaled(self, int, int, Qt.AspectRatioMode) -> QSize");

extern "C" {static PyObject *meth_QSize_scaled(PyObject *, PyObject *);}
static PyObject *meth_QSize_scaled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::Qt::AspectRatioMode a1;
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QSize, &sipCpp, sipType_QSize, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->scaled(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
         ::Qt::AspectRatioMode a2;
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiE", &sipSelf, sipType_QSize, &sipCpp, &a0, &a1, sipType_Qt_AspectRatioMode, &a2))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->scaled(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_scaled, doc_QSize_scaled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSize_transposed, "transposed(self) -> QSize");

extern "C" {static PyObject *meth_QSize_transposed(PyObject *, PyObject *);}
static PyObject *meth_QSize_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSize, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSize, sipName_transposed, doc_QSize_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QSize___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSize___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSize, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QSize, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSize___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSize___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSize, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QSize, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSize___add__(PyObject *,PyObject *);}
static PyObject *slot_QSize___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QSize, &a0, sipType_QSize, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSize___sub__(PyObject *,PyObject *);}
static PyObject *slot_QSize___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
        const  ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QSize, &a0, sipType_QSize, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSize___mul__(PyObject *,PyObject *);}
static PyObject *slot_QSize___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QSize, &a0, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
        const  ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QSize, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSize___div__(PyObject *,PyObject *);}
static PyObject *slot_QSize___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QSize, &a0, &a1))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QSize___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QSize___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSize)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QSize::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSize___imul__(PyObject *,PyObject *);}
static PyObject *slot_QSize___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSize)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QSize::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSize___isub__(PyObject *,PyObject *);}
static PyObject *slot_QSize___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSize)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSize, &a0))
        {
            sipCpp-> ::QSize::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QSize___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QSize___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QSize)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSize, &a0))
        {
            sipCpp-> ::QSize::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QSize___bool__(PyObject *);}
static int slot_QSize___bool__(PyObject *sipSelf)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
        sipRes = sipCpp->isValid();
#line 56085 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSize___repr__(PyObject *);}
static PyObject *slot_QSize___repr__(PyObject *sipSelf)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSize));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 40 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QSize()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QSize()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt5.QtCore.QSize(%i, %i)", sipCpp->width(), sipCpp->height());
        }
#line 56127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSize(void *, int);}
static void release_QSize(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSize *>(sipCppV);
}


extern "C" {static PyObject *pickle_QSize(void *);}
static PyObject *pickle_QSize(void *sipCppV)
{
     ::QSize *sipCpp = reinterpret_cast< ::QSize *>(sipCppV);
    PyObject *sipRes;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
    sipRes = Py_BuildValue((char *)"ii", sipCpp->width(), sipCpp->height());
#line 56153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QSize(void *, SIP_SSIZE_T, void *);}
static void assign_QSize(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QSize *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QSize *>(sipSrc);
}


extern "C" {static void *array_QSize(SIP_SSIZE_T);}
static void *array_QSize(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSize[sipNrElem];
}


extern "C" {static void *copy_QSize(const void *, SIP_SSIZE_T);}
static void *copy_QSize(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSize(reinterpret_cast<const  ::QSize *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSize(sipSimpleWrapper *);}
static void dealloc_QSize(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSize(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSize(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSize(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSize *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSize();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new  ::QSize(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QSize, &a0))
        {
            sipCpp = new  ::QSize(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSize[] = {
    {(void *)slot_QSize___eq__, eq_slot},
    {(void *)slot_QSize___ne__, ne_slot},
    {(void *)slot_QSize___add__, add_slot},
    {(void *)slot_QSize___sub__, sub_slot},
    {(void *)slot_QSize___mul__, mul_slot},
    {(void *)slot_QSize___div__, div_slot},
    {(void *)slot_QSize___idiv__, idiv_slot},
    {(void *)slot_QSize___imul__, imul_slot},
    {(void *)slot_QSize___isub__, isub_slot},
    {(void *)slot_QSize___iadd__, iadd_slot},
    {(void *)slot_QSize___bool__, bool_slot},
    {(void *)slot_QSize___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSize[] = {
    {SIP_MLNAME_CAST(sipName_boundedTo), meth_QSize_boundedTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_boundedTo)},
    {SIP_MLNAME_CAST(sipName_expandedTo), meth_QSize_expandedTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_expandedTo)},
    {SIP_MLNAME_CAST(sipName_height), meth_QSize_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_height)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QSize_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSize_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSize_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_isValid)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QSize_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_scale)},
    {SIP_MLNAME_CAST(sipName_scaled), meth_QSize_scaled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_scaled)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QSize_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_setHeight)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QSize_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_setWidth)},
    {SIP_MLNAME_CAST(sipName_transpose), meth_QSize_transpose, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_transpose)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QSize_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_transposed)},
    {SIP_MLNAME_CAST(sipName_width), meth_QSize_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QSize_width)}
};

PyDoc_STRVAR(doc_QSize, "\1QSize()\n"
"QSize(int, int)\n"
"QSize(QSize)");


static pyqt5ClassPluginDef plugin_QSize = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSize = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSize,
        {SIP_NULLPTR},
        &plugin_QSize
    },
    {
        sipNameNr_QSize,
        {0, 0, 1},
        13, methods_QSize,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSize,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QSize,
    init_type_QSize,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSize,
    assign_QSize,
    array_QSize,
    copy_QSize,
    release_QSize,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QSize,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsignaltransition.sip"
#include <qsignaltransition.h>
#line 56332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 56336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 56342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 56345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 56348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 56351 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 56354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 56357 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 56360 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 56363 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 56366 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56369 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 56372 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 56375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 56378 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 56381 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 56384 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 56390 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 56393 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 56396 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 56399 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 56402 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQSignalTransition : public  ::QSignalTransition
{
public:
    sipQSignalTransition( ::QState*);
    virtual ~sipQSignalTransition();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventTest( ::QEvent*) SIP_OVERRIDE;
    void onTransition( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSignalTransition(const sipQSignalTransition &);
    sipQSignalTransition &operator = (const sipQSignalTransition &);

    char sipPyMethods[9];
};

sipQSignalTransition::sipQSignalTransition( ::QState*a0):  ::QSignalTransition(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSignalTransition::~sipQSignalTransition()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSignalTransition::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSignalTransition);

    return  ::QSignalTransition::metaObject();
}

int sipQSignalTransition::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSignalTransition::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSignalTransition,_c,_id,_a);

    return _id;
}

void *sipQSignalTransition::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSignalTransition, _clname, &sipCpp) ? sipCpp :  ::QSignalTransition::qt_metacast(_clname));
}

void sipQSignalTransition::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSignalTransition::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSignalTransition::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSignalTransition::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSignalTransition::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSignalTransition::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSignalTransition::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSignalTransition::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSignalTransition::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSignalTransition::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSignalTransition::eventTest( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_eventTest);

    if (!sipMeth)
        return  ::QSignalTransition::eventTest(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalTransition::onTransition( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_onTransition);

    if (!sipMeth)
    {
         ::QSignalTransition::onTransition(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSignalTransition_senderObject, "senderObject(self) -> QObject");

extern "C" {static PyObject *meth_QSignalTransition_senderObject(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_senderObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSignalTransition, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->senderObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_senderObject, doc_QSignalTransition_senderObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalTransition_setSenderObject, "setSenderObject(self, QObject)");

extern "C" {static PyObject *meth_QSignalTransition_setSenderObject(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_setSenderObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject* a0;
         ::QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->setSenderObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_setSenderObject, doc_QSignalTransition_setSenderObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalTransition_signal, "signal(self) -> QByteArray");

extern "C" {static PyObject *meth_QSignalTransition_signal(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_signal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSignalTransition, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->signal());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_signal, doc_QSignalTransition_signal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalTransition_setSignal, "setSignal(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QSignalTransition_setSignal(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_setSignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setSignal(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_setSignal, doc_QSignalTransition_setSignal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalTransition_eventTest, "eventTest(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSignalTransition_eventTest(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_eventTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSignalTransition::eventTest(a0) : sipCpp->eventTest(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_eventTest, doc_QSignalTransition_eventTest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalTransition_onTransition, "onTransition(self, QEvent)");

extern "C" {static PyObject *meth_QSignalTransition_onTransition(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_onTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSignalTransition::onTransition(a0) : sipCpp->onTransition(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_onTransition, doc_QSignalTransition_onTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalTransition_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSignalTransition_event(PyObject *, PyObject *);}
static PyObject *meth_QSignalTransition_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QSignalTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSignalTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSignalTransition::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalTransition, sipName_event, doc_QSignalTransition_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSignalTransition(void *, const sipTypeDef *);}
static void *cast_QSignalTransition(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSignalTransition *sipCpp = reinterpret_cast< ::QSignalTransition *>(sipCppV);

    if (targetType == sipType_QAbstractTransition)
        return static_cast< ::QAbstractTransition *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSignalTransition(void *, int);}
static void release_QSignalTransition(void *sipCppV, int)
{
     ::QSignalTransition *sipCpp = reinterpret_cast< ::QSignalTransition *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSignalTransition(sipSimpleWrapper *);}
static void dealloc_QSignalTransition(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSignalTransition *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSignalTransition(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSignalTransition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSignalTransition(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSignalTransition *sipCpp = SIP_NULLPTR;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQSignalTransition(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        PyObject * a0;
         ::QState* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "P0|JH", &a0, sipType_QState, &a1, sipOwner))
        {
            sipErrorState sipError = sipErrorNone;

#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsignaltransition.sip"
        QObject *sender;
        QByteArray signal_signature;
        
        if ((sipError = pyqt5_get_pyqtsignal_parts(a0, &sender, signal_signature)) == sipErrorNone)
        {
            sipCpp = new sipQSignalTransition(a1);
            sipCpp->setSenderObject(sender);
            sipCpp->setSignal(signal_signature);
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 56923 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipError == sipErrorNone)
            {
                sipCpp->sipPySelf = sipSelf;

                return sipCpp;
            }

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return SIP_NULLPTR;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSignalTransition[] = {{15, 255, 1}};


static PyMethodDef methods_QSignalTransition[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QSignalTransition_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_event)},
    {SIP_MLNAME_CAST(sipName_eventTest), meth_QSignalTransition_eventTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_eventTest)},
    {SIP_MLNAME_CAST(sipName_onTransition), meth_QSignalTransition_onTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_onTransition)},
    {SIP_MLNAME_CAST(sipName_senderObject), meth_QSignalTransition_senderObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_senderObject)},
    {SIP_MLNAME_CAST(sipName_setSenderObject), meth_QSignalTransition_setSenderObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_setSenderObject)},
    {SIP_MLNAME_CAST(sipName_setSignal), meth_QSignalTransition_setSignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_setSignal)},
    {SIP_MLNAME_CAST(sipName_signal), meth_QSignalTransition_signal, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalTransition_signal)}
};

PyDoc_STRVAR(doc_QSignalTransition, "\1QSignalTransition(sourceState: QState = None)\n"
"QSignalTransition(pyqtBoundSignal, sourceState: QState = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSignalTransition[] = {
    {"signalChanged()", "\1signalChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"senderObjectChanged()", "\1senderObjectChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QSignalTransition = {
    & ::QSignalTransition::staticMetaObject,
    0,
    signals_QSignalTransition,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSignalTransition = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSignalTransition,
        {SIP_NULLPTR},
        &plugin_QSignalTransition
    },
    {
        sipNameNr_QSignalTransition,
        {0, 0, 1},
        7, methods_QSignalTransition,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSignalTransition,
    -1,
    -1,
    supers_QSignalTransition,
    SIP_NULLPTR,
    init_type_QSignalTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSignalTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSignalTransition,
    cast_QSignalTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsignalmapper.sip"
#include <qsignalmapper.h>
#line 57035 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 57039 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57042 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57045 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57048 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57051 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57054 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57057 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57060 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57063 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57066 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57069 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 57072 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57075 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 57078 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 57081 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 57084 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQSignalMapper : public  ::QSignalMapper
{
public:
    sipQSignalMapper( ::QObject*);
    virtual ~sipQSignalMapper();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSignalMapper(const sipQSignalMapper &);
    sipQSignalMapper &operator = (const sipQSignalMapper &);

    char sipPyMethods[7];
};

sipQSignalMapper::sipQSignalMapper( ::QObject*a0):  ::QSignalMapper(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSignalMapper::~sipQSignalMapper()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSignalMapper::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSignalMapper);

    return  ::QSignalMapper::metaObject();
}

int sipQSignalMapper::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSignalMapper::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSignalMapper,_c,_id,_a);

    return _id;
}

void *sipQSignalMapper::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSignalMapper, _clname, &sipCpp) ? sipCpp :  ::QSignalMapper::qt_metacast(_clname));
}

bool sipQSignalMapper::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSignalMapper::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSignalMapper::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSignalMapper::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSignalMapper::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSignalMapper::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalMapper::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSignalMapper::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalMapper::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSignalMapper::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalMapper::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSignalMapper::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSignalMapper::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSignalMapper::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSignalMapper_setMapping, "setMapping(self, QObject, int)\n"
"setMapping(self, QObject, str)\n"
"setMapping(self, QObject, QWidget)\n"
"setMapping(self, QObject, QObject)");

extern "C" {static PyObject *meth_QSignalMapper_setMapping(PyObject *, PyObject *);}
static PyObject *meth_QSignalMapper_setMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        int a1;
         ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QObject, &a0, &a1))
        {
            sipCpp->setMapping(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QObject, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setMapping(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QObject* a0;
         ::QWidget* a1;
         ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QObject, &a0, sipType_QWidget, &a1))
        {
            sipCpp->setMapping(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QObject* a0;
         ::QObject* a1;
         ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QObject, &a0, sipType_QObject, &a1))
        {
            sipCpp->setMapping(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalMapper, sipName_setMapping, doc_QSignalMapper_setMapping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalMapper_removeMappings, "removeMappings(self, QObject)");

extern "C" {static PyObject *meth_QSignalMapper_removeMappings(PyObject *, PyObject *);}
static PyObject *meth_QSignalMapper_removeMappings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->removeMappings(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalMapper, sipName_removeMappings, doc_QSignalMapper_removeMappings);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalMapper_mapping, "mapping(self, int) -> QObject\n"
"mapping(self, str) -> QObject\n"
"mapping(self, QWidget) -> QObject\n"
"mapping(self, QObject) -> QObject");

extern "C" {static PyObject *meth_QSignalMapper_mapping(PyObject *, PyObject *);}
static PyObject *meth_QSignalMapper_mapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSignalMapper, &sipCpp, &a0))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->mapping(a0);

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->mapping(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    {
         ::QWidget* a0;
        const  ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QWidget, &a0))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->mapping(a0);

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    {
         ::QObject* a0;
        const  ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QObject, &a0))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->mapping(a0);

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalMapper, sipName_mapping, doc_QSignalMapper_mapping);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalMapper_map, "map(self)\n"
"map(self, QObject)");

extern "C" {static PyObject *meth_QSignalMapper_map(PyObject *, PyObject *);}
static PyObject *meth_QSignalMapper_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSignalMapper, &sipCpp))
        {
            sipCpp->map();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QObject* a0;
         ::QSignalMapper *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSignalMapper, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->map(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalMapper, sipName_map, doc_QSignalMapper_map);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSignalMapper(void *, const sipTypeDef *);}
static void *cast_QSignalMapper(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSignalMapper *sipCpp = reinterpret_cast< ::QSignalMapper *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSignalMapper(void *, int);}
static void release_QSignalMapper(void *sipCppV, int)
{
     ::QSignalMapper *sipCpp = reinterpret_cast< ::QSignalMapper *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSignalMapper(sipSimpleWrapper *);}
static void dealloc_QSignalMapper(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSignalMapper *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSignalMapper(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSignalMapper(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSignalMapper(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSignalMapper *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSignalMapper(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSignalMapper[] = {{183, 255, 1}};


static PyMethodDef methods_QSignalMapper[] = {
    {SIP_MLNAME_CAST(sipName_map), meth_QSignalMapper_map, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalMapper_map)},
    {SIP_MLNAME_CAST(sipName_mapping), meth_QSignalMapper_mapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalMapper_mapping)},
    {SIP_MLNAME_CAST(sipName_removeMappings), meth_QSignalMapper_removeMappings, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalMapper_removeMappings)},
    {SIP_MLNAME_CAST(sipName_setMapping), meth_QSignalMapper_setMapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalMapper_setMapping)}
};

PyDoc_STRVAR(doc_QSignalMapper, "\1QSignalMapper(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSignalMapper[] = {
    {"mapped(int)", "\1mapped(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"mapped(QString)", "\1mapped(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"mapped(QWidget*)", "\1mapped(self, QWidget)", SIP_NULLPTR, SIP_NULLPTR},
    {"mapped(QObject*)", "\1mapped(self, QObject)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QSignalMapper = {
    & ::QSignalMapper::staticMetaObject,
    0,
    signals_QSignalMapper,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSignalMapper = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSignalMapper,
        {SIP_NULLPTR},
        &plugin_QSignalMapper
    },
    {
        sipNameNr_QSignalMapper,
        {0, 0, 1},
        4, methods_QSignalMapper,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSignalMapper,
    -1,
    -1,
    supers_QSignalMapper,
    SIP_NULLPTR,
    init_type_QSignalMapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSignalMapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSignalMapper,
    cast_QSignalMapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsharedmemory.sip"
#include <qsharedmemory.h>
#line 57653 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 57657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57663 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57666 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57672 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57678 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57681 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57684 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57687 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 57690 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57693 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 57696 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 57699 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 57702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQSharedMemory : public  ::QSharedMemory
{
public:
    sipQSharedMemory( ::QObject*);
    sipQSharedMemory(const  ::QString&, ::QObject*);
    virtual ~sipQSharedMemory();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSharedMemory(const sipQSharedMemory &);
    sipQSharedMemory &operator = (const sipQSharedMemory &);

    char sipPyMethods[7];
};

sipQSharedMemory::sipQSharedMemory( ::QObject*a0):  ::QSharedMemory(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSharedMemory::sipQSharedMemory(const  ::QString& a0, ::QObject*a1):  ::QSharedMemory(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSharedMemory::~sipQSharedMemory()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSharedMemory::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSharedMemory);

    return  ::QSharedMemory::metaObject();
}

int sipQSharedMemory::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSharedMemory::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSharedMemory,_c,_id,_a);

    return _id;
}

void *sipQSharedMemory::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSharedMemory, _clname, &sipCpp) ? sipCpp :  ::QSharedMemory::qt_metacast(_clname));
}

bool sipQSharedMemory::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSharedMemory::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSharedMemory::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSharedMemory::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSharedMemory::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSharedMemory::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSharedMemory::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSharedMemory::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSharedMemory::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSharedMemory::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSharedMemory::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSharedMemory::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSharedMemory::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSharedMemory::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSharedMemory_setKey, "setKey(self, str)");

extern "C" {static PyObject *meth_QSharedMemory_setKey(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_setKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSharedMemory, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setKey(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_setKey, doc_QSharedMemory_setKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_key, "key(self) -> str");

extern "C" {static PyObject *meth_QSharedMemory_key(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->key());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_key, doc_QSharedMemory_key);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_create, "create(self, int, mode: QSharedMemory.AccessMode = QSharedMemory.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QSharedMemory_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSharedMemory::AccessMode a1 = QSharedMemory::ReadWrite;
         ::QSharedMemory *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QSharedMemory, &sipCpp, &a0, sipType_QSharedMemory_AccessMode, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->create(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_create, doc_QSharedMemory_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_size, "size(self) -> int");

extern "C" {static PyObject *meth_QSharedMemory_size(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_size, doc_QSharedMemory_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_attach, "attach(self, mode: QSharedMemory.AccessMode = QSharedMemory.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QSharedMemory_attach(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_attach(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSharedMemory::AccessMode a0 = QSharedMemory::ReadWrite;
         ::QSharedMemory *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QSharedMemory, &sipCpp, sipType_QSharedMemory_AccessMode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->attach(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_attach, doc_QSharedMemory_attach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_isAttached, "isAttached(self) -> bool");

extern "C" {static PyObject *meth_QSharedMemory_isAttached(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_isAttached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAttached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_isAttached, doc_QSharedMemory_isAttached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_detach, "detach(self) -> bool");

extern "C" {static PyObject *meth_QSharedMemory_detach(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->detach();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_detach, doc_QSharedMemory_detach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_data, "data(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QSharedMemory_data(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 61 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsharedmemory.sip"
        sipRes = sipConvertFromVoidPtrAndSize(sipCpp->data(), sipCpp->size());
#line 58127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_data, doc_QSharedMemory_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_constData, "constData(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QSharedMemory_constData(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_constData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsharedmemory.sip"
        sipRes = sipConvertFromConstVoidPtrAndSize(sipCpp->constData(), sipCpp->size());
#line 58157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_constData, doc_QSharedMemory_constData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_lock, "lock(self) -> bool");

extern "C" {static PyObject *meth_QSharedMemory_lock(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_lock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->lock();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_lock, doc_QSharedMemory_lock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_unlock, "unlock(self) -> bool");

extern "C" {static PyObject *meth_QSharedMemory_unlock(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->unlock();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_unlock, doc_QSharedMemory_unlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_error, "error(self) -> QSharedMemory.SharedMemoryError");

extern "C" {static PyObject *meth_QSharedMemory_error(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
             ::QSharedMemory::SharedMemoryError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSharedMemory_SharedMemoryError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_error, doc_QSharedMemory_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QSharedMemory_errorString(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_errorString, doc_QSharedMemory_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_setNativeKey, "setNativeKey(self, str)");

extern "C" {static PyObject *meth_QSharedMemory_setNativeKey(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_setNativeKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSharedMemory, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNativeKey(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_setNativeKey, doc_QSharedMemory_setNativeKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSharedMemory_nativeKey, "nativeKey(self) -> str");

extern "C" {static PyObject *meth_QSharedMemory_nativeKey(PyObject *, PyObject *);}
static PyObject *meth_QSharedMemory_nativeKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSharedMemory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSharedMemory, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->nativeKey());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSharedMemory, sipName_nativeKey, doc_QSharedMemory_nativeKey);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSharedMemory(void *, const sipTypeDef *);}
static void *cast_QSharedMemory(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSharedMemory *sipCpp = reinterpret_cast< ::QSharedMemory *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSharedMemory(void *, int);}
static void release_QSharedMemory(void *sipCppV, int)
{
     ::QSharedMemory *sipCpp = reinterpret_cast< ::QSharedMemory *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSharedMemory(sipSimpleWrapper *);}
static void dealloc_QSharedMemory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSharedMemory *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSharedMemory(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSharedMemory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSharedMemory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSharedMemory *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSharedMemory(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQSharedMemory(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSharedMemory[] = {{183, 255, 1}};


static PyMethodDef methods_QSharedMemory[] = {
    {SIP_MLNAME_CAST(sipName_attach), SIP_MLMETH_CAST(meth_QSharedMemory_attach), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSharedMemory_attach)},
    {SIP_MLNAME_CAST(sipName_constData), meth_QSharedMemory_constData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_constData)},
    {SIP_MLNAME_CAST(sipName_create), SIP_MLMETH_CAST(meth_QSharedMemory_create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSharedMemory_create)},
    {SIP_MLNAME_CAST(sipName_data), meth_QSharedMemory_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_data)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QSharedMemory_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_detach)},
    {SIP_MLNAME_CAST(sipName_error), meth_QSharedMemory_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QSharedMemory_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_errorString)},
    {SIP_MLNAME_CAST(sipName_isAttached), meth_QSharedMemory_isAttached, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_isAttached)},
    {SIP_MLNAME_CAST(sipName_key), meth_QSharedMemory_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_key)},
    {SIP_MLNAME_CAST(sipName_lock), meth_QSharedMemory_lock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_lock)},
    {SIP_MLNAME_CAST(sipName_nativeKey), meth_QSharedMemory_nativeKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_nativeKey)},
    {SIP_MLNAME_CAST(sipName_setKey), meth_QSharedMemory_setKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_setKey)},
    {SIP_MLNAME_CAST(sipName_setNativeKey), meth_QSharedMemory_setNativeKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_setNativeKey)},
    {SIP_MLNAME_CAST(sipName_size), meth_QSharedMemory_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_size)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QSharedMemory_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSharedMemory_unlock)}
};

static sipEnumMemberDef enummembers_QSharedMemory[] = {
    {sipName_AlreadyExists, static_cast<int>( ::QSharedMemory::AlreadyExists), 233},
    {sipName_InvalidSize, static_cast<int>( ::QSharedMemory::InvalidSize), 233},
    {sipName_KeyError, static_cast<int>( ::QSharedMemory::KeyError), 233},
    {sipName_LockError, static_cast<int>( ::QSharedMemory::LockError), 233},
    {sipName_NoError, static_cast<int>( ::QSharedMemory::NoError), 233},
    {sipName_NotFound, static_cast<int>( ::QSharedMemory::NotFound), 233},
    {sipName_OutOfResources, static_cast<int>( ::QSharedMemory::OutOfResources), 233},
    {sipName_PermissionDenied, static_cast<int>( ::QSharedMemory::PermissionDenied), 233},
    {sipName_ReadOnly, static_cast<int>( ::QSharedMemory::ReadOnly), 232},
    {sipName_ReadWrite, static_cast<int>( ::QSharedMemory::ReadWrite), 232},
    {sipName_UnknownError, static_cast<int>( ::QSharedMemory::UnknownError), 233},
};

PyDoc_STRVAR(doc_QSharedMemory, "\1QSharedMemory(parent: QObject = None)\n"
"QSharedMemory(str, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QSharedMemory = {
    & ::QSharedMemory::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSharedMemory = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSharedMemory,
        {SIP_NULLPTR},
        &plugin_QSharedMemory
    },
    {
        sipNameNr_QSharedMemory,
        {0, 0, 1},
        15, methods_QSharedMemory,
        11, enummembers_QSharedMemory,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSharedMemory,
    -1,
    -1,
    supers_QSharedMemory,
    SIP_NULLPTR,
    init_type_QSharedMemory,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSharedMemory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSharedMemory,
    cast_QSharedMemory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsettings.sip"
#include <qsettings.h>
#line 58527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58531 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 58534 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58537 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 58540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 58543 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 58546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 58549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58552 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58555 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 58558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 58561 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 58564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 58570 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 58576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 58579 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 58582 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQSettings : public  ::QSettings
{
public:
    sipQSettings(const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings( ::QSettings::Scope,const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings( ::QSettings::Format, ::QSettings::Scope,const  ::QString&,const  ::QString&, ::QObject*);
    sipQSettings(const  ::QString&, ::QSettings::Format, ::QObject*);
    sipQSettings( ::QObject*);
    virtual ~sipQSettings();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSettings(const sipQSettings &);
    sipQSettings &operator = (const sipQSettings &);

    char sipPyMethods[7];
};

sipQSettings::sipQSettings(const  ::QString& a0,const  ::QString& a1, ::QObject*a2):  ::QSettings(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QSettings::Scope a0,const  ::QString& a1,const  ::QString& a2, ::QObject*a3):  ::QSettings(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QSettings::Format a0, ::QSettings::Scope a1,const  ::QString& a2,const  ::QString& a3, ::QObject*a4):  ::QSettings(a0,a1,a2,a3,a4), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(const  ::QString& a0, ::QSettings::Format a1, ::QObject*a2):  ::QSettings(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings( ::QObject*a0):  ::QSettings(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::~sipQSettings()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSettings::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSettings);

    return  ::QSettings::metaObject();
}

int sipQSettings::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSettings::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSettings,_c,_id,_a);

    return _id;
}

void *sipQSettings::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSettings, _clname, &sipCpp) ? sipCpp :  ::QSettings::qt_metacast(_clname));
}

bool sipQSettings::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSettings::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSettings::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSettings::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSettings::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSettings::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSettings::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSettings::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSettings::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSettings::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSettings_clear, "clear(self)");

extern "C" {static PyObject *meth_QSettings_clear(PyObject *, PyObject *);}
static PyObject *meth_QSettings_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_clear, doc_QSettings_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_sync, "sync(self)");

extern "C" {static PyObject *meth_QSettings_sync(PyObject *, PyObject *);}
static PyObject *meth_QSettings_sync(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->sync();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_sync, doc_QSettings_sync);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_status, "status(self) -> QSettings.Status");

extern "C" {static PyObject *meth_QSettings_status(PyObject *, PyObject *);}
static PyObject *meth_QSettings_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_status, doc_QSettings_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_beginGroup, "beginGroup(self, str)");

extern "C" {static PyObject *meth_QSettings_beginGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->beginGroup(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginGroup, doc_QSettings_beginGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_endGroup, "endGroup(self)");

extern "C" {static PyObject *meth_QSettings_endGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->endGroup();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_endGroup, doc_QSettings_endGroup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_group, "group(self) -> str");

extern "C" {static PyObject *meth_QSettings_group(PyObject *, PyObject *);}
static PyObject *meth_QSettings_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->group());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_group, doc_QSettings_group);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_beginReadArray, "beginReadArray(self, str) -> int");

extern "C" {static PyObject *meth_QSettings_beginReadArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginReadArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->beginReadArray(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginReadArray, doc_QSettings_beginReadArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_beginWriteArray, "beginWriteArray(self, str, size: int = -1)");

extern "C" {static PyObject *meth_QSettings_beginWriteArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginWriteArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
         ::QSettings *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->beginWriteArray(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginWriteArray, doc_QSettings_beginWriteArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_endArray, "endArray(self)");

extern "C" {static PyObject *meth_QSettings_endArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->endArray();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_endArray, doc_QSettings_endArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setArrayIndex, "setArrayIndex(self, int)");

extern "C" {static PyObject *meth_QSettings_setArrayIndex(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setArrayIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setArrayIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setArrayIndex, doc_QSettings_setArrayIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_allKeys, "allKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_allKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_allKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->allKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_allKeys, doc_QSettings_allKeys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_childKeys, "childKeys(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_childKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->childKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childKeys, doc_QSettings_childKeys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_childGroups, "childGroups(self) -> List[str]");

extern "C" {static PyObject *meth_QSettings_childGroups(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childGroups(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->childGroups());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childGroups, doc_QSettings_childGroups);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QSettings_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QSettings_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_isWritable, doc_QSettings_isWritable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setValue, "setValue(self, str, Any)");

extern "C" {static PyObject *meth_QSettings_setValue(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setValue(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setValue, doc_QSettings_setValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_value, "value(self, str, defaultValue: Any = None, type: type = None) -> object");

extern "C" {static PyObject *meth_QSettings_value(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_value(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant& a1def = QVariant();
        const  ::QVariant* a1 = &a1def;
        int a1State = 0;
        PyObject * a2 = 0;
        const  ::QSettings *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_defaultValue,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1P0", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, &a2))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 73 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsettings.sip"
        QVariant value;
        
        // QSettings has an internal mutex so release the GIL to avoid the possibility
        // of deadlocks.
        Py_BEGIN_ALLOW_THREADS
        value = sipCpp->value(*a0, *a1);
        Py_END_ALLOW_THREADS
        
        sipRes = pyqt5_from_qvariant_by_type(value, a2);
        
        sipIsErr = !sipRes;
#line 59272 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_value, doc_QSettings_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_remove, "remove(self, str)");

extern "C" {static PyObject *meth_QSettings_remove(PyObject *, PyObject *);}
static PyObject *meth_QSettings_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->remove(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_remove, doc_QSettings_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_contains, "contains(self, str) -> bool");

extern "C" {static PyObject *meth_QSettings_contains(PyObject *, PyObject *);}
static PyObject *meth_QSettings_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_contains, doc_QSettings_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setFallbacksEnabled, "setFallbacksEnabled(self, bool)");

extern "C" {static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setFallbacksEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setFallbacksEnabled, doc_QSettings_setFallbacksEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_fallbacksEnabled, "fallbacksEnabled(self) -> bool");

extern "C" {static PyObject *meth_QSettings_fallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fallbacksEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_fallbacksEnabled, doc_QSettings_fallbacksEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QSettings_fileName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_fileName, doc_QSettings_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setPath, "setPath(QSettings.Format, QSettings.Scope, str)");

extern "C" {static PyObject *meth_QSettings_setPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings::Format a0;
         ::QSettings::Scope a1;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "EEJ1", sipType_QSettings_Format, &a0, sipType_QSettings_Scope, &a1, sipType_QString,&a2, &a2State))
        {
             ::QSettings::setPath(a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setPath, doc_QSettings_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_format, "format(self) -> QSettings.Format");

extern "C" {static PyObject *meth_QSettings_format(PyObject *, PyObject *);}
static PyObject *meth_QSettings_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Format sipRes;

            sipRes = sipCpp->format();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_format, doc_QSettings_format);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_scope, "scope(self) -> QSettings.Scope");

extern "C" {static PyObject *meth_QSettings_scope(PyObject *, PyObject *);}
static PyObject *meth_QSettings_scope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QSettings::Scope sipRes;

            sipRes = sipCpp->scope();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Scope);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_scope, doc_QSettings_scope);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_organizationName, "organizationName(self) -> str");

extern "C" {static PyObject *meth_QSettings_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_organizationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->organizationName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_organizationName, doc_QSettings_organizationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_applicationName, "applicationName(self) -> str");

extern "C" {static PyObject *meth_QSettings_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_applicationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->applicationName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_applicationName, doc_QSettings_applicationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setDefaultFormat, "setDefaultFormat(QSettings.Format)");

extern "C" {static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSettings::Format a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QSettings_Format, &a0))
        {
             ::QSettings::setDefaultFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setDefaultFormat, doc_QSettings_setDefaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_defaultFormat, "defaultFormat() -> QSettings.Format");

extern "C" {static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QSettings::Format sipRes;

            sipRes =  ::QSettings::defaultFormat();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_defaultFormat, doc_QSettings_defaultFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setIniCodec, "setIniCodec(self, QTextCodec)\n"
"setIniCodec(self, str)");

extern "C" {static PyObject *meth_QSettings_setIniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setIniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTextCodec* a0;
        PyObject *a0Keep;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSettings, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            sipCpp->setIniCodec(a0);

            sipKeepReference(sipSelf, -3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QSettings, &sipCpp, &a0Keep, &a0))
        {
            sipCpp->setIniCodec(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setIniCodec, doc_QSettings_setIniCodec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_iniCodec, "iniCodec(self) -> QTextCodec");

extern "C" {static PyObject *meth_QSettings_iniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_iniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
             ::QTextCodec*sipRes;

            sipRes = sipCpp->iniCodec();

            return sipConvertFromType(sipRes,sipType_QTextCodec,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_iniCodec, doc_QSettings_iniCodec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_isAtomicSyncRequired, "isAtomicSyncRequired(self) -> bool");

extern "C" {static PyObject *meth_QSettings_isAtomicSyncRequired(PyObject *, PyObject *);}
static PyObject *meth_QSettings_isAtomicSyncRequired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAtomicSyncRequired();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_isAtomicSyncRequired, doc_QSettings_isAtomicSyncRequired);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_setAtomicSyncRequired, "setAtomicSyncRequired(self, bool)");

extern "C" {static PyObject *meth_QSettings_setAtomicSyncRequired(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setAtomicSyncRequired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setAtomicSyncRequired(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setAtomicSyncRequired, doc_QSettings_setAtomicSyncRequired);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSettings_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSettings_event(PyObject *, PyObject *);}
static PyObject *meth_QSettings_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSettings::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_event, doc_QSettings_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSettings(void *, const sipTypeDef *);}
static void *cast_QSettings(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSettings *sipCpp = reinterpret_cast< ::QSettings *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSettings(void *, int);}
static void release_QSettings(void *sipCppV, int)
{
     ::QSettings *sipCpp = reinterpret_cast< ::QSettings *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSettings(sipSimpleWrapper *);}
static void dealloc_QSettings(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSettings *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSettings(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSettings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSettings(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSettings *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1JH", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQSettings(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QSettings::Scope a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1|J1JH", sipType_QSettings_Scope, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQSettings(a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QSettings::Format a0;
         ::QSettings::Scope a1;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QObject* a4 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EEJ1|J1JH", sipType_QSettings_Format, &a0, sipType_QSettings_Scope, &a1, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QObject, &a4, sipOwner))
        {
            sipCpp = new sipQSettings(a0,a1,*a2,*a3,a4);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSettings::Format a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1E|JH", sipType_QString,&a0, &a0State, sipType_QSettings_Format, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQSettings(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSettings(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSettings[] = {{183, 255, 1}};


static PyMethodDef methods_QSettings[] = {
    {SIP_MLNAME_CAST(sipName_allKeys), meth_QSettings_allKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_allKeys)},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QSettings_applicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_applicationName)},
    {SIP_MLNAME_CAST(sipName_beginGroup), meth_QSettings_beginGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_beginGroup)},
    {SIP_MLNAME_CAST(sipName_beginReadArray), meth_QSettings_beginReadArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_beginReadArray)},
    {SIP_MLNAME_CAST(sipName_beginWriteArray), SIP_MLMETH_CAST(meth_QSettings_beginWriteArray), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_beginWriteArray)},
    {SIP_MLNAME_CAST(sipName_childGroups), meth_QSettings_childGroups, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_childGroups)},
    {SIP_MLNAME_CAST(sipName_childKeys), meth_QSettings_childKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_childKeys)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSettings_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QSettings_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_contains)},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QSettings_defaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_defaultFormat)},
    {SIP_MLNAME_CAST(sipName_endArray), meth_QSettings_endArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_endArray)},
    {SIP_MLNAME_CAST(sipName_endGroup), meth_QSettings_endGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_endGroup)},
    {SIP_MLNAME_CAST(sipName_event), meth_QSettings_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_event)},
    {SIP_MLNAME_CAST(sipName_fallbacksEnabled), meth_QSettings_fallbacksEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_fallbacksEnabled)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QSettings_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QSettings_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_format)},
    {SIP_MLNAME_CAST(sipName_group), meth_QSettings_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_group)},
    {SIP_MLNAME_CAST(sipName_iniCodec), meth_QSettings_iniCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_iniCodec)},
    {SIP_MLNAME_CAST(sipName_isAtomicSyncRequired), meth_QSettings_isAtomicSyncRequired, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_isAtomicSyncRequired)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QSettings_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_isWritable)},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QSettings_organizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_organizationName)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QSettings_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_remove)},
    {SIP_MLNAME_CAST(sipName_scope), meth_QSettings_scope, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_scope)},
    {SIP_MLNAME_CAST(sipName_setArrayIndex), meth_QSettings_setArrayIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setArrayIndex)},
    {SIP_MLNAME_CAST(sipName_setAtomicSyncRequired), meth_QSettings_setAtomicSyncRequired, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setAtomicSyncRequired)},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QSettings_setDefaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setDefaultFormat)},
    {SIP_MLNAME_CAST(sipName_setFallbacksEnabled), meth_QSettings_setFallbacksEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setFallbacksEnabled)},
    {SIP_MLNAME_CAST(sipName_setIniCodec), meth_QSettings_setIniCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setIniCodec)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QSettings_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setPath)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QSettings_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setValue)},
    {SIP_MLNAME_CAST(sipName_status), meth_QSettings_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_status)},
    {SIP_MLNAME_CAST(sipName_sync), meth_QSettings_sync, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_sync)},
    {SIP_MLNAME_CAST(sipName_value), SIP_MLMETH_CAST(meth_QSettings_value), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_value)}
};

static sipEnumMemberDef enummembers_QSettings[] = {
    {sipName_AccessError, static_cast<int>( ::QSettings::AccessError), 230},
    {sipName_FormatError, static_cast<int>( ::QSettings::FormatError), 230},
    {sipName_IniFormat, static_cast<int>( ::QSettings::IniFormat), 228},
    {sipName_InvalidFormat, static_cast<int>( ::QSettings::InvalidFormat), 228},
    {sipName_NativeFormat, static_cast<int>( ::QSettings::NativeFormat), 228},
    {sipName_NoError, static_cast<int>( ::QSettings::NoError), 230},
    {sipName_SystemScope, static_cast<int>( ::QSettings::SystemScope), 229},
    {sipName_UserScope, static_cast<int>( ::QSettings::UserScope), 229},
};

PyDoc_STRVAR(doc_QSettings, "\1QSettings(str, application: str = '', parent: QObject = None)\n"
"QSettings(QSettings.Scope, str, application: str = '', parent: QObject = None)\n"
"QSettings(QSettings.Format, QSettings.Scope, str, application: str = '', parent: QObject = None)\n"
"QSettings(str, QSettings.Format, parent: QObject = None)\n"
"QSettings(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QSettings = {
    & ::QSettings::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSettings = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSettings,
        {SIP_NULLPTR},
        &plugin_QSettings
    },
    {
        sipNameNr_QSettings,
        {0, 0, 1},
        33, methods_QSettings,
        8, enummembers_QSettings,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSettings,
    -1,
    -1,
    supers_QSettings,
    SIP_NULLPTR,
    init_type_QSettings,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSettings,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSettings,
    cast_QSettings,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsequentialanimationgroup.sip"
#include <qsequentialanimationgroup.h>
#line 60087 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 60091 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 60094 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpauseanimation.sip"
#include <qpauseanimation.h>
#line 60100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 60103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 60133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 60139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 60142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 60145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQSequentialAnimationGroup : public  ::QSequentialAnimationGroup
{
public:
    sipQSequentialAnimationGroup( ::QObject*);
    virtual ~sipQSequentialAnimationGroup();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSequentialAnimationGroup(const sipQSequentialAnimationGroup &);
    sipQSequentialAnimationGroup &operator = (const sipQSequentialAnimationGroup &);

    char sipPyMethods[11];
};

sipQSequentialAnimationGroup::sipQSequentialAnimationGroup( ::QObject*a0):  ::QSequentialAnimationGroup(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSequentialAnimationGroup::~sipQSequentialAnimationGroup()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSequentialAnimationGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSequentialAnimationGroup);

    return  ::QSequentialAnimationGroup::metaObject();
}

int sipQSequentialAnimationGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSequentialAnimationGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSequentialAnimationGroup,_c,_id,_a);

    return _id;
}

void *sipQSequentialAnimationGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSequentialAnimationGroup, _clname, &sipCpp) ? sipCpp :  ::QSequentialAnimationGroup::qt_metacast(_clname));
}

void sipQSequentialAnimationGroup::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_updateState);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSequentialAnimationGroup::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_updateCurrentTime);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQSequentialAnimationGroup::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_duration);

    if (!sipMeth)
        return  ::QSequentialAnimationGroup::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSequentialAnimationGroup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSequentialAnimationGroup::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSequentialAnimationGroup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSequentialAnimationGroup::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSequentialAnimationGroup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_addPause, "addPause(self, int) -> QPauseAnimation");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_addPause(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_addPause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, &a0))
        {
             ::QPauseAnimation*sipRes;

            sipRes = sipCpp->addPause(a0);

            return sipConvertFromType(sipRes,sipType_QPauseAnimation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_addPause, doc_QSequentialAnimationGroup_addPause);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_insertPause, "insertPause(self, int, int) -> QPauseAnimation");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_insertPause(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_insertPause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, &a0, &a1))
        {
             ::QPauseAnimation*sipRes;

            sipRes = sipCpp->insertPause(a0,a1);

            return sipConvertFromType(sipRes,sipType_QPauseAnimation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_insertPause, doc_QSequentialAnimationGroup_insertPause);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_currentAnimation, "currentAnimation(self) -> QAbstractAnimation");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_currentAnimation(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_currentAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp))
        {
             ::QAbstractAnimation*sipRes;

            sipRes = sipCpp->currentAnimation();

            return sipConvertFromType(sipRes,sipType_QAbstractAnimation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_currentAnimation, doc_QSequentialAnimationGroup_currentAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_duration(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::duration() : sipCpp->duration());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_duration, doc_QSequentialAnimationGroup_duration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_event(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_event, doc_QSequentialAnimationGroup_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::updateCurrentTime(a0) : sipCpp->updateCurrentTime(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_updateCurrentTime, doc_QSequentialAnimationGroup_updateCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_updateState(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::updateState(a0,a1) : sipCpp->updateState(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_updateState, doc_QSequentialAnimationGroup_updateState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_updateDirection, "updateDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_updateDirection(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_updateDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::Direction a0;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::updateDirection(a0) : sipCpp->updateDirection(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_updateDirection, doc_QSequentialAnimationGroup_updateDirection);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSequentialAnimationGroup(void *, const sipTypeDef *);}
static void *cast_QSequentialAnimationGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSequentialAnimationGroup *sipCpp = reinterpret_cast< ::QSequentialAnimationGroup *>(sipCppV);

    if (targetType == sipType_QAnimationGroup)
        return static_cast< ::QAnimationGroup *>(sipCpp);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSequentialAnimationGroup(void *, int);}
static void release_QSequentialAnimationGroup(void *sipCppV, int)
{
     ::QSequentialAnimationGroup *sipCpp = reinterpret_cast< ::QSequentialAnimationGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSequentialAnimationGroup(sipSimpleWrapper *);}
static void dealloc_QSequentialAnimationGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSequentialAnimationGroup *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSequentialAnimationGroup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSequentialAnimationGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSequentialAnimationGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSequentialAnimationGroup *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSequentialAnimationGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSequentialAnimationGroup[] = {{17, 255, 1}};


static PyMethodDef methods_QSequentialAnimationGroup[] = {
    {SIP_MLNAME_CAST(sipName_addPause), meth_QSequentialAnimationGroup_addPause, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_addPause)},
    {SIP_MLNAME_CAST(sipName_currentAnimation), meth_QSequentialAnimationGroup_currentAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_currentAnimation)},
    {SIP_MLNAME_CAST(sipName_duration), meth_QSequentialAnimationGroup_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_duration)},
    {SIP_MLNAME_CAST(sipName_event), meth_QSequentialAnimationGroup_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_event)},
    {SIP_MLNAME_CAST(sipName_insertPause), meth_QSequentialAnimationGroup_insertPause, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_insertPause)},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), meth_QSequentialAnimationGroup_updateCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_updateCurrentTime)},
    {SIP_MLNAME_CAST(sipName_updateDirection), meth_QSequentialAnimationGroup_updateDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_updateDirection)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QSequentialAnimationGroup_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_updateState)}
};

PyDoc_STRVAR(doc_QSequentialAnimationGroup, "\1QSequentialAnimationGroup(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSequentialAnimationGroup[] = {
    {"currentAnimationChanged(QAbstractAnimation*)", "\1currentAnimationChanged(self, QAbstractAnimation)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QSequentialAnimationGroup = {
    & ::QSequentialAnimationGroup::staticMetaObject,
    0,
    signals_QSequentialAnimationGroup,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSequentialAnimationGroup = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSequentialAnimationGroup,
        {SIP_NULLPTR},
        &plugin_QSequentialAnimationGroup
    },
    {
        sipNameNr_QSequentialAnimationGroup,
        {0, 0, 1},
        8, methods_QSequentialAnimationGroup,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSequentialAnimationGroup,
    -1,
    -1,
    supers_QSequentialAnimationGroup,
    SIP_NULLPTR,
    init_type_QSequentialAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSequentialAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSequentialAnimationGroup,
    cast_QSequentialAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 47 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsemaphore.sip"
#include <qsemaphore.h>
#line 60800 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsemaphore.sip"
#include <qsemaphore.h>
#line 60804 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QSemaphoreReleaser_swap, "swap(self, QSemaphoreReleaser)");

extern "C" {static PyObject *meth_QSemaphoreReleaser_swap(PyObject *, PyObject *);}
static PyObject *meth_QSemaphoreReleaser_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSemaphoreReleaser* a0;
         ::QSemaphoreReleaser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSemaphoreReleaser, &sipCpp, sipType_QSemaphoreReleaser, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSemaphoreReleaser, sipName_swap, doc_QSemaphoreReleaser_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSemaphoreReleaser_semaphore, "semaphore(self) -> QSemaphore");

extern "C" {static PyObject *meth_QSemaphoreReleaser_semaphore(PyObject *, PyObject *);}
static PyObject *meth_QSemaphoreReleaser_semaphore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSemaphoreReleaser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSemaphoreReleaser, &sipCpp))
        {
             ::QSemaphore*sipRes;

            sipRes = sipCpp->semaphore();

            return sipConvertFromType(sipRes,sipType_QSemaphore,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSemaphoreReleaser, sipName_semaphore, doc_QSemaphoreReleaser_semaphore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSemaphoreReleaser_cancel, "cancel(self) -> QSemaphore");

extern "C" {static PyObject *meth_QSemaphoreReleaser_cancel(PyObject *, PyObject *);}
static PyObject *meth_QSemaphoreReleaser_cancel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSemaphoreReleaser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSemaphoreReleaser, &sipCpp))
        {
             ::QSemaphore*sipRes;

            sipRes = sipCpp->cancel();

            return sipConvertFromType(sipRes,sipType_QSemaphore,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSemaphoreReleaser, sipName_cancel, doc_QSemaphoreReleaser_cancel);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSemaphoreReleaser(void *, int);}
static void release_QSemaphoreReleaser(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSemaphoreReleaser *>(sipCppV);
}


extern "C" {static void dealloc_QSemaphoreReleaser(sipSimpleWrapper *);}
static void dealloc_QSemaphoreReleaser(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSemaphoreReleaser(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSemaphoreReleaser(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSemaphoreReleaser(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSemaphoreReleaser *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QSemaphoreReleaser();

            return sipCpp;
        }
    }

    {
         ::QSemaphore* a0;
        int a1 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_n,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|i", sipType_QSemaphore, &a0, &a1))
        {
            sipCpp = new  ::QSemaphoreReleaser(a0,a1);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSemaphoreReleaser[] = {
    {SIP_MLNAME_CAST(sipName_cancel), meth_QSemaphoreReleaser_cancel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSemaphoreReleaser_cancel)},
    {SIP_MLNAME_CAST(sipName_semaphore), meth_QSemaphoreReleaser_semaphore, METH_VARARGS, SIP_MLDOC_CAST(doc_QSemaphoreReleaser_semaphore)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QSemaphoreReleaser_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QSemaphoreReleaser_swap)}
};

PyDoc_STRVAR(doc_QSemaphoreReleaser, "\1QSemaphoreReleaser()\n"
"QSemaphoreReleaser(QSemaphore, n: int = 1)");


static pyqt5ClassPluginDef plugin_QSemaphoreReleaser = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSemaphoreReleaser = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSemaphoreReleaser,
        {SIP_NULLPTR},
        &plugin_QSemaphoreReleaser
    },
    {
        sipNameNr_QSemaphoreReleaser,
        {0, 0, 1},
        3, methods_QSemaphoreReleaser,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSemaphoreReleaser,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSemaphoreReleaser,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSemaphoreReleaser,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSemaphoreReleaser,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsemaphore.sip"
#include <qsemaphore.h>
#line 61015 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



PyDoc_STRVAR(doc_QSemaphore_acquire, "acquire(self, n: int = 1)");

extern "C" {static PyObject *meth_QSemaphore_acquire(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSemaphore_acquire(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
         ::QSemaphore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QSemaphore, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->acquire(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSemaphore, sipName_acquire, doc_QSemaphore_acquire);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSemaphore_tryAcquire, "tryAcquire(self, n: int = 1) -> bool\n"
"tryAcquire(self, int, int) -> bool");

extern "C" {static PyObject *meth_QSemaphore_tryAcquire(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSemaphore_tryAcquire(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
         ::QSemaphore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QSemaphore, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tryAcquire(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
         ::QSemaphore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Bii", &sipSelf, sipType_QSemaphore, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tryAcquire(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSemaphore, sipName_tryAcquire, doc_QSemaphore_tryAcquire);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSemaphore_release, "release(self, n: int = 1)");

extern "C" {static PyObject *meth_QSemaphore_release(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSemaphore_release(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 1;
         ::QSemaphore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QSemaphore, &sipCpp, &a0))
        {
            sipCpp->release(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSemaphore, sipName_release, doc_QSemaphore_release);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSemaphore_available, "available(self) -> int");

extern "C" {static PyObject *meth_QSemaphore_available(PyObject *, PyObject *);}
static PyObject *meth_QSemaphore_available(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSemaphore, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->available();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSemaphore, sipName_available, doc_QSemaphore_available);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSemaphore(void *, int);}
static void release_QSemaphore(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSemaphore *>(sipCppV);
}


extern "C" {static void dealloc_QSemaphore(sipSimpleWrapper *);}
static void dealloc_QSemaphore(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSemaphore(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSemaphore(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSemaphore(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSemaphore *sipCpp = SIP_NULLPTR;

    {
        int a0 = 0;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            sipCpp = new  ::QSemaphore(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSemaphore[] = {
    {SIP_MLNAME_CAST(sipName_acquire), SIP_MLMETH_CAST(meth_QSemaphore_acquire), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSemaphore_acquire)},
    {SIP_MLNAME_CAST(sipName_available), meth_QSemaphore_available, METH_VARARGS, SIP_MLDOC_CAST(doc_QSemaphore_available)},
    {SIP_MLNAME_CAST(sipName_release), SIP_MLMETH_CAST(meth_QSemaphore_release), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSemaphore_release)},
    {SIP_MLNAME_CAST(sipName_tryAcquire), SIP_MLMETH_CAST(meth_QSemaphore_tryAcquire), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSemaphore_tryAcquire)}
};

PyDoc_STRVAR(doc_QSemaphore, "\1QSemaphore(n: int = 0)");


static pyqt5ClassPluginDef plugin_QSemaphore = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSemaphore = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSemaphore,
        {SIP_NULLPTR},
        &plugin_QSemaphore
    },
    {
        sipNameNr_QSemaphore,
        {0, 0, 1},
        4, methods_QSemaphore,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSemaphore,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSemaphore,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSemaphore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSemaphore,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsavefile.sip"
#include <qsavefile.h>
#line 61277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61281 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 61284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 61287 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 61290 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 61293 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 61296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 61299 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 61302 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 61314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 61317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 61320 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 61326 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61329 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 61332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 61335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 61338 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQSaveFile : public  ::QSaveFile
{
public:
    sipQSaveFile(const  ::QString&);
    sipQSaveFile( ::QObject*);
    sipQSaveFile(const  ::QString&, ::QObject*);
    virtual ~sipQSaveFile();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
     ::QString fileName() const SIP_OVERRIDE;
    bool resize( ::qint64) SIP_OVERRIDE;
     ::QFileDevice::Permissions permissions() const SIP_OVERRIDE;
    bool setPermissions( ::QFileDevice::Permissions) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSaveFile(const sipQSaveFile &);
    sipQSaveFile &operator = (const sipQSaveFile &);

    char sipPyMethods[26];
};

sipQSaveFile::sipQSaveFile(const  ::QString& a0):  ::QSaveFile(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSaveFile::sipQSaveFile( ::QObject*a0):  ::QSaveFile(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSaveFile::sipQSaveFile(const  ::QString& a0, ::QObject*a1):  ::QSaveFile(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSaveFile::~sipQSaveFile()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQSaveFile::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSaveFile);

    return  ::QSaveFile::metaObject();
}

int sipQSaveFile::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSaveFile::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSaveFile,_c,_id,_a);

    return _id;
}

void *sipQSaveFile::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSaveFile, _clname, &sipCpp) ? sipCpp :  ::QSaveFile::qt_metacast(_clname));
}

 ::qint64 sipQSaveFile::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QSaveFile::writeData(a0,a1);

    extern  ::qint64 sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_49(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQSaveFile::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QSaveFile::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_48(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQSaveFile::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_readData);

    if (!sipMeth)
        return  ::QSaveFile::readData(a0,a1);

    extern  ::qint64 sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSaveFile::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QSaveFile::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSaveFile::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QSaveFile::waitForReadyRead(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSaveFile::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QSaveFile::canReadLine();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQSaveFile::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QSaveFile::bytesToWrite();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQSaveFile::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QSaveFile::bytesAvailable();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSaveFile::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QSaveFile::reset();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSaveFile::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QSaveFile::atEnd();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSaveFile::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QSaveFile::seek(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQSaveFile::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QSaveFile::size();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQSaveFile::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QSaveFile::pos();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSaveFile::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QSaveFile::open(a0);

    extern bool sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSaveFile::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QSaveFile::isSequential();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSaveFile::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QSaveFile::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSaveFile::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSaveFile::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQSaveFile::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSaveFile::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSaveFile::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSaveFile::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSaveFile::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSaveFile::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSaveFile::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSaveFile::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSaveFile::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSaveFile::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QString sipQSaveFile::fileName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_fileName);

    if (!sipMeth)
        return  ::QSaveFile::fileName();

    extern  ::QString sipVH_QtCore_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_50(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSaveFile::resize( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_resize);

    if (!sipMeth)
        return  ::QSaveFile::resize(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QFileDevice::Permissions sipQSaveFile::permissions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,SIP_NULLPTR,sipName_permissions);

    if (!sipMeth)
        return  ::QSaveFile::permissions();

    extern  ::QFileDevice::Permissions sipVH_QtCore_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_51(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQSaveFile::setPermissions( ::QFileDevice::Permissions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_setPermissions);

    if (!sipMeth)
        return  ::QSaveFile::setPermissions(a0);

    extern bool sipVH_QtCore_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFileDevice::Permissions);

    return sipVH_QtCore_52(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSaveFile_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QSaveFile_fileName(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSaveFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSaveFile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QSaveFile::fileName() : sipCpp->fileName()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSaveFile, sipName_fileName, doc_QSaveFile_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSaveFile_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QSaveFile_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSaveFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSaveFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSaveFile, sipName_setFileName, doc_QSaveFile_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSaveFile_open, "open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool");

extern "C" {static PyObject *meth_QSaveFile_open(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
         ::QSaveFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSaveFile, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSaveFile::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSaveFile, sipName_open, doc_QSaveFile_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSaveFile_commit, "commit(self) -> bool");

extern "C" {static PyObject *meth_QSaveFile_commit(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_commit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSaveFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSaveFile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->commit();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSaveFile, sipName_commit, doc_QSaveFile_commit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSaveFile_cancelWriting, "cancelWriting(self)");

extern "C" {static PyObject *meth_QSaveFile_cancelWriting(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_cancelWriting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSaveFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSaveFile, &sipCpp))
        {
            sipCpp->cancelWriting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSaveFile, sipName_cancelWriting, doc_QSaveFile_cancelWriting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSaveFile_setDirectWriteFallback, "setDirectWriteFallback(self, bool)");

extern "C" {static PyObject *meth_QSaveFile_setDirectWriteFallback(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_setDirectWriteFallback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QSaveFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSaveFile, &sipCpp, &a0))
        {
            sipCpp->setDirectWriteFallback(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSaveFile, sipName_setDirectWriteFallback, doc_QSaveFile_setDirectWriteFallback);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSaveFile_directWriteFallback, "directWriteFallback(self) -> bool");

extern "C" {static PyObject *meth_QSaveFile_directWriteFallback(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_directWriteFallback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSaveFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSaveFile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->directWriteFallback();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSaveFile, sipName_directWriteFallback, doc_QSaveFile_directWriteFallback);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSaveFile_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QSaveFile_writeData(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QSaveFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QSaveFile, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSaveFile::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSaveFile, sipName_writeData, doc_QSaveFile_writeData);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QSaveFile_close(PyObject *, PyObject *);}
static PyObject *meth_QSaveFile_close(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(SIP_NULLPTR, sipName_QSaveFile, sipName_close, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSaveFile(void *, const sipTypeDef *);}
static void *cast_QSaveFile(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSaveFile *sipCpp = reinterpret_cast< ::QSaveFile *>(sipCppV);

    if (targetType == sipType_QFileDevice)
        return static_cast< ::QFileDevice *>(sipCpp);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSaveFile(void *, int);}
static void release_QSaveFile(void *sipCppV, int)
{
     ::QSaveFile *sipCpp = reinterpret_cast< ::QSaveFile *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSaveFile(sipSimpleWrapper *);}
static void dealloc_QSaveFile(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSaveFile *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSaveFile(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSaveFile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSaveFile(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSaveFile *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQSaveFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSaveFile(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQSaveFile(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSaveFile[] = {{77, 255, 1}};


static PyMethodDef methods_QSaveFile[] = {
    {SIP_MLNAME_CAST(sipName_cancelWriting), meth_QSaveFile_cancelWriting, METH_VARARGS, SIP_MLDOC_CAST(doc_QSaveFile_cancelWriting)},
    {SIP_MLNAME_CAST(sipName_close), meth_QSaveFile_close, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_commit), meth_QSaveFile_commit, METH_VARARGS, SIP_MLDOC_CAST(doc_QSaveFile_commit)},
    {SIP_MLNAME_CAST(sipName_directWriteFallback), meth_QSaveFile_directWriteFallback, METH_VARARGS, SIP_MLDOC_CAST(doc_QSaveFile_directWriteFallback)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QSaveFile_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSaveFile_fileName)},
    {SIP_MLNAME_CAST(sipName_open), meth_QSaveFile_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QSaveFile_open)},
    {SIP_MLNAME_CAST(sipName_setDirectWriteFallback), meth_QSaveFile_setDirectWriteFallback, METH_VARARGS, SIP_MLDOC_CAST(doc_QSaveFile_setDirectWriteFallback)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QSaveFile_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSaveFile_setFileName)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QSaveFile_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSaveFile_writeData)}
};

PyDoc_STRVAR(doc_QSaveFile, "\1QSaveFile(str)\n"
"QSaveFile(parent: QObject = None)\n"
"QSaveFile(str, QObject)");


static pyqt5ClassPluginDef plugin_QSaveFile = {
    & ::QSaveFile::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSaveFile = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSaveFile,
        {SIP_NULLPTR},
        &plugin_QSaveFile
    },
    {
        sipNameNr_QSaveFile,
        {0, 0, 1},
        9, methods_QSaveFile,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSaveFile,
    -1,
    -1,
    supers_QSaveFile,
    SIP_NULLPTR,
    init_type_QSaveFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSaveFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSaveFile,
    cast_QSaveFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrunnable.sip"
#include <qrunnable.h>
#line 62279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



class sipQRunnable : public  ::QRunnable
{
public:
    sipQRunnable();
    sipQRunnable(const  ::QRunnable&);
    virtual ~sipQRunnable();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void run() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRunnable(const sipQRunnable &);
    sipQRunnable &operator = (const sipQRunnable &);

    char sipPyMethods[1];
};

sipQRunnable::sipQRunnable():  ::QRunnable(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRunnable::sipQRunnable(const  ::QRunnable& a0):  ::QRunnable(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRunnable::~sipQRunnable()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQRunnable::run()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QRunnable,sipName_run);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);

    sipEndThread();
}


PyDoc_STRVAR(doc_QRunnable_run, "run(self)");

extern "C" {static PyObject *meth_QRunnable_run(PyObject *, PyObject *);}
static PyObject *meth_QRunnable_run(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QRunnable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRunnable, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QRunnable, sipName_run);
                return SIP_NULLPTR;
            }

            sipCpp->run();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRunnable, sipName_run, doc_QRunnable_run);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRunnable_autoDelete, "autoDelete(self) -> bool");

extern "C" {static PyObject *meth_QRunnable_autoDelete(PyObject *, PyObject *);}
static PyObject *meth_QRunnable_autoDelete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRunnable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRunnable, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoDelete();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRunnable, sipName_autoDelete, doc_QRunnable_autoDelete);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRunnable_setAutoDelete, "setAutoDelete(self, bool)");

extern "C" {static PyObject *meth_QRunnable_setAutoDelete(PyObject *, PyObject *);}
static PyObject *meth_QRunnable_setAutoDelete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QRunnable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QRunnable, &sipCpp, &a0))
        {
            sipCpp->setAutoDelete(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRunnable, sipName_setAutoDelete, doc_QRunnable_setAutoDelete);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRunnable(void *, int);}
static void release_QRunnable(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQRunnable *>(sipCppV);
    else
        delete reinterpret_cast< ::QRunnable *>(sipCppV);
}


extern "C" {static void dealloc_QRunnable(sipSimpleWrapper *);}
static void dealloc_QRunnable(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQRunnable *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRunnable(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QRunnable(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRunnable(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQRunnable *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQRunnable();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QRunnable* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRunnable, &a0))
        {
            sipCpp = new sipQRunnable(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QRunnable[] = {
    {SIP_MLNAME_CAST(sipName_autoDelete), meth_QRunnable_autoDelete, METH_VARARGS, SIP_MLDOC_CAST(doc_QRunnable_autoDelete)},
    {SIP_MLNAME_CAST(sipName_run), meth_QRunnable_run, METH_VARARGS, SIP_MLDOC_CAST(doc_QRunnable_run)},
    {SIP_MLNAME_CAST(sipName_setAutoDelete), meth_QRunnable_setAutoDelete, METH_VARARGS, SIP_MLDOC_CAST(doc_QRunnable_setAutoDelete)}
};

PyDoc_STRVAR(doc_QRunnable, "\1QRunnable()\n"
"QRunnable(QRunnable)");


static pyqt5ClassPluginDef plugin_QRunnable = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRunnable = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRunnable,
        {SIP_NULLPTR},
        &plugin_QRunnable
    },
    {
        sipNameNr_QRunnable,
        {0, 0, 1},
        3, methods_QRunnable,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRunnable,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QRunnable,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRunnable,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QRunnable,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qresource.sip"
#include <qresource.h>
#line 62558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62562 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 62565 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 62568 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 62571 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QResource_absoluteFilePath, "absoluteFilePath(self) -> str");

extern "C" {static PyObject *meth_QResource_absoluteFilePath(PyObject *, PyObject *);}
static PyObject *meth_QResource_absoluteFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResource, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->absoluteFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_absoluteFilePath, doc_QResource_absoluteFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_data, "data(self) -> bytes");

extern "C" {static PyObject *meth_QResource_data(PyObject *, PyObject *);}
static PyObject *meth_QResource_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResource, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qresource.sip"
        // The data may contain embedded '\0's so set the size explicitly.
        
        if (sipCpp->data())
        {
            if ((sipRes = SIPBytes_FromStringAndSize((char *)sipCpp->data(), sipCpp->size())) == NULL)
                sipIsErr = 1;
        }
        else
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
#line 62631 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_data, doc_QResource_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QResource_fileName(PyObject *, PyObject *);}
static PyObject *meth_QResource_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResource, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_fileName, doc_QResource_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_isCompressed, "isCompressed(self) -> bool");

extern "C" {static PyObject *meth_QResource_isCompressed(PyObject *, PyObject *);}
static PyObject *meth_QResource_isCompressed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResource, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCompressed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_isCompressed, doc_QResource_isCompressed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QResource_isValid(PyObject *, PyObject *);}
static PyObject *meth_QResource_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResource, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_isValid, doc_QResource_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QResource_locale(PyObject *, PyObject *);}
static PyObject *meth_QResource_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResource, &sipCpp))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_locale, doc_QResource_locale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QResource_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QResource_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QResource, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_setFileName, doc_QResource_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QResource_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QResource_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale* a0;
         ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QResource, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_setLocale, doc_QResource_setLocale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_size, "size(self) -> int");

extern "C" {static PyObject *meth_QResource_size(PyObject *, PyObject *);}
static PyObject *meth_QResource_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResource, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->size();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_size, doc_QResource_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_registerResource, "registerResource(str, mapRoot: str = '') -> bool");

extern "C" {static PyObject *meth_QResource_registerResource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QResource_registerResource(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mapRoot,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QResource::registerResource(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_registerResource, doc_QResource_registerResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_registerResourceData, "registerResourceData(bytes, mapRoot: str = '') -> bool");

extern "C" {static PyObject *meth_QResource_registerResourceData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QResource_registerResourceData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::uchar* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mapRoot,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "s|J1", &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QResource::registerResource(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_registerResourceData, doc_QResource_registerResourceData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_unregisterResource, "unregisterResource(str, mapRoot: str = '') -> bool");

extern "C" {static PyObject *meth_QResource_unregisterResource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QResource_unregisterResource(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mapRoot,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QResource::unregisterResource(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_unregisterResource, doc_QResource_unregisterResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_unregisterResourceData, "unregisterResourceData(bytes, mapRoot: str = '') -> bool");

extern "C" {static PyObject *meth_QResource_unregisterResourceData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QResource_unregisterResourceData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::uchar* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mapRoot,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "s|J1", &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QResource::unregisterResource(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_unregisterResourceData, doc_QResource_unregisterResourceData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_children, "children(self) -> List[str]");

extern "C" {static PyObject *meth_QResource_children(PyObject *, PyObject *);}
static PyObject *meth_QResource_children(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QResource, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->children());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_children, doc_QResource_children);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_isDir, "isDir(self) -> bool");

extern "C" {static PyObject *meth_QResource_isDir(PyObject *, PyObject *);}
static PyObject *meth_QResource_isDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QResource, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDir();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_isDir, doc_QResource_isDir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_isFile, "isFile(self) -> bool");

extern "C" {static PyObject *meth_QResource_isFile(PyObject *, PyObject *);}
static PyObject *meth_QResource_isFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QResource, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFile();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_isFile, doc_QResource_isFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QResource_lastModified, "lastModified(self) -> QDateTime");

extern "C" {static PyObject *meth_QResource_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QResource_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QResource, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->lastModified());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QResource, sipName_lastModified, doc_QResource_lastModified);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QResource(void *, int);}
static void release_QResource(void *sipCppV, int)
{
    delete reinterpret_cast< ::QResource *>(sipCppV);
}


extern "C" {static void dealloc_QResource(sipSimpleWrapper *);}
static void dealloc_QResource(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QResource(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QResource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QResource(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QResource *sipCpp = SIP_NULLPTR;

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;
        const  ::QLocale& a1def = QLocale();
        const  ::QLocale* a1 = &a1def;

        static const char *sipKwdList[] = {
            sipName_fileName,
            sipName_locale,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J9", sipType_QString,&a0, &a0State, sipType_QLocale, &a1))
        {
            sipCpp = new  ::QResource(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QResource[] = {
    {SIP_MLNAME_CAST(sipName_absoluteFilePath), meth_QResource_absoluteFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_absoluteFilePath)},
    {SIP_MLNAME_CAST(sipName_children), meth_QResource_children, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_children)},
    {SIP_MLNAME_CAST(sipName_data), meth_QResource_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_data)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QResource_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_fileName)},
    {SIP_MLNAME_CAST(sipName_isCompressed), meth_QResource_isCompressed, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_isCompressed)},
    {SIP_MLNAME_CAST(sipName_isDir), meth_QResource_isDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_isDir)},
    {SIP_MLNAME_CAST(sipName_isFile), meth_QResource_isFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_isFile)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QResource_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_isValid)},
    {SIP_MLNAME_CAST(sipName_lastModified), meth_QResource_lastModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_lastModified)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QResource_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_locale)},
    {SIP_MLNAME_CAST(sipName_registerResource), SIP_MLMETH_CAST(meth_QResource_registerResource), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QResource_registerResource)},
    {SIP_MLNAME_CAST(sipName_registerResourceData), SIP_MLMETH_CAST(meth_QResource_registerResourceData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QResource_registerResourceData)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QResource_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_setFileName)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QResource_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_setLocale)},
    {SIP_MLNAME_CAST(sipName_size), meth_QResource_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QResource_size)},
    {SIP_MLNAME_CAST(sipName_unregisterResource), SIP_MLMETH_CAST(meth_QResource_unregisterResource), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QResource_unregisterResource)},
    {SIP_MLNAME_CAST(sipName_unregisterResourceData), SIP_MLMETH_CAST(meth_QResource_unregisterResourceData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QResource_unregisterResourceData)}
};

PyDoc_STRVAR(doc_QResource, "\1QResource(fileName: str = '', locale: QLocale = QLocale())");


static pyqt5ClassPluginDef plugin_QResource = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QResource = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QResource,
        {SIP_NULLPTR},
        &plugin_QResource
    },
    {
        sipNameNr_QResource,
        {0, 0, 1},
        17, methods_QResource,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QResource,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QResource,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QResource,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QResource,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 63240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 63244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 63247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 63250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QRegularExpressionMatchIterator_swap, "swap(self, QRegularExpressionMatchIterator)");

extern "C" {static PyObject *meth_QRegularExpressionMatchIterator_swap(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatchIterator_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpressionMatchIterator* a0;
         ::QRegularExpressionMatchIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegularExpressionMatchIterator, &sipCpp, sipType_QRegularExpressionMatchIterator, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatchIterator, sipName_swap, doc_QRegularExpressionMatchIterator_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatchIterator_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRegularExpressionMatchIterator_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatchIterator_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatchIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatchIterator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatchIterator, sipName_isValid, doc_QRegularExpressionMatchIterator_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatchIterator_hasNext, "hasNext(self) -> bool");

extern "C" {static PyObject *meth_QRegularExpressionMatchIterator_hasNext(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatchIterator_hasNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatchIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatchIterator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasNext();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatchIterator, sipName_hasNext, doc_QRegularExpressionMatchIterator_hasNext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatchIterator_next, "next(self) -> QRegularExpressionMatch");

extern "C" {static PyObject *meth_QRegularExpressionMatchIterator_next(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatchIterator_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpressionMatchIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatchIterator, &sipCpp))
        {
             ::QRegularExpressionMatch*sipRes;

            sipRes = new  ::QRegularExpressionMatch(sipCpp->next());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpressionMatch,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatchIterator, sipName_next, doc_QRegularExpressionMatchIterator_next);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatchIterator_peekNext, "peekNext(self) -> QRegularExpressionMatch");

extern "C" {static PyObject *meth_QRegularExpressionMatchIterator_peekNext(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatchIterator_peekNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatchIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatchIterator, &sipCpp))
        {
             ::QRegularExpressionMatch*sipRes;

            sipRes = new  ::QRegularExpressionMatch(sipCpp->peekNext());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpressionMatch,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatchIterator, sipName_peekNext, doc_QRegularExpressionMatchIterator_peekNext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatchIterator_regularExpression, "regularExpression(self) -> QRegularExpression");

extern "C" {static PyObject *meth_QRegularExpressionMatchIterator_regularExpression(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatchIterator_regularExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatchIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatchIterator, &sipCpp))
        {
             ::QRegularExpression*sipRes;

            sipRes = new  ::QRegularExpression(sipCpp->regularExpression());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatchIterator, sipName_regularExpression, doc_QRegularExpressionMatchIterator_regularExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatchIterator_matchType, "matchType(self) -> QRegularExpression.MatchType");

extern "C" {static PyObject *meth_QRegularExpressionMatchIterator_matchType(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatchIterator_matchType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatchIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatchIterator, &sipCpp))
        {
             ::QRegularExpression::MatchType sipRes;

            sipRes = sipCpp->matchType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QRegularExpression_MatchType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatchIterator, sipName_matchType, doc_QRegularExpressionMatchIterator_matchType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatchIterator_matchOptions, "matchOptions(self) -> QRegularExpression.MatchOptions");

extern "C" {static PyObject *meth_QRegularExpressionMatchIterator_matchOptions(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatchIterator_matchOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatchIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatchIterator, &sipCpp))
        {
             ::QRegularExpression::MatchOptions*sipRes;

            sipRes = new  ::QRegularExpression::MatchOptions(sipCpp->matchOptions());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_MatchOptions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatchIterator, sipName_matchOptions, doc_QRegularExpressionMatchIterator_matchOptions);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegularExpressionMatchIterator(void *, int);}
static void release_QRegularExpressionMatchIterator(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRegularExpressionMatchIterator *>(sipCppV);
}


extern "C" {static void assign_QRegularExpressionMatchIterator(void *, SIP_SSIZE_T, void *);}
static void assign_QRegularExpressionMatchIterator(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRegularExpressionMatchIterator *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRegularExpressionMatchIterator *>(sipSrc);
}


extern "C" {static void *array_QRegularExpressionMatchIterator(SIP_SSIZE_T);}
static void *array_QRegularExpressionMatchIterator(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRegularExpressionMatchIterator[sipNrElem];
}


extern "C" {static void *copy_QRegularExpressionMatchIterator(const void *, SIP_SSIZE_T);}
static void *copy_QRegularExpressionMatchIterator(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRegularExpressionMatchIterator(reinterpret_cast<const  ::QRegularExpressionMatchIterator *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRegularExpressionMatchIterator(sipSimpleWrapper *);}
static void dealloc_QRegularExpressionMatchIterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegularExpressionMatchIterator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRegularExpressionMatchIterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegularExpressionMatchIterator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRegularExpressionMatchIterator *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRegularExpressionMatchIterator();

            return sipCpp;
        }
    }

    {
        const  ::QRegularExpressionMatchIterator* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRegularExpressionMatchIterator, &a0))
        {
            sipCpp = new  ::QRegularExpressionMatchIterator(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QRegularExpressionMatchIterator[] = {
    {SIP_MLNAME_CAST(sipName_hasNext), meth_QRegularExpressionMatchIterator_hasNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatchIterator_hasNext)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRegularExpressionMatchIterator_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatchIterator_isValid)},
    {SIP_MLNAME_CAST(sipName_matchOptions), meth_QRegularExpressionMatchIterator_matchOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatchIterator_matchOptions)},
    {SIP_MLNAME_CAST(sipName_matchType), meth_QRegularExpressionMatchIterator_matchType, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatchIterator_matchType)},
    {SIP_MLNAME_CAST(sipName_next), meth_QRegularExpressionMatchIterator_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatchIterator_next)},
    {SIP_MLNAME_CAST(sipName_peekNext), meth_QRegularExpressionMatchIterator_peekNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatchIterator_peekNext)},
    {SIP_MLNAME_CAST(sipName_regularExpression), meth_QRegularExpressionMatchIterator_regularExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatchIterator_regularExpression)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QRegularExpressionMatchIterator_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatchIterator_swap)}
};

PyDoc_STRVAR(doc_QRegularExpressionMatchIterator, "\1QRegularExpressionMatchIterator()\n"
"QRegularExpressionMatchIterator(QRegularExpressionMatchIterator)");


static pyqt5ClassPluginDef plugin_QRegularExpressionMatchIterator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRegularExpressionMatchIterator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegularExpressionMatchIterator,
        {SIP_NULLPTR},
        &plugin_QRegularExpressionMatchIterator
    },
    {
        sipNameNr_QRegularExpressionMatchIterator,
        {0, 0, 1},
        8, methods_QRegularExpressionMatchIterator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegularExpressionMatchIterator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QRegularExpressionMatchIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegularExpressionMatchIterator,
    assign_QRegularExpressionMatchIterator,
    array_QRegularExpressionMatchIterator,
    copy_QRegularExpressionMatchIterator,
    release_QRegularExpressionMatchIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 63621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63625 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 63628 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 63631 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 63634 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QRegularExpressionMatch_swap, "swap(self, QRegularExpressionMatch)");

extern "C" {static PyObject *meth_QRegularExpressionMatch_swap(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpressionMatch* a0;
         ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, sipType_QRegularExpressionMatch, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_swap, doc_QRegularExpressionMatch_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_regularExpression, "regularExpression(self) -> QRegularExpression");

extern "C" {static PyObject *meth_QRegularExpressionMatch_regularExpression(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_regularExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp))
        {
             ::QRegularExpression*sipRes;

            sipRes = new  ::QRegularExpression(sipCpp->regularExpression());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_regularExpression, doc_QRegularExpressionMatch_regularExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_matchType, "matchType(self) -> QRegularExpression.MatchType");

extern "C" {static PyObject *meth_QRegularExpressionMatch_matchType(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_matchType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp))
        {
             ::QRegularExpression::MatchType sipRes;

            sipRes = sipCpp->matchType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QRegularExpression_MatchType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_matchType, doc_QRegularExpressionMatch_matchType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_matchOptions, "matchOptions(self) -> QRegularExpression.MatchOptions");

extern "C" {static PyObject *meth_QRegularExpressionMatch_matchOptions(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_matchOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp))
        {
             ::QRegularExpression::MatchOptions*sipRes;

            sipRes = new  ::QRegularExpression::MatchOptions(sipCpp->matchOptions());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_MatchOptions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_matchOptions, doc_QRegularExpressionMatch_matchOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_hasMatch, "hasMatch(self) -> bool");

extern "C" {static PyObject *meth_QRegularExpressionMatch_hasMatch(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_hasMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasMatch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_hasMatch, doc_QRegularExpressionMatch_hasMatch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_hasPartialMatch, "hasPartialMatch(self) -> bool");

extern "C" {static PyObject *meth_QRegularExpressionMatch_hasPartialMatch(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_hasPartialMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasPartialMatch();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_hasPartialMatch, doc_QRegularExpressionMatch_hasPartialMatch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRegularExpressionMatch_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_isValid, doc_QRegularExpressionMatch_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_lastCapturedIndex, "lastCapturedIndex(self) -> int");

extern "C" {static PyObject *meth_QRegularExpressionMatch_lastCapturedIndex(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_lastCapturedIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lastCapturedIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_lastCapturedIndex, doc_QRegularExpressionMatch_lastCapturedIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_captured, "captured(self, nth: int = 0) -> str\n"
"captured(self, str) -> str");

extern "C" {static PyObject *meth_QRegularExpressionMatch_captured(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_captured(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QRegularExpressionMatch *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->captured(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->captured(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_captured, doc_QRegularExpressionMatch_captured);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_capturedTexts, "capturedTexts(self) -> List[str]");

extern "C" {static PyObject *meth_QRegularExpressionMatch_capturedTexts(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_capturedTexts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->capturedTexts());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_capturedTexts, doc_QRegularExpressionMatch_capturedTexts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_capturedStart, "capturedStart(self, nth: int = 0) -> int\n"
"capturedStart(self, str) -> int");

extern "C" {static PyObject *meth_QRegularExpressionMatch_capturedStart(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_capturedStart(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QRegularExpressionMatch *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->capturedStart(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->capturedStart(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_capturedStart, doc_QRegularExpressionMatch_capturedStart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_capturedLength, "capturedLength(self, nth: int = 0) -> int\n"
"capturedLength(self, str) -> int");

extern "C" {static PyObject *meth_QRegularExpressionMatch_capturedLength(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_capturedLength(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QRegularExpressionMatch *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->capturedLength(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->capturedLength(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_capturedLength, doc_QRegularExpressionMatch_capturedLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpressionMatch_capturedEnd, "capturedEnd(self, nth: int = 0) -> int\n"
"capturedEnd(self, str) -> int");

extern "C" {static PyObject *meth_QRegularExpressionMatch_capturedEnd(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegularExpressionMatch_capturedEnd(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QRegularExpressionMatch *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->capturedEnd(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QRegularExpressionMatch *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QRegularExpressionMatch, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->capturedEnd(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpressionMatch, sipName_capturedEnd, doc_QRegularExpressionMatch_capturedEnd);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegularExpressionMatch(void *, int);}
static void release_QRegularExpressionMatch(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRegularExpressionMatch *>(sipCppV);
}


extern "C" {static void assign_QRegularExpressionMatch(void *, SIP_SSIZE_T, void *);}
static void assign_QRegularExpressionMatch(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRegularExpressionMatch *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRegularExpressionMatch *>(sipSrc);
}


extern "C" {static void *array_QRegularExpressionMatch(SIP_SSIZE_T);}
static void *array_QRegularExpressionMatch(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRegularExpressionMatch[sipNrElem];
}


extern "C" {static void *copy_QRegularExpressionMatch(const void *, SIP_SSIZE_T);}
static void *copy_QRegularExpressionMatch(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRegularExpressionMatch(reinterpret_cast<const  ::QRegularExpressionMatch *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRegularExpressionMatch(sipSimpleWrapper *);}
static void dealloc_QRegularExpressionMatch(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegularExpressionMatch(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRegularExpressionMatch(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegularExpressionMatch(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRegularExpressionMatch *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRegularExpressionMatch();

            return sipCpp;
        }
    }

    {
        const  ::QRegularExpressionMatch* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRegularExpressionMatch, &a0))
        {
            sipCpp = new  ::QRegularExpressionMatch(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QRegularExpressionMatch[] = {
    {SIP_MLNAME_CAST(sipName_captured), SIP_MLMETH_CAST(meth_QRegularExpressionMatch_captured), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_captured)},
    {SIP_MLNAME_CAST(sipName_capturedEnd), SIP_MLMETH_CAST(meth_QRegularExpressionMatch_capturedEnd), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_capturedEnd)},
    {SIP_MLNAME_CAST(sipName_capturedLength), SIP_MLMETH_CAST(meth_QRegularExpressionMatch_capturedLength), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_capturedLength)},
    {SIP_MLNAME_CAST(sipName_capturedStart), SIP_MLMETH_CAST(meth_QRegularExpressionMatch_capturedStart), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_capturedStart)},
    {SIP_MLNAME_CAST(sipName_capturedTexts), meth_QRegularExpressionMatch_capturedTexts, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_capturedTexts)},
    {SIP_MLNAME_CAST(sipName_hasMatch), meth_QRegularExpressionMatch_hasMatch, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_hasMatch)},
    {SIP_MLNAME_CAST(sipName_hasPartialMatch), meth_QRegularExpressionMatch_hasPartialMatch, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_hasPartialMatch)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRegularExpressionMatch_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_isValid)},
    {SIP_MLNAME_CAST(sipName_lastCapturedIndex), meth_QRegularExpressionMatch_lastCapturedIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_lastCapturedIndex)},
    {SIP_MLNAME_CAST(sipName_matchOptions), meth_QRegularExpressionMatch_matchOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_matchOptions)},
    {SIP_MLNAME_CAST(sipName_matchType), meth_QRegularExpressionMatch_matchType, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_matchType)},
    {SIP_MLNAME_CAST(sipName_regularExpression), meth_QRegularExpressionMatch_regularExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_regularExpression)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QRegularExpressionMatch_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpressionMatch_swap)}
};

PyDoc_STRVAR(doc_QRegularExpressionMatch, "\1QRegularExpressionMatch()\n"
"QRegularExpressionMatch(QRegularExpressionMatch)");


static pyqt5ClassPluginDef plugin_QRegularExpressionMatch = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRegularExpressionMatch = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegularExpressionMatch,
        {SIP_NULLPTR},
        &plugin_QRegularExpressionMatch
    },
    {
        sipNameNr_QRegularExpressionMatch,
        {0, 0, 1},
        13, methods_QRegularExpressionMatch,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegularExpressionMatch,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QRegularExpressionMatch,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegularExpressionMatch,
    assign_QRegularExpressionMatch,
    array_QRegularExpressionMatch,
    copy_QRegularExpressionMatch,
    release_QRegularExpressionMatch,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 64242 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 64246 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static long slot_QRegularExpression_MatchOptions___hash__(PyObject *);}
static long slot_QRegularExpression_MatchOptions___hash__(PyObject *sipSelf)
{
     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QRegularExpression::MatchOptions::Int();
#line 64264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QRegularExpression_MatchOptions___bool__(PyObject *);}
static int slot_QRegularExpression_MatchOptions___bool__(PyObject *sipSelf)
{
     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRegularExpression::MatchOptions::Int() != 0);
#line 64289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression::MatchOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QRegularExpression_MatchOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRegularExpression::MatchOptions::Int() != a0->operator QRegularExpression::MatchOptions::Int());
#line 64319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QRegularExpression::MatchOptions *>(a0),sipType_QRegularExpression_MatchOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRegularExpression_MatchOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression::MatchOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QRegularExpression_MatchOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRegularExpression::MatchOptions::Int() == a0->operator QRegularExpression::MatchOptions::Int());
#line 64355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QRegularExpression::MatchOptions *>(a0),sipType_QRegularExpression_MatchOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRegularExpression_MatchOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegularExpression_MatchOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QRegularExpression::MatchOptions(*sipCpp ^ a0);
#line 64394 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::MatchOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRegularExpression_MatchOptions, &a0, &a0State, &a1))
        {
             ::QRegularExpression::MatchOptions*sipRes;

            sipRes = new  ::QRegularExpression::MatchOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QRegularExpression_MatchOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_MatchOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegularExpression_MatchOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QRegularExpression::MatchOptions(*sipCpp | a0);
#line 64466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::MatchOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRegularExpression_MatchOptions, &a0, &a0State, &a1))
        {
             ::QRegularExpression::MatchOptions*sipRes;

            sipRes = new  ::QRegularExpression::MatchOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QRegularExpression_MatchOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_MatchOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegularExpression_MatchOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QRegularExpression::MatchOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::MatchOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRegularExpression_MatchOptions, &a0, &a0State, &a1))
        {
             ::QRegularExpression::MatchOptions*sipRes;

            sipRes = new  ::QRegularExpression::MatchOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QRegularExpression_MatchOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_MatchOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___invert__(PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___invert__(PyObject *sipSelf)
{
     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QRegularExpression::MatchOptions*sipRes;

            sipRes = new  ::QRegularExpression::MatchOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_MatchOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRegularExpression_MatchOptions___int__(PyObject *);}
static PyObject *slot_QRegularExpression_MatchOptions___int__(PyObject *sipSelf)
{
     ::QRegularExpression::MatchOptions *sipCpp = reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_MatchOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegularExpression_MatchOptions(void *, int);}
static void release_QRegularExpression_MatchOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipCppV);
}


extern "C" {static void assign_QRegularExpression_MatchOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QRegularExpression_MatchOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRegularExpression::MatchOptions *>(sipSrc);
}


extern "C" {static void *array_QRegularExpression_MatchOptions(SIP_SSIZE_T);}
static void *array_QRegularExpression_MatchOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRegularExpression::MatchOptions[sipNrElem];
}


extern "C" {static void *copy_QRegularExpression_MatchOptions(const void *, SIP_SSIZE_T);}
static void *copy_QRegularExpression_MatchOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRegularExpression::MatchOptions(reinterpret_cast<const  ::QRegularExpression::MatchOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRegularExpression_MatchOptions(sipSimpleWrapper *);}
static void dealloc_QRegularExpression_MatchOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegularExpression_MatchOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRegularExpression_MatchOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegularExpression_MatchOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRegularExpression::MatchOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRegularExpression::MatchOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QRegularExpression::MatchOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QRegularExpression::MatchOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QRegularExpression_MatchOptions, &a0, &a0State))
        {
            sipCpp = new  ::QRegularExpression::MatchOptions(*a0);
            sipReleaseType(const_cast< ::QRegularExpression::MatchOptions *>(a0),sipType_QRegularExpression_MatchOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QRegularExpression_MatchOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QRegularExpression_MatchOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QRegularExpression::MatchOptions **sipCppPtr = reinterpret_cast< ::QRegularExpression::MatchOptions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QRegularExpression::MatchOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QRegularExpression_MatchOption)) ||
            sipCanConvertToType(sipPy, sipType_QRegularExpression_MatchOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QRegularExpression_MatchOption)))
{
    *sipCppPtr = new QRegularExpression::MatchOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QRegularExpression::MatchOptions *>(sipConvertToType(sipPy, sipType_QRegularExpression_MatchOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 64734 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRegularExpression_MatchOptions[] = {
    {(void *)slot_QRegularExpression_MatchOptions___hash__, hash_slot},
    {(void *)slot_QRegularExpression_MatchOptions___bool__, bool_slot},
    {(void *)slot_QRegularExpression_MatchOptions___ne__, ne_slot},
    {(void *)slot_QRegularExpression_MatchOptions___eq__, eq_slot},
    {(void *)slot_QRegularExpression_MatchOptions___ixor__, ixor_slot},
    {(void *)slot_QRegularExpression_MatchOptions___xor__, xor_slot},
    {(void *)slot_QRegularExpression_MatchOptions___ior__, ior_slot},
    {(void *)slot_QRegularExpression_MatchOptions___or__, or_slot},
    {(void *)slot_QRegularExpression_MatchOptions___iand__, iand_slot},
    {(void *)slot_QRegularExpression_MatchOptions___and__, and_slot},
    {(void *)slot_QRegularExpression_MatchOptions___invert__, invert_slot},
    {(void *)slot_QRegularExpression_MatchOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QRegularExpression_MatchOptions, "\1QRegularExpression.MatchOptions()\n"
"QRegularExpression.MatchOptions(Union[QRegularExpression.MatchOptions, QRegularExpression.MatchOption])\n"
"QRegularExpression.MatchOptions(QRegularExpression.MatchOptions)");


static pyqt5ClassPluginDef plugin_QRegularExpression_MatchOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRegularExpression_MatchOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegularExpression__MatchOptions,
        {SIP_NULLPTR},
        &plugin_QRegularExpression_MatchOptions
    },
    {
        sipNameNr_MatchOptions,
        {212, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegularExpression_MatchOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRegularExpression_MatchOptions,
    init_type_QRegularExpression_MatchOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegularExpression_MatchOptions,
    assign_QRegularExpression_MatchOptions,
    array_QRegularExpression_MatchOptions,
    copy_QRegularExpression_MatchOptions,
    release_QRegularExpression_MatchOptions,
    SIP_NULLPTR,
    convertTo_QRegularExpression_MatchOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 64822 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 64826 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


extern "C" {static long slot_QRegularExpression_PatternOptions___hash__(PyObject *);}
static long slot_QRegularExpression_PatternOptions___hash__(PyObject *sipSelf)
{
     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QRegularExpression::PatternOptions::Int();
#line 64844 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QRegularExpression_PatternOptions___bool__(PyObject *);}
static int slot_QRegularExpression_PatternOptions___bool__(PyObject *sipSelf)
{
     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRegularExpression::PatternOptions::Int() != 0);
#line 64869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression::PatternOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QRegularExpression_PatternOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRegularExpression::PatternOptions::Int() != a0->operator QRegularExpression::PatternOptions::Int());
#line 64899 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QRegularExpression::PatternOptions *>(a0),sipType_QRegularExpression_PatternOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRegularExpression_PatternOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression::PatternOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QRegularExpression_PatternOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QRegularExpression::PatternOptions::Int() == a0->operator QRegularExpression::PatternOptions::Int());
#line 64935 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QRegularExpression::PatternOptions *>(a0),sipType_QRegularExpression_PatternOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRegularExpression_PatternOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegularExpression_PatternOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QRegularExpression::PatternOptions(*sipCpp ^ a0);
#line 64974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::PatternOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRegularExpression_PatternOptions, &a0, &a0State, &a1))
        {
             ::QRegularExpression::PatternOptions*sipRes;

            sipRes = new  ::QRegularExpression::PatternOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QRegularExpression_PatternOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_PatternOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegularExpression_PatternOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QRegularExpression::PatternOptions(*sipCpp | a0);
#line 65046 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::PatternOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRegularExpression_PatternOptions, &a0, &a0State, &a1))
        {
             ::QRegularExpression::PatternOptions*sipRes;

            sipRes = new  ::QRegularExpression::PatternOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QRegularExpression_PatternOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_PatternOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRegularExpression_PatternOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QRegularExpression::PatternOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::PatternOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QRegularExpression_PatternOptions, &a0, &a0State, &a1))
        {
             ::QRegularExpression::PatternOptions*sipRes;

            sipRes = new  ::QRegularExpression::PatternOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QRegularExpression_PatternOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_PatternOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___invert__(PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___invert__(PyObject *sipSelf)
{
     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QRegularExpression::PatternOptions*sipRes;

            sipRes = new  ::QRegularExpression::PatternOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_PatternOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRegularExpression_PatternOptions___int__(PyObject *);}
static PyObject *slot_QRegularExpression_PatternOptions___int__(PyObject *sipSelf)
{
     ::QRegularExpression::PatternOptions *sipCpp = reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression_PatternOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegularExpression_PatternOptions(void *, int);}
static void release_QRegularExpression_PatternOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipCppV);
}


extern "C" {static void assign_QRegularExpression_PatternOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QRegularExpression_PatternOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRegularExpression::PatternOptions *>(sipSrc);
}


extern "C" {static void *array_QRegularExpression_PatternOptions(SIP_SSIZE_T);}
static void *array_QRegularExpression_PatternOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRegularExpression::PatternOptions[sipNrElem];
}


extern "C" {static void *copy_QRegularExpression_PatternOptions(const void *, SIP_SSIZE_T);}
static void *copy_QRegularExpression_PatternOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRegularExpression::PatternOptions(reinterpret_cast<const  ::QRegularExpression::PatternOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRegularExpression_PatternOptions(sipSimpleWrapper *);}
static void dealloc_QRegularExpression_PatternOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegularExpression_PatternOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRegularExpression_PatternOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegularExpression_PatternOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRegularExpression::PatternOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRegularExpression::PatternOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QRegularExpression::PatternOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QRegularExpression::PatternOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QRegularExpression_PatternOptions, &a0, &a0State))
        {
            sipCpp = new  ::QRegularExpression::PatternOptions(*a0);
            sipReleaseType(const_cast< ::QRegularExpression::PatternOptions *>(a0),sipType_QRegularExpression_PatternOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QRegularExpression_PatternOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QRegularExpression_PatternOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QRegularExpression::PatternOptions **sipCppPtr = reinterpret_cast< ::QRegularExpression::PatternOptions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QRegularExpression::PatternOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QRegularExpression_PatternOption)) ||
            sipCanConvertToType(sipPy, sipType_QRegularExpression_PatternOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QRegularExpression_PatternOption)))
{
    *sipCppPtr = new QRegularExpression::PatternOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QRegularExpression::PatternOptions *>(sipConvertToType(sipPy, sipType_QRegularExpression_PatternOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 65314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRegularExpression_PatternOptions[] = {
    {(void *)slot_QRegularExpression_PatternOptions___hash__, hash_slot},
    {(void *)slot_QRegularExpression_PatternOptions___bool__, bool_slot},
    {(void *)slot_QRegularExpression_PatternOptions___ne__, ne_slot},
    {(void *)slot_QRegularExpression_PatternOptions___eq__, eq_slot},
    {(void *)slot_QRegularExpression_PatternOptions___ixor__, ixor_slot},
    {(void *)slot_QRegularExpression_PatternOptions___xor__, xor_slot},
    {(void *)slot_QRegularExpression_PatternOptions___ior__, ior_slot},
    {(void *)slot_QRegularExpression_PatternOptions___or__, or_slot},
    {(void *)slot_QRegularExpression_PatternOptions___iand__, iand_slot},
    {(void *)slot_QRegularExpression_PatternOptions___and__, and_slot},
    {(void *)slot_QRegularExpression_PatternOptions___invert__, invert_slot},
    {(void *)slot_QRegularExpression_PatternOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QRegularExpression_PatternOptions, "\1QRegularExpression.PatternOptions()\n"
"QRegularExpression.PatternOptions(Union[QRegularExpression.PatternOptions, QRegularExpression.PatternOption])\n"
"QRegularExpression.PatternOptions(QRegularExpression.PatternOptions)");


static pyqt5ClassPluginDef plugin_QRegularExpression_PatternOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRegularExpression_PatternOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegularExpression__PatternOptions,
        {SIP_NULLPTR},
        &plugin_QRegularExpression_PatternOptions
    },
    {
        sipNameNr_PatternOptions,
        {212, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegularExpression_PatternOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRegularExpression_PatternOptions,
    init_type_QRegularExpression_PatternOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegularExpression_PatternOptions,
    assign_QRegularExpression_PatternOptions,
    array_QRegularExpression_PatternOptions,
    copy_QRegularExpression_PatternOptions,
    release_QRegularExpression_PatternOptions,
    SIP_NULLPTR,
    convertTo_QRegularExpression_PatternOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 65402 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 65406 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 65409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 65412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 65415 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 65418 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 65421 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QRegularExpression_patternOptions, "patternOptions(self) -> QRegularExpression.PatternOptions");

extern "C" {static PyObject *meth_QRegularExpression_patternOptions(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_patternOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpression, &sipCpp))
        {
             ::QRegularExpression::PatternOptions*sipRes;

            sipRes = new  ::QRegularExpression::PatternOptions(sipCpp->patternOptions());

            return sipConvertFromNewType(sipRes,sipType_QRegularExpression_PatternOptions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_patternOptions, doc_QRegularExpression_patternOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_setPatternOptions, "setPatternOptions(self, Union[QRegularExpression.PatternOptions, QRegularExpression.PatternOption])");

extern "C" {static PyObject *meth_QRegularExpression_setPatternOptions(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_setPatternOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression::PatternOptions* a0;
        int a0State = 0;
         ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRegularExpression, &sipCpp, sipType_QRegularExpression_PatternOptions, &a0, &a0State))
        {
            sipCpp->setPatternOptions(*a0);
            sipReleaseType(a0,sipType_QRegularExpression_PatternOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_setPatternOptions, doc_QRegularExpression_setPatternOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_swap, "swap(self, QRegularExpression)");

extern "C" {static PyObject *meth_QRegularExpression_swap(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegularExpression* a0;
         ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegularExpression, &sipCpp, sipType_QRegularExpression, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_swap, doc_QRegularExpression_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_pattern, "pattern(self) -> str");

extern "C" {static PyObject *meth_QRegularExpression_pattern(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_pattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpression, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->pattern());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_pattern, doc_QRegularExpression_pattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_setPattern, "setPattern(self, str)");

extern "C" {static PyObject *meth_QRegularExpression_setPattern(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_setPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRegularExpression, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPattern(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_setPattern, doc_QRegularExpression_setPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRegularExpression_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpression, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_isValid, doc_QRegularExpression_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_patternErrorOffset, "patternErrorOffset(self) -> int");

extern "C" {static PyObject *meth_QRegularExpression_patternErrorOffset(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_patternErrorOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpression, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->patternErrorOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_patternErrorOffset, doc_QRegularExpression_patternErrorOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QRegularExpression_errorString(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpression, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_errorString, doc_QRegularExpression_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_captureCount, "captureCount(self) -> int");

extern "C" {static PyObject *meth_QRegularExpression_captureCount(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_captureCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpression, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->captureCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_captureCount, doc_QRegularExpression_captureCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_match, "match(self, str, offset: int = 0, matchType: QRegularExpression.MatchType = QRegularExpression.NormalMatch, matchOptions: Union[QRegularExpression.MatchOptions, QRegularExpression.MatchOption] = QRegularExpression.NoMatchOption) -> QRegularExpressionMatch");

extern "C" {static PyObject *meth_QRegularExpression_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
         ::QRegularExpression::MatchType a2 = QRegularExpression::NormalMatch;
         ::QRegularExpression::MatchOptions a3def = QRegularExpression::NoMatchOption;
         ::QRegularExpression::MatchOptions* a3 = &a3def;
        int a3State = 0;
        const  ::QRegularExpression *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_offset,
            sipName_matchType,
            sipName_matchOptions,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iEJ1", &sipSelf, sipType_QRegularExpression, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QRegularExpression_MatchType, &a2, sipType_QRegularExpression_MatchOptions, &a3, &a3State))
        {
             ::QRegularExpressionMatch*sipRes;

            sipRes = new  ::QRegularExpressionMatch(sipCpp->match(*a0,a1,a2,*a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a3,sipType_QRegularExpression_MatchOptions,a3State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpressionMatch,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_match, doc_QRegularExpression_match);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_globalMatch, "globalMatch(self, str, offset: int = 0, matchType: QRegularExpression.MatchType = QRegularExpression.NormalMatch, matchOptions: Union[QRegularExpression.MatchOptions, QRegularExpression.MatchOption] = QRegularExpression.NoMatchOption) -> QRegularExpressionMatchIterator");

extern "C" {static PyObject *meth_QRegularExpression_globalMatch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_globalMatch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
         ::QRegularExpression::MatchType a2 = QRegularExpression::NormalMatch;
         ::QRegularExpression::MatchOptions a3def = QRegularExpression::NoMatchOption;
         ::QRegularExpression::MatchOptions* a3 = &a3def;
        int a3State = 0;
        const  ::QRegularExpression *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_offset,
            sipName_matchType,
            sipName_matchOptions,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iEJ1", &sipSelf, sipType_QRegularExpression, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QRegularExpression_MatchType, &a2, sipType_QRegularExpression_MatchOptions, &a3, &a3State))
        {
             ::QRegularExpressionMatchIterator*sipRes;

            sipRes = new  ::QRegularExpressionMatchIterator(sipCpp->globalMatch(*a0,a1,a2,*a3));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a3,sipType_QRegularExpression_MatchOptions,a3State);

            return sipConvertFromNewType(sipRes,sipType_QRegularExpressionMatchIterator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_globalMatch, doc_QRegularExpression_globalMatch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_escape, "escape(str) -> str");

extern "C" {static PyObject *meth_QRegularExpression_escape(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_escape(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QRegularExpression::escape(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_escape, doc_QRegularExpression_escape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_namedCaptureGroups, "namedCaptureGroups(self) -> List[str]");

extern "C" {static PyObject *meth_QRegularExpression_namedCaptureGroups(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_namedCaptureGroups(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpression, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->namedCaptureGroups());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_namedCaptureGroups, doc_QRegularExpression_namedCaptureGroups);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_optimize, "optimize(self)");

extern "C" {static PyObject *meth_QRegularExpression_optimize(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_optimize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegularExpression, &sipCpp))
        {
            sipCpp->optimize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_optimize, doc_QRegularExpression_optimize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_wildcardToRegularExpression, "wildcardToRegularExpression(str) -> str");

extern "C" {static PyObject *meth_QRegularExpression_wildcardToRegularExpression(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_wildcardToRegularExpression(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QRegularExpression::wildcardToRegularExpression(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_wildcardToRegularExpression, doc_QRegularExpression_wildcardToRegularExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegularExpression_anchoredPattern, "anchoredPattern(str) -> str");

extern "C" {static PyObject *meth_QRegularExpression_anchoredPattern(PyObject *, PyObject *);}
static PyObject *meth_QRegularExpression_anchoredPattern(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QRegularExpression::anchoredPattern(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegularExpression, sipName_anchoredPattern, doc_QRegularExpression_anchoredPattern);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QRegularExpression___hash__(PyObject *);}
static long slot_QRegularExpression___hash__(PyObject *sipSelf)
{
     ::QRegularExpression *sipCpp = reinterpret_cast< ::QRegularExpression *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
        sipRes = qHash(*sipCpp);
#line 65928 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRegularExpression___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegularExpression *sipCpp = reinterpret_cast< ::QRegularExpression *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegularExpression, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRegularExpression::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRegularExpression, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegularExpression___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRegularExpression___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegularExpression *sipCpp = reinterpret_cast< ::QRegularExpression *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegularExpression* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegularExpression, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRegularExpression::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRegularExpression, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegularExpression___repr__(PyObject *);}
static PyObject *slot_QRegularExpression___repr__(PyObject *sipSelf)
{
     ::QRegularExpression *sipCpp = reinterpret_cast< ::QRegularExpression *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegularExpression));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->pattern());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QRegularExpression(%R", uni);
        
            if (sipCpp->patternOptions() != QRegularExpression::NoPatternOption)
            {
                qpycore_Unicode_ConcatAndDel(&sipRes,
                        PyUnicode_FromFormat(
                                ", PyQt5.QtCore.QRegularExpression.PatternOptions(%i)",
                                (int)sipCpp->patternOptions()));
            }
        
            qpycore_Unicode_ConcatAndDel(&sipRes, PyUnicode_FromString(")"));
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QRegularExpression(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
        
            if (sipCpp->patternOptions() != QRegularExpression::NoPatternOption)
            {
                PyString_ConcatAndDel(&sipRes,
                        PyString_FromFormat(
                                ", PyQt5.QtCore.QRegularExpression.PatternOptions(%i)",
                                (int)sipCpp->patternOptions()));
            }
        
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
        else
        {
            sipRes = 0;
        }
#line 66053 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegularExpression(void *, int);}
static void release_QRegularExpression(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRegularExpression *>(sipCppV);
}


extern "C" {static void assign_QRegularExpression(void *, SIP_SSIZE_T, void *);}
static void assign_QRegularExpression(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRegularExpression *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRegularExpression *>(sipSrc);
}


extern "C" {static void *array_QRegularExpression(SIP_SSIZE_T);}
static void *array_QRegularExpression(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRegularExpression[sipNrElem];
}


extern "C" {static void *copy_QRegularExpression(const void *, SIP_SSIZE_T);}
static void *copy_QRegularExpression(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRegularExpression(reinterpret_cast<const  ::QRegularExpression *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRegularExpression(sipSimpleWrapper *);}
static void dealloc_QRegularExpression(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegularExpression(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRegularExpression(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegularExpression(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRegularExpression *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRegularExpression();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QRegularExpression::PatternOptions a1def = QRegularExpression::NoPatternOption;
         ::QRegularExpression::PatternOptions* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1", sipType_QString,&a0, &a0State, sipType_QRegularExpression_PatternOptions, &a1, &a1State))
        {
            sipCpp = new  ::QRegularExpression(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QRegularExpression_PatternOptions,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QRegularExpression* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRegularExpression, &a0))
        {
            sipCpp = new  ::QRegularExpression(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRegularExpression[] = {
    {(void *)slot_QRegularExpression___hash__, hash_slot},
    {(void *)slot_QRegularExpression___ne__, ne_slot},
    {(void *)slot_QRegularExpression___eq__, eq_slot},
    {(void *)slot_QRegularExpression___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRegularExpression[] = {
    {SIP_MLNAME_CAST(sipName_anchoredPattern), meth_QRegularExpression_anchoredPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_anchoredPattern)},
    {SIP_MLNAME_CAST(sipName_captureCount), meth_QRegularExpression_captureCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_captureCount)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QRegularExpression_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_errorString)},
    {SIP_MLNAME_CAST(sipName_escape), meth_QRegularExpression_escape, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_escape)},
    {SIP_MLNAME_CAST(sipName_globalMatch), SIP_MLMETH_CAST(meth_QRegularExpression_globalMatch), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegularExpression_globalMatch)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRegularExpression_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_isValid)},
    {SIP_MLNAME_CAST(sipName_match), SIP_MLMETH_CAST(meth_QRegularExpression_match), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegularExpression_match)},
    {SIP_MLNAME_CAST(sipName_namedCaptureGroups), meth_QRegularExpression_namedCaptureGroups, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_namedCaptureGroups)},
    {SIP_MLNAME_CAST(sipName_optimize), meth_QRegularExpression_optimize, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_optimize)},
    {SIP_MLNAME_CAST(sipName_pattern), meth_QRegularExpression_pattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_pattern)},
    {SIP_MLNAME_CAST(sipName_patternErrorOffset), meth_QRegularExpression_patternErrorOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_patternErrorOffset)},
    {SIP_MLNAME_CAST(sipName_patternOptions), meth_QRegularExpression_patternOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_patternOptions)},
    {SIP_MLNAME_CAST(sipName_setPattern), meth_QRegularExpression_setPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_setPattern)},
    {SIP_MLNAME_CAST(sipName_setPatternOptions), meth_QRegularExpression_setPatternOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_setPatternOptions)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QRegularExpression_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_swap)},
    {SIP_MLNAME_CAST(sipName_wildcardToRegularExpression), meth_QRegularExpression_wildcardToRegularExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegularExpression_wildcardToRegularExpression)}
};

static sipEnumMemberDef enummembers_QRegularExpression[] = {
    {sipName_AnchoredMatchOption, static_cast<int>( ::QRegularExpression::AnchoredMatchOption), 213},
    {sipName_CaseInsensitiveOption, static_cast<int>( ::QRegularExpression::CaseInsensitiveOption), 216},
    {sipName_DontAutomaticallyOptimizeOption, static_cast<int>( ::QRegularExpression::DontAutomaticallyOptimizeOption), 216},
    {sipName_DontCaptureOption, static_cast<int>( ::QRegularExpression::DontCaptureOption), 216},
    {sipName_DontCheckSubjectStringMatchOption, static_cast<int>( ::QRegularExpression::DontCheckSubjectStringMatchOption), 213},
    {sipName_DotMatchesEverythingOption, static_cast<int>( ::QRegularExpression::DotMatchesEverythingOption), 216},
    {sipName_ExtendedPatternSyntaxOption, static_cast<int>( ::QRegularExpression::ExtendedPatternSyntaxOption), 216},
    {sipName_InvertedGreedinessOption, static_cast<int>( ::QRegularExpression::InvertedGreedinessOption), 216},
    {sipName_MultilineOption, static_cast<int>( ::QRegularExpression::MultilineOption), 216},
    {sipName_NoMatch, static_cast<int>( ::QRegularExpression::NoMatch), 215},
    {sipName_NoMatchOption, static_cast<int>( ::QRegularExpression::NoMatchOption), 213},
    {sipName_NoPatternOption, static_cast<int>( ::QRegularExpression::NoPatternOption), 216},
    {sipName_NormalMatch, static_cast<int>( ::QRegularExpression::NormalMatch), 215},
    {sipName_OptimizeOnFirstUsageOption, static_cast<int>( ::QRegularExpression::OptimizeOnFirstUsageOption), 216},
    {sipName_PartialPreferCompleteMatch, static_cast<int>( ::QRegularExpression::PartialPreferCompleteMatch), 215},
    {sipName_PartialPreferFirstMatch, static_cast<int>( ::QRegularExpression::PartialPreferFirstMatch), 215},
    {sipName_UseUnicodePropertiesOption, static_cast<int>( ::QRegularExpression::UseUnicodePropertiesOption), 216},
};

PyDoc_STRVAR(doc_QRegularExpression, "\1QRegularExpression()\n"
"QRegularExpression(str, options: Union[QRegularExpression.PatternOptions, QRegularExpression.PatternOption] = QRegularExpression.NoPatternOption)\n"
"QRegularExpression(QRegularExpression)");


static pyqt5ClassPluginDef plugin_QRegularExpression = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRegularExpression = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegularExpression,
        {SIP_NULLPTR},
        &plugin_QRegularExpression
    },
    {
        sipNameNr_QRegularExpression,
        {0, 0, 1},
        16, methods_QRegularExpression,
        17, enummembers_QRegularExpression,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegularExpression,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRegularExpression,
    init_type_QRegularExpression,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegularExpression,
    assign_QRegularExpression,
    array_QRegularExpression,
    copy_QRegularExpression,
    release_QRegularExpression,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 66269 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 66279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QRegExp_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QRegExp_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_isEmpty, doc_QRegExp_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRegExp_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_isValid, doc_QRegExp_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_pattern, "pattern(self) -> str");

extern "C" {static PyObject *meth_QRegExp_pattern(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_pattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->pattern());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_pattern, doc_QRegExp_pattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_setPattern, "setPattern(self, str)");

extern "C" {static PyObject *meth_QRegExp_setPattern(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_setPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPattern(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_setPattern, doc_QRegExp_setPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_caseSensitivity, "caseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QRegExp_caseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_caseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->caseSensitivity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CaseSensitivity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_caseSensitivity, doc_QRegExp_caseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_setCaseSensitivity, "setCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QRegExp_setCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_setCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CaseSensitivity a0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRegExp, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_setCaseSensitivity, doc_QRegExp_setCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_patternSyntax, "patternSyntax(self) -> QRegExp.PatternSyntax");

extern "C" {static PyObject *meth_QRegExp_patternSyntax(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_patternSyntax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::QRegExp::PatternSyntax sipRes;

            sipRes = sipCpp->patternSyntax();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QRegExp_PatternSyntax);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_patternSyntax, doc_QRegExp_patternSyntax);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_setPatternSyntax, "setPatternSyntax(self, QRegExp.PatternSyntax)");

extern "C" {static PyObject *meth_QRegExp_setPatternSyntax(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_setPatternSyntax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegExp::PatternSyntax a0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QRegExp_PatternSyntax, &a0))
        {
            sipCpp->setPatternSyntax(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_setPatternSyntax, doc_QRegExp_setPatternSyntax);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_isMinimal, "isMinimal(self) -> bool");

extern "C" {static PyObject *meth_QRegExp_isMinimal(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_isMinimal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMinimal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_isMinimal, doc_QRegExp_isMinimal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_setMinimal, "setMinimal(self, bool)");

extern "C" {static PyObject *meth_QRegExp_setMinimal(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_setMinimal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QRegExp, &sipCpp, &a0))
        {
            sipCpp->setMinimal(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_setMinimal, doc_QRegExp_setMinimal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_exactMatch, "exactMatch(self, str) -> bool");

extern "C" {static PyObject *meth_QRegExp_exactMatch(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_exactMatch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->exactMatch(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_exactMatch, doc_QRegExp_exactMatch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_indexIn, "indexIn(self, str, offset: int = 0, caretMode: QRegExp.CaretMode = QRegExp.CaretAtZero) -> int");

extern "C" {static PyObject *meth_QRegExp_indexIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegExp_indexIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
         ::QRegExp::CaretMode a2 = QRegExp::CaretAtZero;
        const  ::QRegExp *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_offset,
            sipName_caretMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QRegExp_CaretMode, &a2))
        {
            int sipRes;

            sipRes = sipCpp->indexIn(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_indexIn, doc_QRegExp_indexIn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_lastIndexIn, "lastIndexIn(self, str, offset: int = -1, caretMode: QRegExp.CaretMode = QRegExp.CaretAtZero) -> int");

extern "C" {static PyObject *meth_QRegExp_lastIndexIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegExp_lastIndexIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
         ::QRegExp::CaretMode a2 = QRegExp::CaretAtZero;
        const  ::QRegExp *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_offset,
            sipName_caretMode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|iE", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QRegExp_CaretMode, &a2))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexIn(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_lastIndexIn, doc_QRegExp_lastIndexIn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_matchedLength, "matchedLength(self) -> int");

extern "C" {static PyObject *meth_QRegExp_matchedLength(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_matchedLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->matchedLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_matchedLength, doc_QRegExp_matchedLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_capturedTexts, "capturedTexts(self) -> List[str]");

extern "C" {static PyObject *meth_QRegExp_capturedTexts(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_capturedTexts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->capturedTexts());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_capturedTexts, doc_QRegExp_capturedTexts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_cap, "cap(self, nth: int = 0) -> str");

extern "C" {static PyObject *meth_QRegExp_cap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegExp_cap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QRegExp *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QRegExp, &sipCpp, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->cap(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_cap, doc_QRegExp_cap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_pos, "pos(self, nth: int = 0) -> int");

extern "C" {static PyObject *meth_QRegExp_pos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRegExp_pos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QRegExp *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QRegExp, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->pos(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_pos, doc_QRegExp_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QRegExp_errorString(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_errorString, doc_QRegExp_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_escape, "escape(str) -> str");

extern "C" {static PyObject *meth_QRegExp_escape(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_escape(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QRegExp::escape(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_escape, doc_QRegExp_escape);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_captureCount, "captureCount(self) -> int");

extern "C" {static PyObject *meth_QRegExp_captureCount(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_captureCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExp, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->captureCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_captureCount, doc_QRegExp_captureCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRegExp_swap, "swap(self, QRegExp)");

extern "C" {static PyObject *meth_QRegExp_swap(PyObject *, PyObject *);}
static PyObject *meth_QRegExp_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRegExp* a0;
         ::QRegExp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegExp, &sipCpp, sipType_QRegExp, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExp, sipName_swap, doc_QRegExp_swap);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QRegExp___hash__(PyObject *);}
static long slot_QRegExp___hash__(PyObject *sipSelf)
{
     ::QRegExp *sipCpp = reinterpret_cast< ::QRegExp *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegExp));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
        sipRes = qHash(*sipCpp);
#line 66924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRegExp___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRegExp___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegExp *sipCpp = reinterpret_cast< ::QRegExp *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegExp));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegExp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRegExp::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRegExp, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegExp___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRegExp___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRegExp *sipCpp = reinterpret_cast< ::QRegExp *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegExp));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRegExp* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRegExp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QRegExp::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRegExp, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRegExp___repr__(PyObject *);}
static PyObject *slot_QRegExp___repr__(PyObject *sipSelf)
{
     ::QRegExp *sipCpp = reinterpret_cast< ::QRegExp *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRegExp));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 53 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->pattern());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QRegExp(%R", uni);
        
            if (sipCpp->caseSensitivity() != Qt::CaseSensitive ||
                sipCpp->patternSyntax() != QRegExp::RegExp)
            {
                qpycore_Unicode_ConcatAndDel(&sipRes,
                        PyUnicode_FromFormat(", PyQt5.QtCore.Qt.CaseSensitivity(%i)",
                                (int)sipCpp->caseSensitivity()));
        
                if (sipCpp->patternSyntax() != QRegExp::RegExp)
                    qpycore_Unicode_ConcatAndDel(&sipRes,
                            PyUnicode_FromFormat(
                                    ", PyQt5.QtCore.QRegExp.PatternSyntax(%i)",
                                    (int)sipCpp->patternSyntax()));
            }
        
            qpycore_Unicode_ConcatAndDel(&sipRes, PyUnicode_FromString(")"));
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QRegExp(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
        
            if (sipCpp->caseSensitivity() != Qt::CaseSensitive ||
                sipCpp->patternSyntax() != QRegExp::RegExp)
            {
                PyString_ConcatAndDel(&sipRes,
                        PyString_FromFormat(", PyQt5.QtCore.Qt.CaseSensitivity(%i)",
                                (int)sipCpp->caseSensitivity()));
        
                if (sipCpp->patternSyntax() != QRegExp::RegExp)
                    PyString_ConcatAndDel(&sipRes,
                            PyString_FromFormat(
                                    ", PyQt5.QtCore.QRegExp.PatternSyntax(%i)",
                                    (int)sipCpp->patternSyntax()));
            }
        
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
        else
        {
            sipRes = 0;
        }
#line 67061 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegExp(void *, int);}
static void release_QRegExp(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRegExp *>(sipCppV);
}


extern "C" {static void assign_QRegExp(void *, SIP_SSIZE_T, void *);}
static void assign_QRegExp(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRegExp *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRegExp *>(sipSrc);
}


extern "C" {static void *array_QRegExp(SIP_SSIZE_T);}
static void *array_QRegExp(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRegExp[sipNrElem];
}


extern "C" {static void *copy_QRegExp(const void *, SIP_SSIZE_T);}
static void *copy_QRegExp(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRegExp(reinterpret_cast<const  ::QRegExp *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRegExp(sipSimpleWrapper *);}
static void dealloc_QRegExp(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegExp(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRegExp(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegExp(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRegExp *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRegExp();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
         ::QRegExp::PatternSyntax a2 = QRegExp::RegExp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
            sipName_syntax,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|EE", sipType_QString,&a0, &a0State, sipType_Qt_CaseSensitivity, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            sipCpp = new  ::QRegExp(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QRegExp* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRegExp, &a0))
        {
            sipCpp = new  ::QRegExp(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRegExp[] = {
    {(void *)slot_QRegExp___hash__, hash_slot},
    {(void *)slot_QRegExp___ne__, ne_slot},
    {(void *)slot_QRegExp___eq__, eq_slot},
    {(void *)slot_QRegExp___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRegExp[] = {
    {SIP_MLNAME_CAST(sipName_cap), SIP_MLMETH_CAST(meth_QRegExp_cap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegExp_cap)},
    {SIP_MLNAME_CAST(sipName_captureCount), meth_QRegExp_captureCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_captureCount)},
    {SIP_MLNAME_CAST(sipName_capturedTexts), meth_QRegExp_capturedTexts, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_capturedTexts)},
    {SIP_MLNAME_CAST(sipName_caseSensitivity), meth_QRegExp_caseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_caseSensitivity)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QRegExp_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_errorString)},
    {SIP_MLNAME_CAST(sipName_escape), meth_QRegExp_escape, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_escape)},
    {SIP_MLNAME_CAST(sipName_exactMatch), meth_QRegExp_exactMatch, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_exactMatch)},
    {SIP_MLNAME_CAST(sipName_indexIn), SIP_MLMETH_CAST(meth_QRegExp_indexIn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegExp_indexIn)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QRegExp_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isMinimal), meth_QRegExp_isMinimal, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_isMinimal)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRegExp_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_isValid)},
    {SIP_MLNAME_CAST(sipName_lastIndexIn), SIP_MLMETH_CAST(meth_QRegExp_lastIndexIn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegExp_lastIndexIn)},
    {SIP_MLNAME_CAST(sipName_matchedLength), meth_QRegExp_matchedLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_matchedLength)},
    {SIP_MLNAME_CAST(sipName_pattern), meth_QRegExp_pattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_pattern)},
    {SIP_MLNAME_CAST(sipName_patternSyntax), meth_QRegExp_patternSyntax, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_patternSyntax)},
    {SIP_MLNAME_CAST(sipName_pos), SIP_MLMETH_CAST(meth_QRegExp_pos), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRegExp_pos)},
    {SIP_MLNAME_CAST(sipName_setCaseSensitivity), meth_QRegExp_setCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_setCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_setMinimal), meth_QRegExp_setMinimal, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_setMinimal)},
    {SIP_MLNAME_CAST(sipName_setPattern), meth_QRegExp_setPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_setPattern)},
    {SIP_MLNAME_CAST(sipName_setPatternSyntax), meth_QRegExp_setPatternSyntax, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_setPatternSyntax)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QRegExp_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExp_swap)}
};

static sipEnumMemberDef enummembers_QRegExp[] = {
    {sipName_CaretAtOffset, static_cast<int>( ::QRegExp::CaretAtOffset), 210},
    {sipName_CaretAtZero, static_cast<int>( ::QRegExp::CaretAtZero), 210},
    {sipName_CaretWontMatch, static_cast<int>( ::QRegExp::CaretWontMatch), 210},
    {sipName_FixedString, static_cast<int>( ::QRegExp::FixedString), 211},
    {sipName_RegExp, static_cast<int>( ::QRegExp::RegExp), 211},
    {sipName_RegExp2, static_cast<int>( ::QRegExp::RegExp2), 211},
    {sipName_W3CXmlSchema11, static_cast<int>( ::QRegExp::W3CXmlSchema11), 211},
    {sipName_Wildcard, static_cast<int>( ::QRegExp::Wildcard), 211},
    {sipName_WildcardUnix, static_cast<int>( ::QRegExp::WildcardUnix), 211},
};

PyDoc_STRVAR(doc_QRegExp, "\1QRegExp()\n"
"QRegExp(str, cs: Qt.CaseSensitivity = Qt.CaseSensitive, syntax: QRegExp.PatternSyntax = QRegExp.RegExp)\n"
"QRegExp(QRegExp)");


static pyqt5ClassPluginDef plugin_QRegExp = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRegExp = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRegExp,
        {SIP_NULLPTR},
        &plugin_QRegExp
    },
    {
        sipNameNr_QRegExp,
        {0, 0, 1},
        21, methods_QRegExp,
        9, enummembers_QRegExp,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRegExp,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRegExp,
    init_type_QRegExp,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRegExp,
    assign_QRegExp,
    array_QRegExp,
    copy_QRegExp,
    release_QRegExp,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 67273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 67277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 97 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 67280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 67283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 67286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QRectF_normalized, "normalized(self) -> QRectF");

extern "C" {static PyObject *meth_QRectF_normalized(PyObject *, PyObject *);}
static PyObject *meth_QRectF_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_normalized, doc_QRectF_normalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_left, "left(self) -> float");

extern "C" {static PyObject *meth_QRectF_left(PyObject *, PyObject *);}
static PyObject *meth_QRectF_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->left();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_left, doc_QRectF_left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_top, "top(self) -> float");

extern "C" {static PyObject *meth_QRectF_top(PyObject *, PyObject *);}
static PyObject *meth_QRectF_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->top();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_top, doc_QRectF_top);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_right, "right(self) -> float");

extern "C" {static PyObject *meth_QRectF_right(PyObject *, PyObject *);}
static PyObject *meth_QRectF_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->right();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_right, doc_QRectF_right);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_bottom, "bottom(self) -> float");

extern "C" {static PyObject *meth_QRectF_bottom(PyObject *, PyObject *);}
static PyObject *meth_QRectF_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->bottom();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_bottom, doc_QRectF_bottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QRectF_setX(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setX, doc_QRectF_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QRectF_setY(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setY, doc_QRectF_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_topLeft, "topLeft(self) -> QPointF");

extern "C" {static PyObject *meth_QRectF_topLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_topLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->topLeft());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_topLeft, doc_QRectF_topLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_bottomRight, "bottomRight(self) -> QPointF");

extern "C" {static PyObject *meth_QRectF_bottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_bottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->bottomRight());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_bottomRight, doc_QRectF_bottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_topRight, "topRight(self) -> QPointF");

extern "C" {static PyObject *meth_QRectF_topRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_topRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->topRight());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_topRight, doc_QRectF_topRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_bottomLeft, "bottomLeft(self) -> QPointF");

extern "C" {static PyObject *meth_QRectF_bottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_bottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->bottomLeft());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_bottomLeft, doc_QRectF_bottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_contains, "contains(self, Union[QPointF, QPoint]) -> bool\n"
"contains(self, QRectF) -> bool\n"
"contains(self, float, float) -> bool");

extern "C" {static PyObject *meth_QRectF_contains(PyObject *, PyObject *);}
static PyObject *meth_QRectF_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QRectF* a0;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_contains, doc_QRectF_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_intersects, "intersects(self, QRectF) -> bool");

extern "C" {static PyObject *meth_QRectF_intersects(PyObject *, PyObject *);}
static PyObject *meth_QRectF_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_intersects, doc_QRectF_intersects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QRectF_isNull(PyObject *, PyObject *);}
static PyObject *meth_QRectF_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_isNull, doc_QRectF_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QRectF_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QRectF_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_isEmpty, doc_QRectF_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRectF_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRectF_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_isValid, doc_QRectF_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_x, "x(self) -> float");

extern "C" {static PyObject *meth_QRectF_x(PyObject *, PyObject *);}
static PyObject *meth_QRectF_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_x, doc_QRectF_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_y, "y(self) -> float");

extern "C" {static PyObject *meth_QRectF_y(PyObject *, PyObject *);}
static PyObject *meth_QRectF_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_y, doc_QRectF_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setLeft, "setLeft(self, float)");

extern "C" {static PyObject *meth_QRectF_setLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->setLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setLeft, doc_QRectF_setLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setRight, "setRight(self, float)");

extern "C" {static PyObject *meth_QRectF_setRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->setRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setRight, doc_QRectF_setRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setTop, "setTop(self, float)");

extern "C" {static PyObject *meth_QRectF_setTop(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->setTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setTop, doc_QRectF_setTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setBottom, "setBottom(self, float)");

extern "C" {static PyObject *meth_QRectF_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->setBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setBottom, doc_QRectF_setBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setTopLeft, "setTopLeft(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_setTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setTopLeft(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setTopLeft, doc_QRectF_setTopLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setTopRight, "setTopRight(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_setTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setTopRight(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setTopRight, doc_QRectF_setTopRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setBottomLeft, "setBottomLeft(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_setBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setBottomLeft(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setBottomLeft, doc_QRectF_setBottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setBottomRight, "setBottomRight(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_setBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setBottomRight(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setBottomRight, doc_QRectF_setBottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_center, "center(self) -> QPointF");

extern "C" {static PyObject *meth_QRectF_center(PyObject *, PyObject *);}
static PyObject *meth_QRectF_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_center, doc_QRectF_center);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveLeft, "moveLeft(self, float)");

extern "C" {static PyObject *meth_QRectF_moveLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->moveLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveLeft, doc_QRectF_moveLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveTop, "moveTop(self, float)");

extern "C" {static PyObject *meth_QRectF_moveTop(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->moveTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveTop, doc_QRectF_moveTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveRight, "moveRight(self, float)");

extern "C" {static PyObject *meth_QRectF_moveRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->moveRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveRight, doc_QRectF_moveRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveBottom, "moveBottom(self, float)");

extern "C" {static PyObject *meth_QRectF_moveBottom(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->moveBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveBottom, doc_QRectF_moveBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveTopLeft, "moveTopLeft(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_moveTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->moveTopLeft(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveTopLeft, doc_QRectF_moveTopLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveTopRight, "moveTopRight(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_moveTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->moveTopRight(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveTopRight, doc_QRectF_moveTopRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveBottomLeft, "moveBottomLeft(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_moveBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->moveBottomLeft(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveBottomLeft, doc_QRectF_moveBottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveBottomRight, "moveBottomRight(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_moveBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->moveBottomRight(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveBottomRight, doc_QRectF_moveBottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveCenter, "moveCenter(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_moveCenter(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->moveCenter(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveCenter, doc_QRectF_moveCenter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_width, "width(self) -> float");

extern "C" {static PyObject *meth_QRectF_width(PyObject *, PyObject *);}
static PyObject *meth_QRectF_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_width, doc_QRectF_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_height, "height(self) -> float");

extern "C" {static PyObject *meth_QRectF_height(PyObject *, PyObject *);}
static PyObject *meth_QRectF_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_height, doc_QRectF_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_size, "size(self) -> QSizeF");

extern "C" {static PyObject *meth_QRectF_size(PyObject *, PyObject *);}
static PyObject *meth_QRectF_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QSizeF*sipRes;

            sipRes = new  ::QSizeF(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_size, doc_QRectF_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_translate, "translate(self, float, float)\n"
"translate(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_translate(PyObject *, PyObject *);}
static PyObject *meth_QRectF_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->translate(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_translate, doc_QRectF_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_moveTo, "moveTo(self, float, float)\n"
"moveTo(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QRectF_moveTo(PyObject *, PyObject *);}
static PyObject *meth_QRectF_moveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1))
        {
            sipCpp->moveTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->moveTo(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_moveTo, doc_QRectF_moveTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_translated, "translated(self, float, float) -> QRectF\n"
"translated(self, Union[QPointF, QPoint]) -> QRectF");

extern "C" {static PyObject *meth_QRectF_translated(PyObject *, PyObject *);}
static PyObject *meth_QRectF_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QRectF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->translated(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_translated, doc_QRectF_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_getRect, "getRect(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_QRectF_getRect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_getRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            sipCpp->getRect(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_getRect, doc_QRectF_getRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setRect, "setRect(self, float, float, float, float)");

extern "C" {static PyObject *meth_QRectF_setRect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setRect, doc_QRectF_setRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_getCoords, "getCoords(self) -> Tuple[float, float, float, float]");

extern "C" {static PyObject *meth_QRectF_getCoords(PyObject *, PyObject *);}
static PyObject *meth_QRectF_getCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
            sipCpp->getCoords(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_getCoords, doc_QRectF_getCoords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setCoords, "setCoords(self, float, float, float, float)");

extern "C" {static PyObject *meth_QRectF_setCoords(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setCoords(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setCoords, doc_QRectF_setCoords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_adjust, "adjust(self, float, float, float, float)");

extern "C" {static PyObject *meth_QRectF_adjust(PyObject *, PyObject *);}
static PyObject *meth_QRectF_adjust(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->adjust(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_adjust, doc_QRectF_adjust);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_adjusted, "adjusted(self, float, float, float, float) -> QRectF");

extern "C" {static PyObject *meth_QRectF_adjusted(PyObject *, PyObject *);}
static PyObject *meth_QRectF_adjusted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QRectF, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->adjusted(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_adjusted, doc_QRectF_adjusted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QRectF_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setWidth, doc_QRectF_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setHeight, "setHeight(self, float)");

extern "C" {static PyObject *meth_QRectF_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QRectF, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setHeight, doc_QRectF_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_setSize, "setSize(self, QSizeF)");

extern "C" {static PyObject *meth_QRectF_setSize(PyObject *, PyObject *);}
static PyObject *meth_QRectF_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSizeF* a0;
         ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QSizeF, &a0))
        {
            sipCpp->setSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_setSize, doc_QRectF_setSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_intersected, "intersected(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QRectF_intersected(PyObject *, PyObject *);}
static PyObject *meth_QRectF_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_intersected, doc_QRectF_intersected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_united, "united(self, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QRectF_united(PyObject *, PyObject *);}
static PyObject *meth_QRectF_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QRectF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_united, doc_QRectF_united);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_toAlignedRect, "toAlignedRect(self) -> QRect");

extern "C" {static PyObject *meth_QRectF_toAlignedRect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_toAlignedRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->toAlignedRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_toAlignedRect, doc_QRectF_toAlignedRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_toRect, "toRect(self) -> QRect");

extern "C" {static PyObject *meth_QRectF_toRect(PyObject *, PyObject *);}
static PyObject *meth_QRectF_toRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->toRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_toRect, doc_QRectF_toRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_marginsAdded, "marginsAdded(self, QMarginsF) -> QRectF");

extern "C" {static PyObject *meth_QRectF_marginsAdded(PyObject *, PyObject *);}
static PyObject *meth_QRectF_marginsAdded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QMarginsF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->marginsAdded(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_marginsAdded, doc_QRectF_marginsAdded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_marginsRemoved, "marginsRemoved(self, QMarginsF) -> QRectF");

extern "C" {static PyObject *meth_QRectF_marginsRemoved(PyObject *, PyObject *);}
static PyObject *meth_QRectF_marginsRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRectF, &sipCpp, sipType_QMarginsF, &a0))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->marginsRemoved(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_marginsRemoved, doc_QRectF_marginsRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRectF_transposed, "transposed(self) -> QRectF");

extern "C" {static PyObject *meth_QRectF_transposed(PyObject *, PyObject *);}
static PyObject *meth_QRectF_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRectF, &sipCpp))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName_transposed, doc_QRectF_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QRectF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRectF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRectF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRectF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRectF___add__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRectF, &a0, sipType_QMarginsF, &a1))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRectF___sub__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;
        const  ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRectF, &a0, sipType_QMarginsF, &a1))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRectF___isub__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRectF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMarginsF, &a0))
        {
            sipCpp-> ::QRectF::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRectF___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRectF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMarginsF, &a0))
        {
            sipCpp-> ::QRectF::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRectF___iand__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRectF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            sipCpp-> ::QRectF::operator&=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRectF___ior__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRectF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRectF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            sipCpp-> ::QRectF::operator|=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QRectF___bool__(PyObject *);}
static int slot_QRectF___bool__(PyObject *sipSelf)
{
     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
        sipRes = sipCpp->isValid();
#line 69340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QRectF___contains__(PyObject *,PyObject *);}
static int slot_QRectF___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            int sipRes = 0;

#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 69370 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipRes;
        }
    }

    {
        const  ::QRectF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRectF, &a0))
        {
            int sipRes = 0;

#line 241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 69386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRectF, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QRectF___and__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRectF* a0;
        const  ::QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((*a0 & *a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRectF___or__(PyObject *,PyObject *);}
static PyObject *slot_QRectF___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRectF* a0;
        const  ::QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((*a0 | *a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRectF___repr__(PyObject *);}
static PyObject *slot_QRectF___repr__(PyObject *sipSelf)
{
     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRectF));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QRectF()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QRectF()");
        #endif
        }
        else
        {
            PyObject *l = PyFloat_FromDouble(sipCpp->left());
            PyObject *t = PyFloat_FromDouble(sipCpp->top());
            PyObject *w = PyFloat_FromDouble(sipCpp->width());
            PyObject *h = PyFloat_FromDouble(sipCpp->height());
        
            if (l && t && w && h)
            {
        #if PY_MAJOR_VERSION >= 3
                sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QRectF(%R, %R, %R, %R)", l,
                        t, w, h);
        #else
                sipRes = PyString_FromString("PyQt5.QtCore.QRectF(");
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(l));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(t));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(w));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(h));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
            }
        
            Py_XDECREF(l);
            Py_XDECREF(t);
            Py_XDECREF(w);
            Py_XDECREF(h);
        }
#line 69507 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRectF(void *, int);}
static void release_QRectF(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRectF *>(sipCppV);
}


extern "C" {static PyObject *pickle_QRectF(void *);}
static PyObject *pickle_QRectF(void *sipCppV)
{
     ::QRectF *sipCpp = reinterpret_cast< ::QRectF *>(sipCppV);
    PyObject *sipRes;

#line 168 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
    sipRes = Py_BuildValue((char *)"dddd", sipCpp->x(), sipCpp->y(), sipCpp->width(), sipCpp->height());
#line 69533 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QRectF(void *, SIP_SSIZE_T, void *);}
static void assign_QRectF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRectF *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRectF *>(sipSrc);
}


extern "C" {static void *array_QRectF(SIP_SSIZE_T);}
static void *array_QRectF(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRectF[sipNrElem];
}


extern "C" {static void *copy_QRectF(const void *, SIP_SSIZE_T);}
static void *copy_QRectF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRectF(reinterpret_cast<const  ::QRectF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRectF(sipSimpleWrapper *);}
static void dealloc_QRectF(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRectF(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRectF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRectF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRectF *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRectF();

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QSizeF* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J9", sipType_QPointF, &a0, &a0State, sipType_QSizeF, &a1))
        {
            sipCpp = new  ::QRectF(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
            sipCpp = new  ::QRectF(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dddd", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QRectF(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRect, &a0))
        {
            sipCpp = new  ::QRectF(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QRectF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRectF, &a0))
        {
            sipCpp = new  ::QRectF(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRectF[] = {
    {(void *)slot_QRectF___eq__, eq_slot},
    {(void *)slot_QRectF___ne__, ne_slot},
    {(void *)slot_QRectF___add__, add_slot},
    {(void *)slot_QRectF___sub__, sub_slot},
    {(void *)slot_QRectF___isub__, isub_slot},
    {(void *)slot_QRectF___iadd__, iadd_slot},
    {(void *)slot_QRectF___iand__, iand_slot},
    {(void *)slot_QRectF___ior__, ior_slot},
    {(void *)slot_QRectF___bool__, bool_slot},
    {(void *)slot_QRectF___contains__, contains_slot},
    {(void *)slot_QRectF___and__, and_slot},
    {(void *)slot_QRectF___or__, or_slot},
    {(void *)slot_QRectF___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRectF[] = {
    {SIP_MLNAME_CAST(sipName_adjust), meth_QRectF_adjust, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_adjust)},
    {SIP_MLNAME_CAST(sipName_adjusted), meth_QRectF_adjusted, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_adjusted)},
    {SIP_MLNAME_CAST(sipName_bottom), meth_QRectF_bottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_bottom)},
    {SIP_MLNAME_CAST(sipName_bottomLeft), meth_QRectF_bottomLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_bottomLeft)},
    {SIP_MLNAME_CAST(sipName_bottomRight), meth_QRectF_bottomRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_bottomRight)},
    {SIP_MLNAME_CAST(sipName_center), meth_QRectF_center, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_center)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QRectF_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_contains)},
    {SIP_MLNAME_CAST(sipName_getCoords), meth_QRectF_getCoords, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_getCoords)},
    {SIP_MLNAME_CAST(sipName_getRect), meth_QRectF_getRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_getRect)},
    {SIP_MLNAME_CAST(sipName_height), meth_QRectF_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_height)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QRectF_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_intersected)},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QRectF_intersects, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_intersects)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QRectF_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QRectF_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRectF_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_isValid)},
    {SIP_MLNAME_CAST(sipName_left), meth_QRectF_left, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_left)},
    {SIP_MLNAME_CAST(sipName_marginsAdded), meth_QRectF_marginsAdded, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_marginsAdded)},
    {SIP_MLNAME_CAST(sipName_marginsRemoved), meth_QRectF_marginsRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_marginsRemoved)},
    {SIP_MLNAME_CAST(sipName_moveBottom), meth_QRectF_moveBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveBottom)},
    {SIP_MLNAME_CAST(sipName_moveBottomLeft), meth_QRectF_moveBottomLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveBottomLeft)},
    {SIP_MLNAME_CAST(sipName_moveBottomRight), meth_QRectF_moveBottomRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveBottomRight)},
    {SIP_MLNAME_CAST(sipName_moveCenter), meth_QRectF_moveCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveCenter)},
    {SIP_MLNAME_CAST(sipName_moveLeft), meth_QRectF_moveLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveLeft)},
    {SIP_MLNAME_CAST(sipName_moveRight), meth_QRectF_moveRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveRight)},
    {SIP_MLNAME_CAST(sipName_moveTo), meth_QRectF_moveTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveTo)},
    {SIP_MLNAME_CAST(sipName_moveTop), meth_QRectF_moveTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveTop)},
    {SIP_MLNAME_CAST(sipName_moveTopLeft), meth_QRectF_moveTopLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveTopLeft)},
    {SIP_MLNAME_CAST(sipName_moveTopRight), meth_QRectF_moveTopRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_moveTopRight)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QRectF_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_normalized)},
    {SIP_MLNAME_CAST(sipName_right), meth_QRectF_right, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_right)},
    {SIP_MLNAME_CAST(sipName_setBottom), meth_QRectF_setBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setBottom)},
    {SIP_MLNAME_CAST(sipName_setBottomLeft), meth_QRectF_setBottomLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setBottomLeft)},
    {SIP_MLNAME_CAST(sipName_setBottomRight), meth_QRectF_setBottomRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setBottomRight)},
    {SIP_MLNAME_CAST(sipName_setCoords), meth_QRectF_setCoords, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setCoords)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QRectF_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setHeight)},
    {SIP_MLNAME_CAST(sipName_setLeft), meth_QRectF_setLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setLeft)},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QRectF_setRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setRect)},
    {SIP_MLNAME_CAST(sipName_setRight), meth_QRectF_setRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setRight)},
    {SIP_MLNAME_CAST(sipName_setSize), meth_QRectF_setSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setSize)},
    {SIP_MLNAME_CAST(sipName_setTop), meth_QRectF_setTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setTop)},
    {SIP_MLNAME_CAST(sipName_setTopLeft), meth_QRectF_setTopLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setTopLeft)},
    {SIP_MLNAME_CAST(sipName_setTopRight), meth_QRectF_setTopRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setTopRight)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QRectF_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setWidth)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QRectF_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QRectF_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_setY)},
    {SIP_MLNAME_CAST(sipName_size), meth_QRectF_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_size)},
    {SIP_MLNAME_CAST(sipName_toAlignedRect), meth_QRectF_toAlignedRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_toAlignedRect)},
    {SIP_MLNAME_CAST(sipName_toRect), meth_QRectF_toRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_toRect)},
    {SIP_MLNAME_CAST(sipName_top), meth_QRectF_top, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_top)},
    {SIP_MLNAME_CAST(sipName_topLeft), meth_QRectF_topLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_topLeft)},
    {SIP_MLNAME_CAST(sipName_topRight), meth_QRectF_topRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_topRight)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QRectF_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QRectF_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_translated)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QRectF_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_transposed)},
    {SIP_MLNAME_CAST(sipName_united), meth_QRectF_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_united)},
    {SIP_MLNAME_CAST(sipName_width), meth_QRectF_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_width)},
    {SIP_MLNAME_CAST(sipName_x), meth_QRectF_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QRectF_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QRectF_y)}
};

PyDoc_STRVAR(doc_QRectF, "\1QRectF()\n"
"QRectF(Union[QPointF, QPoint], QSizeF)\n"
"QRectF(Union[QPointF, QPoint], Union[QPointF, QPoint])\n"
"QRectF(float, float, float, float)\n"
"QRectF(QRect)\n"
"QRectF(QRectF)");


static pyqt5ClassPluginDef plugin_QRectF = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRectF = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRectF,
        {SIP_NULLPTR},
        &plugin_QRectF
    },
    {
        sipNameNr_QRectF,
        {0, 0, 1},
        58, methods_QRectF,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRectF,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRectF,
    init_type_QRectF,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRectF,
    assign_QRectF,
    array_QRectF,
    copy_QRectF,
    release_QRectF,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QRectF,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 69807 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 69811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 69814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 69817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QRect_normalized, "normalized(self) -> QRect");

extern "C" {static PyObject *meth_QRect_normalized(PyObject *, PyObject *);}
static PyObject *meth_QRect_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_normalized, doc_QRect_normalized);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveCenter, "moveCenter(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveCenter(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveCenter(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveCenter, doc_QRect_moveCenter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_contains, "contains(self, QPoint, proper: bool = False) -> bool\n"
"contains(self, QRect, proper: bool = False) -> bool\n"
"contains(self, int, int, bool) -> bool\n"
"contains(self, int, int) -> bool");

extern "C" {static PyObject *meth_QRect_contains(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRect_contains(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        bool a1 = 0;
        const  ::QRect *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_proper,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QRect* a0;
        bool a1 = 0;
        const  ::QRect *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_proper,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_QRect, &sipCpp, sipType_QRect, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        bool a2;
        const  ::QRect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Biib", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const  ::QRect *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Bii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_contains, doc_QRect_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_intersects, "intersects(self, QRect) -> bool");

extern "C" {static PyObject *meth_QRect_intersects(PyObject *, PyObject *);}
static PyObject *meth_QRect_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QRect, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_intersects, doc_QRect_intersects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QRect_isNull(PyObject *, PyObject *);}
static PyObject *meth_QRect_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_isNull, doc_QRect_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QRect_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QRect_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_isEmpty, doc_QRect_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QRect_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRect_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_isValid, doc_QRect_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_left, "left(self) -> int");

extern "C" {static PyObject *meth_QRect_left(PyObject *, PyObject *);}
static PyObject *meth_QRect_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->left();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_left, doc_QRect_left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_top, "top(self) -> int");

extern "C" {static PyObject *meth_QRect_top(PyObject *, PyObject *);}
static PyObject *meth_QRect_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->top();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_top, doc_QRect_top);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_right, "right(self) -> int");

extern "C" {static PyObject *meth_QRect_right(PyObject *, PyObject *);}
static PyObject *meth_QRect_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->right();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_right, doc_QRect_right);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_bottom, "bottom(self) -> int");

extern "C" {static PyObject *meth_QRect_bottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bottom();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_bottom, doc_QRect_bottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_x, "x(self) -> int");

extern "C" {static PyObject *meth_QRect_x(PyObject *, PyObject *);}
static PyObject *meth_QRect_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_x, doc_QRect_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_y, "y(self) -> int");

extern "C" {static PyObject *meth_QRect_y(PyObject *, PyObject *);}
static PyObject *meth_QRect_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_y, doc_QRect_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setLeft, "setLeft(self, int)");

extern "C" {static PyObject *meth_QRect_setLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setLeft, doc_QRect_setLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setTop, "setTop(self, int)");

extern "C" {static PyObject *meth_QRect_setTop(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setTop, doc_QRect_setTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setRight, "setRight(self, int)");

extern "C" {static PyObject *meth_QRect_setRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setRight, doc_QRect_setRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setBottom, "setBottom(self, int)");

extern "C" {static PyObject *meth_QRect_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setBottom, doc_QRect_setBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setTopLeft, "setTopLeft(self, QPoint)");

extern "C" {static PyObject *meth_QRect_setTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setTopLeft(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setTopLeft, doc_QRect_setTopLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setBottomRight, "setBottomRight(self, QPoint)");

extern "C" {static PyObject *meth_QRect_setBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setBottomRight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setBottomRight, doc_QRect_setBottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setTopRight, "setTopRight(self, QPoint)");

extern "C" {static PyObject *meth_QRect_setTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setTopRight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setTopRight, doc_QRect_setTopRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setBottomLeft, "setBottomLeft(self, QPoint)");

extern "C" {static PyObject *meth_QRect_setBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setBottomLeft(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setBottomLeft, doc_QRect_setBottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setX, "setX(self, int)");

extern "C" {static PyObject *meth_QRect_setX(PyObject *, PyObject *);}
static PyObject *meth_QRect_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setX, doc_QRect_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setY, "setY(self, int)");

extern "C" {static PyObject *meth_QRect_setY(PyObject *, PyObject *);}
static PyObject *meth_QRect_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setY, doc_QRect_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_topLeft, "topLeft(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_topLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_topLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->topLeft());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_topLeft, doc_QRect_topLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_bottomRight, "bottomRight(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_bottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->bottomRight());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_bottomRight, doc_QRect_bottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_topRight, "topRight(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_topRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_topRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->topRight());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_topRight, doc_QRect_topRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_bottomLeft, "bottomLeft(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_bottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->bottomLeft());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_bottomLeft, doc_QRect_bottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_center, "center(self) -> QPoint");

extern "C" {static PyObject *meth_QRect_center(PyObject *, PyObject *);}
static PyObject *meth_QRect_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_center, doc_QRect_center);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_width, "width(self) -> int");

extern "C" {static PyObject *meth_QRect_width(PyObject *, PyObject *);}
static PyObject *meth_QRect_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_width, doc_QRect_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_height, "height(self) -> int");

extern "C" {static PyObject *meth_QRect_height(PyObject *, PyObject *);}
static PyObject *meth_QRect_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_height, doc_QRect_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_size, "size(self) -> QSize");

extern "C" {static PyObject *meth_QRect_size(PyObject *, PyObject *);}
static PyObject *meth_QRect_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_size, doc_QRect_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_translate, "translate(self, int, int)\n"
"translate(self, QPoint)");

extern "C" {static PyObject *meth_QRect_translate(PyObject *, PyObject *);}
static PyObject *meth_QRect_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->translate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_translate, doc_QRect_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_translated, "translated(self, int, int) -> QRect\n"
"translated(self, QPoint) -> QRect");

extern "C" {static PyObject *meth_QRect_translated(PyObject *, PyObject *);}
static PyObject *meth_QRect_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->translated(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_translated, doc_QRect_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveTo, "moveTo(self, int, int)\n"
"moveTo(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveTo(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1))
        {
            sipCpp->moveTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveTo(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveTo, doc_QRect_moveTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveLeft, "moveLeft(self, int)");

extern "C" {static PyObject *meth_QRect_moveLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->moveLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveLeft, doc_QRect_moveLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveTop, "moveTop(self, int)");

extern "C" {static PyObject *meth_QRect_moveTop(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->moveTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveTop, doc_QRect_moveTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveRight, "moveRight(self, int)");

extern "C" {static PyObject *meth_QRect_moveRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->moveRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveRight, doc_QRect_moveRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveBottom, "moveBottom(self, int)");

extern "C" {static PyObject *meth_QRect_moveBottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->moveBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveBottom, doc_QRect_moveBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveTopLeft, "moveTopLeft(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveTopLeft(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveTopLeft, doc_QRect_moveTopLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveBottomRight, "moveBottomRight(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveBottomRight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveBottomRight, doc_QRect_moveBottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveTopRight, "moveTopRight(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveTopRight(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveTopRight, doc_QRect_moveTopRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_moveBottomLeft, "moveBottomLeft(self, QPoint)");

extern "C" {static PyObject *meth_QRect_moveBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->moveBottomLeft(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_moveBottomLeft, doc_QRect_moveBottomLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_getRect, "getRect(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QRect_getRect(PyObject *, PyObject *);}
static PyObject *meth_QRect_getRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            sipCpp->getRect(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_getRect, doc_QRect_getRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setRect, "setRect(self, int, int, int, int)");

extern "C" {static PyObject *meth_QRect_setRect(PyObject *, PyObject *);}
static PyObject *meth_QRect_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setRect, doc_QRect_setRect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_getCoords, "getCoords(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QRect_getCoords(PyObject *, PyObject *);}
static PyObject *meth_QRect_getCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
            sipCpp->getCoords(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_getCoords, doc_QRect_getCoords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setCoords, "setCoords(self, int, int, int, int)");

extern "C" {static PyObject *meth_QRect_setCoords(PyObject *, PyObject *);}
static PyObject *meth_QRect_setCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setCoords(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setCoords, doc_QRect_setCoords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_adjusted, "adjusted(self, int, int, int, int) -> QRect");

extern "C" {static PyObject *meth_QRect_adjusted(PyObject *, PyObject *);}
static PyObject *meth_QRect_adjusted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2, &a3))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->adjusted(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_adjusted, doc_QRect_adjusted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_adjust, "adjust(self, int, int, int, int)");

extern "C" {static PyObject *meth_QRect_adjust(PyObject *, PyObject *);}
static PyObject *meth_QRect_adjust(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QRect, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->adjust(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_adjust, doc_QRect_adjust);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setWidth, "setWidth(self, int)");

extern "C" {static PyObject *meth_QRect_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QRect_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setWidth, doc_QRect_setWidth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setHeight, "setHeight(self, int)");

extern "C" {static PyObject *meth_QRect_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QRect, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setHeight, doc_QRect_setHeight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_setSize, "setSize(self, QSize)");

extern "C" {static PyObject *meth_QRect_setSize(PyObject *, PyObject *);}
static PyObject *meth_QRect_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSize* a0;
         ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_setSize, doc_QRect_setSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_intersected, "intersected(self, QRect) -> QRect");

extern "C" {static PyObject *meth_QRect_intersected(PyObject *, PyObject *);}
static PyObject *meth_QRect_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QRect, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_intersected, doc_QRect_intersected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_united, "united(self, QRect) -> QRect");

extern "C" {static PyObject *meth_QRect_united(PyObject *, PyObject *);}
static PyObject *meth_QRect_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QRect, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_united, doc_QRect_united);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_marginsAdded, "marginsAdded(self, QMargins) -> QRect");

extern "C" {static PyObject *meth_QRect_marginsAdded(PyObject *, PyObject *);}
static PyObject *meth_QRect_marginsAdded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QMargins, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->marginsAdded(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_marginsAdded, doc_QRect_marginsAdded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_marginsRemoved, "marginsRemoved(self, QMargins) -> QRect");

extern "C" {static PyObject *meth_QRect_marginsRemoved(PyObject *, PyObject *);}
static PyObject *meth_QRect_marginsRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRect, &sipCpp, sipType_QMargins, &a0))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->marginsRemoved(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_marginsRemoved, doc_QRect_marginsRemoved);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRect_transposed, "transposed(self) -> QRect");

extern "C" {static PyObject *meth_QRect_transposed(PyObject *, PyObject *);}
static PyObject *meth_QRect_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRect, &sipCpp))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName_transposed, doc_QRect_transposed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QRect___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRect___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRect, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRect___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRect___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRect, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRect___add__(PyObject *,PyObject *);}
static PyObject *slot_QRect___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRect, &a0, sipType_QMargins, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRect___sub__(PyObject *,PyObject *);}
static PyObject *slot_QRect___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRect, &a0, sipType_QMargins, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRect___isub__(PyObject *,PyObject *);}
static PyObject *slot_QRect___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMargins, &a0))
        {
            sipCpp-> ::QRect::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRect___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QRect___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMargins, &a0))
        {
            sipCpp-> ::QRect::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRect___iand__(PyObject *,PyObject *);}
static PyObject *slot_QRect___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            sipCpp-> ::QRect::operator&=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRect___ior__(PyObject *,PyObject *);}
static PyObject *slot_QRect___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            sipCpp-> ::QRect::operator|=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QRect___bool__(PyObject *);}
static int slot_QRect___bool__(PyObject *sipSelf)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 83 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
        sipRes = sipCpp->isValid();
#line 71819 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QRect___repr__(PyObject *);}
static PyObject *slot_QRect___repr__(PyObject *sipSelf)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QRect()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QRect()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt5.QtCore.QRect(%i, %i, %i, %i)", sipCpp->left(),
                    sipCpp->top(), sipCpp->width(), sipCpp->height());
        }
#line 71862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QRect___contains__(PyObject *,PyObject *);}
static int slot_QRect___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            int sipRes = 0;

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 71891 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRect, &a0))
        {
            int sipRes = 0;

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 71906 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRect, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QRect___and__(PyObject *,PyObject *);}
static PyObject *slot_QRect___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRect* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRect, &a0, sipType_QRect, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 & *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QRect___or__(PyObject *,PyObject *);}
static PyObject *slot_QRect___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRect* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QRect, &a0, sipType_QRect, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 | *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


/* Call the instance's destructor. */
extern "C" {static void release_QRect(void *, int);}
static void release_QRect(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRect *>(sipCppV);
}


extern "C" {static PyObject *pickle_QRect(void *);}
static PyObject *pickle_QRect(void *sipCppV)
{
     ::QRect *sipCpp = reinterpret_cast< ::QRect *>(sipCppV);
    PyObject *sipRes;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->x(), sipCpp->y(), sipCpp->width(), sipCpp->height());
#line 71991 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QRect(void *, SIP_SSIZE_T, void *);}
static void assign_QRect(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRect *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRect *>(sipSrc);
}


extern "C" {static void *array_QRect(SIP_SSIZE_T);}
static void *array_QRect(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRect[sipNrElem];
}


extern "C" {static void *copy_QRect(const void *, SIP_SSIZE_T);}
static void *copy_QRect(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRect(reinterpret_cast<const  ::QRect *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRect(sipSimpleWrapper *);}
static void dealloc_QRect(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRect(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRect(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRect *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QRect();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iiii", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QRect(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            sipCpp = new  ::QRect(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QSize* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QPoint, &a0, sipType_QSize, &a1))
        {
            sipCpp = new  ::QRect(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::QRect* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRect, &a0))
        {
            sipCpp = new  ::QRect(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRect[] = {
    {(void *)slot_QRect___eq__, eq_slot},
    {(void *)slot_QRect___ne__, ne_slot},
    {(void *)slot_QRect___add__, add_slot},
    {(void *)slot_QRect___sub__, sub_slot},
    {(void *)slot_QRect___isub__, isub_slot},
    {(void *)slot_QRect___iadd__, iadd_slot},
    {(void *)slot_QRect___iand__, iand_slot},
    {(void *)slot_QRect___ior__, ior_slot},
    {(void *)slot_QRect___bool__, bool_slot},
    {(void *)slot_QRect___repr__, repr_slot},
    {(void *)slot_QRect___contains__, contains_slot},
    {(void *)slot_QRect___and__, and_slot},
    {(void *)slot_QRect___or__, or_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRect[] = {
    {SIP_MLNAME_CAST(sipName_adjust), meth_QRect_adjust, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_adjust)},
    {SIP_MLNAME_CAST(sipName_adjusted), meth_QRect_adjusted, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_adjusted)},
    {SIP_MLNAME_CAST(sipName_bottom), meth_QRect_bottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_bottom)},
    {SIP_MLNAME_CAST(sipName_bottomLeft), meth_QRect_bottomLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_bottomLeft)},
    {SIP_MLNAME_CAST(sipName_bottomRight), meth_QRect_bottomRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_bottomRight)},
    {SIP_MLNAME_CAST(sipName_center), meth_QRect_center, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_center)},
    {SIP_MLNAME_CAST(sipName_contains), SIP_MLMETH_CAST(meth_QRect_contains), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRect_contains)},
    {SIP_MLNAME_CAST(sipName_getCoords), meth_QRect_getCoords, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_getCoords)},
    {SIP_MLNAME_CAST(sipName_getRect), meth_QRect_getRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_getRect)},
    {SIP_MLNAME_CAST(sipName_height), meth_QRect_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_height)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QRect_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_intersected)},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QRect_intersects, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_intersects)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QRect_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QRect_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRect_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_isValid)},
    {SIP_MLNAME_CAST(sipName_left), meth_QRect_left, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_left)},
    {SIP_MLNAME_CAST(sipName_marginsAdded), meth_QRect_marginsAdded, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_marginsAdded)},
    {SIP_MLNAME_CAST(sipName_marginsRemoved), meth_QRect_marginsRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_marginsRemoved)},
    {SIP_MLNAME_CAST(sipName_moveBottom), meth_QRect_moveBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveBottom)},
    {SIP_MLNAME_CAST(sipName_moveBottomLeft), meth_QRect_moveBottomLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveBottomLeft)},
    {SIP_MLNAME_CAST(sipName_moveBottomRight), meth_QRect_moveBottomRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveBottomRight)},
    {SIP_MLNAME_CAST(sipName_moveCenter), meth_QRect_moveCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveCenter)},
    {SIP_MLNAME_CAST(sipName_moveLeft), meth_QRect_moveLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveLeft)},
    {SIP_MLNAME_CAST(sipName_moveRight), meth_QRect_moveRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveRight)},
    {SIP_MLNAME_CAST(sipName_moveTo), meth_QRect_moveTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveTo)},
    {SIP_MLNAME_CAST(sipName_moveTop), meth_QRect_moveTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveTop)},
    {SIP_MLNAME_CAST(sipName_moveTopLeft), meth_QRect_moveTopLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveTopLeft)},
    {SIP_MLNAME_CAST(sipName_moveTopRight), meth_QRect_moveTopRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_moveTopRight)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QRect_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_normalized)},
    {SIP_MLNAME_CAST(sipName_right), meth_QRect_right, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_right)},
    {SIP_MLNAME_CAST(sipName_setBottom), meth_QRect_setBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setBottom)},
    {SIP_MLNAME_CAST(sipName_setBottomLeft), meth_QRect_setBottomLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setBottomLeft)},
    {SIP_MLNAME_CAST(sipName_setBottomRight), meth_QRect_setBottomRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setBottomRight)},
    {SIP_MLNAME_CAST(sipName_setCoords), meth_QRect_setCoords, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setCoords)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QRect_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setHeight)},
    {SIP_MLNAME_CAST(sipName_setLeft), meth_QRect_setLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setLeft)},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QRect_setRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setRect)},
    {SIP_MLNAME_CAST(sipName_setRight), meth_QRect_setRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setRight)},
    {SIP_MLNAME_CAST(sipName_setSize), meth_QRect_setSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setSize)},
    {SIP_MLNAME_CAST(sipName_setTop), meth_QRect_setTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setTop)},
    {SIP_MLNAME_CAST(sipName_setTopLeft), meth_QRect_setTopLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setTopLeft)},
    {SIP_MLNAME_CAST(sipName_setTopRight), meth_QRect_setTopRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setTopRight)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QRect_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setWidth)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QRect_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QRect_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_setY)},
    {SIP_MLNAME_CAST(sipName_size), meth_QRect_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_size)},
    {SIP_MLNAME_CAST(sipName_top), meth_QRect_top, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_top)},
    {SIP_MLNAME_CAST(sipName_topLeft), meth_QRect_topLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_topLeft)},
    {SIP_MLNAME_CAST(sipName_topRight), meth_QRect_topRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_topRight)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QRect_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QRect_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_translated)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QRect_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_transposed)},
    {SIP_MLNAME_CAST(sipName_united), meth_QRect_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_united)},
    {SIP_MLNAME_CAST(sipName_width), meth_QRect_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_width)},
    {SIP_MLNAME_CAST(sipName_x), meth_QRect_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QRect_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QRect_y)}
};

PyDoc_STRVAR(doc_QRect, "\1QRect()\n"
"QRect(int, int, int, int)\n"
"QRect(QPoint, QPoint)\n"
"QRect(QPoint, QSize)\n"
"QRect(QRect)");


static pyqt5ClassPluginDef plugin_QRect = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRect = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRect,
        {SIP_NULLPTR},
        &plugin_QRect
    },
    {
        sipNameNr_QRect,
        {0, 0, 1},
        56, methods_QRect,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRect,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRect,
    init_type_QRect,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRect,
    assign_QRect,
    array_QRect,
    copy_QRect,
    release_QRect,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QRect,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 81 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
#include <qreadwritelock.h>
#line 72244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
#include <qreadwritelock.h>
#line 72248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QWriteLocker_unlock, "unlock(self)");

extern "C" {static PyObject *meth_QWriteLocker_unlock(PyObject *, PyObject *);}
static PyObject *meth_QWriteLocker_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWriteLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWriteLocker, &sipCpp))
        {
            sipCpp->unlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWriteLocker, sipName_unlock, doc_QWriteLocker_unlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWriteLocker_relock, "relock(self)");

extern "C" {static PyObject *meth_QWriteLocker_relock(PyObject *, PyObject *);}
static PyObject *meth_QWriteLocker_relock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWriteLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWriteLocker, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->relock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWriteLocker, sipName_relock, doc_QWriteLocker_relock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWriteLocker_readWriteLock, "readWriteLock(self) -> QReadWriteLock");

extern "C" {static PyObject *meth_QWriteLocker_readWriteLock(PyObject *, PyObject *);}
static PyObject *meth_QWriteLocker_readWriteLock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QWriteLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWriteLocker, &sipCpp))
        {
             ::QReadWriteLock*sipRes;

            sipRes = sipCpp->readWriteLock();

            return sipConvertFromType(sipRes,sipType_QReadWriteLock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWriteLocker, sipName_readWriteLock, doc_QWriteLocker_readWriteLock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWriteLocker___enter__, "__enter__(self) -> object");

extern "C" {static PyObject *meth_QWriteLocker___enter__(PyObject *, PyObject *);}
static PyObject *meth_QWriteLocker___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QWriteLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWriteLocker, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 92 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
        // Just return a reference to self.
        sipRes = sipSelf;
        Py_INCREF(sipRes);
#line 72354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWriteLocker, sipName___enter__, doc_QWriteLocker___enter__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QWriteLocker___exit__, "__exit__(self, object, object, object)");

extern "C" {static PyObject *meth_QWriteLocker___exit__(PyObject *, PyObject *);}
static PyObject *meth_QWriteLocker___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
         ::QWriteLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0P0P0", &sipSelf, sipType_QWriteLocker, &sipCpp, &a0, &a1, &a2))
        {
#line 99 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
        sipCpp->unlock();
#line 72385 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWriteLocker, sipName___exit__, doc_QWriteLocker___exit__);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWriteLocker(void *, int);}
static void release_QWriteLocker(void *sipCppV, int)
{
    delete reinterpret_cast< ::QWriteLocker *>(sipCppV);
}


extern "C" {static void dealloc_QWriteLocker(sipSimpleWrapper *);}
static void dealloc_QWriteLocker(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWriteLocker(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QWriteLocker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWriteLocker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QWriteLocker *sipCpp = SIP_NULLPTR;

    {
         ::QReadWriteLock* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QReadWriteLock, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QWriteLocker(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QWriteLocker[] = {
    {SIP_MLNAME_CAST(sipName___enter__), meth_QWriteLocker___enter__, METH_VARARGS, SIP_MLDOC_CAST(doc_QWriteLocker___enter__)},
    {SIP_MLNAME_CAST(sipName___exit__), meth_QWriteLocker___exit__, METH_VARARGS, SIP_MLDOC_CAST(doc_QWriteLocker___exit__)},
    {SIP_MLNAME_CAST(sipName_readWriteLock), meth_QWriteLocker_readWriteLock, METH_VARARGS, SIP_MLDOC_CAST(doc_QWriteLocker_readWriteLock)},
    {SIP_MLNAME_CAST(sipName_relock), meth_QWriteLocker_relock, METH_VARARGS, SIP_MLDOC_CAST(doc_QWriteLocker_relock)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QWriteLocker_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QWriteLocker_unlock)}
};

PyDoc_STRVAR(doc_QWriteLocker, "\1QWriteLocker(QReadWriteLock)");


static pyqt5ClassPluginDef plugin_QWriteLocker = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QWriteLocker = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QWriteLocker,
        {SIP_NULLPTR},
        &plugin_QWriteLocker
    },
    {
        sipNameNr_QWriteLocker,
        {0, 0, 1},
        5, methods_QWriteLocker,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QWriteLocker,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QWriteLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QWriteLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QWriteLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 53 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
#include <qreadwritelock.h>
#line 72510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
#include <qreadwritelock.h>
#line 72514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QReadLocker_unlock, "unlock(self)");

extern "C" {static PyObject *meth_QReadLocker_unlock(PyObject *, PyObject *);}
static PyObject *meth_QReadLocker_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QReadLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadLocker, &sipCpp))
        {
            sipCpp->unlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadLocker, sipName_unlock, doc_QReadLocker_unlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QReadLocker_relock, "relock(self)");

extern "C" {static PyObject *meth_QReadLocker_relock(PyObject *, PyObject *);}
static PyObject *meth_QReadLocker_relock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QReadLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadLocker, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->relock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadLocker, sipName_relock, doc_QReadLocker_relock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QReadLocker_readWriteLock, "readWriteLock(self) -> QReadWriteLock");

extern "C" {static PyObject *meth_QReadLocker_readWriteLock(PyObject *, PyObject *);}
static PyObject *meth_QReadLocker_readWriteLock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QReadLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadLocker, &sipCpp))
        {
             ::QReadWriteLock*sipRes;

            sipRes = sipCpp->readWriteLock();

            return sipConvertFromType(sipRes,sipType_QReadWriteLock,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadLocker, sipName_readWriteLock, doc_QReadLocker_readWriteLock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QReadLocker___enter__, "__enter__(self) -> object");

extern "C" {static PyObject *meth_QReadLocker___enter__(PyObject *, PyObject *);}
static PyObject *meth_QReadLocker___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QReadLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadLocker, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 64 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
        // Just return a reference to self.
        sipRes = sipSelf;
        Py_INCREF(sipRes);
#line 72620 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadLocker, sipName___enter__, doc_QReadLocker___enter__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QReadLocker___exit__, "__exit__(self, object, object, object)");

extern "C" {static PyObject *meth_QReadLocker___exit__(PyObject *, PyObject *);}
static PyObject *meth_QReadLocker___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
         ::QReadLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0P0P0", &sipSelf, sipType_QReadLocker, &sipCpp, &a0, &a1, &a2))
        {
#line 71 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
        sipCpp->unlock();
#line 72651 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadLocker, sipName___exit__, doc_QReadLocker___exit__);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QReadLocker(void *, int);}
static void release_QReadLocker(void *sipCppV, int)
{
    delete reinterpret_cast< ::QReadLocker *>(sipCppV);
}


extern "C" {static void dealloc_QReadLocker(sipSimpleWrapper *);}
static void dealloc_QReadLocker(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QReadLocker(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QReadLocker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QReadLocker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QReadLocker *sipCpp = SIP_NULLPTR;

    {
         ::QReadWriteLock* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QReadWriteLock, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QReadLocker(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QReadLocker[] = {
    {SIP_MLNAME_CAST(sipName___enter__), meth_QReadLocker___enter__, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadLocker___enter__)},
    {SIP_MLNAME_CAST(sipName___exit__), meth_QReadLocker___exit__, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadLocker___exit__)},
    {SIP_MLNAME_CAST(sipName_readWriteLock), meth_QReadLocker_readWriteLock, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadLocker_readWriteLock)},
    {SIP_MLNAME_CAST(sipName_relock), meth_QReadLocker_relock, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadLocker_relock)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QReadLocker_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadLocker_unlock)}
};

PyDoc_STRVAR(doc_QReadLocker, "\1QReadLocker(QReadWriteLock)");


static pyqt5ClassPluginDef plugin_QReadLocker = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QReadLocker = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QReadLocker,
        {SIP_NULLPTR},
        &plugin_QReadLocker
    },
    {
        sipNameNr_QReadLocker,
        {0, 0, 1},
        5, methods_QReadLocker,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QReadLocker,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QReadLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QReadLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QReadLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qreadwritelock.sip"
#include <qreadwritelock.h>
#line 72776 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



PyDoc_STRVAR(doc_QReadWriteLock_lockForRead, "lockForRead(self)");

extern "C" {static PyObject *meth_QReadWriteLock_lockForRead(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_lockForRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lockForRead();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_lockForRead, doc_QReadWriteLock_lockForRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QReadWriteLock_tryLockForRead, "tryLockForRead(self) -> bool\n"
"tryLockForRead(self, int) -> bool");

extern "C" {static PyObject *meth_QReadWriteLock_tryLockForRead(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_tryLockForRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tryLockForRead();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
         ::QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QReadWriteLock, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tryLockForRead(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_tryLockForRead, doc_QReadWriteLock_tryLockForRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QReadWriteLock_lockForWrite, "lockForWrite(self)");

extern "C" {static PyObject *meth_QReadWriteLock_lockForWrite(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_lockForWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lockForWrite();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_lockForWrite, doc_QReadWriteLock_lockForWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QReadWriteLock_tryLockForWrite, "tryLockForWrite(self) -> bool\n"
"tryLockForWrite(self, int) -> bool");

extern "C" {static PyObject *meth_QReadWriteLock_tryLockForWrite(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_tryLockForWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tryLockForWrite();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
         ::QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QReadWriteLock, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tryLockForWrite(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_tryLockForWrite, doc_QReadWriteLock_tryLockForWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QReadWriteLock_unlock, "unlock(self)");

extern "C" {static PyObject *meth_QReadWriteLock_unlock(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            sipCpp->unlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_unlock, doc_QReadWriteLock_unlock);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QReadWriteLock(void *, int);}
static void release_QReadWriteLock(void *sipCppV, int)
{
    delete reinterpret_cast< ::QReadWriteLock *>(sipCppV);
}


extern "C" {static void dealloc_QReadWriteLock(sipSimpleWrapper *);}
static void dealloc_QReadWriteLock(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QReadWriteLock(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QReadWriteLock(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QReadWriteLock(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QReadWriteLock *sipCpp = SIP_NULLPTR;

    {
         ::QReadWriteLock::RecursionMode a0 = QReadWriteLock::NonRecursive;

        static const char *sipKwdList[] = {
            sipName_recursionMode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QReadWriteLock_RecursionMode, &a0))
        {
            sipCpp = new  ::QReadWriteLock(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QReadWriteLock[] = {
    {SIP_MLNAME_CAST(sipName_lockForRead), meth_QReadWriteLock_lockForRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_lockForRead)},
    {SIP_MLNAME_CAST(sipName_lockForWrite), meth_QReadWriteLock_lockForWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_lockForWrite)},
    {SIP_MLNAME_CAST(sipName_tryLockForRead), meth_QReadWriteLock_tryLockForRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_tryLockForRead)},
    {SIP_MLNAME_CAST(sipName_tryLockForWrite), meth_QReadWriteLock_tryLockForWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_tryLockForWrite)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QReadWriteLock_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_unlock)}
};

static sipEnumMemberDef enummembers_QReadWriteLock[] = {
    {sipName_NonRecursive, static_cast<int>( ::QReadWriteLock::NonRecursive), 206},
    {sipName_Recursive, static_cast<int>( ::QReadWriteLock::Recursive), 206},
};

PyDoc_STRVAR(doc_QReadWriteLock, "\1QReadWriteLock(recursionMode: QReadWriteLock.RecursionMode = QReadWriteLock.NonRecursive)");


static pyqt5ClassPluginDef plugin_QReadWriteLock = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QReadWriteLock = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QReadWriteLock,
        {SIP_NULLPTR},
        &plugin_QReadWriteLock
    },
    {
        sipNameNr_QReadWriteLock,
        {0, 0, 1},
        5, methods_QReadWriteLock,
        2, enummembers_QReadWriteLock,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QReadWriteLock,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QReadWriteLock,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QReadWriteLock,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QReadWriteLock,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrandom.sip"
#include <qrandom.h>
#line 73075 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



PyDoc_STRVAR(doc_QRandomGenerator_generate, "generate(self) -> int");

extern "C" {static PyObject *meth_QRandomGenerator_generate(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_generate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRandomGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRandomGenerator, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->generate();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_generate, doc_QRandomGenerator_generate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_generate64, "generate64(self) -> int");

extern "C" {static PyObject *meth_QRandomGenerator_generate64(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_generate64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRandomGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRandomGenerator, &sipCpp))
        {
             ::quint64 sipRes;

            sipRes = sipCpp->generate64();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_generate64, doc_QRandomGenerator_generate64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_generateDouble, "generateDouble(self) -> float");

extern "C" {static PyObject *meth_QRandomGenerator_generateDouble(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_generateDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QRandomGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRandomGenerator, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->generateDouble();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_generateDouble, doc_QRandomGenerator_generateDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_bounded, "bounded(self, float) -> float\n"
"bounded(self, int) -> int\n"
"bounded(self, int, int) -> int");

extern "C" {static PyObject *meth_QRandomGenerator_bounded(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_bounded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::QRandomGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXd", &sipSelf, sipType_QRandomGenerator, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->bounded(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    {
         ::quint32 a0;
         ::QRandomGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QRandomGenerator, &sipCpp, &a0))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->bounded(a0);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
         ::QRandomGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QRandomGenerator, &sipCpp, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->bounded(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_bounded, doc_QRandomGenerator_bounded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_seed, "seed(self, seed: int = 1)");

extern "C" {static PyObject *meth_QRandomGenerator_seed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_seed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint32 a0 = 1;
         ::QRandomGenerator *sipCpp;

        static const char *sipKwdList[] = {
            sipName_seed,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|u", &sipSelf, sipType_QRandomGenerator, &sipCpp, &a0))
        {
            sipCpp->seed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_seed, doc_QRandomGenerator_seed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_discard, "discard(self, int)");

extern "C" {static PyObject *meth_QRandomGenerator_discard(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_discard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        unsigned PY_LONG_LONG a0;
         ::QRandomGenerator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bo", &sipSelf, sipType_QRandomGenerator, &sipCpp, &a0))
        {
            sipCpp->discard(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_discard, doc_QRandomGenerator_discard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_min, "min() -> int");

extern "C" {static PyObject *meth_QRandomGenerator_min(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_min(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QRandomGenerator::result_type sipRes;

            sipRes =  ::QRandomGenerator::min();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_min, doc_QRandomGenerator_min);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_max, "max() -> int");

extern "C" {static PyObject *meth_QRandomGenerator_max(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_max(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QRandomGenerator::result_type sipRes;

            sipRes =  ::QRandomGenerator::max();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_max, doc_QRandomGenerator_max);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_system, "system() -> QRandomGenerator");

extern "C" {static PyObject *meth_QRandomGenerator_system(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_system(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QRandomGenerator*sipRes;

            sipRes =  ::QRandomGenerator::system();

            return sipConvertFromType(sipRes,sipType_QRandomGenerator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_system, doc_QRandomGenerator_system);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_global_, "global_() -> QRandomGenerator");

extern "C" {static PyObject *meth_QRandomGenerator_global_(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_global_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QRandomGenerator*sipRes;

            sipRes =  ::QRandomGenerator::global();

            return sipConvertFromType(sipRes,sipType_QRandomGenerator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_global_, doc_QRandomGenerator_global_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QRandomGenerator_securelySeeded, "securelySeeded() -> QRandomGenerator");

extern "C" {static PyObject *meth_QRandomGenerator_securelySeeded(PyObject *, PyObject *);}
static PyObject *meth_QRandomGenerator_securelySeeded(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QRandomGenerator*sipRes;

            sipRes = new  ::QRandomGenerator( ::QRandomGenerator::securelySeeded());

            return sipConvertFromNewType(sipRes,sipType_QRandomGenerator,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName_securelySeeded, doc_QRandomGenerator_securelySeeded);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QRandomGenerator___eq__(PyObject *,PyObject *);}
static PyObject *slot_QRandomGenerator___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRandomGenerator *sipCpp = reinterpret_cast< ::QRandomGenerator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRandomGenerator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRandomGenerator* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRandomGenerator, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QRandomGenerator, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRandomGenerator___ne__(PyObject *,PyObject *);}
static PyObject *slot_QRandomGenerator___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QRandomGenerator *sipCpp = reinterpret_cast< ::QRandomGenerator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRandomGenerator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QRandomGenerator* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QRandomGenerator, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QRandomGenerator, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QRandomGenerator___call__(PyObject *,PyObject *,PyObject *);}
static PyObject *slot_QRandomGenerator___call__(PyObject *sipSelf,PyObject *sipArgs,PyObject *)
{
     ::QRandomGenerator *sipCpp = reinterpret_cast< ::QRandomGenerator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRandomGenerator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QRandomGenerator::result_type sipRes;

            sipRes = (*sipCpp)();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRandomGenerator, sipName___call__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRandomGenerator(void *, int);}
static void release_QRandomGenerator(void *sipCppV, int)
{
    delete reinterpret_cast< ::QRandomGenerator *>(sipCppV);
}


extern "C" {static void assign_QRandomGenerator(void *, SIP_SSIZE_T, void *);}
static void assign_QRandomGenerator(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QRandomGenerator *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QRandomGenerator *>(sipSrc);
}


extern "C" {static void *array_QRandomGenerator(SIP_SSIZE_T);}
static void *array_QRandomGenerator(SIP_SSIZE_T sipNrElem)
{
    return new  ::QRandomGenerator[sipNrElem];
}


extern "C" {static void *copy_QRandomGenerator(const void *, SIP_SSIZE_T);}
static void *copy_QRandomGenerator(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QRandomGenerator(reinterpret_cast<const  ::QRandomGenerator *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRandomGenerator(sipSimpleWrapper *);}
static void dealloc_QRandomGenerator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRandomGenerator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QRandomGenerator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRandomGenerator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QRandomGenerator *sipCpp = SIP_NULLPTR;

    {
         ::quint32 a0 = 1;

        static const char *sipKwdList[] = {
            sipName_seed,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|u", &a0))
        {
            sipCpp = new  ::QRandomGenerator(a0);

            return sipCpp;
        }
    }

    {
        const  ::QRandomGenerator* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QRandomGenerator, &a0))
        {
            sipCpp = new  ::QRandomGenerator(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRandomGenerator[] = {
    {(void *)slot_QRandomGenerator___eq__, eq_slot},
    {(void *)slot_QRandomGenerator___ne__, ne_slot},
    {(void *)slot_QRandomGenerator___call__, call_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRandomGenerator[] = {
    {SIP_MLNAME_CAST(sipName_bounded), meth_QRandomGenerator_bounded, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_bounded)},
    {SIP_MLNAME_CAST(sipName_discard), meth_QRandomGenerator_discard, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_discard)},
    {SIP_MLNAME_CAST(sipName_generate), meth_QRandomGenerator_generate, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_generate)},
    {SIP_MLNAME_CAST(sipName_generate64), meth_QRandomGenerator_generate64, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_generate64)},
    {SIP_MLNAME_CAST(sipName_generateDouble), meth_QRandomGenerator_generateDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_generateDouble)},
    {SIP_MLNAME_CAST(sipName_global_), meth_QRandomGenerator_global_, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_global_)},
    {SIP_MLNAME_CAST(sipName_max), meth_QRandomGenerator_max, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_max)},
    {SIP_MLNAME_CAST(sipName_min), meth_QRandomGenerator_min, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_min)},
    {SIP_MLNAME_CAST(sipName_securelySeeded), meth_QRandomGenerator_securelySeeded, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_securelySeeded)},
    {SIP_MLNAME_CAST(sipName_seed), SIP_MLMETH_CAST(meth_QRandomGenerator_seed), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRandomGenerator_seed)},
    {SIP_MLNAME_CAST(sipName_system), meth_QRandomGenerator_system, METH_VARARGS, SIP_MLDOC_CAST(doc_QRandomGenerator_system)}
};

PyDoc_STRVAR(doc_QRandomGenerator, "\1QRandomGenerator(seed: int = 1)\n"
"QRandomGenerator(QRandomGenerator)");


static pyqt5ClassPluginDef plugin_QRandomGenerator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QRandomGenerator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QRandomGenerator,
        {SIP_NULLPTR},
        &plugin_QRandomGenerator
    },
    {
        sipNameNr_QRandomGenerator,
        {0, 0, 1},
        11, methods_QRandomGenerator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QRandomGenerator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QRandomGenerator,
    init_type_QRandomGenerator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QRandomGenerator,
    assign_QRandomGenerator,
    array_QRandomGenerator,
    copy_QRandomGenerator,
    release_QRandomGenerator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 73669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 73673 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 73676 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QProcessEnvironment_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QProcessEnvironment_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcessEnvironment, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_isEmpty, doc_QProcessEnvironment_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_clear, "clear(self)");

extern "C" {static PyObject *meth_QProcessEnvironment_clear(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcessEnvironment, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_clear, doc_QProcessEnvironment_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_contains, "contains(self, str) -> bool");

extern "C" {static PyObject *meth_QProcessEnvironment_contains(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcessEnvironment, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_contains, doc_QProcessEnvironment_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_insert, "insert(self, str, str)\n"
"insert(self, QProcessEnvironment)");

extern "C" {static PyObject *meth_QProcessEnvironment_insert(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QProcessEnvironment, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->insert(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QProcessEnvironment* a0;
         ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProcessEnvironment, &sipCpp, sipType_QProcessEnvironment, &a0))
        {
            sipCpp->insert(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_insert, doc_QProcessEnvironment_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_remove, "remove(self, str)");

extern "C" {static PyObject *meth_QProcessEnvironment_remove(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcessEnvironment, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->remove(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_remove, doc_QProcessEnvironment_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_value, "value(self, str, defaultValue: str = '') -> str");

extern "C" {static PyObject *meth_QProcessEnvironment_value(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_value(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QProcessEnvironment *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QProcessEnvironment, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->value(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_value, doc_QProcessEnvironment_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_toStringList, "toStringList(self) -> List[str]");

extern "C" {static PyObject *meth_QProcessEnvironment_toStringList(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_toStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcessEnvironment, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->toStringList());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_toStringList, doc_QProcessEnvironment_toStringList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_systemEnvironment, "systemEnvironment() -> QProcessEnvironment");

extern "C" {static PyObject *meth_QProcessEnvironment_systemEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_systemEnvironment(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QProcessEnvironment*sipRes;

            sipRes = new  ::QProcessEnvironment( ::QProcessEnvironment::systemEnvironment());

            return sipConvertFromNewType(sipRes,sipType_QProcessEnvironment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_systemEnvironment, doc_QProcessEnvironment_systemEnvironment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_keys, "keys(self) -> List[str]");

extern "C" {static PyObject *meth_QProcessEnvironment_keys(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_keys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcessEnvironment, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->keys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_keys, doc_QProcessEnvironment_keys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcessEnvironment_swap, "swap(self, QProcessEnvironment)");

extern "C" {static PyObject *meth_QProcessEnvironment_swap(PyObject *, PyObject *);}
static PyObject *meth_QProcessEnvironment_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcessEnvironment* a0;
         ::QProcessEnvironment *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProcessEnvironment, &sipCpp, sipType_QProcessEnvironment, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcessEnvironment, sipName_swap, doc_QProcessEnvironment_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QProcessEnvironment___ne__(PyObject *,PyObject *);}
static PyObject *slot_QProcessEnvironment___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QProcessEnvironment *sipCpp = reinterpret_cast< ::QProcessEnvironment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QProcessEnvironment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcessEnvironment* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QProcessEnvironment, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QProcessEnvironment::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QProcessEnvironment, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QProcessEnvironment___eq__(PyObject *,PyObject *);}
static PyObject *slot_QProcessEnvironment___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QProcessEnvironment *sipCpp = reinterpret_cast< ::QProcessEnvironment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QProcessEnvironment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcessEnvironment* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QProcessEnvironment, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QProcessEnvironment::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QProcessEnvironment, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QProcessEnvironment(void *, int);}
static void release_QProcessEnvironment(void *sipCppV, int)
{
    delete reinterpret_cast< ::QProcessEnvironment *>(sipCppV);
}


extern "C" {static void assign_QProcessEnvironment(void *, SIP_SSIZE_T, void *);}
static void assign_QProcessEnvironment(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QProcessEnvironment *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QProcessEnvironment *>(sipSrc);
}


extern "C" {static void *array_QProcessEnvironment(SIP_SSIZE_T);}
static void *array_QProcessEnvironment(SIP_SSIZE_T sipNrElem)
{
    return new  ::QProcessEnvironment[sipNrElem];
}


extern "C" {static void *copy_QProcessEnvironment(const void *, SIP_SSIZE_T);}
static void *copy_QProcessEnvironment(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QProcessEnvironment(reinterpret_cast<const  ::QProcessEnvironment *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QProcessEnvironment(sipSimpleWrapper *);}
static void dealloc_QProcessEnvironment(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QProcessEnvironment(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QProcessEnvironment(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QProcessEnvironment(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QProcessEnvironment *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QProcessEnvironment();

            return sipCpp;
        }
    }

    {
        const  ::QProcessEnvironment* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QProcessEnvironment, &a0))
        {
            sipCpp = new  ::QProcessEnvironment(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QProcessEnvironment[] = {
    {(void *)slot_QProcessEnvironment___ne__, ne_slot},
    {(void *)slot_QProcessEnvironment___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QProcessEnvironment[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QProcessEnvironment_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QProcessEnvironment_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_contains)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QProcessEnvironment_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_insert)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QProcessEnvironment_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_isEmpty)},
    {SIP_MLNAME_CAST(sipName_keys), meth_QProcessEnvironment_keys, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_keys)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QProcessEnvironment_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_remove)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QProcessEnvironment_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_swap)},
    {SIP_MLNAME_CAST(sipName_systemEnvironment), meth_QProcessEnvironment_systemEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_systemEnvironment)},
    {SIP_MLNAME_CAST(sipName_toStringList), meth_QProcessEnvironment_toStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcessEnvironment_toStringList)},
    {SIP_MLNAME_CAST(sipName_value), SIP_MLMETH_CAST(meth_QProcessEnvironment_value), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcessEnvironment_value)}
};

PyDoc_STRVAR(doc_QProcessEnvironment, "\1QProcessEnvironment()\n"
"QProcessEnvironment(QProcessEnvironment)");


static pyqt5ClassPluginDef plugin_QProcessEnvironment = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QProcessEnvironment = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QProcessEnvironment,
        {SIP_NULLPTR},
        &plugin_QProcessEnvironment
    },
    {
        sipNameNr_QProcessEnvironment,
        {0, 0, 1},
        10, methods_QProcessEnvironment,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QProcessEnvironment,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QProcessEnvironment,
    init_type_QProcessEnvironment,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QProcessEnvironment,
    assign_QProcessEnvironment,
    array_QProcessEnvironment,
    copy_QProcessEnvironment,
    release_QProcessEnvironment,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 74211 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 74215 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 74218 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 74221 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 74224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 74227 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 74230 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 74233 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74236 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74239 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 74242 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74248 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74251 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74254 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 74257 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 74260 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 74263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 74266 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 74269 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQProcess : public  ::QProcess
{
public:
    sipQProcess( ::QObject*);
    virtual ~sipQProcess();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setupChildProcess() SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProcess(const sipQProcess &);
    sipQProcess &operator = (const sipQProcess &);

    char sipPyMethods[24];
};

sipQProcess::sipQProcess( ::QObject*a0):  ::QProcess(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProcess::~sipQProcess()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQProcess::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QProcess);

    return  ::QProcess::metaObject();
}

int sipQProcess::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QProcess::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QProcess,_c,_id,_a);

    return _id;
}

void *sipQProcess::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QProcess, _clname, &sipCpp) ? sipCpp :  ::QProcess::qt_metacast(_clname));
}

void sipQProcess::setupChildProcess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_setupChildProcess);

    if (!sipMeth)
    {
         ::QProcess::setupChildProcess();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQProcess::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QProcess::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QProcess::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QProcess::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QProcess::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QProcess::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QProcess::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQProcess::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QProcess::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QProcess::isSequential();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QProcess::open(a0);

    extern bool sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QProcess::close();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQProcess::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QProcess::pos();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQProcess::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QProcess::size();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QProcess::seek(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QProcess::atEnd();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QProcess::reset();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQProcess::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QProcess::bytesAvailable();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQProcess::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QProcess::bytesToWrite();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QProcess::canReadLine();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QProcess::waitForReadyRead(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QProcess::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQProcess::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_readData);

    if (!sipMeth)
        return  ::QProcess::readData(a0,a1);

    extern  ::qint64 sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQProcess::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QProcess::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_48(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQProcess::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QProcess::writeData(a0,a1);

    extern  ::qint64 sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_49(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QProcess_start, "start(self, str, Iterable[str], mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
"start(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
"start(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QProcess_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            sipCpp->start(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice::OpenMode a1def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->start(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QIODevice::OpenMode a0def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp->start(*a0);
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_start, doc_QProcess_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_readChannel, "readChannel(self) -> QProcess.ProcessChannel");

extern "C" {static PyObject *meth_QProcess_readChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ProcessChannel sipRes;

            sipRes = sipCpp->readChannel();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ProcessChannel);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readChannel, doc_QProcess_readChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setReadChannel, "setReadChannel(self, QProcess.ProcessChannel)");

extern "C" {static PyObject *meth_QProcess_setReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::ProcessChannel a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannel, &a0))
        {
            sipCpp->setReadChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setReadChannel, doc_QProcess_setReadChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_closeReadChannel, "closeReadChannel(self, QProcess.ProcessChannel)");

extern "C" {static PyObject *meth_QProcess_closeReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_closeReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::ProcessChannel a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannel, &a0))
        {
            sipCpp->closeReadChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_closeReadChannel, doc_QProcess_closeReadChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_closeWriteChannel, "closeWriteChannel(self)");

extern "C" {static PyObject *meth_QProcess_closeWriteChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_closeWriteChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->closeWriteChannel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_closeWriteChannel, doc_QProcess_closeWriteChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_workingDirectory, "workingDirectory(self) -> str");

extern "C" {static PyObject *meth_QProcess_workingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QProcess_workingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->workingDirectory());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_workingDirectory, doc_QProcess_workingDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setWorkingDirectory, "setWorkingDirectory(self, str)");

extern "C" {static PyObject *meth_QProcess_setWorkingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setWorkingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWorkingDirectory(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setWorkingDirectory, doc_QProcess_setWorkingDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_error, "error(self) -> QProcess.ProcessError");

extern "C" {static PyObject *meth_QProcess_error(PyObject *, PyObject *);}
static PyObject *meth_QProcess_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ProcessError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ProcessError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_error, doc_QProcess_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_state, "state(self) -> QProcess.ProcessState");

extern "C" {static PyObject *meth_QProcess_state(PyObject *, PyObject *);}
static PyObject *meth_QProcess_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ProcessState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ProcessState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_state, doc_QProcess_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_pid, "pid(self) -> int");

extern "C" {static PyObject *meth_QProcess_pid(PyObject *, PyObject *);}
static PyObject *meth_QProcess_pid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::Q_PID sipRes;

            sipRes = sipCpp->pid();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_pid, doc_QProcess_pid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_waitForStarted, "waitForStarted(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForStarted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForStarted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 30000;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForStarted(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForStarted, doc_QProcess_waitForStarted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_waitForReadyRead, "waitForReadyRead(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForReadyRead, doc_QProcess_waitForReadyRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_waitForBytesWritten, "waitForBytesWritten(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForBytesWritten, doc_QProcess_waitForBytesWritten);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_waitForFinished, "waitForFinished(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForFinished(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForFinished(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 30000;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForFinished(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForFinished, doc_QProcess_waitForFinished);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_readAllStandardOutput, "readAllStandardOutput(self) -> QByteArray");

extern "C" {static PyObject *meth_QProcess_readAllStandardOutput(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readAllStandardOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->readAllStandardOutput());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readAllStandardOutput, doc_QProcess_readAllStandardOutput);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_readAllStandardError, "readAllStandardError(self) -> QByteArray");

extern "C" {static PyObject *meth_QProcess_readAllStandardError(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readAllStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->readAllStandardError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readAllStandardError, doc_QProcess_readAllStandardError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_exitCode, "exitCode(self) -> int");

extern "C" {static PyObject *meth_QProcess_exitCode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_exitCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->exitCode();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_exitCode, doc_QProcess_exitCode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_exitStatus, "exitStatus(self) -> QProcess.ExitStatus");

extern "C" {static PyObject *meth_QProcess_exitStatus(PyObject *, PyObject *);}
static PyObject *meth_QProcess_exitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ExitStatus sipRes;

            sipRes = sipCpp->exitStatus();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ExitStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_exitStatus, doc_QProcess_exitStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QProcess_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QProcess_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_bytesAvailable, doc_QProcess_bytesAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QProcess_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QProcess_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_bytesToWrite, doc_QProcess_bytesToWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QProcess_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QProcess_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_isSequential, doc_QProcess_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QProcess_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QProcess_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_canReadLine, doc_QProcess_canReadLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_close, "close(self)");

extern "C" {static PyObject *meth_QProcess_close(PyObject *, PyObject *);}
static PyObject *meth_QProcess_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QProcess::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_close, doc_QProcess_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QProcess_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QProcess_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_atEnd, doc_QProcess_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_execute, "execute(str, Iterable[str]) -> int\n"
"execute(str) -> int");

extern "C" {static PyObject *meth_QProcess_execute(PyObject *, PyObject *);}
static PyObject *meth_QProcess_execute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QProcess::execute(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QProcess::execute(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_execute, doc_QProcess_execute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_startDetached, "startDetached(str, Iterable[str], str) -> Tuple[bool, int]\n"
"startDetached(str, Iterable[str]) -> bool\n"
"startDetached(str) -> bool\n"
"startDetached(self) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QProcess_startDetached(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_startDetached(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::qint64 a3;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            sipRes =  ::QProcess::startDetached(*a0,*a1,*a2,&a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipBuildResult(0,"(bn)",sipRes,a3);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QProcess::startDetached(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QProcess::startDetached(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::qint64 a0;
         ::QProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->startDetached(&a0);

            return sipBuildResult(0,"(bn)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_startDetached, doc_QProcess_startDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_systemEnvironment, "systemEnvironment() -> List[str]");

extern "C" {static PyObject *meth_QProcess_systemEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_systemEnvironment(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QProcess::systemEnvironment());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_systemEnvironment, doc_QProcess_systemEnvironment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_processChannelMode, "processChannelMode(self) -> QProcess.ProcessChannelMode");

extern "C" {static PyObject *meth_QProcess_processChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::ProcessChannelMode sipRes;

            sipRes = sipCpp->processChannelMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_ProcessChannelMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processChannelMode, doc_QProcess_processChannelMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setProcessChannelMode, "setProcessChannelMode(self, QProcess.ProcessChannelMode)");

extern "C" {static PyObject *meth_QProcess_setProcessChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::ProcessChannelMode a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannelMode, &a0))
        {
            sipCpp->setProcessChannelMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessChannelMode, doc_QProcess_setProcessChannelMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setStandardInputFile, "setStandardInputFile(self, str)");

extern "C" {static PyObject *meth_QProcess_setStandardInputFile(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardInputFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStandardInputFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardInputFile, doc_QProcess_setStandardInputFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setStandardOutputFile, "setStandardOutputFile(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.Truncate)");

extern "C" {static PyObject *meth_QProcess_setStandardOutputFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardOutputFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice::OpenMode a1def = QIODevice::Truncate;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->setStandardOutputFile(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardOutputFile, doc_QProcess_setStandardOutputFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setStandardErrorFile, "setStandardErrorFile(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.Truncate)");

extern "C" {static PyObject *meth_QProcess_setStandardErrorFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardErrorFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice::OpenMode a1def = QIODevice::Truncate;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->setStandardErrorFile(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardErrorFile, doc_QProcess_setStandardErrorFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setStandardOutputProcess, "setStandardOutputProcess(self, QProcess)");

extern "C" {static PyObject *meth_QProcess_setStandardOutputProcess(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardOutputProcess(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess* a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess, &a0))
        {
            sipCpp->setStandardOutputProcess(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardOutputProcess, doc_QProcess_setStandardOutputProcess);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_terminate, "terminate(self)");

extern "C" {static PyObject *meth_QProcess_terminate(PyObject *, PyObject *);}
static PyObject *meth_QProcess_terminate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->terminate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_terminate, doc_QProcess_terminate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_kill, "kill(self)");

extern "C" {static PyObject *meth_QProcess_kill(PyObject *, PyObject *);}
static PyObject *meth_QProcess_kill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->kill();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_kill, doc_QProcess_kill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setProcessState, "setProcessState(self, QProcess.ProcessState)");

extern "C" {static PyObject *meth_QProcess_setProcessState(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::ProcessState a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessState, &a0))
        {
            sipCpp->setProcessState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessState, doc_QProcess_setProcessState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setupChildProcess, "setupChildProcess(self)");

extern "C" {static PyObject *meth_QProcess_setupChildProcess(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setupChildProcess(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QProcess, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QProcess::setupChildProcess() : sipCpp->setupChildProcess());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setupChildProcess, doc_QProcess_setupChildProcess);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QProcess_readData(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qprocess.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QProcess::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 76045 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readData, doc_QProcess_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QProcess_writeData(PyObject *, PyObject *);}
static PyObject *meth_QProcess_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QProcess, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_writeData, doc_QProcess_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setProcessEnvironment, "setProcessEnvironment(self, QProcessEnvironment)");

extern "C" {static PyObject *meth_QProcess_setProcessEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcessEnvironment* a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcessEnvironment, &a0))
        {
            sipCpp->setProcessEnvironment(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessEnvironment, doc_QProcess_setProcessEnvironment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_processEnvironment, "processEnvironment(self) -> QProcessEnvironment");

extern "C" {static PyObject *meth_QProcess_processEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcessEnvironment*sipRes;

            sipRes = new  ::QProcessEnvironment(sipCpp->processEnvironment());

            return sipConvertFromNewType(sipRes,sipType_QProcessEnvironment,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processEnvironment, doc_QProcess_processEnvironment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_program, "program(self) -> str");

extern "C" {static PyObject *meth_QProcess_program(PyObject *, PyObject *);}
static PyObject *meth_QProcess_program(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->program());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_program, doc_QProcess_program);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setProgram, "setProgram(self, str)");

extern "C" {static PyObject *meth_QProcess_setProgram(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setProgram(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProgram, doc_QProcess_setProgram);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_arguments, "arguments(self) -> List[str]");

extern "C" {static PyObject *meth_QProcess_arguments(PyObject *, PyObject *);}
static PyObject *meth_QProcess_arguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->arguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_arguments, doc_QProcess_arguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setArguments, "setArguments(self, Iterable[str])");

extern "C" {static PyObject *meth_QProcess_setArguments(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setArguments(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setArguments, doc_QProcess_setArguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_open, "open(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QProcess_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice::OpenMode a0def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
         ::QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProcess::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_open, doc_QProcess_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_inputChannelMode, "inputChannelMode(self) -> QProcess.InputChannelMode");

extern "C" {static PyObject *meth_QProcess_inputChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_inputChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::QProcess::InputChannelMode sipRes;

            sipRes = sipCpp->inputChannelMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QProcess_InputChannelMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_inputChannelMode, doc_QProcess_inputChannelMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_setInputChannelMode, "setInputChannelMode(self, QProcess.InputChannelMode)");

extern "C" {static PyObject *meth_QProcess_setInputChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setInputChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QProcess::InputChannelMode a0;
         ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_InputChannelMode, &a0))
        {
            sipCpp->setInputChannelMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setInputChannelMode, doc_QProcess_setInputChannelMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_nullDevice, "nullDevice() -> str");

extern "C" {static PyObject *meth_QProcess_nullDevice(PyObject *, PyObject *);}
static PyObject *meth_QProcess_nullDevice(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QProcess::nullDevice());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_nullDevice, doc_QProcess_nullDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QProcess_processId, "processId(self) -> int");

extern "C" {static PyObject *meth_QProcess_processId(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->processId();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processId, doc_QProcess_processId);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QProcess(void *, const sipTypeDef *);}
static void *cast_QProcess(void *sipCppV, const sipTypeDef *targetType)
{
     ::QProcess *sipCpp = reinterpret_cast< ::QProcess *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProcess(void *, int);}
static void release_QProcess(void *sipCppV, int)
{
     ::QProcess *sipCpp = reinterpret_cast< ::QProcess *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QProcess(sipSimpleWrapper *);}
static void dealloc_QProcess(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQProcess *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QProcess(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QProcess(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QProcess(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQProcess *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQProcess(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProcess[] = {{95, 255, 1}};


static PyMethodDef methods_QProcess[] = {
    {SIP_MLNAME_CAST(sipName_arguments), meth_QProcess_arguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_arguments)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QProcess_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_atEnd)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QProcess_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QProcess_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QProcess_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QProcess_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_close)},
    {SIP_MLNAME_CAST(sipName_closeReadChannel), meth_QProcess_closeReadChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_closeReadChannel)},
    {SIP_MLNAME_CAST(sipName_closeWriteChannel), meth_QProcess_closeWriteChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_closeWriteChannel)},
    {SIP_MLNAME_CAST(sipName_error), meth_QProcess_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_error)},
    {SIP_MLNAME_CAST(sipName_execute), meth_QProcess_execute, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_execute)},
    {SIP_MLNAME_CAST(sipName_exitCode), meth_QProcess_exitCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_exitCode)},
    {SIP_MLNAME_CAST(sipName_exitStatus), meth_QProcess_exitStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_exitStatus)},
    {SIP_MLNAME_CAST(sipName_inputChannelMode), meth_QProcess_inputChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_inputChannelMode)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QProcess_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_isSequential)},
    {SIP_MLNAME_CAST(sipName_kill), meth_QProcess_kill, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_kill)},
    {SIP_MLNAME_CAST(sipName_nullDevice), meth_QProcess_nullDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_nullDevice)},
    {SIP_MLNAME_CAST(sipName_open), SIP_MLMETH_CAST(meth_QProcess_open), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_open)},
    {SIP_MLNAME_CAST(sipName_pid), meth_QProcess_pid, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_pid)},
    {SIP_MLNAME_CAST(sipName_processChannelMode), meth_QProcess_processChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_processChannelMode)},
    {SIP_MLNAME_CAST(sipName_processEnvironment), meth_QProcess_processEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_processEnvironment)},
    {SIP_MLNAME_CAST(sipName_processId), meth_QProcess_processId, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_processId)},
    {SIP_MLNAME_CAST(sipName_program), meth_QProcess_program, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_program)},
    {SIP_MLNAME_CAST(sipName_readAllStandardError), meth_QProcess_readAllStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readAllStandardError)},
    {SIP_MLNAME_CAST(sipName_readAllStandardOutput), meth_QProcess_readAllStandardOutput, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readAllStandardOutput)},
    {SIP_MLNAME_CAST(sipName_readChannel), meth_QProcess_readChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readChannel)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QProcess_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readData)},
    {SIP_MLNAME_CAST(sipName_setArguments), meth_QProcess_setArguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setArguments)},
    {SIP_MLNAME_CAST(sipName_setInputChannelMode), meth_QProcess_setInputChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setInputChannelMode)},
    {SIP_MLNAME_CAST(sipName_setProcessChannelMode), meth_QProcess_setProcessChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProcessChannelMode)},
    {SIP_MLNAME_CAST(sipName_setProcessEnvironment), meth_QProcess_setProcessEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProcessEnvironment)},
    {SIP_MLNAME_CAST(sipName_setProcessState), meth_QProcess_setProcessState, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProcessState)},
    {SIP_MLNAME_CAST(sipName_setProgram), meth_QProcess_setProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProgram)},
    {SIP_MLNAME_CAST(sipName_setReadChannel), meth_QProcess_setReadChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setReadChannel)},
    {SIP_MLNAME_CAST(sipName_setStandardErrorFile), SIP_MLMETH_CAST(meth_QProcess_setStandardErrorFile), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_setStandardErrorFile)},
    {SIP_MLNAME_CAST(sipName_setStandardInputFile), meth_QProcess_setStandardInputFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setStandardInputFile)},
    {SIP_MLNAME_CAST(sipName_setStandardOutputFile), SIP_MLMETH_CAST(meth_QProcess_setStandardOutputFile), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_setStandardOutputFile)},
    {SIP_MLNAME_CAST(sipName_setStandardOutputProcess), meth_QProcess_setStandardOutputProcess, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setStandardOutputProcess)},
    {SIP_MLNAME_CAST(sipName_setWorkingDirectory), meth_QProcess_setWorkingDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setWorkingDirectory)},
    {SIP_MLNAME_CAST(sipName_setupChildProcess), meth_QProcess_setupChildProcess, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setupChildProcess)},
    {SIP_MLNAME_CAST(sipName_start), SIP_MLMETH_CAST(meth_QProcess_start), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_start)},
    {SIP_MLNAME_CAST(sipName_startDetached), SIP_MLMETH_CAST(meth_QProcess_startDetached), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_startDetached)},
    {SIP_MLNAME_CAST(sipName_state), meth_QProcess_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_state)},
    {SIP_MLNAME_CAST(sipName_systemEnvironment), meth_QProcess_systemEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_systemEnvironment)},
    {SIP_MLNAME_CAST(sipName_terminate), meth_QProcess_terminate, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_terminate)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), SIP_MLMETH_CAST(meth_QProcess_waitForBytesWritten), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForFinished), SIP_MLMETH_CAST(meth_QProcess_waitForFinished), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForFinished)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), SIP_MLMETH_CAST(meth_QProcess_waitForReadyRead), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_waitForStarted), SIP_MLMETH_CAST(meth_QProcess_waitForStarted), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForStarted)},
    {SIP_MLNAME_CAST(sipName_workingDirectory), meth_QProcess_workingDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_workingDirectory)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QProcess_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_writeData)}
};

static sipEnumMemberDef enummembers_QProcess[] = {
    {sipName_CrashExit, static_cast<int>( ::QProcess::CrashExit), 195},
    {sipName_Crashed, static_cast<int>( ::QProcess::Crashed), 199},
    {sipName_FailedToStart, static_cast<int>( ::QProcess::FailedToStart), 199},
    {sipName_ForwardedChannels, static_cast<int>( ::QProcess::ForwardedChannels), 198},
    {sipName_ForwardedErrorChannel, static_cast<int>( ::QProcess::ForwardedErrorChannel), 198},
    {sipName_ForwardedInputChannel, static_cast<int>( ::QProcess::ForwardedInputChannel), 196},
    {sipName_ForwardedOutputChannel, static_cast<int>( ::QProcess::ForwardedOutputChannel), 198},
    {sipName_ManagedInputChannel, static_cast<int>( ::QProcess::ManagedInputChannel), 196},
    {sipName_MergedChannels, static_cast<int>( ::QProcess::MergedChannels), 198},
    {sipName_NormalExit, static_cast<int>( ::QProcess::NormalExit), 195},
    {sipName_NotRunning, static_cast<int>( ::QProcess::NotRunning), 200},
    {sipName_ReadError, static_cast<int>( ::QProcess::ReadError), 199},
    {sipName_Running, static_cast<int>( ::QProcess::Running), 200},
    {sipName_SeparateChannels, static_cast<int>( ::QProcess::SeparateChannels), 198},
    {sipName_StandardError, static_cast<int>( ::QProcess::StandardError), 197},
    {sipName_StandardOutput, static_cast<int>( ::QProcess::StandardOutput), 197},
    {sipName_Starting, static_cast<int>( ::QProcess::Starting), 200},
    {sipName_Timedout, static_cast<int>( ::QProcess::Timedout), 199},
    {sipName_UnknownError, static_cast<int>( ::QProcess::UnknownError), 199},
    {sipName_WriteError, static_cast<int>( ::QProcess::WriteError), 199},
};

PyDoc_STRVAR(doc_QProcess, "\1QProcess(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QProcess[] = {
    {"errorOccurred(QProcess::ProcessError)", "\1errorOccurred(self, QProcess.ProcessError)", SIP_NULLPTR, SIP_NULLPTR},
    {"readyReadStandardError()", "\1readyReadStandardError(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"readyReadStandardOutput()", "\1readyReadStandardOutput(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"stateChanged(QProcess::ProcessState)", "\1stateChanged(self, QProcess.ProcessState)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished(int,QProcess::ExitStatus)", "\1finished(self, int, QProcess.ExitStatus)", SIP_NULLPTR, SIP_NULLPTR},
    {"started()", "\1started(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QProcess::ProcessError)", "\1error(self, QProcess.ProcessError)", &methods_QProcess[8], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QProcess = {
    & ::QProcess::staticMetaObject,
    0,
    signals_QProcess,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QProcess = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QProcess,
        {SIP_NULLPTR},
        &plugin_QProcess
    },
    {
        sipNameNr_QProcess,
        {0, 0, 1},
        50, methods_QProcess,
        20, enummembers_QProcess,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QProcess,
    -1,
    -1,
    supers_QProcess,
    SIP_NULLPTR,
    init_type_QProcess,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QProcess,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QProcess,
    cast_QProcess,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 76639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 76643 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QPointF_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QPointF_isNull(PyObject *, PyObject *);}
static PyObject *meth_QPointF_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointF, sipName_isNull, doc_QPointF_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointF_x, "x(self) -> float");

extern "C" {static PyObject *meth_QPointF_x(PyObject *, PyObject *);}
static PyObject *meth_QPointF_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointF, sipName_x, doc_QPointF_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointF_y, "y(self) -> float");

extern "C" {static PyObject *meth_QPointF_y(PyObject *, PyObject *);}
static PyObject *meth_QPointF_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointF, sipName_y, doc_QPointF_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointF_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QPointF_setX(PyObject *, PyObject *);}
static PyObject *meth_QPointF_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPointF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPointF, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointF, sipName_setX, doc_QPointF_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointF_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QPointF_setY(PyObject *, PyObject *);}
static PyObject *meth_QPointF_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QPointF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPointF, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointF, sipName_setY, doc_QPointF_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointF_toPoint, "toPoint(self) -> QPoint");

extern "C" {static PyObject *meth_QPointF_toPoint(PyObject *, PyObject *);}
static PyObject *meth_QPointF_toPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointF, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->toPoint());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointF, sipName_toPoint, doc_QPointF_toPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointF_manhattanLength, "manhattanLength(self) -> float");

extern "C" {static PyObject *meth_QPointF_manhattanLength(PyObject *, PyObject *);}
static PyObject *meth_QPointF_manhattanLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPointF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->manhattanLength();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointF, sipName_manhattanLength, doc_QPointF_manhattanLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPointF_dotProduct, "dotProduct(Union[QPointF, QPoint], Union[QPointF, QPoint]) -> float");

extern "C" {static PyObject *meth_QPointF_dotProduct(PyObject *, PyObject *);}
static PyObject *meth_QPointF_dotProduct(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
             ::qreal sipRes;

            sipRes =  ::QPointF::dotProduct(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPointF, sipName_dotProduct, doc_QPointF_dotProduct);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPointF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QPointF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPointF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QPointF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPointF___add__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF((*a0 + *a1));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPointF___sub__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF((*a0 - *a1));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPointF___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1d", sipType_QPointF, &a0, &a0State, &a1))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF((*a0 * a1));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ1", &a0, sipType_QPointF, &a1, &a1State))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF((a0 * *a1));
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPointF___div__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1d", sipType_QPointF, &a0, &a0State, &a1))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF((*a0 / a1));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPointF___neg__(PyObject *);}
static PyObject *slot_QPointF___neg__(PyObject *sipSelf)
{
     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPointF___pos__(PyObject *);}
static PyObject *slot_QPointF___pos__(PyObject *sipSelf)
{
     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(+(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPointF___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPointF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QPointF::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPointF___imul__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPointF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QPointF::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPointF___isub__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPointF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp-> ::QPointF::operator-=(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPointF___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPointF___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPointF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp-> ::QPointF::operator+=(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QPointF___bool__(PyObject *);}
static int slot_QPointF___bool__(PyObject *sipSelf)
{
     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
        sipRes = !sipCpp->isNull();
#line 77308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPointF___repr__(PyObject *);}
static PyObject *slot_QPointF___repr__(PyObject *sipSelf)
{
     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPointF));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QPointF()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QPointF()");
        #endif
        }
        else
        {
            PyObject *x = PyFloat_FromDouble(sipCpp->x());
            PyObject *y = PyFloat_FromDouble(sipCpp->y());
        
            if (x && y)
            {
        #if PY_MAJOR_VERSION >= 3
                sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QPointF(%R, %R)", x, y);
        #else
                sipRes = PyString_FromString("PyQt5.QtCore.QPointF(");
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
            }
        
            Py_XDECREF(x);
            Py_XDECREF(y);
        }
#line 77361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPointF(void *, int);}
static void release_QPointF(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPointF *>(sipCppV);
}


extern "C" {static PyObject *pickle_QPointF(void *);}
static PyObject *pickle_QPointF(void *sipCppV)
{
     ::QPointF *sipCpp = reinterpret_cast< ::QPointF *>(sipCppV);
    PyObject *sipRes;

#line 131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
    sipRes = Py_BuildValue((char *)"dd", sipCpp->x(), sipCpp->y());
#line 77387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QPointF(void *, SIP_SSIZE_T, void *);}
static void assign_QPointF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPointF *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPointF *>(sipSrc);
}


extern "C" {static void *array_QPointF(SIP_SSIZE_T);}
static void *array_QPointF(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPointF[sipNrElem];
}


extern "C" {static void *copy_QPointF(const void *, SIP_SSIZE_T);}
static void *copy_QPointF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPointF(reinterpret_cast<const  ::QPointF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPointF(sipSimpleWrapper *);}
static void dealloc_QPointF(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPointF(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPointF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPointF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPointF *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPointF();

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dd", &a0, &a1))
        {
            sipCpp = new  ::QPointF(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPoint, &a0))
        {
            sipCpp = new  ::QPointF(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp = new  ::QPointF(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QPointF(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPointF(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QPointF **sipCppPtr = reinterpret_cast< ::QPointF **>(sipCppPtrV);

#line 99 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
// Allow a QPoint whenever a QPointF is expected.  This is mainly to help source
// compatibility for Qt5.

if (sipIsErr == NULL)
    return (sipCanConvertToType(sipPy, sipType_QPointF, SIP_NO_CONVERTORS) ||
            sipCanConvertToType(sipPy, sipType_QPoint, 0));

if (sipCanConvertToType(sipPy, sipType_QPointF, SIP_NO_CONVERTORS))
{
    *sipCppPtr = reinterpret_cast<QPointF *>(sipConvertToType(sipPy, sipType_QPointF, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

int state;

QPoint *pt = reinterpret_cast<QPoint *>(sipConvertToType(sipPy, sipType_QPoint, 0, 0, &state, sipIsErr));

if (*sipIsErr)
{
    sipReleaseType(pt, sipType_QPoint, state);
    return 0;
}

*sipCppPtr = new QPointF(*pt);

sipReleaseType(pt, sipType_QPoint, state);

return sipGetState(sipTransferObj);
#line 77513 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPointF[] = {
    {(void *)slot_QPointF___eq__, eq_slot},
    {(void *)slot_QPointF___ne__, ne_slot},
    {(void *)slot_QPointF___add__, add_slot},
    {(void *)slot_QPointF___sub__, sub_slot},
    {(void *)slot_QPointF___mul__, mul_slot},
    {(void *)slot_QPointF___div__, div_slot},
    {(void *)slot_QPointF___neg__, neg_slot},
    {(void *)slot_QPointF___pos__, pos_slot},
    {(void *)slot_QPointF___idiv__, idiv_slot},
    {(void *)slot_QPointF___imul__, imul_slot},
    {(void *)slot_QPointF___isub__, isub_slot},
    {(void *)slot_QPointF___iadd__, iadd_slot},
    {(void *)slot_QPointF___bool__, bool_slot},
    {(void *)slot_QPointF___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPointF[] = {
    {SIP_MLNAME_CAST(sipName_dotProduct), meth_QPointF_dotProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointF_dotProduct)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QPointF_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointF_isNull)},
    {SIP_MLNAME_CAST(sipName_manhattanLength), meth_QPointF_manhattanLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointF_manhattanLength)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QPointF_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointF_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QPointF_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointF_setY)},
    {SIP_MLNAME_CAST(sipName_toPoint), meth_QPointF_toPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointF_toPoint)},
    {SIP_MLNAME_CAST(sipName_x), meth_QPointF_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointF_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QPointF_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QPointF_y)}
};

PyDoc_STRVAR(doc_QPointF, "\1QPointF()\n"
"QPointF(float, float)\n"
"QPointF(QPoint)\n"
"QPointF(QPointF)");


static pyqt5ClassPluginDef plugin_QPointF = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QPointF = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPointF,
        {SIP_NULLPTR},
        &plugin_QPointF
    },
    {
        sipNameNr_QPointF,
        {0, 0, 1},
        8, methods_QPointF,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPointF,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPointF,
    init_type_QPointF,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPointF,
    assign_QPointF,
    array_QPointF,
    copy_QPointF,
    release_QPointF,
    SIP_NULLPTR,
    convertTo_QPointF,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QPointF,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 77617 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



PyDoc_STRVAR(doc_QPoint_manhattanLength, "manhattanLength(self) -> int");

extern "C" {static PyObject *meth_QPoint_manhattanLength(PyObject *, PyObject *);}
static PyObject *meth_QPoint_manhattanLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPoint, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->manhattanLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_manhattanLength, doc_QPoint_manhattanLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPoint_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QPoint_isNull(PyObject *, PyObject *);}
static PyObject *meth_QPoint_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPoint, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_isNull, doc_QPoint_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPoint_x, "x(self) -> int");

extern "C" {static PyObject *meth_QPoint_x(PyObject *, PyObject *);}
static PyObject *meth_QPoint_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPoint, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_x, doc_QPoint_x);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPoint_y, "y(self) -> int");

extern "C" {static PyObject *meth_QPoint_y(PyObject *, PyObject *);}
static PyObject *meth_QPoint_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPoint, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_y, doc_QPoint_y);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPoint_setX, "setX(self, int)");

extern "C" {static PyObject *meth_QPoint_setX(PyObject *, PyObject *);}
static PyObject *meth_QPoint_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPoint, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_setX, doc_QPoint_setX);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPoint_setY, "setY(self, int)");

extern "C" {static PyObject *meth_QPoint_setY(PyObject *, PyObject *);}
static PyObject *meth_QPoint_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPoint, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_setY, doc_QPoint_setY);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPoint_dotProduct, "dotProduct(QPoint, QPoint) -> int");

extern "C" {static PyObject *meth_QPoint_dotProduct(PyObject *, PyObject *);}
static PyObject *meth_QPoint_dotProduct(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            int sipRes;

            sipRes =  ::QPoint::dotProduct(*a0,*a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPoint, sipName_dotProduct, doc_QPoint_dotProduct);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPoint___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QPoint, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPoint___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QPoint, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPoint___add__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPoint___sub__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPoint___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xi", sipType_QPoint, &a0, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "XiJ9", &a0, sipType_QPoint, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        const  ::QPoint* a0;
        double a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QPoint, &a0, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    {
        double a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QPoint, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPoint___div__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QPoint, &a0, &a1))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPoint___neg__(PyObject *);}
static PyObject *slot_QPoint___neg__(PyObject *sipSelf)
{
     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPoint___pos__(PyObject *);}
static PyObject *slot_QPoint___pos__(PyObject *sipSelf)
{
     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(+(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPoint___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QPoint::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPoint___imul__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1Xi", &a0))
        {
            sipCpp-> ::QPoint::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        double a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QPoint::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPoint___isub__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            sipCpp-> ::QPoint::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPoint___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPoint___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            sipCpp-> ::QPoint::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QPoint___bool__(PyObject *);}
static int slot_QPoint___bool__(PyObject *sipSelf)
{
     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
        sipRes = !sipCpp->isNull();
#line 78269 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPoint___repr__(PyObject *);}
static PyObject *slot_QPoint___repr__(PyObject *sipSelf)
{
     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPoint));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 39 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QPoint()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QPoint()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt5.QtCore.QPoint(%i, %i)", sipCpp->x(), sipCpp->y());
        }
#line 78311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPoint(void *, int);}
static void release_QPoint(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPoint *>(sipCppV);
}


extern "C" {static PyObject *pickle_QPoint(void *);}
static PyObject *pickle_QPoint(void *sipCppV)
{
     ::QPoint *sipCpp = reinterpret_cast< ::QPoint *>(sipCppV);
    PyObject *sipRes;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
    sipRes = Py_BuildValue((char *)"ii", sipCpp->x(), sipCpp->y());
#line 78337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

    return sipRes;
}


extern "C" {static void assign_QPoint(void *, SIP_SSIZE_T, void *);}
static void assign_QPoint(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPoint *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPoint *>(sipSrc);
}


extern "C" {static void *array_QPoint(SIP_SSIZE_T);}
static void *array_QPoint(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPoint[sipNrElem];
}


extern "C" {static void *copy_QPoint(const void *, SIP_SSIZE_T);}
static void *copy_QPoint(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPoint(reinterpret_cast<const  ::QPoint *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPoint(sipSimpleWrapper *);}
static void dealloc_QPoint(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPoint(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPoint(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPoint(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPoint *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPoint();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "ii", &a0, &a1))
        {
            sipCpp = new  ::QPoint(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPoint, &a0))
        {
            sipCpp = new  ::QPoint(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPoint[] = {
    {(void *)slot_QPoint___eq__, eq_slot},
    {(void *)slot_QPoint___ne__, ne_slot},
    {(void *)slot_QPoint___add__, add_slot},
    {(void *)slot_QPoint___sub__, sub_slot},
    {(void *)slot_QPoint___mul__, mul_slot},
    {(void *)slot_QPoint___div__, div_slot},
    {(void *)slot_QPoint___neg__, neg_slot},
    {(void *)slot_QPoint___pos__, pos_slot},
    {(void *)slot_QPoint___idiv__, idiv_slot},
    {(void *)slot_QPoint___imul__, imul_slot},
    {(void *)slot_QPoint___isub__, isub_slot},
    {(void *)slot_QPoint___iadd__, iadd_slot},
    {(void *)slot_QPoint___bool__, bool_slot},
    {(void *)slot_QPoint___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPoint[] = {
    {SIP_MLNAME_CAST(sipName_dotProduct), meth_QPoint_dotProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_dotProduct)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QPoint_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_isNull)},
    {SIP_MLNAME_CAST(sipName_manhattanLength), meth_QPoint_manhattanLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_manhattanLength)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QPoint_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QPoint_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_setY)},
    {SIP_MLNAME_CAST(sipName_x), meth_QPoint_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QPoint_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QPoint_y)}
};

PyDoc_STRVAR(doc_QPoint, "\1QPoint()\n"
"QPoint(int, int)\n"
"QPoint(QPoint)");


static pyqt5ClassPluginDef plugin_QPoint = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QPoint = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPoint,
        {SIP_NULLPTR},
        &plugin_QPoint
    },
    {
        sipNameNr_QPoint,
        {0, 0, 1},
        7, methods_QPoint,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPoint,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPoint,
    init_type_QPoint,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPoint,
    assign_QPoint,
    array_QPoint,
    copy_QPoint,
    release_QPoint,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QPoint,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpluginloader.sip"
#include <qpluginloader.h>
#line 78512 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 78516 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 78519 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 78522 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78525 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 78528 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78531 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78534 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78537 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78543 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78552 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78555 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78561 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQPluginLoader : public  ::QPluginLoader
{
public:
    sipQPluginLoader( ::QObject*);
    sipQPluginLoader(const  ::QString&, ::QObject*);
    virtual ~sipQPluginLoader();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPluginLoader(const sipQPluginLoader &);
    sipQPluginLoader &operator = (const sipQPluginLoader &);

    char sipPyMethods[7];
};

sipQPluginLoader::sipQPluginLoader( ::QObject*a0):  ::QPluginLoader(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPluginLoader::sipQPluginLoader(const  ::QString& a0, ::QObject*a1):  ::QPluginLoader(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPluginLoader::~sipQPluginLoader()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQPluginLoader::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QPluginLoader);

    return  ::QPluginLoader::metaObject();
}

int sipQPluginLoader::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPluginLoader::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QPluginLoader,_c,_id,_a);

    return _id;
}

void *sipQPluginLoader::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QPluginLoader, _clname, &sipCpp) ? sipCpp :  ::QPluginLoader::qt_metacast(_clname));
}

bool sipQPluginLoader::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QPluginLoader::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQPluginLoader::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QPluginLoader::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQPluginLoader::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QPluginLoader::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPluginLoader::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QPluginLoader::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPluginLoader::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QPluginLoader::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPluginLoader::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QPluginLoader::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPluginLoader::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QPluginLoader::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPluginLoader_instance, "instance(self) -> QObject");

extern "C" {static PyObject *meth_QPluginLoader_instance(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_instance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPluginLoader, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->instance();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_instance, doc_QPluginLoader_instance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_staticInstances, "staticInstances() -> List[QObject]");

extern "C" {static PyObject *meth_QPluginLoader_staticInstances(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_staticInstances(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QObjectList*sipRes;

            sipRes = new  ::QObjectList( ::QPluginLoader::staticInstances());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_staticInstances, doc_QPluginLoader_staticInstances);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_load, "load(self) -> bool");

extern "C" {static PyObject *meth_QPluginLoader_load(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPluginLoader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->load();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_load, doc_QPluginLoader_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_unload, "unload(self) -> bool");

extern "C" {static PyObject *meth_QPluginLoader_unload(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_unload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPluginLoader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->unload();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_unload, doc_QPluginLoader_unload);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_isLoaded, "isLoaded(self) -> bool");

extern "C" {static PyObject *meth_QPluginLoader_isLoaded(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_isLoaded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPluginLoader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLoaded();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_isLoaded, doc_QPluginLoader_isLoaded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QPluginLoader_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPluginLoader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_setFileName, doc_QPluginLoader_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QPluginLoader_fileName(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPluginLoader, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_fileName, doc_QPluginLoader_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QPluginLoader_errorString(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPluginLoader, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_errorString, doc_QPluginLoader_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_setLoadHints, "setLoadHints(self, Union[QLibrary.LoadHints, QLibrary.LoadHint])");

extern "C" {static PyObject *meth_QPluginLoader_setLoadHints(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_setLoadHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibrary::LoadHints* a0;
        int a0State = 0;
         ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPluginLoader, &sipCpp, sipType_QLibrary_LoadHints, &a0, &a0State))
        {
            sipCpp->setLoadHints(*a0);
            sipReleaseType(a0,sipType_QLibrary_LoadHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_setLoadHints, doc_QPluginLoader_setLoadHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPluginLoader_loadHints, "loadHints(self) -> QLibrary.LoadHints");

extern "C" {static PyObject *meth_QPluginLoader_loadHints(PyObject *, PyObject *);}
static PyObject *meth_QPluginLoader_loadHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPluginLoader, &sipCpp))
        {
             ::QLibrary::LoadHints*sipRes;

            sipRes = new  ::QLibrary::LoadHints(sipCpp->loadHints());

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPluginLoader, sipName_loadHints, doc_QPluginLoader_loadHints);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPluginLoader(void *, const sipTypeDef *);}
static void *cast_QPluginLoader(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPluginLoader *sipCpp = reinterpret_cast< ::QPluginLoader *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPluginLoader(void *, int);}
static void release_QPluginLoader(void *sipCppV, int)
{
     ::QPluginLoader *sipCpp = reinterpret_cast< ::QPluginLoader *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPluginLoader(sipSimpleWrapper *);}
static void dealloc_QPluginLoader(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPluginLoader *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPluginLoader(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPluginLoader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPluginLoader(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPluginLoader *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQPluginLoader(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQPluginLoader(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPluginLoader[] = {{183, 255, 1}};


static PyMethodDef methods_QPluginLoader[] = {
    {SIP_MLNAME_CAST(sipName_errorString), meth_QPluginLoader_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_errorString)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QPluginLoader_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_fileName)},
    {SIP_MLNAME_CAST(sipName_instance), meth_QPluginLoader_instance, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_instance)},
    {SIP_MLNAME_CAST(sipName_isLoaded), meth_QPluginLoader_isLoaded, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_isLoaded)},
    {SIP_MLNAME_CAST(sipName_load), meth_QPluginLoader_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_load)},
    {SIP_MLNAME_CAST(sipName_loadHints), meth_QPluginLoader_loadHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_loadHints)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QPluginLoader_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_setFileName)},
    {SIP_MLNAME_CAST(sipName_setLoadHints), meth_QPluginLoader_setLoadHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_setLoadHints)},
    {SIP_MLNAME_CAST(sipName_staticInstances), meth_QPluginLoader_staticInstances, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_staticInstances)},
    {SIP_MLNAME_CAST(sipName_unload), meth_QPluginLoader_unload, METH_VARARGS, SIP_MLDOC_CAST(doc_QPluginLoader_unload)}
};

PyDoc_STRVAR(doc_QPluginLoader, "\1QPluginLoader(parent: QObject = None)\n"
"QPluginLoader(str, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QPluginLoader = {
    & ::QPluginLoader::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QPluginLoader = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPluginLoader,
        {SIP_NULLPTR},
        &plugin_QPluginLoader
    },
    {
        sipNameNr_QPluginLoader,
        {0, 0, 1},
        10, methods_QPluginLoader,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPluginLoader,
    -1,
    -1,
    supers_QPluginLoader,
    SIP_NULLPTR,
    init_type_QPluginLoader,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPluginLoader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPluginLoader,
    cast_QPluginLoader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpropertyanimation.sip"
#include <qpropertyanimation.h>
#line 79212 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 79216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 79219 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 79222 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79225 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 79231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 79235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 79238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 79241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 79250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 79253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 79256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 79262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 79268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 79271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 79274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQPropertyAnimation : public  ::QPropertyAnimation
{
public:
    sipQPropertyAnimation( ::QObject*);
    sipQPropertyAnimation( ::QObject*,const  ::QByteArray&, ::QObject*);
    virtual ~sipQPropertyAnimation();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void updateCurrentValue(const  ::QVariant&) SIP_OVERRIDE;
     ::QVariant interpolated(const  ::QVariant&,const  ::QVariant&, ::qreal) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPropertyAnimation(const sipQPropertyAnimation &);
    sipQPropertyAnimation &operator = (const sipQPropertyAnimation &);

    char sipPyMethods[13];
};

sipQPropertyAnimation::sipQPropertyAnimation( ::QObject*a0):  ::QPropertyAnimation(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPropertyAnimation::sipQPropertyAnimation( ::QObject*a0,const  ::QByteArray& a1, ::QObject*a2):  ::QPropertyAnimation(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPropertyAnimation::~sipQPropertyAnimation()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQPropertyAnimation::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QPropertyAnimation);

    return  ::QPropertyAnimation::metaObject();
}

int sipQPropertyAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPropertyAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QPropertyAnimation,_c,_id,_a);

    return _id;
}

void *sipQPropertyAnimation::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QPropertyAnimation, _clname, &sipCpp) ? sipCpp :  ::QPropertyAnimation::qt_metacast(_clname));
}

void sipQPropertyAnimation::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QPropertyAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_updateState);

    if (!sipMeth)
    {
         ::QPropertyAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQPropertyAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_updateCurrentTime);

    if (!sipMeth)
    {
         ::QPropertyAnimation::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQPropertyAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_duration);

    if (!sipMeth)
        return  ::QPropertyAnimation::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQPropertyAnimation::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QPropertyAnimation::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQPropertyAnimation::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QPropertyAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQPropertyAnimation::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QPropertyAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QPropertyAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QPropertyAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QPropertyAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QPropertyAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::updateCurrentValue(const  ::QVariant& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_updateCurrentValue);

    if (!sipMeth)
    {
         ::QPropertyAnimation::updateCurrentValue(a0);
        return;
    }

    extern void sipVH_QtCore_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&);

    sipVH_QtCore_57(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQPropertyAnimation::interpolated(const  ::QVariant& a0,const  ::QVariant& a1, ::qreal a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_interpolated);

    if (!sipMeth)
        return  ::QPropertyAnimation::interpolated(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&,const  ::QVariant&, ::qreal);

    return sipVH_QtCore_58(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QPropertyAnimation_targetObject, "targetObject(self) -> QObject");

extern "C" {static PyObject *meth_QPropertyAnimation_targetObject(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_targetObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPropertyAnimation, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->targetObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_targetObject, doc_QPropertyAnimation_targetObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPropertyAnimation_setTargetObject, "setTargetObject(self, QObject)");

extern "C" {static PyObject *meth_QPropertyAnimation_setTargetObject(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_setTargetObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        PyObject *a0Keep;
         ::QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, &a0Keep, sipType_QObject, &a0))
        {
            sipCpp->setTargetObject(a0);

            sipKeepReference(sipSelf, 0, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_setTargetObject, doc_QPropertyAnimation_setTargetObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPropertyAnimation_propertyName, "propertyName(self) -> QByteArray");

extern "C" {static PyObject *meth_QPropertyAnimation_propertyName(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_propertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPropertyAnimation, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->propertyName());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_propertyName, doc_QPropertyAnimation_propertyName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPropertyAnimation_setPropertyName, "setPropertyName(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QPropertyAnimation_setPropertyName(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_setPropertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setPropertyName(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_setPropertyName, doc_QPropertyAnimation_setPropertyName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPropertyAnimation_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QPropertyAnimation_event(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPropertyAnimation::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_event, doc_QPropertyAnimation_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPropertyAnimation_updateCurrentValue, "updateCurrentValue(self, Any)");

extern "C" {static PyObject *meth_QPropertyAnimation_updateCurrentValue(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_updateCurrentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QPropertyAnimation::updateCurrentValue(*a0) : sipCpp->updateCurrentValue(*a0));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_updateCurrentValue, doc_QPropertyAnimation_updateCurrentValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPropertyAnimation_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QPropertyAnimation_updateState(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
         ::QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QPropertyAnimation::updateState(a0,a1) : sipCpp->updateState(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_updateState, doc_QPropertyAnimation_updateState);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPropertyAnimation(void *, const sipTypeDef *);}
static void *cast_QPropertyAnimation(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPropertyAnimation *sipCpp = reinterpret_cast< ::QPropertyAnimation *>(sipCppV);

    if (targetType == sipType_QVariantAnimation)
        return static_cast< ::QVariantAnimation *>(sipCpp);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPropertyAnimation(void *, int);}
static void release_QPropertyAnimation(void *sipCppV, int)
{
     ::QPropertyAnimation *sipCpp = reinterpret_cast< ::QPropertyAnimation *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPropertyAnimation(sipSimpleWrapper *);}
static void dealloc_QPropertyAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPropertyAnimation *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPropertyAnimation(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPropertyAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPropertyAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPropertyAnimation *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQPropertyAnimation(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
        PyObject *a0Keep;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8J1|JH", &a0Keep, sipType_QObject, &a0, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQPropertyAnimation(a0,*a1,a2);

            sipKeepReference((PyObject *)sipSelf, 0, a0Keep);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPropertyAnimation[] = {{314, 255, 1}};


static PyMethodDef methods_QPropertyAnimation[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QPropertyAnimation_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_event)},
    {SIP_MLNAME_CAST(sipName_propertyName), meth_QPropertyAnimation_propertyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_propertyName)},
    {SIP_MLNAME_CAST(sipName_setPropertyName), meth_QPropertyAnimation_setPropertyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_setPropertyName)},
    {SIP_MLNAME_CAST(sipName_setTargetObject), meth_QPropertyAnimation_setTargetObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_setTargetObject)},
    {SIP_MLNAME_CAST(sipName_targetObject), meth_QPropertyAnimation_targetObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_targetObject)},
    {SIP_MLNAME_CAST(sipName_updateCurrentValue), meth_QPropertyAnimation_updateCurrentValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_updateCurrentValue)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QPropertyAnimation_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_updateState)}
};

PyDoc_STRVAR(doc_QPropertyAnimation, "\1QPropertyAnimation(parent: QObject = None)\n"
"QPropertyAnimation(QObject, Union[QByteArray, bytes, bytearray], parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QPropertyAnimation = {
    & ::QPropertyAnimation::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QPropertyAnimation = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPropertyAnimation,
        {SIP_NULLPTR},
        &plugin_QPropertyAnimation
    },
    {
        sipNameNr_QPropertyAnimation,
        {0, 0, 1},
        7, methods_QPropertyAnimation,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPropertyAnimation,
    -1,
    -1,
    supers_QPropertyAnimation,
    SIP_NULLPTR,
    init_type_QPropertyAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPropertyAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPropertyAnimation,
    cast_QPropertyAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariantanimation.sip"
#include <qvariantanimation.h>
#line 79964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 79968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 79974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 79980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 79984 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 79987 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 79990 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79993 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79996 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 79999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 80002 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 80005 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 80008 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80011 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 80014 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 80017 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 80020 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 80023 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 80026 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQVariantAnimation : public  ::QVariantAnimation
{
public:
    sipQVariantAnimation( ::QObject*);
    virtual ~sipQVariantAnimation();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QVariant interpolated(const  ::QVariant&,const  ::QVariant&, ::qreal) const SIP_OVERRIDE;
    void updateCurrentValue(const  ::QVariant&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQVariantAnimation(const sipQVariantAnimation &);
    sipQVariantAnimation &operator = (const sipQVariantAnimation &);

    char sipPyMethods[13];
};

sipQVariantAnimation::sipQVariantAnimation( ::QObject*a0):  ::QVariantAnimation(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQVariantAnimation::~sipQVariantAnimation()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQVariantAnimation::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QVariantAnimation);

    return  ::QVariantAnimation::metaObject();
}

int sipQVariantAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QVariantAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QVariantAnimation,_c,_id,_a);

    return _id;
}

void *sipQVariantAnimation::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QVariantAnimation, _clname, &sipCpp) ? sipCpp :  ::QVariantAnimation::qt_metacast(_clname));
}

 ::QVariant sipQVariantAnimation::interpolated(const  ::QVariant& a0,const  ::QVariant& a1, ::qreal a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_interpolated);

    if (!sipMeth)
        return  ::QVariantAnimation::interpolated(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&,const  ::QVariant&, ::qreal);

    return sipVH_QtCore_58(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQVariantAnimation::updateCurrentValue(const  ::QVariant& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_updateCurrentValue);

    if (!sipMeth)
    {
         ::QVariantAnimation::updateCurrentValue(a0);
        return;
    }

    extern void sipVH_QtCore_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QVariant&);

    sipVH_QtCore_57(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QVariantAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QVariantAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QVariantAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QVariantAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QVariantAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQVariantAnimation::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QVariantAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQVariantAnimation::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QVariantAnimation::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQVariantAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_duration);

    if (!sipMeth)
        return  ::QVariantAnimation::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQVariantAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_updateCurrentTime);

    if (!sipMeth)
    {
         ::QVariantAnimation::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQVariantAnimation::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_updateState);

    if (!sipMeth)
    {
         ::QVariantAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQVariantAnimation::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QVariantAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QVariantAnimation_startValue, "startValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_startValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_startValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->startValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_startValue, doc_QVariantAnimation_startValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setStartValue, "setStartValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setStartValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setStartValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setStartValue(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setStartValue, doc_QVariantAnimation_setStartValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_endValue, "endValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_endValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_endValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->endValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_endValue, doc_QVariantAnimation_endValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setEndValue, "setEndValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setEndValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setEndValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setEndValue(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setEndValue, doc_QVariantAnimation_setEndValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_keyValueAt, "keyValueAt(self, float) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_keyValueAt(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_keyValueAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->keyValueAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_keyValueAt, doc_QVariantAnimation_keyValueAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setKeyValueAt, "setKeyValueAt(self, float, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_setKeyValueAt(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setKeyValueAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BdJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setKeyValueAt(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setKeyValueAt, doc_QVariantAnimation_setKeyValueAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_keyValues, "keyValues(self) -> List[Tuple[float, Any]]");

extern "C" {static PyObject *meth_QVariantAnimation_keyValues(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_keyValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariantAnimation::KeyValues*sipRes;

            sipRes = new  ::QVariantAnimation::KeyValues(sipCpp->keyValues());

            return sipConvertFromNewType(sipRes,sipType_QVector_0600QPair_2400_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_keyValues, doc_QVariantAnimation_keyValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setKeyValues, "setKeyValues(self, Iterable[Tuple[float, Any]])");

extern "C" {static PyObject *meth_QVariantAnimation_setKeyValues(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setKeyValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation::KeyValues* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVector_0600QPair_2400_0100QVariant,&a0, &a0State))
        {
            sipCpp->setKeyValues(*a0);
            sipReleaseType(const_cast< ::QVariantAnimation::KeyValues *>(a0),sipType_QVector_0600QPair_2400_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setKeyValues, doc_QVariantAnimation_setKeyValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_currentValue, "currentValue(self) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_currentValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_currentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->currentValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_currentValue, doc_QVariantAnimation_currentValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QVariantAnimation_duration(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::duration() : sipCpp->duration());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_duration, doc_QVariantAnimation_duration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setDuration, "setDuration(self, int)");

extern "C" {static PyObject *meth_QVariantAnimation_setDuration(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
            sipCpp->setDuration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setDuration, doc_QVariantAnimation_setDuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_easingCurve, "easingCurve(self) -> QEasingCurve");

extern "C" {static PyObject *meth_QVariantAnimation_easingCurve(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_easingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVariantAnimation, &sipCpp))
        {
             ::QEasingCurve*sipRes;

            sipRes = new  ::QEasingCurve(sipCpp->easingCurve());

            return sipConvertFromNewType(sipRes,sipType_QEasingCurve,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_easingCurve, doc_QVariantAnimation_easingCurve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_setEasingCurve, "setEasingCurve(self, Union[QEasingCurve, QEasingCurve.Type])");

extern "C" {static PyObject *meth_QVariantAnimation_setEasingCurve(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_setEasingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QEasingCurve, &a0, &a0State))
        {
            sipCpp->setEasingCurve(*a0);
            sipReleaseType(const_cast< ::QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_setEasingCurve, doc_QVariantAnimation_setEasingCurve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QVariantAnimation_event(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_event, doc_QVariantAnimation_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QVariantAnimation_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QVariantAnimation, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::updateCurrentTime(a0) : sipCpp->updateCurrentTime(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateCurrentTime, doc_QVariantAnimation_updateCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QVariantAnimation_updateState(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::updateState(a0,a1) : sipCpp->updateState(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateState, doc_QVariantAnimation_updateState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_updateCurrentValue, "updateCurrentValue(self, Any)");

extern "C" {static PyObject *meth_QVariantAnimation_updateCurrentValue(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_updateCurrentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QVariantAnimation::updateCurrentValue(*a0) : sipCpp->updateCurrentValue(*a0));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_updateCurrentValue, doc_QVariantAnimation_updateCurrentValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QVariantAnimation_interpolated, "interpolated(self, Any, Any, float) -> Any");

extern "C" {static PyObject *meth_QVariantAnimation_interpolated(PyObject *, PyObject *);}
static PyObject *meth_QVariantAnimation_interpolated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QVariant* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::qreal a2;
        const  ::QVariantAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1d", &sipSelf, sipType_QVariantAnimation, &sipCpp, sipType_QVariant, &a0, &a0State, sipType_QVariant, &a1, &a1State, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QVariantAnimation::interpolated(*a0,*a1,a2) : sipCpp->interpolated(*a0,*a1,a2)));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVariantAnimation, sipName_interpolated, doc_QVariantAnimation_interpolated);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QVariantAnimation(void *, const sipTypeDef *);}
static void *cast_QVariantAnimation(void *sipCppV, const sipTypeDef *targetType)
{
     ::QVariantAnimation *sipCpp = reinterpret_cast< ::QVariantAnimation *>(sipCppV);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVariantAnimation(void *, int);}
static void release_QVariantAnimation(void *sipCppV, int)
{
     ::QVariantAnimation *sipCpp = reinterpret_cast< ::QVariantAnimation *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QVariantAnimation(sipSimpleWrapper *);}
static void dealloc_QVariantAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQVariantAnimation *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVariantAnimation(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QVariantAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVariantAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQVariantAnimation *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQVariantAnimation(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QVariantAnimation[] = {{0, 255, 1}};


static PyMethodDef methods_QVariantAnimation[] = {
    {SIP_MLNAME_CAST(sipName_currentValue), meth_QVariantAnimation_currentValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_currentValue)},
    {SIP_MLNAME_CAST(sipName_duration), meth_QVariantAnimation_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_duration)},
    {SIP_MLNAME_CAST(sipName_easingCurve), meth_QVariantAnimation_easingCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_easingCurve)},
    {SIP_MLNAME_CAST(sipName_endValue), meth_QVariantAnimation_endValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_endValue)},
    {SIP_MLNAME_CAST(sipName_event), meth_QVariantAnimation_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_event)},
    {SIP_MLNAME_CAST(sipName_interpolated), meth_QVariantAnimation_interpolated, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_interpolated)},
    {SIP_MLNAME_CAST(sipName_keyValueAt), meth_QVariantAnimation_keyValueAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_keyValueAt)},
    {SIP_MLNAME_CAST(sipName_keyValues), meth_QVariantAnimation_keyValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_keyValues)},
    {SIP_MLNAME_CAST(sipName_setDuration), meth_QVariantAnimation_setDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setDuration)},
    {SIP_MLNAME_CAST(sipName_setEasingCurve), meth_QVariantAnimation_setEasingCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setEasingCurve)},
    {SIP_MLNAME_CAST(sipName_setEndValue), meth_QVariantAnimation_setEndValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setEndValue)},
    {SIP_MLNAME_CAST(sipName_setKeyValueAt), meth_QVariantAnimation_setKeyValueAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setKeyValueAt)},
    {SIP_MLNAME_CAST(sipName_setKeyValues), meth_QVariantAnimation_setKeyValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setKeyValues)},
    {SIP_MLNAME_CAST(sipName_setStartValue), meth_QVariantAnimation_setStartValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_setStartValue)},
    {SIP_MLNAME_CAST(sipName_startValue), meth_QVariantAnimation_startValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_startValue)},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), meth_QVariantAnimation_updateCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_updateCurrentTime)},
    {SIP_MLNAME_CAST(sipName_updateCurrentValue), meth_QVariantAnimation_updateCurrentValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_updateCurrentValue)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QVariantAnimation_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QVariantAnimation_updateState)}
};

PyDoc_STRVAR(doc_QVariantAnimation, "\1QVariantAnimation(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QVariantAnimation[] = {
    {"valueChanged(QVariant)", "\1valueChanged(self, Any)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QVariantAnimation = {
    & ::QVariantAnimation::staticMetaObject,
    0,
    signals_QVariantAnimation,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QVariantAnimation = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QVariantAnimation,
        {SIP_NULLPTR},
        &plugin_QVariantAnimation
    },
    {
        sipNameNr_QVariantAnimation,
        {0, 0, 1},
        18, methods_QVariantAnimation,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QVariantAnimation,
    -1,
    -1,
    supers_QVariantAnimation,
    SIP_NULLPTR,
    init_type_QVariantAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QVariantAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QVariantAnimation,
    cast_QVariantAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpauseanimation.sip"
#include <qpauseanimation.h>
#line 81022 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 81026 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81029 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 81032 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 81035 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 81038 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81041 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81044 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81047 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81050 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81053 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81056 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81059 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81062 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81065 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81068 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81071 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81074 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81077 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQPauseAnimation : public  ::QPauseAnimation
{
public:
    sipQPauseAnimation( ::QObject*);
    sipQPauseAnimation(int, ::QObject*);
    virtual ~sipQPauseAnimation();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPauseAnimation(const sipQPauseAnimation &);
    sipQPauseAnimation &operator = (const sipQPauseAnimation &);

    char sipPyMethods[11];
};

sipQPauseAnimation::sipQPauseAnimation( ::QObject*a0):  ::QPauseAnimation(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPauseAnimation::sipQPauseAnimation(int a0, ::QObject*a1):  ::QPauseAnimation(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPauseAnimation::~sipQPauseAnimation()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQPauseAnimation::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QPauseAnimation);

    return  ::QPauseAnimation::metaObject();
}

int sipQPauseAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPauseAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QPauseAnimation,_c,_id,_a);

    return _id;
}

void *sipQPauseAnimation::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QPauseAnimation, _clname, &sipCpp) ? sipCpp :  ::QPauseAnimation::qt_metacast(_clname));
}

void sipQPauseAnimation::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QPauseAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPauseAnimation::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QPauseAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPauseAnimation::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QPauseAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPauseAnimation::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QPauseAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPauseAnimation::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QPauseAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQPauseAnimation::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QPauseAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQPauseAnimation::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QPauseAnimation::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQPauseAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_duration);

    if (!sipMeth)
        return  ::QPauseAnimation::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQPauseAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_updateCurrentTime);

    if (!sipMeth)
    {
         ::QPauseAnimation::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPauseAnimation::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_updateState);

    if (!sipMeth)
    {
         ::QPauseAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQPauseAnimation::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QPauseAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPauseAnimation_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QPauseAnimation_duration(PyObject *, PyObject *);}
static PyObject *meth_QPauseAnimation_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPauseAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPauseAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPauseAnimation::duration() : sipCpp->duration());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPauseAnimation, sipName_duration, doc_QPauseAnimation_duration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPauseAnimation_setDuration, "setDuration(self, int)");

extern "C" {static PyObject *meth_QPauseAnimation_setDuration(PyObject *, PyObject *);}
static PyObject *meth_QPauseAnimation_setDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QPauseAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPauseAnimation, &sipCpp, &a0))
        {
            sipCpp->setDuration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPauseAnimation, sipName_setDuration, doc_QPauseAnimation_setDuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPauseAnimation_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QPauseAnimation_event(PyObject *, PyObject *);}
static PyObject *meth_QPauseAnimation_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QPauseAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPauseAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QPauseAnimation::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPauseAnimation, sipName_event, doc_QPauseAnimation_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPauseAnimation_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QPauseAnimation_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QPauseAnimation_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QPauseAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QPauseAnimation, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QPauseAnimation::updateCurrentTime(a0) : sipCpp->updateCurrentTime(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPauseAnimation, sipName_updateCurrentTime, doc_QPauseAnimation_updateCurrentTime);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPauseAnimation(void *, const sipTypeDef *);}
static void *cast_QPauseAnimation(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPauseAnimation *sipCpp = reinterpret_cast< ::QPauseAnimation *>(sipCppV);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPauseAnimation(void *, int);}
static void release_QPauseAnimation(void *sipCppV, int)
{
     ::QPauseAnimation *sipCpp = reinterpret_cast< ::QPauseAnimation *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPauseAnimation(sipSimpleWrapper *);}
static void dealloc_QPauseAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPauseAnimation *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPauseAnimation(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPauseAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPauseAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPauseAnimation *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQPauseAnimation(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "i|JH", &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQPauseAnimation(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPauseAnimation[] = {{0, 255, 1}};


static PyMethodDef methods_QPauseAnimation[] = {
    {SIP_MLNAME_CAST(sipName_duration), meth_QPauseAnimation_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QPauseAnimation_duration)},
    {SIP_MLNAME_CAST(sipName_event), meth_QPauseAnimation_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QPauseAnimation_event)},
    {SIP_MLNAME_CAST(sipName_setDuration), meth_QPauseAnimation_setDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QPauseAnimation_setDuration)},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), meth_QPauseAnimation_updateCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QPauseAnimation_updateCurrentTime)}
};

PyDoc_STRVAR(doc_QPauseAnimation, "\1QPauseAnimation(parent: QObject = None)\n"
"QPauseAnimation(int, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QPauseAnimation = {
    & ::QPauseAnimation::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QPauseAnimation = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPauseAnimation,
        {SIP_NULLPTR},
        &plugin_QPauseAnimation
    },
    {
        sipNameNr_QPauseAnimation,
        {0, 0, 1},
        4, methods_QPauseAnimation,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPauseAnimation,
    -1,
    -1,
    supers_QPauseAnimation,
    SIP_NULLPTR,
    init_type_QPauseAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPauseAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QPauseAnimation,
    cast_QPauseAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qparallelanimationgroup.sip"
#include <qparallelanimationgroup.h>
#line 81627 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 81631 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 81634 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81637 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 81640 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 81643 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81649 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81652 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81655 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81658 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81661 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81664 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81667 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81673 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81676 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81679 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81682 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


class sipQParallelAnimationGroup : public  ::QParallelAnimationGroup
{
public:
    sipQParallelAnimationGroup( ::QObject*);
    virtual ~sipQParallelAnimationGroup();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQParallelAnimationGroup(const sipQParallelAnimationGroup &);
    sipQParallelAnimationGroup &operator = (const sipQParallelAnimationGroup &);

    char sipPyMethods[11];
};

sipQParallelAnimationGroup::sipQParallelAnimationGroup( ::QObject*a0):  ::QParallelAnimationGroup(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQParallelAnimationGroup::~sipQParallelAnimationGroup()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQParallelAnimationGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QParallelAnimationGroup);

    return  ::QParallelAnimationGroup::metaObject();
}

int sipQParallelAnimationGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QParallelAnimationGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QParallelAnimationGroup,_c,_id,_a);

    return _id;
}

void *sipQParallelAnimationGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QParallelAnimationGroup, _clname, &sipCpp) ? sipCpp :  ::QParallelAnimationGroup::qt_metacast(_clname));
}

void sipQParallelAnimationGroup::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QParallelAnimationGroup::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_updateState);

    if (!sipMeth)
    {
         ::QParallelAnimationGroup::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQParallelAnimationGroup::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_updateCurrentTime);

    if (!sipMeth)
    {
         ::QParallelAnimationGroup::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQParallelAnimationGroup::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_duration);

    if (!sipMeth)
        return  ::QParallelAnimationGroup::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQParallelAnimationGroup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QParallelAnimationGroup::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQParallelAnimationGroup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QParallelAnimationGroup::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQParallelAnimationGroup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QParallelAnimationGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QParallelAnimationGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QParallelAnimationGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QParallelAnimationGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQParallelAnimationGroup::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QParallelAnimationGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QParallelAnimationGroup_duration(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QParallelAnimationGroup::duration() : sipCpp->duration());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_duration, doc_QParallelAnimationGroup_duration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QParallelAnimationGroup_event(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QParallelAnimationGroup::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_event, doc_QParallelAnimationGroup_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QParallelAnimationGroup_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QParallelAnimationGroup::updateCurrentTime(a0) : sipCpp->updateCurrentTime(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_updateCurrentTime, doc_QParallelAnimationGroup_updateCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QParallelAnimationGroup_updateState(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
         ::QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QParallelAnimationGroup::updateState(a0,a1) : sipCpp->updateState(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_updateState, doc_QParallelAnimationGroup_updateState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QParallelAnimationGroup_updateDirection, "updateDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QParallelAnimationGroup_updateDirection(PyObject *, PyObject *);}
static PyObject *meth_QParallelAnimationGroup_updateDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::Direction a0;
         ::QParallelAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QParallelAnimationGroup, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QParallelAnimationGroup::updateDirection(a0) : sipCpp->updateDirection(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QParallelAnimationGroup, sipName_updateDirection, doc_QParallelAnimationGroup_updateDirection);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QParallelAnimationGroup(void *, const sipTypeDef *);}
static void *cast_QParallelAnimationGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QParallelAnimationGroup *sipCpp = reinterpret_cast< ::QParallelAnimationGroup *>(sipCppV);

    if (targetType == sipType_QAnimationGroup)
        return static_cast< ::QAnimationGroup *>(sipCpp);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QParallelAnimationGroup(void *, int);}
static void release_QParallelAnimationGroup(void *sipCppV, int)
{
     ::QParallelAnimationGroup *sipCpp = reinterpret_cast< ::QParallelAnimationGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QParallelAnimationGroup(sipSimpleWrapper *);}
static void dealloc_QParallelAnimationGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQParallelAnimationGroup *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QParallelAnimationGroup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QParallelAnimationGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QParallelAnimationGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQParallelAnimationGroup *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQParallelAnimationGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QParallelAnimationGroup[] = {{17, 255, 1}};


static PyMethodDef methods_QParallelAnimationGroup[] = {
    {SIP_MLNAME_CAST(sipName_duration), meth_QParallelAnimationGroup_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_duration)},
    {SIP_MLNAME_CAST(sipName_event), meth_QParallelAnimationGroup_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_event)},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), meth_QParallelAnimationGroup_updateCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_updateCurrentTime)},
    {SIP_MLNAME_CAST(sipName_updateDirection), meth_QParallelAnimationGroup_updateDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_updateDirection)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QParallelAnimationGroup_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QParallelAnimationGroup_updateState)}
};

PyDoc_STRVAR(doc_QParallelAnimationGroup, "\1QParallelAnimationGroup(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QParallelAnimationGroup = {
    & ::QParallelAnimationGroup::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QParallelAnimationGroup = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QParallelAnimationGroup,
        {SIP_NULLPTR},
        &plugin_QParallelAnimationGroup
    },
    {
        sipNameNr_QParallelAnimationGroup,
        {0, 0, 1},
        5, methods_QParallelAnimationGroup,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QParallelAnimationGroup,
    -1,
    -1,
    supers_QParallelAnimationGroup,
    SIP_NULLPTR,
    init_type_QParallelAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QParallelAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QParallelAnimationGroup,
    cast_QParallelAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qoperatingsystemversion.sip"
#include <qoperatingsystemversion.h>
#line 82240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 82244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"


PyDoc_STRVAR(doc_QOperatingSystemVersion_current, "current() -> QOperatingSystemVersion");

extern "C" {static PyObject *meth_QOperatingSystemVersion_current(PyObject *, PyObject *);}
static PyObject *meth_QOperatingSystemVersion_current(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOperatingSystemVersion*sipRes;

            sipRes = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::current());

            return sipConvertFromNewType(sipRes,sipType_QOperatingSystemVersion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOperatingSystemVersion, sipName_current, doc_QOperatingSystemVersion_current);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOperatingSystemVersion_currentType, "currentType() -> QOperatingSystemVersion.OSType");

extern "C" {static PyObject *meth_QOperatingSystemVersion_currentType(PyObject *, PyObject *);}
static PyObject *meth_QOperatingSystemVersion_currentType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QOperatingSystemVersion::OSType sipRes;

            sipRes =  ::QOperatingSystemVersion::currentType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOperatingSystemVersion_OSType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOperatingSystemVersion, sipName_currentType, doc_QOperatingSystemVersion_currentType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOperatingSystemVersion_majorVersion, "majorVersion(self) -> int");

extern "C" {static PyObject *meth_QOperatingSystemVersion_majorVersion(PyObject *, PyObject *);}
static PyObject *meth_QOperatingSystemVersion_majorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOperatingSystemVersion, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->majorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOperatingSystemVersion, sipName_majorVersion, doc_QOperatingSystemVersion_majorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOperatingSystemVersion_minorVersion, "minorVersion(self) -> int");

extern "C" {static PyObject *meth_QOperatingSystemVersion_minorVersion(PyObject *, PyObject *);}
static PyObject *meth_QOperatingSystemVersion_minorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOperatingSystemVersion, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOperatingSystemVersion, sipName_minorVersion, doc_QOperatingSystemVersion_minorVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOperatingSystemVersion_microVersion, "microVersion(self) -> int");

extern "C" {static PyObject *meth_QOperatingSystemVersion_microVersion(PyObject *, PyObject *);}
static PyObject *meth_QOperatingSystemVersion_microVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOperatingSystemVersion, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->microVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOperatingSystemVersion, sipName_microVersion, doc_QOperatingSystemVersion_microVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOperatingSystemVersion_segmentCount, "segmentCount(self) -> int");

extern "C" {static PyObject *meth_QOperatingSystemVersion_segmentCount(PyObject *, PyObject *);}
static PyObject *meth_QOperatingSystemVersion_segmentCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOperatingSystemVersion, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->segmentCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOperatingSystemVersion, sipName_segmentCount, doc_QOperatingSystemVersion_segmentCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOperatingSystemVersion_type, "type(self) -> QOperatingSystemVersion.OSType");

extern "C" {static PyObject *meth_QOperatingSystemVersion_type(PyObject *, PyObject *);}
static PyObject *meth_QOperatingSystemVersion_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOperatingSystemVersion, &sipCpp))
        {
             ::QOperatingSystemVersion::OSType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QOperatingSystemVersion_OSType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOperatingSystemVersion, sipName_type, doc_QOperatingSystemVersion_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QOperatingSystemVersion_name, "name(self) -> str");

extern "C" {static PyObject *meth_QOperatingSystemVersion_name(PyObject *, PyObject *);}
static PyObject *meth_QOperatingSystemVersion_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOperatingSystemVersion, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOperatingSystemVersion, sipName_name, doc_QOperatingSystemVersion_name);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QOperatingSystemVersion___lt__(PyObject *,PyObject *);}
static PyObject *slot_QOperatingSystemVersion___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOperatingSystemVersion *sipCpp = reinterpret_cast< ::QOperatingSystemVersion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOperatingSystemVersion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOperatingSystemVersion, &a0))
        {
            bool sipRes;

            sipRes = operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QOperatingSystemVersion, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOperatingSystemVersion___le__(PyObject *,PyObject *);}
static PyObject *slot_QOperatingSystemVersion___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOperatingSystemVersion *sipCpp = reinterpret_cast< ::QOperatingSystemVersion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOperatingSystemVersion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOperatingSystemVersion, &a0))
        {
            bool sipRes;

            sipRes = operator<=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QOperatingSystemVersion, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOperatingSystemVersion___gt__(PyObject *,PyObject *);}
static PyObject *slot_QOperatingSystemVersion___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOperatingSystemVersion *sipCpp = reinterpret_cast< ::QOperatingSystemVersion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOperatingSystemVersion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOperatingSystemVersion, &a0))
        {
            bool sipRes;

            sipRes = operator>((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QOperatingSystemVersion, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QOperatingSystemVersion___ge__(PyObject *,PyObject *);}
static PyObject *slot_QOperatingSystemVersion___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QOperatingSystemVersion *sipCpp = reinterpret_cast< ::QOperatingSystemVersion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOperatingSystemVersion));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QOperatingSystemVersion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOperatingSystemVersion, &a0))
        {
            bool sipRes;

            sipRes = operator>=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QOperatingSystemVersion, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QOperatingSystemVersion(void *, int);}
static void release_QOperatingSystemVersion(void *sipCppV, int)
{
    delete reinterpret_cast< ::QOperatingSystemVersion *>(sipCppV);
}


extern "C" {static void dealloc_QOperatingSystemVersion(sipSimpleWrapper *);}
static void dealloc_QOperatingSystemVersion(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QOperatingSystemVersion(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QOperatingSystemVersion(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOperatingSystemVersion(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QOperatingSystemVersion *sipCpp = SIP_NULLPTR;

    {
         ::QOperatingSystemVersion::OSType a0;
        int a1;
        int a2 = -1;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_vminor,
            sipName_vmicro,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "Ei|ii", sipType_QOperatingSystemVersion_OSType, &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QOperatingSystemVersion(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QOperatingSystemVersion* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QOperatingSystemVersion, &a0))
        {
            sipCpp = new  ::QOperatingSystemVersion(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOperatingSystemVersion[] = {
    {(void *)slot_QOperatingSystemVersion___lt__, lt_slot},
    {(void *)slot_QOperatingSystemVersion___le__, le_slot},
    {(void *)slot_QOperatingSystemVersion___gt__, gt_slot},
    {(void *)slot_QOperatingSystemVersion___ge__, ge_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QOperatingSystemVersion[] = {
    {SIP_MLNAME_CAST(sipName_current), meth_QOperatingSystemVersion_current, METH_VARARGS, SIP_MLDOC_CAST(doc_QOperatingSystemVersion_current)},
    {SIP_MLNAME_CAST(sipName_currentType), meth_QOperatingSystemVersion_currentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QOperatingSystemVersion_currentType)},
    {SIP_MLNAME_CAST(sipName_majorVersion), meth_QOperatingSystemVersion_majorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QOperatingSystemVersion_majorVersion)},
    {SIP_MLNAME_CAST(sipName_microVersion), meth_QOperatingSystemVersion_microVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QOperatingSystemVersion_microVersion)},
    {SIP_MLNAME_CAST(sipName_minorVersion), meth_QOperatingSystemVersion_minorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QOperatingSystemVersion_minorVersion)},
    {SIP_MLNAME_CAST(sipName_name), meth_QOperatingSystemVersion_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QOperatingSystemVersion_name)},
    {SIP_MLNAME_CAST(sipName_segmentCount), meth_QOperatingSystemVersion_segmentCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QOperatingSystemVersion_segmentCount)},
    {SIP_MLNAME_CAST(sipName_type), meth_QOperatingSystemVersion_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QOperatingSystemVersion_type)}
};

static sipEnumMemberDef enummembers_QOperatingSystemVersion[] = {
    {sipName_Android, static_cast<int>( ::QOperatingSystemVersion::Android), 186},
    {sipName_IOS, static_cast<int>( ::QOperatingSystemVersion::IOS), 186},
    {sipName_MacOS, static_cast<int>( ::QOperatingSystemVersion::MacOS), 186},
    {sipName_TvOS, static_cast<int>( ::QOperatingSystemVersion::TvOS), 186},
    {sipName_Unknown, static_cast<int>( ::QOperatingSystemVersion::Unknown), 186},
    {sipName_WatchOS, static_cast<int>( ::QOperatingSystemVersion::WatchOS), 186},
    {sipName_Windows, static_cast<int>( ::QOperatingSystemVersion::Windows), 186},
};


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidJellyBean(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidJellyBean(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidJellyBean);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidJellyBean_MR1(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidJellyBean_MR1(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidJellyBean_MR1);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidJellyBean_MR2(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidJellyBean_MR2(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidJellyBean_MR2);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidKitKat(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidKitKat(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidKitKat);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidLollipop(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidLollipop(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidLollipop);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidLollipop_MR1(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidLollipop_MR1(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidLollipop_MR1);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidMarshmallow(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidMarshmallow(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidMarshmallow);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidNougat(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidNougat(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidNougat);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidNougat_MR1(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidNougat_MR1(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidNougat_MR1);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_AndroidOreo(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_AndroidOreo(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::AndroidOreo);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_MacOSHighSierra(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_MacOSHighSierra(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::MacOSHighSierra);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_MacOSMojave(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_MacOSMojave(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::MacOSMojave);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_MacOSSierra(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_MacOSSierra(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::MacOSSierra);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_OSXElCapitan(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_OSXElCapitan(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::OSXElCapitan);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_OSXMavericks(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_OSXMavericks(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::OSXMavericks);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_OSXYosemite(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_OSXYosemite(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::OSXYosemite);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_Windows10(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_Windows10(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::Windows10);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_Windows7(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_Windows7(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::Windows7);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_Windows8(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_Windows8(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::Windows8);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}


extern "C" {static PyObject *varget_QOperatingSystemVersion_Windows8_1(void *, PyObject *, PyObject *);}
static PyObject *varget_QOperatingSystemVersion_Windows8_1(void *, PyObject *, PyObject *)
{
    const  ::QOperatingSystemVersion*sipVal;

    sipVal = new  ::QOperatingSystemVersion( ::QOperatingSystemVersion::Windows8_1);

    return sipConvertFromNewType(const_cast< ::QOperatingSystemVersion *>(sipVal), sipType_QOperatingSystemVersion, SIP_NULLPTR);
}

sipVariableDef variables_QOperatingSystemVersion[] = {
    {ClassVariable, sipName_AndroidJellyBean, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidJellyBean, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidJellyBean_MR1, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidJellyBean_MR1, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidJellyBean_MR2, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidJellyBean_MR2, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidKitKat, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidKitKat, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidLollipop, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidLollipop, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidLollipop_MR1, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidLollipop_MR1, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidMarshmallow, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidMarshmallow, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidNougat, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidNougat, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidNougat_MR1, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidNougat_MR1, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_AndroidOreo, (PyMethodDef *)varget_QOperatingSystemVersion_AndroidOreo, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_MacOSHighSierra, (PyMethodDef *)varget_QOperatingSystemVersion_MacOSHighSierra, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_MacOSMojave, (PyMethodDef *)varget_QOperatingSystemVersion_MacOSMojave, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_MacOSSierra, (PyMethodDef *)varget_QOperatingSystemVersion_MacOSSierra, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_OSXElCapitan, (PyMethodDef *)varget_QOperatingSystemVersion_OSXElCapitan, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_OSXMavericks, (PyMethodDef *)varget_QOperatingSystemVersion_OSXMavericks, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_OSXYosemite, (PyMethodDef *)varget_QOperatingSystemVersion_OSXYosemite, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_Windows10, (PyMethodDef *)varget_QOperatingSystemVersion_Windows10, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_Windows7, (PyMethodDef *)varget_QOperatingSystemVersion_Windows7, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_Windows8, (PyMethodDef *)varget_QOperatingSystemVersion_Windows8, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {ClassVariable, sipName_Windows8_1, (PyMethodDef *)varget_QOperatingSystemVersion_Windows8_1, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QOperatingSystemVersion, "\1QOperatingSystemVersion(QOperatingSystemVersion.OSType, int, vminor: int = -1, vmicro: int = -1)\n"
"QOperatingSystemVersion(QOperatingSystemVersion)");


static pyqt5ClassPluginDef plugin_QOperatingSystemVersion = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QOperatingSystemVersion = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QOperatingSystemVersion,
        {SIP_NULLPTR},
        &plugin_QOperatingSystemVersion
    },
    {
        sipNameNr_QOperatingSystemVersion,
        {0, 0, 1},
        8, methods_QOperatingSystemVersion,
        7, enummembers_QOperatingSystemVersion,
        20, variables_QOperatingSystemVersion,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QOperatingSystemVersion,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QOperatingSystemVersion,
    init_type_QOperatingSystemVersion,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QOperatingSystemVersion,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QOperatingSystemVersion,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 82993 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_QGenericReturnArgument(void *, int);}
static void release_QGenericReturnArgument(void *sipCppV, int)
{
    delete reinterpret_cast< ::QGenericReturnArgument *>(sipCppV);
}


extern "C" {static void dealloc_QGenericReturnArgument(sipSimpleWrapper *);}
static void dealloc_QGenericReturnArgument(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGenericReturnArgument(sipGetAddress(sipSelf), 0);
    }
}


static pyqt5ClassPluginDef plugin_QGenericReturnArgument = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QGenericReturnArgument = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGenericReturnArgument,
        {SIP_NULLPTR},
        &plugin_QGenericReturnArgument
    },
    {
        sipNameNr_QGenericReturnArgument,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QGenericReturnArgument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QGenericReturnArgument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 83074 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_QGenericArgument(void *, int);}
static void release_QGenericArgument(void *sipCppV, int)
{
    delete reinterpret_cast< ::QGenericArgument *>(sipCppV);
}


extern "C" {static void dealloc_QGenericArgument(sipSimpleWrapper *);}
static void dealloc_QGenericArgument(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGenericArgument(sipGetAddress(sipSelf), 0);
    }
}


static pyqt5ClassPluginDef plugin_QGenericArgument = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QGenericArgument = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QGenericArgument,
        {SIP_NULLPTR},
        &plugin_QGenericArgument
    },
    {
        sipNameNr_QGenericArgument,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QGenericArgument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QGenericArgument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 83157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart0.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_QMetaObject_Connection(void *, int);}
static void release_QMetaObject_Connection(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaObject::Connection *>(sipCppV);
}


extern "C" {static void assign_QMetaObject_Connection(void *, SIP_SSIZE_T, void *);}
static void assign_QMetaObject_Connection(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMetaObject::Connection *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMetaObject::Connection *>(sipSrc);
}


extern "C" {static void *array_QMetaObject_Connection(SIP_SSIZE_T);}
static void *array_QMetaObject_Connection(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMetaObject::Connection[sipNrElem];
}


extern "C" {static void *copy_QMetaObject_Connection(const void *, SIP_SSIZE_T);}
static void *copy_QMetaObject_Connection(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMetaObject::Connection(reinterpret_cast<const  ::QMetaObject::Connection *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaObject_Connection(sipSimpleWrapper *);}
static void dealloc_QMetaObject_Connection(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaObject_Connection(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaObject_Connection(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaObject_Connection(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaObject::Connection *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMetaObject::Connection();

            return sipCpp;
        }
    }

    {
        const  ::QMetaObject::Connection* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMetaObject_Connection, &a0))
        {
            sipCpp = new  ::QMetaObject::Connection(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}

PyDoc_STRVAR(doc_QMetaObject_Connection, "\1QMetaObject.Connection()\n"
"QMetaObject.Connection(QMetaObject.Connection)");


static pyqt5ClassPluginDef plugin_QMetaObject_Connection = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaObject_Connection = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaObject__Connection,
        {SIP_NULLPTR},
        &plugin_QMetaObject_Connection
    },
    {
        sipNameNr_Connection,
        {168, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaObject_Connection,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMetaObject_Connection,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaObject_Connection,
    assign_QMetaObject_Connection,
    array_QMetaObject_Connection,
    copy_QMetaObject_Connection,
    release_QMetaObject_Connection,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
