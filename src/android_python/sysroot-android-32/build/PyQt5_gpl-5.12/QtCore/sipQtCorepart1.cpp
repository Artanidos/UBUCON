/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
// Raise an exception when QMetaObject::invokeMethod() returns false.
static void qtcore_invokeMethod_exception()
{
    PyErr_SetString(PyExc_RuntimeError, "QMetaObject.invokeMethod() call failed");
}
#line 64 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMetaObject_className, "className(self) -> str");

extern "C" {static PyObject *meth_QMetaObject_className(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_className(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->className();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_className, doc_QMetaObject_className);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_superClass, "superClass(self) -> QMetaObject");

extern "C" {static PyObject *meth_QMetaObject_superClass(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_superClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            const  ::QMetaObject*sipRes;

            sipRes = sipCpp->superClass();

            return sipConvertFromType(const_cast< ::QMetaObject *>(sipRes),sipType_QMetaObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_superClass, doc_QMetaObject_superClass);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_userProperty, "userProperty(self) -> QMetaProperty");

extern "C" {static PyObject *meth_QMetaObject_userProperty(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_userProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
             ::QMetaProperty*sipRes;

            sipRes = new  ::QMetaProperty(sipCpp->userProperty());

            return sipConvertFromNewType(sipRes,sipType_QMetaProperty,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_userProperty, doc_QMetaObject_userProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_methodOffset, "methodOffset(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_methodOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_methodOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->methodOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_methodOffset, doc_QMetaObject_methodOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_enumeratorOffset, "enumeratorOffset(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_enumeratorOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumeratorOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->enumeratorOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumeratorOffset, doc_QMetaObject_enumeratorOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_propertyOffset, "propertyOffset(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_propertyOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_propertyOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_propertyOffset, doc_QMetaObject_propertyOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_classInfoOffset, "classInfoOffset(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_classInfoOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfoOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->classInfoOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfoOffset, doc_QMetaObject_classInfoOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_methodCount, "methodCount(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_methodCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_methodCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->methodCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_methodCount, doc_QMetaObject_methodCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_enumeratorCount, "enumeratorCount(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_enumeratorCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumeratorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->enumeratorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumeratorCount, doc_QMetaObject_enumeratorCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_propertyCount, "propertyCount(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_propertyCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_propertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_propertyCount, doc_QMetaObject_propertyCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_classInfoCount, "classInfoCount(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_classInfoCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfoCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->classInfoCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfoCount, doc_QMetaObject_classInfoCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfMethod, "indexOfMethod(self, str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfMethod(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMetaObject, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfMethod(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfMethod, doc_QMetaObject_indexOfMethod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfSignal, "indexOfSignal(self, str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfSignal(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfSignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMetaObject, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfSignal(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfSignal, doc_QMetaObject_indexOfSignal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfSlot, "indexOfSlot(self, str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfSlot(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfSlot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMetaObject, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfSlot(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfSlot, doc_QMetaObject_indexOfSlot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfEnumerator, "indexOfEnumerator(self, str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfEnumerator(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfEnumerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMetaObject, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfEnumerator(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfEnumerator, doc_QMetaObject_indexOfEnumerator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfProperty, "indexOfProperty(self, str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfProperty(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMetaObject, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfProperty(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfProperty, doc_QMetaObject_indexOfProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfClassInfo, "indexOfClassInfo(self, str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfClassInfo(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfClassInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMetaObject, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfClassInfo(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfClassInfo, doc_QMetaObject_indexOfClassInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_method, "method(self, int) -> QMetaMethod");

extern "C" {static PyObject *meth_QMetaObject_method(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_method(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
             ::QMetaMethod*sipRes;

            sipRes = new  ::QMetaMethod(sipCpp->method(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_method, doc_QMetaObject_method);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_enumerator, "enumerator(self, int) -> QMetaEnum");

extern "C" {static PyObject *meth_QMetaObject_enumerator(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
             ::QMetaEnum*sipRes;

            sipRes = new  ::QMetaEnum(sipCpp->enumerator(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaEnum,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumerator, doc_QMetaObject_enumerator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_property, "property(self, int) -> QMetaProperty");

extern "C" {static PyObject *meth_QMetaObject_property(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
             ::QMetaProperty*sipRes;

            sipRes = new  ::QMetaProperty(sipCpp->property(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaProperty,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_property, doc_QMetaObject_property);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_classInfo, "classInfo(self, int) -> QMetaClassInfo");

extern "C" {static PyObject *meth_QMetaObject_classInfo(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
             ::QMetaClassInfo*sipRes;

            sipRes = new  ::QMetaClassInfo(sipCpp->classInfo(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaClassInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfo, doc_QMetaObject_classInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_checkConnectArgs, "checkConnectArgs(str, str) -> bool\n"
"checkConnectArgs(QMetaMethod, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QMetaObject_checkConnectArgs(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_checkConnectArgs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AAAA", &a0Keep, &a0, &a1Keep, &a1))
        {
            bool sipRes;

            sipRes =  ::QMetaObject::checkConnectArgs(a0,a1);
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QMetaMethod* a0;
        const  ::QMetaMethod* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QMetaMethod, &a0, sipType_QMetaMethod, &a1))
        {
            bool sipRes;

            sipRes =  ::QMetaObject::checkConnectArgs(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_checkConnectArgs, doc_QMetaObject_checkConnectArgs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_connectSlotsByName, "connectSlotsByName(QObject)");

extern "C" {static PyObject *meth_QMetaObject_connectSlotsByName(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_connectSlotsByName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        PyObject *a0Wrapper;

        if (sipParseArgs(&sipParseErr, sipArgs, "@J8", &a0Wrapper, sipType_QObject, &a0))
        {
#line 61 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
        qpycore_qmetaobject_connectslotsbyname(a0, a0Wrapper);
#line 748 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_connectSlotsByName, doc_QMetaObject_connectSlotsByName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_normalizedSignature, "normalizedSignature(str) -> QByteArray");

extern "C" {static PyObject *meth_QMetaObject_normalizedSignature(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_normalizedSignature(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QMetaObject::normalizedSignature(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_normalizedSignature, doc_QMetaObject_normalizedSignature);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_normalizedType, "normalizedType(str) -> QByteArray");

extern "C" {static PyObject *meth_QMetaObject_normalizedType(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_normalizedType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QMetaObject::normalizedType(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_normalizedType, doc_QMetaObject_normalizedType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_invokeMethod, "invokeMethod(QObject, str, Qt.ConnectionType, QGenericReturnArgument, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object\n"
"invokeMethod(QObject, str, QGenericReturnArgument, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object\n"
"invokeMethod(QObject, str, Qt.ConnectionType, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object\n"
"invokeMethod(QObject, str, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object");

extern "C" {static PyObject *meth_QMetaObject_invokeMethod(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_invokeMethod(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        const char* a1;
        PyObject *a1Keep;
         ::Qt::ConnectionType a2;
         ::QGenericReturnArgument* a3;
        PyObject *a3Wrapper;
         ::QGenericArgument a4def = QGenericArgument(0,0);
         ::QGenericArgument* a4 = &a4def;
         ::QGenericArgument a5def = QGenericArgument(0,0);
         ::QGenericArgument* a5 = &a5def;
         ::QGenericArgument a6def = QGenericArgument(0,0);
         ::QGenericArgument* a6 = &a6def;
         ::QGenericArgument a7def = QGenericArgument(0,0);
         ::QGenericArgument* a7 = &a7def;
         ::QGenericArgument a8def = QGenericArgument(0,0);
         ::QGenericArgument* a8 = &a8def;
         ::QGenericArgument a9def = QGenericArgument(0,0);
         ::QGenericArgument* a9 = &a9def;
         ::QGenericArgument a10def = QGenericArgument(0,0);
         ::QGenericArgument* a10 = &a10def;
         ::QGenericArgument a11def = QGenericArgument(0,0);
         ::QGenericArgument* a11 = &a11def;
         ::QGenericArgument a12def = QGenericArgument(0,0);
         ::QGenericArgument* a12 = &a12def;
         ::QGenericArgument a13def = QGenericArgument(0,0);
         ::QGenericArgument* a13 = &a13def;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8AAE@J9|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1Keep, &a1, sipType_Qt_ConnectionType, &a2, &a3Wrapper, sipType_QGenericReturnArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12, sipType_QGenericArgument, &a13))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12,*a13);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a3Wrapper);
        else
            qtcore_invokeMethod_exception();
#line 897 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a1Keep);

            return sipRes;
        }
    }

    {
         ::QObject* a0;
        const char* a1;
        PyObject *a1Keep;
         ::QGenericReturnArgument* a2;
        PyObject *a2Wrapper;
         ::QGenericArgument a3def = QGenericArgument(0,0);
         ::QGenericArgument* a3 = &a3def;
         ::QGenericArgument a4def = QGenericArgument(0,0);
         ::QGenericArgument* a4 = &a4def;
         ::QGenericArgument a5def = QGenericArgument(0,0);
         ::QGenericArgument* a5 = &a5def;
         ::QGenericArgument a6def = QGenericArgument(0,0);
         ::QGenericArgument* a6 = &a6def;
         ::QGenericArgument a7def = QGenericArgument(0,0);
         ::QGenericArgument* a7 = &a7def;
         ::QGenericArgument a8def = QGenericArgument(0,0);
         ::QGenericArgument* a8 = &a8def;
         ::QGenericArgument a9def = QGenericArgument(0,0);
         ::QGenericArgument* a9 = &a9def;
         ::QGenericArgument a10def = QGenericArgument(0,0);
         ::QGenericArgument* a10 = &a10def;
         ::QGenericArgument a11def = QGenericArgument(0,0);
         ::QGenericArgument* a11 = &a11def;
         ::QGenericArgument a12def = QGenericArgument(0,0);
         ::QGenericArgument* a12 = &a12def;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8AA@J9|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1Keep, &a1, &a2Wrapper, sipType_QGenericReturnArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 83 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a2Wrapper);
        else
            qtcore_invokeMethod_exception();
#line 963 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a1Keep);

            return sipRes;
        }
    }

    {
         ::QObject* a0;
        const char* a1;
        PyObject *a1Keep;
         ::Qt::ConnectionType a2;
         ::QGenericArgument a3def = QGenericArgument(0,0);
         ::QGenericArgument* a3 = &a3def;
         ::QGenericArgument a4def = QGenericArgument(0,0);
         ::QGenericArgument* a4 = &a4def;
         ::QGenericArgument a5def = QGenericArgument(0,0);
         ::QGenericArgument* a5 = &a5def;
         ::QGenericArgument a6def = QGenericArgument(0,0);
         ::QGenericArgument* a6 = &a6def;
         ::QGenericArgument a7def = QGenericArgument(0,0);
         ::QGenericArgument* a7 = &a7def;
         ::QGenericArgument a8def = QGenericArgument(0,0);
         ::QGenericArgument* a8 = &a8def;
         ::QGenericArgument a9def = QGenericArgument(0,0);
         ::QGenericArgument* a9 = &a9def;
         ::QGenericArgument a10def = QGenericArgument(0,0);
         ::QGenericArgument* a10 = &a10def;
         ::QGenericArgument a11def = QGenericArgument(0,0);
         ::QGenericArgument* a11 = &a11def;
         ::QGenericArgument a12def = QGenericArgument(0,0);
         ::QGenericArgument* a12 = &a12def;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8AAE|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1Keep, &a1, sipType_Qt_ConnectionType, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 98 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invokeMethod_exception();
#line 1031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a1Keep);

            return sipRes;
        }
    }

    {
         ::QObject* a0;
        const char* a1;
        PyObject *a1Keep;
         ::QGenericArgument a2def = QGenericArgument(0,0);
         ::QGenericArgument* a2 = &a2def;
         ::QGenericArgument a3def = QGenericArgument(0,0);
         ::QGenericArgument* a3 = &a3def;
         ::QGenericArgument a4def = QGenericArgument(0,0);
         ::QGenericArgument* a4 = &a4def;
         ::QGenericArgument a5def = QGenericArgument(0,0);
         ::QGenericArgument* a5 = &a5def;
         ::QGenericArgument a6def = QGenericArgument(0,0);
         ::QGenericArgument* a6 = &a6def;
         ::QGenericArgument a7def = QGenericArgument(0,0);
         ::QGenericArgument* a7 = &a7def;
         ::QGenericArgument a8def = QGenericArgument(0,0);
         ::QGenericArgument* a8 = &a8def;
         ::QGenericArgument a9def = QGenericArgument(0,0);
         ::QGenericArgument* a9 = &a9def;
         ::QGenericArgument a10def = QGenericArgument(0,0);
         ::QGenericArgument* a10 = &a10def;
         ::QGenericArgument a11def = QGenericArgument(0,0);
         ::QGenericArgument* a11 = &a11def;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8AA|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1Keep, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invokeMethod_exception();
#line 1097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a1Keep);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_invokeMethod, doc_QMetaObject_invokeMethod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_constructorCount, "constructorCount(self) -> int");

extern "C" {static PyObject *meth_QMetaObject_constructorCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_constructorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->constructorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_constructorCount, doc_QMetaObject_constructorCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfConstructor, "indexOfConstructor(self, str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfConstructor(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfConstructor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMetaObject, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfConstructor(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfConstructor, doc_QMetaObject_indexOfConstructor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_constructor, "constructor(self, int) -> QMetaMethod");

extern "C" {static PyObject *meth_QMetaObject_constructor(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_constructor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
             ::QMetaMethod*sipRes;

            sipRes = new  ::QMetaMethod(sipCpp->constructor(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_constructor, doc_QMetaObject_constructor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaObject_inherits, "inherits(self, QMetaObject) -> bool");

extern "C" {static PyObject *meth_QMetaObject_inherits(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_inherits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject* a0;
        const  ::QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMetaObject, &sipCpp, sipType_QMetaObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->inherits(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_inherits, doc_QMetaObject_inherits);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaObject(void *, int);}
static void release_QMetaObject(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaObject *>(sipCppV);
}


extern "C" {static void assign_QMetaObject(void *, SIP_SSIZE_T, void *);}
static void assign_QMetaObject(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMetaObject *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMetaObject *>(sipSrc);
}


extern "C" {static void *array_QMetaObject(SIP_SSIZE_T);}
static void *array_QMetaObject(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMetaObject[sipNrElem];
}


extern "C" {static void *copy_QMetaObject(const void *, SIP_SSIZE_T);}
static void *copy_QMetaObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMetaObject(reinterpret_cast<const  ::QMetaObject *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaObject(sipSimpleWrapper *);}
static void dealloc_QMetaObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaObject(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaObject(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaObject *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMetaObject();

            return sipCpp;
        }
    }

    {
        const  ::QMetaObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMetaObject, &a0))
        {
            sipCpp = new  ::QMetaObject(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMetaObject[] = {
    {SIP_MLNAME_CAST(sipName_checkConnectArgs), meth_QMetaObject_checkConnectArgs, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_checkConnectArgs)},
    {SIP_MLNAME_CAST(sipName_classInfo), meth_QMetaObject_classInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_classInfo)},
    {SIP_MLNAME_CAST(sipName_classInfoCount), meth_QMetaObject_classInfoCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_classInfoCount)},
    {SIP_MLNAME_CAST(sipName_classInfoOffset), meth_QMetaObject_classInfoOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_classInfoOffset)},
    {SIP_MLNAME_CAST(sipName_className), meth_QMetaObject_className, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_className)},
    {SIP_MLNAME_CAST(sipName_connectSlotsByName), meth_QMetaObject_connectSlotsByName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_connectSlotsByName)},
    {SIP_MLNAME_CAST(sipName_constructor), meth_QMetaObject_constructor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_constructor)},
    {SIP_MLNAME_CAST(sipName_constructorCount), meth_QMetaObject_constructorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_constructorCount)},
    {SIP_MLNAME_CAST(sipName_enumerator), meth_QMetaObject_enumerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_enumerator)},
    {SIP_MLNAME_CAST(sipName_enumeratorCount), meth_QMetaObject_enumeratorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_enumeratorCount)},
    {SIP_MLNAME_CAST(sipName_enumeratorOffset), meth_QMetaObject_enumeratorOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_enumeratorOffset)},
    {SIP_MLNAME_CAST(sipName_indexOfClassInfo), meth_QMetaObject_indexOfClassInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfClassInfo)},
    {SIP_MLNAME_CAST(sipName_indexOfConstructor), meth_QMetaObject_indexOfConstructor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfConstructor)},
    {SIP_MLNAME_CAST(sipName_indexOfEnumerator), meth_QMetaObject_indexOfEnumerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfEnumerator)},
    {SIP_MLNAME_CAST(sipName_indexOfMethod), meth_QMetaObject_indexOfMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfMethod)},
    {SIP_MLNAME_CAST(sipName_indexOfProperty), meth_QMetaObject_indexOfProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfProperty)},
    {SIP_MLNAME_CAST(sipName_indexOfSignal), meth_QMetaObject_indexOfSignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfSignal)},
    {SIP_MLNAME_CAST(sipName_indexOfSlot), meth_QMetaObject_indexOfSlot, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfSlot)},
    {SIP_MLNAME_CAST(sipName_inherits), meth_QMetaObject_inherits, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_inherits)},
    {SIP_MLNAME_CAST(sipName_invokeMethod), SIP_MLMETH_CAST(meth_QMetaObject_invokeMethod), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaObject_invokeMethod)},
    {SIP_MLNAME_CAST(sipName_method), meth_QMetaObject_method, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_method)},
    {SIP_MLNAME_CAST(sipName_methodCount), meth_QMetaObject_methodCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_methodCount)},
    {SIP_MLNAME_CAST(sipName_methodOffset), meth_QMetaObject_methodOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_methodOffset)},
    {SIP_MLNAME_CAST(sipName_normalizedSignature), meth_QMetaObject_normalizedSignature, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_normalizedSignature)},
    {SIP_MLNAME_CAST(sipName_normalizedType), meth_QMetaObject_normalizedType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_normalizedType)},
    {SIP_MLNAME_CAST(sipName_property), meth_QMetaObject_property, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_property)},
    {SIP_MLNAME_CAST(sipName_propertyCount), meth_QMetaObject_propertyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_propertyCount)},
    {SIP_MLNAME_CAST(sipName_propertyOffset), meth_QMetaObject_propertyOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_propertyOffset)},
    {SIP_MLNAME_CAST(sipName_superClass), meth_QMetaObject_superClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_superClass)},
    {SIP_MLNAME_CAST(sipName_userProperty), meth_QMetaObject_userProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_userProperty)}
};

PyDoc_STRVAR(doc_QMetaObject, "\1QMetaObject()\n"
"QMetaObject(QMetaObject)");


static pyqt5ClassPluginDef plugin_QMetaObject = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaObject,
        {SIP_NULLPTR},
        &plugin_QMetaObject
    },
    {
        sipNameNr_QMetaObject,
        {0, 0, 1},
        30, methods_QMetaObject,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaObject,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMetaObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaObject,
    assign_QMetaObject,
    array_QMetaObject,
    copy_QMetaObject,
    release_QMetaObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectcleanuphandler.sip"
#include <qobjectcleanuphandler.h>
#line 1394 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 1398 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 1401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 1404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 1407 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 1410 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 1413 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 1416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1419 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 1422 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1425 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 1428 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 1431 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 1434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 1437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 1440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 1443 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQObjectCleanupHandler : public  ::QObjectCleanupHandler
{
public:
    sipQObjectCleanupHandler();
    virtual ~sipQObjectCleanupHandler();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQObjectCleanupHandler(const sipQObjectCleanupHandler &);
    sipQObjectCleanupHandler &operator = (const sipQObjectCleanupHandler &);

    char sipPyMethods[7];
};

sipQObjectCleanupHandler::sipQObjectCleanupHandler():  ::QObjectCleanupHandler(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQObjectCleanupHandler::~sipQObjectCleanupHandler()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQObjectCleanupHandler::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QObjectCleanupHandler);

    return  ::QObjectCleanupHandler::metaObject();
}

int sipQObjectCleanupHandler::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QObjectCleanupHandler::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QObjectCleanupHandler,_c,_id,_a);

    return _id;
}

void *sipQObjectCleanupHandler::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QObjectCleanupHandler, _clname, &sipCpp) ? sipCpp :  ::QObjectCleanupHandler::qt_metacast(_clname));
}

bool sipQObjectCleanupHandler::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QObjectCleanupHandler::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQObjectCleanupHandler::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QObjectCleanupHandler::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQObjectCleanupHandler::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QObjectCleanupHandler::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQObjectCleanupHandler::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QObjectCleanupHandler::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQObjectCleanupHandler::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QObjectCleanupHandler::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQObjectCleanupHandler::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QObjectCleanupHandler::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQObjectCleanupHandler::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QObjectCleanupHandler::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QObjectCleanupHandler_add, "add(self, QObject) -> QObject");

extern "C" {static PyObject *meth_QObjectCleanupHandler_add(PyObject *, PyObject *);}
static PyObject *meth_QObjectCleanupHandler_add(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QObjectCleanupHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QObjectCleanupHandler, &sipCpp, sipType_QObject, &a0))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->add(a0);

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObjectCleanupHandler, sipName_add, doc_QObjectCleanupHandler_add);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObjectCleanupHandler_remove, "remove(self, QObject)");

extern "C" {static PyObject *meth_QObjectCleanupHandler_remove(PyObject *, PyObject *);}
static PyObject *meth_QObjectCleanupHandler_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QObjectCleanupHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QObjectCleanupHandler, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->remove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObjectCleanupHandler, sipName_remove, doc_QObjectCleanupHandler_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObjectCleanupHandler_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QObjectCleanupHandler_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QObjectCleanupHandler_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObjectCleanupHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObjectCleanupHandler, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObjectCleanupHandler, sipName_isEmpty, doc_QObjectCleanupHandler_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObjectCleanupHandler_clear, "clear(self)");

extern "C" {static PyObject *meth_QObjectCleanupHandler_clear(PyObject *, PyObject *);}
static PyObject *meth_QObjectCleanupHandler_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObjectCleanupHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObjectCleanupHandler, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObjectCleanupHandler, sipName_clear, doc_QObjectCleanupHandler_clear);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QObjectCleanupHandler(void *, const sipTypeDef *);}
static void *cast_QObjectCleanupHandler(void *sipCppV, const sipTypeDef *targetType)
{
     ::QObjectCleanupHandler *sipCpp = reinterpret_cast< ::QObjectCleanupHandler *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QObjectCleanupHandler(void *, int);}
static void release_QObjectCleanupHandler(void *sipCppV, int)
{
     ::QObjectCleanupHandler *sipCpp = reinterpret_cast< ::QObjectCleanupHandler *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QObjectCleanupHandler(sipSimpleWrapper *);}
static void dealloc_QObjectCleanupHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQObjectCleanupHandler *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QObjectCleanupHandler(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QObjectCleanupHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QObjectCleanupHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQObjectCleanupHandler *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQObjectCleanupHandler();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QObjectCleanupHandler[] = {{183, 255, 1}};


static PyMethodDef methods_QObjectCleanupHandler[] = {
    {SIP_MLNAME_CAST(sipName_add), meth_QObjectCleanupHandler_add, METH_VARARGS, SIP_MLDOC_CAST(doc_QObjectCleanupHandler_add)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QObjectCleanupHandler_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QObjectCleanupHandler_clear)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QObjectCleanupHandler_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QObjectCleanupHandler_isEmpty)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QObjectCleanupHandler_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QObjectCleanupHandler_remove)}
};

PyDoc_STRVAR(doc_QObjectCleanupHandler, "\1QObjectCleanupHandler()");


static pyqt5ClassPluginDef plugin_QObjectCleanupHandler = {
    & ::QObjectCleanupHandler::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QObjectCleanupHandler = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QObjectCleanupHandler,
        {SIP_NULLPTR},
        &plugin_QObjectCleanupHandler
    },
    {
        sipNameNr_QObjectCleanupHandler,
        {0, 0, 1},
        4, methods_QObjectCleanupHandler,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QObjectCleanupHandler,
    -1,
    -1,
    supers_QObjectCleanupHandler,
    SIP_NULLPTR,
    init_type_QObjectCleanupHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QObjectCleanupHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QObjectCleanupHandler,
    cast_QObjectCleanupHandler,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 704 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 1880 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 1884 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QSignalBlocker_reblock, "reblock(self)");

extern "C" {static PyObject *meth_QSignalBlocker_reblock(PyObject *, PyObject *);}
static PyObject *meth_QSignalBlocker_reblock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSignalBlocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSignalBlocker, &sipCpp))
        {
            sipCpp->reblock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalBlocker, sipName_reblock, doc_QSignalBlocker_reblock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalBlocker_unblock, "unblock(self)");

extern "C" {static PyObject *meth_QSignalBlocker_unblock(PyObject *, PyObject *);}
static PyObject *meth_QSignalBlocker_unblock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSignalBlocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSignalBlocker, &sipCpp))
        {
            sipCpp->unblock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalBlocker, sipName_unblock, doc_QSignalBlocker_unblock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalBlocker___enter__, "__enter__(self) -> object");

extern "C" {static PyObject *meth_QSignalBlocker___enter__(PyObject *, PyObject *);}
static PyObject *meth_QSignalBlocker___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QSignalBlocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSignalBlocker, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 714 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        // Just return a reference to self.
        sipRes = sipSelf;
        Py_INCREF(sipRes);
#line 1960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalBlocker, sipName___enter__, doc_QSignalBlocker___enter__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QSignalBlocker___exit__, "__exit__(self, object, object, object)");

extern "C" {static PyObject *meth_QSignalBlocker___exit__(PyObject *, PyObject *);}
static PyObject *meth_QSignalBlocker___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
         ::QSignalBlocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0P0P0", &sipSelf, sipType_QSignalBlocker, &sipCpp, &a0, &a1, &a2))
        {
#line 721 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipCpp->unblock();
#line 1991 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSignalBlocker, sipName___exit__, doc_QSignalBlocker___exit__);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSignalBlocker(void *, int);}
static void release_QSignalBlocker(void *sipCppV, int)
{
    delete reinterpret_cast< ::QSignalBlocker *>(sipCppV);
}


extern "C" {static void dealloc_QSignalBlocker(sipSimpleWrapper *);}
static void dealloc_QSignalBlocker(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSignalBlocker(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSignalBlocker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSignalBlocker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSignalBlocker *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QObject, &a0))
        {
            sipCpp = new  ::QSignalBlocker(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QSignalBlocker[] = {
    {SIP_MLNAME_CAST(sipName___enter__), meth_QSignalBlocker___enter__, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalBlocker___enter__)},
    {SIP_MLNAME_CAST(sipName___exit__), meth_QSignalBlocker___exit__, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalBlocker___exit__)},
    {SIP_MLNAME_CAST(sipName_reblock), meth_QSignalBlocker_reblock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalBlocker_reblock)},
    {SIP_MLNAME_CAST(sipName_unblock), meth_QSignalBlocker_unblock, METH_VARARGS, SIP_MLDOC_CAST(doc_QSignalBlocker_unblock)}
};

PyDoc_STRVAR(doc_QSignalBlocker, "\1QSignalBlocker(QObject)");


static pyqt5ClassPluginDef plugin_QSignalBlocker = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QSignalBlocker = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QSignalBlocker,
        {SIP_NULLPTR},
        &plugin_QSignalBlocker
    },
    {
        sipNameNr_QSignalBlocker,
        {0, 0, 1},
        4, methods_QSignalBlocker,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QSignalBlocker,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QSignalBlocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QSignalBlocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QSignalBlocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmutex.sip"
#include <qmutex.h>
#line 2113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



PyDoc_STRVAR(doc_QMutex_lock, "lock(self)");

extern "C" {static PyObject *meth_QMutex_lock(PyObject *, PyObject *);}
static PyObject *meth_QMutex_lock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMutex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMutex, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutex, sipName_lock, doc_QMutex_lock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMutex_tryLock, "tryLock(self, timeout: int = 0) -> bool");

extern "C" {static PyObject *meth_QMutex_tryLock(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMutex_tryLock(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QMutex *sipCpp;

        static const char *sipKwdList[] = {
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QMutex, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tryLock(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutex, sipName_tryLock, doc_QMutex_tryLock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMutex_unlock, "unlock(self)");

extern "C" {static PyObject *meth_QMutex_unlock(PyObject *, PyObject *);}
static PyObject *meth_QMutex_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMutex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMutex, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unlock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutex, sipName_unlock, doc_QMutex_unlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMutex_isRecursive, "isRecursive(self) -> bool");

extern "C" {static PyObject *meth_QMutex_isRecursive(PyObject *, PyObject *);}
static PyObject *meth_QMutex_isRecursive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMutex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMutex, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRecursive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutex, sipName_isRecursive, doc_QMutex_isRecursive);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMutex(void *, int);}
static void release_QMutex(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMutex *>(sipCppV);
}


extern "C" {static void dealloc_QMutex(sipSimpleWrapper *);}
static void dealloc_QMutex(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMutex(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMutex(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMutex(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMutex *sipCpp = SIP_NULLPTR;

    {
         ::QMutex::RecursionMode a0 = QMutex::NonRecursive;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QMutex_RecursionMode, &a0))
        {
            sipCpp = new  ::QMutex(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMutex[] = {
    {SIP_MLNAME_CAST(sipName_isRecursive), meth_QMutex_isRecursive, METH_VARARGS, SIP_MLDOC_CAST(doc_QMutex_isRecursive)},
    {SIP_MLNAME_CAST(sipName_lock), meth_QMutex_lock, METH_VARARGS, SIP_MLDOC_CAST(doc_QMutex_lock)},
    {SIP_MLNAME_CAST(sipName_tryLock), SIP_MLMETH_CAST(meth_QMutex_tryLock), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMutex_tryLock)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QMutex_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QMutex_unlock)}
};

static sipEnumMemberDef enummembers_QMutex[] = {
    {sipName_NonRecursive, static_cast<int>( ::QMutex::NonRecursive), 181},
    {sipName_Recursive, static_cast<int>( ::QMutex::Recursive), 181},
};

PyDoc_STRVAR(doc_QMutex, "\1QMutex(mode: QMutex.RecursionMode = QMutex.NonRecursive)");


static pyqt5ClassPluginDef plugin_QMutex = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMutex = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMutex,
        {SIP_NULLPTR},
        &plugin_QMutex
    },
    {
        sipNameNr_QMutex,
        {0, 0, 1},
        4, methods_QMutex,
        2, enummembers_QMutex,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMutex,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMutex,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMutex,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMutex,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmutex.sip"
#include <qmutex.h>
#line 2355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmutex.sip"
#include <qmutex.h>
#line 2359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMutexLocker_unlock, "unlock(self)");

extern "C" {static PyObject *meth_QMutexLocker_unlock(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMutexLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMutexLocker, &sipCpp))
        {
            sipCpp->unlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutexLocker, sipName_unlock, doc_QMutexLocker_unlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMutexLocker_relock, "relock(self)");

extern "C" {static PyObject *meth_QMutexLocker_relock(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker_relock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMutexLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMutexLocker, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->relock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutexLocker, sipName_relock, doc_QMutexLocker_relock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMutexLocker_mutex, "mutex(self) -> QMutex");

extern "C" {static PyObject *meth_QMutexLocker_mutex(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker_mutex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMutexLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMutexLocker, &sipCpp))
        {
             ::QMutex*sipRes;

            sipRes = sipCpp->mutex();

            return sipConvertFromType(sipRes,sipType_QMutex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutexLocker, sipName_mutex, doc_QMutexLocker_mutex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMutexLocker___enter__, "__enter__(self) -> object");

extern "C" {static PyObject *meth_QMutexLocker___enter__(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMutexLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMutexLocker, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 37 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmutex.sip"
        // Just return a reference to self.
        sipRes = sipSelf;
        Py_INCREF(sipRes);
#line 2465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutexLocker, sipName___enter__, doc_QMutexLocker___enter__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMutexLocker___exit__, "__exit__(self, object, object, object)");

extern "C" {static PyObject *meth_QMutexLocker___exit__(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
         ::QMutexLocker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0P0P0", &sipSelf, sipType_QMutexLocker, &sipCpp, &a0, &a1, &a2))
        {
#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmutex.sip"
        sipCpp->unlock();
#line 2496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMutexLocker, sipName___exit__, doc_QMutexLocker___exit__);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMutexLocker(void *, int);}
static void release_QMutexLocker(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMutexLocker *>(sipCppV);
}


extern "C" {static void dealloc_QMutexLocker(sipSimpleWrapper *);}
static void dealloc_QMutexLocker(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMutexLocker(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMutexLocker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMutexLocker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMutexLocker *sipCpp = SIP_NULLPTR;

    {
         ::QMutex* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QMutex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QMutexLocker(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMutexLocker[] = {
    {SIP_MLNAME_CAST(sipName___enter__), meth_QMutexLocker___enter__, METH_VARARGS, SIP_MLDOC_CAST(doc_QMutexLocker___enter__)},
    {SIP_MLNAME_CAST(sipName___exit__), meth_QMutexLocker___exit__, METH_VARARGS, SIP_MLDOC_CAST(doc_QMutexLocker___exit__)},
    {SIP_MLNAME_CAST(sipName_mutex), meth_QMutexLocker_mutex, METH_VARARGS, SIP_MLDOC_CAST(doc_QMutexLocker_mutex)},
    {SIP_MLNAME_CAST(sipName_relock), meth_QMutexLocker_relock, METH_VARARGS, SIP_MLDOC_CAST(doc_QMutexLocker_relock)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QMutexLocker_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QMutexLocker_unlock)}
};

PyDoc_STRVAR(doc_QMutexLocker, "\1QMutexLocker(QMutex)");


static pyqt5ClassPluginDef plugin_QMutexLocker = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMutexLocker = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMutexLocker,
        {SIP_NULLPTR},
        &plugin_QMutexLocker
    },
    {
        sipNameNr_QMutexLocker,
        {0, 0, 1},
        5, methods_QMutexLocker,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMutexLocker,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMutexLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMutexLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMutexLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimetype.sip"
#include <qmimetype.h>
#line 2621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 2625 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 2628 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMimeType_swap, "swap(self, QMimeType)");

extern "C" {static PyObject *meth_QMimeType_swap(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMimeType* a0;
         ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMimeType, &sipCpp, sipType_QMimeType, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_swap, doc_QMimeType_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMimeType_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_isValid, doc_QMimeType_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_isDefault, "isDefault(self) -> bool");

extern "C" {static PyObject *meth_QMimeType_isDefault(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_isDefault(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDefault();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_isDefault, doc_QMimeType_isDefault);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_name, "name(self) -> str");

extern "C" {static PyObject *meth_QMimeType_name(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_name, doc_QMimeType_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_comment, "comment(self) -> str");

extern "C" {static PyObject *meth_QMimeType_comment(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_comment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->comment());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_comment, doc_QMimeType_comment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_genericIconName, "genericIconName(self) -> str");

extern "C" {static PyObject *meth_QMimeType_genericIconName(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_genericIconName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->genericIconName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_genericIconName, doc_QMimeType_genericIconName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_iconName, "iconName(self) -> str");

extern "C" {static PyObject *meth_QMimeType_iconName(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_iconName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->iconName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_iconName, doc_QMimeType_iconName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_globPatterns, "globPatterns(self) -> List[str]");

extern "C" {static PyObject *meth_QMimeType_globPatterns(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_globPatterns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->globPatterns());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_globPatterns, doc_QMimeType_globPatterns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_parentMimeTypes, "parentMimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QMimeType_parentMimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_parentMimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->parentMimeTypes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_parentMimeTypes, doc_QMimeType_parentMimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_allAncestors, "allAncestors(self) -> List[str]");

extern "C" {static PyObject *meth_QMimeType_allAncestors(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_allAncestors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->allAncestors());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_allAncestors, doc_QMimeType_allAncestors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_aliases, "aliases(self) -> List[str]");

extern "C" {static PyObject *meth_QMimeType_aliases(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_aliases(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->aliases());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_aliases, doc_QMimeType_aliases);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_suffixes, "suffixes(self) -> List[str]");

extern "C" {static PyObject *meth_QMimeType_suffixes(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_suffixes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->suffixes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_suffixes, doc_QMimeType_suffixes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_preferredSuffix, "preferredSuffix(self) -> str");

extern "C" {static PyObject *meth_QMimeType_preferredSuffix(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_preferredSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->preferredSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_preferredSuffix, doc_QMimeType_preferredSuffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_inherits, "inherits(self, str) -> bool");

extern "C" {static PyObject *meth_QMimeType_inherits(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_inherits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeType, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->inherits(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_inherits, doc_QMimeType_inherits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeType_filterString, "filterString(self) -> str");

extern "C" {static PyObject *meth_QMimeType_filterString(PyObject *, PyObject *);}
static PyObject *meth_QMimeType_filterString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeType, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->filterString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeType, sipName_filterString, doc_QMimeType_filterString);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QMimeType___hash__(PyObject *);}
static long slot_QMimeType___hash__(PyObject *sipSelf)
{
     ::QMimeType *sipCpp = reinterpret_cast< ::QMimeType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMimeType));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 53 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimetype.sip"
        sipRes = qHash(*sipCpp);
#line 3069 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QMimeType___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMimeType___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMimeType *sipCpp = reinterpret_cast< ::QMimeType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMimeType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMimeType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMimeType::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QMimeType, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMimeType___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMimeType___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMimeType *sipCpp = reinterpret_cast< ::QMimeType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMimeType));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeType* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMimeType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QMimeType::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QMimeType, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QMimeType(void *, int);}
static void release_QMimeType(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMimeType *>(sipCppV);
}


extern "C" {static void assign_QMimeType(void *, SIP_SSIZE_T, void *);}
static void assign_QMimeType(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMimeType *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMimeType *>(sipSrc);
}


extern "C" {static void *array_QMimeType(SIP_SSIZE_T);}
static void *array_QMimeType(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMimeType[sipNrElem];
}


extern "C" {static void *copy_QMimeType(const void *, SIP_SSIZE_T);}
static void *copy_QMimeType(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMimeType(reinterpret_cast<const  ::QMimeType *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMimeType(sipSimpleWrapper *);}
static void dealloc_QMimeType(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMimeType(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMimeType(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMimeType(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMimeType *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMimeType();

            return sipCpp;
        }
    }

    {
        const  ::QMimeType* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMimeType, &a0))
        {
            sipCpp = new  ::QMimeType(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMimeType[] = {
    {(void *)slot_QMimeType___hash__, hash_slot},
    {(void *)slot_QMimeType___ne__, ne_slot},
    {(void *)slot_QMimeType___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMimeType[] = {
    {SIP_MLNAME_CAST(sipName_aliases), meth_QMimeType_aliases, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_aliases)},
    {SIP_MLNAME_CAST(sipName_allAncestors), meth_QMimeType_allAncestors, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_allAncestors)},
    {SIP_MLNAME_CAST(sipName_comment), meth_QMimeType_comment, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_comment)},
    {SIP_MLNAME_CAST(sipName_filterString), meth_QMimeType_filterString, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_filterString)},
    {SIP_MLNAME_CAST(sipName_genericIconName), meth_QMimeType_genericIconName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_genericIconName)},
    {SIP_MLNAME_CAST(sipName_globPatterns), meth_QMimeType_globPatterns, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_globPatterns)},
    {SIP_MLNAME_CAST(sipName_iconName), meth_QMimeType_iconName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_iconName)},
    {SIP_MLNAME_CAST(sipName_inherits), meth_QMimeType_inherits, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_inherits)},
    {SIP_MLNAME_CAST(sipName_isDefault), meth_QMimeType_isDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_isDefault)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QMimeType_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_QMimeType_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_name)},
    {SIP_MLNAME_CAST(sipName_parentMimeTypes), meth_QMimeType_parentMimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_parentMimeTypes)},
    {SIP_MLNAME_CAST(sipName_preferredSuffix), meth_QMimeType_preferredSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_preferredSuffix)},
    {SIP_MLNAME_CAST(sipName_suffixes), meth_QMimeType_suffixes, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_suffixes)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QMimeType_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeType_swap)}
};

PyDoc_STRVAR(doc_QMimeType, "\1QMimeType()\n"
"QMimeType(QMimeType)");


static pyqt5ClassPluginDef plugin_QMimeType = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMimeType = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMimeType,
        {SIP_NULLPTR},
        &plugin_QMimeType
    },
    {
        sipNameNr_QMimeType,
        {0, 0, 1},
        15, methods_QMimeType,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMimeType,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMimeType,
    init_type_QMimeType,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMimeType,
    assign_QMimeType,
    array_QMimeType,
    copy_QMimeType,
    release_QMimeType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedatabase.sip"
#include <qmimedatabase.h>
#line 3303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimetype.sip"
#include <qmimetype.h>
#line 3310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 3313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 3316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 3319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 3322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 3325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForName, "mimeTypeForName(self, str) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForName, doc_QMimeDatabase_mimeTypeForName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForFile, "mimeTypeForFile(self, str, mode: QMimeDatabase.MatchMode = QMimeDatabase.MatchDefault) -> QMimeType\n"
"mimeTypeForFile(self, QFileInfo, mode: QMimeDatabase.MatchMode = QMimeDatabase.MatchDefault) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMimeDatabase::MatchMode a1 = QMimeDatabase::MatchDefault;
        const  ::QMimeDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QMimeDatabase_MatchMode, &a1))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForFile(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    {
        const  ::QFileInfo* a0;
         ::QMimeDatabase::MatchMode a1 = QMimeDatabase::MatchDefault;
        const  ::QMimeDatabase *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|E", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QFileInfo, &a0, sipType_QMimeDatabase_MatchMode, &a1))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForFile(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForFile, doc_QMimeDatabase_mimeTypeForFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypesForFileName, "mimeTypesForFileName(self, str) -> List[QMimeType]");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypesForFileName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypesForFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QList< ::QMimeType>*sipRes;

            sipRes = new QList< ::QMimeType>(sipCpp->mimeTypesForFileName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QMimeType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypesForFileName, doc_QMimeDatabase_mimeTypesForFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForData, "mimeTypeForData(self, Union[QByteArray, bytes, bytearray]) -> QMimeType\n"
"mimeTypeForData(self, QIODevice) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForData(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForData(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    {
         ::QIODevice* a0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QIODevice, &a0))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForData(a0));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForData, doc_QMimeDatabase_mimeTypeForData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForUrl, "mimeTypeForUrl(self, QUrl) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForUrl(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QUrl, &a0))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForUrl(*a0));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForUrl, doc_QMimeDatabase_mimeTypeForUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForFileNameAndData, "mimeTypeForFileNameAndData(self, str, QIODevice) -> QMimeType\n"
"mimeTypeForFileNameAndData(self, str, Union[QByteArray, bytes, bytearray]) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForFileNameAndData(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForFileNameAndData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice* a1;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice, &a1))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForFileNameAndData(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
             ::QMimeType*sipRes;

            sipRes = new  ::QMimeType(sipCpp->mimeTypeForFileNameAndData(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForFileNameAndData, doc_QMimeDatabase_mimeTypeForFileNameAndData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_suffixForFileName, "suffixForFileName(self, str) -> str");

extern "C" {static PyObject *meth_QMimeDatabase_suffixForFileName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_suffixForFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->suffixForFileName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_suffixForFileName, doc_QMimeDatabase_suffixForFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeDatabase_allMimeTypes, "allMimeTypes(self) -> List[QMimeType]");

extern "C" {static PyObject *meth_QMimeDatabase_allMimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_allMimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeDatabase, &sipCpp))
        {
            QList< ::QMimeType>*sipRes;

            sipRes = new QList< ::QMimeType>(sipCpp->allMimeTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QMimeType,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_allMimeTypes, doc_QMimeDatabase_allMimeTypes);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMimeDatabase(void *, int);}
static void release_QMimeDatabase(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMimeDatabase *>(sipCppV);
}


extern "C" {static void dealloc_QMimeDatabase(sipSimpleWrapper *);}
static void dealloc_QMimeDatabase(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMimeDatabase(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMimeDatabase(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMimeDatabase(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMimeDatabase *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMimeDatabase();

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMimeDatabase[] = {
    {SIP_MLNAME_CAST(sipName_allMimeTypes), meth_QMimeDatabase_allMimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_allMimeTypes)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForData), meth_QMimeDatabase_mimeTypeForData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForData)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForFile), SIP_MLMETH_CAST(meth_QMimeDatabase_mimeTypeForFile), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForFile)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForFileNameAndData), meth_QMimeDatabase_mimeTypeForFileNameAndData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForFileNameAndData)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForName), meth_QMimeDatabase_mimeTypeForName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForName)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForUrl), meth_QMimeDatabase_mimeTypeForUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForUrl)},
    {SIP_MLNAME_CAST(sipName_mimeTypesForFileName), meth_QMimeDatabase_mimeTypesForFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypesForFileName)},
    {SIP_MLNAME_CAST(sipName_suffixForFileName), meth_QMimeDatabase_suffixForFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_suffixForFileName)}
};

static sipEnumMemberDef enummembers_QMimeDatabase[] = {
    {sipName_MatchContent, static_cast<int>( ::QMimeDatabase::MatchContent), 177},
    {sipName_MatchDefault, static_cast<int>( ::QMimeDatabase::MatchDefault), 177},
    {sipName_MatchExtension, static_cast<int>( ::QMimeDatabase::MatchExtension), 177},
};

PyDoc_STRVAR(doc_QMimeDatabase, "\1QMimeDatabase()");


static pyqt5ClassPluginDef plugin_QMimeDatabase = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMimeDatabase = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMimeDatabase,
        {SIP_NULLPTR},
        &plugin_QMimeDatabase
    },
    {
        sipNameNr_QMimeDatabase,
        {0, 0, 1},
        8, methods_QMimeDatabase,
        3, enummembers_QMimeDatabase,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMimeDatabase,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMimeDatabase,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMimeDatabase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMimeDatabase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 3753 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 3757 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 3760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 3763 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 3766 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3769 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 3772 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 3775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 3787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 3799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 3805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 3808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 3811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQMimeData : public  ::QMimeData
{
public:
    sipQMimeData();
    virtual ~sipQMimeData();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QVariant retrieveData(const  ::QString&, ::QVariant::Type) const SIP_OVERRIDE;
     ::QStringList formats() const SIP_OVERRIDE;
    bool hasFormat(const  ::QString&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMimeData(const sipQMimeData &);
    sipQMimeData &operator = (const sipQMimeData &);

    char sipPyMethods[10];
};

sipQMimeData::sipQMimeData():  ::QMimeData(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMimeData::~sipQMimeData()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQMimeData::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QMimeData);

    return  ::QMimeData::metaObject();
}

int sipQMimeData::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMimeData::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QMimeData,_c,_id,_a);

    return _id;
}

void *sipQMimeData::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QMimeData, _clname, &sipCpp) ? sipCpp :  ::QMimeData::qt_metacast(_clname));
}

 ::QVariant sipQMimeData::retrieveData(const  ::QString& a0, ::QVariant::Type a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_retrieveData);

    if (!sipMeth)
        return  ::QMimeData::retrieveData(a0,a1);

    extern  ::QVariant sipVH_QtCore_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::QVariant::Type);

    return sipVH_QtCore_56(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQMimeData::formats() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_formats);

    if (!sipMeth)
        return  ::QMimeData::formats();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQMimeData::hasFormat(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_hasFormat);

    if (!sipMeth)
        return  ::QMimeData::hasFormat(a0);

    extern bool sipVH_QtCore_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtCore_55(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQMimeData::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QMimeData::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQMimeData::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QMimeData::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQMimeData::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QMimeData::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQMimeData::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QMimeData::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQMimeData::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QMimeData::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQMimeData::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QMimeData::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQMimeData::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QMimeData::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QMimeData_urls, "urls(self) -> List[QUrl]");

extern "C" {static PyObject *meth_QMimeData_urls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_urls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            QList< ::QUrl>*sipRes;

            sipRes = new QList< ::QUrl>(sipCpp->urls());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_urls, doc_QMimeData_urls);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_setUrls, "setUrls(self, Iterable[QUrl])");

extern "C" {static PyObject *meth_QMimeData_setUrls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QUrl>* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            sipCpp->setUrls(*a0);
            sipReleaseType(const_cast<QList< ::QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setUrls, doc_QMimeData_setUrls);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_hasUrls, "hasUrls(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasUrls(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasUrls();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasUrls, doc_QMimeData_hasUrls);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_text, "text(self) -> str");

extern "C" {static PyObject *meth_QMimeData_text(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_text, doc_QMimeData_text);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QMimeData_setText(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setText, doc_QMimeData_setText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_hasText, "hasText(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasText(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasText();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasText, doc_QMimeData_hasText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_html, "html(self) -> str");

extern "C" {static PyObject *meth_QMimeData_html(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_html(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->html());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_html, doc_QMimeData_html);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_setHtml, "setHtml(self, str)");

extern "C" {static PyObject *meth_QMimeData_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHtml(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setHtml, doc_QMimeData_setHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_hasHtml, "hasHtml(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasHtml(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasHtml();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasHtml, doc_QMimeData_hasHtml);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_imageData, "imageData(self) -> Any");

extern "C" {static PyObject *meth_QMimeData_imageData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_imageData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->imageData());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_imageData, doc_QMimeData_imageData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_setImageData, "setImageData(self, Any)");

extern "C" {static PyObject *meth_QMimeData_setImageData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setImageData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setImageData(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setImageData, doc_QMimeData_setImageData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_hasImage, "hasImage(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasImage(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasImage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasImage, doc_QMimeData_hasImage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_colorData, "colorData(self) -> Any");

extern "C" {static PyObject *meth_QMimeData_colorData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_colorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->colorData());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_colorData, doc_QMimeData_colorData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_setColorData, "setColorData(self, Any)");

extern "C" {static PyObject *meth_QMimeData_setColorData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setColorData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setColorData(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setColorData, doc_QMimeData_setColorData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_hasColor, "hasColor(self) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasColor(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasColor();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasColor, doc_QMimeData_hasColor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_data, "data(self, str) -> QByteArray");

extern "C" {static PyObject *meth_QMimeData_data(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->data(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_data, doc_QMimeData_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_setData, "setData(self, str, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QMimeData_setData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setData(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_setData, doc_QMimeData_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_hasFormat, "hasFormat(self, str) -> bool");

extern "C" {static PyObject *meth_QMimeData_hasFormat(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_hasFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QMimeData::hasFormat(*a0) : sipCpp->hasFormat(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_hasFormat, doc_QMimeData_hasFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_formats, "formats(self) -> List[str]");

extern "C" {static PyObject *meth_QMimeData_formats(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_formats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QMimeData::formats() : sipCpp->formats()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_formats, doc_QMimeData_formats);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_clear, "clear(self)");

extern "C" {static PyObject *meth_QMimeData_clear(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeData, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_clear, doc_QMimeData_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_removeFormat, "removeFormat(self, str)");

extern "C" {static PyObject *meth_QMimeData_removeFormat(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_removeFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeFormat(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_removeFormat, doc_QMimeData_removeFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMimeData_retrieveData, "retrieveData(self, str, QVariant.Type) -> Any");

extern "C" {static PyObject *meth_QMimeData_retrieveData(PyObject *, PyObject *);}
static PyObject *meth_QMimeData_retrieveData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QVariant::Type a1;
        const  ::QMimeData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1E", &sipSelf, sipType_QMimeData, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant_Type, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QMimeData::retrieveData(*a0,a1) : sipCpp->retrieveData(*a0,a1)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeData, sipName_retrieveData, doc_QMimeData_retrieveData);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMimeData(void *, const sipTypeDef *);}
static void *cast_QMimeData(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMimeData *sipCpp = reinterpret_cast< ::QMimeData *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMimeData(void *, int);}
static void release_QMimeData(void *sipCppV, int)
{
     ::QMimeData *sipCpp = reinterpret_cast< ::QMimeData *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMimeData(sipSimpleWrapper *);}
static void dealloc_QMimeData(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMimeData *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMimeData(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMimeData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMimeData(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMimeData *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQMimeData();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMimeData[] = {{183, 255, 1}};


static PyMethodDef methods_QMimeData[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QMimeData_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_clear)},
    {SIP_MLNAME_CAST(sipName_colorData), meth_QMimeData_colorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_colorData)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMimeData_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_data)},
    {SIP_MLNAME_CAST(sipName_formats), meth_QMimeData_formats, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_formats)},
    {SIP_MLNAME_CAST(sipName_hasColor), meth_QMimeData_hasColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasColor)},
    {SIP_MLNAME_CAST(sipName_hasFormat), meth_QMimeData_hasFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasFormat)},
    {SIP_MLNAME_CAST(sipName_hasHtml), meth_QMimeData_hasHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasHtml)},
    {SIP_MLNAME_CAST(sipName_hasImage), meth_QMimeData_hasImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasImage)},
    {SIP_MLNAME_CAST(sipName_hasText), meth_QMimeData_hasText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasText)},
    {SIP_MLNAME_CAST(sipName_hasUrls), meth_QMimeData_hasUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_hasUrls)},
    {SIP_MLNAME_CAST(sipName_html), meth_QMimeData_html, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_html)},
    {SIP_MLNAME_CAST(sipName_imageData), meth_QMimeData_imageData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_imageData)},
    {SIP_MLNAME_CAST(sipName_removeFormat), meth_QMimeData_removeFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_removeFormat)},
    {SIP_MLNAME_CAST(sipName_retrieveData), meth_QMimeData_retrieveData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_retrieveData)},
    {SIP_MLNAME_CAST(sipName_setColorData), meth_QMimeData_setColorData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setColorData)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QMimeData_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setData)},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QMimeData_setHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setHtml)},
    {SIP_MLNAME_CAST(sipName_setImageData), meth_QMimeData_setImageData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setImageData)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QMimeData_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setText)},
    {SIP_MLNAME_CAST(sipName_setUrls), meth_QMimeData_setUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_setUrls)},
    {SIP_MLNAME_CAST(sipName_text), meth_QMimeData_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_text)},
    {SIP_MLNAME_CAST(sipName_urls), meth_QMimeData_urls, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeData_urls)}
};

PyDoc_STRVAR(doc_QMimeData, "\1QMimeData()");


static pyqt5ClassPluginDef plugin_QMimeData = {
    & ::QMimeData::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMimeData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMimeData,
        {SIP_NULLPTR},
        &plugin_QMimeData
    },
    {
        sipNameNr_QMimeData,
        {0, 0, 1},
        22, methods_QMimeData,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMimeData,
    -1,
    -1,
    supers_QMimeData,
    SIP_NULLPTR,
    init_type_QMimeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMimeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMimeData,
    cast_QMimeData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 4847 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 4851 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QMetaType_TypeFlags___hash__(PyObject *);}
static long slot_QMetaType_TypeFlags___hash__(PyObject *sipSelf)
{
     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QMetaType::TypeFlags::Int();
#line 4869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QMetaType_TypeFlags___bool__(PyObject *);}
static int slot_QMetaType_TypeFlags___bool__(PyObject *sipSelf)
{
     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QMetaType::TypeFlags::Int() != 0);
#line 4894 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaType::TypeFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QMetaType_TypeFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QMetaType::TypeFlags::Int() != a0->operator QMetaType::TypeFlags::Int());
#line 4924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QMetaType::TypeFlags *>(a0),sipType_QMetaType_TypeFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QMetaType_TypeFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaType::TypeFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QMetaType_TypeFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QMetaType::TypeFlags::Int() == a0->operator QMetaType::TypeFlags::Int());
#line 4960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QMetaType::TypeFlags *>(a0),sipType_QMetaType_TypeFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QMetaType_TypeFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMetaType_TypeFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QMetaType::TypeFlags(*sipCpp ^ a0);
#line 4999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMetaType::TypeFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QMetaType_TypeFlags, &a0, &a0State, &a1))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QMetaType_TypeFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMetaType_TypeFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QMetaType::TypeFlags(*sipCpp | a0);
#line 5071 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMetaType::TypeFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QMetaType_TypeFlags, &a0, &a0State, &a1))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QMetaType_TypeFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMetaType_TypeFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QMetaType::TypeFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMetaType::TypeFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QMetaType_TypeFlags, &a0, &a0State, &a1))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QMetaType_TypeFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___invert__(PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___invert__(PyObject *sipSelf)
{
     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QMetaType_TypeFlags___int__(PyObject *);}
static PyObject *slot_QMetaType_TypeFlags___int__(PyObject *sipSelf)
{
     ::QMetaType::TypeFlags *sipCpp = reinterpret_cast< ::QMetaType::TypeFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaType_TypeFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaType_TypeFlags(void *, int);}
static void release_QMetaType_TypeFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaType::TypeFlags *>(sipCppV);
}


extern "C" {static void assign_QMetaType_TypeFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QMetaType_TypeFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMetaType::TypeFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMetaType::TypeFlags *>(sipSrc);
}


extern "C" {static void *array_QMetaType_TypeFlags(SIP_SSIZE_T);}
static void *array_QMetaType_TypeFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMetaType::TypeFlags[sipNrElem];
}


extern "C" {static void *copy_QMetaType_TypeFlags(const void *, SIP_SSIZE_T);}
static void *copy_QMetaType_TypeFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMetaType::TypeFlags(reinterpret_cast<const  ::QMetaType::TypeFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaType_TypeFlags(sipSimpleWrapper *);}
static void dealloc_QMetaType_TypeFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaType_TypeFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaType_TypeFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaType_TypeFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaType::TypeFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMetaType::TypeFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QMetaType::TypeFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QMetaType::TypeFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QMetaType_TypeFlags, &a0, &a0State))
        {
            sipCpp = new  ::QMetaType::TypeFlags(*a0);
            sipReleaseType(const_cast< ::QMetaType::TypeFlags *>(a0),sipType_QMetaType_TypeFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QMetaType_TypeFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QMetaType_TypeFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QMetaType::TypeFlags **sipCppPtr = reinterpret_cast< ::QMetaType::TypeFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QMetaType::TypeFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QMetaType_TypeFlag)) ||
            sipCanConvertToType(sipPy, sipType_QMetaType_TypeFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QMetaType_TypeFlag)))
{
    *sipCppPtr = new QMetaType::TypeFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QMetaType::TypeFlags *>(sipConvertToType(sipPy, sipType_QMetaType_TypeFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 5339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMetaType_TypeFlags[] = {
    {(void *)slot_QMetaType_TypeFlags___hash__, hash_slot},
    {(void *)slot_QMetaType_TypeFlags___bool__, bool_slot},
    {(void *)slot_QMetaType_TypeFlags___ne__, ne_slot},
    {(void *)slot_QMetaType_TypeFlags___eq__, eq_slot},
    {(void *)slot_QMetaType_TypeFlags___ixor__, ixor_slot},
    {(void *)slot_QMetaType_TypeFlags___xor__, xor_slot},
    {(void *)slot_QMetaType_TypeFlags___ior__, ior_slot},
    {(void *)slot_QMetaType_TypeFlags___or__, or_slot},
    {(void *)slot_QMetaType_TypeFlags___iand__, iand_slot},
    {(void *)slot_QMetaType_TypeFlags___and__, and_slot},
    {(void *)slot_QMetaType_TypeFlags___invert__, invert_slot},
    {(void *)slot_QMetaType_TypeFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QMetaType_TypeFlags, "\1QMetaType.TypeFlags()\n"
"QMetaType.TypeFlags(Union[QMetaType.TypeFlags, QMetaType.TypeFlag])\n"
"QMetaType.TypeFlags(QMetaType.TypeFlags)");


static pyqt5ClassPluginDef plugin_QMetaType_TypeFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaType_TypeFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaType__TypeFlags,
        {SIP_NULLPTR},
        &plugin_QMetaType_TypeFlags
    },
    {
        sipNameNr_TypeFlags,
        {171, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaType_TypeFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMetaType_TypeFlags,
    init_type_QMetaType_TypeFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaType_TypeFlags,
    assign_QMetaType_TypeFlags,
    array_QMetaType_TypeFlags,
    copy_QMetaType_TypeFlags,
    release_QMetaType_TypeFlags,
    SIP_NULLPTR,
    convertTo_QMetaType_TypeFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 5427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 5431 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 5434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMetaType_type, "type(str) -> int");

extern "C" {static PyObject *meth_QMetaType_type(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_type(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
            int sipRes;

            sipRes =  ::QMetaType::type(a0);
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_type, doc_QMetaType_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_typeName, "typeName(int) -> str");

extern "C" {static PyObject *meth_QMetaType_typeName(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_typeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const char*sipRes;

            sipRes =  ::QMetaType::typeName(a0);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_typeName, doc_QMetaType_typeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_isRegistered, "isRegistered(int) -> bool\n"
"isRegistered(self) -> bool");

extern "C" {static PyObject *meth_QMetaType_isRegistered(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_isRegistered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            bool sipRes;

            sipRes =  ::QMetaType::isRegistered(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRegistered();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_isRegistered, doc_QMetaType_isRegistered);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_typeFlags, "typeFlags(int) -> QMetaType.TypeFlags");

extern "C" {static PyObject *meth_QMetaType_typeFlags(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_typeFlags(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags( ::QMetaType::typeFlags(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_typeFlags, doc_QMetaType_typeFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_flags, "flags(self) -> QMetaType.TypeFlags");

extern "C" {static PyObject *meth_QMetaType_flags(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
             ::QMetaType::TypeFlags*sipRes;

            sipRes = new  ::QMetaType::TypeFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QMetaType_TypeFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_flags, doc_QMetaType_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMetaType_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaType *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaType, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_isValid, doc_QMetaType_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaType_metaObjectForType, "metaObjectForType(int) -> QMetaObject");

extern "C" {static PyObject *meth_QMetaType_metaObjectForType(PyObject *, PyObject *);}
static PyObject *meth_QMetaType_metaObjectForType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            const  ::QMetaObject*sipRes;

            sipRes =  ::QMetaType::metaObjectForType(a0);

            return sipConvertFromType(const_cast< ::QMetaObject *>(sipRes),sipType_QMetaObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaType, sipName_metaObjectForType, doc_QMetaType_metaObjectForType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaType(void *, int);}
static void release_QMetaType(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaType *>(sipCppV);
}


extern "C" {static void dealloc_QMetaType(sipSimpleWrapper *);}
static void dealloc_QMetaType(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaType(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaType(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaType(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaType *sipCpp = SIP_NULLPTR;

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QMetaType(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMetaType[] = {
    {SIP_MLNAME_CAST(sipName_flags), meth_QMetaType_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_flags)},
    {SIP_MLNAME_CAST(sipName_isRegistered), meth_QMetaType_isRegistered, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_isRegistered)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QMetaType_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_isValid)},
    {SIP_MLNAME_CAST(sipName_metaObjectForType), meth_QMetaType_metaObjectForType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_metaObjectForType)},
    {SIP_MLNAME_CAST(sipName_type), meth_QMetaType_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_type)},
    {SIP_MLNAME_CAST(sipName_typeFlags), meth_QMetaType_typeFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_typeFlags)},
    {SIP_MLNAME_CAST(sipName_typeName), meth_QMetaType_typeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaType_typeName)}
};

static sipEnumMemberDef enummembers_QMetaType[] = {
    {sipName_Bool, static_cast<int>( ::QMetaType::Bool), 172},
    {sipName_Char, static_cast<int>( ::QMetaType::Char), 172},
    {sipName_Double, static_cast<int>( ::QMetaType::Double), 172},
    {sipName_FirstGuiType, static_cast<int>( ::QMetaType::FirstGuiType), 172},
    {sipName_Float, static_cast<int>( ::QMetaType::Float), 172},
    {sipName_Int, static_cast<int>( ::QMetaType::Int), 172},
    {sipName_IsEnumeration, static_cast<int>( ::QMetaType::IsEnumeration), 173},
    {sipName_LastCoreType, static_cast<int>( ::QMetaType::LastCoreType), 172},
    {sipName_Long, static_cast<int>( ::QMetaType::Long), 172},
    {sipName_LongLong, static_cast<int>( ::QMetaType::LongLong), 172},
    {sipName_MovableType, static_cast<int>( ::QMetaType::MovableType), 173},
    {sipName_NeedsConstruction, static_cast<int>( ::QMetaType::NeedsConstruction), 173},
    {sipName_NeedsDestruction, static_cast<int>( ::QMetaType::NeedsDestruction), 173},
    {sipName_PointerToQObject, static_cast<int>( ::QMetaType::PointerToQObject), 173},
    {sipName_QBitArray, static_cast<int>( ::QMetaType::QBitArray), 172},
    {sipName_QBitmap, static_cast<int>( ::QMetaType::QBitmap), 172},
    {sipName_QBrush, static_cast<int>( ::QMetaType::QBrush), 172},
    {sipName_QByteArray, static_cast<int>( ::QMetaType::QByteArray), 172},
    {sipName_QByteArrayList, static_cast<int>( ::QMetaType::QByteArrayList), 172},
    {sipName_QCborArray, static_cast<int>( ::QMetaType::QCborArray), 172},
    {sipName_QCborMap, static_cast<int>( ::QMetaType::QCborMap), 172},
    {sipName_QCborSimpleType, static_cast<int>( ::QMetaType::QCborSimpleType), 172},
    {sipName_QCborValue, static_cast<int>( ::QMetaType::QCborValue), 172},
    {sipName_QChar, static_cast<int>( ::QMetaType::QChar), 172},
    {sipName_QColor, static_cast<int>( ::QMetaType::QColor), 172},
    {sipName_QCursor, static_cast<int>( ::QMetaType::QCursor), 172},
    {sipName_QDate, static_cast<int>( ::QMetaType::QDate), 172},
    {sipName_QDateTime, static_cast<int>( ::QMetaType::QDateTime), 172},
    {sipName_QEasingCurve, static_cast<int>( ::QMetaType::QEasingCurve), 172},
    {sipName_QFont, static_cast<int>( ::QMetaType::QFont), 172},
    {sipName_QIcon, static_cast<int>( ::QMetaType::QIcon), 172},
    {sipName_QImage, static_cast<int>( ::QMetaType::QImage), 172},
    {sipName_QJsonArray, static_cast<int>( ::QMetaType::QJsonArray), 172},
    {sipName_QJsonDocument, static_cast<int>( ::QMetaType::QJsonDocument), 172},
    {sipName_QJsonObject, static_cast<int>( ::QMetaType::QJsonObject), 172},
    {sipName_QJsonValue, static_cast<int>( ::QMetaType::QJsonValue), 172},
    {sipName_QKeySequence, static_cast<int>( ::QMetaType::QKeySequence), 172},
    {sipName_QLine, static_cast<int>( ::QMetaType::QLine), 172},
    {sipName_QLineF, static_cast<int>( ::QMetaType::QLineF), 172},
    {sipName_QLocale, static_cast<int>( ::QMetaType::QLocale), 172},
    {sipName_QMatrix, static_cast<int>( ::QMetaType::QMatrix), 172},
    {sipName_QMatrix4x4, static_cast<int>( ::QMetaType::QMatrix4x4), 172},
    {sipName_QModelIndex, static_cast<int>( ::QMetaType::QModelIndex), 172},
    {sipName_QObjectStar, static_cast<int>( ::QMetaType::QObjectStar), 172},
    {sipName_QPalette, static_cast<int>( ::QMetaType::QPalette), 172},
    {sipName_QPen, static_cast<int>( ::QMetaType::QPen), 172},
    {sipName_QPersistentModelIndex, static_cast<int>( ::QMetaType::QPersistentModelIndex), 172},
    {sipName_QPixmap, static_cast<int>( ::QMetaType::QPixmap), 172},
    {sipName_QPoint, static_cast<int>( ::QMetaType::QPoint), 172},
    {sipName_QPointF, static_cast<int>( ::QMetaType::QPointF), 172},
    {sipName_QPolygon, static_cast<int>( ::QMetaType::QPolygon), 172},
    {sipName_QPolygonF, static_cast<int>( ::QMetaType::QPolygonF), 172},
    {sipName_QQuaternion, static_cast<int>( ::QMetaType::QQuaternion), 172},
    {sipName_QRect, static_cast<int>( ::QMetaType::QRect), 172},
    {sipName_QRectF, static_cast<int>( ::QMetaType::QRectF), 172},
    {sipName_QRegExp, static_cast<int>( ::QMetaType::QRegExp), 172},
    {sipName_QRegion, static_cast<int>( ::QMetaType::QRegion), 172},
    {sipName_QRegularExpression, static_cast<int>( ::QMetaType::QRegularExpression), 172},
    {sipName_QSize, static_cast<int>( ::QMetaType::QSize), 172},
    {sipName_QSizeF, static_cast<int>( ::QMetaType::QSizeF), 172},
    {sipName_QSizePolicy, static_cast<int>( ::QMetaType::QSizePolicy), 172},
    {sipName_QString, static_cast<int>( ::QMetaType::QString), 172},
    {sipName_QStringList, static_cast<int>( ::QMetaType::QStringList), 172},
    {sipName_QTextFormat, static_cast<int>( ::QMetaType::QTextFormat), 172},
    {sipName_QTextLength, static_cast<int>( ::QMetaType::QTextLength), 172},
    {sipName_QTime, static_cast<int>( ::QMetaType::QTime), 172},
    {sipName_QTransform, static_cast<int>( ::QMetaType::QTransform), 172},
    {sipName_QUrl, static_cast<int>( ::QMetaType::QUrl), 172},
    {sipName_QUuid, static_cast<int>( ::QMetaType::QUuid), 172},
    {sipName_QVariant, static_cast<int>( ::QMetaType::QVariant), 172},
    {sipName_QVariantHash, static_cast<int>( ::QMetaType::QVariantHash), 172},
    {sipName_QVariantList, static_cast<int>( ::QMetaType::QVariantList), 172},
    {sipName_QVariantMap, static_cast<int>( ::QMetaType::QVariantMap), 172},
    {sipName_QVector2D, static_cast<int>( ::QMetaType::QVector2D), 172},
    {sipName_QVector3D, static_cast<int>( ::QMetaType::QVector3D), 172},
    {sipName_QVector4D, static_cast<int>( ::QMetaType::QVector4D), 172},
    {sipName_SChar, static_cast<int>( ::QMetaType::SChar), 172},
    {sipName_Short, static_cast<int>( ::QMetaType::Short), 172},
    {sipName_UChar, static_cast<int>( ::QMetaType::UChar), 172},
    {sipName_UInt, static_cast<int>( ::QMetaType::UInt), 172},
    {sipName_ULong, static_cast<int>( ::QMetaType::ULong), 172},
    {sipName_ULongLong, static_cast<int>( ::QMetaType::ULongLong), 172},
    {sipName_UShort, static_cast<int>( ::QMetaType::UShort), 172},
    {sipName_UnknownType, static_cast<int>( ::QMetaType::UnknownType), 172},
    {sipName_User, static_cast<int>( ::QMetaType::User), 172},
    {sipName_Void, static_cast<int>( ::QMetaType::Void), 172},
    {sipName_VoidStar, static_cast<int>( ::QMetaType::VoidStar), 172},
};

PyDoc_STRVAR(doc_QMetaType, "\1QMetaType(int)");


static pyqt5ClassPluginDef plugin_QMetaType = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaType = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaType,
        {SIP_NULLPTR},
        &plugin_QMetaType
    },
    {
        sipNameNr_QMetaType,
        {0, 0, 1},
        7, methods_QMetaType,
        87, enummembers_QMetaType,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaType,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMetaType,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMetaType,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 5857 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



PyDoc_STRVAR(doc_QMetaClassInfo_name, "name(self) -> str");

extern "C" {static PyObject *meth_QMetaClassInfo_name(PyObject *, PyObject *);}
static PyObject *meth_QMetaClassInfo_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaClassInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaClassInfo, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->name();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaClassInfo, sipName_name, doc_QMetaClassInfo_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaClassInfo_value, "value(self) -> str");

extern "C" {static PyObject *meth_QMetaClassInfo_value(PyObject *, PyObject *);}
static PyObject *meth_QMetaClassInfo_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaClassInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaClassInfo, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->value();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaClassInfo, sipName_value, doc_QMetaClassInfo_value);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaClassInfo(void *, int);}
static void release_QMetaClassInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaClassInfo *>(sipCppV);
}


extern "C" {static void assign_QMetaClassInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QMetaClassInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMetaClassInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMetaClassInfo *>(sipSrc);
}


extern "C" {static void *array_QMetaClassInfo(SIP_SSIZE_T);}
static void *array_QMetaClassInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMetaClassInfo[sipNrElem];
}


extern "C" {static void *copy_QMetaClassInfo(const void *, SIP_SSIZE_T);}
static void *copy_QMetaClassInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMetaClassInfo(reinterpret_cast<const  ::QMetaClassInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaClassInfo(sipSimpleWrapper *);}
static void dealloc_QMetaClassInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaClassInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaClassInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaClassInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaClassInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMetaClassInfo();

            return sipCpp;
        }
    }

    {
        const  ::QMetaClassInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMetaClassInfo, &a0))
        {
            sipCpp = new  ::QMetaClassInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMetaClassInfo[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QMetaClassInfo_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaClassInfo_name)},
    {SIP_MLNAME_CAST(sipName_value), meth_QMetaClassInfo_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaClassInfo_value)}
};

PyDoc_STRVAR(doc_QMetaClassInfo, "\1QMetaClassInfo()\n"
"QMetaClassInfo(QMetaClassInfo)");


static pyqt5ClassPluginDef plugin_QMetaClassInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaClassInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaClassInfo,
        {SIP_NULLPTR},
        &plugin_QMetaClassInfo
    },
    {
        sipNameNr_QMetaClassInfo,
        {0, 0, 1},
        2, methods_QMetaClassInfo,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaClassInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMetaClassInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaClassInfo,
    assign_QMetaClassInfo,
    array_QMetaClassInfo,
    copy_QMetaClassInfo,
    release_QMetaClassInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 6067 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 6071 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 6074 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 6077 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 6080 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMetaProperty_name, "name(self) -> str");

extern "C" {static PyObject *meth_QMetaProperty_name(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->name();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_name, doc_QMetaProperty_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_typeName, "typeName(self) -> str");

extern "C" {static PyObject *meth_QMetaProperty_typeName(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_typeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->typeName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_typeName, doc_QMetaProperty_typeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_type, "type(self) -> QVariant.Type");

extern "C" {static PyObject *meth_QMetaProperty_type(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
             ::QVariant::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QVariant_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_type, doc_QMetaProperty_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isReadable, "isReadable(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isReadable, doc_QMetaProperty_isReadable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isWritable, doc_QMetaProperty_isWritable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isDesignable, "isDesignable(self, object: QObject = None) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isDesignable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isDesignable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject* a0 = 0;
        const  ::QMetaProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_QMetaProperty, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isDesignable(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isDesignable, doc_QMetaProperty_isDesignable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isScriptable, "isScriptable(self, object: QObject = None) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isScriptable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isScriptable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject* a0 = 0;
        const  ::QMetaProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_QMetaProperty, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isScriptable(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isScriptable, doc_QMetaProperty_isScriptable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isStored, "isStored(self, object: QObject = None) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isStored(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isStored(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject* a0 = 0;
        const  ::QMetaProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_QMetaProperty, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isStored(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isStored, doc_QMetaProperty_isStored);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isFlagType, "isFlagType(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isFlagType(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isFlagType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFlagType();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isFlagType, doc_QMetaProperty_isFlagType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isEnumType, "isEnumType(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isEnumType(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isEnumType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnumType();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isEnumType, doc_QMetaProperty_isEnumType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_enumerator, "enumerator(self) -> QMetaEnum");

extern "C" {static PyObject *meth_QMetaProperty_enumerator(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_enumerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
             ::QMetaEnum*sipRes;

            sipRes = new  ::QMetaEnum(sipCpp->enumerator());

            return sipConvertFromNewType(sipRes,sipType_QMetaEnum,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_enumerator, doc_QMetaProperty_enumerator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_read, "read(self, QObject) -> Any");

extern "C" {static PyObject *meth_QMetaProperty_read(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject* a0;
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMetaProperty, &sipCpp, sipType_QObject, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->read(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_read, doc_QMetaProperty_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_write, "write(self, QObject, Any) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_write(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QMetaProperty, &sipCpp, sipType_QObject, &a0, sipType_QVariant, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->write(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_write, doc_QMetaProperty_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_reset, "reset(self, QObject) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_reset(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMetaProperty, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->reset(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_reset, doc_QMetaProperty_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_hasStdCppSet, "hasStdCppSet(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_hasStdCppSet(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_hasStdCppSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasStdCppSet();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_hasStdCppSet, doc_QMetaProperty_hasStdCppSet);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isValid, doc_QMetaProperty_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isResettable, "isResettable(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isResettable(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isResettable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isResettable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isResettable, doc_QMetaProperty_isResettable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isUser, "isUser(self, object: QObject = None) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isUser(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isUser(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject* a0 = 0;
        const  ::QMetaProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_QMetaProperty, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isUser(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isUser, doc_QMetaProperty_isUser);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_userType, "userType(self) -> int");

extern "C" {static PyObject *meth_QMetaProperty_userType(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_userType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->userType();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_userType, doc_QMetaProperty_userType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_hasNotifySignal, "hasNotifySignal(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_hasNotifySignal(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_hasNotifySignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasNotifySignal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_hasNotifySignal, doc_QMetaProperty_hasNotifySignal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_notifySignal, "notifySignal(self) -> QMetaMethod");

extern "C" {static PyObject *meth_QMetaProperty_notifySignal(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_notifySignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
             ::QMetaMethod*sipRes;

            sipRes = new  ::QMetaMethod(sipCpp->notifySignal());

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_notifySignal, doc_QMetaProperty_notifySignal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_notifySignalIndex, "notifySignalIndex(self) -> int");

extern "C" {static PyObject *meth_QMetaProperty_notifySignalIndex(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_notifySignalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->notifySignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_notifySignalIndex, doc_QMetaProperty_notifySignalIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_propertyIndex, "propertyIndex(self) -> int");

extern "C" {static PyObject *meth_QMetaProperty_propertyIndex(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_propertyIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_propertyIndex, doc_QMetaProperty_propertyIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isConstant, "isConstant(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isConstant(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isConstant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isConstant();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isConstant, doc_QMetaProperty_isConstant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaProperty_isFinal, "isFinal(self) -> bool");

extern "C" {static PyObject *meth_QMetaProperty_isFinal(PyObject *, PyObject *);}
static PyObject *meth_QMetaProperty_isFinal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaProperty, sipName_isFinal, doc_QMetaProperty_isFinal);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaProperty(void *, int);}
static void release_QMetaProperty(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaProperty *>(sipCppV);
}


extern "C" {static void assign_QMetaProperty(void *, SIP_SSIZE_T, void *);}
static void assign_QMetaProperty(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMetaProperty *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMetaProperty *>(sipSrc);
}


extern "C" {static void *array_QMetaProperty(SIP_SSIZE_T);}
static void *array_QMetaProperty(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMetaProperty[sipNrElem];
}


extern "C" {static void *copy_QMetaProperty(const void *, SIP_SSIZE_T);}
static void *copy_QMetaProperty(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMetaProperty(reinterpret_cast<const  ::QMetaProperty *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaProperty(sipSimpleWrapper *);}
static void dealloc_QMetaProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaProperty(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaProperty(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaProperty *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMetaProperty();

            return sipCpp;
        }
    }

    {
        const  ::QMetaProperty* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMetaProperty, &a0))
        {
            sipCpp = new  ::QMetaProperty(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMetaProperty[] = {
    {SIP_MLNAME_CAST(sipName_enumerator), meth_QMetaProperty_enumerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_enumerator)},
    {SIP_MLNAME_CAST(sipName_hasNotifySignal), meth_QMetaProperty_hasNotifySignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_hasNotifySignal)},
    {SIP_MLNAME_CAST(sipName_hasStdCppSet), meth_QMetaProperty_hasStdCppSet, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_hasStdCppSet)},
    {SIP_MLNAME_CAST(sipName_isConstant), meth_QMetaProperty_isConstant, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_isConstant)},
    {SIP_MLNAME_CAST(sipName_isDesignable), SIP_MLMETH_CAST(meth_QMetaProperty_isDesignable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaProperty_isDesignable)},
    {SIP_MLNAME_CAST(sipName_isEnumType), meth_QMetaProperty_isEnumType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_isEnumType)},
    {SIP_MLNAME_CAST(sipName_isFinal), meth_QMetaProperty_isFinal, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_isFinal)},
    {SIP_MLNAME_CAST(sipName_isFlagType), meth_QMetaProperty_isFlagType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_isFlagType)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QMetaProperty_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_isReadable)},
    {SIP_MLNAME_CAST(sipName_isResettable), meth_QMetaProperty_isResettable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_isResettable)},
    {SIP_MLNAME_CAST(sipName_isScriptable), SIP_MLMETH_CAST(meth_QMetaProperty_isScriptable), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaProperty_isScriptable)},
    {SIP_MLNAME_CAST(sipName_isStored), SIP_MLMETH_CAST(meth_QMetaProperty_isStored), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaProperty_isStored)},
    {SIP_MLNAME_CAST(sipName_isUser), SIP_MLMETH_CAST(meth_QMetaProperty_isUser), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaProperty_isUser)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QMetaProperty_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_isValid)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QMetaProperty_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_isWritable)},
    {SIP_MLNAME_CAST(sipName_name), meth_QMetaProperty_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_name)},
    {SIP_MLNAME_CAST(sipName_notifySignal), meth_QMetaProperty_notifySignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_notifySignal)},
    {SIP_MLNAME_CAST(sipName_notifySignalIndex), meth_QMetaProperty_notifySignalIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_notifySignalIndex)},
    {SIP_MLNAME_CAST(sipName_propertyIndex), meth_QMetaProperty_propertyIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_propertyIndex)},
    {SIP_MLNAME_CAST(sipName_read), meth_QMetaProperty_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_read)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QMetaProperty_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_reset)},
    {SIP_MLNAME_CAST(sipName_type), meth_QMetaProperty_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_type)},
    {SIP_MLNAME_CAST(sipName_typeName), meth_QMetaProperty_typeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_typeName)},
    {SIP_MLNAME_CAST(sipName_userType), meth_QMetaProperty_userType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_userType)},
    {SIP_MLNAME_CAST(sipName_write), meth_QMetaProperty_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaProperty_write)}
};

PyDoc_STRVAR(doc_QMetaProperty, "\1QMetaProperty()\n"
"QMetaProperty(QMetaProperty)");


static pyqt5ClassPluginDef plugin_QMetaProperty = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaProperty = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaProperty,
        {SIP_NULLPTR},
        &plugin_QMetaProperty
    },
    {
        sipNameNr_QMetaProperty,
        {0, 0, 1},
        25, methods_QMetaProperty,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaProperty,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMetaProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaProperty,
    assign_QMetaProperty,
    array_QMetaProperty,
    copy_QMetaProperty,
    release_QMetaProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 6982 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 6986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMetaEnum_name, "name(self) -> str");

extern "C" {static PyObject *meth_QMetaEnum_name(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaEnum, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->name();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_name, doc_QMetaEnum_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_isFlag, "isFlag(self) -> bool");

extern "C" {static PyObject *meth_QMetaEnum_isFlag(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_isFlag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaEnum, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFlag();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_isFlag, doc_QMetaEnum_isFlag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_keyCount, "keyCount(self) -> int");

extern "C" {static PyObject *meth_QMetaEnum_keyCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_keyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaEnum, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->keyCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_keyCount, doc_QMetaEnum_keyCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_key, "key(self, int) -> str");

extern "C" {static PyObject *meth_QMetaEnum_key(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaEnum, &sipCpp, &a0))
        {
            const char*sipRes;

            sipRes = sipCpp->key(a0);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_key, doc_QMetaEnum_key);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_value, "value(self, int) -> int");

extern "C" {static PyObject *meth_QMetaEnum_value(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaEnum, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->value(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_value, doc_QMetaEnum_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_scope, "scope(self) -> str");

extern "C" {static PyObject *meth_QMetaEnum_scope(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_scope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaEnum, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->scope();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_scope, doc_QMetaEnum_scope);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_keyToValue, "keyToValue(self, str) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QMetaEnum_keyToValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_keyToValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1;
        const  ::QMetaEnum *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BAA", &sipSelf, sipType_QMetaEnum, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->keyToValue(a0,&a1);
            Py_DECREF(a0Keep);

            return sipBuildResult(0,"(ib)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_keyToValue, doc_QMetaEnum_keyToValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_valueToKey, "valueToKey(self, int) -> str");

extern "C" {static PyObject *meth_QMetaEnum_valueToKey(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_valueToKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaEnum, &sipCpp, &a0))
        {
            const char*sipRes;

            sipRes = sipCpp->valueToKey(a0);

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_valueToKey, doc_QMetaEnum_valueToKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_keysToValue, "keysToValue(self, str) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QMetaEnum_keysToValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_keysToValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        bool a1;
        const  ::QMetaEnum *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BAA", &sipSelf, sipType_QMetaEnum, &sipCpp, &a0Keep, &a0))
        {
            int sipRes;

            sipRes = sipCpp->keysToValue(a0,&a1);
            Py_DECREF(a0Keep);

            return sipBuildResult(0,"(ib)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_keysToValue, doc_QMetaEnum_keysToValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_valueToKeys, "valueToKeys(self, int) -> QByteArray");

extern "C" {static PyObject *meth_QMetaEnum_valueToKeys(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_valueToKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaEnum, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->valueToKeys(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_valueToKeys, doc_QMetaEnum_valueToKeys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMetaEnum_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaEnum, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_isValid, doc_QMetaEnum_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_isScoped, "isScoped(self) -> bool");

extern "C" {static PyObject *meth_QMetaEnum_isScoped(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_isScoped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaEnum, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isScoped();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_isScoped, doc_QMetaEnum_isScoped);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaEnum_enumName, "enumName(self) -> str");

extern "C" {static PyObject *meth_QMetaEnum_enumName(PyObject *, PyObject *);}
static PyObject *meth_QMetaEnum_enumName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaEnum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaEnum, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->enumName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaEnum, sipName_enumName, doc_QMetaEnum_enumName);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaEnum(void *, int);}
static void release_QMetaEnum(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaEnum *>(sipCppV);
}


extern "C" {static void assign_QMetaEnum(void *, SIP_SSIZE_T, void *);}
static void assign_QMetaEnum(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMetaEnum *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMetaEnum *>(sipSrc);
}


extern "C" {static void *array_QMetaEnum(SIP_SSIZE_T);}
static void *array_QMetaEnum(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMetaEnum[sipNrElem];
}


extern "C" {static void *copy_QMetaEnum(const void *, SIP_SSIZE_T);}
static void *copy_QMetaEnum(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMetaEnum(reinterpret_cast<const  ::QMetaEnum *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaEnum(sipSimpleWrapper *);}
static void dealloc_QMetaEnum(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaEnum(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaEnum(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaEnum(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaEnum *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMetaEnum();

            return sipCpp;
        }
    }

    {
        const  ::QMetaEnum* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMetaEnum, &a0))
        {
            sipCpp = new  ::QMetaEnum(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMetaEnum[] = {
    {SIP_MLNAME_CAST(sipName_enumName), meth_QMetaEnum_enumName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_enumName)},
    {SIP_MLNAME_CAST(sipName_isFlag), meth_QMetaEnum_isFlag, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_isFlag)},
    {SIP_MLNAME_CAST(sipName_isScoped), meth_QMetaEnum_isScoped, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_isScoped)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QMetaEnum_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_isValid)},
    {SIP_MLNAME_CAST(sipName_key), meth_QMetaEnum_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_key)},
    {SIP_MLNAME_CAST(sipName_keyCount), meth_QMetaEnum_keyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_keyCount)},
    {SIP_MLNAME_CAST(sipName_keyToValue), SIP_MLMETH_CAST(meth_QMetaEnum_keyToValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaEnum_keyToValue)},
    {SIP_MLNAME_CAST(sipName_keysToValue), SIP_MLMETH_CAST(meth_QMetaEnum_keysToValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaEnum_keysToValue)},
    {SIP_MLNAME_CAST(sipName_name), meth_QMetaEnum_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_name)},
    {SIP_MLNAME_CAST(sipName_scope), meth_QMetaEnum_scope, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_scope)},
    {SIP_MLNAME_CAST(sipName_value), meth_QMetaEnum_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_value)},
    {SIP_MLNAME_CAST(sipName_valueToKey), meth_QMetaEnum_valueToKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_valueToKey)},
    {SIP_MLNAME_CAST(sipName_valueToKeys), meth_QMetaEnum_valueToKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaEnum_valueToKeys)}
};

PyDoc_STRVAR(doc_QMetaEnum, "\1QMetaEnum()\n"
"QMetaEnum(QMetaEnum)");


static pyqt5ClassPluginDef plugin_QMetaEnum = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaEnum = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaEnum,
        {SIP_NULLPTR},
        &plugin_QMetaEnum
    },
    {
        sipNameNr_QMetaEnum,
        {0, 0, 1},
        13, methods_QMetaEnum,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaEnum,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMetaEnum,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaEnum,
    assign_QMetaEnum,
    array_QMetaEnum,
    copy_QMetaEnum,
    release_QMetaEnum,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 7552 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 7556 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 7559 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7562 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 7565 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 7568 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7571 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
// Raise an exception when QMetaMethod::invoke() returns false.
static void qtcore_invoke_exception()
{
    PyErr_SetString(PyExc_RuntimeError, "QMetaMethod.invoke() call failed");
}
#line 7578 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMetaMethod_typeName, "typeName(self) -> str");

extern "C" {static PyObject *meth_QMetaMethod_typeName(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_typeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->typeName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_typeName, doc_QMetaMethod_typeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_parameterTypes, "parameterTypes(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QMetaMethod_parameterTypes(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_parameterTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->parameterTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_parameterTypes, doc_QMetaMethod_parameterTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_parameterNames, "parameterNames(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QMetaMethod_parameterNames(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_parameterNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->parameterNames());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_parameterNames, doc_QMetaMethod_parameterNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_tag, "tag(self) -> str");

extern "C" {static PyObject *meth_QMetaMethod_tag(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_tag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->tag();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_tag, doc_QMetaMethod_tag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_access, "access(self) -> QMetaMethod.Access");

extern "C" {static PyObject *meth_QMetaMethod_access(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_access(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
             ::QMetaMethod::Access sipRes;

            sipRes = sipCpp->access();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMetaMethod_Access);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_access, doc_QMetaMethod_access);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_methodType, "methodType(self) -> QMetaMethod.MethodType");

extern "C" {static PyObject *meth_QMetaMethod_methodType(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_methodType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
             ::QMetaMethod::MethodType sipRes;

            sipRes = sipCpp->methodType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QMetaMethod_MethodType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_methodType, doc_QMetaMethod_methodType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_invoke, "invoke(self, QObject, Qt.ConnectionType, QGenericReturnArgument, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object\n"
"invoke(self, QObject, QGenericReturnArgument, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object\n"
"invoke(self, QObject, Qt.ConnectionType, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object\n"
"invoke(self, QObject, value0: QGenericArgument = QGenericArgument(0,0), value1: QGenericArgument = QGenericArgument(0,0), value2: QGenericArgument = QGenericArgument(0,0), value3: QGenericArgument = QGenericArgument(0,0), value4: QGenericArgument = QGenericArgument(0,0), value5: QGenericArgument = QGenericArgument(0,0), value6: QGenericArgument = QGenericArgument(0,0), value7: QGenericArgument = QGenericArgument(0,0), value8: QGenericArgument = QGenericArgument(0,0), value9: QGenericArgument = QGenericArgument(0,0)) -> object");

extern "C" {static PyObject *meth_QMetaMethod_invoke(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_invoke(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::Qt::ConnectionType a1;
         ::QGenericReturnArgument* a2;
        PyObject *a2Wrapper;
         ::QGenericArgument a3def = QGenericArgument(0,0);
         ::QGenericArgument* a3 = &a3def;
         ::QGenericArgument a4def = QGenericArgument(0,0);
         ::QGenericArgument* a4 = &a4def;
         ::QGenericArgument a5def = QGenericArgument(0,0);
         ::QGenericArgument* a5 = &a5def;
         ::QGenericArgument a6def = QGenericArgument(0,0);
         ::QGenericArgument* a6 = &a6def;
         ::QGenericArgument a7def = QGenericArgument(0,0);
         ::QGenericArgument* a7 = &a7def;
         ::QGenericArgument a8def = QGenericArgument(0,0);
         ::QGenericArgument* a8 = &a8def;
         ::QGenericArgument a9def = QGenericArgument(0,0);
         ::QGenericArgument* a9 = &a9def;
         ::QGenericArgument a10def = QGenericArgument(0,0);
         ::QGenericArgument* a10 = &a10def;
         ::QGenericArgument a11def = QGenericArgument(0,0);
         ::QGenericArgument* a11 = &a11def;
         ::QGenericArgument a12def = QGenericArgument(0,0);
         ::QGenericArgument* a12 = &a12def;
        const  ::QMetaMethod *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8E@J9|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaMethod, &sipCpp, sipType_QObject, &a0, sipType_Qt_ConnectionType, &a1, &a2Wrapper, sipType_QGenericReturnArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 64 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11,
                *a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a2Wrapper);
        else
            qtcore_invoke_exception();
#line 7835 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    {
         ::QObject* a0;
         ::QGenericReturnArgument* a1;
        PyObject *a1Wrapper;
         ::QGenericArgument a2def = QGenericArgument(0,0);
         ::QGenericArgument* a2 = &a2def;
         ::QGenericArgument a3def = QGenericArgument(0,0);
         ::QGenericArgument* a3 = &a3def;
         ::QGenericArgument a4def = QGenericArgument(0,0);
         ::QGenericArgument* a4 = &a4def;
         ::QGenericArgument a5def = QGenericArgument(0,0);
         ::QGenericArgument* a5 = &a5def;
         ::QGenericArgument a6def = QGenericArgument(0,0);
         ::QGenericArgument* a6 = &a6def;
         ::QGenericArgument a7def = QGenericArgument(0,0);
         ::QGenericArgument* a7 = &a7def;
         ::QGenericArgument a8def = QGenericArgument(0,0);
         ::QGenericArgument* a8 = &a8def;
         ::QGenericArgument a9def = QGenericArgument(0,0);
         ::QGenericArgument* a9 = &a9def;
         ::QGenericArgument a10def = QGenericArgument(0,0);
         ::QGenericArgument* a10 = &a10def;
         ::QGenericArgument a11def = QGenericArgument(0,0);
         ::QGenericArgument* a11 = &a11def;
        const  ::QMetaMethod *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8@J9|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaMethod, &sipCpp, sipType_QObject, &a0, &a1Wrapper, sipType_QGenericReturnArgument, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 80 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10,
                *a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a1Wrapper);
        else
            qtcore_invoke_exception();
#line 7899 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    {
         ::QObject* a0;
         ::Qt::ConnectionType a1;
         ::QGenericArgument a2def = QGenericArgument(0,0);
         ::QGenericArgument* a2 = &a2def;
         ::QGenericArgument a3def = QGenericArgument(0,0);
         ::QGenericArgument* a3 = &a3def;
         ::QGenericArgument a4def = QGenericArgument(0,0);
         ::QGenericArgument* a4 = &a4def;
         ::QGenericArgument a5def = QGenericArgument(0,0);
         ::QGenericArgument* a5 = &a5def;
         ::QGenericArgument a6def = QGenericArgument(0,0);
         ::QGenericArgument* a6 = &a6def;
         ::QGenericArgument a7def = QGenericArgument(0,0);
         ::QGenericArgument* a7 = &a7def;
         ::QGenericArgument a8def = QGenericArgument(0,0);
         ::QGenericArgument* a8 = &a8def;
         ::QGenericArgument a9def = QGenericArgument(0,0);
         ::QGenericArgument* a9 = &a9def;
         ::QGenericArgument a10def = QGenericArgument(0,0);
         ::QGenericArgument* a10 = &a10def;
         ::QGenericArgument a11def = QGenericArgument(0,0);
         ::QGenericArgument* a11 = &a11def;
        const  ::QMetaMethod *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8E|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaMethod, &sipCpp, sipType_QObject, &a0, sipType_Qt_ConnectionType, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invoke_exception();
#line 7964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    {
         ::QObject* a0;
         ::QGenericArgument a1def = QGenericArgument(0,0);
         ::QGenericArgument* a1 = &a1def;
         ::QGenericArgument a2def = QGenericArgument(0,0);
         ::QGenericArgument* a2 = &a2def;
         ::QGenericArgument a3def = QGenericArgument(0,0);
         ::QGenericArgument* a3 = &a3def;
         ::QGenericArgument a4def = QGenericArgument(0,0);
         ::QGenericArgument* a4 = &a4def;
         ::QGenericArgument a5def = QGenericArgument(0,0);
         ::QGenericArgument* a5 = &a5def;
         ::QGenericArgument a6def = QGenericArgument(0,0);
         ::QGenericArgument* a6 = &a6def;
         ::QGenericArgument a7def = QGenericArgument(0,0);
         ::QGenericArgument* a7 = &a7def;
         ::QGenericArgument a8def = QGenericArgument(0,0);
         ::QGenericArgument* a8 = &a8def;
         ::QGenericArgument a9def = QGenericArgument(0,0);
         ::QGenericArgument* a9 = &a9def;
         ::QGenericArgument a10def = QGenericArgument(0,0);
         ::QGenericArgument* a10 = &a10def;
        const  ::QMetaMethod *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|J9J9J9J9J9J9J9J9J9J9", &sipSelf, sipType_QMetaMethod, &sipCpp, sipType_QObject, &a0, sipType_QGenericArgument, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->invoke(a0, *a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invoke_exception();
#line 8027 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_invoke, doc_QMetaMethod_invoke);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_methodIndex, "methodIndex(self) -> int");

extern "C" {static PyObject *meth_QMetaMethod_methodIndex(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_methodIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->methodIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_methodIndex, doc_QMetaMethod_methodIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QMetaMethod_isValid(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_isValid, doc_QMetaMethod_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_methodSignature, "methodSignature(self) -> QByteArray");

extern "C" {static PyObject *meth_QMetaMethod_methodSignature(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_methodSignature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->methodSignature());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_methodSignature, doc_QMetaMethod_methodSignature);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_name, "name(self) -> QByteArray");

extern "C" {static PyObject *meth_QMetaMethod_name(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_name, doc_QMetaMethod_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_returnType, "returnType(self) -> int");

extern "C" {static PyObject *meth_QMetaMethod_returnType(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_returnType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->returnType();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_returnType, doc_QMetaMethod_returnType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_parameterCount, "parameterCount(self) -> int");

extern "C" {static PyObject *meth_QMetaMethod_parameterCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_parameterCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaMethod, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->parameterCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_parameterCount, doc_QMetaMethod_parameterCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMetaMethod_parameterType, "parameterType(self, int) -> int");

extern "C" {static PyObject *meth_QMetaMethod_parameterType(PyObject *, PyObject *);}
static PyObject *meth_QMetaMethod_parameterType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QMetaMethod *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaMethod, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->parameterType(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaMethod, sipName_parameterType, doc_QMetaMethod_parameterType);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMetaMethod___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMetaMethod___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMetaMethod *sipCpp = reinterpret_cast< ::QMetaMethod *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaMethod));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QMetaMethod, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMetaMethod___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMetaMethod___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMetaMethod *sipCpp = reinterpret_cast< ::QMetaMethod *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMetaMethod));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QMetaMethod, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaMethod(void *, int);}
static void release_QMetaMethod(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMetaMethod *>(sipCppV);
}


extern "C" {static void assign_QMetaMethod(void *, SIP_SSIZE_T, void *);}
static void assign_QMetaMethod(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMetaMethod *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMetaMethod *>(sipSrc);
}


extern "C" {static void *array_QMetaMethod(SIP_SSIZE_T);}
static void *array_QMetaMethod(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMetaMethod[sipNrElem];
}


extern "C" {static void *copy_QMetaMethod(const void *, SIP_SSIZE_T);}
static void *copy_QMetaMethod(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMetaMethod(reinterpret_cast<const  ::QMetaMethod *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaMethod(sipSimpleWrapper *);}
static void dealloc_QMetaMethod(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMetaMethod(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMetaMethod(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaMethod(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMetaMethod *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMetaMethod();

            return sipCpp;
        }
    }

    {
        const  ::QMetaMethod* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMetaMethod, &a0))
        {
            sipCpp = new  ::QMetaMethod(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMetaMethod[] = {
    {(void *)slot_QMetaMethod___eq__, eq_slot},
    {(void *)slot_QMetaMethod___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMetaMethod[] = {
    {SIP_MLNAME_CAST(sipName_access), meth_QMetaMethod_access, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_access)},
    {SIP_MLNAME_CAST(sipName_invoke), SIP_MLMETH_CAST(meth_QMetaMethod_invoke), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaMethod_invoke)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QMetaMethod_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_isValid)},
    {SIP_MLNAME_CAST(sipName_methodIndex), meth_QMetaMethod_methodIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_methodIndex)},
    {SIP_MLNAME_CAST(sipName_methodSignature), meth_QMetaMethod_methodSignature, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_methodSignature)},
    {SIP_MLNAME_CAST(sipName_methodType), meth_QMetaMethod_methodType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_methodType)},
    {SIP_MLNAME_CAST(sipName_name), meth_QMetaMethod_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_name)},
    {SIP_MLNAME_CAST(sipName_parameterCount), meth_QMetaMethod_parameterCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_parameterCount)},
    {SIP_MLNAME_CAST(sipName_parameterNames), meth_QMetaMethod_parameterNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_parameterNames)},
    {SIP_MLNAME_CAST(sipName_parameterType), meth_QMetaMethod_parameterType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_parameterType)},
    {SIP_MLNAME_CAST(sipName_parameterTypes), meth_QMetaMethod_parameterTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_parameterTypes)},
    {SIP_MLNAME_CAST(sipName_returnType), meth_QMetaMethod_returnType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_returnType)},
    {SIP_MLNAME_CAST(sipName_tag), meth_QMetaMethod_tag, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_tag)},
    {SIP_MLNAME_CAST(sipName_typeName), meth_QMetaMethod_typeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaMethod_typeName)}
};

static sipEnumMemberDef enummembers_QMetaMethod[] = {
    {sipName_Constructor, static_cast<int>( ::QMetaMethod::Constructor), 167},
    {sipName_Method, static_cast<int>( ::QMetaMethod::Method), 167},
    {sipName_Private, static_cast<int>( ::QMetaMethod::Private), 166},
    {sipName_Protected, static_cast<int>( ::QMetaMethod::Protected), 166},
    {sipName_Public, static_cast<int>( ::QMetaMethod::Public), 166},
    {sipName_Signal, static_cast<int>( ::QMetaMethod::Signal), 167},
    {sipName_Slot, static_cast<int>( ::QMetaMethod::Slot), 167},
};

PyDoc_STRVAR(doc_QMetaMethod, "\1QMetaMethod()\n"
"QMetaMethod(QMetaMethod)");


static pyqt5ClassPluginDef plugin_QMetaMethod = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMetaMethod = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMetaMethod,
        {SIP_NULLPTR},
        &plugin_QMetaMethod
    },
    {
        sipNameNr_QMetaMethod,
        {0, 0, 1},
        14, methods_QMetaMethod,
        7, enummembers_QMetaMethod,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMetaMethod,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMetaMethod,
    init_type_QMetaMethod,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMetaMethod,
    assign_QMetaMethod,
    array_QMetaMethod,
    copy_QMetaMethod,
    release_QMetaMethod,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmessageauthenticationcode.sip"
#include <qmessageauthenticationcode.h>
#line 8469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcryptographichash.sip"
#include <qcryptographichash.h>
#line 8473 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 8476 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 8479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMessageAuthenticationCode_reset, "reset(self)");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_reset(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_reset, doc_QMessageAuthenticationCode_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageAuthenticationCode_setKey, "setKey(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_setKey(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_setKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setKey(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_setKey, doc_QMessageAuthenticationCode_setKey);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageAuthenticationCode_addData, "addData(self, str, int)\n"
"addData(self, Union[QByteArray, bytes, bytearray])\n"
"addData(self, QIODevice) -> bool");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_addData(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_addData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1;
         ::QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAi", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp, &a0Keep, &a0, &a1))
        {
            sipCpp->addData(a0,a1);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->addData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QIODevice* a0;
         ::QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp, sipType_QIODevice, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addData(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_addData, doc_QMessageAuthenticationCode_addData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageAuthenticationCode_result, "result(self) -> QByteArray");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_result(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_result(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->result());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_result, doc_QMessageAuthenticationCode_result);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageAuthenticationCode_hash, "hash(Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray], QCryptographicHash.Algorithm) -> QByteArray");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_hash(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_hash(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QCryptographicHash::Algorithm a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1E", sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QCryptographicHash_Algorithm, &a2))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QMessageAuthenticationCode::hash(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_hash, doc_QMessageAuthenticationCode_hash);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMessageAuthenticationCode(void *, int);}
static void release_QMessageAuthenticationCode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMessageAuthenticationCode *>(sipCppV);
}


extern "C" {static void dealloc_QMessageAuthenticationCode(sipSimpleWrapper *);}
static void dealloc_QMessageAuthenticationCode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMessageAuthenticationCode(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMessageAuthenticationCode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMessageAuthenticationCode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMessageAuthenticationCode *sipCpp = SIP_NULLPTR;

    {
         ::QCryptographicHash::Algorithm a0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_key,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|J1", sipType_QCryptographicHash_Algorithm, &a0, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QMessageAuthenticationCode(a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMessageAuthenticationCode[] = {
    {SIP_MLNAME_CAST(sipName_addData), meth_QMessageAuthenticationCode_addData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_addData)},
    {SIP_MLNAME_CAST(sipName_hash), meth_QMessageAuthenticationCode_hash, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_hash)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QMessageAuthenticationCode_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_reset)},
    {SIP_MLNAME_CAST(sipName_result), meth_QMessageAuthenticationCode_result, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_result)},
    {SIP_MLNAME_CAST(sipName_setKey), meth_QMessageAuthenticationCode_setKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_setKey)}
};

PyDoc_STRVAR(doc_QMessageAuthenticationCode, "\1QMessageAuthenticationCode(QCryptographicHash.Algorithm, key: Union[QByteArray, bytes, bytearray] = QByteArray())");


static pyqt5ClassPluginDef plugin_QMessageAuthenticationCode = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMessageAuthenticationCode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMessageAuthenticationCode,
        {SIP_NULLPTR},
        &plugin_QMessageAuthenticationCode
    },
    {
        sipNameNr_QMessageAuthenticationCode,
        {0, 0, 1},
        5, methods_QMessageAuthenticationCode,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMessageAuthenticationCode,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMessageAuthenticationCode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMessageAuthenticationCode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMessageAuthenticationCode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 8783 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 8787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 8790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMarginsF_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QMarginsF_isNull(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMarginsF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_isNull, doc_QMarginsF_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_left, "left(self) -> float");

extern "C" {static PyObject *meth_QMarginsF_left(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMarginsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->left();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_left, doc_QMarginsF_left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_top, "top(self) -> float");

extern "C" {static PyObject *meth_QMarginsF_top(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMarginsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->top();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_top, doc_QMarginsF_top);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_right, "right(self) -> float");

extern "C" {static PyObject *meth_QMarginsF_right(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMarginsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->right();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_right, doc_QMarginsF_right);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_bottom, "bottom(self) -> float");

extern "C" {static PyObject *meth_QMarginsF_bottom(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMarginsF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->bottom();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_bottom, doc_QMarginsF_bottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_setLeft, "setLeft(self, float)");

extern "C" {static PyObject *meth_QMarginsF_setLeft(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_setLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMarginsF, &sipCpp, &a0))
        {
            sipCpp->setLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_setLeft, doc_QMarginsF_setLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_setTop, "setTop(self, float)");

extern "C" {static PyObject *meth_QMarginsF_setTop(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMarginsF, &sipCpp, &a0))
        {
            sipCpp->setTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_setTop, doc_QMarginsF_setTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_setRight, "setRight(self, float)");

extern "C" {static PyObject *meth_QMarginsF_setRight(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_setRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMarginsF, &sipCpp, &a0))
        {
            sipCpp->setRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_setRight, doc_QMarginsF_setRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_setBottom, "setBottom(self, float)");

extern "C" {static PyObject *meth_QMarginsF_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMarginsF, &sipCpp, &a0))
        {
            sipCpp->setBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_setBottom, doc_QMarginsF_setBottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMarginsF_toMargins, "toMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QMarginsF_toMargins(PyObject *, PyObject *);}
static PyObject *meth_QMarginsF_toMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMarginsF, &sipCpp))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(sipCpp->toMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMarginsF, sipName_toMargins, doc_QMarginsF_toMargins);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMarginsF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMarginsF *sipCpp = reinterpret_cast< ::QMarginsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMarginsF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMarginsF, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QMarginsF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMarginsF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMarginsF *sipCpp = reinterpret_cast< ::QMarginsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMarginsF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMarginsF, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QMarginsF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMarginsF___add__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
        const  ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMarginsF, &a0, sipType_QMarginsF, &a1))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    {
        const  ::QMarginsF* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QMarginsF, &a0, &a1))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
        const  ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QMarginsF, &a1))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF((a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    {
        const  ::QMarginsF* a0;
        const  ::QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMarginsF, &a0, sipType_QRectF, &a1))
        {
             ::QRectF*sipRes;

            sipRes = new  ::QRectF((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMarginsF___sub__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
        const  ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMarginsF, &a0, sipType_QMarginsF, &a1))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    {
        const  ::QMarginsF* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QMarginsF, &a0, &a1))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMarginsF___mul__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QMarginsF, &a0, &a1))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
        const  ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QMarginsF, &a1))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMarginsF___div__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QMarginsF, &a0, &a1))
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMarginsF___neg__(PyObject *);}
static PyObject *slot_QMarginsF___neg__(PyObject *sipSelf)
{
     ::QMarginsF *sipCpp = reinterpret_cast< ::QMarginsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMarginsF));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QMarginsF___pos__(PyObject *);}
static PyObject *slot_QMarginsF___pos__(PyObject *sipSelf)
{
     ::QMarginsF *sipCpp = reinterpret_cast< ::QMarginsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMarginsF));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QMarginsF*sipRes;

            sipRes = new  ::QMarginsF(+(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QMarginsF,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QMarginsF___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMarginsF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMarginsF *sipCpp = reinterpret_cast< ::QMarginsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMarginsF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QMarginsF::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMarginsF___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMarginsF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMarginsF *sipCpp = reinterpret_cast< ::QMarginsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMarginsF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QMarginsF::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMarginsF___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMarginsF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMarginsF *sipCpp = reinterpret_cast< ::QMarginsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMarginsF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMarginsF, &a0))
        {
            sipCpp-> ::QMarginsF::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QMarginsF::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMarginsF___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMarginsF___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMarginsF)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMarginsF *sipCpp = reinterpret_cast< ::QMarginsF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMarginsF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMarginsF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMarginsF, &a0))
        {
            sipCpp-> ::QMarginsF::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QMarginsF::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMarginsF(void *, int);}
static void release_QMarginsF(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMarginsF *>(sipCppV);
}


extern "C" {static void assign_QMarginsF(void *, SIP_SSIZE_T, void *);}
static void assign_QMarginsF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMarginsF *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMarginsF *>(sipSrc);
}


extern "C" {static void *array_QMarginsF(SIP_SSIZE_T);}
static void *array_QMarginsF(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMarginsF[sipNrElem];
}


extern "C" {static void *copy_QMarginsF(const void *, SIP_SSIZE_T);}
static void *copy_QMarginsF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMarginsF(reinterpret_cast<const  ::QMarginsF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMarginsF(sipSimpleWrapper *);}
static void dealloc_QMarginsF(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMarginsF(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMarginsF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMarginsF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMarginsF *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMarginsF();

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dddd", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QMarginsF(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QMargins* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMargins, &a0))
        {
            sipCpp = new  ::QMarginsF(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QMarginsF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMarginsF, &a0))
        {
            sipCpp = new  ::QMarginsF(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMarginsF[] = {
    {(void *)slot_QMarginsF___eq__, eq_slot},
    {(void *)slot_QMarginsF___ne__, ne_slot},
    {(void *)slot_QMarginsF___add__, add_slot},
    {(void *)slot_QMarginsF___sub__, sub_slot},
    {(void *)slot_QMarginsF___mul__, mul_slot},
    {(void *)slot_QMarginsF___div__, div_slot},
    {(void *)slot_QMarginsF___neg__, neg_slot},
    {(void *)slot_QMarginsF___pos__, pos_slot},
    {(void *)slot_QMarginsF___idiv__, idiv_slot},
    {(void *)slot_QMarginsF___imul__, imul_slot},
    {(void *)slot_QMarginsF___isub__, isub_slot},
    {(void *)slot_QMarginsF___iadd__, iadd_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMarginsF[] = {
    {SIP_MLNAME_CAST(sipName_bottom), meth_QMarginsF_bottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_bottom)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QMarginsF_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_isNull)},
    {SIP_MLNAME_CAST(sipName_left), meth_QMarginsF_left, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_left)},
    {SIP_MLNAME_CAST(sipName_right), meth_QMarginsF_right, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_right)},
    {SIP_MLNAME_CAST(sipName_setBottom), meth_QMarginsF_setBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_setBottom)},
    {SIP_MLNAME_CAST(sipName_setLeft), meth_QMarginsF_setLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_setLeft)},
    {SIP_MLNAME_CAST(sipName_setRight), meth_QMarginsF_setRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_setRight)},
    {SIP_MLNAME_CAST(sipName_setTop), meth_QMarginsF_setTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_setTop)},
    {SIP_MLNAME_CAST(sipName_toMargins), meth_QMarginsF_toMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_toMargins)},
    {SIP_MLNAME_CAST(sipName_top), meth_QMarginsF_top, METH_VARARGS, SIP_MLDOC_CAST(doc_QMarginsF_top)}
};

PyDoc_STRVAR(doc_QMarginsF, "\1QMarginsF()\n"
"QMarginsF(float, float, float, float)\n"
"QMarginsF(QMargins)\n"
"QMarginsF(QMarginsF)");


static pyqt5ClassPluginDef plugin_QMarginsF = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMarginsF = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMarginsF,
        {SIP_NULLPTR},
        &plugin_QMarginsF
    },
    {
        sipNameNr_QMarginsF,
        {0, 0, 1},
        10, methods_QMarginsF,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMarginsF,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMarginsF,
    init_type_QMarginsF,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMarginsF,
    assign_QMarginsF,
    array_QMarginsF,
    copy_QMarginsF,
    release_QMarginsF,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 9742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 9746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QMargins_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QMargins_isNull(PyObject *, PyObject *);}
static PyObject *meth_QMargins_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMargins, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_isNull, doc_QMargins_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMargins_left, "left(self) -> int");

extern "C" {static PyObject *meth_QMargins_left(PyObject *, PyObject *);}
static PyObject *meth_QMargins_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMargins, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->left();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_left, doc_QMargins_left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMargins_top, "top(self) -> int");

extern "C" {static PyObject *meth_QMargins_top(PyObject *, PyObject *);}
static PyObject *meth_QMargins_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMargins, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->top();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_top, doc_QMargins_top);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMargins_right, "right(self) -> int");

extern "C" {static PyObject *meth_QMargins_right(PyObject *, PyObject *);}
static PyObject *meth_QMargins_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMargins, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->right();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_right, doc_QMargins_right);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMargins_bottom, "bottom(self) -> int");

extern "C" {static PyObject *meth_QMargins_bottom(PyObject *, PyObject *);}
static PyObject *meth_QMargins_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMargins, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bottom();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_bottom, doc_QMargins_bottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMargins_setLeft, "setLeft(self, int)");

extern "C" {static PyObject *meth_QMargins_setLeft(PyObject *, PyObject *);}
static PyObject *meth_QMargins_setLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMargins, &sipCpp, &a0))
        {
            sipCpp->setLeft(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_setLeft, doc_QMargins_setLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMargins_setTop, "setTop(self, int)");

extern "C" {static PyObject *meth_QMargins_setTop(PyObject *, PyObject *);}
static PyObject *meth_QMargins_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMargins, &sipCpp, &a0))
        {
            sipCpp->setTop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_setTop, doc_QMargins_setTop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMargins_setRight, "setRight(self, int)");

extern "C" {static PyObject *meth_QMargins_setRight(PyObject *, PyObject *);}
static PyObject *meth_QMargins_setRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMargins, &sipCpp, &a0))
        {
            sipCpp->setRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_setRight, doc_QMargins_setRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMargins_setBottom, "setBottom(self, int)");

extern "C" {static PyObject *meth_QMargins_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QMargins_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QMargins *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMargins, &sipCpp, &a0))
        {
            sipCpp->setBottom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMargins, sipName_setBottom, doc_QMargins_setBottom);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QMargins___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMargins *sipCpp = reinterpret_cast< ::QMargins *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMargins));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMargins, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QMargins, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMargins___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QMargins *sipCpp = reinterpret_cast< ::QMargins *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMargins));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMargins, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QMargins, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QMargins___add__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMargins, &a0, sipType_QMargins, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    {
        const  ::QMargins* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_QMargins, &a0, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "iJ9", &a0, sipType_QMargins, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    {
        const  ::QMargins* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMargins, &a0, sipType_QRect, &a1))
        {
             ::QRect*sipRes;

            sipRes = new  ::QRect((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QRect,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMargins___sub__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QMargins, &a0, sipType_QMargins, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    {
        const  ::QMargins* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_QMargins, &a0, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMargins___mul__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xi", sipType_QMargins, &a0, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    {
        const  ::QMargins* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QMargins, &a0, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, mul_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMargins___div__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9Xi", sipType_QMargins, &a0, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    {
        const  ::QMargins* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QMargins, &a0, &a1))
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, div_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QMargins___neg__(PyObject *);}
static PyObject *slot_QMargins___neg__(PyObject *sipSelf)
{
     ::QMargins *sipCpp = reinterpret_cast< ::QMargins *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMargins));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QMargins___pos__(PyObject *);}
static PyObject *slot_QMargins___pos__(PyObject *sipSelf)
{
     ::QMargins *sipCpp = reinterpret_cast< ::QMargins *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMargins));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QMargins*sipRes;

            sipRes = new  ::QMargins(+(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QMargins,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QMargins___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMargins)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMargins *sipCpp = reinterpret_cast< ::QMargins *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMargins));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1Xi", &a0))
        {
            sipCpp-> ::QMargins::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QMargins::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMargins___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMargins)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMargins *sipCpp = reinterpret_cast< ::QMargins *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMargins));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1Xi", &a0))
        {
            sipCpp-> ::QMargins::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp-> ::QMargins::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMargins___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMargins)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMargins *sipCpp = reinterpret_cast< ::QMargins *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMargins));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMargins, &a0))
        {
            sipCpp-> ::QMargins::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QMargins::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMargins___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMargins___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMargins)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QMargins *sipCpp = reinterpret_cast< ::QMargins *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMargins));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMargins* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMargins, &a0))
        {
            sipCpp-> ::QMargins::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QMargins::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMargins(void *, int);}
static void release_QMargins(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMargins *>(sipCppV);
}


extern "C" {static void assign_QMargins(void *, SIP_SSIZE_T, void *);}
static void assign_QMargins(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QMargins *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QMargins *>(sipSrc);
}


extern "C" {static void *array_QMargins(SIP_SSIZE_T);}
static void *array_QMargins(SIP_SSIZE_T sipNrElem)
{
    return new  ::QMargins[sipNrElem];
}


extern "C" {static void *copy_QMargins(const void *, SIP_SSIZE_T);}
static void *copy_QMargins(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QMargins(reinterpret_cast<const  ::QMargins *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMargins(sipSimpleWrapper *);}
static void dealloc_QMargins(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMargins(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMargins(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMargins(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMargins *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMargins();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iiii", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QMargins(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QMargins* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QMargins, &a0))
        {
            sipCpp = new  ::QMargins(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMargins[] = {
    {(void *)slot_QMargins___eq__, eq_slot},
    {(void *)slot_QMargins___ne__, ne_slot},
    {(void *)slot_QMargins___add__, add_slot},
    {(void *)slot_QMargins___sub__, sub_slot},
    {(void *)slot_QMargins___mul__, mul_slot},
    {(void *)slot_QMargins___div__, div_slot},
    {(void *)slot_QMargins___neg__, neg_slot},
    {(void *)slot_QMargins___pos__, pos_slot},
    {(void *)slot_QMargins___idiv__, idiv_slot},
    {(void *)slot_QMargins___imul__, imul_slot},
    {(void *)slot_QMargins___isub__, isub_slot},
    {(void *)slot_QMargins___iadd__, iadd_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMargins[] = {
    {SIP_MLNAME_CAST(sipName_bottom), meth_QMargins_bottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_bottom)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QMargins_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_isNull)},
    {SIP_MLNAME_CAST(sipName_left), meth_QMargins_left, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_left)},
    {SIP_MLNAME_CAST(sipName_right), meth_QMargins_right, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_right)},
    {SIP_MLNAME_CAST(sipName_setBottom), meth_QMargins_setBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_setBottom)},
    {SIP_MLNAME_CAST(sipName_setLeft), meth_QMargins_setLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_setLeft)},
    {SIP_MLNAME_CAST(sipName_setRight), meth_QMargins_setRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_setRight)},
    {SIP_MLNAME_CAST(sipName_setTop), meth_QMargins_setTop, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_setTop)},
    {SIP_MLNAME_CAST(sipName_top), meth_QMargins_top, METH_VARARGS, SIP_MLDOC_CAST(doc_QMargins_top)}
};

PyDoc_STRVAR(doc_QMargins, "\1QMargins()\n"
"QMargins(int, int, int, int)\n"
"QMargins(QMargins)");


static pyqt5ClassPluginDef plugin_QMargins = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMargins = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMargins,
        {SIP_NULLPTR},
        &plugin_QMargins
    },
    {
        sipNameNr_QMargins,
        {0, 0, 1},
        9, methods_QMargins,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMargins,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QMargins,
    init_type_QMargins,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMargins,
    assign_QMargins,
    array_QMargins,
    copy_QMargins,
    release_QMargins,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qloggingcategory.sip"
#include <qloggingcategory.h>
#line 10694 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 10698 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QLoggingCategory_isEnabled, "isEnabled(self, QtMsgType) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QtMsgType a0;
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLoggingCategory, &sipCpp, sipType_QtMsgType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isEnabled, doc_QLoggingCategory_isEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_setEnabled, "setEnabled(self, QtMsgType, bool)");

extern "C" {static PyObject *meth_QLoggingCategory_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QtMsgType a0;
        bool a1;
         ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_QLoggingCategory, &sipCpp, sipType_QtMsgType, &a0, &a1))
        {
            sipCpp->setEnabled(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_setEnabled, doc_QLoggingCategory_setEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_isDebugEnabled, "isDebugEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isDebugEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isDebugEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDebugEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isDebugEnabled, doc_QLoggingCategory_isDebugEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_isInfoEnabled, "isInfoEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isInfoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isInfoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInfoEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isInfoEnabled, doc_QLoggingCategory_isInfoEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_isWarningEnabled, "isWarningEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isWarningEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isWarningEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWarningEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isWarningEnabled, doc_QLoggingCategory_isWarningEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_isCriticalEnabled, "isCriticalEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLoggingCategory_isCriticalEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_isCriticalEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCriticalEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_isCriticalEnabled, doc_QLoggingCategory_isCriticalEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_categoryName, "categoryName(self) -> str");

extern "C" {static PyObject *meth_QLoggingCategory_categoryName(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_categoryName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLoggingCategory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLoggingCategory, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->categoryName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_categoryName, doc_QLoggingCategory_categoryName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_defaultCategory, "defaultCategory() -> QLoggingCategory");

extern "C" {static PyObject *meth_QLoggingCategory_defaultCategory(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_defaultCategory(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QLoggingCategory*sipRes;

            sipRes =  ::QLoggingCategory::defaultCategory();

            return sipConvertFromType(sipRes,sipType_QLoggingCategory,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_defaultCategory, doc_QLoggingCategory_defaultCategory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLoggingCategory_setFilterRules, "setFilterRules(str)");

extern "C" {static PyObject *meth_QLoggingCategory_setFilterRules(PyObject *, PyObject *);}
static PyObject *meth_QLoggingCategory_setFilterRules(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QLoggingCategory::setFilterRules(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName_setFilterRules, doc_QLoggingCategory_setFilterRules);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QLoggingCategory___call__(PyObject *,PyObject *,PyObject *);}
static PyObject *slot_QLoggingCategory___call__(PyObject *sipSelf,PyObject *sipArgs,PyObject *)
{
     ::QLoggingCategory *sipCpp = reinterpret_cast< ::QLoggingCategory *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLoggingCategory));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QLoggingCategory*sipRes;

            sipRes = &(*sipCpp)();

            return sipConvertFromType(sipRes,sipType_QLoggingCategory,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLoggingCategory, sipName___call__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLoggingCategory(void *, int);}
static void release_QLoggingCategory(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLoggingCategory *>(sipCppV);
}


extern "C" {static void dealloc_QLoggingCategory(sipSimpleWrapper *);}
static void dealloc_QLoggingCategory(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLoggingCategory(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLoggingCategory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLoggingCategory(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLoggingCategory *sipCpp = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "AA", &a0Keep, &a0))
        {
            sipCpp = new  ::QLoggingCategory(a0);
            Py_DECREF(a0Keep);

            return sipCpp;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
         ::QtMsgType a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "AAE", &a0Keep, &a0, sipType_QtMsgType, &a1))
        {
            sipCpp = new  ::QLoggingCategory(a0,a1);
            Py_DECREF(a0Keep);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLoggingCategory[] = {
    {(void *)slot_QLoggingCategory___call__, call_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLoggingCategory[] = {
    {SIP_MLNAME_CAST(sipName_categoryName), meth_QLoggingCategory_categoryName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_categoryName)},
    {SIP_MLNAME_CAST(sipName_defaultCategory), meth_QLoggingCategory_defaultCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_defaultCategory)},
    {SIP_MLNAME_CAST(sipName_isCriticalEnabled), meth_QLoggingCategory_isCriticalEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_isCriticalEnabled)},
    {SIP_MLNAME_CAST(sipName_isDebugEnabled), meth_QLoggingCategory_isDebugEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_isDebugEnabled)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QLoggingCategory_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_isEnabled)},
    {SIP_MLNAME_CAST(sipName_isInfoEnabled), meth_QLoggingCategory_isInfoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_isInfoEnabled)},
    {SIP_MLNAME_CAST(sipName_isWarningEnabled), meth_QLoggingCategory_isWarningEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_isWarningEnabled)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QLoggingCategory_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setFilterRules), meth_QLoggingCategory_setFilterRules, METH_VARARGS, SIP_MLDOC_CAST(doc_QLoggingCategory_setFilterRules)}
};

PyDoc_STRVAR(doc_QLoggingCategory, "\1QLoggingCategory(str)\n"
"QLoggingCategory(str, QtMsgType)");


static pyqt5ClassPluginDef plugin_QLoggingCategory = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLoggingCategory = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLoggingCategory,
        {SIP_NULLPTR},
        &plugin_QLoggingCategory
    },
    {
        sipNameNr_QLoggingCategory,
        {0, 0, 1},
        9, methods_QLoggingCategory,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLoggingCategory,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLoggingCategory,
    init_type_QLoggingCategory,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLoggingCategory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QLoggingCategory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 55 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
#include <qlogging.h>
#line 11126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



PyDoc_STRVAR(doc_QMessageLogger_debug, "debug(self, str)");

extern "C" {static PyObject *meth_QMessageLogger_debug(PyObject *, PyObject *);}
static PyObject *meth_QMessageLogger_debug(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMessageLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMessageLogger, &sipCpp, &a0Keep, &a0))
        {
#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->debug("%s", a0);
        Py_END_ALLOW_THREADS
#line 11149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageLogger, sipName_debug, doc_QMessageLogger_debug);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageLogger_warning, "warning(self, str)");

extern "C" {static PyObject *meth_QMessageLogger_warning(PyObject *, PyObject *);}
static PyObject *meth_QMessageLogger_warning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMessageLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMessageLogger, &sipCpp, &a0Keep, &a0))
        {
#line 73 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->warning("%s", a0);
        Py_END_ALLOW_THREADS
#line 11183 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageLogger, sipName_warning, doc_QMessageLogger_warning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageLogger_critical, "critical(self, str)");

extern "C" {static PyObject *meth_QMessageLogger_critical(PyObject *, PyObject *);}
static PyObject *meth_QMessageLogger_critical(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMessageLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMessageLogger, &sipCpp, &a0Keep, &a0))
        {
#line 80 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->critical("%s", a0);
        Py_END_ALLOW_THREADS
#line 11217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageLogger, sipName_critical, doc_QMessageLogger_critical);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageLogger_fatal, "fatal(self, str)");

extern "C" {static PyObject *meth_QMessageLogger_fatal(PyObject *, PyObject *);}
static PyObject *meth_QMessageLogger_fatal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMessageLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMessageLogger, &sipCpp, &a0Keep, &a0))
        {
#line 87 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->fatal("%s", a0);
        Py_END_ALLOW_THREADS
#line 11251 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageLogger, sipName_fatal, doc_QMessageLogger_fatal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QMessageLogger_info, "info(self, str)");

extern "C" {static PyObject *meth_QMessageLogger_info(PyObject *, PyObject *);}
static PyObject *meth_QMessageLogger_info(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QMessageLogger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QMessageLogger, &sipCpp, &a0Keep, &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->info("%s", a0);
        Py_END_ALLOW_THREADS
#line 11285 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageLogger, sipName_info, doc_QMessageLogger_info);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMessageLogger(void *, int);}
static void release_QMessageLogger(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMessageLogger *>(sipCppV);
}


extern "C" {static void dealloc_QMessageLogger(sipSimpleWrapper *);}
static void dealloc_QMessageLogger(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMessageLogger(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QMessageLogger(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMessageLogger(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QMessageLogger *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QMessageLogger();

            return sipCpp;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        int a1;
        const char* a2;
        PyObject *a2Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "AAiAA", &a0Keep, &a0, &a1, &a2Keep, &a2))
        {
            sipCpp = new  ::QMessageLogger(a0,a1,a2);
            Py_DECREF(a0Keep);
            Py_DECREF(a2Keep);

            return sipCpp;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;
        int a1;
        const char* a2;
        PyObject *a2Keep;
        const char* a3;
        PyObject *a3Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "AAiAAAA", &a0Keep, &a0, &a1, &a2Keep, &a2, &a3Keep, &a3))
        {
            sipCpp = new  ::QMessageLogger(a0,a1,a2,a3);
            Py_DECREF(a0Keep);
            Py_DECREF(a2Keep);
            Py_DECREF(a3Keep);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QMessageLogger[] = {
    {SIP_MLNAME_CAST(sipName_critical), meth_QMessageLogger_critical, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageLogger_critical)},
    {SIP_MLNAME_CAST(sipName_debug), meth_QMessageLogger_debug, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageLogger_debug)},
    {SIP_MLNAME_CAST(sipName_fatal), meth_QMessageLogger_fatal, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageLogger_fatal)},
    {SIP_MLNAME_CAST(sipName_info), meth_QMessageLogger_info, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageLogger_info)},
    {SIP_MLNAME_CAST(sipName_warning), meth_QMessageLogger_warning, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageLogger_warning)}
};

PyDoc_STRVAR(doc_QMessageLogger, "\1QMessageLogger()\n"
"QMessageLogger(str, int, str)\n"
"QMessageLogger(str, int, str, str)");


static pyqt5ClassPluginDef plugin_QMessageLogger = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMessageLogger = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMessageLogger,
        {SIP_NULLPTR},
        &plugin_QMessageLogger
    },
    {
        sipNameNr_QMessageLogger,
        {0, 0, 1},
        5, methods_QMessageLogger,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QMessageLogger,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QMessageLogger,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMessageLogger,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMessageLogger,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlogging.sip"
#include <qlogging.h>
#line 11448 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



/* Call the instance's destructor. */
extern "C" {static void release_QMessageLogContext(void *, int);}
static void release_QMessageLogContext(void *sipCppV, int)
{
    delete reinterpret_cast< ::QMessageLogContext *>(sipCppV);
}


extern "C" {static void dealloc_QMessageLogContext(sipSimpleWrapper *);}
static void dealloc_QMessageLogContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMessageLogContext(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static PyObject *varget_QMessageLogContext_category(void *, PyObject *, PyObject *);}
static PyObject *varget_QMessageLogContext_category(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    const char*sipVal;
     ::QMessageLogContext *sipCpp = reinterpret_cast< ::QMessageLogContext *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -12);
    if (sipPy)
        return sipPy;

    sipVal = sipCpp->category;

    if (sipVal == SIP_NULLPTR)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

    return PyUnicode_DecodeASCII(sipVal, strlen(sipVal), SIP_NULLPTR);
}


extern "C" {static int varset_QMessageLogContext_category(void *, PyObject *, PyObject *);}
static int varset_QMessageLogContext_category(void *sipSelf, PyObject *sipPy, PyObject *sipPySelf)
{
    const char*sipVal;
     ::QMessageLogContext *sipCpp = reinterpret_cast< ::QMessageLogContext *>(sipSelf);

    sipVal = sipString_AsASCIIString(&sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->category = sipVal;

    sipKeepReference(sipPySelf, -12, sipPy);

    return 0;
}


extern "C" {static PyObject *varget_QMessageLogContext_file(void *, PyObject *, PyObject *);}
static PyObject *varget_QMessageLogContext_file(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    const char*sipVal;
     ::QMessageLogContext *sipCpp = reinterpret_cast< ::QMessageLogContext *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -13);
    if (sipPy)
        return sipPy;

    sipVal = sipCpp->file;

    if (sipVal == SIP_NULLPTR)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

    return PyUnicode_DecodeASCII(sipVal, strlen(sipVal), SIP_NULLPTR);
}


extern "C" {static int varset_QMessageLogContext_file(void *, PyObject *, PyObject *);}
static int varset_QMessageLogContext_file(void *sipSelf, PyObject *sipPy, PyObject *sipPySelf)
{
    const char*sipVal;
     ::QMessageLogContext *sipCpp = reinterpret_cast< ::QMessageLogContext *>(sipSelf);

    sipVal = sipString_AsASCIIString(&sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->file = sipVal;

    sipKeepReference(sipPySelf, -13, sipPy);

    return 0;
}


extern "C" {static PyObject *varget_QMessageLogContext_function(void *, PyObject *, PyObject *);}
static PyObject *varget_QMessageLogContext_function(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    const char*sipVal;
     ::QMessageLogContext *sipCpp = reinterpret_cast< ::QMessageLogContext *>(sipSelf);

    sipPy = sipGetReference(sipPySelf, -14);
    if (sipPy)
        return sipPy;

    sipVal = sipCpp->function;

    if (sipVal == SIP_NULLPTR)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

    return PyUnicode_DecodeASCII(sipVal, strlen(sipVal), SIP_NULLPTR);
}


extern "C" {static int varset_QMessageLogContext_function(void *, PyObject *, PyObject *);}
static int varset_QMessageLogContext_function(void *sipSelf, PyObject *sipPy, PyObject *sipPySelf)
{
    const char*sipVal;
     ::QMessageLogContext *sipCpp = reinterpret_cast< ::QMessageLogContext *>(sipSelf);

    sipVal = sipString_AsASCIIString(&sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->function = sipVal;

    sipKeepReference(sipPySelf, -14, sipPy);

    return 0;
}


extern "C" {static PyObject *varget_QMessageLogContext_line(void *, PyObject *, PyObject *);}
static PyObject *varget_QMessageLogContext_line(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QMessageLogContext *sipCpp = reinterpret_cast< ::QMessageLogContext *>(sipSelf);

    sipVal = sipCpp->line;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QMessageLogContext_line(void *, PyObject *, PyObject *);}
static int varset_QMessageLogContext_line(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QMessageLogContext *sipCpp = reinterpret_cast< ::QMessageLogContext *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->line = sipVal;

    return 0;
}

sipVariableDef variables_QMessageLogContext[] = {
    {InstanceVariable, sipName_category, (PyMethodDef *)varget_QMessageLogContext_category, (PyMethodDef *)varset_QMessageLogContext_category, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_file, (PyMethodDef *)varget_QMessageLogContext_file, (PyMethodDef *)varset_QMessageLogContext_file, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_function, (PyMethodDef *)varget_QMessageLogContext_function, (PyMethodDef *)varset_QMessageLogContext_function, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_line, (PyMethodDef *)varget_QMessageLogContext_line, (PyMethodDef *)varset_QMessageLogContext_line, SIP_NULLPTR, SIP_NULLPTR},
};


static pyqt5ClassPluginDef plugin_QMessageLogContext = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QMessageLogContext = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QMessageLogContext,
        {SIP_NULLPTR},
        &plugin_QMessageLogContext
    },
    {
        sipNameNr_QMessageLogContext,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        4, variables_QMessageLogContext,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QMessageLogContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QMessageLogContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlockfile.sip"
#include <qlockfile.h>
#line 11691 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 11695 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QLockFile_lock, "lock(self) -> bool");

extern "C" {static PyObject *meth_QLockFile_lock(PyObject *, PyObject *);}
static PyObject *meth_QLockFile_lock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLockFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLockFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lock();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_lock, doc_QLockFile_lock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLockFile_tryLock, "tryLock(self, timeout: int = 0) -> bool");

extern "C" {static PyObject *meth_QLockFile_tryLock(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLockFile_tryLock(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QLockFile *sipCpp;

        static const char *sipKwdList[] = {
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLockFile, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tryLock(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_tryLock, doc_QLockFile_tryLock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLockFile_unlock, "unlock(self)");

extern "C" {static PyObject *meth_QLockFile_unlock(PyObject *, PyObject *);}
static PyObject *meth_QLockFile_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLockFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLockFile, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unlock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_unlock, doc_QLockFile_unlock);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLockFile_setStaleLockTime, "setStaleLockTime(self, int)");

extern "C" {static PyObject *meth_QLockFile_setStaleLockTime(PyObject *, PyObject *);}
static PyObject *meth_QLockFile_setStaleLockTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLockFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLockFile, &sipCpp, &a0))
        {
            sipCpp->setStaleLockTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_setStaleLockTime, doc_QLockFile_setStaleLockTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLockFile_staleLockTime, "staleLockTime(self) -> int");

extern "C" {static PyObject *meth_QLockFile_staleLockTime(PyObject *, PyObject *);}
static PyObject *meth_QLockFile_staleLockTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLockFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLockFile, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->staleLockTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_staleLockTime, doc_QLockFile_staleLockTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLockFile_isLocked, "isLocked(self) -> bool");

extern "C" {static PyObject *meth_QLockFile_isLocked(PyObject *, PyObject *);}
static PyObject *meth_QLockFile_isLocked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLockFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLockFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLocked();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_isLocked, doc_QLockFile_isLocked);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLockFile_getLockInfo, "getLockInfo(self) -> Tuple[bool, int, str, str]");

extern "C" {static PyObject *meth_QLockFile_getLockInfo(PyObject *, PyObject *);}
static PyObject *meth_QLockFile_getLockInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QString* a1;
         ::QString* a2;
        const  ::QLockFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLockFile, &sipCpp))
        {
            bool sipRes;
            a1 = new  ::QString();
            a2 = new  ::QString();

            sipRes = sipCpp->getLockInfo(&a0,a1,a2);

            return sipBuildResult(0,"(bnNN)",sipRes,a0,a1,sipType_QString,SIP_NULLPTR,a2,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_getLockInfo, doc_QLockFile_getLockInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLockFile_removeStaleLockFile, "removeStaleLockFile(self) -> bool");

extern "C" {static PyObject *meth_QLockFile_removeStaleLockFile(PyObject *, PyObject *);}
static PyObject *meth_QLockFile_removeStaleLockFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLockFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLockFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeStaleLockFile();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_removeStaleLockFile, doc_QLockFile_removeStaleLockFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLockFile_error, "error(self) -> QLockFile.LockError");

extern "C" {static PyObject *meth_QLockFile_error(PyObject *, PyObject *);}
static PyObject *meth_QLockFile_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLockFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLockFile, &sipCpp))
        {
             ::QLockFile::LockError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLockFile_LockError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLockFile, sipName_error, doc_QLockFile_error);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLockFile(void *, int);}
static void release_QLockFile(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLockFile *>(sipCppV);
}


extern "C" {static void dealloc_QLockFile(sipSimpleWrapper *);}
static void dealloc_QLockFile(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLockFile(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLockFile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLockFile(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLockFile *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QLockFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QLockFile[] = {
    {SIP_MLNAME_CAST(sipName_error), meth_QLockFile_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QLockFile_error)},
    {SIP_MLNAME_CAST(sipName_getLockInfo), meth_QLockFile_getLockInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QLockFile_getLockInfo)},
    {SIP_MLNAME_CAST(sipName_isLocked), meth_QLockFile_isLocked, METH_VARARGS, SIP_MLDOC_CAST(doc_QLockFile_isLocked)},
    {SIP_MLNAME_CAST(sipName_lock), meth_QLockFile_lock, METH_VARARGS, SIP_MLDOC_CAST(doc_QLockFile_lock)},
    {SIP_MLNAME_CAST(sipName_removeStaleLockFile), meth_QLockFile_removeStaleLockFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QLockFile_removeStaleLockFile)},
    {SIP_MLNAME_CAST(sipName_setStaleLockTime), meth_QLockFile_setStaleLockTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QLockFile_setStaleLockTime)},
    {SIP_MLNAME_CAST(sipName_staleLockTime), meth_QLockFile_staleLockTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QLockFile_staleLockTime)},
    {SIP_MLNAME_CAST(sipName_tryLock), SIP_MLMETH_CAST(meth_QLockFile_tryLock), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLockFile_tryLock)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QLockFile_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QLockFile_unlock)}
};

static sipEnumMemberDef enummembers_QLockFile[] = {
    {sipName_LockFailedError, static_cast<int>( ::QLockFile::LockFailedError), 155},
    {sipName_NoError, static_cast<int>( ::QLockFile::NoError), 155},
    {sipName_PermissionError, static_cast<int>( ::QLockFile::PermissionError), 155},
    {sipName_UnknownError, static_cast<int>( ::QLockFile::UnknownError), 155},
};

PyDoc_STRVAR(doc_QLockFile, "\1QLockFile(str)");


static pyqt5ClassPluginDef plugin_QLockFile = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLockFile = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLockFile,
        {SIP_NULLPTR},
        &plugin_QLockFile
    },
    {
        sipNameNr_QLockFile,
        {0, 0, 1},
        9, methods_QLockFile,
        4, enummembers_QLockFile,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLockFile,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QLockFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLockFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QLockFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 12091 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 12095 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QLocale_DataSizeFormats___hash__(PyObject *);}
static long slot_QLocale_DataSizeFormats___hash__(PyObject *sipSelf)
{
     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QLocale::DataSizeFormats::Int();
#line 12113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QLocale_DataSizeFormats___bool__(PyObject *);}
static int slot_QLocale_DataSizeFormats___bool__(PyObject *sipSelf)
{
     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocale::DataSizeFormats::Int() != 0);
#line 12138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale::DataSizeFormats* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QLocale_DataSizeFormats, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocale::DataSizeFormats::Int() != a0->operator QLocale::DataSizeFormats::Int());
#line 12168 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QLocale::DataSizeFormats *>(a0),sipType_QLocale_DataSizeFormats,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QLocale_DataSizeFormats, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale::DataSizeFormats* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QLocale_DataSizeFormats, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocale::DataSizeFormats::Int() == a0->operator QLocale::DataSizeFormats::Int());
#line 12204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QLocale::DataSizeFormats *>(a0),sipType_QLocale_DataSizeFormats,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QLocale_DataSizeFormats, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocale_DataSizeFormats)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QLocale::DataSizeFormats(*sipCpp ^ a0);
#line 12243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___xor__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::DataSizeFormats* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocale_DataSizeFormats, &a0, &a0State, &a1))
        {
             ::QLocale::DataSizeFormats*sipRes;

            sipRes = new  ::QLocale::DataSizeFormats((*a0 ^ a1));
            sipReleaseType(a0,sipType_QLocale_DataSizeFormats,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocale_DataSizeFormats,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___ior__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocale_DataSizeFormats)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QLocale::DataSizeFormats(*sipCpp | a0);
#line 12315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___or__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::DataSizeFormats* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocale_DataSizeFormats, &a0, &a0State, &a1))
        {
             ::QLocale::DataSizeFormats*sipRes;

            sipRes = new  ::QLocale::DataSizeFormats((*a0 | a1));
            sipReleaseType(a0,sipType_QLocale_DataSizeFormats,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocale_DataSizeFormats,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___iand__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocale_DataSizeFormats)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QLocale::DataSizeFormats::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___and__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::DataSizeFormats* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocale_DataSizeFormats, &a0, &a0State, &a1))
        {
             ::QLocale::DataSizeFormats*sipRes;

            sipRes = new  ::QLocale::DataSizeFormats((*a0 & a1));
            sipReleaseType(a0,sipType_QLocale_DataSizeFormats,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocale_DataSizeFormats,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___invert__(PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___invert__(PyObject *sipSelf)
{
     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QLocale::DataSizeFormats*sipRes;

            sipRes = new  ::QLocale::DataSizeFormats(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QLocale_DataSizeFormats,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLocale_DataSizeFormats___int__(PyObject *);}
static PyObject *slot_QLocale_DataSizeFormats___int__(PyObject *sipSelf)
{
     ::QLocale::DataSizeFormats *sipCpp = reinterpret_cast< ::QLocale::DataSizeFormats *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_DataSizeFormats));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocale_DataSizeFormats(void *, int);}
static void release_QLocale_DataSizeFormats(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLocale::DataSizeFormats *>(sipCppV);
}


extern "C" {static void assign_QLocale_DataSizeFormats(void *, SIP_SSIZE_T, void *);}
static void assign_QLocale_DataSizeFormats(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLocale::DataSizeFormats *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLocale::DataSizeFormats *>(sipSrc);
}


extern "C" {static void *array_QLocale_DataSizeFormats(SIP_SSIZE_T);}
static void *array_QLocale_DataSizeFormats(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLocale::DataSizeFormats[sipNrElem];
}


extern "C" {static void *copy_QLocale_DataSizeFormats(const void *, SIP_SSIZE_T);}
static void *copy_QLocale_DataSizeFormats(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLocale::DataSizeFormats(reinterpret_cast<const  ::QLocale::DataSizeFormats *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLocale_DataSizeFormats(sipSimpleWrapper *);}
static void dealloc_QLocale_DataSizeFormats(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLocale_DataSizeFormats(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLocale_DataSizeFormats(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocale_DataSizeFormats(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLocale::DataSizeFormats *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLocale::DataSizeFormats();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QLocale::DataSizeFormats(a0);

            return sipCpp;
        }
    }

    {
        const  ::QLocale::DataSizeFormats* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QLocale_DataSizeFormats, &a0, &a0State))
        {
            sipCpp = new  ::QLocale::DataSizeFormats(*a0);
            sipReleaseType(const_cast< ::QLocale::DataSizeFormats *>(a0),sipType_QLocale_DataSizeFormats,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QLocale_DataSizeFormats(PyObject *, void **, int *, PyObject *);}
static int convertTo_QLocale_DataSizeFormats(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QLocale::DataSizeFormats **sipCppPtr = reinterpret_cast< ::QLocale::DataSizeFormats **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QLocale::DataSizeFormats is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QLocale_DataSizeFormat)) ||
            sipCanConvertToType(sipPy, sipType_QLocale_DataSizeFormats, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QLocale_DataSizeFormat)))
{
    *sipCppPtr = new QLocale::DataSizeFormats(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QLocale::DataSizeFormats *>(sipConvertToType(sipPy, sipType_QLocale_DataSizeFormats, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 12583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLocale_DataSizeFormats[] = {
    {(void *)slot_QLocale_DataSizeFormats___hash__, hash_slot},
    {(void *)slot_QLocale_DataSizeFormats___bool__, bool_slot},
    {(void *)slot_QLocale_DataSizeFormats___ne__, ne_slot},
    {(void *)slot_QLocale_DataSizeFormats___eq__, eq_slot},
    {(void *)slot_QLocale_DataSizeFormats___ixor__, ixor_slot},
    {(void *)slot_QLocale_DataSizeFormats___xor__, xor_slot},
    {(void *)slot_QLocale_DataSizeFormats___ior__, ior_slot},
    {(void *)slot_QLocale_DataSizeFormats___or__, or_slot},
    {(void *)slot_QLocale_DataSizeFormats___iand__, iand_slot},
    {(void *)slot_QLocale_DataSizeFormats___and__, and_slot},
    {(void *)slot_QLocale_DataSizeFormats___invert__, invert_slot},
    {(void *)slot_QLocale_DataSizeFormats___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QLocale_DataSizeFormats, "\1QLocale.DataSizeFormats()\n"
"QLocale.DataSizeFormats(Union[QLocale.DataSizeFormats, QLocale.DataSizeFormat])\n"
"QLocale.DataSizeFormats(QLocale.DataSizeFormats)");


static pyqt5ClassPluginDef plugin_QLocale_DataSizeFormats = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLocale_DataSizeFormats = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLocale__DataSizeFormats,
        {SIP_NULLPTR},
        &plugin_QLocale_DataSizeFormats
    },
    {
        sipNameNr_DataSizeFormats,
        {141, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLocale_DataSizeFormats,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLocale_DataSizeFormats,
    init_type_QLocale_DataSizeFormats,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLocale_DataSizeFormats,
    assign_QLocale_DataSizeFormats,
    array_QLocale_DataSizeFormats,
    copy_QLocale_DataSizeFormats,
    release_QLocale_DataSizeFormats,
    SIP_NULLPTR,
    convertTo_QLocale_DataSizeFormats,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 12671 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 12675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QLocale_NumberOptions___hash__(PyObject *);}
static long slot_QLocale_NumberOptions___hash__(PyObject *sipSelf)
{
     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QLocale::NumberOptions::Int();
#line 12693 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QLocale_NumberOptions___bool__(PyObject *);}
static int slot_QLocale_NumberOptions___bool__(PyObject *sipSelf)
{
     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocale::NumberOptions::Int() != 0);
#line 12718 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale::NumberOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QLocale_NumberOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocale::NumberOptions::Int() != a0->operator QLocale::NumberOptions::Int());
#line 12748 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QLocale::NumberOptions *>(a0),sipType_QLocale_NumberOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QLocale_NumberOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale::NumberOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QLocale_NumberOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocale::NumberOptions::Int() == a0->operator QLocale::NumberOptions::Int());
#line 12784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QLocale::NumberOptions *>(a0),sipType_QLocale_NumberOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QLocale_NumberOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocale_NumberOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QLocale::NumberOptions(*sipCpp ^ a0);
#line 12823 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::NumberOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocale_NumberOptions, &a0, &a0State, &a1))
        {
             ::QLocale::NumberOptions*sipRes;

            sipRes = new  ::QLocale::NumberOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QLocale_NumberOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocale_NumberOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QLocale::NumberOptions(*sipCpp | a0);
#line 12895 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::NumberOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocale_NumberOptions, &a0, &a0State, &a1))
        {
             ::QLocale::NumberOptions*sipRes;

            sipRes = new  ::QLocale::NumberOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QLocale_NumberOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocale_NumberOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QLocale::NumberOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QLocale_NumberOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::NumberOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocale_NumberOptions, &a0, &a0State, &a1))
        {
             ::QLocale::NumberOptions*sipRes;

            sipRes = new  ::QLocale::NumberOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QLocale_NumberOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___invert__(PyObject *);}
static PyObject *slot_QLocale_NumberOptions___invert__(PyObject *sipSelf)
{
     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QLocale::NumberOptions*sipRes;

            sipRes = new  ::QLocale::NumberOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLocale_NumberOptions___int__(PyObject *);}
static PyObject *slot_QLocale_NumberOptions___int__(PyObject *sipSelf)
{
     ::QLocale::NumberOptions *sipCpp = reinterpret_cast< ::QLocale::NumberOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale_NumberOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocale_NumberOptions(void *, int);}
static void release_QLocale_NumberOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLocale::NumberOptions *>(sipCppV);
}


extern "C" {static void assign_QLocale_NumberOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QLocale_NumberOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLocale::NumberOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLocale::NumberOptions *>(sipSrc);
}


extern "C" {static void *array_QLocale_NumberOptions(SIP_SSIZE_T);}
static void *array_QLocale_NumberOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLocale::NumberOptions[sipNrElem];
}


extern "C" {static void *copy_QLocale_NumberOptions(const void *, SIP_SSIZE_T);}
static void *copy_QLocale_NumberOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLocale::NumberOptions(reinterpret_cast<const  ::QLocale::NumberOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLocale_NumberOptions(sipSimpleWrapper *);}
static void dealloc_QLocale_NumberOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLocale_NumberOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLocale_NumberOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocale_NumberOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLocale::NumberOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLocale::NumberOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QLocale::NumberOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QLocale::NumberOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QLocale_NumberOptions, &a0, &a0State))
        {
            sipCpp = new  ::QLocale::NumberOptions(*a0);
            sipReleaseType(const_cast< ::QLocale::NumberOptions *>(a0),sipType_QLocale_NumberOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QLocale_NumberOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QLocale_NumberOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QLocale::NumberOptions **sipCppPtr = reinterpret_cast< ::QLocale::NumberOptions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QLocale::NumberOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QLocale_NumberOption)) ||
            sipCanConvertToType(sipPy, sipType_QLocale_NumberOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QLocale_NumberOption)))
{
    *sipCppPtr = new QLocale::NumberOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QLocale::NumberOptions *>(sipConvertToType(sipPy, sipType_QLocale_NumberOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 13163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLocale_NumberOptions[] = {
    {(void *)slot_QLocale_NumberOptions___hash__, hash_slot},
    {(void *)slot_QLocale_NumberOptions___bool__, bool_slot},
    {(void *)slot_QLocale_NumberOptions___ne__, ne_slot},
    {(void *)slot_QLocale_NumberOptions___eq__, eq_slot},
    {(void *)slot_QLocale_NumberOptions___ixor__, ixor_slot},
    {(void *)slot_QLocale_NumberOptions___xor__, xor_slot},
    {(void *)slot_QLocale_NumberOptions___ior__, ior_slot},
    {(void *)slot_QLocale_NumberOptions___or__, or_slot},
    {(void *)slot_QLocale_NumberOptions___iand__, iand_slot},
    {(void *)slot_QLocale_NumberOptions___and__, and_slot},
    {(void *)slot_QLocale_NumberOptions___invert__, invert_slot},
    {(void *)slot_QLocale_NumberOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QLocale_NumberOptions, "\1QLocale.NumberOptions()\n"
"QLocale.NumberOptions(Union[QLocale.NumberOptions, QLocale.NumberOption])\n"
"QLocale.NumberOptions(QLocale.NumberOptions)");


static pyqt5ClassPluginDef plugin_QLocale_NumberOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLocale_NumberOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLocale__NumberOptions,
        {SIP_NULLPTR},
        &plugin_QLocale_NumberOptions
    },
    {
        sipNameNr_NumberOptions,
        {141, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLocale_NumberOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLocale_NumberOptions,
    init_type_QLocale_NumberOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLocale_NumberOptions,
    assign_QLocale_NumberOptions,
    array_QLocale_NumberOptions,
    copy_QLocale_NumberOptions,
    release_QLocale_NumberOptions,
    SIP_NULLPTR,
    convertTo_QLocale_NumberOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 13251 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 13255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 13258 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 13261 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13264 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <Qt>
#line 13267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 13270 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 13273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 13276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 13279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 13282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 13285 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QLocale_language, "language(self) -> QLocale.Language");

extern "C" {static PyObject *meth_QLocale_language(PyObject *, PyObject *);}
static PyObject *meth_QLocale_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QLocale::Language sipRes;

            sipRes = sipCpp->language();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocale_Language);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_language, doc_QLocale_language);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_country, "country(self) -> QLocale.Country");

extern "C" {static PyObject *meth_QLocale_country(PyObject *, PyObject *);}
static PyObject *meth_QLocale_country(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QLocale::Country sipRes;

            sipRes = sipCpp->country();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocale_Country);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_country, doc_QLocale_country);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_name, "name(self) -> str");

extern "C" {static PyObject *meth_QLocale_name(PyObject *, PyObject *);}
static PyObject *meth_QLocale_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_name, doc_QLocale_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toShort, "toShort(self, str) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QLocale_toShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            short sipRes;

            sipRes = sipCpp->toShort(*a0,&a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(hb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toShort, doc_QLocale_toShort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toUShort, "toUShort(self, str) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QLocale_toUShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::ushort sipRes;

            sipRes = sipCpp->toUShort(*a0,&a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(tb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toUShort, doc_QLocale_toUShort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toInt, "toInt(self, str) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QLocale_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->toInt(*a0,&a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ib)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toInt, doc_QLocale_toInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toUInt, "toUInt(self, str) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QLocale_toUInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::uint sipRes;

            sipRes = sipCpp->toUInt(*a0,&a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ub)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toUInt, doc_QLocale_toUInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toLongLong, "toLongLong(self, str) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QLocale_toLongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toLongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::qlonglong sipRes;

            sipRes = sipCpp->toLongLong(*a0,&a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(nb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toLongLong, doc_QLocale_toLongLong);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toULongLong, "toULongLong(self, str) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QLocale_toULongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toULongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::qulonglong sipRes;

            sipRes = sipCpp->toULongLong(*a0,&a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ob)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toULongLong, doc_QLocale_toULongLong);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toFloat, "toFloat(self, str) -> Tuple[float, bool]");

extern "C" {static PyObject *meth_QLocale_toFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            float sipRes;

            sipRes = sipCpp->toFloat(*a0,&a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(fb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toFloat, doc_QLocale_toFloat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toDouble, "toDouble(self, str) -> Tuple[float, bool]");

extern "C" {static PyObject *meth_QLocale_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
            double sipRes;

            sipRes = sipCpp->toDouble(*a0,&a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(db)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDouble, doc_QLocale_toDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toString, "toString(self, float, format: str = 'g', precision: int = 6) -> str\n"
"toString(self, Union[QDateTime, datetime.datetime], str) -> str\n"
"toString(self, Union[QDateTime, datetime.datetime], format: QLocale.FormatType = QLocale.LongFormat) -> str\n"
"toString(self, Union[QDate, datetime.date], str) -> str\n"
"toString(self, Union[QDate, datetime.date], format: QLocale.FormatType = QLocale.LongFormat) -> str\n"
"toString(self, Union[QTime, datetime.time], str) -> str\n"
"toString(self, Union[QTime, datetime.time], format: QLocale.FormatType = QLocale.LongFormat) -> str\n"
"toString(self, int) -> str");

extern "C" {static PyObject *meth_QLocale_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_precision,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BXd|aAi", &sipSelf, sipType_QLocale, &sipCpp, &a0, &a1, &a2))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0,*a1));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0,a1));
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0,*a1));
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0,a1));
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QTime* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QTime, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0,*a1));
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QTime, &a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0,a1));
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;
        const  ::QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BP0", &sipSelf, sipType_QLocale, &sipCpp, &a0))
        {
             ::QString*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 1410 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
        // Convert a Python int avoiding overflow as much as possible.
        
        static PyObject *zero = 0;
        if (!zero)
            zero = PyLong_FromLong(0);
        
        int rc = PyObject_RichCompareBool(a0, zero, Py_LT);
        
        PyErr_Clear();
        
        if (rc < 0)
        {
            sipError = sipBadCallableArg(0, a0);
        }
        else if (rc)
        {
        #if defined(HAVE_LONG_LONG)
            PY_LONG_LONG value = PyLong_AsLongLong(a0);
        #else
            long value = PyLong_AsLong(a0);
        #endif
        
            if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_OverflowError))
            {
                sipError = sipBadCallableArg(0, a0);
            }
            else
            {
                sipRes = new QString(sipCpp->toString(value));
            }
        }
        else
        {
        #if PY_MAJOR_VERSION >= 3
        #if defined(HAVE_LONG_LONG)
            unsigned PY_LONG_LONG value = PyLong_AsUnsignedLongLongMask(a0);
        #else
            unsigned long value = PyLong_AsUnsignedLongMask(a0);
        #endif
        #else
        #if defined(HAVE_LONG_LONG)
            unsigned PY_LONG_LONG value = PyInt_AsUnsignedLongLongMask(a0);
        #else
            unsigned long value = PyInt_AsUnsignedLongMask(a0);
        #endif
        #endif
        
            if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_OverflowError))
            {
                sipError = sipBadCallableArg(0, a0);
            }
            else
            {
                sipRes = new QString(sipCpp->toString(value));
            }
        }
#line 13893 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toString, doc_QLocale_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_languageToString, "languageToString(QLocale.Language) -> str");

extern "C" {static PyObject *meth_QLocale_languageToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_languageToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::Language a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Language, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QLocale::languageToString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_languageToString, doc_QLocale_languageToString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_countryToString, "countryToString(QLocale.Country) -> str");

extern "C" {static PyObject *meth_QLocale_countryToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_countryToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::Country a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Country, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QLocale::countryToString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_countryToString, doc_QLocale_countryToString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_setDefault, "setDefault(QLocale)");

extern "C" {static PyObject *meth_QLocale_setDefault(PyObject *, PyObject *);}
static PyObject *meth_QLocale_setDefault(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QLocale, &a0))
        {
             ::QLocale::setDefault(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_setDefault, doc_QLocale_setDefault);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_c, "c() -> QLocale");

extern "C" {static PyObject *meth_QLocale_c(PyObject *, PyObject *);}
static PyObject *meth_QLocale_c(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale( ::QLocale::c());

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_c, doc_QLocale_c);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_system, "system() -> QLocale");

extern "C" {static PyObject *meth_QLocale_system(PyObject *, PyObject *);}
static PyObject *meth_QLocale_system(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale( ::QLocale::system());

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_system, doc_QLocale_system);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_dateFormat, "dateFormat(self, format: QLocale.FormatType = QLocale.LongFormat) -> str");

extern "C" {static PyObject *meth_QLocale_dateFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dateFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::FormatType a0 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->dateFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dateFormat, doc_QLocale_dateFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_timeFormat, "timeFormat(self, format: QLocale.FormatType = QLocale.LongFormat) -> str");

extern "C" {static PyObject *meth_QLocale_timeFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_timeFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::FormatType a0 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->timeFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_timeFormat, doc_QLocale_timeFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_dateTimeFormat, "dateTimeFormat(self, format: QLocale.FormatType = QLocale.LongFormat) -> str");

extern "C" {static PyObject *meth_QLocale_dateTimeFormat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dateTimeFormat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::FormatType a0 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_FormatType, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->dateTimeFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dateTimeFormat, doc_QLocale_dateTimeFormat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toDate, "toDate(self, str, format: QLocale.FormatType = QLocale.LongFormat) -> QDate\n"
"toDate(self, str, str) -> QDate");

extern "C" {static PyObject *meth_QLocale_toDate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->toDate(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->toDate(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDate, doc_QLocale_toDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toTime, "toTime(self, str, format: QLocale.FormatType = QLocale.LongFormat) -> QTime\n"
"toTime(self, str, str) -> QTime");

extern "C" {static PyObject *meth_QLocale_toTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->toTime(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->toTime(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toTime, doc_QLocale_toTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toDateTime, "toDateTime(self, str, format: QLocale.FormatType = QLocale.LongFormat) -> QDateTime\n"
"toDateTime(self, str, str) -> QDateTime");

extern "C" {static PyObject *meth_QLocale_toDateTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDateTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_FormatType, &a1))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->toDateTime(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->toDateTime(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toDateTime, doc_QLocale_toDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_decimalPoint, "decimalPoint(self) -> str");

extern "C" {static PyObject *meth_QLocale_decimalPoint(PyObject *, PyObject *);}
static PyObject *meth_QLocale_decimalPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->decimalPoint());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_decimalPoint, doc_QLocale_decimalPoint);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_groupSeparator, "groupSeparator(self) -> str");

extern "C" {static PyObject *meth_QLocale_groupSeparator(PyObject *, PyObject *);}
static PyObject *meth_QLocale_groupSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->groupSeparator());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_groupSeparator, doc_QLocale_groupSeparator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_percent, "percent(self) -> str");

extern "C" {static PyObject *meth_QLocale_percent(PyObject *, PyObject *);}
static PyObject *meth_QLocale_percent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->percent());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_percent, doc_QLocale_percent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_zeroDigit, "zeroDigit(self) -> str");

extern "C" {static PyObject *meth_QLocale_zeroDigit(PyObject *, PyObject *);}
static PyObject *meth_QLocale_zeroDigit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->zeroDigit());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_zeroDigit, doc_QLocale_zeroDigit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_negativeSign, "negativeSign(self) -> str");

extern "C" {static PyObject *meth_QLocale_negativeSign(PyObject *, PyObject *);}
static PyObject *meth_QLocale_negativeSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->negativeSign());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_negativeSign, doc_QLocale_negativeSign);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_exponential, "exponential(self) -> str");

extern "C" {static PyObject *meth_QLocale_exponential(PyObject *, PyObject *);}
static PyObject *meth_QLocale_exponential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->exponential());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_exponential, doc_QLocale_exponential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_monthName, "monthName(self, int, format: QLocale.FormatType = QLocale.LongFormat) -> str");

extern "C" {static PyObject *meth_QLocale_monthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_monthName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->monthName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_monthName, doc_QLocale_monthName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_dayName, "dayName(self, int, format: QLocale.FormatType = QLocale.LongFormat) -> str");

extern "C" {static PyObject *meth_QLocale_dayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_dayName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->dayName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_dayName, doc_QLocale_dayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_setNumberOptions, "setNumberOptions(self, Union[QLocale.NumberOptions, QLocale.NumberOption])");

extern "C" {static PyObject *meth_QLocale_setNumberOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocale_setNumberOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::NumberOptions* a0;
        int a0State = 0;
         ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_NumberOptions, &a0, &a0State))
        {
            sipCpp->setNumberOptions(*a0);
            sipReleaseType(a0,sipType_QLocale_NumberOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_setNumberOptions, doc_QLocale_setNumberOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_numberOptions, "numberOptions(self) -> QLocale.NumberOptions");

extern "C" {static PyObject *meth_QLocale_numberOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocale_numberOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QLocale::NumberOptions*sipRes;

            sipRes = new  ::QLocale::NumberOptions(sipCpp->numberOptions());

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_numberOptions, doc_QLocale_numberOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_measurementSystem, "measurementSystem(self) -> QLocale.MeasurementSystem");

extern "C" {static PyObject *meth_QLocale_measurementSystem(PyObject *, PyObject *);}
static PyObject *meth_QLocale_measurementSystem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QLocale::MeasurementSystem sipRes;

            sipRes = sipCpp->measurementSystem();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocale_MeasurementSystem);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_measurementSystem, doc_QLocale_measurementSystem);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_positiveSign, "positiveSign(self) -> str");

extern "C" {static PyObject *meth_QLocale_positiveSign(PyObject *, PyObject *);}
static PyObject *meth_QLocale_positiveSign(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar(sipCpp->positiveSign());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_positiveSign, doc_QLocale_positiveSign);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_standaloneMonthName, "standaloneMonthName(self, int, format: QLocale.FormatType = QLocale.LongFormat) -> str");

extern "C" {static PyObject *meth_QLocale_standaloneMonthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_standaloneMonthName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->standaloneMonthName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_standaloneMonthName, doc_QLocale_standaloneMonthName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_standaloneDayName, "standaloneDayName(self, int, format: QLocale.FormatType = QLocale.LongFormat) -> str");

extern "C" {static PyObject *meth_QLocale_standaloneDayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_standaloneDayName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLocale::FormatType a1 = QLocale::LongFormat;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QLocale_FormatType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->standaloneDayName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_standaloneDayName, doc_QLocale_standaloneDayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_amText, "amText(self) -> str");

extern "C" {static PyObject *meth_QLocale_amText(PyObject *, PyObject *);}
static PyObject *meth_QLocale_amText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->amText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_amText, doc_QLocale_amText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_pmText, "pmText(self) -> str");

extern "C" {static PyObject *meth_QLocale_pmText(PyObject *, PyObject *);}
static PyObject *meth_QLocale_pmText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->pmText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_pmText, doc_QLocale_pmText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_textDirection, "textDirection(self) -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QLocale_textDirection(PyObject *, PyObject *);}
static PyObject *meth_QLocale_textDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::Qt::LayoutDirection sipRes;

            sipRes = sipCpp->textDirection();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_textDirection, doc_QLocale_textDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_script, "script(self) -> QLocale.Script");

extern "C" {static PyObject *meth_QLocale_script(PyObject *, PyObject *);}
static PyObject *meth_QLocale_script(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QLocale::Script sipRes;

            sipRes = sipCpp->script();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocale_Script);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_script, doc_QLocale_script);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_bcp47Name, "bcp47Name(self) -> str");

extern "C" {static PyObject *meth_QLocale_bcp47Name(PyObject *, PyObject *);}
static PyObject *meth_QLocale_bcp47Name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->bcp47Name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_bcp47Name, doc_QLocale_bcp47Name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_nativeLanguageName, "nativeLanguageName(self) -> str");

extern "C" {static PyObject *meth_QLocale_nativeLanguageName(PyObject *, PyObject *);}
static PyObject *meth_QLocale_nativeLanguageName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->nativeLanguageName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_nativeLanguageName, doc_QLocale_nativeLanguageName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_nativeCountryName, "nativeCountryName(self) -> str");

extern "C" {static PyObject *meth_QLocale_nativeCountryName(PyObject *, PyObject *);}
static PyObject *meth_QLocale_nativeCountryName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->nativeCountryName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_nativeCountryName, doc_QLocale_nativeCountryName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_firstDayOfWeek, "firstDayOfWeek(self) -> Qt.DayOfWeek");

extern "C" {static PyObject *meth_QLocale_firstDayOfWeek(PyObject *, PyObject *);}
static PyObject *meth_QLocale_firstDayOfWeek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::Qt::DayOfWeek sipRes;

            sipRes = sipCpp->firstDayOfWeek();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_DayOfWeek);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_firstDayOfWeek, doc_QLocale_firstDayOfWeek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_weekdays, "weekdays(self) -> List[Qt.DayOfWeek]");

extern "C" {static PyObject *meth_QLocale_weekdays(PyObject *, PyObject *);}
static PyObject *meth_QLocale_weekdays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QList< ::Qt::DayOfWeek>*sipRes;

            sipRes = new  ::QList< ::Qt::DayOfWeek>(sipCpp->weekdays());

            return sipConvertFromNewType(sipRes,sipType_QList_0100Qt_DayOfWeek,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_weekdays, doc_QLocale_weekdays);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toUpper, "toUpper(self, str) -> str");

extern "C" {static PyObject *meth_QLocale_toUpper(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toUpper(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toUpper, doc_QLocale_toUpper);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toLower, "toLower(self, str) -> str");

extern "C" {static PyObject *meth_QLocale_toLower(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toLower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toLower(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toLower, doc_QLocale_toLower);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_currencySymbol, "currencySymbol(self, format: QLocale.CurrencySymbolFormat = QLocale.CurrencySymbol) -> str");

extern "C" {static PyObject *meth_QLocale_currencySymbol(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_currencySymbol(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::CurrencySymbolFormat a0 = QLocale::CurrencySymbol;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale_CurrencySymbolFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->currencySymbol(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_currencySymbol, doc_QLocale_currencySymbol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_toCurrencyString, "toCurrencyString(self, float, symbol: str = '') -> str\n"
"toCurrencyString(self, float, str, int) -> str\n"
"toCurrencyString(self, int, symbol: str = '') -> str");

extern "C" {static PyObject *meth_QLocale_toCurrencyString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_toCurrencyString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_symbol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BXd|J1", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toCurrencyString(a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        double a0;
        const  ::QString* a1;
        int a1State = 0;
        int a2;
        const  ::QLocale *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BXdJ1i", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QString,&a1, &a1State, &a2))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toCurrencyString(a0,*a1,a2));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_symbol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BP0|J1", &sipSelf, sipType_QLocale, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 1470 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
        // Convert a Python int avoiding overflow as much as possible.
        
        static PyObject *zero = 0;
        if (!zero)
            zero = PyLong_FromLong(0);
        
        int rc = PyObject_RichCompareBool(a0, zero, Py_LT);
        
        PyErr_Clear();
        
        if (rc < 0)
        {
            sipError = sipBadCallableArg(0, a0);
        }
        else if (rc)
        {
        #if defined(HAVE_LONG_LONG)
            PY_LONG_LONG value = PyLong_AsLongLong(a0);
        #else
            long value = PyLong_AsLong(a0);
        #endif
        
            if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_OverflowError))
            {
                sipError = sipBadCallableArg(0, a0);
            }
            else
            {
                sipRes = new QString(sipCpp->toCurrencyString(value, *a1));
            }
        }
        else
        {
        #if defined(HAVE_LONG_LONG)
            unsigned PY_LONG_LONG value = PyLong_AsUnsignedLongLongMask(a0);
        #else
            unsigned long value = PyLong_AsUnsignedLongMask(a0);
        #endif
        
            if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_OverflowError))
            {
                sipError = sipBadCallableArg(0, a0);
            }
            else
            {
                sipRes = new QString(sipCpp->toCurrencyString(value, *a1));
            }
        }
#line 15210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_toCurrencyString, doc_QLocale_toCurrencyString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_uiLanguages, "uiLanguages(self) -> List[str]");

extern "C" {static PyObject *meth_QLocale_uiLanguages(PyObject *, PyObject *);}
static PyObject *meth_QLocale_uiLanguages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocale, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->uiLanguages());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_uiLanguages, doc_QLocale_uiLanguages);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_scriptToString, "scriptToString(QLocale.Script) -> str");

extern "C" {static PyObject *meth_QLocale_scriptToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_scriptToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::Script a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLocale_Script, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QLocale::scriptToString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_scriptToString, doc_QLocale_scriptToString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_matchingLocales, "matchingLocales(QLocale.Language, QLocale.Script, QLocale.Country) -> List[QLocale]");

extern "C" {static PyObject *meth_QLocale_matchingLocales(PyObject *, PyObject *);}
static PyObject *meth_QLocale_matchingLocales(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale::Language a0;
         ::QLocale::Script a1;
         ::QLocale::Country a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "EEE", sipType_QLocale_Language, &a0, sipType_QLocale_Script, &a1, sipType_QLocale_Country, &a2))
        {
            QList< ::QLocale>*sipRes;

            sipRes = new QList< ::QLocale>( ::QLocale::matchingLocales(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_matchingLocales, doc_QLocale_matchingLocales);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_quoteString, "quoteString(self, str, style: QLocale.QuotationStyle = QLocale.StandardQuotation) -> str");

extern "C" {static PyObject *meth_QLocale_quoteString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_quoteString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLocale::QuotationStyle a1 = QLocale::StandardQuotation;
        const  ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QLocale, &sipCpp, sipType_QString,&a0, &a0State, sipType_QLocale_QuotationStyle, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->quoteString(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_quoteString, doc_QLocale_quoteString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_createSeparatedList, "createSeparatedList(self, Iterable[str]) -> str");

extern "C" {static PyObject *meth_QLocale_createSeparatedList(PyObject *, PyObject *);}
static PyObject *meth_QLocale_createSeparatedList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
        const  ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocale, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->createSeparatedList(*a0));
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_createSeparatedList, doc_QLocale_createSeparatedList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_swap, "swap(self, QLocale)");

extern "C" {static PyObject *meth_QLocale_swap(PyObject *, PyObject *);}
static PyObject *meth_QLocale_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocale* a0;
         ::QLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLocale, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_swap, doc_QLocale_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocale_formattedDataSize, "formattedDataSize(self, int, precision: int = 2, format: Union[QLocale.DataSizeFormats, QLocale.DataSizeFormat] = QLocale.DataSizeIecFormat) -> str");

extern "C" {static PyObject *meth_QLocale_formattedDataSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocale_formattedDataSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
        int a1 = 2;
         ::QLocale::DataSizeFormats a2def = QLocale::DataSizeIecFormat;
         ::QLocale::DataSizeFormats* a2 = &a2def;
        int a2State = 0;
         ::QLocale *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_precision,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|iJ1", &sipSelf, sipType_QLocale, &sipCpp, &a0, &a1, sipType_QLocale_DataSizeFormats, &a2, &a2State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->formattedDataSize(a0,a1,*a2));
            sipReleaseType(a2,sipType_QLocale_DataSizeFormats,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocale, sipName_formattedDataSize, doc_QLocale_formattedDataSize);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QLocale___hash__(PyObject *);}
static long slot_QLocale___hash__(PyObject *sipSelf)
{
     ::QLocale *sipCpp = reinterpret_cast< ::QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 1393 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
        sipRes = qHash(*sipCpp);
#line 15469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLocale___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLocale___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLocale *sipCpp = reinterpret_cast< ::QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLocale, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QLocale::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QLocale, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLocale___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLocale___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLocale *sipCpp = reinterpret_cast< ::QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLocale, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QLocale::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QLocale, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocale(void *, int);}
static void release_QLocale(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLocale *>(sipCppV);
}


extern "C" {static void assign_QLocale(void *, SIP_SSIZE_T, void *);}
static void assign_QLocale(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLocale *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLocale *>(sipSrc);
}


extern "C" {static void *array_QLocale(SIP_SSIZE_T);}
static void *array_QLocale(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLocale[sipNrElem];
}


extern "C" {static void *copy_QLocale(const void *, SIP_SSIZE_T);}
static void *copy_QLocale(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLocale(reinterpret_cast<const  ::QLocale *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLocale(sipSimpleWrapper *);}
static void dealloc_QLocale(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLocale(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLocale(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocale(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLocale *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLocale();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QLocale(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
         ::QLocale::Language a0;
         ::QLocale::Country a1 = QLocale::AnyCountry;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_country,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|E", sipType_QLocale_Language, &a0, sipType_QLocale_Country, &a1))
        {
            sipCpp = new  ::QLocale(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QLocale* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLocale, &a0))
        {
            sipCpp = new  ::QLocale(*a0);

            return sipCpp;
        }
    }

    {
         ::QLocale::Language a0;
         ::QLocale::Script a1;
         ::QLocale::Country a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EEE", sipType_QLocale_Language, &a0, sipType_QLocale_Script, &a1, sipType_QLocale_Country, &a2))
        {
            sipCpp = new  ::QLocale(a0,a1,a2);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLocale[] = {
    {(void *)slot_QLocale___hash__, hash_slot},
    {(void *)slot_QLocale___ne__, ne_slot},
    {(void *)slot_QLocale___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLocale[] = {
    {SIP_MLNAME_CAST(sipName_amText), meth_QLocale_amText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_amText)},
    {SIP_MLNAME_CAST(sipName_bcp47Name), meth_QLocale_bcp47Name, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_bcp47Name)},
    {SIP_MLNAME_CAST(sipName_c), meth_QLocale_c, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_c)},
    {SIP_MLNAME_CAST(sipName_country), meth_QLocale_country, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_country)},
    {SIP_MLNAME_CAST(sipName_countryToString), meth_QLocale_countryToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_countryToString)},
    {SIP_MLNAME_CAST(sipName_createSeparatedList), meth_QLocale_createSeparatedList, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_createSeparatedList)},
    {SIP_MLNAME_CAST(sipName_currencySymbol), SIP_MLMETH_CAST(meth_QLocale_currencySymbol), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_currencySymbol)},
    {SIP_MLNAME_CAST(sipName_dateFormat), SIP_MLMETH_CAST(meth_QLocale_dateFormat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_dateFormat)},
    {SIP_MLNAME_CAST(sipName_dateTimeFormat), SIP_MLMETH_CAST(meth_QLocale_dateTimeFormat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_dateTimeFormat)},
    {SIP_MLNAME_CAST(sipName_dayName), SIP_MLMETH_CAST(meth_QLocale_dayName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_dayName)},
    {SIP_MLNAME_CAST(sipName_decimalPoint), meth_QLocale_decimalPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_decimalPoint)},
    {SIP_MLNAME_CAST(sipName_exponential), meth_QLocale_exponential, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_exponential)},
    {SIP_MLNAME_CAST(sipName_firstDayOfWeek), meth_QLocale_firstDayOfWeek, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_firstDayOfWeek)},
    {SIP_MLNAME_CAST(sipName_formattedDataSize), SIP_MLMETH_CAST(meth_QLocale_formattedDataSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_formattedDataSize)},
    {SIP_MLNAME_CAST(sipName_groupSeparator), meth_QLocale_groupSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_groupSeparator)},
    {SIP_MLNAME_CAST(sipName_language), meth_QLocale_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_language)},
    {SIP_MLNAME_CAST(sipName_languageToString), meth_QLocale_languageToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_languageToString)},
    {SIP_MLNAME_CAST(sipName_matchingLocales), meth_QLocale_matchingLocales, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_matchingLocales)},
    {SIP_MLNAME_CAST(sipName_measurementSystem), meth_QLocale_measurementSystem, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_measurementSystem)},
    {SIP_MLNAME_CAST(sipName_monthName), SIP_MLMETH_CAST(meth_QLocale_monthName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_monthName)},
    {SIP_MLNAME_CAST(sipName_name), meth_QLocale_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_name)},
    {SIP_MLNAME_CAST(sipName_nativeCountryName), meth_QLocale_nativeCountryName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_nativeCountryName)},
    {SIP_MLNAME_CAST(sipName_nativeLanguageName), meth_QLocale_nativeLanguageName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_nativeLanguageName)},
    {SIP_MLNAME_CAST(sipName_negativeSign), meth_QLocale_negativeSign, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_negativeSign)},
    {SIP_MLNAME_CAST(sipName_numberOptions), meth_QLocale_numberOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_numberOptions)},
    {SIP_MLNAME_CAST(sipName_percent), meth_QLocale_percent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_percent)},
    {SIP_MLNAME_CAST(sipName_pmText), meth_QLocale_pmText, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_pmText)},
    {SIP_MLNAME_CAST(sipName_positiveSign), meth_QLocale_positiveSign, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_positiveSign)},
    {SIP_MLNAME_CAST(sipName_quoteString), SIP_MLMETH_CAST(meth_QLocale_quoteString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_quoteString)},
    {SIP_MLNAME_CAST(sipName_script), meth_QLocale_script, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_script)},
    {SIP_MLNAME_CAST(sipName_scriptToString), meth_QLocale_scriptToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_scriptToString)},
    {SIP_MLNAME_CAST(sipName_setDefault), meth_QLocale_setDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_setDefault)},
    {SIP_MLNAME_CAST(sipName_setNumberOptions), meth_QLocale_setNumberOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_setNumberOptions)},
    {SIP_MLNAME_CAST(sipName_standaloneDayName), SIP_MLMETH_CAST(meth_QLocale_standaloneDayName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_standaloneDayName)},
    {SIP_MLNAME_CAST(sipName_standaloneMonthName), SIP_MLMETH_CAST(meth_QLocale_standaloneMonthName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_standaloneMonthName)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QLocale_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_swap)},
    {SIP_MLNAME_CAST(sipName_system), meth_QLocale_system, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_system)},
    {SIP_MLNAME_CAST(sipName_textDirection), meth_QLocale_textDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_textDirection)},
    {SIP_MLNAME_CAST(sipName_timeFormat), SIP_MLMETH_CAST(meth_QLocale_timeFormat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_timeFormat)},
    {SIP_MLNAME_CAST(sipName_toCurrencyString), SIP_MLMETH_CAST(meth_QLocale_toCurrencyString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toCurrencyString)},
    {SIP_MLNAME_CAST(sipName_toDate), SIP_MLMETH_CAST(meth_QLocale_toDate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toDate)},
    {SIP_MLNAME_CAST(sipName_toDateTime), SIP_MLMETH_CAST(meth_QLocale_toDateTime), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toDateTime)},
    {SIP_MLNAME_CAST(sipName_toDouble), SIP_MLMETH_CAST(meth_QLocale_toDouble), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toDouble)},
    {SIP_MLNAME_CAST(sipName_toFloat), SIP_MLMETH_CAST(meth_QLocale_toFloat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toFloat)},
    {SIP_MLNAME_CAST(sipName_toInt), SIP_MLMETH_CAST(meth_QLocale_toInt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toInt)},
    {SIP_MLNAME_CAST(sipName_toLongLong), SIP_MLMETH_CAST(meth_QLocale_toLongLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toLongLong)},
    {SIP_MLNAME_CAST(sipName_toLower), meth_QLocale_toLower, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_toLower)},
    {SIP_MLNAME_CAST(sipName_toShort), SIP_MLMETH_CAST(meth_QLocale_toShort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toShort)},
    {SIP_MLNAME_CAST(sipName_toString), SIP_MLMETH_CAST(meth_QLocale_toString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toString)},
    {SIP_MLNAME_CAST(sipName_toTime), SIP_MLMETH_CAST(meth_QLocale_toTime), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toTime)},
    {SIP_MLNAME_CAST(sipName_toUInt), SIP_MLMETH_CAST(meth_QLocale_toUInt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toUInt)},
    {SIP_MLNAME_CAST(sipName_toULongLong), SIP_MLMETH_CAST(meth_QLocale_toULongLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toULongLong)},
    {SIP_MLNAME_CAST(sipName_toUShort), SIP_MLMETH_CAST(meth_QLocale_toUShort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocale_toUShort)},
    {SIP_MLNAME_CAST(sipName_toUpper), meth_QLocale_toUpper, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_toUpper)},
    {SIP_MLNAME_CAST(sipName_uiLanguages), meth_QLocale_uiLanguages, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_uiLanguages)},
    {SIP_MLNAME_CAST(sipName_weekdays), meth_QLocale_weekdays, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_weekdays)},
    {SIP_MLNAME_CAST(sipName_zeroDigit), meth_QLocale_zeroDigit, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocale_zeroDigit)}
};

static sipEnumMemberDef enummembers_QLocale[] = {
    {sipName_Abkhazian, static_cast<int>( ::QLocale::Abkhazian), 148},
    {sipName_AdlamScript, static_cast<int>( ::QLocale::AdlamScript), 153},
    {sipName_Afan, static_cast<int>( ::QLocale::Afan), 148},
    {sipName_Afar, static_cast<int>( ::QLocale::Afar), 148},
    {sipName_Afghanistan, static_cast<int>( ::QLocale::Afghanistan), 142},
    {sipName_Afrikaans, static_cast<int>( ::QLocale::Afrikaans), 148},
    {sipName_Aghem, static_cast<int>( ::QLocale::Aghem), 148},
    {sipName_Ahom, static_cast<int>( ::QLocale::Ahom), 148},
    {sipName_AhomScript, static_cast<int>( ::QLocale::AhomScript), 153},
    {sipName_Akan, static_cast<int>( ::QLocale::Akan), 148},
    {sipName_Akkadian, static_cast<int>( ::QLocale::Akkadian), 148},
    {sipName_Akoose, static_cast<int>( ::QLocale::Akoose), 148},
    {sipName_AlandIslands, static_cast<int>( ::QLocale::AlandIslands), 142},
    {sipName_Albania, static_cast<int>( ::QLocale::Albania), 142},
    {sipName_Albanian, static_cast<int>( ::QLocale::Albanian), 148},
    {sipName_Algeria, static_cast<int>( ::QLocale::Algeria), 142},
    {sipName_AlternateQuotation, static_cast<int>( ::QLocale::AlternateQuotation), 152},
    {sipName_AmericanSamoa, static_cast<int>( ::QLocale::AmericanSamoa), 142},
    {sipName_AmericanSignLanguage, static_cast<int>( ::QLocale::AmericanSignLanguage), 148},
    {sipName_Amharic, static_cast<int>( ::QLocale::Amharic), 148},
    {sipName_AnatolianHieroglyphsScript, static_cast<int>( ::QLocale::AnatolianHieroglyphsScript), 153},
    {sipName_AncientEgyptian, static_cast<int>( ::QLocale::AncientEgyptian), 148},
    {sipName_AncientGreek, static_cast<int>( ::QLocale::AncientGreek), 148},
    {sipName_AncientNorthArabian, static_cast<int>( ::QLocale::AncientNorthArabian), 148},
    {sipName_Andorra, static_cast<int>( ::QLocale::Andorra), 142},
    {sipName_Angola, static_cast<int>( ::QLocale::Angola), 142},
    {sipName_Anguilla, static_cast<int>( ::QLocale::Anguilla), 142},
    {sipName_Antarctica, static_cast<int>( ::QLocale::Antarctica), 142},
    {sipName_AntiguaAndBarbuda, static_cast<int>( ::QLocale::AntiguaAndBarbuda), 142},
    {sipName_AnyCountry, static_cast<int>( ::QLocale::AnyCountry), 142},
    {sipName_AnyLanguage, static_cast<int>( ::QLocale::AnyLanguage), 148},
    {sipName_AnyScript, static_cast<int>( ::QLocale::AnyScript), 153},
    {sipName_Arabic, static_cast<int>( ::QLocale::Arabic), 148},
    {sipName_ArabicScript, static_cast<int>( ::QLocale::ArabicScript), 153},
    {sipName_Aragonese, static_cast<int>( ::QLocale::Aragonese), 148},
    {sipName_Aramaic, static_cast<int>( ::QLocale::Aramaic), 148},
    {sipName_ArdhamagadhiPrakrit, static_cast<int>( ::QLocale::ArdhamagadhiPrakrit), 148},
    {sipName_Argentina, static_cast<int>( ::QLocale::Argentina), 142},
    {sipName_Armenia, static_cast<int>( ::QLocale::Armenia), 142},
    {sipName_Armenian, static_cast<int>( ::QLocale::Armenian), 148},
    {sipName_ArmenianScript, static_cast<int>( ::QLocale::ArmenianScript), 153},
    {sipName_Aruba, static_cast<int>( ::QLocale::Aruba), 142},
    {sipName_AscensionIsland, static_cast<int>( ::QLocale::AscensionIsland), 142},
    {sipName_Assamese, static_cast<int>( ::QLocale::Assamese), 148},
    {sipName_Asturian, static_cast<int>( ::QLocale::Asturian), 148},
    {sipName_Asu, static_cast<int>( ::QLocale::Asu), 148},
    {sipName_Atsam, static_cast<int>( ::QLocale::Atsam), 148},
    {sipName_Australia, static_cast<int>( ::QLocale::Australia), 142},
    {sipName_Austria, static_cast<int>( ::QLocale::Austria), 142},
    {sipName_Avaric, static_cast<int>( ::QLocale::Avaric), 148},
    {sipName_Avestan, static_cast<int>( ::QLocale::Avestan), 148},
    {sipName_AvestanScript, static_cast<int>( ::QLocale::AvestanScript), 153},
    {sipName_Aymara, static_cast<int>( ::QLocale::Aymara), 148},
    {sipName_Azerbaijan, static_cast<int>( ::QLocale::Azerbaijan), 142},
    {sipName_Azerbaijani, static_cast<int>( ::QLocale::Azerbaijani), 148},
    {sipName_Bafia, static_cast<int>( ::QLocale::Bafia), 148},
    {sipName_Bahamas, static_cast<int>( ::QLocale::Bahamas), 142},
    {sipName_Bahrain, static_cast<int>( ::QLocale::Bahrain), 142},
    {sipName_Balinese, static_cast<int>( ::QLocale::Balinese), 148},
    {sipName_BalineseScript, static_cast<int>( ::QLocale::BalineseScript), 153},
    {sipName_Bambara, static_cast<int>( ::QLocale::Bambara), 148},
    {sipName_BamumScript, static_cast<int>( ::QLocale::BamumScript), 153},
    {sipName_Bamun, static_cast<int>( ::QLocale::Bamun), 148},
    {sipName_Bangladesh, static_cast<int>( ::QLocale::Bangladesh), 142},
    {sipName_Barbados, static_cast<int>( ::QLocale::Barbados), 142},
    {sipName_Basaa, static_cast<int>( ::QLocale::Basaa), 148},
    {sipName_Bashkir, static_cast<int>( ::QLocale::Bashkir), 148},
    {sipName_Basque, static_cast<int>( ::QLocale::Basque), 148},
    {sipName_Bassa, static_cast<int>( ::QLocale::Bassa), 148},
    {sipName_BassaVahScript, static_cast<int>( ::QLocale::BassaVahScript), 153},
    {sipName_BatakScript, static_cast<int>( ::QLocale::BatakScript), 153},
    {sipName_BatakToba, static_cast<int>( ::QLocale::BatakToba), 148},
    {sipName_Belarus, static_cast<int>( ::QLocale::Belarus), 142},
    {sipName_Belarusian, static_cast<int>( ::QLocale::Belarusian), 148},
    {sipName_Belgium, static_cast<int>( ::QLocale::Belgium), 142},
    {sipName_Belize, static_cast<int>( ::QLocale::Belize), 142},
    {sipName_Bemba, static_cast<int>( ::QLocale::Bemba), 148},
    {sipName_Bena, static_cast<int>( ::QLocale::Bena), 148},
    {sipName_Bengali, static_cast<int>( ::QLocale::Bengali), 148},
    {sipName_BengaliScript, static_cast<int>( ::QLocale::BengaliScript), 153},
    {sipName_Benin, static_cast<int>( ::QLocale::Benin), 142},
    {sipName_Bermuda, static_cast<int>( ::QLocale::Bermuda), 142},
    {sipName_BhaiksukiScript, static_cast<int>( ::QLocale::BhaiksukiScript), 153},
    {sipName_Bhojpuri, static_cast<int>( ::QLocale::Bhojpuri), 148},
    {sipName_Bhutan, static_cast<int>( ::QLocale::Bhutan), 142},
    {sipName_Bhutani, static_cast<int>( ::QLocale::Bhutani), 148},
    {sipName_Bihari, static_cast<int>( ::QLocale::Bihari), 148},
    {sipName_Bislama, static_cast<int>( ::QLocale::Bislama), 148},
    {sipName_Blin, static_cast<int>( ::QLocale::Blin), 148},
    {sipName_Bodo, static_cast<int>( ::QLocale::Bodo), 148},
    {sipName_Bolivia, static_cast<int>( ::QLocale::Bolivia), 142},
    {sipName_Bonaire, static_cast<int>( ::QLocale::Bonaire), 142},
    {sipName_BopomofoScript, static_cast<int>( ::QLocale::BopomofoScript), 153},
    {sipName_BosniaAndHerzegowina, static_cast<int>( ::QLocale::BosniaAndHerzegowina), 142},
    {sipName_Bosnian, static_cast<int>( ::QLocale::Bosnian), 148},
    {sipName_Botswana, static_cast<int>( ::QLocale::Botswana), 142},
    {sipName_BouvetIsland, static_cast<int>( ::QLocale::BouvetIsland), 142},
    {sipName_BrahmiScript, static_cast<int>( ::QLocale::BrahmiScript), 153},
    {sipName_BrailleScript, static_cast<int>( ::QLocale::BrailleScript), 153},
    {sipName_Brazil, static_cast<int>( ::QLocale::Brazil), 142},
    {sipName_Breton, static_cast<int>( ::QLocale::Breton), 148},
    {sipName_BritishIndianOceanTerritory, static_cast<int>( ::QLocale::BritishIndianOceanTerritory), 142},
    {sipName_BritishVirginIslands, static_cast<int>( ::QLocale::BritishVirginIslands), 142},
    {sipName_Brunei, static_cast<int>( ::QLocale::Brunei), 142},
    {sipName_Buginese, static_cast<int>( ::QLocale::Buginese), 148},
    {sipName_BugineseScript, static_cast<int>( ::QLocale::BugineseScript), 153},
    {sipName_Buhid, static_cast<int>( ::QLocale::Buhid), 148},
    {sipName_BuhidScript, static_cast<int>( ::QLocale::BuhidScript), 153},
    {sipName_Bulgaria, static_cast<int>( ::QLocale::Bulgaria), 142},
    {sipName_Bulgarian, static_cast<int>( ::QLocale::Bulgarian), 148},
    {sipName_BurkinaFaso, static_cast<int>( ::QLocale::BurkinaFaso), 142},
    {sipName_Burmese, static_cast<int>( ::QLocale::Burmese), 148},
    {sipName_Burundi, static_cast<int>( ::QLocale::Burundi), 142},
    {sipName_Byelorussian, static_cast<int>( ::QLocale::Byelorussian), 148},
    {sipName_C, static_cast<int>( ::QLocale::C), 148},
    {sipName_Cambodia, static_cast<int>( ::QLocale::Cambodia), 142},
    {sipName_Cambodian, static_cast<int>( ::QLocale::Cambodian), 148},
    {sipName_Cameroon, static_cast<int>( ::QLocale::Cameroon), 142},
    {sipName_Canada, static_cast<int>( ::QLocale::Canada), 142},
    {sipName_CanadianAboriginalScript, static_cast<int>( ::QLocale::CanadianAboriginalScript), 153},
    {sipName_CanaryIslands, static_cast<int>( ::QLocale::CanaryIslands), 142},
    {sipName_Cantonese, static_cast<int>( ::QLocale::Cantonese), 148},
    {sipName_CapeVerde, static_cast<int>( ::QLocale::CapeVerde), 142},
    {sipName_Carian, static_cast<int>( ::QLocale::Carian), 148},
    {sipName_CarianScript, static_cast<int>( ::QLocale::CarianScript), 153},
    {sipName_Catalan, static_cast<int>( ::QLocale::Catalan), 148},
    {sipName_CaucasianAlbanianScript, static_cast<int>( ::QLocale::CaucasianAlbanianScript), 153},
    {sipName_CaymanIslands, static_cast<int>( ::QLocale::CaymanIslands), 142},
    {sipName_CentralAfricanRepublic, static_cast<int>( ::QLocale::CentralAfricanRepublic), 142},
    {sipName_CentralKurdish, static_cast<int>( ::QLocale::CentralKurdish), 148},
    {sipName_CentralMoroccoTamazight, static_cast<int>( ::QLocale::CentralMoroccoTamazight), 148},
    {sipName_CeutaAndMelilla, static_cast<int>( ::QLocale::CeutaAndMelilla), 142},
    {sipName_Chad, static_cast<int>( ::QLocale::Chad), 142},
    {sipName_Chakma, static_cast<int>( ::QLocale::Chakma), 148},
    {sipName_ChakmaScript, static_cast<int>( ::QLocale::ChakmaScript), 153},
    {sipName_ChamScript, static_cast<int>( ::QLocale::ChamScript), 153},
    {sipName_Chamorro, static_cast<int>( ::QLocale::Chamorro), 148},
    {sipName_Chechen, static_cast<int>( ::QLocale::Chechen), 148},
    {sipName_Cherokee, static_cast<int>( ::QLocale::Cherokee), 148},
    {sipName_CherokeeScript, static_cast<int>( ::QLocale::CherokeeScript), 153},
    {sipName_Chewa, static_cast<int>( ::QLocale::Chewa), 148},
    {sipName_Chiga, static_cast<int>( ::QLocale::Chiga), 148},
    {sipName_Chile, static_cast<int>( ::QLocale::Chile), 142},
    {sipName_China, static_cast<int>( ::QLocale::China), 142},
    {sipName_Chinese, static_cast<int>( ::QLocale::Chinese), 148},
    {sipName_ChristmasIsland, static_cast<int>( ::QLocale::ChristmasIsland), 142},
    {sipName_Church, static_cast<int>( ::QLocale::Church), 148},
    {sipName_Chuvash, static_cast<int>( ::QLocale::Chuvash), 148},
    {sipName_ClassicalMandaic, static_cast<int>( ::QLocale::ClassicalMandaic), 148},
    {sipName_ClippertonIsland, static_cast<int>( ::QLocale::ClippertonIsland), 142},
    {sipName_CocosIslands, static_cast<int>( ::QLocale::CocosIslands), 142},
    {sipName_Colognian, static_cast<int>( ::QLocale::Colognian), 148},
    {sipName_Colombia, static_cast<int>( ::QLocale::Colombia), 142},
    {sipName_Comoros, static_cast<int>( ::QLocale::Comoros), 142},
    {sipName_CongoBrazzaville, static_cast<int>( ::QLocale::CongoBrazzaville), 142},
    {sipName_CongoKinshasa, static_cast<int>( ::QLocale::CongoKinshasa), 142},
    {sipName_CongoSwahili, static_cast<int>( ::QLocale::CongoSwahili), 148},
    {sipName_CookIslands, static_cast<int>( ::QLocale::CookIslands), 142},
    {sipName_Coptic, static_cast<int>( ::QLocale::Coptic), 148},
    {sipName_CopticScript, static_cast<int>( ::QLocale::CopticScript), 153},
    {sipName_Cornish, static_cast<int>( ::QLocale::Cornish), 148},
    {sipName_Corsican, static_cast<int>( ::QLocale::Corsican), 148},
    {sipName_CostaRica, static_cast<int>( ::QLocale::CostaRica), 142},
    {sipName_Cree, static_cast<int>( ::QLocale::Cree), 148},
    {sipName_Croatia, static_cast<int>( ::QLocale::Croatia), 142},
    {sipName_Croatian, static_cast<int>( ::QLocale::Croatian), 148},
    {sipName_Cuba, static_cast<int>( ::QLocale::Cuba), 142},
    {sipName_CuneiformScript, static_cast<int>( ::QLocale::CuneiformScript), 153},
    {sipName_CuraSao, static_cast<int>( ::QLocale::CuraSao), 142},
    {sipName_CurrencyDisplayName, static_cast<int>( ::QLocale::CurrencyDisplayName), 143},
    {sipName_CurrencyIsoCode, static_cast<int>( ::QLocale::CurrencyIsoCode), 143},
    {sipName_CurrencySymbol, static_cast<int>( ::QLocale::CurrencySymbol), 143},
    {sipName_CypriotScript, static_cast<int>( ::QLocale::CypriotScript), 153},
    {sipName_Cyprus, static_cast<int>( ::QLocale::Cyprus), 142},
    {sipName_CyrillicScript, static_cast<int>( ::QLocale::CyrillicScript), 153},
    {sipName_Czech, static_cast<int>( ::QLocale::Czech), 148},
    {sipName_CzechRepublic, static_cast<int>( ::QLocale::CzechRepublic), 142},
    {sipName_Danish, static_cast<int>( ::QLocale::Danish), 148},
    {sipName_DataSizeIecFormat, static_cast<int>( ::QLocale::DataSizeIecFormat), 144},
    {sipName_DataSizeSIFormat, static_cast<int>( ::QLocale::DataSizeSIFormat), 144},
    {sipName_DataSizeTraditionalFormat, static_cast<int>( ::QLocale::DataSizeTraditionalFormat), 144},
    {sipName_DefaultNumberOptions, static_cast<int>( ::QLocale::DefaultNumberOptions), 150},
    {sipName_DemocraticRepublicOfCongo, static_cast<int>( ::QLocale::DemocraticRepublicOfCongo), 142},
    {sipName_DemocraticRepublicOfKorea, static_cast<int>( ::QLocale::DemocraticRepublicOfKorea), 142},
    {sipName_Denmark, static_cast<int>( ::QLocale::Denmark), 142},
    {sipName_DeseretScript, static_cast<int>( ::QLocale::DeseretScript), 153},
    {sipName_DevanagariScript, static_cast<int>( ::QLocale::DevanagariScript), 153},
    {sipName_DiegoGarcia, static_cast<int>( ::QLocale::DiegoGarcia), 142},
    {sipName_Divehi, static_cast<int>( ::QLocale::Divehi), 148},
    {sipName_Djibouti, static_cast<int>( ::QLocale::Djibouti), 142},
    {sipName_Dogri, static_cast<int>( ::QLocale::Dogri), 148},
    {sipName_Dominica, static_cast<int>( ::QLocale::Dominica), 142},
    {sipName_DominicanRepublic, static_cast<int>( ::QLocale::DominicanRepublic), 142},
    {sipName_Duala, static_cast<int>( ::QLocale::Duala), 148},
    {sipName_DuployanScript, static_cast<int>( ::QLocale::DuployanScript), 153},
    {sipName_Dutch, static_cast<int>( ::QLocale::Dutch), 148},
    {sipName_Dzongkha, static_cast<int>( ::QLocale::Dzongkha), 148},
    {sipName_EastTimor, static_cast<int>( ::QLocale::EastTimor), 142},
    {sipName_EasternCham, static_cast<int>( ::QLocale::EasternCham), 148},
    {sipName_EasternKayah, static_cast<int>( ::QLocale::EasternKayah), 148},
    {sipName_Ecuador, static_cast<int>( ::QLocale::Ecuador), 142},
    {sipName_Egypt, static_cast<int>( ::QLocale::Egypt), 142},
    {sipName_EgyptianHieroglyphsScript, static_cast<int>( ::QLocale::EgyptianHieroglyphsScript), 153},
    {sipName_ElSalvador, static_cast<int>( ::QLocale::ElSalvador), 142},
    {sipName_ElbasanScript, static_cast<int>( ::QLocale::ElbasanScript), 153},
    {sipName_Embu, static_cast<int>( ::QLocale::Embu), 148},
    {sipName_English, static_cast<int>( ::QLocale::English), 148},
    {sipName_EquatorialGuinea, static_cast<int>( ::QLocale::EquatorialGuinea), 142},
    {sipName_Eritrea, static_cast<int>( ::QLocale::Eritrea), 142},
    {sipName_Esperanto, static_cast<int>( ::QLocale::Esperanto), 148},
    {sipName_Estonia, static_cast<int>( ::QLocale::Estonia), 142},
    {sipName_Estonian, static_cast<int>( ::QLocale::Estonian), 148},
    {sipName_Ethiopia, static_cast<int>( ::QLocale::Ethiopia), 142},
    {sipName_EthiopicScript, static_cast<int>( ::QLocale::EthiopicScript), 153},
    {sipName_Etruscan, static_cast<int>( ::QLocale::Etruscan), 148},
    {sipName_Europe, static_cast<int>( ::QLocale::Europe), 142},
    {sipName_EuropeanUnion, static_cast<int>( ::QLocale::EuropeanUnion), 142},
    {sipName_Ewe, static_cast<int>( ::QLocale::Ewe), 148},
    {sipName_Ewondo, static_cast<int>( ::QLocale::Ewondo), 148},
    {sipName_FalklandIslands, static_cast<int>( ::QLocale::FalklandIslands), 142},
    {sipName_FaroeIslands, static_cast<int>( ::QLocale::FaroeIslands), 142},
    {sipName_Faroese, static_cast<int>( ::QLocale::Faroese), 148},
    {sipName_Fiji, static_cast<int>( ::QLocale::Fiji), 142},
    {sipName_Fijian, static_cast<int>( ::QLocale::Fijian), 148},
    {sipName_Filipino, static_cast<int>( ::QLocale::Filipino), 148},
    {sipName_Finland, static_cast<int>( ::QLocale::Finland), 142},
    {sipName_Finnish, static_cast<int>( ::QLocale::Finnish), 148},
    {sipName_FloatingPointShortest, static_cast<int>( ::QLocale::FloatingPointShortest), 146},
    {sipName_France, static_cast<int>( ::QLocale::France), 142},
    {sipName_FraserScript, static_cast<int>( ::QLocale::FraserScript), 153},
    {sipName_French, static_cast<int>( ::QLocale::French), 148},
    {sipName_FrenchGuiana, static_cast<int>( ::QLocale::FrenchGuiana), 142},
    {sipName_FrenchPolynesia, static_cast<int>( ::QLocale::FrenchPolynesia), 142},
    {sipName_FrenchSouthernTerritories, static_cast<int>( ::QLocale::FrenchSouthernTerritories), 142},
    {sipName_Frisian, static_cast<int>( ::QLocale::Frisian), 148},
    {sipName_Friulian, static_cast<int>( ::QLocale::Friulian), 148},
    {sipName_Fulah, static_cast<int>( ::QLocale::Fulah), 148},
    {sipName_Ga, static_cast<int>( ::QLocale::Ga), 148},
    {sipName_Gabon, static_cast<int>( ::QLocale::Gabon), 142},
    {sipName_Gaelic, static_cast<int>( ::QLocale::Gaelic), 148},
    {sipName_Galician, static_cast<int>( ::QLocale::Galician), 148},
    {sipName_Gambia, static_cast<int>( ::QLocale::Gambia), 142},
    {sipName_Ganda, static_cast<int>( ::QLocale::Ganda), 148},
    {sipName_Geez, static_cast<int>( ::QLocale::Geez), 148},
    {sipName_Georgia, static_cast<int>( ::QLocale::Georgia), 142},
    {sipName_Georgian, static_cast<int>( ::QLocale::Georgian), 148},
    {sipName_GeorgianScript, static_cast<int>( ::QLocale::GeorgianScript), 153},
    {sipName_German, static_cast<int>( ::QLocale::German), 148},
    {sipName_Germany, static_cast<int>( ::QLocale::Germany), 142},
    {sipName_Ghana, static_cast<int>( ::QLocale::Ghana), 142},
    {sipName_Gibraltar, static_cast<int>( ::QLocale::Gibraltar), 142},
    {sipName_GlagoliticScript, static_cast<int>( ::QLocale::GlagoliticScript), 153},
    {sipName_Gothic, static_cast<int>( ::QLocale::Gothic), 148},
    {sipName_GothicScript, static_cast<int>( ::QLocale::GothicScript), 153},
    {sipName_GranthaScript, static_cast<int>( ::QLocale::GranthaScript), 153},
    {sipName_Greece, static_cast<int>( ::QLocale::Greece), 142},
    {sipName_Greek, static_cast<int>( ::QLocale::Greek), 148},
    {sipName_GreekScript, static_cast<int>( ::QLocale::GreekScript), 153},
    {sipName_Greenland, static_cast<int>( ::QLocale::Greenland), 142},
    {sipName_Greenlandic, static_cast<int>( ::QLocale::Greenlandic), 148},
    {sipName_Grenada, static_cast<int>( ::QLocale::Grenada), 142},
    {sipName_Guadeloupe, static_cast<int>( ::QLocale::Guadeloupe), 142},
    {sipName_Guam, static_cast<int>( ::QLocale::Guam), 142},
    {sipName_Guarani, static_cast<int>( ::QLocale::Guarani), 148},
    {sipName_Guatemala, static_cast<int>( ::QLocale::Guatemala), 142},
    {sipName_Guernsey, static_cast<int>( ::QLocale::Guernsey), 142},
    {sipName_Guinea, static_cast<int>( ::QLocale::Guinea), 142},
    {sipName_GuineaBissau, static_cast<int>( ::QLocale::GuineaBissau), 142},
    {sipName_Gujarati, static_cast<int>( ::QLocale::Gujarati), 148},
    {sipName_GujaratiScript, static_cast<int>( ::QLocale::GujaratiScript), 153},
    {sipName_GurmukhiScript, static_cast<int>( ::QLocale::GurmukhiScript), 153},
    {sipName_Gusii, static_cast<int>( ::QLocale::Gusii), 148},
    {sipName_Guyana, static_cast<int>( ::QLocale::Guyana), 142},
    {sipName_Haiti, static_cast<int>( ::QLocale::Haiti), 142},
    {sipName_Haitian, static_cast<int>( ::QLocale::Haitian), 148},
    {sipName_HanScript, static_cast<int>( ::QLocale::HanScript), 153},
    {sipName_HanWithBopomofoScript, static_cast<int>( ::QLocale::HanWithBopomofoScript), 153},
    {sipName_HangulScript, static_cast<int>( ::QLocale::HangulScript), 153},
    {sipName_Hanunoo, static_cast<int>( ::QLocale::Hanunoo), 148},
    {sipName_HanunooScript, static_cast<int>( ::QLocale::HanunooScript), 153},
    {sipName_HatranScript, static_cast<int>( ::QLocale::HatranScript), 153},
    {sipName_Hausa, static_cast<int>( ::QLocale::Hausa), 148},
    {sipName_Hawaiian, static_cast<int>( ::QLocale::Hawaiian), 148},
    {sipName_HeardAndMcDonaldIslands, static_cast<int>( ::QLocale::HeardAndMcDonaldIslands), 142},
    {sipName_Hebrew, static_cast<int>( ::QLocale::Hebrew), 148},
    {sipName_HebrewScript, static_cast<int>( ::QLocale::HebrewScript), 153},
    {sipName_Herero, static_cast<int>( ::QLocale::Herero), 148},
    {sipName_HieroglyphicLuwian, static_cast<int>( ::QLocale::HieroglyphicLuwian), 148},
    {sipName_Hindi, static_cast<int>( ::QLocale::Hindi), 148},
    {sipName_HiraganaScript, static_cast<int>( ::QLocale::HiraganaScript), 153},
    {sipName_HiriMotu, static_cast<int>( ::QLocale::HiriMotu), 148},
    {sipName_HmongNjua, static_cast<int>( ::QLocale::HmongNjua), 148},
    {sipName_Ho, static_cast<int>( ::QLocale::Ho), 148},
    {sipName_Honduras, static_cast<int>( ::QLocale::Honduras), 142},
    {sipName_HongKong, static_cast<int>( ::QLocale::HongKong), 142},
    {sipName_Hungarian, static_cast<int>( ::QLocale::Hungarian), 148},
    {sipName_Hungary, static_cast<int>( ::QLocale::Hungary), 142},
    {sipName_Iceland, static_cast<int>( ::QLocale::Iceland), 142},
    {sipName_Icelandic, static_cast<int>( ::QLocale::Icelandic), 148},
    {sipName_Igbo, static_cast<int>( ::QLocale::Igbo), 148},
    {sipName_ImperialAramaicScript, static_cast<int>( ::QLocale::ImperialAramaicScript), 153},
    {sipName_ImperialSystem, static_cast<int>( ::QLocale::ImperialSystem), 149},
    {sipName_ImperialUKSystem, static_cast<int>( ::QLocale::ImperialUKSystem), 149},
    {sipName_ImperialUSSystem, static_cast<int>( ::QLocale::ImperialUSSystem), 149},
    {sipName_InariSami, static_cast<int>( ::QLocale::InariSami), 148},
    {sipName_IncludeTrailingZeroesAfterDot, static_cast<int>( ::QLocale::IncludeTrailingZeroesAfterDot), 150},
    {sipName_India, static_cast<int>( ::QLocale::India), 142},
    {sipName_Indonesia, static_cast<int>( ::QLocale::Indonesia), 142},
    {sipName_Indonesian, static_cast<int>( ::QLocale::Indonesian), 148},
    {sipName_Ingush, static_cast<int>( ::QLocale::Ingush), 148},
    {sipName_InscriptionalPahlaviScript, static_cast<int>( ::QLocale::InscriptionalPahlaviScript), 153},
    {sipName_InscriptionalParthianScript, static_cast<int>( ::QLocale::InscriptionalParthianScript), 153},
    {sipName_Interlingua, static_cast<int>( ::QLocale::Interlingua), 148},
    {sipName_Interlingue, static_cast<int>( ::QLocale::Interlingue), 148},
    {sipName_Inuktitut, static_cast<int>( ::QLocale::Inuktitut), 148},
    {sipName_Inupiak, static_cast<int>( ::QLocale::Inupiak), 148},
    {sipName_Iran, static_cast<int>( ::QLocale::Iran), 142},
    {sipName_Iraq, static_cast<int>( ::QLocale::Iraq), 142},
    {sipName_Ireland, static_cast<int>( ::QLocale::Ireland), 142},
    {sipName_Irish, static_cast<int>( ::QLocale::Irish), 148},
    {sipName_IsleOfMan, static_cast<int>( ::QLocale::IsleOfMan), 142},
    {sipName_Israel, static_cast<int>( ::QLocale::Israel), 142},
    {sipName_Italian, static_cast<int>( ::QLocale::Italian), 148},
    {sipName_Italy, static_cast<int>( ::QLocale::Italy), 142},
    {sipName_IvoryCoast, static_cast<int>( ::QLocale::IvoryCoast), 142},
    {sipName_Jamaica, static_cast<int>( ::QLocale::Jamaica), 142},
    {sipName_JamoScript, static_cast<int>( ::QLocale::JamoScript), 153},
    {sipName_Japan, static_cast<int>( ::QLocale::Japan), 142},
    {sipName_Japanese, static_cast<int>( ::QLocale::Japanese), 148},
    {sipName_JapaneseScript, static_cast<int>( ::QLocale::JapaneseScript), 153},
    {sipName_Javanese, static_cast<int>( ::QLocale::Javanese), 148},
    {sipName_JavaneseScript, static_cast<int>( ::QLocale::JavaneseScript), 153},
    {sipName_Jersey, static_cast<int>( ::QLocale::Jersey), 142},
    {sipName_Jju, static_cast<int>( ::QLocale::Jju), 148},
    {sipName_JolaFonyi, static_cast<int>( ::QLocale::JolaFonyi), 148},
    {sipName_Jordan, static_cast<int>( ::QLocale::Jordan), 142},
    {sipName_Kabuverdianu, static_cast<int>( ::QLocale::Kabuverdianu), 148},
    {sipName_Kabyle, static_cast<int>( ::QLocale::Kabyle), 148},
    {sipName_KaithiScript, static_cast<int>( ::QLocale::KaithiScript), 153},
    {sipName_Kako, static_cast<int>( ::QLocale::Kako), 148},
    {sipName_Kalenjin, static_cast<int>( ::QLocale::Kalenjin), 148},
    {sipName_Kamba, static_cast<int>( ::QLocale::Kamba), 148},
    {sipName_Kannada, static_cast<int>( ::QLocale::Kannada), 148},
    {sipName_KannadaScript, static_cast<int>( ::QLocale::KannadaScript), 153},
    {sipName_Kanuri, static_cast<int>( ::QLocale::Kanuri), 148},
    {sipName_Kashmiri, static_cast<int>( ::QLocale::Kashmiri), 148},
    {sipName_KatakanaScript, static_cast<int>( ::QLocale::KatakanaScript), 153},
    {sipName_KayahLiScript, static_cast<int>( ::QLocale::KayahLiScript), 153},
    {sipName_Kazakh, static_cast<int>( ::QLocale::Kazakh), 148},
    {sipName_Kazakhstan, static_cast<int>( ::QLocale::Kazakhstan), 142},
    {sipName_Kenya, static_cast<int>( ::QLocale::Kenya), 142},
    {sipName_Kenyang, static_cast<int>( ::QLocale::Kenyang), 148},
    {sipName_KharoshthiScript, static_cast<int>( ::QLocale::KharoshthiScript), 153},
    {sipName_Khmer, static_cast<int>( ::QLocale::Khmer), 148},
    {sipName_KhmerScript, static_cast<int>( ::QLocale::KhmerScript), 153},
    {sipName_KhojkiScript, static_cast<int>( ::QLocale::KhojkiScript), 153},
    {sipName_KhudawadiScript, static_cast<int>( ::QLocale::KhudawadiScript), 153},
    {sipName_Kiche, static_cast<int>( ::QLocale::Kiche), 148},
    {sipName_Kikuyu, static_cast<int>( ::QLocale::Kikuyu), 148},
    {sipName_Kinyarwanda, static_cast<int>( ::QLocale::Kinyarwanda), 148},
    {sipName_Kirghiz, static_cast<int>( ::QLocale::Kirghiz), 148},
    {sipName_Kiribati, static_cast<int>( ::QLocale::Kiribati), 142},
    {sipName_Komi, static_cast<int>( ::QLocale::Komi), 148},
    {sipName_Kongo, static_cast<int>( ::QLocale::Kongo), 148},
    {sipName_Konkani, static_cast<int>( ::QLocale::Konkani), 148},
    {sipName_Korean, static_cast<int>( ::QLocale::Korean), 148},
    {sipName_KoreanScript, static_cast<int>( ::QLocale::KoreanScript), 153},
    {sipName_Koro, static_cast<int>( ::QLocale::Koro), 148},
    {sipName_Kosovo, static_cast<int>( ::QLocale::Kosovo), 142},
    {sipName_KoyraChiini, static_cast<int>( ::QLocale::KoyraChiini), 148},
    {sipName_KoyraboroSenni, static_cast<int>( ::QLocale::KoyraboroSenni), 148},
    {sipName_Kpelle, static_cast<int>( ::QLocale::Kpelle), 148},
    {sipName_Kurdish, static_cast<int>( ::QLocale::Kurdish), 148},
    {sipName_Kurundi, static_cast<int>( ::QLocale::Kurundi), 148},
    {sipName_Kuwait, static_cast<int>( ::QLocale::Kuwait), 142},
    {sipName_Kwanyama, static_cast<int>( ::QLocale::Kwanyama), 148},
    {sipName_Kwasio, static_cast<int>( ::QLocale::Kwasio), 148},
    {sipName_Kyrgyzstan, static_cast<int>( ::QLocale::Kyrgyzstan), 142},
    {sipName_Lakota, static_cast<int>( ::QLocale::Lakota), 148},
    {sipName_Langi, static_cast<int>( ::QLocale::Langi), 148},
    {sipName_LannaScript, static_cast<int>( ::QLocale::LannaScript), 153},
    {sipName_Lao, static_cast<int>( ::QLocale::Lao), 148},
    {sipName_LaoScript, static_cast<int>( ::QLocale::LaoScript), 153},
    {sipName_Laos, static_cast<int>( ::QLocale::Laos), 142},
    {sipName_LargeFloweryMiao, static_cast<int>( ::QLocale::LargeFloweryMiao), 148},
    {sipName_LastCountry, static_cast<int>( ::QLocale::LastCountry), 142},
    {sipName_LastLanguage, static_cast<int>( ::QLocale::LastLanguage), 148},
    {sipName_Latin, static_cast<int>( ::QLocale::Latin), 148},
    {sipName_LatinAmerica, static_cast<int>( ::QLocale::LatinAmerica), 142},
    {sipName_LatinAmericaAndTheCaribbean, static_cast<int>( ::QLocale::LatinAmericaAndTheCaribbean), 142},
    {sipName_LatinScript, static_cast<int>( ::QLocale::LatinScript), 153},
    {sipName_Latvia, static_cast<int>( ::QLocale::Latvia), 142},
    {sipName_Latvian, static_cast<int>( ::QLocale::Latvian), 148},
    {sipName_Lebanon, static_cast<int>( ::QLocale::Lebanon), 142},
    {sipName_Lepcha, static_cast<int>( ::QLocale::Lepcha), 148},
    {sipName_LepchaScript, static_cast<int>( ::QLocale::LepchaScript), 153},
    {sipName_Lesotho, static_cast<int>( ::QLocale::Lesotho), 142},
    {sipName_Lezghian, static_cast<int>( ::QLocale::Lezghian), 148},
    {sipName_Liberia, static_cast<int>( ::QLocale::Liberia), 142},
    {sipName_Libya, static_cast<int>( ::QLocale::Libya), 142},
    {sipName_Liechtenstein, static_cast<int>( ::QLocale::Liechtenstein), 142},
    {sipName_Limbu, static_cast<int>( ::QLocale::Limbu), 148},
    {sipName_LimbuScript, static_cast<int>( ::QLocale::LimbuScript), 153},
    {sipName_Limburgish, static_cast<int>( ::QLocale::Limburgish), 148},
    {sipName_LinearA, static_cast<int>( ::QLocale::LinearA), 148},
    {sipName_LinearAScript, static_cast<int>( ::QLocale::LinearAScript), 153},
    {sipName_LinearBScript, static_cast<int>( ::QLocale::LinearBScript), 153},
    {sipName_Lingala, static_cast<int>( ::QLocale::Lingala), 148},
    {sipName_Lisu, static_cast<int>( ::QLocale::Lisu), 148},
    {sipName_LiteraryChinese, static_cast<int>( ::QLocale::LiteraryChinese), 148},
    {sipName_Lithuania, static_cast<int>( ::QLocale::Lithuania), 142},
    {sipName_Lithuanian, static_cast<int>( ::QLocale::Lithuanian), 148},
    {sipName_LongFormat, static_cast<int>( ::QLocale::LongFormat), 147},
    {sipName_LowGerman, static_cast<int>( ::QLocale::LowGerman), 148},
    {sipName_LowerSorbian, static_cast<int>( ::QLocale::LowerSorbian), 148},
    {sipName_Lu, static_cast<int>( ::QLocale::Lu), 148},
    {sipName_LubaKatanga, static_cast<int>( ::QLocale::LubaKatanga), 148},
    {sipName_LuleSami, static_cast<int>( ::QLocale::LuleSami), 148},
    {sipName_Luo, static_cast<int>( ::QLocale::Luo), 148},
    {sipName_Luxembourg, static_cast<int>( ::QLocale::Luxembourg), 142},
    {sipName_Luxembourgish, static_cast<int>( ::QLocale::Luxembourgish), 148},
    {sipName_Luyia, static_cast<int>( ::QLocale::Luyia), 148},
    {sipName_Lycian, static_cast<int>( ::QLocale::Lycian), 148},
    {sipName_LycianScript, static_cast<int>( ::QLocale::LycianScript), 153},
    {sipName_Lydian, static_cast<int>( ::QLocale::Lydian), 148},
    {sipName_LydianScript, static_cast<int>( ::QLocale::LydianScript), 153},
    {sipName_Macau, static_cast<int>( ::QLocale::Macau), 142},
    {sipName_Macedonia, static_cast<int>( ::QLocale::Macedonia), 142},
    {sipName_Macedonian, static_cast<int>( ::QLocale::Macedonian), 148},
    {sipName_Machame, static_cast<int>( ::QLocale::Machame), 148},
    {sipName_Madagascar, static_cast<int>( ::QLocale::Madagascar), 142},
    {sipName_MahajaniScript, static_cast<int>( ::QLocale::MahajaniScript), 153},
    {sipName_Maithili, static_cast<int>( ::QLocale::Maithili), 148},
    {sipName_MakhuwaMeetto, static_cast<int>( ::QLocale::MakhuwaMeetto), 148},
    {sipName_Makonde, static_cast<int>( ::QLocale::Makonde), 148},
    {sipName_Malagasy, static_cast<int>( ::QLocale::Malagasy), 148},
    {sipName_Malawi, static_cast<int>( ::QLocale::Malawi), 142},
    {sipName_Malay, static_cast<int>( ::QLocale::Malay), 148},
    {sipName_Malayalam, static_cast<int>( ::QLocale::Malayalam), 148},
    {sipName_MalayalamScript, static_cast<int>( ::QLocale::MalayalamScript), 153},
    {sipName_Malaysia, static_cast<int>( ::QLocale::Malaysia), 142},
    {sipName_Maldives, static_cast<int>( ::QLocale::Maldives), 142},
    {sipName_Mali, static_cast<int>( ::QLocale::Mali), 142},
    {sipName_Malta, static_cast<int>( ::QLocale::Malta), 142},
    {sipName_Maltese, static_cast<int>( ::QLocale::Maltese), 148},
    {sipName_MandaeanScript, static_cast<int>( ::QLocale::MandaeanScript), 153},
    {sipName_Mandingo, static_cast<int>( ::QLocale::Mandingo), 148},
    {sipName_ManichaeanMiddlePersian, static_cast<int>( ::QLocale::ManichaeanMiddlePersian), 148},
    {sipName_ManichaeanScript, static_cast<int>( ::QLocale::ManichaeanScript), 153},
    {sipName_Manipuri, static_cast<int>( ::QLocale::Manipuri), 148},
    {sipName_Manx, static_cast<int>( ::QLocale::Manx), 148},
    {sipName_Maori, static_cast<int>( ::QLocale::Maori), 148},
    {sipName_Mapuche, static_cast<int>( ::QLocale::Mapuche), 148},
    {sipName_Marathi, static_cast<int>( ::QLocale::Marathi), 148},
    {sipName_MarchenScript, static_cast<int>( ::QLocale::MarchenScript), 153},
    {sipName_MarshallIslands, static_cast<int>( ::QLocale::MarshallIslands), 142},
    {sipName_Marshallese, static_cast<int>( ::QLocale::Marshallese), 148},
    {sipName_Martinique, static_cast<int>( ::QLocale::Martinique), 142},
    {sipName_Masai, static_cast<int>( ::QLocale::Masai), 148},
    {sipName_Mauritania, static_cast<int>( ::QLocale::Mauritania), 142},
    {sipName_Mauritius, static_cast<int>( ::QLocale::Mauritius), 142},
    {sipName_Mayotte, static_cast<int>( ::QLocale::Mayotte), 142},
    {sipName_Mazanderani, static_cast<int>( ::QLocale::Mazanderani), 148},
    {sipName_MeiteiMayekScript, static_cast<int>( ::QLocale::MeiteiMayekScript), 153},
    {sipName_Mende, static_cast<int>( ::QLocale::Mende), 148},
    {sipName_MendeKikakuiScript, static_cast<int>( ::QLocale::MendeKikakuiScript), 153},
    {sipName_Meroitic, static_cast<int>( ::QLocale::Meroitic), 148},
    {sipName_MeroiticCursiveScript, static_cast<int>( ::QLocale::MeroiticCursiveScript), 153},
    {sipName_MeroiticScript, static_cast<int>( ::QLocale::MeroiticScript), 153},
    {sipName_Meru, static_cast<int>( ::QLocale::Meru), 148},
    {sipName_Meta, static_cast<int>( ::QLocale::Meta), 148},
    {sipName_MetricSystem, static_cast<int>( ::QLocale::MetricSystem), 149},
    {sipName_Mexico, static_cast<int>( ::QLocale::Mexico), 142},
    {sipName_Micronesia, static_cast<int>( ::QLocale::Micronesia), 142},
    {sipName_ModiScript, static_cast<int>( ::QLocale::ModiScript), 153},
    {sipName_Mohawk, static_cast<int>( ::QLocale::Mohawk), 148},
    {sipName_Moldavian, static_cast<int>( ::QLocale::Moldavian), 148},
    {sipName_Moldova, static_cast<int>( ::QLocale::Moldova), 142},
    {sipName_Monaco, static_cast<int>( ::QLocale::Monaco), 142},
    {sipName_Mongolia, static_cast<int>( ::QLocale::Mongolia), 142},
    {sipName_Mongolian, static_cast<int>( ::QLocale::Mongolian), 148},
    {sipName_MongolianScript, static_cast<int>( ::QLocale::MongolianScript), 153},
    {sipName_Mono, static_cast<int>( ::QLocale::Mono), 148},
    {sipName_Montenegro, static_cast<int>( ::QLocale::Montenegro), 142},
    {sipName_Montserrat, static_cast<int>( ::QLocale::Montserrat), 142},
    {sipName_Morisyen, static_cast<int>( ::QLocale::Morisyen), 148},
    {sipName_Morocco, static_cast<int>( ::QLocale::Morocco), 142},
    {sipName_Mozambique, static_cast<int>( ::QLocale::Mozambique), 142},
    {sipName_MroScript, static_cast<int>( ::QLocale::MroScript), 153},
    {sipName_Mru, static_cast<int>( ::QLocale::Mru), 148},
    {sipName_MultaniScript, static_cast<int>( ::QLocale::MultaniScript), 153},
    {sipName_Mundang, static_cast<int>( ::QLocale::Mundang), 148},
    {sipName_Myanmar, static_cast<int>( ::QLocale::Myanmar), 142},
    {sipName_MyanmarScript, static_cast<int>( ::QLocale::MyanmarScript), 153},
    {sipName_NabataeanScript, static_cast<int>( ::QLocale::NabataeanScript), 153},
    {sipName_Nama, static_cast<int>( ::QLocale::Nama), 148},
    {sipName_Namibia, static_cast<int>( ::QLocale::Namibia), 142},
    {sipName_NarrowFormat, static_cast<int>( ::QLocale::NarrowFormat), 147},
    {sipName_NauruCountry, static_cast<int>( ::QLocale::NauruCountry), 142},
    {sipName_NauruLanguage, static_cast<int>( ::QLocale::NauruLanguage), 148},
    {sipName_Navaho, static_cast<int>( ::QLocale::Navaho), 148},
    {sipName_Ndonga, static_cast<int>( ::QLocale::Ndonga), 148},
    {sipName_Nepal, static_cast<int>( ::QLocale::Nepal), 142},
    {sipName_Nepali, static_cast<int>( ::QLocale::Nepali), 148},
    {sipName_Netherlands, static_cast<int>( ::QLocale::Netherlands), 142},
    {sipName_NewCaledonia, static_cast<int>( ::QLocale::NewCaledonia), 142},
    {sipName_NewTaiLueScript, static_cast<int>( ::QLocale::NewTaiLueScript), 153},
    {sipName_NewZealand, static_cast<int>( ::QLocale::NewZealand), 142},
    {sipName_NewaScript, static_cast<int>( ::QLocale::NewaScript), 153},
    {sipName_Newari, static_cast<int>( ::QLocale::Newari), 148},
    {sipName_Ngiemboon, static_cast<int>( ::QLocale::Ngiemboon), 148},
    {sipName_Ngomba, static_cast<int>( ::QLocale::Ngomba), 148},
    {sipName_Nicaragua, static_cast<int>( ::QLocale::Nicaragua), 142},
    {sipName_Niger, static_cast<int>( ::QLocale::Niger), 142},
    {sipName_Nigeria, static_cast<int>( ::QLocale::Nigeria), 142},
    {sipName_Niue, static_cast<int>( ::QLocale::Niue), 142},
    {sipName_Nko, static_cast<int>( ::QLocale::Nko), 148},
    {sipName_NkoScript, static_cast<int>( ::QLocale::NkoScript), 153},
    {sipName_NorfolkIsland, static_cast<int>( ::QLocale::NorfolkIsland), 142},
    {sipName_NorthKorea, static_cast<int>( ::QLocale::NorthKorea), 142},
    {sipName_NorthNdebele, static_cast<int>( ::QLocale::NorthNdebele), 148},
    {sipName_NorthernLuri, static_cast<int>( ::QLocale::NorthernLuri), 148},
    {sipName_NorthernMarianaIslands, static_cast<int>( ::QLocale::NorthernMarianaIslands), 142},
    {sipName_NorthernSami, static_cast<int>( ::QLocale::NorthernSami), 148},
    {sipName_NorthernSotho, static_cast<int>( ::QLocale::NorthernSotho), 148},
    {sipName_NorthernThai, static_cast<int>( ::QLocale::NorthernThai), 148},
    {sipName_Norway, static_cast<int>( ::QLocale::Norway), 142},
    {sipName_Norwegian, static_cast<int>( ::QLocale::Norwegian), 148},
    {sipName_NorwegianBokmal, static_cast<int>( ::QLocale::NorwegianBokmal), 148},
    {sipName_NorwegianNynorsk, static_cast<int>( ::QLocale::NorwegianNynorsk), 148},
    {sipName_Nuer, static_cast<int>( ::QLocale::Nuer), 148},
    {sipName_Nyanja, static_cast<int>( ::QLocale::Nyanja), 148},
    {sipName_Nyankole, static_cast<int>( ::QLocale::Nyankole), 148},
    {sipName_Occitan, static_cast<int>( ::QLocale::Occitan), 148},
    {sipName_OghamScript, static_cast<int>( ::QLocale::OghamScript), 153},
    {sipName_Ojibwa, static_cast<int>( ::QLocale::Ojibwa), 148},
    {sipName_OlChikiScript, static_cast<int>( ::QLocale::OlChikiScript), 153},
    {sipName_OldHungarianScript, static_cast<int>( ::QLocale::OldHungarianScript), 153},
    {sipName_OldIrish, static_cast<int>( ::QLocale::OldIrish), 148},
    {sipName_OldItalicScript, static_cast<int>( ::QLocale::OldItalicScript), 153},
    {sipName_OldNorse, static_cast<int>( ::QLocale::OldNorse), 148},
    {sipName_OldNorthArabianScript, static_cast<int>( ::QLocale::OldNorthArabianScript), 153},
    {sipName_OldPermicScript, static_cast<int>( ::QLocale::OldPermicScript), 153},
    {sipName_OldPersian, static_cast<int>( ::QLocale::OldPersian), 148},
    {sipName_OldPersianScript, static_cast<int>( ::QLocale::OldPersianScript), 153},
    {sipName_OldSouthArabianScript, static_cast<int>( ::QLocale::OldSouthArabianScript), 153},
    {sipName_OldTurkish, static_cast<int>( ::QLocale::OldTurkish), 148},
    {sipName_Oman, static_cast<int>( ::QLocale::Oman), 142},
    {sipName_OmitGroupSeparator, static_cast<int>( ::QLocale::OmitGroupSeparator), 150},
    {sipName_OmitLeadingZeroInExponent, static_cast<int>( ::QLocale::OmitLeadingZeroInExponent), 150},
    {sipName_Oriya, static_cast<int>( ::QLocale::Oriya), 148},
    {sipName_OriyaScript, static_cast<int>( ::QLocale::OriyaScript), 153},
    {sipName_OrkhonScript, static_cast<int>( ::QLocale::OrkhonScript), 153},
    {sipName_Oromo, static_cast<int>( ::QLocale::Oromo), 148},
    {sipName_Osage, static_cast<int>( ::QLocale::Osage), 148},
    {sipName_OsageScript, static_cast<int>( ::QLocale::OsageScript), 153},
    {sipName_OsmanyaScript, static_cast<int>( ::QLocale::OsmanyaScript), 153},
    {sipName_Ossetic, static_cast<int>( ::QLocale::Ossetic), 148},
    {sipName_OutlyingOceania, static_cast<int>( ::QLocale::OutlyingOceania), 142},
    {sipName_PahawhHmongScript, static_cast<int>( ::QLocale::PahawhHmongScript), 153},
    {sipName_Pahlavi, static_cast<int>( ::QLocale::Pahlavi), 148},
    {sipName_Pakistan, static_cast<int>( ::QLocale::Pakistan), 142},
    {sipName_Palau, static_cast<int>( ::QLocale::Palau), 142},
    {sipName_Palauan, static_cast<int>( ::QLocale::Palauan), 148},
    {sipName_PalestinianTerritories, static_cast<int>( ::QLocale::PalestinianTerritories), 142},
    {sipName_Pali, static_cast<int>( ::QLocale::Pali), 148},
    {sipName_PalmyreneScript, static_cast<int>( ::QLocale::PalmyreneScript), 153},
    {sipName_Panama, static_cast<int>( ::QLocale::Panama), 142},
    {sipName_Papiamento, static_cast<int>( ::QLocale::Papiamento), 148},
    {sipName_PapuaNewGuinea, static_cast<int>( ::QLocale::PapuaNewGuinea), 142},
    {sipName_Paraguay, static_cast<int>( ::QLocale::Paraguay), 142},
    {sipName_Parthian, static_cast<int>( ::QLocale::Parthian), 148},
    {sipName_Pashto, static_cast<int>( ::QLocale::Pashto), 148},
    {sipName_PauCinHauScript, static_cast<int>( ::QLocale::PauCinHauScript), 153},
    {sipName_PeoplesRepublicOfCongo, static_cast<int>( ::QLocale::PeoplesRepublicOfCongo), 142},
    {sipName_Persian, static_cast<int>( ::QLocale::Persian), 148},
    {sipName_Peru, static_cast<int>( ::QLocale::Peru), 142},
    {sipName_PhagsPaScript, static_cast<int>( ::QLocale::PhagsPaScript), 153},
    {sipName_Philippines, static_cast<int>( ::QLocale::Philippines), 142},
    {sipName_Phoenician, static_cast<int>( ::QLocale::Phoenician), 148},
    {sipName_PhoenicianScript, static_cast<int>( ::QLocale::PhoenicianScript), 153},
    {sipName_Pitcairn, static_cast<int>( ::QLocale::Pitcairn), 142},
    {sipName_Poland, static_cast<int>( ::QLocale::Poland), 142},
    {sipName_Polish, static_cast<int>( ::QLocale::Polish), 148},
    {sipName_PollardPhoneticScript, static_cast<int>( ::QLocale::PollardPhoneticScript), 153},
    {sipName_Portugal, static_cast<int>( ::QLocale::Portugal), 142},
    {sipName_Portuguese, static_cast<int>( ::QLocale::Portuguese), 148},
    {sipName_PrakritLanguage, static_cast<int>( ::QLocale::PrakritLanguage), 148},
    {sipName_Prussian, static_cast<int>( ::QLocale::Prussian), 148},
    {sipName_PsalterPahlaviScript, static_cast<int>( ::QLocale::PsalterPahlaviScript), 153},
    {sipName_PuertoRico, static_cast<int>( ::QLocale::PuertoRico), 142},
    {sipName_Punjabi, static_cast<int>( ::QLocale::Punjabi), 148},
    {sipName_Qatar, static_cast<int>( ::QLocale::Qatar), 142},
    {sipName_Quechua, static_cast<int>( ::QLocale::Quechua), 148},
    {sipName_Rejang, static_cast<int>( ::QLocale::Rejang), 148},
    {sipName_RejangScript, static_cast<int>( ::QLocale::RejangScript), 153},
    {sipName_RejectGroupSeparator, static_cast<int>( ::QLocale::RejectGroupSeparator), 150},
    {sipName_RejectLeadingZeroInExponent, static_cast<int>( ::QLocale::RejectLeadingZeroInExponent), 150},
    {sipName_RejectTrailingZeroesAfterDot, static_cast<int>( ::QLocale::RejectTrailingZeroesAfterDot), 150},
    {sipName_RepublicOfKorea, static_cast<int>( ::QLocale::RepublicOfKorea), 142},
    {sipName_Reunion, static_cast<int>( ::QLocale::Reunion), 142},
    {sipName_RhaetoRomance, static_cast<int>( ::QLocale::RhaetoRomance), 148},
    {sipName_Romania, static_cast<int>( ::QLocale::Romania), 142},
    {sipName_Romanian, static_cast<int>( ::QLocale::Romanian), 148},
    {sipName_Romansh, static_cast<int>( ::QLocale::Romansh), 148},
    {sipName_Rombo, static_cast<int>( ::QLocale::Rombo), 148},
    {sipName_Rundi, static_cast<int>( ::QLocale::Rundi), 148},
    {sipName_RunicScript, static_cast<int>( ::QLocale::RunicScript), 153},
    {sipName_Russia, static_cast<int>( ::QLocale::Russia), 142},
    {sipName_Russian, static_cast<int>( ::QLocale::Russian), 148},
    {sipName_RussianFederation, static_cast<int>( ::QLocale::RussianFederation), 142},
    {sipName_Rwa, static_cast<int>( ::QLocale::Rwa), 148},
    {sipName_Rwanda, static_cast<int>( ::QLocale::Rwanda), 142},
    {sipName_Sabaean, static_cast<int>( ::QLocale::Sabaean), 148},
    {sipName_Saho, static_cast<int>( ::QLocale::Saho), 148},
    {sipName_SaintBarthelemy, static_cast<int>( ::QLocale::SaintBarthelemy), 142},
    {sipName_SaintHelena, static_cast<int>( ::QLocale::SaintHelena), 142},
    {sipName_SaintKittsAndNevis, static_cast<int>( ::QLocale::SaintKittsAndNevis), 142},
    {sipName_SaintLucia, static_cast<int>( ::QLocale::SaintLucia), 142},
    {sipName_SaintMartin, static_cast<int>( ::QLocale::SaintMartin), 142},
    {sipName_SaintPierreAndMiquelon, static_cast<int>( ::QLocale::SaintPierreAndMiquelon), 142},
    {sipName_SaintVincentAndTheGrenadines, static_cast<int>( ::QLocale::SaintVincentAndTheGrenadines), 142},
    {sipName_Sakha, static_cast<int>( ::QLocale::Sakha), 148},
    {sipName_Samaritan, static_cast<int>( ::QLocale::Samaritan), 148},
    {sipName_SamaritanScript, static_cast<int>( ::QLocale::SamaritanScript), 153},
    {sipName_Samburu, static_cast<int>( ::QLocale::Samburu), 148},
    {sipName_Samoa, static_cast<int>( ::QLocale::Samoa), 142},
    {sipName_Samoan, static_cast<int>( ::QLocale::Samoan), 148},
    {sipName_SanMarino, static_cast<int>( ::QLocale::SanMarino), 142},
    {sipName_Sango, static_cast<int>( ::QLocale::Sango), 148},
    {sipName_Sangu, static_cast<int>( ::QLocale::Sangu), 148},
    {sipName_Sanskrit, static_cast<int>( ::QLocale::Sanskrit), 148},
    {sipName_Santali, static_cast<int>( ::QLocale::Santali), 148},
    {sipName_SaoTomeAndPrincipe, static_cast<int>( ::QLocale::SaoTomeAndPrincipe), 142},
    {sipName_Saraiki, static_cast<int>( ::QLocale::Saraiki), 148},
    {sipName_Sardinian, static_cast<int>( ::QLocale::Sardinian), 148},
    {sipName_SaudiArabia, static_cast<int>( ::QLocale::SaudiArabia), 142},
    {sipName_Saurashtra, static_cast<int>( ::QLocale::Saurashtra), 148},
    {sipName_SaurashtraScript, static_cast<int>( ::QLocale::SaurashtraScript), 153},
    {sipName_Sena, static_cast<int>( ::QLocale::Sena), 148},
    {sipName_Senegal, static_cast<int>( ::QLocale::Senegal), 142},
    {sipName_Serbia, static_cast<int>( ::QLocale::Serbia), 142},
    {sipName_Serbian, static_cast<int>( ::QLocale::Serbian), 148},
    {sipName_SerboCroatian, static_cast<int>( ::QLocale::SerboCroatian), 148},
    {sipName_Seychelles, static_cast<int>( ::QLocale::Seychelles), 142},
    {sipName_Shambala, static_cast<int>( ::QLocale::Shambala), 148},
    {sipName_SharadaScript, static_cast<int>( ::QLocale::SharadaScript), 153},
    {sipName_ShavianScript, static_cast<int>( ::QLocale::ShavianScript), 153},
    {sipName_Shona, static_cast<int>( ::QLocale::Shona), 148},
    {sipName_ShortFormat, static_cast<int>( ::QLocale::ShortFormat), 147},
    {sipName_SichuanYi, static_cast<int>( ::QLocale::SichuanYi), 148},
    {sipName_Sidamo, static_cast<int>( ::QLocale::Sidamo), 148},
    {sipName_SiddhamScript, static_cast<int>( ::QLocale::SiddhamScript), 153},
    {sipName_SierraLeone, static_cast<int>( ::QLocale::SierraLeone), 142},
    {sipName_SignWritingScript, static_cast<int>( ::QLocale::SignWritingScript), 153},
    {sipName_SimplifiedChineseScript, static_cast<int>( ::QLocale::SimplifiedChineseScript), 153},
    {sipName_SimplifiedHanScript, static_cast<int>( ::QLocale::SimplifiedHanScript), 153},
    {sipName_Sindhi, static_cast<int>( ::QLocale::Sindhi), 148},
    {sipName_Singapore, static_cast<int>( ::QLocale::Singapore), 142},
    {sipName_Sinhala, static_cast<int>( ::QLocale::Sinhala), 148},
    {sipName_SinhalaScript, static_cast<int>( ::QLocale::SinhalaScript), 153},
    {sipName_SintMaarten, static_cast<int>( ::QLocale::SintMaarten), 142},
    {sipName_SkoltSami, static_cast<int>( ::QLocale::SkoltSami), 148},
    {sipName_Slovak, static_cast<int>( ::QLocale::Slovak), 148},
    {sipName_Slovakia, static_cast<int>( ::QLocale::Slovakia), 142},
    {sipName_Slovenia, static_cast<int>( ::QLocale::Slovenia), 142},
    {sipName_Slovenian, static_cast<int>( ::QLocale::Slovenian), 148},
    {sipName_Soga, static_cast<int>( ::QLocale::Soga), 148},
    {sipName_SolomonIslands, static_cast<int>( ::QLocale::SolomonIslands), 142},
    {sipName_Somali, static_cast<int>( ::QLocale::Somali), 148},
    {sipName_Somalia, static_cast<int>( ::QLocale::Somalia), 142},
    {sipName_Sora, static_cast<int>( ::QLocale::Sora), 148},
    {sipName_SoraSompengScript, static_cast<int>( ::QLocale::SoraSompengScript), 153},
    {sipName_SouthAfrica, static_cast<int>( ::QLocale::SouthAfrica), 142},
    {sipName_SouthGeorgiaAndTheSouthSandwichIslands, static_cast<int>( ::QLocale::SouthGeorgiaAndTheSouthSandwichIslands), 142},
    {sipName_SouthKorea, static_cast<int>( ::QLocale::SouthKorea), 142},
    {sipName_SouthNdebele, static_cast<int>( ::QLocale::SouthNdebele), 148},
    {sipName_SouthSudan, static_cast<int>( ::QLocale::SouthSudan), 142},
    {sipName_SouthernSami, static_cast<int>( ::QLocale::SouthernSami), 148},
    {sipName_SouthernSotho, static_cast<int>( ::QLocale::SouthernSotho), 148},
    {sipName_Spain, static_cast<int>( ::QLocale::Spain), 142},
    {sipName_Spanish, static_cast<int>( ::QLocale::Spanish), 148},
    {sipName_SriLanka, static_cast<int>( ::QLocale::SriLanka), 142},
    {sipName_StandardMoroccanTamazight, static_cast<int>( ::QLocale::StandardMoroccanTamazight), 148},
    {sipName_StandardQuotation, static_cast<int>( ::QLocale::StandardQuotation), 152},
    {sipName_Sudan, static_cast<int>( ::QLocale::Sudan), 142},
    {sipName_Sundanese, static_cast<int>( ::QLocale::Sundanese), 148},
    {sipName_SundaneseScript, static_cast<int>( ::QLocale::SundaneseScript), 153},
    {sipName_Suriname, static_cast<int>( ::QLocale::Suriname), 142},
    {sipName_SvalbardAndJanMayenIslands, static_cast<int>( ::QLocale::SvalbardAndJanMayenIslands), 142},
    {sipName_Swahili, static_cast<int>( ::QLocale::Swahili), 148},
    {sipName_Swati, static_cast<int>( ::QLocale::Swati), 148},
    {sipName_Swaziland, static_cast<int>( ::QLocale::Swaziland), 142},
    {sipName_Sweden, static_cast<int>( ::QLocale::Sweden), 142},
    {sipName_Swedish, static_cast<int>( ::QLocale::Swedish), 148},
    {sipName_SwissGerman, static_cast<int>( ::QLocale::SwissGerman), 148},
    {sipName_Switzerland, static_cast<int>( ::QLocale::Switzerland), 142},
    {sipName_Sylheti, static_cast<int>( ::QLocale::Sylheti), 148},
    {sipName_SylotiNagriScript, static_cast<int>( ::QLocale::SylotiNagriScript), 153},
    {sipName_Syria, static_cast<int>( ::QLocale::Syria), 142},
    {sipName_Syriac, static_cast<int>( ::QLocale::Syriac), 148},
    {sipName_SyriacScript, static_cast<int>( ::QLocale::SyriacScript), 153},
    {sipName_SyrianArabRepublic, static_cast<int>( ::QLocale::SyrianArabRepublic), 142},
    {sipName_Tachelhit, static_cast<int>( ::QLocale::Tachelhit), 148},
    {sipName_Tagalog, static_cast<int>( ::QLocale::Tagalog), 148},
    {sipName_TagalogScript, static_cast<int>( ::QLocale::TagalogScript), 153},
    {sipName_Tagbanwa, static_cast<int>( ::QLocale::Tagbanwa), 148},
    {sipName_TagbanwaScript, static_cast<int>( ::QLocale::TagbanwaScript), 153},
    {sipName_Tahitian, static_cast<int>( ::QLocale::Tahitian), 148},
    {sipName_TaiDam, static_cast<int>( ::QLocale::TaiDam), 148},
    {sipName_TaiLeScript, static_cast<int>( ::QLocale::TaiLeScript), 153},
    {sipName_TaiNua, static_cast<int>( ::QLocale::TaiNua), 148},
    {sipName_TaiVietScript, static_cast<int>( ::QLocale::TaiVietScript), 153},
    {sipName_Taita, static_cast<int>( ::QLocale::Taita), 148},
    {sipName_Taiwan, static_cast<int>( ::QLocale::Taiwan), 142},
    {sipName_Tajik, static_cast<int>( ::QLocale::Tajik), 148},
    {sipName_Tajikistan, static_cast<int>( ::QLocale::Tajikistan), 142},
    {sipName_TakriScript, static_cast<int>( ::QLocale::TakriScript), 153},
    {sipName_Tamil, static_cast<int>( ::QLocale::Tamil), 148},
    {sipName_TamilScript, static_cast<int>( ::QLocale::TamilScript), 153},
    {sipName_Tangut, static_cast<int>( ::QLocale::Tangut), 148},
    {sipName_TangutScript, static_cast<int>( ::QLocale::TangutScript), 153},
    {sipName_Tanzania, static_cast<int>( ::QLocale::Tanzania), 142},
    {sipName_Taroko, static_cast<int>( ::QLocale::Taroko), 148},
    {sipName_Tasawaq, static_cast<int>( ::QLocale::Tasawaq), 148},
    {sipName_Tatar, static_cast<int>( ::QLocale::Tatar), 148},
    {sipName_TedimChin, static_cast<int>( ::QLocale::TedimChin), 148},
    {sipName_Telugu, static_cast<int>( ::QLocale::Telugu), 148},
    {sipName_TeluguScript, static_cast<int>( ::QLocale::TeluguScript), 153},
    {sipName_Teso, static_cast<int>( ::QLocale::Teso), 148},
    {sipName_ThaanaScript, static_cast<int>( ::QLocale::ThaanaScript), 153},
    {sipName_Thai, static_cast<int>( ::QLocale::Thai), 148},
    {sipName_ThaiScript, static_cast<int>( ::QLocale::ThaiScript), 153},
    {sipName_Thailand, static_cast<int>( ::QLocale::Thailand), 142},
    {sipName_Tibetan, static_cast<int>( ::QLocale::Tibetan), 148},
    {sipName_TibetanScript, static_cast<int>( ::QLocale::TibetanScript), 153},
    {sipName_TifinaghScript, static_cast<int>( ::QLocale::TifinaghScript), 153},
    {sipName_Tigre, static_cast<int>( ::QLocale::Tigre), 148},
    {sipName_Tigrinya, static_cast<int>( ::QLocale::Tigrinya), 148},
    {sipName_TirhutaScript, static_cast<int>( ::QLocale::TirhutaScript), 153},
    {sipName_Togo, static_cast<int>( ::QLocale::Togo), 142},
    {sipName_TokPisin, static_cast<int>( ::QLocale::TokPisin), 148},
    {sipName_Tokelau, static_cast<int>( ::QLocale::Tokelau), 142},
    {sipName_TokelauCountry, static_cast<int>( ::QLocale::TokelauCountry), 142},
    {sipName_TokelauLanguage, static_cast<int>( ::QLocale::TokelauLanguage), 148},
    {sipName_Tonga, static_cast<int>( ::QLocale::Tonga), 142},
    {sipName_Tongan, static_cast<int>( ::QLocale::Tongan), 148},
    {sipName_TraditionalChineseScript, static_cast<int>( ::QLocale::TraditionalChineseScript), 153},
    {sipName_TraditionalHanScript, static_cast<int>( ::QLocale::TraditionalHanScript), 153},
    {sipName_TrinidadAndTobago, static_cast<int>( ::QLocale::TrinidadAndTobago), 142},
    {sipName_TristanDaCunha, static_cast<int>( ::QLocale::TristanDaCunha), 142},
    {sipName_Tsonga, static_cast<int>( ::QLocale::Tsonga), 148},
    {sipName_Tswana, static_cast<int>( ::QLocale::Tswana), 148},
    {sipName_Tunisia, static_cast<int>( ::QLocale::Tunisia), 142},
    {sipName_Turkey, static_cast<int>( ::QLocale::Turkey), 142},
    {sipName_Turkish, static_cast<int>( ::QLocale::Turkish), 148},
    {sipName_Turkmen, static_cast<int>( ::QLocale::Turkmen), 148},
    {sipName_Turkmenistan, static_cast<int>( ::QLocale::Turkmenistan), 142},
    {sipName_TurksAndCaicosIslands, static_cast<int>( ::QLocale::TurksAndCaicosIslands), 142},
    {sipName_Tuvalu, static_cast<int>( ::QLocale::Tuvalu), 142},
    {sipName_TuvaluCountry, static_cast<int>( ::QLocale::TuvaluCountry), 142},
    {sipName_TuvaluLanguage, static_cast<int>( ::QLocale::TuvaluLanguage), 148},
    {sipName_Twi, static_cast<int>( ::QLocale::Twi), 148},
    {sipName_Tyap, static_cast<int>( ::QLocale::Tyap), 148},
    {sipName_Uganda, static_cast<int>( ::QLocale::Uganda), 142},
    {sipName_Ugaritic, static_cast<int>( ::QLocale::Ugaritic), 148},
    {sipName_UgariticScript, static_cast<int>( ::QLocale::UgariticScript), 153},
    {sipName_Uighur, static_cast<int>( ::QLocale::Uighur), 148},
    {sipName_Uigur, static_cast<int>( ::QLocale::Uigur), 148},
    {sipName_Ukraine, static_cast<int>( ::QLocale::Ukraine), 142},
    {sipName_Ukrainian, static_cast<int>( ::QLocale::Ukrainian), 148},
    {sipName_UncodedLanguages, static_cast<int>( ::QLocale::UncodedLanguages), 148},
    {sipName_UnitedArabEmirates, static_cast<int>( ::QLocale::UnitedArabEmirates), 142},
    {sipName_UnitedKingdom, static_cast<int>( ::QLocale::UnitedKingdom), 142},
    {sipName_UnitedStates, static_cast<int>( ::QLocale::UnitedStates), 142},
    {sipName_UnitedStatesMinorOutlyingIslands, static_cast<int>( ::QLocale::UnitedStatesMinorOutlyingIslands), 142},
    {sipName_UnitedStatesVirginIslands, static_cast<int>( ::QLocale::UnitedStatesVirginIslands), 142},
    {sipName_UpperSorbian, static_cast<int>( ::QLocale::UpperSorbian), 148},
    {sipName_Urdu, static_cast<int>( ::QLocale::Urdu), 148},
    {sipName_Uruguay, static_cast<int>( ::QLocale::Uruguay), 142},
    {sipName_Uzbek, static_cast<int>( ::QLocale::Uzbek), 148},
    {sipName_Uzbekistan, static_cast<int>( ::QLocale::Uzbekistan), 142},
    {sipName_Vai, static_cast<int>( ::QLocale::Vai), 148},
    {sipName_VaiScript, static_cast<int>( ::QLocale::VaiScript), 153},
    {sipName_Vanuatu, static_cast<int>( ::QLocale::Vanuatu), 142},
    {sipName_VarangKshitiScript, static_cast<int>( ::QLocale::VarangKshitiScript), 153},
    {sipName_VaticanCityState, static_cast<int>( ::QLocale::VaticanCityState), 142},
    {sipName_Venda, static_cast<int>( ::QLocale::Venda), 148},
    {sipName_Venezuela, static_cast<int>( ::QLocale::Venezuela), 142},
    {sipName_Vietnam, static_cast<int>( ::QLocale::Vietnam), 142},
    {sipName_Vietnamese, static_cast<int>( ::QLocale::Vietnamese), 148},
    {sipName_Volapuk, static_cast<int>( ::QLocale::Volapuk), 148},
    {sipName_Vunjo, static_cast<int>( ::QLocale::Vunjo), 148},
    {sipName_Walamo, static_cast<int>( ::QLocale::Walamo), 148},
    {sipName_WallisAndFutunaIslands, static_cast<int>( ::QLocale::WallisAndFutunaIslands), 142},
    {sipName_Walloon, static_cast<int>( ::QLocale::Walloon), 148},
    {sipName_Walser, static_cast<int>( ::QLocale::Walser), 148},
    {sipName_Warlpiri, static_cast<int>( ::QLocale::Warlpiri), 148},
    {sipName_Welsh, static_cast<int>( ::QLocale::Welsh), 148},
    {sipName_WesternFrisian, static_cast<int>( ::QLocale::WesternFrisian), 148},
    {sipName_WesternSahara, static_cast<int>( ::QLocale::WesternSahara), 142},
    {sipName_Wolof, static_cast<int>( ::QLocale::Wolof), 148},
    {sipName_World, static_cast<int>( ::QLocale::World), 142},
    {sipName_Xhosa, static_cast<int>( ::QLocale::Xhosa), 148},
    {sipName_Yangben, static_cast<int>( ::QLocale::Yangben), 148},
    {sipName_Yemen, static_cast<int>( ::QLocale::Yemen), 142},
    {sipName_YiScript, static_cast<int>( ::QLocale::YiScript), 153},
    {sipName_Yiddish, static_cast<int>( ::QLocale::Yiddish), 148},
    {sipName_Yoruba, static_cast<int>( ::QLocale::Yoruba), 148},
    {sipName_Zambia, static_cast<int>( ::QLocale::Zambia), 142},
    {sipName_Zarma, static_cast<int>( ::QLocale::Zarma), 148},
    {sipName_Zhuang, static_cast<int>( ::QLocale::Zhuang), 148},
    {sipName_Zimbabwe, static_cast<int>( ::QLocale::Zimbabwe), 142},
    {sipName_Zulu, static_cast<int>( ::QLocale::Zulu), 148},
};

PyDoc_STRVAR(doc_QLocale, "\1QLocale()\n"
"QLocale(str)\n"
"QLocale(QLocale.Language, country: QLocale.Country = QLocale.AnyCountry)\n"
"QLocale(QLocale)\n"
"QLocale(QLocale.Language, QLocale.Script, QLocale.Country)");


static pyqt5ClassPluginDef plugin_QLocale = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLocale = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLocale,
        {SIP_NULLPTR},
        &plugin_QLocale
    },
    {
        sipNameNr_QLocale,
        {0, 0, 1},
        57, methods_QLocale,
        814, enummembers_QLocale,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLocale,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLocale,
    init_type_QLocale,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLocale,
    assign_QLocale,
    array_QLocale,
    copy_QLocale,
    release_QLocale,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
#include <qline.h>
#line 16611 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
#include <qline.h>
#line 16615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 16618 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QLineF_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QLineF_isNull(PyObject *, PyObject *);}
static PyObject *meth_QLineF_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_isNull, doc_QLineF_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_length, "length(self) -> float");

extern "C" {static PyObject *meth_QLineF_length(PyObject *, PyObject *);}
static PyObject *meth_QLineF_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->length();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_length, doc_QLineF_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_unitVector, "unitVector(self) -> QLineF");

extern "C" {static PyObject *meth_QLineF_unitVector(PyObject *, PyObject *);}
static PyObject *meth_QLineF_unitVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::QLineF*sipRes;

            sipRes = new  ::QLineF(sipCpp->unitVector());

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_unitVector, doc_QLineF_unitVector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_intersect, "intersect(self, QLineF, Union[QPointF, QPoint]) -> QLineF.IntersectType");

extern "C" {static PyObject *meth_QLineF_intersect(PyObject *, PyObject *);}
static PyObject *meth_QLineF_intersect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF* a0;
         ::QPointF* a1;
        int a1State = 0;
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J0", &sipSelf, sipType_QLineF, &sipCpp, sipType_QLineF, &a0, sipType_QPointF, &a1, &a1State))
        {
             ::QLineF::IntersectType sipRes;

            sipRes = sipCpp->intersect(*a0,a1);
            sipReleaseType(a1,sipType_QPointF,a1State);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLineF_IntersectType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_intersect, doc_QLineF_intersect);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_x1, "x1(self) -> float");

extern "C" {static PyObject *meth_QLineF_x1(PyObject *, PyObject *);}
static PyObject *meth_QLineF_x1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->x1();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_x1, doc_QLineF_x1);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_y1, "y1(self) -> float");

extern "C" {static PyObject *meth_QLineF_y1(PyObject *, PyObject *);}
static PyObject *meth_QLineF_y1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->y1();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_y1, doc_QLineF_y1);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_x2, "x2(self) -> float");

extern "C" {static PyObject *meth_QLineF_x2(PyObject *, PyObject *);}
static PyObject *meth_QLineF_x2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->x2();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_x2, doc_QLineF_x2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_y2, "y2(self) -> float");

extern "C" {static PyObject *meth_QLineF_y2(PyObject *, PyObject *);}
static PyObject *meth_QLineF_y2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->y2();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_y2, doc_QLineF_y2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_p1, "p1(self) -> QPointF");

extern "C" {static PyObject *meth_QLineF_p1(PyObject *, PyObject *);}
static PyObject *meth_QLineF_p1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->p1());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_p1, doc_QLineF_p1);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_p2, "p2(self) -> QPointF");

extern "C" {static PyObject *meth_QLineF_p2(PyObject *, PyObject *);}
static PyObject *meth_QLineF_p2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->p2());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_p2, doc_QLineF_p2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_dx, "dx(self) -> float");

extern "C" {static PyObject *meth_QLineF_dx(PyObject *, PyObject *);}
static PyObject *meth_QLineF_dx(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dx();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_dx, doc_QLineF_dx);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_dy, "dy(self) -> float");

extern "C" {static PyObject *meth_QLineF_dy(PyObject *, PyObject *);}
static PyObject *meth_QLineF_dy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->dy();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_dy, doc_QLineF_dy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_normalVector, "normalVector(self) -> QLineF");

extern "C" {static PyObject *meth_QLineF_normalVector(PyObject *, PyObject *);}
static PyObject *meth_QLineF_normalVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::QLineF*sipRes;

            sipRes = new  ::QLineF(sipCpp->normalVector());

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_normalVector, doc_QLineF_normalVector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_translate, "translate(self, Union[QPointF, QPoint])\n"
"translate(self, float, float)");

extern "C" {static PyObject *meth_QLineF_translate(PyObject *, PyObject *);}
static PyObject *meth_QLineF_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->translate(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QLineF, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_translate, doc_QLineF_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_setLength, "setLength(self, float)");

extern "C" {static PyObject *meth_QLineF_setLength(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QLineF, &sipCpp, &a0))
        {
            sipCpp->setLength(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setLength, doc_QLineF_setLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_pointAt, "pointAt(self, float) -> QPointF");

extern "C" {static PyObject *meth_QLineF_pointAt(PyObject *, PyObject *);}
static PyObject *meth_QLineF_pointAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QLineF, &sipCpp, &a0))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->pointAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_pointAt, doc_QLineF_pointAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_toLine, "toLine(self) -> QLine");

extern "C" {static PyObject *meth_QLineF_toLine(PyObject *, PyObject *);}
static PyObject *meth_QLineF_toLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::QLine*sipRes;

            sipRes = new  ::QLine(sipCpp->toLine());

            return sipConvertFromNewType(sipRes,sipType_QLine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_toLine, doc_QLineF_toLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_fromPolar, "fromPolar(float, float) -> QLineF");

extern "C" {static PyObject *meth_QLineF_fromPolar(PyObject *, PyObject *);}
static PyObject *meth_QLineF_fromPolar(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
             ::QLineF*sipRes;

            sipRes = new  ::QLineF( ::QLineF::fromPolar(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_fromPolar, doc_QLineF_fromPolar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_angle, "angle(self) -> float");

extern "C" {static PyObject *meth_QLineF_angle(PyObject *, PyObject *);}
static PyObject *meth_QLineF_angle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->angle();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_angle, doc_QLineF_angle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_setAngle, "setAngle(self, float)");

extern "C" {static PyObject *meth_QLineF_setAngle(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QLineF, &sipCpp, &a0))
        {
            sipCpp->setAngle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setAngle, doc_QLineF_setAngle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_angleTo, "angleTo(self, QLineF) -> float");

extern "C" {static PyObject *meth_QLineF_angleTo(PyObject *, PyObject *);}
static PyObject *meth_QLineF_angleTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF* a0;
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLineF, &sipCpp, sipType_QLineF, &a0))
        {
             ::qreal sipRes;

            sipRes = sipCpp->angleTo(*a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_angleTo, doc_QLineF_angleTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_translated, "translated(self, Union[QPointF, QPoint]) -> QLineF\n"
"translated(self, float, float) -> QLineF");

extern "C" {static PyObject *meth_QLineF_translated(PyObject *, PyObject *);}
static PyObject *meth_QLineF_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
             ::QLineF*sipRes;

            sipRes = new  ::QLineF(sipCpp->translated(*a0));
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QLineF, &sipCpp, &a0, &a1))
        {
             ::QLineF*sipRes;

            sipRes = new  ::QLineF(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QLineF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_translated, doc_QLineF_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_setP1, "setP1(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QLineF_setP1(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setP1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setP1(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setP1, doc_QLineF_setP1);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_setP2, "setP2(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QLineF_setP2(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setP2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setP2(*a0);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setP2, doc_QLineF_setP2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_setPoints, "setPoints(self, Union[QPointF, QPoint], Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QLineF_setPoints(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QLineF, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->setPoints(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setPoints, doc_QLineF_setPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_setLine, "setLine(self, float, float, float, float)");

extern "C" {static PyObject *meth_QLineF_setLine(PyObject *, PyObject *);}
static PyObject *meth_QLineF_setLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QLineF, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setLine(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_setLine, doc_QLineF_setLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLineF_center, "center(self) -> QPointF");

extern "C" {static PyObject *meth_QLineF_center(PyObject *, PyObject *);}
static PyObject *meth_QLineF_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLineF, &sipCpp))
        {
             ::QPointF*sipRes;

            sipRes = new  ::QPointF(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLineF, sipName_center, doc_QLineF_center);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QLineF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLineF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLineF *sipCpp = reinterpret_cast< ::QLineF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLineF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLineF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QLineF::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QLineF, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLineF___repr__(PyObject *);}
static PyObject *slot_QLineF___repr__(PyObject *sipSelf)
{
     ::QLineF *sipCpp = reinterpret_cast< ::QLineF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLineF));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QLineF()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QLineF()");
        #endif
        }
        else
        {
            PyObject *x1 = PyFloat_FromDouble(sipCpp->x1());
            PyObject *y1 = PyFloat_FromDouble(sipCpp->y1());
            PyObject *x2 = PyFloat_FromDouble(sipCpp->x2());
            PyObject *y2 = PyFloat_FromDouble(sipCpp->y2());
        
            if (x1 && y1 && x2 && y2)
            {
        #if PY_MAJOR_VERSION >= 3
                sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QLineF(%R, %R, %R, %R)",
                        x1, y1, x2, y2);
        #else
                sipRes = PyString_FromString("PyQt5.QtCore.QLineF(");
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(x1));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(y1));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(x2));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(y2));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
            }
        
            Py_XDECREF(x1);
            Py_XDECREF(y1);
            Py_XDECREF(x2);
            Py_XDECREF(y2);
        }
#line 17518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLineF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLineF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLineF *sipCpp = reinterpret_cast< ::QLineF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLineF));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLineF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLineF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QLineF::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QLineF, sipSelf, sipArg);
}


extern "C" {static int slot_QLineF___bool__(PyObject *);}
static int slot_QLineF___bool__(PyObject *sipSelf)
{
     ::QLineF *sipCpp = reinterpret_cast< ::QLineF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLineF));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
        sipRes = !sipCpp->isNull();
#line 17575 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLineF(void *, int);}
static void release_QLineF(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLineF *>(sipCppV);
}


extern "C" {static PyObject *pickle_QLineF(void *);}
static PyObject *pickle_QLineF(void *sipCppV)
{
     ::QLineF *sipCpp = reinterpret_cast< ::QLineF *>(sipCppV);
    PyObject *sipRes;

#line 99 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
    sipRes = Py_BuildValue((char *)"dddd", sipCpp->x1(), sipCpp->y1(), sipCpp->x2(), sipCpp->y2());
#line 17601 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QLineF(void *, SIP_SSIZE_T, void *);}
static void assign_QLineF(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLineF *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLineF *>(sipSrc);
}


extern "C" {static void *array_QLineF(SIP_SSIZE_T);}
static void *array_QLineF(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLineF[sipNrElem];
}


extern "C" {static void *copy_QLineF(const void *, SIP_SSIZE_T);}
static void *copy_QLineF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLineF(reinterpret_cast<const  ::QLineF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLineF(sipSimpleWrapper *);}
static void dealloc_QLineF(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLineF(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLineF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLineF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLineF *sipCpp = SIP_NULLPTR;

    {
        const  ::QLine* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLine, &a0))
        {
            sipCpp = new  ::QLineF(*a0);

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLineF();

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
            sipCpp = new  ::QLineF(*a0,*a1);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "dddd", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QLineF(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QLineF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLineF, &a0))
        {
            sipCpp = new  ::QLineF(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLineF[] = {
    {(void *)slot_QLineF___eq__, eq_slot},
    {(void *)slot_QLineF___repr__, repr_slot},
    {(void *)slot_QLineF___ne__, ne_slot},
    {(void *)slot_QLineF___bool__, bool_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLineF[] = {
    {SIP_MLNAME_CAST(sipName_angle), meth_QLineF_angle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_angle)},
    {SIP_MLNAME_CAST(sipName_angleTo), meth_QLineF_angleTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_angleTo)},
    {SIP_MLNAME_CAST(sipName_center), meth_QLineF_center, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_center)},
    {SIP_MLNAME_CAST(sipName_dx), meth_QLineF_dx, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_dx)},
    {SIP_MLNAME_CAST(sipName_dy), meth_QLineF_dy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_dy)},
    {SIP_MLNAME_CAST(sipName_fromPolar), meth_QLineF_fromPolar, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_fromPolar)},
    {SIP_MLNAME_CAST(sipName_intersect), meth_QLineF_intersect, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_intersect)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QLineF_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_isNull)},
    {SIP_MLNAME_CAST(sipName_length), meth_QLineF_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_length)},
    {SIP_MLNAME_CAST(sipName_normalVector), meth_QLineF_normalVector, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_normalVector)},
    {SIP_MLNAME_CAST(sipName_p1), meth_QLineF_p1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_p1)},
    {SIP_MLNAME_CAST(sipName_p2), meth_QLineF_p2, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_p2)},
    {SIP_MLNAME_CAST(sipName_pointAt), meth_QLineF_pointAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_pointAt)},
    {SIP_MLNAME_CAST(sipName_setAngle), meth_QLineF_setAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_setAngle)},
    {SIP_MLNAME_CAST(sipName_setLength), meth_QLineF_setLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_setLength)},
    {SIP_MLNAME_CAST(sipName_setLine), meth_QLineF_setLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_setLine)},
    {SIP_MLNAME_CAST(sipName_setP1), meth_QLineF_setP1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_setP1)},
    {SIP_MLNAME_CAST(sipName_setP2), meth_QLineF_setP2, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_setP2)},
    {SIP_MLNAME_CAST(sipName_setPoints), meth_QLineF_setPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_setPoints)},
    {SIP_MLNAME_CAST(sipName_toLine), meth_QLineF_toLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_toLine)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QLineF_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QLineF_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_translated)},
    {SIP_MLNAME_CAST(sipName_unitVector), meth_QLineF_unitVector, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_unitVector)},
    {SIP_MLNAME_CAST(sipName_x1), meth_QLineF_x1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_x1)},
    {SIP_MLNAME_CAST(sipName_x2), meth_QLineF_x2, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_x2)},
    {SIP_MLNAME_CAST(sipName_y1), meth_QLineF_y1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_y1)},
    {SIP_MLNAME_CAST(sipName_y2), meth_QLineF_y2, METH_VARARGS, SIP_MLDOC_CAST(doc_QLineF_y2)}
};

static sipEnumMemberDef enummembers_QLineF[] = {
    {sipName_BoundedIntersection, static_cast<int>( ::QLineF::BoundedIntersection), 120},
    {sipName_NoIntersection, static_cast<int>( ::QLineF::NoIntersection), 120},
    {sipName_UnboundedIntersection, static_cast<int>( ::QLineF::UnboundedIntersection), 120},
};

PyDoc_STRVAR(doc_QLineF, "\1QLineF(QLine)\n"
"QLineF()\n"
"QLineF(Union[QPointF, QPoint], Union[QPointF, QPoint])\n"
"QLineF(float, float, float, float)\n"
"QLineF(QLineF)");


static pyqt5ClassPluginDef plugin_QLineF = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLineF = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLineF,
        {SIP_NULLPTR},
        &plugin_QLineF
    },
    {
        sipNameNr_QLineF,
        {0, 0, 1},
        27, methods_QLineF,
        3, enummembers_QLineF,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLineF,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLineF,
    init_type_QLineF,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLineF,
    assign_QLineF,
    array_QLineF,
    copy_QLineF,
    release_QLineF,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QLineF,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
#include <qline.h>
#line 17825 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 17829 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QLine_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QLine_isNull(PyObject *, PyObject *);}
static PyObject *meth_QLine_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_isNull, doc_QLine_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_x1, "x1(self) -> int");

extern "C" {static PyObject *meth_QLine_x1(PyObject *, PyObject *);}
static PyObject *meth_QLine_x1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x1();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_x1, doc_QLine_x1);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_y1, "y1(self) -> int");

extern "C" {static PyObject *meth_QLine_y1(PyObject *, PyObject *);}
static PyObject *meth_QLine_y1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y1();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_y1, doc_QLine_y1);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_x2, "x2(self) -> int");

extern "C" {static PyObject *meth_QLine_x2(PyObject *, PyObject *);}
static PyObject *meth_QLine_x2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x2();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_x2, doc_QLine_x2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_y2, "y2(self) -> int");

extern "C" {static PyObject *meth_QLine_y2(PyObject *, PyObject *);}
static PyObject *meth_QLine_y2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y2();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_y2, doc_QLine_y2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_p1, "p1(self) -> QPoint");

extern "C" {static PyObject *meth_QLine_p1(PyObject *, PyObject *);}
static PyObject *meth_QLine_p1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->p1());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_p1, doc_QLine_p1);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_p2, "p2(self) -> QPoint");

extern "C" {static PyObject *meth_QLine_p2(PyObject *, PyObject *);}
static PyObject *meth_QLine_p2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->p2());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_p2, doc_QLine_p2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_dx, "dx(self) -> int");

extern "C" {static PyObject *meth_QLine_dx(PyObject *, PyObject *);}
static PyObject *meth_QLine_dx(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dx();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_dx, doc_QLine_dx);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_dy, "dy(self) -> int");

extern "C" {static PyObject *meth_QLine_dy(PyObject *, PyObject *);}
static PyObject *meth_QLine_dy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dy();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_dy, doc_QLine_dy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_translate, "translate(self, QPoint)\n"
"translate(self, int, int)");

extern "C" {static PyObject *meth_QLine_translate(PyObject *, PyObject *);}
static PyObject *meth_QLine_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLine, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->translate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QLine, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_translate, doc_QLine_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_translated, "translated(self, QPoint) -> QLine\n"
"translated(self, int, int) -> QLine");

extern "C" {static PyObject *meth_QLine_translated(PyObject *, PyObject *);}
static PyObject *meth_QLine_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLine, &sipCpp, sipType_QPoint, &a0))
        {
             ::QLine*sipRes;

            sipRes = new  ::QLine(sipCpp->translated(*a0));

            return sipConvertFromNewType(sipRes,sipType_QLine,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QLine, &sipCpp, &a0, &a1))
        {
             ::QLine*sipRes;

            sipRes = new  ::QLine(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QLine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_translated, doc_QLine_translated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_setP1, "setP1(self, QPoint)");

extern "C" {static PyObject *meth_QLine_setP1(PyObject *, PyObject *);}
static PyObject *meth_QLine_setP1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLine, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setP1(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_setP1, doc_QLine_setP1);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_setP2, "setP2(self, QPoint)");

extern "C" {static PyObject *meth_QLine_setP2(PyObject *, PyObject *);}
static PyObject *meth_QLine_setP2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
         ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLine, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setP2(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_setP2, doc_QLine_setP2);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_setPoints, "setPoints(self, QPoint, QPoint)");

extern "C" {static PyObject *meth_QLine_setPoints(PyObject *, PyObject *);}
static PyObject *meth_QLine_setPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;
         ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QLine, &sipCpp, sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            sipCpp->setPoints(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_setPoints, doc_QLine_setPoints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_setLine, "setLine(self, int, int, int, int)");

extern "C" {static PyObject *meth_QLine_setLine(PyObject *, PyObject *);}
static PyObject *meth_QLine_setLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QLine, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setLine(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_setLine, doc_QLine_setLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLine_center, "center(self) -> QPoint");

extern "C" {static PyObject *meth_QLine_center(PyObject *, PyObject *);}
static PyObject *meth_QLine_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLine, &sipCpp))
        {
             ::QPoint*sipRes;

            sipRes = new  ::QPoint(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_QPoint,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLine, sipName_center, doc_QLine_center);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QLine___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLine___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLine *sipCpp = reinterpret_cast< ::QLine *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLine));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLine, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QLine::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QLine, sipSelf, sipArg);
}


extern "C" {static int slot_QLine___bool__(PyObject *);}
static int slot_QLine___bool__(PyObject *sipSelf)
{
     ::QLine *sipCpp = reinterpret_cast< ::QLine *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLine));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 64 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
        sipRes = !sipCpp->isNull();
#line 18365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLine___repr__(PyObject *);}
static PyObject *slot_QLine___repr__(PyObject *sipSelf)
{
     ::QLine *sipCpp = reinterpret_cast< ::QLine *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLine));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 40 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QLine()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QLine()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt5.QtCore.QLine(%i, %i, %i, %i)",
                    sipCpp->x1(), sipCpp->y1(), sipCpp->x2(), sipCpp->y2());
        }
#line 18408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLine___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLine___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLine *sipCpp = reinterpret_cast< ::QLine *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLine));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLine* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLine, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QLine::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QLine, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLine(void *, int);}
static void release_QLine(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLine *>(sipCppV);
}


extern "C" {static PyObject *pickle_QLine(void *);}
static PyObject *pickle_QLine(void *sipCppV)
{
     ::QLine *sipCpp = reinterpret_cast< ::QLine *>(sipCppV);
    PyObject *sipRes;

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->x1(), sipCpp->y1(), sipCpp->x2(), sipCpp->y2());
#line 18466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QLine(void *, SIP_SSIZE_T, void *);}
static void assign_QLine(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLine *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLine *>(sipSrc);
}


extern "C" {static void *array_QLine(SIP_SSIZE_T);}
static void *array_QLine(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLine[sipNrElem];
}


extern "C" {static void *copy_QLine(const void *, SIP_SSIZE_T);}
static void *copy_QLine(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLine(reinterpret_cast<const  ::QLine *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLine(sipSimpleWrapper *);}
static void dealloc_QLine(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLine(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLine(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLine *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLine();

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPoint* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            sipCpp = new  ::QLine(*a0,*a1);

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iiii", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QLine(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QLine* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLine, &a0))
        {
            sipCpp = new  ::QLine(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLine[] = {
    {(void *)slot_QLine___eq__, eq_slot},
    {(void *)slot_QLine___bool__, bool_slot},
    {(void *)slot_QLine___repr__, repr_slot},
    {(void *)slot_QLine___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLine[] = {
    {SIP_MLNAME_CAST(sipName_center), meth_QLine_center, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_center)},
    {SIP_MLNAME_CAST(sipName_dx), meth_QLine_dx, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_dx)},
    {SIP_MLNAME_CAST(sipName_dy), meth_QLine_dy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_dy)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QLine_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_isNull)},
    {SIP_MLNAME_CAST(sipName_p1), meth_QLine_p1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_p1)},
    {SIP_MLNAME_CAST(sipName_p2), meth_QLine_p2, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_p2)},
    {SIP_MLNAME_CAST(sipName_setLine), meth_QLine_setLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_setLine)},
    {SIP_MLNAME_CAST(sipName_setP1), meth_QLine_setP1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_setP1)},
    {SIP_MLNAME_CAST(sipName_setP2), meth_QLine_setP2, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_setP2)},
    {SIP_MLNAME_CAST(sipName_setPoints), meth_QLine_setPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_setPoints)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QLine_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QLine_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_translated)},
    {SIP_MLNAME_CAST(sipName_x1), meth_QLine_x1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_x1)},
    {SIP_MLNAME_CAST(sipName_x2), meth_QLine_x2, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_x2)},
    {SIP_MLNAME_CAST(sipName_y1), meth_QLine_y1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_y1)},
    {SIP_MLNAME_CAST(sipName_y2), meth_QLine_y2, METH_VARARGS, SIP_MLDOC_CAST(doc_QLine_y2)}
};

PyDoc_STRVAR(doc_QLine, "\1QLine()\n"
"QLine(QPoint, QPoint)\n"
"QLine(int, int, int, int)\n"
"QLine(QLine)");


static pyqt5ClassPluginDef plugin_QLine = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLine,
        {SIP_NULLPTR},
        &plugin_QLine
    },
    {
        sipNameNr_QLine,
        {0, 0, 1},
        16, methods_QLine,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLine,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLine,
    init_type_QLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLine,
    assign_QLine,
    array_QLine,
    copy_QLine,
    release_QLine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QLine,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlibraryinfo.sip"
#include <qlibraryinfo.h>
#line 18656 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qversionnumber.sip"
#include <qversionnumber.h>
#line 18660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 18663 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 18666 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QLibraryInfo_licensee, "licensee() -> str");

extern "C" {static PyObject *meth_QLibraryInfo_licensee(PyObject *, PyObject *);}
static PyObject *meth_QLibraryInfo_licensee(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QLibraryInfo::licensee());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibraryInfo, sipName_licensee, doc_QLibraryInfo_licensee);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibraryInfo_licensedProducts, "licensedProducts() -> str");

extern "C" {static PyObject *meth_QLibraryInfo_licensedProducts(PyObject *, PyObject *);}
static PyObject *meth_QLibraryInfo_licensedProducts(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QLibraryInfo::licensedProducts());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibraryInfo, sipName_licensedProducts, doc_QLibraryInfo_licensedProducts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibraryInfo_location, "location(QLibraryInfo.LibraryLocation) -> str");

extern "C" {static PyObject *meth_QLibraryInfo_location(PyObject *, PyObject *);}
static PyObject *meth_QLibraryInfo_location(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibraryInfo::LibraryLocation a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QLibraryInfo_LibraryLocation, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QLibraryInfo::location(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibraryInfo, sipName_location, doc_QLibraryInfo_location);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibraryInfo_buildDate, "buildDate() -> QDate");

extern "C" {static PyObject *meth_QLibraryInfo_buildDate(PyObject *, PyObject *);}
static PyObject *meth_QLibraryInfo_buildDate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate( ::QLibraryInfo::buildDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibraryInfo, sipName_buildDate, doc_QLibraryInfo_buildDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibraryInfo_isDebugBuild, "isDebugBuild() -> bool");

extern "C" {static PyObject *meth_QLibraryInfo_isDebugBuild(PyObject *, PyObject *);}
static PyObject *meth_QLibraryInfo_isDebugBuild(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QLibraryInfo::isDebugBuild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibraryInfo, sipName_isDebugBuild, doc_QLibraryInfo_isDebugBuild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibraryInfo_version, "version() -> QVersionNumber");

extern "C" {static PyObject *meth_QLibraryInfo_version(PyObject *, PyObject *);}
static PyObject *meth_QLibraryInfo_version(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QVersionNumber*sipRes;

            sipRes = new  ::QVersionNumber( ::QLibraryInfo::version());

            return sipConvertFromNewType(sipRes,sipType_QVersionNumber,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibraryInfo, sipName_version, doc_QLibraryInfo_version);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLibraryInfo(void *, int);}
static void release_QLibraryInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLibraryInfo *>(sipCppV);
}


extern "C" {static void dealloc_QLibraryInfo(sipSimpleWrapper *);}
static void dealloc_QLibraryInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLibraryInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLibraryInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLibraryInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLibraryInfo *sipCpp = SIP_NULLPTR;

    {
        const  ::QLibraryInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLibraryInfo, &a0))
        {
            sipCpp = new  ::QLibraryInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QLibraryInfo[] = {
    {SIP_MLNAME_CAST(sipName_buildDate), meth_QLibraryInfo_buildDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibraryInfo_buildDate)},
    {SIP_MLNAME_CAST(sipName_isDebugBuild), meth_QLibraryInfo_isDebugBuild, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibraryInfo_isDebugBuild)},
    {SIP_MLNAME_CAST(sipName_licensedProducts), meth_QLibraryInfo_licensedProducts, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibraryInfo_licensedProducts)},
    {SIP_MLNAME_CAST(sipName_licensee), meth_QLibraryInfo_licensee, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibraryInfo_licensee)},
    {SIP_MLNAME_CAST(sipName_location), meth_QLibraryInfo_location, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibraryInfo_location)},
    {SIP_MLNAME_CAST(sipName_version), meth_QLibraryInfo_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibraryInfo_version)}
};

static sipEnumMemberDef enummembers_QLibraryInfo[] = {
    {sipName_ArchDataPath, static_cast<int>( ::QLibraryInfo::ArchDataPath), 117},
    {sipName_BinariesPath, static_cast<int>( ::QLibraryInfo::BinariesPath), 117},
    {sipName_DataPath, static_cast<int>( ::QLibraryInfo::DataPath), 117},
    {sipName_DocumentationPath, static_cast<int>( ::QLibraryInfo::DocumentationPath), 117},
    {sipName_ExamplesPath, static_cast<int>( ::QLibraryInfo::ExamplesPath), 117},
    {sipName_HeadersPath, static_cast<int>( ::QLibraryInfo::HeadersPath), 117},
    {sipName_ImportsPath, static_cast<int>( ::QLibraryInfo::ImportsPath), 117},
    {sipName_LibrariesPath, static_cast<int>( ::QLibraryInfo::LibrariesPath), 117},
    {sipName_LibraryExecutablesPath, static_cast<int>( ::QLibraryInfo::LibraryExecutablesPath), 117},
    {sipName_PluginsPath, static_cast<int>( ::QLibraryInfo::PluginsPath), 117},
    {sipName_PrefixPath, static_cast<int>( ::QLibraryInfo::PrefixPath), 117},
    {sipName_Qml2ImportsPath, static_cast<int>( ::QLibraryInfo::Qml2ImportsPath), 117},
    {sipName_SettingsPath, static_cast<int>( ::QLibraryInfo::SettingsPath), 117},
    {sipName_TestsPath, static_cast<int>( ::QLibraryInfo::TestsPath), 117},
    {sipName_TranslationsPath, static_cast<int>( ::QLibraryInfo::TranslationsPath), 117},
};

PyDoc_STRVAR(doc_QLibraryInfo, "\1QLibraryInfo(QLibraryInfo)");


static pyqt5ClassPluginDef plugin_QLibraryInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLibraryInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLibraryInfo,
        {SIP_NULLPTR},
        &plugin_QLibraryInfo
    },
    {
        sipNameNr_QLibraryInfo,
        {0, 0, 1},
        6, methods_QLibraryInfo,
        15, enummembers_QLibraryInfo,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLibraryInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QLibraryInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLibraryInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QLibraryInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 18955 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 18959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QLibrary_LoadHints___hash__(PyObject *);}
static long slot_QLibrary_LoadHints___hash__(PyObject *sipSelf)
{
     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QLibrary::LoadHints::Int();
#line 18977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QLibrary_LoadHints___bool__(PyObject *);}
static int slot_QLibrary_LoadHints___bool__(PyObject *sipSelf)
{
     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLibrary::LoadHints::Int() != 0);
#line 19002 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHints___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLibrary::LoadHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QLibrary_LoadHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLibrary::LoadHints::Int() != a0->operator QLibrary::LoadHints::Int());
#line 19032 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QLibrary::LoadHints *>(a0),sipType_QLibrary_LoadHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QLibrary_LoadHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHints___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLibrary::LoadHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QLibrary_LoadHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLibrary::LoadHints::Int() == a0->operator QLibrary::LoadHints::Int());
#line 19068 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QLibrary::LoadHints *>(a0),sipType_QLibrary_LoadHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QLibrary_LoadHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHints___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLibrary_LoadHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QLibrary::LoadHints(*sipCpp ^ a0);
#line 19107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___xor__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHints___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibrary::LoadHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLibrary_LoadHints, &a0, &a0State, &a1))
        {
             ::QLibrary::LoadHints*sipRes;

            sipRes = new  ::QLibrary::LoadHints((*a0 ^ a1));
            sipReleaseType(a0,sipType_QLibrary_LoadHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___ior__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHints___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLibrary_LoadHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QLibrary::LoadHints(*sipCpp | a0);
#line 19179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___or__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHints___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibrary::LoadHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLibrary_LoadHints, &a0, &a0State, &a1))
        {
             ::QLibrary::LoadHints*sipRes;

            sipRes = new  ::QLibrary::LoadHints((*a0 | a1));
            sipReleaseType(a0,sipType_QLibrary_LoadHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___iand__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHints___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLibrary_LoadHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QLibrary::LoadHints::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___and__(PyObject *,PyObject *);}
static PyObject *slot_QLibrary_LoadHints___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibrary::LoadHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLibrary_LoadHints, &a0, &a0State, &a1))
        {
             ::QLibrary::LoadHints*sipRes;

            sipRes = new  ::QLibrary::LoadHints((*a0 & a1));
            sipReleaseType(a0,sipType_QLibrary_LoadHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___invert__(PyObject *);}
static PyObject *slot_QLibrary_LoadHints___invert__(PyObject *sipSelf)
{
     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QLibrary::LoadHints*sipRes;

            sipRes = new  ::QLibrary::LoadHints(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLibrary_LoadHints___int__(PyObject *);}
static PyObject *slot_QLibrary_LoadHints___int__(PyObject *sipSelf)
{
     ::QLibrary::LoadHints *sipCpp = reinterpret_cast< ::QLibrary::LoadHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLibrary_LoadHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLibrary_LoadHints(void *, int);}
static void release_QLibrary_LoadHints(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLibrary::LoadHints *>(sipCppV);
}


extern "C" {static void assign_QLibrary_LoadHints(void *, SIP_SSIZE_T, void *);}
static void assign_QLibrary_LoadHints(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLibrary::LoadHints *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLibrary::LoadHints *>(sipSrc);
}


extern "C" {static void *array_QLibrary_LoadHints(SIP_SSIZE_T);}
static void *array_QLibrary_LoadHints(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLibrary::LoadHints[sipNrElem];
}


extern "C" {static void *copy_QLibrary_LoadHints(const void *, SIP_SSIZE_T);}
static void *copy_QLibrary_LoadHints(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLibrary::LoadHints(reinterpret_cast<const  ::QLibrary::LoadHints *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLibrary_LoadHints(sipSimpleWrapper *);}
static void dealloc_QLibrary_LoadHints(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLibrary_LoadHints(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLibrary_LoadHints(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLibrary_LoadHints(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLibrary::LoadHints *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLibrary::LoadHints();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QLibrary::LoadHints(a0);

            return sipCpp;
        }
    }

    {
        const  ::QLibrary::LoadHints* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QLibrary_LoadHints, &a0, &a0State))
        {
            sipCpp = new  ::QLibrary::LoadHints(*a0);
            sipReleaseType(const_cast< ::QLibrary::LoadHints *>(a0),sipType_QLibrary_LoadHints,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QLibrary_LoadHints(PyObject *, void **, int *, PyObject *);}
static int convertTo_QLibrary_LoadHints(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QLibrary::LoadHints **sipCppPtr = reinterpret_cast< ::QLibrary::LoadHints **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QLibrary::LoadHints is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QLibrary_LoadHint)) ||
            sipCanConvertToType(sipPy, sipType_QLibrary_LoadHints, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QLibrary_LoadHint)))
{
    *sipCppPtr = new QLibrary::LoadHints(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QLibrary::LoadHints *>(sipConvertToType(sipPy, sipType_QLibrary_LoadHints, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 19447 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLibrary_LoadHints[] = {
    {(void *)slot_QLibrary_LoadHints___hash__, hash_slot},
    {(void *)slot_QLibrary_LoadHints___bool__, bool_slot},
    {(void *)slot_QLibrary_LoadHints___ne__, ne_slot},
    {(void *)slot_QLibrary_LoadHints___eq__, eq_slot},
    {(void *)slot_QLibrary_LoadHints___ixor__, ixor_slot},
    {(void *)slot_QLibrary_LoadHints___xor__, xor_slot},
    {(void *)slot_QLibrary_LoadHints___ior__, ior_slot},
    {(void *)slot_QLibrary_LoadHints___or__, or_slot},
    {(void *)slot_QLibrary_LoadHints___iand__, iand_slot},
    {(void *)slot_QLibrary_LoadHints___and__, and_slot},
    {(void *)slot_QLibrary_LoadHints___invert__, invert_slot},
    {(void *)slot_QLibrary_LoadHints___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QLibrary_LoadHints, "\1QLibrary.LoadHints()\n"
"QLibrary.LoadHints(Union[QLibrary.LoadHints, QLibrary.LoadHint])\n"
"QLibrary.LoadHints(QLibrary.LoadHints)");


static pyqt5ClassPluginDef plugin_QLibrary_LoadHints = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLibrary_LoadHints = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLibrary__LoadHints,
        {SIP_NULLPTR},
        &plugin_QLibrary_LoadHints
    },
    {
        sipNameNr_LoadHints,
        {113, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLibrary_LoadHints,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLibrary_LoadHints,
    init_type_QLibrary_LoadHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLibrary_LoadHints,
    assign_QLibrary_LoadHints,
    array_QLibrary_LoadHints,
    copy_QLibrary_LoadHints,
    release_QLibrary_LoadHints,
    SIP_NULLPTR,
    convertTo_QLibrary_LoadHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 19535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 19539 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19542 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 19545 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 19548 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19551 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19554 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 19557 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 19560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19563 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 19566 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19569 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19572 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 19575 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 19578 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 19581 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 19584 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 19587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQLibrary : public  ::QLibrary
{
public:
    sipQLibrary( ::QObject*);
    sipQLibrary(const  ::QString&, ::QObject*);
    sipQLibrary(const  ::QString&,int, ::QObject*);
    sipQLibrary(const  ::QString&,const  ::QString&, ::QObject*);
    virtual ~sipQLibrary();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLibrary(const sipQLibrary &);
    sipQLibrary &operator = (const sipQLibrary &);

    char sipPyMethods[7];
};

sipQLibrary::sipQLibrary( ::QObject*a0):  ::QLibrary(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLibrary::sipQLibrary(const  ::QString& a0, ::QObject*a1):  ::QLibrary(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLibrary::sipQLibrary(const  ::QString& a0,int a1, ::QObject*a2):  ::QLibrary(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLibrary::sipQLibrary(const  ::QString& a0,const  ::QString& a1, ::QObject*a2):  ::QLibrary(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLibrary::~sipQLibrary()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQLibrary::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QLibrary);

    return  ::QLibrary::metaObject();
}

int sipQLibrary::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLibrary::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QLibrary,_c,_id,_a);

    return _id;
}

void *sipQLibrary::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QLibrary, _clname, &sipCpp) ? sipCpp :  ::QLibrary::qt_metacast(_clname));
}

bool sipQLibrary::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QLibrary::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQLibrary::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QLibrary::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQLibrary::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QLibrary::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQLibrary::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QLibrary::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQLibrary::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QLibrary::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQLibrary::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QLibrary::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQLibrary::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QLibrary::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLibrary_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QLibrary_errorString(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLibrary, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_errorString, doc_QLibrary_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QLibrary_fileName(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLibrary, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_fileName, doc_QLibrary_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_isLoaded, "isLoaded(self) -> bool");

extern "C" {static PyObject *meth_QLibrary_isLoaded(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_isLoaded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLibrary, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLoaded();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_isLoaded, doc_QLibrary_isLoaded);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_load, "load(self) -> bool");

extern "C" {static PyObject *meth_QLibrary_load(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLibrary, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->load();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_load, doc_QLibrary_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_loadHints, "loadHints(self) -> QLibrary.LoadHints");

extern "C" {static PyObject *meth_QLibrary_loadHints(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_loadHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLibrary, &sipCpp))
        {
             ::QLibrary::LoadHints*sipRes;

            sipRes = new  ::QLibrary::LoadHints(sipCpp->loadHints());

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_loadHints, doc_QLibrary_loadHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_resolve, "resolve(self, str) -> sip.voidptr\n"
"resolve(str, str) -> sip.voidptr\n"
"resolve(str, int, str) -> sip.voidptr\n"
"resolve(str, str, str) -> sip.voidptr");

extern "C" {static PyObject *meth_QLibrary_resolve(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_resolve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
         ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QLibrary, &sipCpp, &a0Keep, &a0))
        {
             ::QFunctionPointer sipRes;

            sipRes = sipCpp->resolve(a0);
            Py_DECREF(a0Keep);

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1AA", sipType_QString,&a0, &a0State, &a1Keep, &a1))
        {
             ::QFunctionPointer sipRes;

            sipRes =  ::QLibrary::resolve(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_DECREF(a1Keep);

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
        const char* a2;
        PyObject *a2Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1iAA", sipType_QString,&a0, &a0State, &a1, &a2Keep, &a2))
        {
             ::QFunctionPointer sipRes;

            sipRes =  ::QLibrary::resolve(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            Py_DECREF(a2Keep);

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const char* a2;
        PyObject *a2Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1AA", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2Keep, &a2))
        {
             ::QFunctionPointer sipRes;

            sipRes =  ::QLibrary::resolve(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            Py_DECREF(a2Keep);

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_resolve, doc_QLibrary_resolve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_unload, "unload(self) -> bool");

extern "C" {static PyObject *meth_QLibrary_unload(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_unload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLibrary, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->unload();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_unload, doc_QLibrary_unload);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_isLibrary, "isLibrary(str) -> bool");

extern "C" {static PyObject *meth_QLibrary_isLibrary(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_isLibrary(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QLibrary::isLibrary(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_isLibrary, doc_QLibrary_isLibrary);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QLibrary_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLibrary, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_setFileName, doc_QLibrary_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_setFileNameAndVersion, "setFileNameAndVersion(self, str, int)\n"
"setFileNameAndVersion(self, str, str)");

extern "C" {static PyObject *meth_QLibrary_setFileNameAndVersion(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_setFileNameAndVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
         ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QLibrary, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->setFileNameAndVersion(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QLibrary, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setFileNameAndVersion(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_setFileNameAndVersion, doc_QLibrary_setFileNameAndVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLibrary_setLoadHints, "setLoadHints(self, Union[QLibrary.LoadHints, QLibrary.LoadHint])");

extern "C" {static PyObject *meth_QLibrary_setLoadHints(PyObject *, PyObject *);}
static PyObject *meth_QLibrary_setLoadHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLibrary::LoadHints* a0;
        int a0State = 0;
         ::QLibrary *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLibrary, &sipCpp, sipType_QLibrary_LoadHints, &a0, &a0State))
        {
            sipCpp->setLoadHints(*a0);
            sipReleaseType(a0,sipType_QLibrary_LoadHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLibrary, sipName_setLoadHints, doc_QLibrary_setLoadHints);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLibrary(void *, const sipTypeDef *);}
static void *cast_QLibrary(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLibrary *sipCpp = reinterpret_cast< ::QLibrary *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLibrary(void *, int);}
static void release_QLibrary(void *sipCppV, int)
{
     ::QLibrary *sipCpp = reinterpret_cast< ::QLibrary *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLibrary(sipSimpleWrapper *);}
static void dealloc_QLibrary(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLibrary *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLibrary(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLibrary(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLibrary(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLibrary *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQLibrary(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQLibrary(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1i|JH", sipType_QString,&a0, &a0State, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQLibrary(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|JH", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQLibrary(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLibrary[] = {{183, 255, 1}};


static PyMethodDef methods_QLibrary[] = {
    {SIP_MLNAME_CAST(sipName_errorString), meth_QLibrary_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_errorString)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QLibrary_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_fileName)},
    {SIP_MLNAME_CAST(sipName_isLibrary), meth_QLibrary_isLibrary, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_isLibrary)},
    {SIP_MLNAME_CAST(sipName_isLoaded), meth_QLibrary_isLoaded, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_isLoaded)},
    {SIP_MLNAME_CAST(sipName_load), meth_QLibrary_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_load)},
    {SIP_MLNAME_CAST(sipName_loadHints), meth_QLibrary_loadHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_loadHints)},
    {SIP_MLNAME_CAST(sipName_resolve), meth_QLibrary_resolve, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_resolve)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QLibrary_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFileNameAndVersion), meth_QLibrary_setFileNameAndVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_setFileNameAndVersion)},
    {SIP_MLNAME_CAST(sipName_setLoadHints), meth_QLibrary_setLoadHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_setLoadHints)},
    {SIP_MLNAME_CAST(sipName_unload), meth_QLibrary_unload, METH_VARARGS, SIP_MLDOC_CAST(doc_QLibrary_unload)}
};

static sipEnumMemberDef enummembers_QLibrary[] = {
    {sipName_DeepBindHint, static_cast<int>( ::QLibrary::DeepBindHint), 114},
    {sipName_ExportExternalSymbolsHint, static_cast<int>( ::QLibrary::ExportExternalSymbolsHint), 114},
    {sipName_LoadArchiveMemberHint, static_cast<int>( ::QLibrary::LoadArchiveMemberHint), 114},
    {sipName_PreventUnloadHint, static_cast<int>( ::QLibrary::PreventUnloadHint), 114},
    {sipName_ResolveAllSymbolsHint, static_cast<int>( ::QLibrary::ResolveAllSymbolsHint), 114},
};

PyDoc_STRVAR(doc_QLibrary, "\1QLibrary(parent: QObject = None)\n"
"QLibrary(str, parent: QObject = None)\n"
"QLibrary(str, int, parent: QObject = None)\n"
"QLibrary(str, str, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QLibrary = {
    & ::QLibrary::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QLibrary = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLibrary,
        {SIP_NULLPTR},
        &plugin_QLibrary
    },
    {
        sipNameNr_QLibrary,
        {0, 0, 1},
        11, methods_QLibrary,
        5, enummembers_QLibrary,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLibrary,
    -1,
    -1,
    supers_QLibrary,
    SIP_NULLPTR,
    init_type_QLibrary,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLibrary,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QLibrary,
    cast_QLibrary,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonvalue.sip"
#include <qjsonvalue.h>
#line 20430 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 20434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 25 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonobject.sip"
#include <qjsonobject.h>
#line 20437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 31 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonarray.sip"
#include <qjsonarray.h>
#line 20440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 20443 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QJsonValue_fromVariant, "fromVariant(Any) -> QJsonValue");

extern "C" {static PyObject *meth_QJsonValue_fromVariant(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_fromVariant(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QVariant, &a0, &a0State))
        {
             ::QJsonValue*sipRes;

            sipRes = new  ::QJsonValue( ::QJsonValue::fromVariant(*a0));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_fromVariant, doc_QJsonValue_fromVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_toVariant, "toVariant(self) -> Any");

extern "C" {static PyObject *meth_QJsonValue_toVariant(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->toVariant());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toVariant, doc_QJsonValue_toVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_type, "type(self) -> QJsonValue.Type");

extern "C" {static PyObject *meth_QJsonValue_type(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
             ::QJsonValue::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QJsonValue_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_type, doc_QJsonValue_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isNull(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isNull, doc_QJsonValue_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_isBool, "isBool(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isBool(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBool();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isBool, doc_QJsonValue_isBool);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_isDouble, "isDouble(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isDouble(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDouble();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isDouble, doc_QJsonValue_isDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_isString, "isString(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isString(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isString();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isString, doc_QJsonValue_isString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_isArray, "isArray(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isArray(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isArray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isArray, doc_QJsonValue_isArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_isObject, "isObject(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isObject(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isObject();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isObject, doc_QJsonValue_isObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_isUndefined, "isUndefined(self) -> bool");

extern "C" {static PyObject *meth_QJsonValue_isUndefined(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_isUndefined(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndefined();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_isUndefined, doc_QJsonValue_isUndefined);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_toBool, "toBool(self, defaultValue: bool = False) -> bool");

extern "C" {static PyObject *meth_QJsonValue_toBool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toBool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0 = 0;
        const  ::QJsonValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_QJsonValue, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->toBool(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toBool, doc_QJsonValue_toBool);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_toInt, "toInt(self, defaultValue: int = 0) -> int");

extern "C" {static PyObject *meth_QJsonValue_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QJsonValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QJsonValue, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->toInt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toInt, doc_QJsonValue_toInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_toDouble, "toDouble(self, defaultValue: float = 0) -> float");

extern "C" {static PyObject *meth_QJsonValue_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0 = 0;
        const  ::QJsonValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|d", &sipSelf, sipType_QJsonValue, &sipCpp, &a0))
        {
            double sipRes;

            sipRes = sipCpp->toDouble(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toDouble, doc_QJsonValue_toDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_toArray, "toArray(self) -> List[QJsonValue]\n"
"toArray(self, Iterable[Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str]]) -> List[QJsonValue]");

extern "C" {static PyObject *meth_QJsonValue_toArray(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
             ::QJsonArray*sipRes;

            sipRes = new  ::QJsonArray(sipCpp->toArray());

            return sipConvertFromNewType(sipRes,sipType_QJsonArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QJsonArray* a0;
        int a0State = 0;
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJsonValue, &sipCpp, sipType_QJsonArray,&a0, &a0State))
        {
             ::QJsonArray*sipRes;

            sipRes = new  ::QJsonArray(sipCpp->toArray(*a0));
            sipReleaseType(const_cast< ::QJsonArray *>(a0),sipType_QJsonArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toArray, doc_QJsonValue_toArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_toObject, "toObject(self) -> Dict[str, QJsonValue]\n"
"toObject(self, Dict[str, QJsonValue]) -> Dict[str, QJsonValue]");

extern "C" {static PyObject *meth_QJsonValue_toObject(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
             ::QJsonObject*sipRes;

            sipRes = new  ::QJsonObject(sipCpp->toObject());

            return sipConvertFromNewType(sipRes,sipType_QJsonObject,SIP_NULLPTR);
        }
    }

    {
        const  ::QJsonObject* a0;
        int a0State = 0;
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJsonValue, &sipCpp, sipType_QJsonObject,&a0, &a0State))
        {
             ::QJsonObject*sipRes;

            sipRes = new  ::QJsonObject(sipCpp->toObject(*a0));
            sipReleaseType(const_cast< ::QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toObject, doc_QJsonValue_toObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_toString, "toString(self) -> str\n"
"toString(self, str) -> str");

extern "C" {static PyObject *meth_QJsonValue_toString(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonValue, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJsonValue, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_toString, doc_QJsonValue_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonValue_swap, "swap(self, QJsonValue)");

extern "C" {static PyObject *meth_QJsonValue_swap(PyObject *, PyObject *);}
static PyObject *meth_QJsonValue_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJsonValue* a0;
         ::QJsonValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QJsonValue, &sipCpp, sipType_QJsonValue, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName_swap, doc_QJsonValue_swap);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QJsonValue___hash__(PyObject *);}
static long slot_QJsonValue___hash__(PyObject *sipSelf)
{
     ::QJsonValue *sipCpp = reinterpret_cast< ::QJsonValue *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonValue));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 91 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonvalue.sip"
        sipRes = qHash(*sipCpp);
#line 21008 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QJsonValue___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QJsonValue___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QJsonValue *sipCpp = reinterpret_cast< ::QJsonValue *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonValue));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
             ::QJsonValue*sipRes;

            sipRes = new  ::QJsonValue((*sipCpp)[*a0]);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonValue,SIP_NULLPTR);
        }
    }

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QJsonValue*sipRes;

            sipRes = new  ::QJsonValue((*sipCpp)[a0]);

            return sipConvertFromNewType(sipRes,sipType_QJsonValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonValue, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QJsonValue___ne__(PyObject *,PyObject *);}
static PyObject *slot_QJsonValue___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QJsonValue *sipCpp = reinterpret_cast< ::QJsonValue *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonValue));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QJsonValue, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QJsonValue::operator!=(*a0);
            sipReleaseType(const_cast< ::QJsonValue *>(a0),sipType_QJsonValue,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QJsonValue, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QJsonValue___eq__(PyObject *,PyObject *);}
static PyObject *slot_QJsonValue___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QJsonValue *sipCpp = reinterpret_cast< ::QJsonValue *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonValue));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonValue* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QJsonValue, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QJsonValue::operator==(*a0);
            sipReleaseType(const_cast< ::QJsonValue *>(a0),sipType_QJsonValue,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QJsonValue, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QJsonValue(void *, int);}
static void release_QJsonValue(void *sipCppV, int)
{
    delete reinterpret_cast< ::QJsonValue *>(sipCppV);
}


extern "C" {static void assign_QJsonValue(void *, SIP_SSIZE_T, void *);}
static void assign_QJsonValue(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QJsonValue *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QJsonValue *>(sipSrc);
}


extern "C" {static void *array_QJsonValue(SIP_SSIZE_T);}
static void *array_QJsonValue(SIP_SSIZE_T sipNrElem)
{
    return new  ::QJsonValue[sipNrElem];
}


extern "C" {static void *copy_QJsonValue(const void *, SIP_SSIZE_T);}
static void *copy_QJsonValue(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QJsonValue(reinterpret_cast<const  ::QJsonValue *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QJsonValue(sipSimpleWrapper *);}
static void dealloc_QJsonValue(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QJsonValue(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QJsonValue(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QJsonValue(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QJsonValue *sipCpp = SIP_NULLPTR;

    {
         ::QJsonValue::Type a0 = QJsonValue::Null;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|XE", sipType_QJsonValue_Type, &a0))
        {
            sipCpp = new  ::QJsonValue(a0);

            return sipCpp;
        }
    }

    {
        const  ::QJsonValue* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QJsonValue, &a0, &a0State))
        {
            sipCpp = new  ::QJsonValue(*a0);
            sipReleaseType(const_cast< ::QJsonValue *>(a0),sipType_QJsonValue,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QJsonValue(PyObject *, void **, int *, PyObject *);}
static int convertTo_QJsonValue(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QJsonValue **sipCppPtr = reinterpret_cast< ::QJsonValue **>(sipCppPtrV);

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonvalue.sip"
if (!sipIsErr)
    return qpycore_canConvertTo_QJsonValue(sipPy);

return qpycore_convertTo_QJsonValue(sipPy, sipTransferObj, sipCppPtr, sipIsErr);
#line 21217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QJsonValue[] = {
    {(void *)slot_QJsonValue___hash__, hash_slot},
    {(void *)slot_QJsonValue___getitem__, getitem_slot},
    {(void *)slot_QJsonValue___ne__, ne_slot},
    {(void *)slot_QJsonValue___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QJsonValue[] = {
    {SIP_MLNAME_CAST(sipName_fromVariant), meth_QJsonValue_fromVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_fromVariant)},
    {SIP_MLNAME_CAST(sipName_isArray), meth_QJsonValue_isArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isArray)},
    {SIP_MLNAME_CAST(sipName_isBool), meth_QJsonValue_isBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isBool)},
    {SIP_MLNAME_CAST(sipName_isDouble), meth_QJsonValue_isDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isDouble)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QJsonValue_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isNull)},
    {SIP_MLNAME_CAST(sipName_isObject), meth_QJsonValue_isObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isObject)},
    {SIP_MLNAME_CAST(sipName_isString), meth_QJsonValue_isString, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isString)},
    {SIP_MLNAME_CAST(sipName_isUndefined), meth_QJsonValue_isUndefined, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_isUndefined)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QJsonValue_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_swap)},
    {SIP_MLNAME_CAST(sipName_toArray), meth_QJsonValue_toArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_toArray)},
    {SIP_MLNAME_CAST(sipName_toBool), SIP_MLMETH_CAST(meth_QJsonValue_toBool), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonValue_toBool)},
    {SIP_MLNAME_CAST(sipName_toDouble), SIP_MLMETH_CAST(meth_QJsonValue_toDouble), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonValue_toDouble)},
    {SIP_MLNAME_CAST(sipName_toInt), SIP_MLMETH_CAST(meth_QJsonValue_toInt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonValue_toInt)},
    {SIP_MLNAME_CAST(sipName_toObject), meth_QJsonValue_toObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_toObject)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QJsonValue_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_toString)},
    {SIP_MLNAME_CAST(sipName_toVariant), meth_QJsonValue_toVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_toVariant)},
    {SIP_MLNAME_CAST(sipName_type), meth_QJsonValue_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonValue_type)}
};

static sipEnumMemberDef enummembers_QJsonValue[] = {
    {sipName_Array, static_cast<int>( ::QJsonValue::Array), 112},
    {sipName_Bool, static_cast<int>( ::QJsonValue::Bool), 112},
    {sipName_Double, static_cast<int>( ::QJsonValue::Double), 112},
    {sipName_Null, static_cast<int>( ::QJsonValue::Null), 112},
    {sipName_Object, static_cast<int>( ::QJsonValue::Object), 112},
    {sipName_String, static_cast<int>( ::QJsonValue::String), 112},
    {sipName_Undefined, static_cast<int>( ::QJsonValue::Undefined), 112},
};

PyDoc_STRVAR(doc_QJsonValue, "\1QJsonValue(type: QJsonValue.Type = QJsonValue.Null)\n"
"QJsonValue(Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str])");


static pyqt5ClassPluginDef plugin_QJsonValue = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QJsonValue = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QJsonValue,
        {SIP_NULLPTR},
        &plugin_QJsonValue
    },
    {
        sipNameNr_QJsonValue,
        {0, 0, 1},
        17, methods_QJsonValue,
        7, enummembers_QJsonValue,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QJsonValue,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QJsonValue,
    init_type_QJsonValue,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QJsonValue,
    assign_QJsonValue,
    array_QJsonValue,
    copy_QJsonValue,
    release_QJsonValue,
    SIP_NULLPTR,
    convertTo_QJsonValue,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsondocument.sip"
#include <qjsondocument.h>
#line 21326 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 25 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonobject.sip"
#include <qjsonobject.h>
#line 21330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 31 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonarray.sip"
#include <qjsonarray.h>
#line 21333 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsonvalue.sip"
#include <qjsonvalue.h>
#line 21336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 21342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsondocument.sip"
#include <qjsondocument.h>
#line 21345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 21348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QJsonDocument_fromRawData, "fromRawData(str, int, validation: QJsonDocument.DataValidation = QJsonDocument.Validate) -> QJsonDocument");

extern "C" {static PyObject *meth_QJsonDocument_fromRawData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_fromRawData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        int a1;
         ::QJsonDocument::DataValidation a2 = QJsonDocument::Validate;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_validation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "si|E", &a0, &a1, sipType_QJsonDocument_DataValidation, &a2))
        {
             ::QJsonDocument*sipRes;

            sipRes = new  ::QJsonDocument( ::QJsonDocument::fromRawData(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QJsonDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_fromRawData, doc_QJsonDocument_fromRawData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_rawData, "rawData(self) -> Tuple[str, int]");

extern "C" {static PyObject *meth_QJsonDocument_rawData(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_rawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->rawData(&a0);

            return sipBuildResult(0,"(si)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_rawData, doc_QJsonDocument_rawData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_fromBinaryData, "fromBinaryData(Union[QByteArray, bytes, bytearray], validation: QJsonDocument.DataValidation = QJsonDocument.Validate) -> QJsonDocument");

extern "C" {static PyObject *meth_QJsonDocument_fromBinaryData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_fromBinaryData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QJsonDocument::DataValidation a1 = QJsonDocument::Validate;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_validation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QByteArray, &a0, &a0State, sipType_QJsonDocument_DataValidation, &a1))
        {
             ::QJsonDocument*sipRes;

            sipRes = new  ::QJsonDocument( ::QJsonDocument::fromBinaryData(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_fromBinaryData, doc_QJsonDocument_fromBinaryData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_toBinaryData, "toBinaryData(self) -> QByteArray");

extern "C" {static PyObject *meth_QJsonDocument_toBinaryData(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_toBinaryData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toBinaryData());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_toBinaryData, doc_QJsonDocument_toBinaryData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_fromVariant, "fromVariant(Any) -> QJsonDocument");

extern "C" {static PyObject *meth_QJsonDocument_fromVariant(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_fromVariant(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QVariant, &a0, &a0State))
        {
             ::QJsonDocument*sipRes;

            sipRes = new  ::QJsonDocument( ::QJsonDocument::fromVariant(*a0));
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_fromVariant, doc_QJsonDocument_fromVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_toVariant, "toVariant(self) -> Any");

extern "C" {static PyObject *meth_QJsonDocument_toVariant(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_toVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->toVariant());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_toVariant, doc_QJsonDocument_toVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_fromJson, "fromJson(Union[QByteArray, bytes, bytearray], error: QJsonParseError = None) -> QJsonDocument");

extern "C" {static PyObject *meth_QJsonDocument_fromJson(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_fromJson(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QJsonParseError* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_error,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|J8", sipType_QByteArray, &a0, &a0State, sipType_QJsonParseError, &a1))
        {
             ::QJsonDocument*sipRes;

            sipRes = new  ::QJsonDocument( ::QJsonDocument::fromJson(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonDocument,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_fromJson, doc_QJsonDocument_fromJson);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_toJson, "toJson(self) -> QByteArray\n"
"toJson(self, QJsonDocument.JsonFormat) -> QByteArray");

extern "C" {static PyObject *meth_QJsonDocument_toJson(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_toJson(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toJson());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
         ::QJsonDocument::JsonFormat a0;
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QJsonDocument, &sipCpp, sipType_QJsonDocument_JsonFormat, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toJson(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_toJson, doc_QJsonDocument_toJson);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QJsonDocument_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_isEmpty, doc_QJsonDocument_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_isArray, "isArray(self) -> bool");

extern "C" {static PyObject *meth_QJsonDocument_isArray(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_isArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isArray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_isArray, doc_QJsonDocument_isArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_isObject, "isObject(self) -> bool");

extern "C" {static PyObject *meth_QJsonDocument_isObject(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_isObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isObject();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_isObject, doc_QJsonDocument_isObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_object, "object(self) -> Dict[str, QJsonValue]");

extern "C" {static PyObject *meth_QJsonDocument_object(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
             ::QJsonObject*sipRes;

            sipRes = new  ::QJsonObject(sipCpp->object());

            return sipConvertFromNewType(sipRes,sipType_QJsonObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_object, doc_QJsonDocument_object);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_array, "array(self) -> List[QJsonValue]");

extern "C" {static PyObject *meth_QJsonDocument_array(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_array(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
             ::QJsonArray*sipRes;

            sipRes = new  ::QJsonArray(sipCpp->array());

            return sipConvertFromNewType(sipRes,sipType_QJsonArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_array, doc_QJsonDocument_array);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_setObject, "setObject(self, Dict[str, QJsonValue])");

extern "C" {static PyObject *meth_QJsonDocument_setObject(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_setObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonObject* a0;
        int a0State = 0;
         ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJsonDocument, &sipCpp, sipType_QJsonObject,&a0, &a0State))
        {
            sipCpp->setObject(*a0);
            sipReleaseType(const_cast< ::QJsonObject *>(a0),sipType_QJsonObject,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_setObject, doc_QJsonDocument_setObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_setArray, "setArray(self, Iterable[Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str]])");

extern "C" {static PyObject *meth_QJsonDocument_setArray(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_setArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonArray* a0;
        int a0State = 0;
         ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJsonDocument, &sipCpp, sipType_QJsonArray,&a0, &a0State))
        {
            sipCpp->setArray(*a0);
            sipReleaseType(const_cast< ::QJsonArray *>(a0),sipType_QJsonArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_setArray, doc_QJsonDocument_setArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QJsonDocument_isNull(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_isNull, doc_QJsonDocument_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJsonDocument_swap, "swap(self, QJsonDocument)");

extern "C" {static PyObject *meth_QJsonDocument_swap(PyObject *, PyObject *);}
static PyObject *meth_QJsonDocument_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJsonDocument* a0;
         ::QJsonDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QJsonDocument, &sipCpp, sipType_QJsonDocument, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName_swap, doc_QJsonDocument_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QJsonDocument___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QJsonDocument___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QJsonDocument *sipCpp = reinterpret_cast< ::QJsonDocument *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonDocument));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
             ::QJsonValue*sipRes;

            sipRes = new  ::QJsonValue((*sipCpp)[*a0]);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJsonValue,SIP_NULLPTR);
        }
    }

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QJsonValue*sipRes;

            sipRes = new  ::QJsonValue((*sipCpp)[a0]);

            return sipConvertFromNewType(sipRes,sipType_QJsonValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonDocument, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QJsonDocument___ne__(PyObject *,PyObject *);}
static PyObject *slot_QJsonDocument___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QJsonDocument *sipCpp = reinterpret_cast< ::QJsonDocument *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonDocument));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QJsonDocument, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QJsonDocument::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QJsonDocument, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QJsonDocument___eq__(PyObject *,PyObject *);}
static PyObject *slot_QJsonDocument___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QJsonDocument *sipCpp = reinterpret_cast< ::QJsonDocument *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJsonDocument));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonDocument* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QJsonDocument, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QJsonDocument::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QJsonDocument, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QJsonDocument(void *, int);}
static void release_QJsonDocument(void *sipCppV, int)
{
    delete reinterpret_cast< ::QJsonDocument *>(sipCppV);
}


extern "C" {static void assign_QJsonDocument(void *, SIP_SSIZE_T, void *);}
static void assign_QJsonDocument(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QJsonDocument *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QJsonDocument *>(sipSrc);
}


extern "C" {static void *array_QJsonDocument(SIP_SSIZE_T);}
static void *array_QJsonDocument(SIP_SSIZE_T sipNrElem)
{
    return new  ::QJsonDocument[sipNrElem];
}


extern "C" {static void *copy_QJsonDocument(const void *, SIP_SSIZE_T);}
static void *copy_QJsonDocument(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QJsonDocument(reinterpret_cast<const  ::QJsonDocument *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QJsonDocument(sipSimpleWrapper *);}
static void dealloc_QJsonDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QJsonDocument(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QJsonDocument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QJsonDocument(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QJsonDocument *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QJsonDocument();

            return sipCpp;
        }
    }

    {
        const  ::QJsonObject* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QJsonObject,&a0, &a0State))
        {
            sipCpp = new  ::QJsonDocument(*a0);
            sipReleaseType(const_cast< ::QJsonObject *>(a0),sipType_QJsonObject,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QJsonArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QJsonArray,&a0, &a0State))
        {
            sipCpp = new  ::QJsonDocument(*a0);
            sipReleaseType(const_cast< ::QJsonArray *>(a0),sipType_QJsonArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QJsonDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QJsonDocument, &a0))
        {
            sipCpp = new  ::QJsonDocument(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QJsonDocument[] = {
    {(void *)slot_QJsonDocument___getitem__, getitem_slot},
    {(void *)slot_QJsonDocument___ne__, ne_slot},
    {(void *)slot_QJsonDocument___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QJsonDocument[] = {
    {SIP_MLNAME_CAST(sipName_array), meth_QJsonDocument_array, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_array)},
    {SIP_MLNAME_CAST(sipName_fromBinaryData), SIP_MLMETH_CAST(meth_QJsonDocument_fromBinaryData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonDocument_fromBinaryData)},
    {SIP_MLNAME_CAST(sipName_fromJson), SIP_MLMETH_CAST(meth_QJsonDocument_fromJson), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonDocument_fromJson)},
    {SIP_MLNAME_CAST(sipName_fromRawData), SIP_MLMETH_CAST(meth_QJsonDocument_fromRawData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJsonDocument_fromRawData)},
    {SIP_MLNAME_CAST(sipName_fromVariant), meth_QJsonDocument_fromVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_fromVariant)},
    {SIP_MLNAME_CAST(sipName_isArray), meth_QJsonDocument_isArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_isArray)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QJsonDocument_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QJsonDocument_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_isNull)},
    {SIP_MLNAME_CAST(sipName_isObject), meth_QJsonDocument_isObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_isObject)},
    {SIP_MLNAME_CAST(sipName_object), meth_QJsonDocument_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_object)},
    {SIP_MLNAME_CAST(sipName_rawData), meth_QJsonDocument_rawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_rawData)},
    {SIP_MLNAME_CAST(sipName_setArray), meth_QJsonDocument_setArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_setArray)},
    {SIP_MLNAME_CAST(sipName_setObject), meth_QJsonDocument_setObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_setObject)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QJsonDocument_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_swap)},
    {SIP_MLNAME_CAST(sipName_toBinaryData), meth_QJsonDocument_toBinaryData, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_toBinaryData)},
    {SIP_MLNAME_CAST(sipName_toJson), meth_QJsonDocument_toJson, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_toJson)},
    {SIP_MLNAME_CAST(sipName_toVariant), meth_QJsonDocument_toVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonDocument_toVariant)}
};

static sipEnumMemberDef enummembers_QJsonDocument[] = {
    {sipName_BypassValidation, static_cast<int>( ::QJsonDocument::BypassValidation), 106},
    {sipName_Compact, static_cast<int>( ::QJsonDocument::Compact), 107},
    {sipName_Indented, static_cast<int>( ::QJsonDocument::Indented), 107},
    {sipName_Validate, static_cast<int>( ::QJsonDocument::Validate), 106},
};

PyDoc_STRVAR(doc_QJsonDocument, "\1QJsonDocument()\n"
"QJsonDocument(Dict[str, QJsonValue])\n"
"QJsonDocument(Iterable[Union[QJsonValue, QJsonValue.Type, Dict[str, QJsonValue], bool, int, float, str]])\n"
"QJsonDocument(QJsonDocument)");


static pyqt5ClassPluginDef plugin_QJsonDocument = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QJsonDocument = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QJsonDocument,
        {SIP_NULLPTR},
        &plugin_QJsonDocument
    },
    {
        sipNameNr_QJsonDocument,
        {0, 0, 1},
        17, methods_QJsonDocument,
        4, enummembers_QJsonDocument,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QJsonDocument,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QJsonDocument,
    init_type_QJsonDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QJsonDocument,
    assign_QJsonDocument,
    array_QJsonDocument,
    copy_QJsonDocument,
    release_QJsonDocument,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qjsondocument.sip"
#include <qjsondocument.h>
#line 22182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 22186 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QJsonParseError_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QJsonParseError_errorString(PyObject *, PyObject *);}
static PyObject *meth_QJsonParseError_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJsonParseError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJsonParseError, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJsonParseError, sipName_errorString, doc_QJsonParseError_errorString);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QJsonParseError(void *, int);}
static void release_QJsonParseError(void *sipCppV, int)
{
    delete reinterpret_cast< ::QJsonParseError *>(sipCppV);
}


extern "C" {static void assign_QJsonParseError(void *, SIP_SSIZE_T, void *);}
static void assign_QJsonParseError(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QJsonParseError *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QJsonParseError *>(sipSrc);
}


extern "C" {static void *array_QJsonParseError(SIP_SSIZE_T);}
static void *array_QJsonParseError(SIP_SSIZE_T sipNrElem)
{
    return new  ::QJsonParseError[sipNrElem];
}


extern "C" {static void *copy_QJsonParseError(const void *, SIP_SSIZE_T);}
static void *copy_QJsonParseError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QJsonParseError(reinterpret_cast<const  ::QJsonParseError *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QJsonParseError(sipSimpleWrapper *);}
static void dealloc_QJsonParseError(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QJsonParseError(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QJsonParseError(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QJsonParseError(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QJsonParseError *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QJsonParseError();

            return sipCpp;
        }
    }

    {
        const  ::QJsonParseError* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QJsonParseError, &a0))
        {
            sipCpp = new  ::QJsonParseError(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QJsonParseError[] = {
    {SIP_MLNAME_CAST(sipName_errorString), meth_QJsonParseError_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QJsonParseError_errorString)}
};

static sipEnumMemberDef enummembers_QJsonParseError[] = {
    {sipName_DeepNesting, static_cast<int>( ::QJsonParseError::DeepNesting), 110},
    {sipName_DocumentTooLarge, static_cast<int>( ::QJsonParseError::DocumentTooLarge), 110},
    {sipName_GarbageAtEnd, static_cast<int>( ::QJsonParseError::GarbageAtEnd), 110},
    {sipName_IllegalEscapeSequence, static_cast<int>( ::QJsonParseError::IllegalEscapeSequence), 110},
    {sipName_IllegalNumber, static_cast<int>( ::QJsonParseError::IllegalNumber), 110},
    {sipName_IllegalUTF8String, static_cast<int>( ::QJsonParseError::IllegalUTF8String), 110},
    {sipName_IllegalValue, static_cast<int>( ::QJsonParseError::IllegalValue), 110},
    {sipName_MissingNameSeparator, static_cast<int>( ::QJsonParseError::MissingNameSeparator), 110},
    {sipName_MissingObject, static_cast<int>( ::QJsonParseError::MissingObject), 110},
    {sipName_MissingValueSeparator, static_cast<int>( ::QJsonParseError::MissingValueSeparator), 110},
    {sipName_NoError, static_cast<int>( ::QJsonParseError::NoError), 110},
    {sipName_TerminationByNumber, static_cast<int>( ::QJsonParseError::TerminationByNumber), 110},
    {sipName_UnterminatedArray, static_cast<int>( ::QJsonParseError::UnterminatedArray), 110},
    {sipName_UnterminatedObject, static_cast<int>( ::QJsonParseError::UnterminatedObject), 110},
    {sipName_UnterminatedString, static_cast<int>( ::QJsonParseError::UnterminatedString), 110},
};


extern "C" {static PyObject *varget_QJsonParseError_error(void *, PyObject *, PyObject *);}
static PyObject *varget_QJsonParseError_error(void *sipSelf, PyObject *, PyObject *)
{
     ::QJsonParseError::ParseError sipVal;
     ::QJsonParseError *sipCpp = reinterpret_cast< ::QJsonParseError *>(sipSelf);

    sipVal = sipCpp->error;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QJsonParseError_ParseError);
}


extern "C" {static int varset_QJsonParseError_error(void *, PyObject *, PyObject *);}
static int varset_QJsonParseError_error(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QJsonParseError::ParseError sipVal;
     ::QJsonParseError *sipCpp = reinterpret_cast< ::QJsonParseError *>(sipSelf);

    sipVal = ( ::QJsonParseError::ParseError)sipConvertToEnum(sipPy, sipType_QJsonParseError_ParseError);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->error = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QJsonParseError_offset(void *, PyObject *, PyObject *);}
static PyObject *varget_QJsonParseError_offset(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QJsonParseError *sipCpp = reinterpret_cast< ::QJsonParseError *>(sipSelf);

    sipVal = sipCpp->offset;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QJsonParseError_offset(void *, PyObject *, PyObject *);}
static int varset_QJsonParseError_offset(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QJsonParseError *sipCpp = reinterpret_cast< ::QJsonParseError *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->offset = sipVal;

    return 0;
}

sipVariableDef variables_QJsonParseError[] = {
    {InstanceVariable, sipName_error, (PyMethodDef *)varget_QJsonParseError_error, (PyMethodDef *)varset_QJsonParseError_error, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_offset, (PyMethodDef *)varget_QJsonParseError_offset, (PyMethodDef *)varset_QJsonParseError_offset, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QJsonParseError, "\1QJsonParseError()\n"
"QJsonParseError(QJsonParseError)");


static pyqt5ClassPluginDef plugin_QJsonParseError = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QJsonParseError = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QJsonParseError,
        {SIP_NULLPTR},
        &plugin_QJsonParseError
    },
    {
        sipNameNr_QJsonParseError,
        {0, 0, 1},
        1, methods_QJsonParseError,
        15, enummembers_QJsonParseError,
        2, variables_QJsonParseError,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QJsonParseError,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QJsonParseError,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QJsonParseError,
    assign_QJsonParseError,
    array_QJsonParseError,
    copy_QJsonParseError,
    release_QJsonParseError,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 22435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 22439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 22442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 22445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22448 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QItemSelection_select, "select(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QItemSelection_select(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->select(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_select, doc_QItemSelection_select);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_contains, "contains(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelection_contains(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_contains, doc_QItemSelection_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_indexes, "indexes(self) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QItemSelection_indexes(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_indexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->indexes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_indexes, doc_QItemSelection_indexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_merge, "merge(self, QItemSelection, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QItemSelection_merge(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelection* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            sipCpp->merge(*a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_merge, doc_QItemSelection_merge);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_split, "split(QItemSelectionRange, QItemSelectionRange, QItemSelection)");

extern "C" {static PyObject *meth_QItemSelection_split(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_split(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
        const  ::QItemSelectionRange* a1;
         ::QItemSelection* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9J8", sipType_QItemSelectionRange, &a0, sipType_QItemSelectionRange, &a1, sipType_QItemSelection, &a2))
        {
             ::QItemSelection::split(*a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_split, doc_QItemSelection_split);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_clear, "clear(self)");

extern "C" {static PyObject *meth_QItemSelection_clear(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_clear, doc_QItemSelection_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QItemSelection_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_isEmpty, doc_QItemSelection_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_append, "append(self, QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelection_append(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            sipCpp->append(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_append, doc_QItemSelection_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_prepend, "prepend(self, QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelection_prepend(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            sipCpp->prepend(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_prepend, doc_QItemSelection_prepend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_insert, "insert(self, int, QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelection_insert(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QItemSelectionRange* a1;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelection, &sipCpp, &a0, sipType_QItemSelectionRange, &a1))
        {
            sipCpp->insert(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_insert, doc_QItemSelection_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_replace, "replace(self, int, QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelection_replace(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QItemSelectionRange* a1;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelection, &sipCpp, &a0, sipType_QItemSelectionRange, &a1))
        {
            sipCpp->replace(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_replace, doc_QItemSelection_replace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_removeAt, "removeAt(self, int)");

extern "C" {static PyObject *meth_QItemSelection_removeAt(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_removeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QItemSelection, &sipCpp, &a0))
        {
            sipCpp->removeAt(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_removeAt, doc_QItemSelection_removeAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_removeAll, "removeAll(self, QItemSelectionRange) -> int");

extern "C" {static PyObject *meth_QItemSelection_removeAll(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_removeAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            int sipRes;

            sipRes = sipCpp->removeAll(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_removeAll, doc_QItemSelection_removeAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_takeAt, "takeAt(self, int) -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QItemSelection, &sipCpp, &a0))
        {
             ::QItemSelectionRange*sipRes;

            sipRes = new  ::QItemSelectionRange(sipCpp->takeAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_takeAt, doc_QItemSelection_takeAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_takeFirst, "takeFirst(self) -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_takeFirst(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
             ::QItemSelectionRange*sipRes;

            sipRes = new  ::QItemSelectionRange(sipCpp->takeFirst());

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_takeFirst, doc_QItemSelection_takeFirst);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_takeLast, "takeLast(self) -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_takeLast(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
             ::QItemSelectionRange*sipRes;

            sipRes = new  ::QItemSelectionRange(sipCpp->takeLast());

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_takeLast, doc_QItemSelection_takeLast);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_move, "move(self, int, int)");

extern "C" {static PyObject *meth_QItemSelection_move(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_move(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QItemSelection, &sipCpp, &a0, &a1))
        {
            sipCpp->move(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_move, doc_QItemSelection_move);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_swap, "swap(self, int, int)");

extern "C" {static PyObject *meth_QItemSelection_swap(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QItemSelection, &sipCpp, &a0, &a1))
        {
            sipCpp->swap(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_swap, doc_QItemSelection_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_count, "count(self, QItemSelectionRange) -> int\n"
"count(self) -> int");

extern "C" {static PyObject *meth_QItemSelection_count(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
        const  ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            int sipRes;

            sipRes = sipCpp->count(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_count, doc_QItemSelection_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_first, "first(self) -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_first(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
             ::QItemSelectionRange*sipRes;

            sipRes = &sipCpp->first();

            return sipConvertFromType(sipRes,sipType_QItemSelectionRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_first, doc_QItemSelection_first);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_last, "last(self) -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_last(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
             ::QItemSelectionRange*sipRes;

            sipRes = &sipCpp->last();

            return sipConvertFromType(sipRes,sipType_QItemSelectionRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_last, doc_QItemSelection_last);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_indexOf, "indexOf(self, QItemSelectionRange, from_: int = 0) -> int");

extern "C" {static PyObject *meth_QItemSelection_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
        int a1 = 0;
        const  ::QItemSelection *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_indexOf, doc_QItemSelection_indexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelection_lastIndexOf, "lastIndexOf(self, QItemSelectionRange, from_: int = -1) -> int");

extern "C" {static PyObject *meth_QItemSelection_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
        int a1 = -1;
        const  ::QItemSelection *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexOf(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_lastIndexOf, doc_QItemSelection_lastIndexOf);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QItemSelection___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelection___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelection *sipCpp = reinterpret_cast< ::QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelection* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelection, &a0))
        {
            sipCpp-> ::QItemSelection::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QItemSelectionRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelectionRange, &a0))
        {
            sipCpp-> ::QItemSelection::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QItemSelection___len__(PyObject *);}
static SIP_SSIZE_T slot_QItemSelection___len__(PyObject *sipSelf)
{
     ::QItemSelection *sipCpp = reinterpret_cast< ::QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 23192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QItemSelection___eq__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelection___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelection *sipCpp = reinterpret_cast< ::QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelection* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelection, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QItemSelection::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QItemSelection, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QItemSelection___ne__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelection___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelection *sipCpp = reinterpret_cast< ::QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelection* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelection, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QItemSelection::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QItemSelection, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QItemSelection___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelection___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelection *sipCpp = reinterpret_cast< ::QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QItemSelectionRange*sipRes = 0;
            int sipIsErr = 0;

#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
        Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QItemSelectionRange(sipCpp->operator[]((int)idx));
#line 23291 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QItemSelection*sipRes = 0;
            int sipIsErr = 0;

#line 245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
        Py_ssize_t start, stop, step, slicelength;
        
        if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
        {
            sipIsErr = 1;
        }
        else
        {
            sipRes = new QItemSelection();
        
            for (Py_ssize_t i = 0; i < slicelength; ++i)
            {
                (*sipRes) += (*sipCpp)[start];
                start += step;
            }
        }
#line 23325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static int slot_QItemSelection___delitem__(PyObject *,PyObject *);}
static int slot_QItemSelection___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelection *sipCpp = reinterpret_cast< ::QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 209 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, sipCpp->count())) < 0)
            sipIsErr = 1;
        else
            sipCpp->removeAt(a0);
#line 23363 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
        Py_ssize_t start, stop, step, slicelength;
        
        if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
        {
            sipIsErr = 1;
        }
        else
        {
            for (Py_ssize_t i = 0; i < slicelength; ++i)
            {
                sipCpp->removeAt(start);
                start += step - 1;
            }
        }
#line 23394 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName___delitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QItemSelection___setitem__(PyObject *,PyObject *);}
static int slot_QItemSelection___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QItemSelection *sipCpp = reinterpret_cast< ::QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QItemSelectionRange* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ9", &a0, sipType_QItemSelectionRange, &a1))
        {
            int sipIsErr = 0;

#line 166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
        int len;
        
        len = sipCpp->count();
        
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
            sipIsErr = 1;
        else
            (*sipCpp)[a0] = *a1;
#line 23437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const  ::QItemSelection* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QItemSelection, &a1))
        {
            int sipIsErr = 0;

#line 178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
        Py_ssize_t start, stop, step, slicelength;
        
        if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
        {
            sipIsErr = 1;
        }
        else
        {
            int vlen = a1->count();
        
            if (vlen != slicelength)
            {
                sipBadLengthForSlice(vlen, slicelength);
                sipIsErr = 1;
            }
            else
            {
                QItemSelection::const_iterator it = a1->begin();
        
                for (Py_ssize_t i = 0; i < slicelength; ++i)
                {
                    (*sipCpp)[start] = *it;
                    start += step;
                    ++it;
                }
            }
        }
#line 23482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName___setitem__, SIP_NULLPTR);

    return -1;
}


extern "C" {static int slot_QItemSelection___contains__(PyObject *,PyObject *);}
static int slot_QItemSelection___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelection *sipCpp = reinterpret_cast< ::QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QModelIndex, &a0))
        {
            int sipRes = 0;

#line 157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
        // It looks like you can't assign QBool to int.
        sipRes = bool(sipCpp->contains(*a0));
#line 23518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName___contains__, SIP_NULLPTR);

    return -1;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelection(void *, int);}
static void release_QItemSelection(void *sipCppV, int)
{
    delete reinterpret_cast< ::QItemSelection *>(sipCppV);
}


extern "C" {static void assign_QItemSelection(void *, SIP_SSIZE_T, void *);}
static void assign_QItemSelection(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QItemSelection *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QItemSelection *>(sipSrc);
}


extern "C" {static void *array_QItemSelection(SIP_SSIZE_T);}
static void *array_QItemSelection(SIP_SSIZE_T sipNrElem)
{
    return new  ::QItemSelection[sipNrElem];
}


extern "C" {static void *copy_QItemSelection(const void *, SIP_SSIZE_T);}
static void *copy_QItemSelection(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QItemSelection(reinterpret_cast<const  ::QItemSelection *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QItemSelection(sipSimpleWrapper *);}
static void dealloc_QItemSelection(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QItemSelection(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QItemSelection(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QItemSelection(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QItemSelection *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QItemSelection();

            return sipCpp;
        }
    }

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp = new  ::QItemSelection(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::QItemSelection* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QItemSelection, &a0))
        {
            sipCpp = new  ::QItemSelection(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QItemSelection[] = {
    {(void *)slot_QItemSelection___iadd__, iconcat_slot},
    {(void *)slot_QItemSelection___len__, len_slot},
    {(void *)slot_QItemSelection___eq__, eq_slot},
    {(void *)slot_QItemSelection___ne__, ne_slot},
    {(void *)slot_QItemSelection___getitem__, getitem_slot},
    {(void *)slot_QItemSelection___delitem__, delitem_slot},
    {(void *)slot_QItemSelection___setitem__, setitem_slot},
    {(void *)slot_QItemSelection___contains__, contains_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QItemSelection[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QItemSelection_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_append)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QItemSelection_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QItemSelection_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_contains)},
    {SIP_MLNAME_CAST(sipName_count), meth_QItemSelection_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_count)},
    {SIP_MLNAME_CAST(sipName_first), meth_QItemSelection_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_first)},
    {SIP_MLNAME_CAST(sipName_indexOf), SIP_MLMETH_CAST(meth_QItemSelection_indexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QItemSelection_indexOf)},
    {SIP_MLNAME_CAST(sipName_indexes), meth_QItemSelection_indexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_indexes)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QItemSelection_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_insert)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QItemSelection_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_isEmpty)},
    {SIP_MLNAME_CAST(sipName_last), meth_QItemSelection_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_last)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), SIP_MLMETH_CAST(meth_QItemSelection_lastIndexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QItemSelection_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_merge), meth_QItemSelection_merge, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_merge)},
    {SIP_MLNAME_CAST(sipName_move), meth_QItemSelection_move, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_move)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QItemSelection_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_prepend)},
    {SIP_MLNAME_CAST(sipName_removeAll), meth_QItemSelection_removeAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_removeAll)},
    {SIP_MLNAME_CAST(sipName_removeAt), meth_QItemSelection_removeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_removeAt)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QItemSelection_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_replace)},
    {SIP_MLNAME_CAST(sipName_select), meth_QItemSelection_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_select)},
    {SIP_MLNAME_CAST(sipName_split), meth_QItemSelection_split, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_split)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QItemSelection_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_swap)},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QItemSelection_takeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_takeAt)},
    {SIP_MLNAME_CAST(sipName_takeFirst), meth_QItemSelection_takeFirst, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_takeFirst)},
    {SIP_MLNAME_CAST(sipName_takeLast), meth_QItemSelection_takeLast, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_takeLast)}
};

PyDoc_STRVAR(doc_QItemSelection, "\1QItemSelection()\n"
"QItemSelection(QModelIndex, QModelIndex)\n"
"QItemSelection(QItemSelection)");


static pyqt5ClassPluginDef plugin_QItemSelection = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QItemSelection = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QItemSelection,
        {SIP_NULLPTR},
        &plugin_QItemSelection
    },
    {
        sipNameNr_QItemSelection,
        {0, 0, 1},
        23, methods_QItemSelection,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QItemSelection,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QItemSelection,
    init_type_QItemSelection,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QItemSelection,
    assign_QItemSelection,
    array_QItemSelection,
    copy_QItemSelection,
    release_QItemSelection,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 23718 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 23722 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QItemSelectionModel_SelectionFlags___hash__(PyObject *);}
static long slot_QItemSelectionModel_SelectionFlags___hash__(PyObject *sipSelf)
{
     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QItemSelectionModel::SelectionFlags::Int();
#line 23740 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QItemSelectionModel_SelectionFlags___bool__(PyObject *);}
static int slot_QItemSelectionModel_SelectionFlags___bool__(PyObject *sipSelf)
{
     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QItemSelectionModel::SelectionFlags::Int() != 0);
#line 23765 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel::SelectionFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QItemSelectionModel_SelectionFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QItemSelectionModel::SelectionFlags::Int() != a0->operator QItemSelectionModel::SelectionFlags::Int());
#line 23795 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QItemSelectionModel::SelectionFlags *>(a0),sipType_QItemSelectionModel_SelectionFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QItemSelectionModel_SelectionFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel::SelectionFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QItemSelectionModel_SelectionFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QItemSelectionModel::SelectionFlags::Int() == a0->operator QItemSelectionModel::SelectionFlags::Int());
#line 23831 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QItemSelectionModel::SelectionFlags *>(a0),sipType_QItemSelectionModel_SelectionFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QItemSelectionModel_SelectionFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QItemSelectionModel_SelectionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QItemSelectionModel::SelectionFlags(*sipCpp ^ a0);
#line 23870 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionModel::SelectionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QItemSelectionModel_SelectionFlags, &a0, &a0State, &a1))
        {
             ::QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new  ::QItemSelectionModel::SelectionFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QItemSelectionModel_SelectionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QItemSelectionModel_SelectionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QItemSelectionModel::SelectionFlags(*sipCpp | a0);
#line 23942 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionModel::SelectionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QItemSelectionModel_SelectionFlags, &a0, &a0State, &a1))
        {
             ::QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new  ::QItemSelectionModel::SelectionFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QItemSelectionModel_SelectionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QItemSelectionModel_SelectionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QItemSelectionModel::SelectionFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionModel::SelectionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QItemSelectionModel_SelectionFlags, &a0, &a0State, &a1))
        {
             ::QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new  ::QItemSelectionModel::SelectionFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QItemSelectionModel_SelectionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___invert__(PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___invert__(PyObject *sipSelf)
{
     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new  ::QItemSelectionModel::SelectionFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QItemSelectionModel_SelectionFlags___int__(PyObject *);}
static PyObject *slot_QItemSelectionModel_SelectionFlags___int__(PyObject *sipSelf)
{
     ::QItemSelectionModel::SelectionFlags *sipCpp = reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionModel_SelectionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelectionModel_SelectionFlags(void *, int);}
static void release_QItemSelectionModel_SelectionFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipCppV);
}


extern "C" {static void assign_QItemSelectionModel_SelectionFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QItemSelectionModel_SelectionFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QItemSelectionModel::SelectionFlags *>(sipSrc);
}


extern "C" {static void *array_QItemSelectionModel_SelectionFlags(SIP_SSIZE_T);}
static void *array_QItemSelectionModel_SelectionFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QItemSelectionModel::SelectionFlags[sipNrElem];
}


extern "C" {static void *copy_QItemSelectionModel_SelectionFlags(const void *, SIP_SSIZE_T);}
static void *copy_QItemSelectionModel_SelectionFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QItemSelectionModel::SelectionFlags(reinterpret_cast<const  ::QItemSelectionModel::SelectionFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QItemSelectionModel_SelectionFlags(sipSimpleWrapper *);}
static void dealloc_QItemSelectionModel_SelectionFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QItemSelectionModel_SelectionFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QItemSelectionModel_SelectionFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QItemSelectionModel_SelectionFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QItemSelectionModel::SelectionFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QItemSelectionModel::SelectionFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QItemSelectionModel::SelectionFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QItemSelectionModel::SelectionFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QItemSelectionModel_SelectionFlags, &a0, &a0State))
        {
            sipCpp = new  ::QItemSelectionModel::SelectionFlags(*a0);
            sipReleaseType(const_cast< ::QItemSelectionModel::SelectionFlags *>(a0),sipType_QItemSelectionModel_SelectionFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QItemSelectionModel_SelectionFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QItemSelectionModel_SelectionFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QItemSelectionModel::SelectionFlags **sipCppPtr = reinterpret_cast< ::QItemSelectionModel::SelectionFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QItemSelectionModel::SelectionFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QItemSelectionModel_SelectionFlag)) ||
            sipCanConvertToType(sipPy, sipType_QItemSelectionModel_SelectionFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QItemSelectionModel_SelectionFlag)))
{
    *sipCppPtr = new QItemSelectionModel::SelectionFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QItemSelectionModel::SelectionFlags *>(sipConvertToType(sipPy, sipType_QItemSelectionModel_SelectionFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 24210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QItemSelectionModel_SelectionFlags[] = {
    {(void *)slot_QItemSelectionModel_SelectionFlags___hash__, hash_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___bool__, bool_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___ne__, ne_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___eq__, eq_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___ixor__, ixor_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___xor__, xor_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___ior__, ior_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___or__, or_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___iand__, iand_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___and__, and_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___invert__, invert_slot},
    {(void *)slot_QItemSelectionModel_SelectionFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QItemSelectionModel_SelectionFlags, "\1QItemSelectionModel.SelectionFlags()\n"
"QItemSelectionModel.SelectionFlags(Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])\n"
"QItemSelectionModel.SelectionFlags(QItemSelectionModel.SelectionFlags)");


static pyqt5ClassPluginDef plugin_QItemSelectionModel_SelectionFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QItemSelectionModel_SelectionFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QItemSelectionModel__SelectionFlags,
        {SIP_NULLPTR},
        &plugin_QItemSelectionModel_SelectionFlags
    },
    {
        sipNameNr_SelectionFlags,
        {100, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QItemSelectionModel_SelectionFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QItemSelectionModel_SelectionFlags,
    init_type_QItemSelectionModel_SelectionFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QItemSelectionModel_SelectionFlags,
    assign_QItemSelectionModel_SelectionFlags,
    array_QItemSelectionModel_SelectionFlags,
    copy_QItemSelectionModel_SelectionFlags,
    release_QItemSelectionModel_SelectionFlags,
    SIP_NULLPTR,
    convertTo_QItemSelectionModel_SelectionFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 24298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 24302 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 24305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 24308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 24311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 24314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 67 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 24317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 24320 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 24323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 24326 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 24329 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 24332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 24335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 24338 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 24341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 24344 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 24347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 24350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 24353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 24356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 24359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 24362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQItemSelectionModel : public  ::QItemSelectionModel
{
public:
    sipQItemSelectionModel( ::QAbstractItemModel*);
    sipQItemSelectionModel( ::QAbstractItemModel*, ::QObject*);
    virtual ~sipQItemSelectionModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void clearCurrentIndex() SIP_OVERRIDE;
    void setCurrentIndex(const  ::QModelIndex&, ::QItemSelectionModel::SelectionFlags) SIP_OVERRIDE;
    void select(const  ::QItemSelection&, ::QItemSelectionModel::SelectionFlags) SIP_OVERRIDE;
    void select(const  ::QModelIndex&, ::QItemSelectionModel::SelectionFlags) SIP_OVERRIDE;
    void reset() SIP_OVERRIDE;
    void clear() SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQItemSelectionModel(const sipQItemSelectionModel &);
    sipQItemSelectionModel &operator = (const sipQItemSelectionModel &);

    char sipPyMethods[13];
};

sipQItemSelectionModel::sipQItemSelectionModel( ::QAbstractItemModel*a0):  ::QItemSelectionModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemSelectionModel::sipQItemSelectionModel( ::QAbstractItemModel*a0, ::QObject*a1):  ::QItemSelectionModel(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemSelectionModel::~sipQItemSelectionModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQItemSelectionModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QItemSelectionModel);

    return  ::QItemSelectionModel::metaObject();
}

int sipQItemSelectionModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QItemSelectionModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QItemSelectionModel,_c,_id,_a);

    return _id;
}

void *sipQItemSelectionModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QItemSelectionModel, _clname, &sipCpp) ? sipCpp :  ::QItemSelectionModel::qt_metacast(_clname));
}

void sipQItemSelectionModel::clearCurrentIndex()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_clearCurrentIndex);

    if (!sipMeth)
    {
         ::QItemSelectionModel::clearCurrentIndex();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQItemSelectionModel::setCurrentIndex(const  ::QModelIndex& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_setCurrentIndex);

    if (!sipMeth)
    {
         ::QItemSelectionModel::setCurrentIndex(a0,a1);
        return;
    }

    extern void sipVH_QtCore_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtCore_53(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::select(const  ::QItemSelection& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_select);

    if (!sipMeth)
    {
         ::QItemSelectionModel::select(a0,a1);
        return;
    }

    extern void sipVH_QtCore_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtCore_54(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::select(const  ::QModelIndex& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_select);

    if (!sipMeth)
    {
         ::QItemSelectionModel::select(a0,a1);
        return;
    }

    extern void sipVH_QtCore_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtCore_53(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
    {
         ::QItemSelectionModel::reset();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQItemSelectionModel::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_clear);

    if (!sipMeth)
    {
         ::QItemSelectionModel::clear();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQItemSelectionModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QItemSelectionModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQItemSelectionModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QItemSelectionModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQItemSelectionModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QItemSelectionModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QItemSelectionModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QItemSelectionModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QItemSelectionModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQItemSelectionModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QItemSelectionModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QItemSelectionModel_currentIndex, "currentIndex(self) -> QModelIndex");

extern "C" {static PyObject *meth_QItemSelectionModel_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->currentIndex());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_currentIndex, doc_QItemSelectionModel_currentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isSelected, "isSelected(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSelected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isSelected, doc_QItemSelectionModel_isSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isRowSelected, "isRowSelected(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isRowSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isRowSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isRowSelected(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isRowSelected, doc_QItemSelectionModel_isRowSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_isColumnSelected, "isColumnSelected(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_isColumnSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isColumnSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isColumnSelected(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_isColumnSelected, doc_QItemSelectionModel_isColumnSelected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_rowIntersectsSelection, "rowIntersectsSelection(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_rowIntersectsSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_rowIntersectsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->rowIntersectsSelection(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_rowIntersectsSelection, doc_QItemSelectionModel_rowIntersectsSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_columnIntersectsSelection, "columnIntersectsSelection(self, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_columnIntersectsSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_columnIntersectsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex* a1;
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->columnIntersectsSelection(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_columnIntersectsSelection, doc_QItemSelectionModel_columnIntersectsSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedIndexes, "selectedIndexes(self) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->selectedIndexes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedIndexes, doc_QItemSelectionModel_selectedIndexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selection, "selection(self) -> QItemSelection");

extern "C" {static PyObject *meth_QItemSelectionModel_selection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection(sipCpp->selection());

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selection, doc_QItemSelectionModel_selection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QItemSelectionModel_model(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
             ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_model, doc_QItemSelectionModel_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clear, "clear(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clear, doc_QItemSelectionModel_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clearSelection, "clearSelection(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            sipCpp->clearSelection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clearSelection, doc_QItemSelectionModel_clearSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_reset, "reset(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_reset(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_reset, doc_QItemSelectionModel_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_select, "select(self, QModelIndex, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])\n"
"select(self, QItemSelection, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QItemSelectionModel_select(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::select(*a0,*a1) : sipCpp->select(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QItemSelection* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::select(*a0,*a1) : sipCpp->select(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_select, doc_QItemSelectionModel_select);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_setCurrentIndex, "setCurrentIndex(self, QModelIndex, Union[QItemSelectionModel.SelectionFlags, QItemSelectionModel.SelectionFlag])");

extern "C" {static PyObject *meth_QItemSelectionModel_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::setCurrentIndex(*a0,*a1) : sipCpp->setCurrentIndex(*a0,*a1));
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_setCurrentIndex, doc_QItemSelectionModel_setCurrentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_clearCurrentIndex, "clearCurrentIndex(self)");

extern "C" {static PyObject *meth_QItemSelectionModel_clearCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clearCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QItemSelectionModel::clearCurrentIndex() : sipCpp->clearCurrentIndex());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_clearCurrentIndex, doc_QItemSelectionModel_clearCurrentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_emitSelectionChanged, "emitSelectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QItemSelectionModel_emitSelectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_emitSelectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelection* a0;
        const  ::QItemSelection* a1;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            sipCpp->emitSelectionChanged(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_emitSelectionChanged, doc_QItemSelectionModel_emitSelectionChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_hasSelection, "hasSelection(self) -> bool");

extern "C" {static PyObject *meth_QItemSelectionModel_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_hasSelection, doc_QItemSelectionModel_hasSelection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedRows, "selectedRows(self, column: int = 0) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QItemSelectionModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->selectedRows(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedRows, doc_QItemSelectionModel_selectedRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_selectedColumns, "selectedColumns(self, row: int = 0) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QItemSelectionModel_selectedColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        const  ::QItemSelectionModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QItemSelectionModel, &sipCpp, &a0))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->selectedColumns(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_selectedColumns, doc_QItemSelectionModel_selectedColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionModel_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QItemSelectionModel_setModel(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel* a0;
         ::QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QItemSelectionModel, &sipCpp, sipType_QAbstractItemModel, &a0))
        {
            sipCpp->setModel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionModel, sipName_setModel, doc_QItemSelectionModel_setModel);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QItemSelectionModel(void *, const sipTypeDef *);}
static void *cast_QItemSelectionModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QItemSelectionModel *sipCpp = reinterpret_cast< ::QItemSelectionModel *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelectionModel(void *, int);}
static void release_QItemSelectionModel(void *sipCppV, int)
{
     ::QItemSelectionModel *sipCpp = reinterpret_cast< ::QItemSelectionModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QItemSelectionModel(sipSimpleWrapper *);}
static void dealloc_QItemSelectionModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQItemSelectionModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QItemSelectionModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QItemSelectionModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QItemSelectionModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQItemSelectionModel *sipCpp = SIP_NULLPTR;

    {
         ::QAbstractItemModel* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_model,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QAbstractItemModel, &a0, sipOwner))
        {
            sipCpp = new sipQItemSelectionModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QAbstractItemModel* a0;
         ::QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8JH", sipType_QAbstractItemModel, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQItemSelectionModel(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QItemSelectionModel[] = {{183, 255, 1}};


static PyMethodDef methods_QItemSelectionModel[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QItemSelectionModel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_clear)},
    {SIP_MLNAME_CAST(sipName_clearCurrentIndex), meth_QItemSelectionModel_clearCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_clearCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QItemSelectionModel_clearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_clearSelection)},
    {SIP_MLNAME_CAST(sipName_columnIntersectsSelection), meth_QItemSelectionModel_columnIntersectsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_columnIntersectsSelection)},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QItemSelectionModel_currentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_currentIndex)},
    {SIP_MLNAME_CAST(sipName_emitSelectionChanged), meth_QItemSelectionModel_emitSelectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_emitSelectionChanged)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QItemSelectionModel_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_hasSelection)},
    {SIP_MLNAME_CAST(sipName_isColumnSelected), meth_QItemSelectionModel_isColumnSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_isColumnSelected)},
    {SIP_MLNAME_CAST(sipName_isRowSelected), meth_QItemSelectionModel_isRowSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_isRowSelected)},
    {SIP_MLNAME_CAST(sipName_isSelected), meth_QItemSelectionModel_isSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_isSelected)},
    {SIP_MLNAME_CAST(sipName_model), meth_QItemSelectionModel_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_model)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QItemSelectionModel_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_reset)},
    {SIP_MLNAME_CAST(sipName_rowIntersectsSelection), meth_QItemSelectionModel_rowIntersectsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_rowIntersectsSelection)},
    {SIP_MLNAME_CAST(sipName_select), meth_QItemSelectionModel_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_select)},
    {SIP_MLNAME_CAST(sipName_selectedColumns), SIP_MLMETH_CAST(meth_QItemSelectionModel_selectedColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QItemSelectionModel_selectedColumns)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QItemSelectionModel_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectedRows), SIP_MLMETH_CAST(meth_QItemSelectionModel_selectedRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QItemSelectionModel_selectedRows)},
    {SIP_MLNAME_CAST(sipName_selection), meth_QItemSelectionModel_selection, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_selection)},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QItemSelectionModel_setCurrentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_setCurrentIndex)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QItemSelectionModel_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionModel_setModel)}
};

static sipEnumMemberDef enummembers_QItemSelectionModel[] = {
    {sipName_Clear, static_cast<int>( ::QItemSelectionModel::Clear), 101},
    {sipName_ClearAndSelect, static_cast<int>( ::QItemSelectionModel::ClearAndSelect), 101},
    {sipName_Columns, static_cast<int>( ::QItemSelectionModel::Columns), 101},
    {sipName_Current, static_cast<int>( ::QItemSelectionModel::Current), 101},
    {sipName_Deselect, static_cast<int>( ::QItemSelectionModel::Deselect), 101},
    {sipName_NoUpdate, static_cast<int>( ::QItemSelectionModel::NoUpdate), 101},
    {sipName_Rows, static_cast<int>( ::QItemSelectionModel::Rows), 101},
    {sipName_Select, static_cast<int>( ::QItemSelectionModel::Select), 101},
    {sipName_SelectCurrent, static_cast<int>( ::QItemSelectionModel::SelectCurrent), 101},
    {sipName_Toggle, static_cast<int>( ::QItemSelectionModel::Toggle), 101},
    {sipName_ToggleCurrent, static_cast<int>( ::QItemSelectionModel::ToggleCurrent), 101},
};

PyDoc_STRVAR(doc_QItemSelectionModel, "\1QItemSelectionModel(model: QAbstractItemModel = None)\n"
"QItemSelectionModel(QAbstractItemModel, QObject)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QItemSelectionModel[] = {
    {"modelChanged(QAbstractItemModel*)", "\1modelChanged(self, QAbstractItemModel)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentColumnChanged(QModelIndex,QModelIndex)", "\1currentColumnChanged(self, QModelIndex, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentRowChanged(QModelIndex,QModelIndex)", "\1currentRowChanged(self, QModelIndex, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentChanged(QModelIndex,QModelIndex)", "\1currentChanged(self, QModelIndex, QModelIndex)", SIP_NULLPTR, SIP_NULLPTR},
    {"selectionChanged(QItemSelection,QItemSelection)", "\1selectionChanged(self, QItemSelection, QItemSelection)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QItemSelectionModel = {
    & ::QItemSelectionModel::staticMetaObject,
    0,
    signals_QItemSelectionModel,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QItemSelectionModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QItemSelectionModel,
        {SIP_NULLPTR},
        &plugin_QItemSelectionModel
    },
    {
        sipNameNr_QItemSelectionModel,
        {0, 0, 1},
        20, methods_QItemSelectionModel,
        11, enummembers_QItemSelectionModel,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QItemSelectionModel,
    -1,
    -1,
    supers_QItemSelectionModel,
    SIP_NULLPTR,
    init_type_QItemSelectionModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QItemSelectionModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QItemSelectionModel,
    cast_QItemSelectionModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 25475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 25479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 25482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 25485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 25488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QItemSelectionRange_top, "top(self) -> int");

extern "C" {static PyObject *meth_QItemSelectionRange_top(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_top(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->top();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_top, doc_QItemSelectionRange_top);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_left, "left(self) -> int");

extern "C" {static PyObject *meth_QItemSelectionRange_left(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->left();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_left, doc_QItemSelectionRange_left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_bottom, "bottom(self) -> int");

extern "C" {static PyObject *meth_QItemSelectionRange_bottom(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bottom();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_bottom, doc_QItemSelectionRange_bottom);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_right, "right(self) -> int");

extern "C" {static PyObject *meth_QItemSelectionRange_right(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->right();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_right, doc_QItemSelectionRange_right);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_width, "width(self) -> int");

extern "C" {static PyObject *meth_QItemSelectionRange_width(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_width, doc_QItemSelectionRange_width);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_height, "height(self) -> int");

extern "C" {static PyObject *meth_QItemSelectionRange_height(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_height, doc_QItemSelectionRange_height);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_topLeft, "topLeft(self) -> QPersistentModelIndex");

extern "C" {static PyObject *meth_QItemSelectionRange_topLeft(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_topLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
             ::QPersistentModelIndex*sipRes;

            sipRes = new  ::QPersistentModelIndex(sipCpp->topLeft());

            return sipConvertFromNewType(sipRes,sipType_QPersistentModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_topLeft, doc_QItemSelectionRange_topLeft);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_bottomRight, "bottomRight(self) -> QPersistentModelIndex");

extern "C" {static PyObject *meth_QItemSelectionRange_bottomRight(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_bottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
             ::QPersistentModelIndex*sipRes;

            sipRes = new  ::QPersistentModelIndex(sipCpp->bottomRight());

            return sipConvertFromNewType(sipRes,sipType_QPersistentModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_bottomRight, doc_QItemSelectionRange_bottomRight);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_parent, "parent(self) -> QModelIndex");

extern "C" {static PyObject *meth_QItemSelectionRange_parent(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->parent());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_parent, doc_QItemSelectionRange_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QItemSelectionRange_model(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            const  ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(const_cast< ::QAbstractItemModel *>(sipRes),sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_model, doc_QItemSelectionRange_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_contains, "contains(self, QModelIndex) -> bool\n"
"contains(self, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelectionRange_contains(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelectionRange, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QItemSelectionRange, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0,a1,*a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_contains, doc_QItemSelectionRange_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_intersects, "intersects(self, QItemSelectionRange) -> bool");

extern "C" {static PyObject *meth_QItemSelectionRange_intersects(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelectionRange, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_intersects, doc_QItemSelectionRange_intersects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QItemSelectionRange_isValid(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_isValid, doc_QItemSelectionRange_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_indexes, "indexes(self) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QItemSelectionRange_indexes(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_indexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->indexes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_indexes, doc_QItemSelectionRange_indexes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_intersected, "intersected(self, QItemSelectionRange) -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelectionRange_intersected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelectionRange, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
             ::QItemSelectionRange*sipRes;

            sipRes = new  ::QItemSelectionRange(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_intersected, doc_QItemSelectionRange_intersected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QItemSelectionRange_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelectionRange, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_isEmpty, doc_QItemSelectionRange_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QItemSelectionRange_swap, "swap(self, QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelectionRange_swap(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionRange_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QItemSelectionRange* a0;
         ::QItemSelectionRange *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelectionRange, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelectionRange, sipName_swap, doc_QItemSelectionRange_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QItemSelectionRange___ge__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionRange___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelectionRange *sipCpp = reinterpret_cast< ::QItemSelectionRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionRange));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelectionRange, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QItemSelectionRange::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QItemSelectionRange, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QItemSelectionRange___lt__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionRange___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelectionRange *sipCpp = reinterpret_cast< ::QItemSelectionRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionRange));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelectionRange, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QItemSelectionRange::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QItemSelectionRange, sipSelf, sipArg);
}


extern "C" {static long slot_QItemSelectionRange___hash__(PyObject *);}
static long slot_QItemSelectionRange___hash__(PyObject *sipSelf)
{
     ::QItemSelectionRange *sipCpp = reinterpret_cast< ::QItemSelectionRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionRange));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
        sipRes = qHash(*sipCpp);
#line 26067 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QItemSelectionRange___ne__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionRange___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelectionRange *sipCpp = reinterpret_cast< ::QItemSelectionRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionRange));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelectionRange, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QItemSelectionRange::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QItemSelectionRange, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QItemSelectionRange___eq__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelectionRange___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QItemSelectionRange *sipCpp = reinterpret_cast< ::QItemSelectionRange *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelectionRange));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QItemSelectionRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelectionRange, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QItemSelectionRange::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QItemSelectionRange, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelectionRange(void *, int);}
static void release_QItemSelectionRange(void *sipCppV, int)
{
    delete reinterpret_cast< ::QItemSelectionRange *>(sipCppV);
}


extern "C" {static void assign_QItemSelectionRange(void *, SIP_SSIZE_T, void *);}
static void assign_QItemSelectionRange(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QItemSelectionRange *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QItemSelectionRange *>(sipSrc);
}


extern "C" {static void *array_QItemSelectionRange(SIP_SSIZE_T);}
static void *array_QItemSelectionRange(SIP_SSIZE_T sipNrElem)
{
    return new  ::QItemSelectionRange[sipNrElem];
}


extern "C" {static void *copy_QItemSelectionRange(const void *, SIP_SSIZE_T);}
static void *copy_QItemSelectionRange(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QItemSelectionRange(reinterpret_cast<const  ::QItemSelectionRange *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QItemSelectionRange(sipSimpleWrapper *);}
static void dealloc_QItemSelectionRange(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QItemSelectionRange(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QItemSelectionRange(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QItemSelectionRange(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QItemSelectionRange *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QItemSelectionRange();

            return sipCpp;
        }
    }

    {
        const  ::QItemSelectionRange* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QItemSelectionRange, &a0))
        {
            sipCpp = new  ::QItemSelectionRange(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J9", sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp = new  ::QItemSelectionRange(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const  ::QModelIndex* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QModelIndex, &a0))
        {
            sipCpp = new  ::QItemSelectionRange(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QItemSelectionRange[] = {
    {(void *)slot_QItemSelectionRange___ge__, ge_slot},
    {(void *)slot_QItemSelectionRange___lt__, lt_slot},
    {(void *)slot_QItemSelectionRange___hash__, hash_slot},
    {(void *)slot_QItemSelectionRange___ne__, ne_slot},
    {(void *)slot_QItemSelectionRange___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QItemSelectionRange[] = {
    {SIP_MLNAME_CAST(sipName_bottom), meth_QItemSelectionRange_bottom, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_bottom)},
    {SIP_MLNAME_CAST(sipName_bottomRight), meth_QItemSelectionRange_bottomRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_bottomRight)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QItemSelectionRange_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_contains)},
    {SIP_MLNAME_CAST(sipName_height), meth_QItemSelectionRange_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_height)},
    {SIP_MLNAME_CAST(sipName_indexes), meth_QItemSelectionRange_indexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_indexes)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QItemSelectionRange_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_intersected)},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QItemSelectionRange_intersects, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_intersects)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QItemSelectionRange_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QItemSelectionRange_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_isValid)},
    {SIP_MLNAME_CAST(sipName_left), meth_QItemSelectionRange_left, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_left)},
    {SIP_MLNAME_CAST(sipName_model), meth_QItemSelectionRange_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_model)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QItemSelectionRange_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_parent)},
    {SIP_MLNAME_CAST(sipName_right), meth_QItemSelectionRange_right, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_right)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QItemSelectionRange_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_swap)},
    {SIP_MLNAME_CAST(sipName_top), meth_QItemSelectionRange_top, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_top)},
    {SIP_MLNAME_CAST(sipName_topLeft), meth_QItemSelectionRange_topLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_topLeft)},
    {SIP_MLNAME_CAST(sipName_width), meth_QItemSelectionRange_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelectionRange_width)}
};

PyDoc_STRVAR(doc_QItemSelectionRange, "\1QItemSelectionRange()\n"
"QItemSelectionRange(QItemSelectionRange)\n"
"QItemSelectionRange(QModelIndex, QModelIndex)\n"
"QItemSelectionRange(QModelIndex)");


static pyqt5ClassPluginDef plugin_QItemSelectionRange = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QItemSelectionRange = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QItemSelectionRange,
        {SIP_NULLPTR},
        &plugin_QItemSelectionRange
    },
    {
        sipNameNr_QItemSelectionRange,
        {0, 0, 1},
        17, methods_QItemSelectionRange,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QItemSelectionRange,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QItemSelectionRange,
    init_type_QItemSelectionRange,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QItemSelectionRange,
    assign_QItemSelectionRange,
    array_QItemSelectionRange,
    copy_QItemSelectionRange,
    release_QItemSelectionRange,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 26332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 26336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QIODevice_OpenMode___hash__(PyObject *);}
static long slot_QIODevice_OpenMode___hash__(PyObject *sipSelf)
{
     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QIODevice::OpenMode::Int();
#line 26354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QIODevice_OpenMode___bool__(PyObject *);}
static int slot_QIODevice_OpenMode___bool__(PyObject *sipSelf)
{
     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QIODevice::OpenMode::Int() != 0);
#line 26379 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenMode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice::OpenMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QIODevice::OpenMode::Int() != a0->operator QIODevice::OpenMode::Int());
#line 26409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QIODevice::OpenMode *>(a0),sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QIODevice_OpenMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenMode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice::OpenMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QIODevice::OpenMode::Int() == a0->operator QIODevice::OpenMode::Int());
#line 26445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QIODevice::OpenMode *>(a0),sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QIODevice_OpenMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenMode___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QIODevice_OpenMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QIODevice::OpenMode(*sipCpp ^ a0);
#line 26484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___xor__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenMode___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QIODevice_OpenMode, &a0, &a0State, &a1))
        {
             ::QIODevice::OpenMode*sipRes;

            sipRes = new  ::QIODevice::OpenMode((*a0 ^ a1));
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___ior__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenMode___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QIODevice_OpenMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QIODevice::OpenMode(*sipCpp | a0);
#line 26556 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___or__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenMode___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QIODevice_OpenMode, &a0, &a0State, &a1))
        {
             ::QIODevice::OpenMode*sipRes;

            sipRes = new  ::QIODevice::OpenMode((*a0 | a1));
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___iand__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenMode___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QIODevice_OpenMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QIODevice::OpenMode::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___and__(PyObject *,PyObject *);}
static PyObject *slot_QIODevice_OpenMode___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QIODevice_OpenMode, &a0, &a0State, &a1))
        {
             ::QIODevice::OpenMode*sipRes;

            sipRes = new  ::QIODevice::OpenMode((*a0 & a1));
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___invert__(PyObject *);}
static PyObject *slot_QIODevice_OpenMode___invert__(PyObject *sipSelf)
{
     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QIODevice::OpenMode*sipRes;

            sipRes = new  ::QIODevice::OpenMode(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QIODevice_OpenMode___int__(PyObject *);}
static PyObject *slot_QIODevice_OpenMode___int__(PyObject *sipSelf)
{
     ::QIODevice::OpenMode *sipCpp = reinterpret_cast< ::QIODevice::OpenMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QIODevice_OpenMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIODevice_OpenMode(void *, int);}
static void release_QIODevice_OpenMode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QIODevice::OpenMode *>(sipCppV);
}


extern "C" {static void assign_QIODevice_OpenMode(void *, SIP_SSIZE_T, void *);}
static void assign_QIODevice_OpenMode(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QIODevice::OpenMode *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QIODevice::OpenMode *>(sipSrc);
}


extern "C" {static void *array_QIODevice_OpenMode(SIP_SSIZE_T);}
static void *array_QIODevice_OpenMode(SIP_SSIZE_T sipNrElem)
{
    return new  ::QIODevice::OpenMode[sipNrElem];
}


extern "C" {static void *copy_QIODevice_OpenMode(const void *, SIP_SSIZE_T);}
static void *copy_QIODevice_OpenMode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QIODevice::OpenMode(reinterpret_cast<const  ::QIODevice::OpenMode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QIODevice_OpenMode(sipSimpleWrapper *);}
static void dealloc_QIODevice_OpenMode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIODevice_OpenMode(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QIODevice_OpenMode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIODevice_OpenMode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QIODevice::OpenMode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QIODevice::OpenMode();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QIODevice::OpenMode(a0);

            return sipCpp;
        }
    }

    {
        const  ::QIODevice::OpenMode* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp = new  ::QIODevice::OpenMode(*a0);
            sipReleaseType(const_cast< ::QIODevice::OpenMode *>(a0),sipType_QIODevice_OpenMode,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QIODevice_OpenMode(PyObject *, void **, int *, PyObject *);}
static int convertTo_QIODevice_OpenMode(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QIODevice::OpenMode **sipCppPtr = reinterpret_cast< ::QIODevice::OpenMode **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QIODevice::OpenMode is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QIODevice_OpenModeFlag)) ||
            sipCanConvertToType(sipPy, sipType_QIODevice_OpenMode, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QIODevice_OpenModeFlag)))
{
    *sipCppPtr = new QIODevice::OpenMode(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QIODevice::OpenMode *>(sipConvertToType(sipPy, sipType_QIODevice_OpenMode, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 26824 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QIODevice_OpenMode[] = {
    {(void *)slot_QIODevice_OpenMode___hash__, hash_slot},
    {(void *)slot_QIODevice_OpenMode___bool__, bool_slot},
    {(void *)slot_QIODevice_OpenMode___ne__, ne_slot},
    {(void *)slot_QIODevice_OpenMode___eq__, eq_slot},
    {(void *)slot_QIODevice_OpenMode___ixor__, ixor_slot},
    {(void *)slot_QIODevice_OpenMode___xor__, xor_slot},
    {(void *)slot_QIODevice_OpenMode___ior__, ior_slot},
    {(void *)slot_QIODevice_OpenMode___or__, or_slot},
    {(void *)slot_QIODevice_OpenMode___iand__, iand_slot},
    {(void *)slot_QIODevice_OpenMode___and__, and_slot},
    {(void *)slot_QIODevice_OpenMode___invert__, invert_slot},
    {(void *)slot_QIODevice_OpenMode___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QIODevice_OpenMode, "\1QIODevice.OpenMode()\n"
"QIODevice.OpenMode(Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])\n"
"QIODevice.OpenMode(QIODevice.OpenMode)");


static pyqt5ClassPluginDef plugin_QIODevice_OpenMode = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QIODevice_OpenMode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIODevice__OpenMode,
        {SIP_NULLPTR},
        &plugin_QIODevice_OpenMode
    },
    {
        sipNameNr_OpenMode,
        {95, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIODevice_OpenMode,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QIODevice_OpenMode,
    init_type_QIODevice_OpenMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIODevice_OpenMode,
    assign_QIODevice_OpenMode,
    array_QIODevice_OpenMode,
    copy_QIODevice_OpenMode,
    release_QIODevice_OpenMode,
    SIP_NULLPTR,
    convertTo_QIODevice_OpenMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qidentityproxymodel.sip"
#include <qidentityproxymodel.h>
#line 26912 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 26916 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 26919 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 26922 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 26925 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 26928 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26931 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 26934 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 26937 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 26940 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 26943 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 26946 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 26949 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 26952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 26955 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 26958 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 26961 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 26964 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 26967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26970 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 26973 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 26976 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 26979 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26982 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26985 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26988 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 26991 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26994 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26997 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 27000 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 27003 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 27006 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 27009 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 27012 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQIdentityProxyModel : public  ::QIdentityProxyModel
{
public:
    sipQIdentityProxyModel( ::QObject*);
    virtual ~sipQIdentityProxyModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool hasChildren(const  ::QModelIndex&) const SIP_OVERRIDE;
    int columnCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex parent(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void setSourceModel( ::QAbstractItemModel*) SIP_OVERRIDE;
     ::QModelIndex mapToSource(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex mapFromSource(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QItemSelection mapSelectionToSource(const  ::QItemSelection&) const SIP_OVERRIDE;
     ::QItemSelection mapSelectionFromSource(const  ::QItemSelection&) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQIdentityProxyModel(const sipQIdentityProxyModel &);
    sipQIdentityProxyModel &operator = (const sipQIdentityProxyModel &);

    char sipPyMethods[46];
};

sipQIdentityProxyModel::sipQIdentityProxyModel( ::QObject*a0):  ::QIdentityProxyModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIdentityProxyModel::~sipQIdentityProxyModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQIdentityProxyModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QIdentityProxyModel);

    return  ::QIdentityProxyModel::metaObject();
}

int sipQIdentityProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QIdentityProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QIdentityProxyModel,_c,_id,_a);

    return _id;
}

void *sipQIdentityProxyModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QIdentityProxyModel, _clname, &sipCpp) ? sipCpp :  ::QIdentityProxyModel::qt_metacast(_clname));
}

bool sipQIdentityProxyModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_moveColumns);

    if (!sipMeth)
        return  ::QIdentityProxyModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQIdentityProxyModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_moveRows);

    if (!sipMeth)
        return  ::QIdentityProxyModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQIdentityProxyModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QIdentityProxyModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int, ::QByteArray> sipQIdentityProxyModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_roleNames);

    if (!sipMeth)
        return  ::QIdentityProxyModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQIdentityProxyModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QIdentityProxyModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQIdentityProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_revert);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIdentityProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_submit);

    if (!sipMeth)
        return  ::QIdentityProxyModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QSize sipQIdentityProxyModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_span);

    if (!sipMeth)
        return  ::QIdentityProxyModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQIdentityProxyModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_match);

    if (!sipMeth)
        return  ::QIdentityProxyModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QModelIndex sipQIdentityProxyModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_buddy);

    if (!sipMeth)
        return  ::QIdentityProxyModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_sort);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags sipQIdentityProxyModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QIdentityProxyModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QIdentityProxyModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_removeColumns);

    if (!sipMeth)
        return  ::QIdentityProxyModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_removeRows);

    if (!sipMeth)
        return  ::QIdentityProxyModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_insertColumns);

    if (!sipMeth)
        return  ::QIdentityProxyModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_insertRows);

    if (!sipMeth)
        return  ::QIdentityProxyModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::Qt::DropActions sipQIdentityProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QIdentityProxyModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIdentityProxyModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QIdentityProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QMimeData* sipQIdentityProxyModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_mimeData);

    if (!sipMeth)
        return  ::QIdentityProxyModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQIdentityProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QIdentityProxyModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIdentityProxyModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_setItemData);

    if (!sipMeth)
        return  ::QIdentityProxyModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

QMap<int, ::QVariant> sipQIdentityProxyModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_itemData);

    if (!sipMeth)
        return  ::QIdentityProxyModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QIdentityProxyModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QVariant sipQIdentityProxyModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_headerData);

    if (!sipMeth)
        return  ::QIdentityProxyModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
        return  ::QIdentityProxyModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQIdentityProxyModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_data);

    if (!sipMeth)
        return  ::QIdentityProxyModel::data(a0,a1);

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQIdentityProxyModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_hasChildren);

    if (!sipMeth)
        return  ::QIdentityProxyModel::hasChildren(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQIdentityProxyModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_columnCount);

    if (!sipMeth)
        return  ::QIdentityProxyModel::columnCount(a0);

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQIdentityProxyModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_rowCount);

    if (!sipMeth)
        return  ::QIdentityProxyModel::rowCount(a0);

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQIdentityProxyModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_sibling);

    if (!sipMeth)
        return  ::QIdentityProxyModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQIdentityProxyModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,SIP_NULLPTR,sipName_parent);

    if (!sipMeth)
        return  ::QIdentityProxyModel::parent(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQIdentityProxyModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,SIP_NULLPTR,sipName_index);

    if (!sipMeth)
        return  ::QIdentityProxyModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QIdentityProxyModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QIdentityProxyModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQIdentityProxyModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::setSourceModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,SIP_NULLPTR,sipName_setSourceModel);

    if (!sipMeth)
    {
         ::QIdentityProxyModel::setSourceModel(a0);
        return;
    }

    extern void sipVH_QtCore_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtCore_42(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQIdentityProxyModel::mapToSource(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,SIP_NULLPTR,sipName_mapToSource);

    if (!sipMeth)
        return  ::QIdentityProxyModel::mapToSource(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQIdentityProxyModel::mapFromSource(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,SIP_NULLPTR,sipName_mapFromSource);

    if (!sipMeth)
        return  ::QIdentityProxyModel::mapFromSource(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QItemSelection sipQIdentityProxyModel::mapSelectionToSource(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,SIP_NULLPTR,sipName_mapSelectionToSource);

    if (!sipMeth)
        return  ::QIdentityProxyModel::mapSelectionToSource(a0);

    extern  ::QItemSelection sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QItemSelection sipQIdentityProxyModel::mapSelectionFromSource(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,SIP_NULLPTR,sipName_mapSelectionFromSource);

    if (!sipMeth)
        return  ::QIdentityProxyModel::mapSelectionFromSource(a0);

    extern  ::QItemSelection sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QIdentityProxyModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QIdentityProxyModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::columnCount(*a0) : sipCpp->columnCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_columnCount, doc_QIdentityProxyModel_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_index, doc_QIdentityProxyModel_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapFromSource, "mapFromSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapFromSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::mapFromSource(*a0) : sipCpp->mapFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapFromSource, doc_QIdentityProxyModel_mapFromSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapToSource, "mapToSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapToSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::mapToSource(*a0) : sipCpp->mapToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapToSource, doc_QIdentityProxyModel_mapToSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_parent, "parent(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::parent(*a0) : sipCpp->parent(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_parent, doc_QIdentityProxyModel_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QIdentityProxyModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::rowCount(*a0) : sipCpp->rowCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_rowCount, doc_QIdentityProxyModel_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_dropMimeData, doc_QIdentityProxyModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapSelectionFromSource, "mapSelectionFromSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapSelectionFromSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapSelectionFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::mapSelectionFromSource(*a0) : sipCpp->mapSelectionFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapSelectionFromSource, doc_QIdentityProxyModel_mapSelectionFromSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapSelectionToSource, "mapSelectionToSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapSelectionToSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapSelectionToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::mapSelectionToSource(*a0) : sipCpp->mapSelectionToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapSelectionToSource, doc_QIdentityProxyModel_mapSelectionToSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_match, "match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QIdentityProxyModel_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = 1;
         ::Qt::MatchFlags a4def = Qt::MatchStartsWith|Qt::MatchWrap;
         ::Qt::MatchFlags* a4 = &a4def;
        int a4State = 0;
        const  ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hits,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1|iJ1", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant, &a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_match, doc_QIdentityProxyModel_match);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_setSourceModel, "setSourceModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QIdentityProxyModel_setSourceModel(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_setSourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::setSourceModel(a0) : sipCpp->setSourceModel(a0));

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_setSourceModel, doc_QIdentityProxyModel_setSourceModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_insertColumns, doc_QIdentityProxyModel_insertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_insertRows, doc_QIdentityProxyModel_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_removeColumns, "removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_removeColumns, doc_QIdentityProxyModel_removeColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_removeRows, doc_QIdentityProxyModel_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QIdentityProxyModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiE|i", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_headerData, doc_QIdentityProxyModel_headerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QIdentityProxyModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_sibling, doc_QIdentityProxyModel_sibling);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QIdentityProxyModel(void *, const sipTypeDef *);}
static void *cast_QIdentityProxyModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QIdentityProxyModel *sipCpp = reinterpret_cast< ::QIdentityProxyModel *>(sipCppV);

    if (targetType == sipType_QAbstractProxyModel)
        return static_cast< ::QAbstractProxyModel *>(sipCpp);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIdentityProxyModel(void *, int);}
static void release_QIdentityProxyModel(void *sipCppV, int)
{
     ::QIdentityProxyModel *sipCpp = reinterpret_cast< ::QIdentityProxyModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QIdentityProxyModel(sipSimpleWrapper *);}
static void dealloc_QIdentityProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQIdentityProxyModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIdentityProxyModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QIdentityProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIdentityProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQIdentityProxyModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQIdentityProxyModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QIdentityProxyModel[] = {{12, 255, 1}};


static PyMethodDef methods_QIdentityProxyModel[] = {
    {SIP_MLNAME_CAST(sipName_columnCount), SIP_MLMETH_CAST(meth_QIdentityProxyModel_columnCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QIdentityProxyModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_headerData), SIP_MLMETH_CAST(meth_QIdentityProxyModel_headerData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_headerData)},
    {SIP_MLNAME_CAST(sipName_index), SIP_MLMETH_CAST(meth_QIdentityProxyModel_index), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_index)},
    {SIP_MLNAME_CAST(sipName_insertColumns), SIP_MLMETH_CAST(meth_QIdentityProxyModel_insertColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRows), SIP_MLMETH_CAST(meth_QIdentityProxyModel_insertRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_mapFromSource), meth_QIdentityProxyModel_mapFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionFromSource), meth_QIdentityProxyModel_mapSelectionFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapSelectionFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionToSource), meth_QIdentityProxyModel_mapSelectionToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapSelectionToSource)},
    {SIP_MLNAME_CAST(sipName_mapToSource), meth_QIdentityProxyModel_mapToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapToSource)},
    {SIP_MLNAME_CAST(sipName_match), SIP_MLMETH_CAST(meth_QIdentityProxyModel_match), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_match)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QIdentityProxyModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_parent)},
    {SIP_MLNAME_CAST(sipName_removeColumns), SIP_MLMETH_CAST(meth_QIdentityProxyModel_removeColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), SIP_MLMETH_CAST(meth_QIdentityProxyModel_removeRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), SIP_MLMETH_CAST(meth_QIdentityProxyModel_rowCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setSourceModel), meth_QIdentityProxyModel_setSourceModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_setSourceModel)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QIdentityProxyModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_sibling)}
};

PyDoc_STRVAR(doc_QIdentityProxyModel, "\1QIdentityProxyModel(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QIdentityProxyModel = {
    & ::QIdentityProxyModel::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QIdentityProxyModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIdentityProxyModel,
        {SIP_NULLPTR},
        &plugin_QIdentityProxyModel
    },
    {
        sipNameNr_QIdentityProxyModel,
        {0, 0, 1},
        17, methods_QIdentityProxyModel,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIdentityProxyModel,
    -1,
    -1,
    supers_QIdentityProxyModel,
    SIP_NULLPTR,
    init_type_QIdentityProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIdentityProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QIdentityProxyModel,
    cast_QIdentityProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qhistorystate.sip"
#include <qhistorystate.h>
#line 28596 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 28600 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 28603 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28606 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 28609 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 28612 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 28615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28618 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 28624 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 28627 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 28630 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 28633 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 28636 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 28639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 28642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 28645 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 28648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 28651 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 28654 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 28657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQHistoryState : public  ::QHistoryState
{
public:
    sipQHistoryState( ::QState*);
    sipQHistoryState( ::QHistoryState::HistoryType, ::QState*);
    virtual ~sipQHistoryState();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    void onEntry( ::QEvent*) SIP_OVERRIDE;
    void onExit( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHistoryState(const sipQHistoryState &);
    sipQHistoryState &operator = (const sipQHistoryState &);

    char sipPyMethods[9];
};

sipQHistoryState::sipQHistoryState( ::QState*a0):  ::QHistoryState(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHistoryState::sipQHistoryState( ::QHistoryState::HistoryType a0, ::QState*a1):  ::QHistoryState(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHistoryState::~sipQHistoryState()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQHistoryState::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QHistoryState);

    return  ::QHistoryState::metaObject();
}

int sipQHistoryState::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QHistoryState::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QHistoryState,_c,_id,_a);

    return _id;
}

void *sipQHistoryState::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QHistoryState, _clname, &sipCpp) ? sipCpp :  ::QHistoryState::qt_metacast(_clname));
}

void sipQHistoryState::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QHistoryState::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QHistoryState::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QHistoryState::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QHistoryState::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QHistoryState::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQHistoryState::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QHistoryState::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQHistoryState::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QHistoryState::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::onEntry( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_onEntry);

    if (!sipMeth)
    {
         ::QHistoryState::onEntry(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQHistoryState::onExit( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_onExit);

    if (!sipMeth)
    {
         ::QHistoryState::onExit(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QHistoryState_defaultState, "defaultState(self) -> QAbstractState");

extern "C" {static PyObject *meth_QHistoryState_defaultState(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_defaultState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHistoryState, &sipCpp))
        {
             ::QAbstractState*sipRes;

            sipRes = sipCpp->defaultState();

            return sipConvertFromType(sipRes,sipType_QAbstractState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_defaultState, doc_QHistoryState_defaultState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHistoryState_setDefaultState, "setDefaultState(self, QAbstractState)");

extern "C" {static PyObject *meth_QHistoryState_setDefaultState(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_setDefaultState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractState* a0;
        PyObject *a0Keep;
         ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QHistoryState, &sipCpp, &a0Keep, sipType_QAbstractState, &a0))
        {
            sipCpp->setDefaultState(a0);

            sipKeepReference(sipSelf, 0, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_setDefaultState, doc_QHistoryState_setDefaultState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHistoryState_historyType, "historyType(self) -> QHistoryState.HistoryType");

extern "C" {static PyObject *meth_QHistoryState_historyType(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_historyType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHistoryState, &sipCpp))
        {
             ::QHistoryState::HistoryType sipRes;

            sipRes = sipCpp->historyType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QHistoryState_HistoryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_historyType, doc_QHistoryState_historyType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHistoryState_setHistoryType, "setHistoryType(self, QHistoryState.HistoryType)");

extern "C" {static PyObject *meth_QHistoryState_setHistoryType(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_setHistoryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHistoryState::HistoryType a0;
         ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHistoryState, &sipCpp, sipType_QHistoryState_HistoryType, &a0))
        {
            sipCpp->setHistoryType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_setHistoryType, doc_QHistoryState_setHistoryType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHistoryState_onEntry, "onEntry(self, QEvent)");

extern "C" {static PyObject *meth_QHistoryState_onEntry(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_onEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHistoryState, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHistoryState::onEntry(a0) : sipCpp->onEntry(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_onEntry, doc_QHistoryState_onEntry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHistoryState_onExit, "onExit(self, QEvent)");

extern "C" {static PyObject *meth_QHistoryState_onExit(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_onExit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHistoryState, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QHistoryState::onExit(a0) : sipCpp->onExit(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_onExit, doc_QHistoryState_onExit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHistoryState_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QHistoryState_event(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QHistoryState, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QHistoryState::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_event, doc_QHistoryState_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHistoryState_defaultTransition, "defaultTransition(self) -> QAbstractTransition");

extern "C" {static PyObject *meth_QHistoryState_defaultTransition(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_defaultTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHistoryState, &sipCpp))
        {
             ::QAbstractTransition*sipRes;

            sipRes = sipCpp->defaultTransition();

            return sipConvertFromType(sipRes,sipType_QAbstractTransition,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_defaultTransition, doc_QHistoryState_defaultTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHistoryState_setDefaultTransition, "setDefaultTransition(self, QAbstractTransition)");

extern "C" {static PyObject *meth_QHistoryState_setDefaultTransition(PyObject *, PyObject *);}
static PyObject *meth_QHistoryState_setDefaultTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractTransition* a0;
        PyObject *a0Keep;
         ::QHistoryState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QHistoryState, &sipCpp, &a0Keep, sipType_QAbstractTransition, &a0))
        {
            sipCpp->setDefaultTransition(a0);

            sipKeepReference(sipSelf, 1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHistoryState, sipName_setDefaultTransition, doc_QHistoryState_setDefaultTransition);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHistoryState(void *, const sipTypeDef *);}
static void *cast_QHistoryState(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHistoryState *sipCpp = reinterpret_cast< ::QHistoryState *>(sipCppV);

    if (targetType == sipType_QAbstractState)
        return static_cast< ::QAbstractState *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHistoryState(void *, int);}
static void release_QHistoryState(void *sipCppV, int)
{
     ::QHistoryState *sipCpp = reinterpret_cast< ::QHistoryState *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QHistoryState(sipSimpleWrapper *);}
static void dealloc_QHistoryState(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHistoryState *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHistoryState(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHistoryState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHistoryState(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHistoryState *sipCpp = SIP_NULLPTR;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQHistoryState(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QHistoryState::HistoryType a0;
         ::QState* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QHistoryState_HistoryType, &a0, sipType_QState, &a1, sipOwner))
        {
            sipCpp = new sipQHistoryState(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHistoryState[] = {{13, 255, 1}};


static PyMethodDef methods_QHistoryState[] = {
    {SIP_MLNAME_CAST(sipName_defaultState), meth_QHistoryState_defaultState, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_defaultState)},
    {SIP_MLNAME_CAST(sipName_defaultTransition), meth_QHistoryState_defaultTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_defaultTransition)},
    {SIP_MLNAME_CAST(sipName_event), meth_QHistoryState_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_event)},
    {SIP_MLNAME_CAST(sipName_historyType), meth_QHistoryState_historyType, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_historyType)},
    {SIP_MLNAME_CAST(sipName_onEntry), meth_QHistoryState_onEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), meth_QHistoryState_onExit, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_onExit)},
    {SIP_MLNAME_CAST(sipName_setDefaultState), meth_QHistoryState_setDefaultState, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_setDefaultState)},
    {SIP_MLNAME_CAST(sipName_setDefaultTransition), meth_QHistoryState_setDefaultTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_setDefaultTransition)},
    {SIP_MLNAME_CAST(sipName_setHistoryType), meth_QHistoryState_setHistoryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QHistoryState_setHistoryType)}
};

static sipEnumMemberDef enummembers_QHistoryState[] = {
    {sipName_DeepHistory, static_cast<int>( ::QHistoryState::DeepHistory), 94},
    {sipName_ShallowHistory, static_cast<int>( ::QHistoryState::ShallowHistory), 94},
};

PyDoc_STRVAR(doc_QHistoryState, "\1QHistoryState(parent: QState = None)\n"
"QHistoryState(QHistoryState.HistoryType, parent: QState = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QHistoryState[] = {
    {"defaultTransitionChanged()", "\1defaultTransitionChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"historyTypeChanged()", "\1historyTypeChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"defaultStateChanged()", "\1defaultStateChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QHistoryState = {
    & ::QHistoryState::staticMetaObject,
    0,
    signals_QHistoryState,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QHistoryState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHistoryState,
        {SIP_NULLPTR},
        &plugin_QHistoryState
    },
    {
        sipNameNr_QHistoryState,
        {0, 0, 1},
        9, methods_QHistoryState,
        2, enummembers_QHistoryState,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHistoryState,
    -1,
    -1,
    supers_QHistoryState,
    SIP_NULLPTR,
    init_type_QHistoryState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHistoryState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QHistoryState,
    cast_QHistoryState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfinalstate.sip"
#include <qfinalstate.h>
#line 29337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 29341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29344 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 29347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 29350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 29362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 29365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 29368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 29371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 29374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 29377 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 29380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 29383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 29386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 29389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 29392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQFinalState : public  ::QFinalState
{
public:
    sipQFinalState( ::QState*);
    virtual ~sipQFinalState();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    void onEntry( ::QEvent*) SIP_OVERRIDE;
    void onExit( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFinalState(const sipQFinalState &);
    sipQFinalState &operator = (const sipQFinalState &);

    char sipPyMethods[9];
};

sipQFinalState::sipQFinalState( ::QState*a0):  ::QFinalState(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFinalState::~sipQFinalState()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQFinalState::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QFinalState);

    return  ::QFinalState::metaObject();
}

int sipQFinalState::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QFinalState::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QFinalState,_c,_id,_a);

    return _id;
}

void *sipQFinalState::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QFinalState, _clname, &sipCpp) ? sipCpp :  ::QFinalState::qt_metacast(_clname));
}

void sipQFinalState::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QFinalState::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFinalState::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QFinalState::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFinalState::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QFinalState::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFinalState::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QFinalState::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFinalState::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QFinalState::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQFinalState::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QFinalState::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQFinalState::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QFinalState::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFinalState::onEntry( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_onEntry);

    if (!sipMeth)
    {
         ::QFinalState::onEntry(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFinalState::onExit( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_onExit);

    if (!sipMeth)
    {
         ::QFinalState::onExit(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QFinalState_onEntry, "onEntry(self, QEvent)");

extern "C" {static PyObject *meth_QFinalState_onEntry(PyObject *, PyObject *);}
static PyObject *meth_QFinalState_onEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QFinalState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QFinalState, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QFinalState::onEntry(a0) : sipCpp->onEntry(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFinalState, sipName_onEntry, doc_QFinalState_onEntry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFinalState_onExit, "onExit(self, QEvent)");

extern "C" {static PyObject *meth_QFinalState_onExit(PyObject *, PyObject *);}
static PyObject *meth_QFinalState_onExit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QFinalState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QFinalState, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QFinalState::onExit(a0) : sipCpp->onExit(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFinalState, sipName_onExit, doc_QFinalState_onExit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFinalState_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QFinalState_event(PyObject *, PyObject *);}
static PyObject *meth_QFinalState_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QFinalState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QFinalState, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFinalState::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFinalState, sipName_event, doc_QFinalState_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFinalState(void *, const sipTypeDef *);}
static void *cast_QFinalState(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFinalState *sipCpp = reinterpret_cast< ::QFinalState *>(sipCppV);

    if (targetType == sipType_QAbstractState)
        return static_cast< ::QAbstractState *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFinalState(void *, int);}
static void release_QFinalState(void *sipCppV, int)
{
     ::QFinalState *sipCpp = reinterpret_cast< ::QFinalState *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFinalState(sipSimpleWrapper *);}
static void dealloc_QFinalState(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQFinalState *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFinalState(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QFinalState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFinalState(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFinalState *sipCpp = SIP_NULLPTR;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQFinalState(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFinalState[] = {{13, 255, 1}};


static PyMethodDef methods_QFinalState[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QFinalState_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QFinalState_event)},
    {SIP_MLNAME_CAST(sipName_onEntry), meth_QFinalState_onEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QFinalState_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), meth_QFinalState_onExit, METH_VARARGS, SIP_MLDOC_CAST(doc_QFinalState_onExit)}
};

PyDoc_STRVAR(doc_QFinalState, "\1QFinalState(parent: QState = None)");


static pyqt5ClassPluginDef plugin_QFinalState = {
    & ::QFinalState::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFinalState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFinalState,
        {SIP_NULLPTR},
        &plugin_QFinalState
    },
    {
        sipNameNr_QFinalState,
        {0, 0, 1},
        3, methods_QFinalState,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFinalState,
    -1,
    -1,
    supers_QFinalState,
    SIP_NULLPTR,
    init_type_QFinalState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFinalState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFinalState,
    cast_QFinalState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfilesystemwatcher.sip"
#include <qfilesystemwatcher.h>
#line 29851 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29855 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 29858 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 29861 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 29864 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29867 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29870 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 29873 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 29876 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 29879 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 29882 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 29885 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 29888 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 29891 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 29894 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 29897 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 29900 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 29903 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQFileSystemWatcher : public  ::QFileSystemWatcher
{
public:
    sipQFileSystemWatcher( ::QObject*);
    sipQFileSystemWatcher(const  ::QStringList&, ::QObject*);
    virtual ~sipQFileSystemWatcher();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFileSystemWatcher(const sipQFileSystemWatcher &);
    sipQFileSystemWatcher &operator = (const sipQFileSystemWatcher &);

    char sipPyMethods[7];
};

sipQFileSystemWatcher::sipQFileSystemWatcher( ::QObject*a0):  ::QFileSystemWatcher(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileSystemWatcher::sipQFileSystemWatcher(const  ::QStringList& a0, ::QObject*a1):  ::QFileSystemWatcher(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileSystemWatcher::~sipQFileSystemWatcher()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQFileSystemWatcher::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QFileSystemWatcher);

    return  ::QFileSystemWatcher::metaObject();
}

int sipQFileSystemWatcher::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QFileSystemWatcher::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QFileSystemWatcher,_c,_id,_a);

    return _id;
}

void *sipQFileSystemWatcher::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QFileSystemWatcher, _clname, &sipCpp) ? sipCpp :  ::QFileSystemWatcher::qt_metacast(_clname));
}

bool sipQFileSystemWatcher::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QFileSystemWatcher::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQFileSystemWatcher::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QFileSystemWatcher::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQFileSystemWatcher::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QFileSystemWatcher::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFileSystemWatcher::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QFileSystemWatcher::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFileSystemWatcher::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QFileSystemWatcher::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFileSystemWatcher::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QFileSystemWatcher::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFileSystemWatcher::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QFileSystemWatcher::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QFileSystemWatcher_addPath, "addPath(self, str) -> bool");

extern "C" {static PyObject *meth_QFileSystemWatcher_addPath(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemWatcher_addPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileSystemWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSystemWatcher, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->addPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemWatcher, sipName_addPath, doc_QFileSystemWatcher_addPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileSystemWatcher_addPaths, "addPaths(self, Iterable[str]) -> List[str]");

extern "C" {static PyObject *meth_QFileSystemWatcher_addPaths(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemWatcher_addPaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileSystemWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSystemWatcher, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->addPaths(*a0));
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemWatcher, sipName_addPaths, doc_QFileSystemWatcher_addPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileSystemWatcher_directories, "directories(self) -> List[str]");

extern "C" {static PyObject *meth_QFileSystemWatcher_directories(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemWatcher_directories(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileSystemWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemWatcher, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->directories());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemWatcher, sipName_directories, doc_QFileSystemWatcher_directories);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileSystemWatcher_files, "files(self) -> List[str]");

extern "C" {static PyObject *meth_QFileSystemWatcher_files(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemWatcher_files(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileSystemWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemWatcher, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->files());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemWatcher, sipName_files, doc_QFileSystemWatcher_files);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileSystemWatcher_removePath, "removePath(self, str) -> bool");

extern "C" {static PyObject *meth_QFileSystemWatcher_removePath(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemWatcher_removePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileSystemWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSystemWatcher, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->removePath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemWatcher, sipName_removePath, doc_QFileSystemWatcher_removePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileSystemWatcher_removePaths, "removePaths(self, Iterable[str]) -> List[str]");

extern "C" {static PyObject *meth_QFileSystemWatcher_removePaths(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemWatcher_removePaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileSystemWatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSystemWatcher, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->removePaths(*a0));
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemWatcher, sipName_removePaths, doc_QFileSystemWatcher_removePaths);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFileSystemWatcher(void *, const sipTypeDef *);}
static void *cast_QFileSystemWatcher(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFileSystemWatcher *sipCpp = reinterpret_cast< ::QFileSystemWatcher *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileSystemWatcher(void *, int);}
static void release_QFileSystemWatcher(void *sipCppV, int)
{
     ::QFileSystemWatcher *sipCpp = reinterpret_cast< ::QFileSystemWatcher *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFileSystemWatcher(sipSimpleWrapper *);}
static void dealloc_QFileSystemWatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQFileSystemWatcher *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileSystemWatcher(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QFileSystemWatcher(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileSystemWatcher(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFileSystemWatcher *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQFileSystemWatcher(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QStringList,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQFileSystemWatcher(*a0,a1);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileSystemWatcher[] = {{183, 255, 1}};


static PyMethodDef methods_QFileSystemWatcher[] = {
    {SIP_MLNAME_CAST(sipName_addPath), meth_QFileSystemWatcher_addPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemWatcher_addPath)},
    {SIP_MLNAME_CAST(sipName_addPaths), meth_QFileSystemWatcher_addPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemWatcher_addPaths)},
    {SIP_MLNAME_CAST(sipName_directories), meth_QFileSystemWatcher_directories, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemWatcher_directories)},
    {SIP_MLNAME_CAST(sipName_files), meth_QFileSystemWatcher_files, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemWatcher_files)},
    {SIP_MLNAME_CAST(sipName_removePath), meth_QFileSystemWatcher_removePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemWatcher_removePath)},
    {SIP_MLNAME_CAST(sipName_removePaths), meth_QFileSystemWatcher_removePaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemWatcher_removePaths)}
};

PyDoc_STRVAR(doc_QFileSystemWatcher, "\1QFileSystemWatcher(parent: QObject = None)\n"
"QFileSystemWatcher(Iterable[str], parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QFileSystemWatcher[] = {
    {"fileChanged(QString)", "\1fileChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"directoryChanged(QString)", "\1directoryChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QFileSystemWatcher = {
    & ::QFileSystemWatcher::staticMetaObject,
    0,
    signals_QFileSystemWatcher,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFileSystemWatcher = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileSystemWatcher,
        {SIP_NULLPTR},
        &plugin_QFileSystemWatcher
    },
    {
        sipNameNr_QFileSystemWatcher,
        {0, 0, 1},
        6, methods_QFileSystemWatcher,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFileSystemWatcher,
    -1,
    -1,
    supers_QFileSystemWatcher,
    SIP_NULLPTR,
    init_type_QFileSystemWatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFileSystemWatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFileSystemWatcher,
    cast_QFileSystemWatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfileselector.sip"
#include <qfileselector.h>
#line 30453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 30457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 30460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 30463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 30466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 30469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 30472 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 30475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 30478 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 30481 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 30484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 30487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 30490 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 30493 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 30496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 30499 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 30502 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 30505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 30508 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQFileSelector : public  ::QFileSelector
{
public:
    sipQFileSelector( ::QObject*);
    virtual ~sipQFileSelector();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFileSelector(const sipQFileSelector &);
    sipQFileSelector &operator = (const sipQFileSelector &);

    char sipPyMethods[7];
};

sipQFileSelector::sipQFileSelector( ::QObject*a0):  ::QFileSelector(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileSelector::~sipQFileSelector()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQFileSelector::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QFileSelector);

    return  ::QFileSelector::metaObject();
}

int sipQFileSelector::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QFileSelector::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QFileSelector,_c,_id,_a);

    return _id;
}

void *sipQFileSelector::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QFileSelector, _clname, &sipCpp) ? sipCpp :  ::QFileSelector::qt_metacast(_clname));
}

bool sipQFileSelector::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QFileSelector::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQFileSelector::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QFileSelector::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQFileSelector::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QFileSelector::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFileSelector::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QFileSelector::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFileSelector::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QFileSelector::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFileSelector::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QFileSelector::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFileSelector::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QFileSelector::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QFileSelector_select, "select(self, str) -> str\n"
"select(self, QUrl) -> QUrl");

extern "C" {static PyObject *meth_QFileSelector_select(PyObject *, PyObject *);}
static PyObject *meth_QFileSelector_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QFileSelector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSelector, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->select(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QUrl* a0;
        const  ::QFileSelector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSelector, &sipCpp, sipType_QUrl, &a0))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->select(*a0));

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSelector, sipName_select, doc_QFileSelector_select);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileSelector_extraSelectors, "extraSelectors(self) -> List[str]");

extern "C" {static PyObject *meth_QFileSelector_extraSelectors(PyObject *, PyObject *);}
static PyObject *meth_QFileSelector_extraSelectors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileSelector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSelector, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->extraSelectors());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSelector, sipName_extraSelectors, doc_QFileSelector_extraSelectors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileSelector_setExtraSelectors, "setExtraSelectors(self, Iterable[str])");

extern "C" {static PyObject *meth_QFileSelector_setExtraSelectors(PyObject *, PyObject *);}
static PyObject *meth_QFileSelector_setExtraSelectors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileSelector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSelector, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setExtraSelectors(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSelector, sipName_setExtraSelectors, doc_QFileSelector_setExtraSelectors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileSelector_allSelectors, "allSelectors(self) -> List[str]");

extern "C" {static PyObject *meth_QFileSelector_allSelectors(PyObject *, PyObject *);}
static PyObject *meth_QFileSelector_allSelectors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileSelector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSelector, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->allSelectors());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSelector, sipName_allSelectors, doc_QFileSelector_allSelectors);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFileSelector(void *, const sipTypeDef *);}
static void *cast_QFileSelector(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFileSelector *sipCpp = reinterpret_cast< ::QFileSelector *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileSelector(void *, int);}
static void release_QFileSelector(void *sipCppV, int)
{
     ::QFileSelector *sipCpp = reinterpret_cast< ::QFileSelector *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFileSelector(sipSimpleWrapper *);}
static void dealloc_QFileSelector(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQFileSelector *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileSelector(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QFileSelector(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileSelector(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFileSelector *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQFileSelector(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileSelector[] = {{183, 255, 1}};


static PyMethodDef methods_QFileSelector[] = {
    {SIP_MLNAME_CAST(sipName_allSelectors), meth_QFileSelector_allSelectors, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSelector_allSelectors)},
    {SIP_MLNAME_CAST(sipName_extraSelectors), meth_QFileSelector_extraSelectors, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSelector_extraSelectors)},
    {SIP_MLNAME_CAST(sipName_select), meth_QFileSelector_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSelector_select)},
    {SIP_MLNAME_CAST(sipName_setExtraSelectors), meth_QFileSelector_setExtraSelectors, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSelector_setExtraSelectors)}
};

PyDoc_STRVAR(doc_QFileSelector, "\1QFileSelector(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QFileSelector = {
    & ::QFileSelector::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFileSelector = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileSelector,
        {SIP_NULLPTR},
        &plugin_QFileSelector
    },
    {
        sipNameNr_QFileSelector,
        {0, 0, 1},
        4, methods_QFileSelector,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFileSelector,
    -1,
    -1,
    supers_QFileSelector,
    SIP_NULLPTR,
    init_type_QFileSelector,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFileSelector,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFileSelector,
    cast_QFileSelector,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 30972 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 30976 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 30979 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 30982 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 30985 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 30988 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 30991 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QFileInfo_setFile, "setFile(self, str)\n"
"setFile(self, QFile)\n"
"setFile(self, QDir, str)");

extern "C" {static PyObject *meth_QFileInfo_setFile(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_setFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QFile* a0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFile, &a0))
        {
            sipCpp->setFile(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QDir* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QDir, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setFile(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_setFile, doc_QFileInfo_setFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_exists, "exists(self) -> bool\n"
"exists(str) -> bool");

extern "C" {static PyObject *meth_QFileInfo_exists(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exists();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QFileInfo::exists(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_exists, doc_QFileInfo_exists);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_refresh, "refresh(self)");

extern "C" {static PyObject *meth_QFileInfo_refresh(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            sipCpp->refresh();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_refresh, doc_QFileInfo_refresh);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_filePath, "filePath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_filePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->filePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_filePath, doc_QFileInfo_filePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo___fspath__, "__fspath__(self) -> object");

extern "C" {static PyObject *meth_QFileInfo___fspath__(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo___fspath__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 46 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfileinfo.sip"
        sipRes = qpycore_PyObject_FromQString(QDir::toNativeSeparators(sipCpp->filePath()));
#line 31174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName___fspath__, doc_QFileInfo___fspath__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_absoluteFilePath, "absoluteFilePath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_absoluteFilePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absoluteFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->absoluteFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absoluteFilePath, doc_QFileInfo_absoluteFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_canonicalFilePath, "canonicalFilePath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_canonicalFilePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_canonicalFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->canonicalFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_canonicalFilePath, doc_QFileInfo_canonicalFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_fileName, doc_QFileInfo_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_baseName, "baseName(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_baseName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_baseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->baseName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_baseName, doc_QFileInfo_baseName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_completeBaseName, "completeBaseName(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_completeBaseName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_completeBaseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->completeBaseName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_completeBaseName, doc_QFileInfo_completeBaseName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_suffix, "suffix(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_suffix(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_suffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->suffix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_suffix, doc_QFileInfo_suffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_completeSuffix, "completeSuffix(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_completeSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_completeSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->completeSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_completeSuffix, doc_QFileInfo_completeSuffix);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_path, "path(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_path(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_path, doc_QFileInfo_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_absolutePath, "absolutePath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_absolutePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absolutePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->absolutePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absolutePath, doc_QFileInfo_absolutePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_canonicalPath, "canonicalPath(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_canonicalPath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_canonicalPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->canonicalPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_canonicalPath, doc_QFileInfo_canonicalPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_dir, "dir(self) -> QDir");

extern "C" {static PyObject *meth_QFileInfo_dir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_dir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir(sipCpp->dir());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_dir, doc_QFileInfo_dir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_absoluteDir, "absoluteDir(self) -> QDir");

extern "C" {static PyObject *meth_QFileInfo_absoluteDir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absoluteDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir(sipCpp->absoluteDir());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absoluteDir, doc_QFileInfo_absoluteDir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isReadable, "isReadable(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isReadable, doc_QFileInfo_isReadable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isWritable, doc_QFileInfo_isWritable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isExecutable, "isExecutable(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isExecutable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isExecutable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExecutable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isExecutable, doc_QFileInfo_isExecutable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isHidden, "isHidden(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isHidden, doc_QFileInfo_isHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isRelative, "isRelative(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRelative();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isRelative, doc_QFileInfo_isRelative);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isAbsolute, "isAbsolute(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAbsolute();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isAbsolute, doc_QFileInfo_isAbsolute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_makeAbsolute, "makeAbsolute(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_makeAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_makeAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->makeAbsolute();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_makeAbsolute, doc_QFileInfo_makeAbsolute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isFile, "isFile(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isFile(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFile();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isFile, doc_QFileInfo_isFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isDir, "isDir(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isDir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDir();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isDir, doc_QFileInfo_isDir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isSymLink, "isSymLink(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isSymLink(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isSymLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSymLink();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isSymLink, doc_QFileInfo_isSymLink);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isRoot, "isRoot(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRoot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isRoot, doc_QFileInfo_isRoot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_owner, "owner(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_owner(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_owner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->owner());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_owner, doc_QFileInfo_owner);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_ownerId, "ownerId(self) -> int");

extern "C" {static PyObject *meth_QFileInfo_ownerId(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_ownerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->ownerId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_ownerId, doc_QFileInfo_ownerId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_group, "group(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_group(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->group());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_group, doc_QFileInfo_group);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_groupId, "groupId(self) -> int");

extern "C" {static PyObject *meth_QFileInfo_groupId(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_groupId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->groupId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_groupId, doc_QFileInfo_groupId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_permission, "permission(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool");

extern "C" {static PyObject *meth_QFileInfo_permission(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_permission(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::Permissions* a0;
        int a0State = 0;
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->permission(*a0);
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_permission, doc_QFileInfo_permission);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_permissions, "permissions(self) -> QFileDevice.Permissions");

extern "C" {static PyObject *meth_QFileInfo_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions(sipCpp->permissions());

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_permissions, doc_QFileInfo_permissions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_size, "size(self) -> int");

extern "C" {static PyObject *meth_QFileInfo_size(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->size();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_size, doc_QFileInfo_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_created, "created(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_created(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_created(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->created());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_created, doc_QFileInfo_created);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_lastModified, "lastModified(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->lastModified());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_lastModified, doc_QFileInfo_lastModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_lastRead, "lastRead(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_lastRead(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_lastRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->lastRead());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_lastRead, doc_QFileInfo_lastRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_caching, "caching(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_caching(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_caching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->caching();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_caching, doc_QFileInfo_caching);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_setCaching, "setCaching(self, bool)");

extern "C" {static PyObject *meth_QFileInfo_setCaching(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_setCaching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileInfo, &sipCpp, &a0))
        {
            sipCpp->setCaching(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_setCaching, doc_QFileInfo_setCaching);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_symLinkTarget, "symLinkTarget(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_symLinkTarget(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_symLinkTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->symLinkTarget());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_symLinkTarget, doc_QFileInfo_symLinkTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_bundleName, "bundleName(self) -> str");

extern "C" {static PyObject *meth_QFileInfo_bundleName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_bundleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->bundleName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_bundleName, doc_QFileInfo_bundleName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isBundle, "isBundle(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isBundle(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isBundle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBundle();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isBundle, doc_QFileInfo_isBundle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_isNativePath, "isNativePath(self) -> bool");

extern "C" {static PyObject *meth_QFileInfo_isNativePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isNativePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNativePath();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isNativePath, doc_QFileInfo_isNativePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_swap, "swap(self, QFileInfo)");

extern "C" {static PyObject *meth_QFileInfo_swap(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileInfo* a0;
         ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFileInfo, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_swap, doc_QFileInfo_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_birthTime, "birthTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_birthTime(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_birthTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->birthTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_birthTime, doc_QFileInfo_birthTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_metadataChangeTime, "metadataChangeTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_metadataChangeTime(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_metadataChangeTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->metadataChangeTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_metadataChangeTime, doc_QFileInfo_metadataChangeTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileInfo_fileTime, "fileTime(self, QFileDevice.FileTime) -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_fileTime(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_fileTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::FileTime a0;
        const  ::QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFileDevice_FileTime, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->fileTime(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_fileTime, doc_QFileInfo_fileTime);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QFileInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFileInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFileInfo *sipCpp = reinterpret_cast< ::QFileInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFileInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFileInfo::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QFileInfo, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFileInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFileInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFileInfo *sipCpp = reinterpret_cast< ::QFileInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFileInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QFileInfo::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QFileInfo, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileInfo(void *, int);}
static void release_QFileInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFileInfo *>(sipCppV);
}


extern "C" {static void assign_QFileInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QFileInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QFileInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QFileInfo *>(sipSrc);
}


extern "C" {static void *array_QFileInfo(SIP_SSIZE_T);}
static void *array_QFileInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QFileInfo[sipNrElem];
}


extern "C" {static void *copy_QFileInfo(const void *, SIP_SSIZE_T);}
static void *copy_QFileInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QFileInfo(reinterpret_cast<const  ::QFileInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFileInfo(sipSimpleWrapper *);}
static void dealloc_QFileInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFileInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFileInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QFileInfo();

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QFileInfo(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QFile* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFile, &a0))
        {
            sipCpp = new  ::QFileInfo(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QDir* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J1", sipType_QDir, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new  ::QFileInfo(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QFileInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QFileInfo, &a0))
        {
            sipCpp = new  ::QFileInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFileInfo[] = {
    {(void *)slot_QFileInfo___ne__, ne_slot},
    {(void *)slot_QFileInfo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFileInfo[] = {
    {SIP_MLNAME_CAST(sipName___fspath__), meth_QFileInfo___fspath__, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo___fspath__)},
    {SIP_MLNAME_CAST(sipName_absoluteDir), meth_QFileInfo_absoluteDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_absoluteDir)},
    {SIP_MLNAME_CAST(sipName_absoluteFilePath), meth_QFileInfo_absoluteFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_absoluteFilePath)},
    {SIP_MLNAME_CAST(sipName_absolutePath), meth_QFileInfo_absolutePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_absolutePath)},
    {SIP_MLNAME_CAST(sipName_baseName), meth_QFileInfo_baseName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_baseName)},
    {SIP_MLNAME_CAST(sipName_birthTime), meth_QFileInfo_birthTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_birthTime)},
    {SIP_MLNAME_CAST(sipName_bundleName), meth_QFileInfo_bundleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_bundleName)},
    {SIP_MLNAME_CAST(sipName_caching), meth_QFileInfo_caching, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_caching)},
    {SIP_MLNAME_CAST(sipName_canonicalFilePath), meth_QFileInfo_canonicalFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_canonicalFilePath)},
    {SIP_MLNAME_CAST(sipName_canonicalPath), meth_QFileInfo_canonicalPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_canonicalPath)},
    {SIP_MLNAME_CAST(sipName_completeBaseName), meth_QFileInfo_completeBaseName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_completeBaseName)},
    {SIP_MLNAME_CAST(sipName_completeSuffix), meth_QFileInfo_completeSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_completeSuffix)},
    {SIP_MLNAME_CAST(sipName_created), meth_QFileInfo_created, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_created)},
    {SIP_MLNAME_CAST(sipName_dir), meth_QFileInfo_dir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_dir)},
    {SIP_MLNAME_CAST(sipName_exists), meth_QFileInfo_exists, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_exists)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QFileInfo_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_fileName)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QFileInfo_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_filePath)},
    {SIP_MLNAME_CAST(sipName_fileTime), meth_QFileInfo_fileTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_fileTime)},
    {SIP_MLNAME_CAST(sipName_group), meth_QFileInfo_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_group)},
    {SIP_MLNAME_CAST(sipName_groupId), meth_QFileInfo_groupId, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_groupId)},
    {SIP_MLNAME_CAST(sipName_isAbsolute), meth_QFileInfo_isAbsolute, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isAbsolute)},
    {SIP_MLNAME_CAST(sipName_isBundle), meth_QFileInfo_isBundle, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isBundle)},
    {SIP_MLNAME_CAST(sipName_isDir), meth_QFileInfo_isDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isDir)},
    {SIP_MLNAME_CAST(sipName_isExecutable), meth_QFileInfo_isExecutable, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isExecutable)},
    {SIP_MLNAME_CAST(sipName_isFile), meth_QFileInfo_isFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isFile)},
    {SIP_MLNAME_CAST(sipName_isHidden), meth_QFileInfo_isHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isHidden)},
    {SIP_MLNAME_CAST(sipName_isNativePath), meth_QFileInfo_isNativePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isNativePath)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QFileInfo_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isReadable)},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QFileInfo_isRelative, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isRelative)},
    {SIP_MLNAME_CAST(sipName_isRoot), meth_QFileInfo_isRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isRoot)},
    {SIP_MLNAME_CAST(sipName_isSymLink), meth_QFileInfo_isSymLink, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isSymLink)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QFileInfo_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isWritable)},
    {SIP_MLNAME_CAST(sipName_lastModified), meth_QFileInfo_lastModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_lastModified)},
    {SIP_MLNAME_CAST(sipName_lastRead), meth_QFileInfo_lastRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_lastRead)},
    {SIP_MLNAME_CAST(sipName_makeAbsolute), meth_QFileInfo_makeAbsolute, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_makeAbsolute)},
    {SIP_MLNAME_CAST(sipName_metadataChangeTime), meth_QFileInfo_metadataChangeTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_metadataChangeTime)},
    {SIP_MLNAME_CAST(sipName_owner), meth_QFileInfo_owner, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_owner)},
    {SIP_MLNAME_CAST(sipName_ownerId), meth_QFileInfo_ownerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_ownerId)},
    {SIP_MLNAME_CAST(sipName_path), meth_QFileInfo_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_path)},
    {SIP_MLNAME_CAST(sipName_permission), meth_QFileInfo_permission, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_permission)},
    {SIP_MLNAME_CAST(sipName_permissions), meth_QFileInfo_permissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_permissions)},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QFileInfo_refresh, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_refresh)},
    {SIP_MLNAME_CAST(sipName_setCaching), meth_QFileInfo_setCaching, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_setCaching)},
    {SIP_MLNAME_CAST(sipName_setFile), meth_QFileInfo_setFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_setFile)},
    {SIP_MLNAME_CAST(sipName_size), meth_QFileInfo_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_size)},
    {SIP_MLNAME_CAST(sipName_suffix), meth_QFileInfo_suffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_suffix)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QFileInfo_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_swap)},
    {SIP_MLNAME_CAST(sipName_symLinkTarget), meth_QFileInfo_symLinkTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_symLinkTarget)}
};

PyDoc_STRVAR(doc_QFileInfo, "\1QFileInfo()\n"
"QFileInfo(str)\n"
"QFileInfo(QFile)\n"
"QFileInfo(QDir, str)\n"
"QFileInfo(QFileInfo)");


static pyqt5ClassPluginDef plugin_QFileInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFileInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileInfo,
        {SIP_NULLPTR},
        &plugin_QFileInfo
    },
    {
        sipNameNr_QFileInfo,
        {0, 0, 1},
        48, methods_QFileInfo,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFileInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QFileInfo,
    init_type_QFileInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFileInfo,
    assign_QFileInfo,
    array_QFileInfo,
    copy_QFileInfo,
    release_QFileInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 32695 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 32699 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QFileDevice_FileHandleFlags___hash__(PyObject *);}
static long slot_QFileDevice_FileHandleFlags___hash__(PyObject *sipSelf)
{
     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QFileDevice::FileHandleFlags::Int();
#line 32717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QFileDevice_FileHandleFlags___bool__(PyObject *);}
static int slot_QFileDevice_FileHandleFlags___bool__(PyObject *sipSelf)
{
     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QFileDevice::FileHandleFlags::Int() != 0);
#line 32742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDevice::FileHandleFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QFileDevice_FileHandleFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QFileDevice::FileHandleFlags::Int() != a0->operator QFileDevice::FileHandleFlags::Int());
#line 32772 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QFileDevice::FileHandleFlags *>(a0),sipType_QFileDevice_FileHandleFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QFileDevice_FileHandleFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDevice::FileHandleFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QFileDevice_FileHandleFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QFileDevice::FileHandleFlags::Int() == a0->operator QFileDevice::FileHandleFlags::Int());
#line 32808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QFileDevice::FileHandleFlags *>(a0),sipType_QFileDevice_FileHandleFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QFileDevice_FileHandleFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QFileDevice_FileHandleFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QFileDevice::FileHandleFlags(*sipCpp ^ a0);
#line 32847 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::FileHandleFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QFileDevice_FileHandleFlags, &a0, &a0State, &a1))
        {
             ::QFileDevice::FileHandleFlags*sipRes;

            sipRes = new  ::QFileDevice::FileHandleFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QFileDevice_FileHandleFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_FileHandleFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QFileDevice_FileHandleFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QFileDevice::FileHandleFlags(*sipCpp | a0);
#line 32919 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::FileHandleFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QFileDevice_FileHandleFlags, &a0, &a0State, &a1))
        {
             ::QFileDevice::FileHandleFlags*sipRes;

            sipRes = new  ::QFileDevice::FileHandleFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QFileDevice_FileHandleFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_FileHandleFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QFileDevice_FileHandleFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QFileDevice::FileHandleFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::FileHandleFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QFileDevice_FileHandleFlags, &a0, &a0State, &a1))
        {
             ::QFileDevice::FileHandleFlags*sipRes;

            sipRes = new  ::QFileDevice::FileHandleFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QFileDevice_FileHandleFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_FileHandleFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___invert__(PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___invert__(PyObject *sipSelf)
{
     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QFileDevice::FileHandleFlags*sipRes;

            sipRes = new  ::QFileDevice::FileHandleFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_FileHandleFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QFileDevice_FileHandleFlags___int__(PyObject *);}
static PyObject *slot_QFileDevice_FileHandleFlags___int__(PyObject *sipSelf)
{
     ::QFileDevice::FileHandleFlags *sipCpp = reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_FileHandleFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileDevice_FileHandleFlags(void *, int);}
static void release_QFileDevice_FileHandleFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipCppV);
}


extern "C" {static void assign_QFileDevice_FileHandleFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QFileDevice_FileHandleFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QFileDevice::FileHandleFlags *>(sipSrc);
}


extern "C" {static void *array_QFileDevice_FileHandleFlags(SIP_SSIZE_T);}
static void *array_QFileDevice_FileHandleFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QFileDevice::FileHandleFlags[sipNrElem];
}


extern "C" {static void *copy_QFileDevice_FileHandleFlags(const void *, SIP_SSIZE_T);}
static void *copy_QFileDevice_FileHandleFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QFileDevice::FileHandleFlags(reinterpret_cast<const  ::QFileDevice::FileHandleFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFileDevice_FileHandleFlags(sipSimpleWrapper *);}
static void dealloc_QFileDevice_FileHandleFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileDevice_FileHandleFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFileDevice_FileHandleFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileDevice_FileHandleFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFileDevice::FileHandleFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QFileDevice::FileHandleFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QFileDevice::FileHandleFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QFileDevice::FileHandleFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QFileDevice_FileHandleFlags, &a0, &a0State))
        {
            sipCpp = new  ::QFileDevice::FileHandleFlags(*a0);
            sipReleaseType(const_cast< ::QFileDevice::FileHandleFlags *>(a0),sipType_QFileDevice_FileHandleFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QFileDevice_FileHandleFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QFileDevice_FileHandleFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QFileDevice::FileHandleFlags **sipCppPtr = reinterpret_cast< ::QFileDevice::FileHandleFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QFileDevice::FileHandleFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QFileDevice_FileHandleFlag)) ||
            sipCanConvertToType(sipPy, sipType_QFileDevice_FileHandleFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QFileDevice_FileHandleFlag)))
{
    *sipCppPtr = new QFileDevice::FileHandleFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QFileDevice::FileHandleFlags *>(sipConvertToType(sipPy, sipType_QFileDevice_FileHandleFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 33187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFileDevice_FileHandleFlags[] = {
    {(void *)slot_QFileDevice_FileHandleFlags___hash__, hash_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___bool__, bool_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___ne__, ne_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___eq__, eq_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___ixor__, ixor_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___xor__, xor_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___ior__, ior_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___or__, or_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___iand__, iand_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___and__, and_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___invert__, invert_slot},
    {(void *)slot_QFileDevice_FileHandleFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QFileDevice_FileHandleFlags, "\1QFileDevice.FileHandleFlags()\n"
"QFileDevice.FileHandleFlags(Union[QFileDevice.FileHandleFlags, QFileDevice.FileHandleFlag])\n"
"QFileDevice.FileHandleFlags(QFileDevice.FileHandleFlags)");


static pyqt5ClassPluginDef plugin_QFileDevice_FileHandleFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFileDevice_FileHandleFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileDevice__FileHandleFlags,
        {SIP_NULLPTR},
        &plugin_QFileDevice_FileHandleFlags
    },
    {
        sipNameNr_FileHandleFlags,
        {77, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFileDevice_FileHandleFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QFileDevice_FileHandleFlags,
    init_type_QFileDevice_FileHandleFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFileDevice_FileHandleFlags,
    assign_QFileDevice_FileHandleFlags,
    array_QFileDevice_FileHandleFlags,
    copy_QFileDevice_FileHandleFlags,
    release_QFileDevice_FileHandleFlags,
    SIP_NULLPTR,
    convertTo_QFileDevice_FileHandleFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 33275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 33279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QFileDevice_Permissions___hash__(PyObject *);}
static long slot_QFileDevice_Permissions___hash__(PyObject *sipSelf)
{
     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QFileDevice::Permissions::Int();
#line 33297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QFileDevice_Permissions___bool__(PyObject *);}
static int slot_QFileDevice_Permissions___bool__(PyObject *sipSelf)
{
     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QFileDevice::Permissions::Int() != 0);
#line 33322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permissions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDevice::Permissions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QFileDevice::Permissions::Int() != a0->operator QFileDevice::Permissions::Int());
#line 33352 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QFileDevice::Permissions *>(a0),sipType_QFileDevice_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QFileDevice_Permissions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permissions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDevice::Permissions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QFileDevice::Permissions::Int() == a0->operator QFileDevice::Permissions::Int());
#line 33388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QFileDevice::Permissions *>(a0),sipType_QFileDevice_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QFileDevice_Permissions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permissions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QFileDevice_Permissions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QFileDevice::Permissions(*sipCpp ^ a0);
#line 33427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permissions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::Permissions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QFileDevice_Permissions, &a0, &a0State, &a1))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permissions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QFileDevice_Permissions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QFileDevice::Permissions(*sipCpp | a0);
#line 33499 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___or__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permissions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::Permissions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QFileDevice_Permissions, &a0, &a0State, &a1))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions((*a0 | a1));
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permissions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QFileDevice_Permissions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QFileDevice::Permissions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___and__(PyObject *,PyObject *);}
static PyObject *slot_QFileDevice_Permissions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::Permissions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QFileDevice_Permissions, &a0, &a0State, &a1))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions((*a0 & a1));
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___invert__(PyObject *);}
static PyObject *slot_QFileDevice_Permissions___invert__(PyObject *sipSelf)
{
     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QFileDevice_Permissions___int__(PyObject *);}
static PyObject *slot_QFileDevice_Permissions___int__(PyObject *sipSelf)
{
     ::QFileDevice::Permissions *sipCpp = reinterpret_cast< ::QFileDevice::Permissions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileDevice_Permissions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileDevice_Permissions(void *, int);}
static void release_QFileDevice_Permissions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QFileDevice::Permissions *>(sipCppV);
}


extern "C" {static void assign_QFileDevice_Permissions(void *, SIP_SSIZE_T, void *);}
static void assign_QFileDevice_Permissions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QFileDevice::Permissions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QFileDevice::Permissions *>(sipSrc);
}


extern "C" {static void *array_QFileDevice_Permissions(SIP_SSIZE_T);}
static void *array_QFileDevice_Permissions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QFileDevice::Permissions[sipNrElem];
}


extern "C" {static void *copy_QFileDevice_Permissions(const void *, SIP_SSIZE_T);}
static void *copy_QFileDevice_Permissions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QFileDevice::Permissions(reinterpret_cast<const  ::QFileDevice::Permissions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFileDevice_Permissions(sipSimpleWrapper *);}
static void dealloc_QFileDevice_Permissions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileDevice_Permissions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QFileDevice_Permissions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileDevice_Permissions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QFileDevice::Permissions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QFileDevice::Permissions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QFileDevice::Permissions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QFileDevice::Permissions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            sipCpp = new  ::QFileDevice::Permissions(*a0);
            sipReleaseType(const_cast< ::QFileDevice::Permissions *>(a0),sipType_QFileDevice_Permissions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QFileDevice_Permissions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QFileDevice_Permissions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QFileDevice::Permissions **sipCppPtr = reinterpret_cast< ::QFileDevice::Permissions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QFileDevice::Permissions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QFileDevice_Permission)) ||
            sipCanConvertToType(sipPy, sipType_QFileDevice_Permissions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QFileDevice_Permission)))
{
    *sipCppPtr = new QFileDevice::Permissions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QFileDevice::Permissions *>(sipConvertToType(sipPy, sipType_QFileDevice_Permissions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 33767 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFileDevice_Permissions[] = {
    {(void *)slot_QFileDevice_Permissions___hash__, hash_slot},
    {(void *)slot_QFileDevice_Permissions___bool__, bool_slot},
    {(void *)slot_QFileDevice_Permissions___ne__, ne_slot},
    {(void *)slot_QFileDevice_Permissions___eq__, eq_slot},
    {(void *)slot_QFileDevice_Permissions___ixor__, ixor_slot},
    {(void *)slot_QFileDevice_Permissions___xor__, xor_slot},
    {(void *)slot_QFileDevice_Permissions___ior__, ior_slot},
    {(void *)slot_QFileDevice_Permissions___or__, or_slot},
    {(void *)slot_QFileDevice_Permissions___iand__, iand_slot},
    {(void *)slot_QFileDevice_Permissions___and__, and_slot},
    {(void *)slot_QFileDevice_Permissions___invert__, invert_slot},
    {(void *)slot_QFileDevice_Permissions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QFileDevice_Permissions, "\1QFileDevice.Permissions()\n"
"QFileDevice.Permissions(Union[QFileDevice.Permissions, QFileDevice.Permission])\n"
"QFileDevice.Permissions(QFileDevice.Permissions)");


static pyqt5ClassPluginDef plugin_QFileDevice_Permissions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFileDevice_Permissions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileDevice__Permissions,
        {SIP_NULLPTR},
        &plugin_QFileDevice_Permissions
    },
    {
        sipNameNr_Permissions,
        {77, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFileDevice_Permissions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QFileDevice_Permissions,
    init_type_QFileDevice_Permissions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFileDevice_Permissions,
    assign_QFileDevice_Permissions,
    array_QFileDevice_Permissions,
    copy_QFileDevice_Permissions,
    release_QFileDevice_Permissions,
    SIP_NULLPTR,
    convertTo_QFileDevice_Permissions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfile.sip"
#include <qfile.h>
#line 33855 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33859 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 33865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 33868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 33871 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33874 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 33877 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 33880 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 33883 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33886 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33889 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33892 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33895 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33901 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33904 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 33907 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 33913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 33916 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 33919 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQFile : public  ::QFile
{
public:
    sipQFile();
    sipQFile(const  ::QString&);
    sipQFile( ::QObject*);
    sipQFile(const  ::QString&, ::QObject*);
    virtual ~sipQFile();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
     ::QString fileName() const SIP_OVERRIDE;
    bool resize( ::qint64) SIP_OVERRIDE;
     ::QFileDevice::Permissions permissions() const SIP_OVERRIDE;
    bool setPermissions( ::QFileDevice::Permissions) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFile(const sipQFile &);
    sipQFile &operator = (const sipQFile &);

    char sipPyMethods[27];
};

sipQFile::sipQFile():  ::QFile(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFile::sipQFile(const  ::QString& a0):  ::QFile(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFile::sipQFile( ::QObject*a0):  ::QFile(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFile::sipQFile(const  ::QString& a0, ::QObject*a1):  ::QFile(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFile::~sipQFile()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQFile::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QFile);

    return  ::QFile::metaObject();
}

int sipQFile::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QFile::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QFile,_c,_id,_a);

    return _id;
}

void *sipQFile::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QFile, _clname, &sipCpp) ? sipCpp :  ::QFile::qt_metacast(_clname));
}

 ::qint64 sipQFile::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QFile::writeData(a0,a1);

    extern  ::qint64 sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_49(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQFile::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QFile::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_48(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQFile::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_readData);

    if (!sipMeth)
        return  ::QFile::readData(a0,a1);

    extern  ::qint64 sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQFile::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QFile::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQFile::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QFile::waitForReadyRead(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQFile::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QFile::canReadLine();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQFile::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QFile::bytesToWrite();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQFile::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QFile::bytesAvailable();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQFile::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QFile::reset();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQFile::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QFile::atEnd();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQFile::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QFile::seek(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQFile::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QFile::size();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQFile::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QFile::pos();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQFile::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QFile::close();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQFile::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QFile::open(a0);

    extern bool sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQFile::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QFile::isSequential();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQFile::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QFile::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQFile::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QFile::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQFile::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QFile::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFile::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QFile::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFile::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QFile::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFile::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QFile::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQFile::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QFile::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QString sipQFile::fileName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_fileName);

    if (!sipMeth)
        return  ::QFile::fileName();

    extern  ::QString sipVH_QtCore_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_50(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQFile::resize( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_resize);

    if (!sipMeth)
        return  ::QFile::resize(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QFileDevice::Permissions sipQFile::permissions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_permissions);

    if (!sipMeth)
        return  ::QFile::permissions();

    extern  ::QFileDevice::Permissions sipVH_QtCore_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_51(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQFile::setPermissions( ::QFileDevice::Permissions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_setPermissions);

    if (!sipMeth)
        return  ::QFile::setPermissions(a0);

    extern bool sipVH_QtCore_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFileDevice::Permissions);

    return sipVH_QtCore_52(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QFile_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QFile_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFile_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QFile::fileName() : sipCpp->fileName()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_fileName, doc_QFile_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_setFileName, "setFileName(self, str)");

extern "C" {static PyObject *meth_QFile_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QFile_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_setFileName, doc_QFile_setFileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_encodeName, "encodeName(str) -> QByteArray");

extern "C" {static PyObject *meth_QFile_encodeName(PyObject *, PyObject *);}
static PyObject *meth_QFile_encodeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QFile::encodeName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_encodeName, doc_QFile_encodeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_decodeName, "decodeName(Union[QByteArray, bytes, bytearray]) -> str\n"
"decodeName(str) -> str");

extern "C" {static PyObject *meth_QFile_decodeName(PyObject *, PyObject *);}
static PyObject *meth_QFile_decodeName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QFile::decodeName(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QFile::decodeName(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_decodeName, doc_QFile_decodeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_exists, "exists(self) -> bool\n"
"exists(str) -> bool");

extern "C" {static PyObject *meth_QFile_exists(PyObject *, PyObject *);}
static PyObject *meth_QFile_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exists();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QFile::exists(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_exists, doc_QFile_exists);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_symLinkTarget, "symLinkTarget(self) -> str\n"
"symLinkTarget(str) -> str");

extern "C" {static PyObject *meth_QFile_symLinkTarget(PyObject *, PyObject *);}
static PyObject *meth_QFile_symLinkTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->symLinkTarget());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QFile::symLinkTarget(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_symLinkTarget, doc_QFile_symLinkTarget);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_remove, "remove(self) -> bool\n"
"remove(str) -> bool");

extern "C" {static PyObject *meth_QFile_remove(PyObject *, PyObject *);}
static PyObject *meth_QFile_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remove();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QFile::remove(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_remove, doc_QFile_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_rename, "rename(self, str) -> bool\n"
"rename(str, str) -> bool");

extern "C" {static PyObject *meth_QFile_rename(PyObject *, PyObject *);}
static PyObject *meth_QFile_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rename(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QFile::rename(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_rename, doc_QFile_rename);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_link, "link(self, str) -> bool\n"
"link(str, str) -> bool");

extern "C" {static PyObject *meth_QFile_link(PyObject *, PyObject *);}
static PyObject *meth_QFile_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->link(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QFile::link(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_link, doc_QFile_link);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_copy, "copy(self, str) -> bool\n"
"copy(str, str) -> bool");

extern "C" {static PyObject *meth_QFile_copy(PyObject *, PyObject *);}
static PyObject *meth_QFile_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->copy(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QFile::copy(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_copy, doc_QFile_copy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_open, "open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool\n"
"open(self, int, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag], handleFlags: Union[QFileDevice.FileHandleFlags, QFileDevice.FileHandleFlag] = QFileDevice.DontCloseHandle) -> bool");

extern "C" {static PyObject *meth_QFile_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFile_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
         ::QFile *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QFile::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
         ::QIODevice::OpenMode* a1;
        int a1State = 0;
         ::QFileDevice::FileHandleFlags a2def = QFileDevice::DontCloseHandle;
         ::QFileDevice::FileHandleFlags* a2 = &a2def;
        int a2State = 0;
         ::QFile *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_handleFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1|J1", &sipSelf, sipType_QFile, &sipCpp, &a0, sipType_QIODevice_OpenMode, &a1, &a1State, sipType_QFileDevice_FileHandleFlags, &a2, &a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);
            sipReleaseType(a2,sipType_QFileDevice_FileHandleFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_open, doc_QFile_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_size, "size(self) -> int");

extern "C" {static PyObject *meth_QFile_size(PyObject *, PyObject *);}
static PyObject *meth_QFile_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFile::size() : sipCpp->size());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_size, doc_QFile_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_resize, "resize(self, int) -> bool\n"
"resize(str, int) -> bool");

extern "C" {static PyObject *meth_QFile_resize(PyObject *, PyObject *);}
static PyObject *meth_QFile_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QFile, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFile::resize(a0) : sipCpp->resize(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::qint64 a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1n", sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes =  ::QFile::resize(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_resize, doc_QFile_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_permissions, "permissions(self) -> QFileDevice.Permissions\n"
"permissions(str) -> QFileDevice.Permissions");

extern "C" {static PyObject *meth_QFile_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFile_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFile, &sipCpp))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions((sipSelfWasArg ? sipCpp-> ::QFile::permissions() : sipCpp->permissions()));

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions( ::QFile::permissions(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_permissions, doc_QFile_permissions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFile_setPermissions, "setPermissions(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool\n"
"setPermissions(str, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool");

extern "C" {static PyObject *meth_QFile_setPermissions(PyObject *, PyObject *);}
static PyObject *meth_QFile_setPermissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFileDevice::Permissions* a0;
        int a0State = 0;
         ::QFile *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFile, &sipCpp, sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFile::setPermissions(*a0) : sipCpp->setPermissions(*a0));
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDevice::Permissions* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QFileDevice_Permissions, &a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QFile::setPermissions(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QFileDevice_Permissions,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFile, sipName_setPermissions, doc_QFile_setPermissions);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFile(void *, const sipTypeDef *);}
static void *cast_QFile(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFile *sipCpp = reinterpret_cast< ::QFile *>(sipCppV);

    if (targetType == sipType_QFileDevice)
        return static_cast< ::QFileDevice *>(sipCpp);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFile(void *, int);}
static void release_QFile(void *sipCppV, int)
{
     ::QFile *sipCpp = reinterpret_cast< ::QFile *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFile(sipSimpleWrapper *);}
static void dealloc_QFile(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQFile *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFile(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QFile(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFile(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFile *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQFile();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQFile(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQFile(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQFile(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFile[] = {{77, 255, 1}};


static PyMethodDef methods_QFile[] = {
    {SIP_MLNAME_CAST(sipName_copy), meth_QFile_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_copy)},
    {SIP_MLNAME_CAST(sipName_decodeName), meth_QFile_decodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_decodeName)},
    {SIP_MLNAME_CAST(sipName_encodeName), meth_QFile_encodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_encodeName)},
    {SIP_MLNAME_CAST(sipName_exists), meth_QFile_exists, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_exists)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QFile_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_fileName)},
    {SIP_MLNAME_CAST(sipName_link), meth_QFile_link, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_link)},
    {SIP_MLNAME_CAST(sipName_open), SIP_MLMETH_CAST(meth_QFile_open), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFile_open)},
    {SIP_MLNAME_CAST(sipName_permissions), meth_QFile_permissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_permissions)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QFile_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_remove)},
    {SIP_MLNAME_CAST(sipName_rename), meth_QFile_rename, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_rename)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QFile_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_resize)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QFile_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_setFileName)},
    {SIP_MLNAME_CAST(sipName_setPermissions), meth_QFile_setPermissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_setPermissions)},
    {SIP_MLNAME_CAST(sipName_size), meth_QFile_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_size)},
    {SIP_MLNAME_CAST(sipName_symLinkTarget), meth_QFile_symLinkTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QFile_symLinkTarget)}
};

PyDoc_STRVAR(doc_QFile, "\1QFile()\n"
"QFile(str)\n"
"QFile(QObject)\n"
"QFile(str, QObject)");


static pyqt5ClassPluginDef plugin_QFile = {
    & ::QFile::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFile = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFile,
        {SIP_NULLPTR},
        &plugin_QFile
    },
    {
        sipNameNr_QFile,
        {0, 0, 1},
        15, methods_QFile,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QFile,
    -1,
    -1,
    supers_QFile,
    SIP_NULLPTR,
    init_type_QFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFile,
    cast_QFile,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 35332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 35336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 35339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 35342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 35345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 35348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 35351 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 35354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 35357 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 35360 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 35363 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 35366 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 35369 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 35372 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 35375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 35378 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 35381 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 35384 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 35387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 35390 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QFileDevice_error, "error(self) -> QFileDevice.FileError");

extern "C" {static PyObject *meth_QFileDevice_error(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::QFileDevice::FileError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QFileDevice_FileError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_error, doc_QFileDevice_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_unsetError, "unsetError(self)");

extern "C" {static PyObject *meth_QFileDevice_unsetError(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_unsetError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            sipCpp->unsetError();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_unsetError, doc_QFileDevice_unsetError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_close, "close(self)");

extern "C" {static PyObject *meth_QFileDevice_close(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QFileDevice::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_close, doc_QFileDevice_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QFileDevice_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_isSequential, doc_QFileDevice_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_handle, "handle(self) -> int");

extern "C" {static PyObject *meth_QFileDevice_handle(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->handle();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_handle, doc_QFileDevice_handle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QFileDevice_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QFileDevice::fileName() : sipCpp->fileName()));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_fileName, doc_QFileDevice_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_pos, "pos(self) -> int");

extern "C" {static PyObject *meth_QFileDevice_pos(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::pos() : sipCpp->pos());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_pos, doc_QFileDevice_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_seek, "seek(self, int) -> bool");

extern "C" {static PyObject *meth_QFileDevice_seek(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::seek(a0) : sipCpp->seek(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_seek, doc_QFileDevice_seek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QFileDevice_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_atEnd, doc_QFileDevice_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_flush, "flush(self) -> bool");

extern "C" {static PyObject *meth_QFileDevice_flush(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_flush, doc_QFileDevice_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_size, "size(self) -> int");

extern "C" {static PyObject *meth_QFileDevice_size(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::size() : sipCpp->size());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_size, doc_QFileDevice_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_resize, "resize(self, int) -> bool");

extern "C" {static PyObject *meth_QFileDevice_resize(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::resize(a0) : sipCpp->resize(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_resize, doc_QFileDevice_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_permissions, "permissions(self) -> QFileDevice.Permissions");

extern "C" {static PyObject *meth_QFileDevice_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDevice, &sipCpp))
        {
             ::QFileDevice::Permissions*sipRes;

            sipRes = new  ::QFileDevice::Permissions((sipSelfWasArg ? sipCpp-> ::QFileDevice::permissions() : sipCpp->permissions()));

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_permissions, doc_QFileDevice_permissions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_setPermissions, "setPermissions(self, Union[QFileDevice.Permissions, QFileDevice.Permission]) -> bool");

extern "C" {static PyObject *meth_QFileDevice_setPermissions(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_setPermissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFileDevice::Permissions* a0;
        int a0State = 0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDevice, &sipCpp, sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::setPermissions(*a0) : sipCpp->setPermissions(*a0));
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_setPermissions, doc_QFileDevice_setPermissions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_map, "map(self, int, int, flags: QFileDevice.MemoryMapFlags = QFileDevice.NoOptions) -> sip.voidptr");

extern "C" {static PyObject *meth_QFileDevice_map(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_map(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::qint64 a1;
         ::QFileDevice::MemoryMapFlags a2 = QFileDevice::NoOptions;
         ::QFileDevice *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bnn|E", &sipSelf, sipType_QFileDevice, &sipCpp, &a0, &a1, sipType_QFileDevice_MemoryMapFlags, &a2))
        {
            void*sipRes;

            sipRes = sipCpp->map(a0,a1,a2);

            return sipConvertFromVoidPtrAndSize(sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_map, doc_QFileDevice_map);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_unmap, "unmap(self, sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QFileDevice_unmap(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_unmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        void* a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bv", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->unmap(reinterpret_cast< ::uchar *>(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_unmap, doc_QFileDevice_unmap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QFileDevice_readData(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 104 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QFileDevice::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 35923 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_readData, doc_QFileDevice_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QFileDevice_writeData(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QFileDevice, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QFileDevice::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_writeData, doc_QFileDevice_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_readLineData, "readLineData(self, int) -> bytes");

extern "C" {static PyObject *meth_QFileDevice_readLineData(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_readLineData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QFileDevice, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfiledevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QFileDevice::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 36025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_readLineData, doc_QFileDevice_readLineData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_fileTime, "fileTime(self, QFileDevice.FileTime) -> QDateTime");

extern "C" {static PyObject *meth_QFileDevice_fileTime(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_fileTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileDevice::FileTime a0;
        const  ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDevice, &sipCpp, sipType_QFileDevice_FileTime, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->fileTime(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_fileTime, doc_QFileDevice_fileTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QFileDevice_setFileTime, "setFileTime(self, Union[QDateTime, datetime.datetime], QFileDevice.FileTime) -> bool");

extern "C" {static PyObject *meth_QFileDevice_setFileTime(PyObject *, PyObject *);}
static PyObject *meth_QFileDevice_setFileTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QFileDevice::FileTime a1;
         ::QFileDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QFileDevice, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QFileDevice_FileTime, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->setFileTime(*a0,a1);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDevice, sipName_setFileTime, doc_QFileDevice_setFileTime);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFileDevice(void *, const sipTypeDef *);}
static void *cast_QFileDevice(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFileDevice *sipCpp = reinterpret_cast< ::QFileDevice *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileDevice(void *, int);}
static void release_QFileDevice(void *sipCppV, int)
{
     ::QFileDevice *sipCpp = reinterpret_cast< ::QFileDevice *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFileDevice(sipSimpleWrapper *);}
static void dealloc_QFileDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileDevice(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileDevice[] = {{95, 255, 1}};


static PyMethodDef methods_QFileDevice[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QFileDevice_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_atEnd)},
    {SIP_MLNAME_CAST(sipName_close), meth_QFileDevice_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_close)},
    {SIP_MLNAME_CAST(sipName_error), meth_QFileDevice_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_error)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QFileDevice_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_fileName)},
    {SIP_MLNAME_CAST(sipName_fileTime), meth_QFileDevice_fileTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_fileTime)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QFileDevice_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_flush)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QFileDevice_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_handle)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QFileDevice_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_isSequential)},
    {SIP_MLNAME_CAST(sipName_map), SIP_MLMETH_CAST(meth_QFileDevice_map), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDevice_map)},
    {SIP_MLNAME_CAST(sipName_permissions), meth_QFileDevice_permissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_permissions)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QFileDevice_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_pos)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QFileDevice_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_readData)},
    {SIP_MLNAME_CAST(sipName_readLineData), meth_QFileDevice_readLineData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_readLineData)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QFileDevice_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_resize)},
    {SIP_MLNAME_CAST(sipName_seek), meth_QFileDevice_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_seek)},
    {SIP_MLNAME_CAST(sipName_setFileTime), meth_QFileDevice_setFileTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_setFileTime)},
    {SIP_MLNAME_CAST(sipName_setPermissions), meth_QFileDevice_setPermissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_setPermissions)},
    {SIP_MLNAME_CAST(sipName_size), meth_QFileDevice_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_size)},
    {SIP_MLNAME_CAST(sipName_unmap), meth_QFileDevice_unmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_unmap)},
    {SIP_MLNAME_CAST(sipName_unsetError), meth_QFileDevice_unsetError, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_unsetError)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QFileDevice_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDevice_writeData)}
};

static sipEnumMemberDef enummembers_QFileDevice[] = {
    {sipName_AbortError, static_cast<int>( ::QFileDevice::AbortError), 78},
    {sipName_AutoCloseHandle, static_cast<int>( ::QFileDevice::AutoCloseHandle), 79},
    {sipName_CopyError, static_cast<int>( ::QFileDevice::CopyError), 78},
    {sipName_DontCloseHandle, static_cast<int>( ::QFileDevice::DontCloseHandle), 79},
    {sipName_ExeGroup, static_cast<int>( ::QFileDevice::ExeGroup), 83},
    {sipName_ExeOther, static_cast<int>( ::QFileDevice::ExeOther), 83},
    {sipName_ExeOwner, static_cast<int>( ::QFileDevice::ExeOwner), 83},
    {sipName_ExeUser, static_cast<int>( ::QFileDevice::ExeUser), 83},
    {sipName_FatalError, static_cast<int>( ::QFileDevice::FatalError), 78},
    {sipName_FileAccessTime, static_cast<int>( ::QFileDevice::FileAccessTime), 81},
    {sipName_FileBirthTime, static_cast<int>( ::QFileDevice::FileBirthTime), 81},
    {sipName_FileMetadataChangeTime, static_cast<int>( ::QFileDevice::FileMetadataChangeTime), 81},
    {sipName_FileModificationTime, static_cast<int>( ::QFileDevice::FileModificationTime), 81},
    {sipName_MapPrivateOption, static_cast<int>( ::QFileDevice::MapPrivateOption), 82},
    {sipName_NoError, static_cast<int>( ::QFileDevice::NoError), 78},
    {sipName_NoOptions, static_cast<int>( ::QFileDevice::NoOptions), 82},
    {sipName_OpenError, static_cast<int>( ::QFileDevice::OpenError), 78},
    {sipName_PermissionsError, static_cast<int>( ::QFileDevice::PermissionsError), 78},
    {sipName_PositionError, static_cast<int>( ::QFileDevice::PositionError), 78},
    {sipName_ReadError, static_cast<int>( ::QFileDevice::ReadError), 78},
    {sipName_ReadGroup, static_cast<int>( ::QFileDevice::ReadGroup), 83},
    {sipName_ReadOther, static_cast<int>( ::QFileDevice::ReadOther), 83},
    {sipName_ReadOwner, static_cast<int>( ::QFileDevice::ReadOwner), 83},
    {sipName_ReadUser, static_cast<int>( ::QFileDevice::ReadUser), 83},
    {sipName_RemoveError, static_cast<int>( ::QFileDevice::RemoveError), 78},
    {sipName_RenameError, static_cast<int>( ::QFileDevice::RenameError), 78},
    {sipName_ResizeError, static_cast<int>( ::QFileDevice::ResizeError), 78},
    {sipName_ResourceError, static_cast<int>( ::QFileDevice::ResourceError), 78},
    {sipName_TimeOutError, static_cast<int>( ::QFileDevice::TimeOutError), 78},
    {sipName_UnspecifiedError, static_cast<int>( ::QFileDevice::UnspecifiedError), 78},
    {sipName_WriteError, static_cast<int>( ::QFileDevice::WriteError), 78},
    {sipName_WriteGroup, static_cast<int>( ::QFileDevice::WriteGroup), 83},
    {sipName_WriteOther, static_cast<int>( ::QFileDevice::WriteOther), 83},
    {sipName_WriteOwner, static_cast<int>( ::QFileDevice::WriteOwner), 83},
    {sipName_WriteUser, static_cast<int>( ::QFileDevice::WriteUser), 83},
};


static pyqt5ClassPluginDef plugin_QFileDevice = {
    & ::QFileDevice::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QFileDevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QFileDevice,
        {SIP_NULLPTR},
        &plugin_QFileDevice
    },
    {
        sipNameNr_QFileDevice,
        {0, 0, 1},
        21, methods_QFileDevice,
        35, enummembers_QFileDevice,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    supers_QFileDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QFileDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QFileDevice,
    cast_QFileDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventtransition.sip"
#include <qeventtransition.h>
#line 36267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 36271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36277 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 36280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 36286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 36289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 36295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 36298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 36325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 36331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 36334 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 36337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQEventTransition : public  ::QEventTransition
{
public:
    sipQEventTransition( ::QState*);
    sipQEventTransition( ::QObject*, ::QEvent::Type, ::QState*);
    virtual ~sipQEventTransition();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventTest( ::QEvent*) SIP_OVERRIDE;
    void onTransition( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQEventTransition(const sipQEventTransition &);
    sipQEventTransition &operator = (const sipQEventTransition &);

    char sipPyMethods[9];
};

sipQEventTransition::sipQEventTransition( ::QState*a0):  ::QEventTransition(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQEventTransition::sipQEventTransition( ::QObject*a0, ::QEvent::Type a1, ::QState*a2):  ::QEventTransition(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQEventTransition::~sipQEventTransition()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQEventTransition::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QEventTransition);

    return  ::QEventTransition::metaObject();
}

int sipQEventTransition::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QEventTransition::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QEventTransition,_c,_id,_a);

    return _id;
}

void *sipQEventTransition::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QEventTransition, _clname, &sipCpp) ? sipCpp :  ::QEventTransition::qt_metacast(_clname));
}

void sipQEventTransition::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QEventTransition::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventTransition::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QEventTransition::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventTransition::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QEventTransition::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventTransition::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QEventTransition::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventTransition::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QEventTransition::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQEventTransition::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QEventTransition::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQEventTransition::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QEventTransition::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQEventTransition::eventTest( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_eventTest);

    if (!sipMeth)
        return  ::QEventTransition::eventTest(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventTransition::onTransition( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_onTransition);

    if (!sipMeth)
    {
         ::QEventTransition::onTransition(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QEventTransition_eventSource, "eventSource(self) -> QObject");

extern "C" {static PyObject *meth_QEventTransition_eventSource(PyObject *, PyObject *);}
static PyObject *meth_QEventTransition_eventSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEventTransition, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->eventSource();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventTransition, sipName_eventSource, doc_QEventTransition_eventSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventTransition_setEventSource, "setEventSource(self, QObject)");

extern "C" {static PyObject *meth_QEventTransition_setEventSource(PyObject *, PyObject *);}
static PyObject *meth_QEventTransition_setEventSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        PyObject *a0Keep;
         ::QEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QEventTransition, &sipCpp, &a0Keep, sipType_QObject, &a0))
        {
            sipCpp->setEventSource(a0);

            sipKeepReference(sipSelf, 10, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventTransition, sipName_setEventSource, doc_QEventTransition_setEventSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventTransition_eventType, "eventType(self) -> QEvent.Type");

extern "C" {static PyObject *meth_QEventTransition_eventType(PyObject *, PyObject *);}
static PyObject *meth_QEventTransition_eventType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEventTransition, &sipCpp))
        {
             ::QEvent::Type sipRes;

            sipRes = sipCpp->eventType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QEvent_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventTransition, sipName_eventType, doc_QEventTransition_eventType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventTransition_setEventType, "setEventType(self, QEvent.Type)");

extern "C" {static PyObject *meth_QEventTransition_setEventType(PyObject *, PyObject *);}
static PyObject *meth_QEventTransition_setEventType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
         ::QEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QEventTransition, &sipCpp, sipType_QEvent_Type, &a0))
        {
            sipCpp->setEventType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventTransition, sipName_setEventType, doc_QEventTransition_setEventType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventTransition_eventTest, "eventTest(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QEventTransition_eventTest(PyObject *, PyObject *);}
static PyObject *meth_QEventTransition_eventTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QEventTransition::eventTest(a0) : sipCpp->eventTest(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventTransition, sipName_eventTest, doc_QEventTransition_eventTest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventTransition_onTransition, "onTransition(self, QEvent)");

extern "C" {static PyObject *meth_QEventTransition_onTransition(PyObject *, PyObject *);}
static PyObject *meth_QEventTransition_onTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QEventTransition::onTransition(a0) : sipCpp->onTransition(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventTransition, sipName_onTransition, doc_QEventTransition_onTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventTransition_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QEventTransition_event(PyObject *, PyObject *);}
static PyObject *meth_QEventTransition_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QEventTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QEventTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QEventTransition::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventTransition, sipName_event, doc_QEventTransition_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QEventTransition(void *, const sipTypeDef *);}
static void *cast_QEventTransition(void *sipCppV, const sipTypeDef *targetType)
{
     ::QEventTransition *sipCpp = reinterpret_cast< ::QEventTransition *>(sipCppV);

    if (targetType == sipType_QAbstractTransition)
        return static_cast< ::QAbstractTransition *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEventTransition(void *, int);}
static void release_QEventTransition(void *sipCppV, int)
{
     ::QEventTransition *sipCpp = reinterpret_cast< ::QEventTransition *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QEventTransition(sipSimpleWrapper *);}
static void dealloc_QEventTransition(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQEventTransition *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QEventTransition(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QEventTransition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEventTransition(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQEventTransition *sipCpp = SIP_NULLPTR;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQEventTransition(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
        PyObject *a0Keep;
         ::QEvent::Type a1;
         ::QState* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8E|JH", &a0Keep, sipType_QObject, &a0, sipType_QEvent_Type, &a1, sipType_QState, &a2, sipOwner))
        {
            sipCpp = new sipQEventTransition(a0,a1,a2);

            sipKeepReference((PyObject *)sipSelf, 10, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QEventTransition[] = {{15, 255, 1}};


static PyMethodDef methods_QEventTransition[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QEventTransition_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventTransition_event)},
    {SIP_MLNAME_CAST(sipName_eventSource), meth_QEventTransition_eventSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventTransition_eventSource)},
    {SIP_MLNAME_CAST(sipName_eventTest), meth_QEventTransition_eventTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventTransition_eventTest)},
    {SIP_MLNAME_CAST(sipName_eventType), meth_QEventTransition_eventType, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventTransition_eventType)},
    {SIP_MLNAME_CAST(sipName_onTransition), meth_QEventTransition_onTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventTransition_onTransition)},
    {SIP_MLNAME_CAST(sipName_setEventSource), meth_QEventTransition_setEventSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventTransition_setEventSource)},
    {SIP_MLNAME_CAST(sipName_setEventType), meth_QEventTransition_setEventType, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventTransition_setEventType)}
};

PyDoc_STRVAR(doc_QEventTransition, "\1QEventTransition(sourceState: QState = None)\n"
"QEventTransition(QObject, QEvent.Type, sourceState: QState = None)");


static pyqt5ClassPluginDef plugin_QEventTransition = {
    & ::QEventTransition::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QEventTransition = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QEventTransition,
        {SIP_NULLPTR},
        &plugin_QEventTransition
    },
    {
        sipNameNr_QEventTransition,
        {0, 0, 1},
        7, methods_QEventTransition,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QEventTransition,
    -1,
    -1,
    supers_QEventTransition,
    SIP_NULLPTR,
    init_type_QEventTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QEventTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QEventTransition,
    cast_QEventTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 36945 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 36949 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 36952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QEventLoopLocker(void *, int);}
static void release_QEventLoopLocker(void *sipCppV, int)
{
    delete reinterpret_cast< ::QEventLoopLocker *>(sipCppV);
}


extern "C" {static void dealloc_QEventLoopLocker(sipSimpleWrapper *);}
static void dealloc_QEventLoopLocker(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QEventLoopLocker(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QEventLoopLocker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEventLoopLocker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QEventLoopLocker *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QEventLoopLocker();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
         ::QEventLoop* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QEventLoop, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QEventLoopLocker(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
         ::QThread* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QThread, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QEventLoopLocker(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}

PyDoc_STRVAR(doc_QEventLoopLocker, "\1QEventLoopLocker()\n"
"QEventLoopLocker(QEventLoop)\n"
"QEventLoopLocker(QThread)");


static pyqt5ClassPluginDef plugin_QEventLoopLocker = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QEventLoopLocker = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QEventLoopLocker,
        {SIP_NULLPTR},
        &plugin_QEventLoopLocker
    },
    {
        sipNameNr_QEventLoopLocker,
        {0, 0, 1},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QEventLoopLocker,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QEventLoopLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QEventLoopLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QEventLoopLocker,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 37085 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 37089 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QEventLoop_ProcessEventsFlags___hash__(PyObject *);}
static long slot_QEventLoop_ProcessEventsFlags___hash__(PyObject *sipSelf)
{
     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QEventLoop::ProcessEventsFlags::Int();
#line 37107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QEventLoop_ProcessEventsFlags___bool__(PyObject *);}
static int slot_QEventLoop_ProcessEventsFlags___bool__(PyObject *sipSelf)
{
     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QEventLoop::ProcessEventsFlags::Int() != 0);
#line 37132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QEventLoop::ProcessEventsFlags::Int() != a0->operator QEventLoop::ProcessEventsFlags::Int());
#line 37162 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QEventLoop::ProcessEventsFlags *>(a0),sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QEventLoop_ProcessEventsFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QEventLoop::ProcessEventsFlags::Int() == a0->operator QEventLoop::ProcessEventsFlags::Int());
#line 37198 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QEventLoop::ProcessEventsFlags *>(a0),sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QEventLoop_ProcessEventsFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QEventLoop_ProcessEventsFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QEventLoop::ProcessEventsFlags(*sipCpp ^ a0);
#line 37237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
             ::QEventLoop::ProcessEventsFlags*sipRes;

            sipRes = new  ::QEventLoop::ProcessEventsFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QEventLoop_ProcessEventsFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QEventLoop_ProcessEventsFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QEventLoop::ProcessEventsFlags(*sipCpp | a0);
#line 37309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
             ::QEventLoop::ProcessEventsFlags*sipRes;

            sipRes = new  ::QEventLoop::ProcessEventsFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QEventLoop_ProcessEventsFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QEventLoop_ProcessEventsFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QEventLoop::ProcessEventsFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
             ::QEventLoop::ProcessEventsFlags*sipRes;

            sipRes = new  ::QEventLoop::ProcessEventsFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QEventLoop_ProcessEventsFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___invert__(PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___invert__(PyObject *sipSelf)
{
     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QEventLoop::ProcessEventsFlags*sipRes;

            sipRes = new  ::QEventLoop::ProcessEventsFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QEventLoop_ProcessEventsFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlags___int__(PyObject *);}
static PyObject *slot_QEventLoop_ProcessEventsFlags___int__(PyObject *sipSelf)
{
     ::QEventLoop::ProcessEventsFlags *sipCpp = reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEventLoop_ProcessEventsFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEventLoop_ProcessEventsFlags(void *, int);}
static void release_QEventLoop_ProcessEventsFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipCppV);
}


extern "C" {static void assign_QEventLoop_ProcessEventsFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QEventLoop_ProcessEventsFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QEventLoop::ProcessEventsFlags *>(sipSrc);
}


extern "C" {static void *array_QEventLoop_ProcessEventsFlags(SIP_SSIZE_T);}
static void *array_QEventLoop_ProcessEventsFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QEventLoop::ProcessEventsFlags[sipNrElem];
}


extern "C" {static void *copy_QEventLoop_ProcessEventsFlags(const void *, SIP_SSIZE_T);}
static void *copy_QEventLoop_ProcessEventsFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QEventLoop::ProcessEventsFlags(reinterpret_cast<const  ::QEventLoop::ProcessEventsFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QEventLoop_ProcessEventsFlags(sipSimpleWrapper *);}
static void dealloc_QEventLoop_ProcessEventsFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QEventLoop_ProcessEventsFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QEventLoop_ProcessEventsFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEventLoop_ProcessEventsFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QEventLoop::ProcessEventsFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QEventLoop::ProcessEventsFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QEventLoop::ProcessEventsFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            sipCpp = new  ::QEventLoop::ProcessEventsFlags(*a0);
            sipReleaseType(const_cast< ::QEventLoop::ProcessEventsFlags *>(a0),sipType_QEventLoop_ProcessEventsFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QEventLoop_ProcessEventsFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QEventLoop_ProcessEventsFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QEventLoop::ProcessEventsFlags **sipCppPtr = reinterpret_cast< ::QEventLoop::ProcessEventsFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QEventLoop::ProcessEventsFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QEventLoop_ProcessEventsFlag)) ||
            sipCanConvertToType(sipPy, sipType_QEventLoop_ProcessEventsFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QEventLoop_ProcessEventsFlag)))
{
    *sipCppPtr = new QEventLoop::ProcessEventsFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QEventLoop::ProcessEventsFlags *>(sipConvertToType(sipPy, sipType_QEventLoop_ProcessEventsFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 37577 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QEventLoop_ProcessEventsFlags[] = {
    {(void *)slot_QEventLoop_ProcessEventsFlags___hash__, hash_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___bool__, bool_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___ne__, ne_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___eq__, eq_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___ixor__, ixor_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___xor__, xor_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___ior__, ior_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___or__, or_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___iand__, iand_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___and__, and_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___invert__, invert_slot},
    {(void *)slot_QEventLoop_ProcessEventsFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QEventLoop_ProcessEventsFlags, "\1QEventLoop.ProcessEventsFlags()\n"
"QEventLoop.ProcessEventsFlags(Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag])\n"
"QEventLoop.ProcessEventsFlags(QEventLoop.ProcessEventsFlags)");


static pyqt5ClassPluginDef plugin_QEventLoop_ProcessEventsFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QEventLoop_ProcessEventsFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QEventLoop__ProcessEventsFlags,
        {SIP_NULLPTR},
        &plugin_QEventLoop_ProcessEventsFlags
    },
    {
        sipNameNr_ProcessEventsFlags,
        {71, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QEventLoop_ProcessEventsFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QEventLoop_ProcessEventsFlags,
    init_type_QEventLoop_ProcessEventsFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QEventLoop_ProcessEventsFlags,
    assign_QEventLoop_ProcessEventsFlags,
    array_QEventLoop_ProcessEventsFlags,
    copy_QEventLoop_ProcessEventsFlags,
    release_QEventLoop_ProcessEventsFlags,
    SIP_NULLPTR,
    convertTo_QEventLoop_ProcessEventsFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 37665 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 37669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 37672 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 37675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 37678 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 37681 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 37684 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 37687 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 37690 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 37693 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 37696 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 37699 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 37702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 37705 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 37708 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 37711 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 37714 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 37717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQEventLoop : public  ::QEventLoop
{
public:
    sipQEventLoop( ::QObject*);
    virtual ~sipQEventLoop();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQEventLoop(const sipQEventLoop &);
    sipQEventLoop &operator = (const sipQEventLoop &);

    char sipPyMethods[7];
};

sipQEventLoop::sipQEventLoop( ::QObject*a0):  ::QEventLoop(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQEventLoop::~sipQEventLoop()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQEventLoop::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QEventLoop);

    return  ::QEventLoop::metaObject();
}

int sipQEventLoop::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QEventLoop::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QEventLoop,_c,_id,_a);

    return _id;
}

void *sipQEventLoop::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QEventLoop, _clname, &sipCpp) ? sipCpp :  ::QEventLoop::qt_metacast(_clname));
}

bool sipQEventLoop::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QEventLoop::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQEventLoop::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QEventLoop::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQEventLoop::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QEventLoop::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventLoop::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QEventLoop::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventLoop::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QEventLoop::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventLoop::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QEventLoop::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQEventLoop::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QEventLoop::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QEventLoop_processEvents, "processEvents(self, flags: Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag] = QEventLoop.AllEvents) -> bool\n"
"processEvents(self, Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag], int)");

extern "C" {static PyObject *meth_QEventLoop_processEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_processEvents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
         ::QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;
         ::QEventLoop *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;
         ::QEventLoop *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1i", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->processEvents(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_processEvents, doc_QEventLoop_processEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventLoop_exec_, "exec_(self, flags: QEventLoop.ProcessEventsFlags = QEventLoop.AllEvents) -> int");

extern "C" {static PyObject *meth_QEventLoop_exec_(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_exec_(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlags a0def =  ::QEventLoop::AllEvents;
         ::QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;
         ::QEventLoop *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_exec_, doc_QEventLoop_exec_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventLoop_exec, "exec(self, flags: QEventLoop.ProcessEventsFlags = QEventLoop.AllEvents) -> int");

extern "C" {static PyObject *meth_QEventLoop_exec(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_exec(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlags a0def =  ::QEventLoop::AllEvents;
         ::QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;
         ::QEventLoop *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_exec, doc_QEventLoop_exec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventLoop_exit, "exit(self, returnCode: int = 0)");

extern "C" {static PyObject *meth_QEventLoop_exit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_exit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QEventLoop *sipCpp;

        static const char *sipKwdList[] = {
            sipName_returnCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QEventLoop, &sipCpp, &a0))
        {
            sipCpp->exit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_exit, doc_QEventLoop_exit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventLoop_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QEventLoop_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEventLoop *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEventLoop, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_isRunning, doc_QEventLoop_isRunning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventLoop_wakeUp, "wakeUp(self)");

extern "C" {static PyObject *meth_QEventLoop_wakeUp(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_wakeUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEventLoop, &sipCpp))
        {
            sipCpp->wakeUp();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_wakeUp, doc_QEventLoop_wakeUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventLoop_quit, "quit(self)");

extern "C" {static PyObject *meth_QEventLoop_quit(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_quit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEventLoop, &sipCpp))
        {
            sipCpp->quit();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_quit, doc_QEventLoop_quit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEventLoop_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QEventLoop_event(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QEventLoop *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QEventLoop, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QEventLoop::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEventLoop, sipName_event, doc_QEventLoop_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QEventLoop(void *, const sipTypeDef *);}
static void *cast_QEventLoop(void *sipCppV, const sipTypeDef *targetType)
{
     ::QEventLoop *sipCpp = reinterpret_cast< ::QEventLoop *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEventLoop(void *, int);}
static void release_QEventLoop(void *sipCppV, int)
{
     ::QEventLoop *sipCpp = reinterpret_cast< ::QEventLoop *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QEventLoop(sipSimpleWrapper *);}
static void dealloc_QEventLoop(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQEventLoop *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QEventLoop(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QEventLoop(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEventLoop(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQEventLoop *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQEventLoop(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QEventLoop[] = {{183, 255, 1}};


static PyMethodDef methods_QEventLoop[] = {
    {SIP_MLNAME_CAST(sipName_event), meth_QEventLoop_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventLoop_event)},
    {SIP_MLNAME_CAST(sipName_exec), SIP_MLMETH_CAST(meth_QEventLoop_exec), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEventLoop_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), SIP_MLMETH_CAST(meth_QEventLoop_exec_), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEventLoop_exec_)},
    {SIP_MLNAME_CAST(sipName_exit), SIP_MLMETH_CAST(meth_QEventLoop_exit), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEventLoop_exit)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QEventLoop_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventLoop_isRunning)},
    {SIP_MLNAME_CAST(sipName_processEvents), SIP_MLMETH_CAST(meth_QEventLoop_processEvents), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEventLoop_processEvents)},
    {SIP_MLNAME_CAST(sipName_quit), meth_QEventLoop_quit, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventLoop_quit)},
    {SIP_MLNAME_CAST(sipName_wakeUp), meth_QEventLoop_wakeUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QEventLoop_wakeUp)}
};

static sipEnumMemberDef enummembers_QEventLoop[] = {
    {sipName_AllEvents, static_cast<int>( ::QEventLoop::AllEvents), 72},
    {sipName_ExcludeSocketNotifiers, static_cast<int>( ::QEventLoop::ExcludeSocketNotifiers), 72},
    {sipName_ExcludeUserInputEvents, static_cast<int>( ::QEventLoop::ExcludeUserInputEvents), 72},
    {sipName_WaitForMoreEvents, static_cast<int>( ::QEventLoop::WaitForMoreEvents), 72},
    {sipName_X11ExcludeTimers, static_cast<int>( ::QEventLoop::X11ExcludeTimers), 72},
};

PyDoc_STRVAR(doc_QEventLoop, "\1QEventLoop(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QEventLoop = {
    & ::QEventLoop::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QEventLoop = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QEventLoop,
        {SIP_NULLPTR},
        &plugin_QEventLoop
    },
    {
        sipNameNr_QEventLoop,
        {0, 0, 1},
        8, methods_QEventLoop,
        5, enummembers_QEventLoop,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QEventLoop,
    -1,
    -1,
    supers_QEventLoop,
    SIP_NULLPTR,
    init_type_QEventLoop,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QEventLoop,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QEventLoop,
    cast_QEventLoop,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qelapsedtimer.sip"
#include <qelapsedtimer.h>
#line 38346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



PyDoc_STRVAR(doc_QElapsedTimer_clockType, "clockType() -> QElapsedTimer.ClockType");

extern "C" {static PyObject *meth_QElapsedTimer_clockType(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_clockType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QElapsedTimer::ClockType sipRes;

            sipRes =  ::QElapsedTimer::clockType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QElapsedTimer_ClockType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_clockType, doc_QElapsedTimer_clockType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_isMonotonic, "isMonotonic() -> bool");

extern "C" {static PyObject *meth_QElapsedTimer_isMonotonic(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_isMonotonic(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QElapsedTimer::isMonotonic();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_isMonotonic, doc_QElapsedTimer_isMonotonic);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_start, "start(self)");

extern "C" {static PyObject *meth_QElapsedTimer_start(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_start, doc_QElapsedTimer_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_restart, "restart(self) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_restart(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_restart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->restart();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_restart, doc_QElapsedTimer_restart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QElapsedTimer_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
            sipCpp->invalidate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_invalidate, doc_QElapsedTimer_invalidate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QElapsedTimer_isValid(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_isValid, doc_QElapsedTimer_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_elapsed, "elapsed(self) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_elapsed(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_elapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->elapsed();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_elapsed, doc_QElapsedTimer_elapsed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_hasExpired, "hasExpired(self, int) -> bool");

extern "C" {static PyObject *meth_QElapsedTimer_hasExpired(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_hasExpired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QElapsedTimer, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->hasExpired(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_hasExpired, doc_QElapsedTimer_hasExpired);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_msecsSinceReference, "msecsSinceReference(self) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_msecsSinceReference(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_msecsSinceReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->msecsSinceReference();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_msecsSinceReference, doc_QElapsedTimer_msecsSinceReference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_msecsTo, "msecsTo(self, QElapsedTimer) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_msecsTo(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_msecsTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QElapsedTimer, &sipCpp, sipType_QElapsedTimer, &a0))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->msecsTo(*a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_msecsTo, doc_QElapsedTimer_msecsTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_secsTo, "secsTo(self, QElapsedTimer) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_secsTo(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_secsTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QElapsedTimer, &sipCpp, sipType_QElapsedTimer, &a0))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->secsTo(*a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_secsTo, doc_QElapsedTimer_secsTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QElapsedTimer_nsecsElapsed, "nsecsElapsed(self) -> int");

extern "C" {static PyObject *meth_QElapsedTimer_nsecsElapsed(PyObject *, PyObject *);}
static PyObject *meth_QElapsedTimer_nsecsElapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QElapsedTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->nsecsElapsed();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QElapsedTimer, sipName_nsecsElapsed, doc_QElapsedTimer_nsecsElapsed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QElapsedTimer___ge__(PyObject *,PyObject *);}
static PyObject *slot_QElapsedTimer___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QElapsedTimer *sipCpp = reinterpret_cast< ::QElapsedTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QElapsedTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QElapsedTimer, &a0))
        {
            bool sipRes;

            sipRes = !operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QElapsedTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QElapsedTimer___lt__(PyObject *,PyObject *);}
static PyObject *slot_QElapsedTimer___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QElapsedTimer *sipCpp = reinterpret_cast< ::QElapsedTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QElapsedTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QElapsedTimer, &a0))
        {
            bool sipRes;

            sipRes = operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QElapsedTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QElapsedTimer___ne__(PyObject *,PyObject *);}
static PyObject *slot_QElapsedTimer___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QElapsedTimer *sipCpp = reinterpret_cast< ::QElapsedTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QElapsedTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QElapsedTimer, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QElapsedTimer::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QElapsedTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QElapsedTimer___eq__(PyObject *,PyObject *);}
static PyObject *slot_QElapsedTimer___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QElapsedTimer *sipCpp = reinterpret_cast< ::QElapsedTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QElapsedTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QElapsedTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QElapsedTimer, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QElapsedTimer::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QElapsedTimer, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QElapsedTimer(void *, int);}
static void release_QElapsedTimer(void *sipCppV, int)
{
    delete reinterpret_cast< ::QElapsedTimer *>(sipCppV);
}


extern "C" {static void assign_QElapsedTimer(void *, SIP_SSIZE_T, void *);}
static void assign_QElapsedTimer(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QElapsedTimer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QElapsedTimer *>(sipSrc);
}


extern "C" {static void *array_QElapsedTimer(SIP_SSIZE_T);}
static void *array_QElapsedTimer(SIP_SSIZE_T sipNrElem)
{
    return new  ::QElapsedTimer[sipNrElem];
}


extern "C" {static void *copy_QElapsedTimer(const void *, SIP_SSIZE_T);}
static void *copy_QElapsedTimer(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QElapsedTimer(reinterpret_cast<const  ::QElapsedTimer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QElapsedTimer(sipSimpleWrapper *);}
static void dealloc_QElapsedTimer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QElapsedTimer(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QElapsedTimer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QElapsedTimer(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QElapsedTimer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QElapsedTimer();

            return sipCpp;
        }
    }

    {
        const  ::QElapsedTimer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QElapsedTimer, &a0))
        {
            sipCpp = new  ::QElapsedTimer(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QElapsedTimer[] = {
    {(void *)slot_QElapsedTimer___ge__, ge_slot},
    {(void *)slot_QElapsedTimer___lt__, lt_slot},
    {(void *)slot_QElapsedTimer___ne__, ne_slot},
    {(void *)slot_QElapsedTimer___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QElapsedTimer[] = {
    {SIP_MLNAME_CAST(sipName_clockType), meth_QElapsedTimer_clockType, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_clockType)},
    {SIP_MLNAME_CAST(sipName_elapsed), meth_QElapsedTimer_elapsed, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_elapsed)},
    {SIP_MLNAME_CAST(sipName_hasExpired), meth_QElapsedTimer_hasExpired, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_hasExpired)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QElapsedTimer_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_invalidate)},
    {SIP_MLNAME_CAST(sipName_isMonotonic), meth_QElapsedTimer_isMonotonic, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_isMonotonic)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QElapsedTimer_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_isValid)},
    {SIP_MLNAME_CAST(sipName_msecsSinceReference), meth_QElapsedTimer_msecsSinceReference, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_msecsSinceReference)},
    {SIP_MLNAME_CAST(sipName_msecsTo), meth_QElapsedTimer_msecsTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_msecsTo)},
    {SIP_MLNAME_CAST(sipName_nsecsElapsed), meth_QElapsedTimer_nsecsElapsed, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_nsecsElapsed)},
    {SIP_MLNAME_CAST(sipName_restart), meth_QElapsedTimer_restart, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_restart)},
    {SIP_MLNAME_CAST(sipName_secsTo), meth_QElapsedTimer_secsTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_secsTo)},
    {SIP_MLNAME_CAST(sipName_start), meth_QElapsedTimer_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QElapsedTimer_start)}
};

static sipEnumMemberDef enummembers_QElapsedTimer[] = {
    {sipName_MachAbsoluteTime, static_cast<int>( ::QElapsedTimer::MachAbsoluteTime), 68},
    {sipName_MonotonicClock, static_cast<int>( ::QElapsedTimer::MonotonicClock), 68},
    {sipName_PerformanceCounter, static_cast<int>( ::QElapsedTimer::PerformanceCounter), 68},
    {sipName_SystemTime, static_cast<int>( ::QElapsedTimer::SystemTime), 68},
    {sipName_TickCounter, static_cast<int>( ::QElapsedTimer::TickCounter), 68},
};

PyDoc_STRVAR(doc_QElapsedTimer, "\1QElapsedTimer()\n"
"QElapsedTimer(QElapsedTimer)");


static pyqt5ClassPluginDef plugin_QElapsedTimer = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QElapsedTimer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QElapsedTimer,
        {SIP_NULLPTR},
        &plugin_QElapsedTimer
    },
    {
        sipNameNr_QElapsedTimer,
        {0, 0, 1},
        12, methods_QElapsedTimer,
        5, enummembers_QElapsedTimer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QElapsedTimer,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QElapsedTimer,
    init_type_QElapsedTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QElapsedTimer,
    assign_QElapsedTimer,
    array_QElapsedTimer,
    copy_QElapsedTimer,
    release_QElapsedTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 38977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 38981 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 38984 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
// The EasingFunction callback doesn't provide a context so we support a fixed
// number of different functions.

const int ec_nr_custom_types = 10;

struct ec_custom_type {
    PyObject *py_func;
    QEasingCurve::EasingFunction func;
};

static qreal ec_call(int ec, qreal v);

static qreal ec_func_0(qreal v)
{
    return ec_call(0, v);
}

static qreal ec_func_1(qreal v)
{
    return ec_call(1, v);
}

static qreal ec_func_2(qreal v)
{
    return ec_call(2, v);
}

static qreal ec_func_3(qreal v)
{
    return ec_call(3, v);
}

static qreal ec_func_4(qreal v)
{
    return ec_call(4, v);
}

static qreal ec_func_5(qreal v)
{
    return ec_call(5, v);
}

static qreal ec_func_6(qreal v)
{
    return ec_call(6, v);
}

static qreal ec_func_7(qreal v)
{
    return ec_call(7, v);
}

static qreal ec_func_8(qreal v)
{
    return ec_call(8, v);
}

static qreal ec_func_9(qreal v)
{
    return ec_call(9, v);
}

static ec_custom_type ec_custom_types[ec_nr_custom_types] = {
    {0, ec_func_0},
    {0, ec_func_1},
    {0, ec_func_2},
    {0, ec_func_3},
    {0, ec_func_4},
    {0, ec_func_5},
    {0, ec_func_6},
    {0, ec_func_7},
    {0, ec_func_8},
    {0, ec_func_9},
};

static qreal ec_call(int ec, qreal v)
{
    PyObject *res_obj;
    qreal res = 0.0;

    SIP_BLOCK_THREADS

    res_obj = PyObject_CallFunction(ec_custom_types[ec].py_func, (char *)"(d)", (double)v);

    if (res_obj)
    {
        PyErr_Clear();

        res = PyFloat_AsDouble(res_obj);
        Py_DECREF(res_obj);

        if (PyErr_Occurred())
            res_obj = 0;
    }

    if (!res_obj)
        pyqt5_err_print();

    SIP_UNBLOCK_THREADS

    return res;
}
#line 39088 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QEasingCurve_amplitude, "amplitude(self) -> float");

extern "C" {static PyObject *meth_QEasingCurve_amplitude(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_amplitude(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEasingCurve, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->amplitude();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_amplitude, doc_QEasingCurve_amplitude);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_setAmplitude, "setAmplitude(self, float)");

extern "C" {static PyObject *meth_QEasingCurve_setAmplitude(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_setAmplitude(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QEasingCurve, &sipCpp, &a0))
        {
            sipCpp->setAmplitude(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_setAmplitude, doc_QEasingCurve_setAmplitude);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_period, "period(self) -> float");

extern "C" {static PyObject *meth_QEasingCurve_period(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_period(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEasingCurve, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->period();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_period, doc_QEasingCurve_period);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_setPeriod, "setPeriod(self, float)");

extern "C" {static PyObject *meth_QEasingCurve_setPeriod(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_setPeriod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QEasingCurve, &sipCpp, &a0))
        {
            sipCpp->setPeriod(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_setPeriod, doc_QEasingCurve_setPeriod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_overshoot, "overshoot(self) -> float");

extern "C" {static PyObject *meth_QEasingCurve_overshoot(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_overshoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEasingCurve, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->overshoot();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_overshoot, doc_QEasingCurve_overshoot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_setOvershoot, "setOvershoot(self, float)");

extern "C" {static PyObject *meth_QEasingCurve_setOvershoot(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_setOvershoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
         ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QEasingCurve, &sipCpp, &a0))
        {
            sipCpp->setOvershoot(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_setOvershoot, doc_QEasingCurve_setOvershoot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_type, "type(self) -> QEasingCurve.Type");

extern "C" {static PyObject *meth_QEasingCurve_type(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEasingCurve, &sipCpp))
        {
             ::QEasingCurve::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QEasingCurve_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_type, doc_QEasingCurve_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_setType, "setType(self, QEasingCurve.Type)");

extern "C" {static PyObject *meth_QEasingCurve_setType(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_setType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEasingCurve::Type a0;
         ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QEasingCurve, &sipCpp, sipType_QEasingCurve_Type, &a0))
        {
            sipCpp->setType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_setType, doc_QEasingCurve_setType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_setCustomType, "setCustomType(self, Callable[[float], float])");

extern "C" {static PyObject *meth_QEasingCurve_setCustomType(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_setCustomType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
         ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BF", &sipSelf, sipType_QEasingCurve, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 228 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
        int i;
        ec_custom_type *ct;
        
        for (i = 0; i < ec_nr_custom_types; ++i)
        {
            ct = &ec_custom_types[i];
        
            if (!ct->py_func || ct->py_func == a0)
                break;
        }
        
        if (i == ec_nr_custom_types)
        {
            PyErr_Format(PyExc_ValueError, "a maximum of %d different easing functions are supported", ec_nr_custom_types);
            sipError = sipErrorFail;
        }
        else
        {
            if (!ct->py_func)
            {
                ct->py_func = a0;
                Py_INCREF(a0);
            }
        
            sipCpp->setCustomType(ct->func);
        }
#line 39358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_setCustomType, doc_QEasingCurve_setCustomType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_customType, "customType(self) -> Callable[[float], float]");

extern "C" {static PyObject *meth_QEasingCurve_customType(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_customType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEasingCurve, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 258 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
        QEasingCurve::EasingFunction func = sipCpp->customType();
        
        sipRes = Py_None;
        
        if (func)
        {
            for (int i = 0; i < ec_nr_custom_types; ++i)
            {
                if (ec_custom_types[i].func == func)
                {
                    sipRes = ec_custom_types[i].py_func;
                    break;
                }
            }
        }
        
        Py_INCREF(sipRes);
#line 39413 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_customType, doc_QEasingCurve_customType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_valueForProgress, "valueForProgress(self, float) -> float");

extern "C" {static PyObject *meth_QEasingCurve_valueForProgress(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_valueForProgress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qreal a0;
        const  ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QEasingCurve, &sipCpp, &a0))
        {
             ::qreal sipRes;

            sipRes = sipCpp->valueForProgress(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_valueForProgress, doc_QEasingCurve_valueForProgress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_swap, "swap(self, QEasingCurve)");

extern "C" {static PyObject *meth_QEasingCurve_swap(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEasingCurve* a0;
         ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QEasingCurve, &sipCpp, sipType_QEasingCurve, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_swap, doc_QEasingCurve_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_addCubicBezierSegment, "addCubicBezierSegment(self, Union[QPointF, QPoint], Union[QPointF, QPoint], Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QEasingCurve_addCubicBezierSegment(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_addCubicBezierSegment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
        const  ::QPointF* a1;
        int a1State = 0;
        const  ::QPointF* a2;
        int a2State = 0;
         ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QEasingCurve, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State))
        {
            sipCpp->addCubicBezierSegment(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast< ::QPointF *>(a2),sipType_QPointF,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_addCubicBezierSegment, doc_QEasingCurve_addCubicBezierSegment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_addTCBSegment, "addTCBSegment(self, Union[QPointF, QPoint], float, float, float)");

extern "C" {static PyObject *meth_QEasingCurve_addTCBSegment(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_addTCBSegment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::qreal a1;
         ::qreal a2;
         ::qreal a3;
         ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1ddd", &sipSelf, sipType_QEasingCurve, &sipCpp, sipType_QPointF, &a0, &a0State, &a1, &a2, &a3))
        {
            sipCpp->addTCBSegment(*a0,a1,a2,a3);
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_addTCBSegment, doc_QEasingCurve_addTCBSegment);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEasingCurve_toCubicSpline, "toCubicSpline(self) -> List[QPointF]");

extern "C" {static PyObject *meth_QEasingCurve_toCubicSpline(PyObject *, PyObject *);}
static PyObject *meth_QEasingCurve_toCubicSpline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEasingCurve, &sipCpp))
        {
            QVector< ::QPointF>*sipRes;

            sipRes = new QVector< ::QPointF>(sipCpp->toCubicSpline());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QPointF,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEasingCurve, sipName_toCubicSpline, doc_QEasingCurve_toCubicSpline);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QEasingCurve___ne__(PyObject *,PyObject *);}
static PyObject *slot_QEasingCurve___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QEasingCurve *sipCpp = reinterpret_cast< ::QEasingCurve *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEasingCurve));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QEasingCurve, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QEasingCurve::operator!=(*a0);
            sipReleaseType(const_cast< ::QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QEasingCurve, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QEasingCurve___eq__(PyObject *,PyObject *);}
static PyObject *slot_QEasingCurve___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QEasingCurve *sipCpp = reinterpret_cast< ::QEasingCurve *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QEasingCurve));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEasingCurve* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QEasingCurve, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QEasingCurve::operator==(*a0);
            sipReleaseType(const_cast< ::QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QEasingCurve, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QEasingCurve(void *, int);}
static void release_QEasingCurve(void *sipCppV, int)
{
    delete reinterpret_cast< ::QEasingCurve *>(sipCppV);
}


extern "C" {static void assign_QEasingCurve(void *, SIP_SSIZE_T, void *);}
static void assign_QEasingCurve(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QEasingCurve *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QEasingCurve *>(sipSrc);
}


extern "C" {static void *array_QEasingCurve(SIP_SSIZE_T);}
static void *array_QEasingCurve(SIP_SSIZE_T sipNrElem)
{
    return new  ::QEasingCurve[sipNrElem];
}


extern "C" {static void *copy_QEasingCurve(const void *, SIP_SSIZE_T);}
static void *copy_QEasingCurve(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QEasingCurve(reinterpret_cast<const  ::QEasingCurve *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QEasingCurve(sipSimpleWrapper *);}
static void dealloc_QEasingCurve(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QEasingCurve(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QEasingCurve(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEasingCurve(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QEasingCurve *sipCpp = SIP_NULLPTR;

    {
         ::QEasingCurve::Type a0 = QEasingCurve::Linear;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QEasingCurve_Type, &a0))
        {
            sipCpp = new  ::QEasingCurve(a0);

            return sipCpp;
        }
    }

    {
        const  ::QEasingCurve* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QEasingCurve, &a0, &a0State))
        {
            sipCpp = new  ::QEasingCurve(*a0);
            sipReleaseType(const_cast< ::QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QEasingCurve(PyObject *, void **, int *, PyObject *);}
static int convertTo_QEasingCurve(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QEasingCurve **sipCppPtr = reinterpret_cast< ::QEasingCurve **>(sipCppPtrV);

#line 135 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
// Allow a QEasingCurve::Type whenever a QEasingCurve is expected.

if (sipIsErr == NULL)
{
    if (sipCanConvertToType(sipPy, sipType_QEasingCurve, SIP_NO_CONVERTORS))
        return 1;

    if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QEasingCurve_Type)))
        return 1;

    return 0;
}

if (sipCanConvertToType(sipPy, sipType_QEasingCurve, SIP_NO_CONVERTORS))
{
    *sipCppPtr = reinterpret_cast<QEasingCurve *>(sipConvertToType(sipPy, sipType_QEasingCurve, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

*sipCppPtr = new QEasingCurve((QEasingCurve::Type)SIPLong_AsLong(sipPy));

return sipGetState(sipTransferObj);
#line 39753 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QEasingCurve[] = {
    {(void *)slot_QEasingCurve___ne__, ne_slot},
    {(void *)slot_QEasingCurve___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QEasingCurve[] = {
    {SIP_MLNAME_CAST(sipName_addCubicBezierSegment), meth_QEasingCurve_addCubicBezierSegment, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_addCubicBezierSegment)},
    {SIP_MLNAME_CAST(sipName_addTCBSegment), meth_QEasingCurve_addTCBSegment, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_addTCBSegment)},
    {SIP_MLNAME_CAST(sipName_amplitude), meth_QEasingCurve_amplitude, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_amplitude)},
    {SIP_MLNAME_CAST(sipName_customType), meth_QEasingCurve_customType, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_customType)},
    {SIP_MLNAME_CAST(sipName_overshoot), meth_QEasingCurve_overshoot, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_overshoot)},
    {SIP_MLNAME_CAST(sipName_period), meth_QEasingCurve_period, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_period)},
    {SIP_MLNAME_CAST(sipName_setAmplitude), meth_QEasingCurve_setAmplitude, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_setAmplitude)},
    {SIP_MLNAME_CAST(sipName_setCustomType), meth_QEasingCurve_setCustomType, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_setCustomType)},
    {SIP_MLNAME_CAST(sipName_setOvershoot), meth_QEasingCurve_setOvershoot, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_setOvershoot)},
    {SIP_MLNAME_CAST(sipName_setPeriod), meth_QEasingCurve_setPeriod, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_setPeriod)},
    {SIP_MLNAME_CAST(sipName_setType), meth_QEasingCurve_setType, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_setType)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QEasingCurve_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_swap)},
    {SIP_MLNAME_CAST(sipName_toCubicSpline), meth_QEasingCurve_toCubicSpline, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_toCubicSpline)},
    {SIP_MLNAME_CAST(sipName_type), meth_QEasingCurve_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_type)},
    {SIP_MLNAME_CAST(sipName_valueForProgress), meth_QEasingCurve_valueForProgress, METH_VARARGS, SIP_MLDOC_CAST(doc_QEasingCurve_valueForProgress)}
};

static sipEnumMemberDef enummembers_QEasingCurve[] = {
    {sipName_BezierSpline, static_cast<int>( ::QEasingCurve::BezierSpline), 66},
    {sipName_CosineCurve, static_cast<int>( ::QEasingCurve::CosineCurve), 66},
    {sipName_Custom, static_cast<int>( ::QEasingCurve::Custom), 66},
    {sipName_InBack, static_cast<int>( ::QEasingCurve::InBack), 66},
    {sipName_InBounce, static_cast<int>( ::QEasingCurve::InBounce), 66},
    {sipName_InCirc, static_cast<int>( ::QEasingCurve::InCirc), 66},
    {sipName_InCubic, static_cast<int>( ::QEasingCurve::InCubic), 66},
    {sipName_InCurve, static_cast<int>( ::QEasingCurve::InCurve), 66},
    {sipName_InElastic, static_cast<int>( ::QEasingCurve::InElastic), 66},
    {sipName_InExpo, static_cast<int>( ::QEasingCurve::InExpo), 66},
    {sipName_InOutBack, static_cast<int>( ::QEasingCurve::InOutBack), 66},
    {sipName_InOutBounce, static_cast<int>( ::QEasingCurve::InOutBounce), 66},
    {sipName_InOutCirc, static_cast<int>( ::QEasingCurve::InOutCirc), 66},
    {sipName_InOutCubic, static_cast<int>( ::QEasingCurve::InOutCubic), 66},
    {sipName_InOutElastic, static_cast<int>( ::QEasingCurve::InOutElastic), 66},
    {sipName_InOutExpo, static_cast<int>( ::QEasingCurve::InOutExpo), 66},
    {sipName_InOutQuad, static_cast<int>( ::QEasingCurve::InOutQuad), 66},
    {sipName_InOutQuart, static_cast<int>( ::QEasingCurve::InOutQuart), 66},
    {sipName_InOutQuint, static_cast<int>( ::QEasingCurve::InOutQuint), 66},
    {sipName_InOutSine, static_cast<int>( ::QEasingCurve::InOutSine), 66},
    {sipName_InQuad, static_cast<int>( ::QEasingCurve::InQuad), 66},
    {sipName_InQuart, static_cast<int>( ::QEasingCurve::InQuart), 66},
    {sipName_InQuint, static_cast<int>( ::QEasingCurve::InQuint), 66},
    {sipName_InSine, static_cast<int>( ::QEasingCurve::InSine), 66},
    {sipName_Linear, static_cast<int>( ::QEasingCurve::Linear), 66},
    {sipName_OutBack, static_cast<int>( ::QEasingCurve::OutBack), 66},
    {sipName_OutBounce, static_cast<int>( ::QEasingCurve::OutBounce), 66},
    {sipName_OutCirc, static_cast<int>( ::QEasingCurve::OutCirc), 66},
    {sipName_OutCubic, static_cast<int>( ::QEasingCurve::OutCubic), 66},
    {sipName_OutCurve, static_cast<int>( ::QEasingCurve::OutCurve), 66},
    {sipName_OutElastic, static_cast<int>( ::QEasingCurve::OutElastic), 66},
    {sipName_OutExpo, static_cast<int>( ::QEasingCurve::OutExpo), 66},
    {sipName_OutInBack, static_cast<int>( ::QEasingCurve::OutInBack), 66},
    {sipName_OutInBounce, static_cast<int>( ::QEasingCurve::OutInBounce), 66},
    {sipName_OutInCirc, static_cast<int>( ::QEasingCurve::OutInCirc), 66},
    {sipName_OutInCubic, static_cast<int>( ::QEasingCurve::OutInCubic), 66},
    {sipName_OutInElastic, static_cast<int>( ::QEasingCurve::OutInElastic), 66},
    {sipName_OutInExpo, static_cast<int>( ::QEasingCurve::OutInExpo), 66},
    {sipName_OutInQuad, static_cast<int>( ::QEasingCurve::OutInQuad), 66},
    {sipName_OutInQuart, static_cast<int>( ::QEasingCurve::OutInQuart), 66},
    {sipName_OutInQuint, static_cast<int>( ::QEasingCurve::OutInQuint), 66},
    {sipName_OutInSine, static_cast<int>( ::QEasingCurve::OutInSine), 66},
    {sipName_OutQuad, static_cast<int>( ::QEasingCurve::OutQuad), 66},
    {sipName_OutQuart, static_cast<int>( ::QEasingCurve::OutQuart), 66},
    {sipName_OutQuint, static_cast<int>( ::QEasingCurve::OutQuint), 66},
    {sipName_OutSine, static_cast<int>( ::QEasingCurve::OutSine), 66},
    {sipName_SineCurve, static_cast<int>( ::QEasingCurve::SineCurve), 66},
    {sipName_TCBSpline, static_cast<int>( ::QEasingCurve::TCBSpline), 66},
};

PyDoc_STRVAR(doc_QEasingCurve, "\1QEasingCurve(type: QEasingCurve.Type = QEasingCurve.Linear)\n"
"QEasingCurve(Union[QEasingCurve, QEasingCurve.Type])");


static pyqt5ClassPluginDef plugin_QEasingCurve = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QEasingCurve = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QEasingCurve,
        {SIP_NULLPTR},
        &plugin_QEasingCurve
    },
    {
        sipNameNr_QEasingCurve,
        {0, 0, 1},
        15, methods_QEasingCurve,
        48, enummembers_QEasingCurve,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QEasingCurve,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QEasingCurve,
    init_type_QEasingCurve,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QEasingCurve,
    assign_QEasingCurve,
    array_QEasingCurve,
    copy_QEasingCurve,
    release_QEasingCurve,
    SIP_NULLPTR,
    convertTo_QEasingCurve,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdiriterator.sip"
#include <qdiriterator.h>
#line 39899 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdiriterator.sip"
#include <qdiriterator.h>
#line 39903 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QDirIterator_IteratorFlags___hash__(PyObject *);}
static long slot_QDirIterator_IteratorFlags___hash__(PyObject *sipSelf)
{
     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QDirIterator::IteratorFlags::Int();
#line 39921 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QDirIterator_IteratorFlags___bool__(PyObject *);}
static int slot_QDirIterator_IteratorFlags___bool__(PyObject *sipSelf)
{
     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDirIterator::IteratorFlags::Int() != 0);
#line 39946 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDirIterator::IteratorFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDirIterator_IteratorFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDirIterator::IteratorFlags::Int() != a0->operator QDirIterator::IteratorFlags::Int());
#line 39976 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QDirIterator::IteratorFlags *>(a0),sipType_QDirIterator_IteratorFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDirIterator_IteratorFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDirIterator::IteratorFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDirIterator_IteratorFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDirIterator::IteratorFlags::Int() == a0->operator QDirIterator::IteratorFlags::Int());
#line 40012 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QDirIterator::IteratorFlags *>(a0),sipType_QDirIterator_IteratorFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDirIterator_IteratorFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDirIterator_IteratorFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QDirIterator::IteratorFlags(*sipCpp ^ a0);
#line 40051 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDirIterator::IteratorFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDirIterator_IteratorFlags, &a0, &a0State, &a1))
        {
             ::QDirIterator::IteratorFlags*sipRes;

            sipRes = new  ::QDirIterator::IteratorFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QDirIterator_IteratorFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDirIterator_IteratorFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDirIterator_IteratorFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QDirIterator::IteratorFlags(*sipCpp | a0);
#line 40123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDirIterator::IteratorFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDirIterator_IteratorFlags, &a0, &a0State, &a1))
        {
             ::QDirIterator::IteratorFlags*sipRes;

            sipRes = new  ::QDirIterator::IteratorFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QDirIterator_IteratorFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDirIterator_IteratorFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDirIterator_IteratorFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QDirIterator::IteratorFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDirIterator::IteratorFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDirIterator_IteratorFlags, &a0, &a0State, &a1))
        {
             ::QDirIterator::IteratorFlags*sipRes;

            sipRes = new  ::QDirIterator::IteratorFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QDirIterator_IteratorFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDirIterator_IteratorFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___invert__(PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___invert__(PyObject *sipSelf)
{
     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QDirIterator::IteratorFlags*sipRes;

            sipRes = new  ::QDirIterator::IteratorFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QDirIterator_IteratorFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDirIterator_IteratorFlags___int__(PyObject *);}
static PyObject *slot_QDirIterator_IteratorFlags___int__(PyObject *sipSelf)
{
     ::QDirIterator::IteratorFlags *sipCpp = reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDirIterator_IteratorFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDirIterator_IteratorFlags(void *, int);}
static void release_QDirIterator_IteratorFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipCppV);
}


extern "C" {static void assign_QDirIterator_IteratorFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QDirIterator_IteratorFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDirIterator::IteratorFlags *>(sipSrc);
}


extern "C" {static void *array_QDirIterator_IteratorFlags(SIP_SSIZE_T);}
static void *array_QDirIterator_IteratorFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDirIterator::IteratorFlags[sipNrElem];
}


extern "C" {static void *copy_QDirIterator_IteratorFlags(const void *, SIP_SSIZE_T);}
static void *copy_QDirIterator_IteratorFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDirIterator::IteratorFlags(reinterpret_cast<const  ::QDirIterator::IteratorFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDirIterator_IteratorFlags(sipSimpleWrapper *);}
static void dealloc_QDirIterator_IteratorFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDirIterator_IteratorFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDirIterator_IteratorFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDirIterator_IteratorFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDirIterator::IteratorFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDirIterator::IteratorFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QDirIterator::IteratorFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QDirIterator::IteratorFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QDirIterator_IteratorFlags, &a0, &a0State))
        {
            sipCpp = new  ::QDirIterator::IteratorFlags(*a0);
            sipReleaseType(const_cast< ::QDirIterator::IteratorFlags *>(a0),sipType_QDirIterator_IteratorFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QDirIterator_IteratorFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QDirIterator_IteratorFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QDirIterator::IteratorFlags **sipCppPtr = reinterpret_cast< ::QDirIterator::IteratorFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QDirIterator::IteratorFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QDirIterator_IteratorFlag)) ||
            sipCanConvertToType(sipPy, sipType_QDirIterator_IteratorFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QDirIterator_IteratorFlag)))
{
    *sipCppPtr = new QDirIterator::IteratorFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QDirIterator::IteratorFlags *>(sipConvertToType(sipPy, sipType_QDirIterator_IteratorFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 40391 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDirIterator_IteratorFlags[] = {
    {(void *)slot_QDirIterator_IteratorFlags___hash__, hash_slot},
    {(void *)slot_QDirIterator_IteratorFlags___bool__, bool_slot},
    {(void *)slot_QDirIterator_IteratorFlags___ne__, ne_slot},
    {(void *)slot_QDirIterator_IteratorFlags___eq__, eq_slot},
    {(void *)slot_QDirIterator_IteratorFlags___ixor__, ixor_slot},
    {(void *)slot_QDirIterator_IteratorFlags___xor__, xor_slot},
    {(void *)slot_QDirIterator_IteratorFlags___ior__, ior_slot},
    {(void *)slot_QDirIterator_IteratorFlags___or__, or_slot},
    {(void *)slot_QDirIterator_IteratorFlags___iand__, iand_slot},
    {(void *)slot_QDirIterator_IteratorFlags___and__, and_slot},
    {(void *)slot_QDirIterator_IteratorFlags___invert__, invert_slot},
    {(void *)slot_QDirIterator_IteratorFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QDirIterator_IteratorFlags, "\1QDirIterator.IteratorFlags()\n"
"QDirIterator.IteratorFlags(Union[QDirIterator.IteratorFlags, QDirIterator.IteratorFlag])\n"
"QDirIterator.IteratorFlags(QDirIterator.IteratorFlags)");


static pyqt5ClassPluginDef plugin_QDirIterator_IteratorFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDirIterator_IteratorFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDirIterator__IteratorFlags,
        {SIP_NULLPTR},
        &plugin_QDirIterator_IteratorFlags
    },
    {
        sipNameNr_IteratorFlags,
        {61, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDirIterator_IteratorFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDirIterator_IteratorFlags,
    init_type_QDirIterator_IteratorFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDirIterator_IteratorFlags,
    assign_QDirIterator_IteratorFlags,
    array_QDirIterator_IteratorFlags,
    copy_QDirIterator_IteratorFlags,
    release_QDirIterator_IteratorFlags,
    SIP_NULLPTR,
    convertTo_QDirIterator_IteratorFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdiriterator.sip"
#include <qdiriterator.h>
#line 40479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 40483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdiriterator.sip"
#include <qdiriterator.h>
#line 40486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 40489 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 40492 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 40495 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 40498 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QDirIterator_next, "next(self) -> str");

extern "C" {static PyObject *meth_QDirIterator_next(PyObject *, PyObject *);}
static PyObject *meth_QDirIterator_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDirIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirIterator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->next());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirIterator, sipName_next, doc_QDirIterator_next);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDirIterator_hasNext, "hasNext(self) -> bool");

extern "C" {static PyObject *meth_QDirIterator_hasNext(PyObject *, PyObject *);}
static PyObject *meth_QDirIterator_hasNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDirIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirIterator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasNext();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirIterator, sipName_hasNext, doc_QDirIterator_hasNext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDirIterator_fileName, "fileName(self) -> str");

extern "C" {static PyObject *meth_QDirIterator_fileName(PyObject *, PyObject *);}
static PyObject *meth_QDirIterator_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDirIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirIterator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirIterator, sipName_fileName, doc_QDirIterator_fileName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDirIterator_filePath, "filePath(self) -> str");

extern "C" {static PyObject *meth_QDirIterator_filePath(PyObject *, PyObject *);}
static PyObject *meth_QDirIterator_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDirIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirIterator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->filePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirIterator, sipName_filePath, doc_QDirIterator_filePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDirIterator_fileInfo, "fileInfo(self) -> QFileInfo");

extern "C" {static PyObject *meth_QDirIterator_fileInfo(PyObject *, PyObject *);}
static PyObject *meth_QDirIterator_fileInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDirIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirIterator, &sipCpp))
        {
             ::QFileInfo*sipRes;

            sipRes = new  ::QFileInfo(sipCpp->fileInfo());

            return sipConvertFromNewType(sipRes,sipType_QFileInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirIterator, sipName_fileInfo, doc_QDirIterator_fileInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDirIterator_path, "path(self) -> str");

extern "C" {static PyObject *meth_QDirIterator_path(PyObject *, PyObject *);}
static PyObject *meth_QDirIterator_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDirIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDirIterator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDirIterator, sipName_path, doc_QDirIterator_path);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDirIterator(void *, int);}
static void release_QDirIterator(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDirIterator *>(sipCppV);
}


extern "C" {static void dealloc_QDirIterator(sipSimpleWrapper *);}
static void dealloc_QDirIterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDirIterator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDirIterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDirIterator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDirIterator *sipCpp = SIP_NULLPTR;

    {
        const  ::QDir* a0;
         ::QDirIterator::IteratorFlags a1def =  ::QDirIterator::NoIteratorFlags;
         ::QDirIterator::IteratorFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|J1", sipType_QDir, &a0, sipType_QDirIterator_IteratorFlags, &a1, &a1State))
        {
            sipCpp = new  ::QDirIterator(*a0,*a1);
            sipReleaseType(a1,sipType_QDirIterator_IteratorFlags,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDirIterator::IteratorFlags a1def =  ::QDirIterator::NoIteratorFlags;
         ::QDirIterator::IteratorFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1", sipType_QString,&a0, &a0State, sipType_QDirIterator_IteratorFlags, &a1, &a1State))
        {
            sipCpp = new  ::QDirIterator(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QDirIterator_IteratorFlags,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDir::Filters* a1;
        int a1State = 0;
         ::QDirIterator::IteratorFlags a2def =  ::QDirIterator::NoIteratorFlags;
         ::QDirIterator::IteratorFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|J1", sipType_QString,&a0, &a0State, sipType_QDir_Filters, &a1, &a1State, sipType_QDirIterator_IteratorFlags, &a2, &a2State))
        {
            sipCpp = new  ::QDirIterator(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QDir_Filters,a1State);
            sipReleaseType(a2,sipType_QDirIterator_IteratorFlags,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;
         ::QDir::Filters a2def = QDir::NoFilter;
         ::QDir::Filters* a2 = &a2def;
        int a2State = 0;
         ::QDirIterator::IteratorFlags a3def =  ::QDirIterator::NoIteratorFlags;
         ::QDirIterator::IteratorFlags* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_filters,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QDir_Filters, &a2, &a2State, sipType_QDirIterator_IteratorFlags, &a3, &a3State))
        {
            sipCpp = new  ::QDirIterator(*a0,*a1,*a2,*a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(a2,sipType_QDir_Filters,a2State);
            sipReleaseType(a3,sipType_QDirIterator_IteratorFlags,a3State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QDirIterator[] = {
    {SIP_MLNAME_CAST(sipName_fileInfo), meth_QDirIterator_fileInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirIterator_fileInfo)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QDirIterator_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirIterator_fileName)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QDirIterator_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirIterator_filePath)},
    {SIP_MLNAME_CAST(sipName_hasNext), meth_QDirIterator_hasNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirIterator_hasNext)},
    {SIP_MLNAME_CAST(sipName_next), meth_QDirIterator_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirIterator_next)},
    {SIP_MLNAME_CAST(sipName_path), meth_QDirIterator_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QDirIterator_path)}
};

static sipEnumMemberDef enummembers_QDirIterator[] = {
    {sipName_FollowSymlinks, static_cast<int>( ::QDirIterator::FollowSymlinks), 62},
    {sipName_NoIteratorFlags, static_cast<int>( ::QDirIterator::NoIteratorFlags), 62},
    {sipName_Subdirectories, static_cast<int>( ::QDirIterator::Subdirectories), 62},
};

PyDoc_STRVAR(doc_QDirIterator, "\1QDirIterator(QDir, flags: QDirIterator.IteratorFlags = QDirIterator.NoIteratorFlags)\n"
"QDirIterator(str, flags: QDirIterator.IteratorFlags = QDirIterator.NoIteratorFlags)\n"
"QDirIterator(str, QDir.Filters, flags: QDirIterator.IteratorFlags = QDirIterator.NoIteratorFlags)\n"
"QDirIterator(str, Iterable[str], filters: QDir.Filters = QDir.NoFilter, flags: QDirIterator.IteratorFlags = QDirIterator.NoIteratorFlags)");


static pyqt5ClassPluginDef plugin_QDirIterator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDirIterator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDirIterator,
        {SIP_NULLPTR},
        &plugin_QDirIterator
    },
    {
        sipNameNr_QDirIterator,
        {0, 0, 1},
        6, methods_QDirIterator,
        3, enummembers_QDirIterator,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDirIterator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QDirIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDirIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDirIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 40879 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 40883 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QDir_SortFlags___hash__(PyObject *);}
static long slot_QDir_SortFlags___hash__(PyObject *sipSelf)
{
     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QDir::SortFlags::Int();
#line 40901 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QDir_SortFlags___bool__(PyObject *);}
static int slot_QDir_SortFlags___bool__(PyObject *sipSelf)
{
     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDir::SortFlags::Int() != 0);
#line 40926 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDir_SortFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir::SortFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDir_SortFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDir::SortFlags::Int() != a0->operator QDir::SortFlags::Int());
#line 40956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QDir::SortFlags *>(a0),sipType_QDir_SortFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDir_SortFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDir_SortFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir::SortFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDir_SortFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDir::SortFlags::Int() == a0->operator QDir::SortFlags::Int());
#line 40992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QDir::SortFlags *>(a0),sipType_QDir_SortFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDir_SortFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDir_SortFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDir_SortFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QDir::SortFlags(*sipCpp ^ a0);
#line 41031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDir_SortFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::SortFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDir_SortFlags, &a0, &a0State, &a1))
        {
             ::QDir::SortFlags*sipRes;

            sipRes = new  ::QDir::SortFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QDir_SortFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDir_SortFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDir_SortFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QDir::SortFlags(*sipCpp | a0);
#line 41103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDir_SortFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::SortFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDir_SortFlags, &a0, &a0State, &a1))
        {
             ::QDir::SortFlags*sipRes;

            sipRes = new  ::QDir::SortFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QDir_SortFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDir_SortFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDir_SortFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QDir::SortFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDir_SortFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QDir_SortFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::SortFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDir_SortFlags, &a0, &a0State, &a1))
        {
             ::QDir::SortFlags*sipRes;

            sipRes = new  ::QDir::SortFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QDir_SortFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDir_SortFlags___invert__(PyObject *);}
static PyObject *slot_QDir_SortFlags___invert__(PyObject *sipSelf)
{
     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QDir::SortFlags*sipRes;

            sipRes = new  ::QDir::SortFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDir_SortFlags___int__(PyObject *);}
static PyObject *slot_QDir_SortFlags___int__(PyObject *sipSelf)
{
     ::QDir::SortFlags *sipCpp = reinterpret_cast< ::QDir::SortFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_SortFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDir_SortFlags(void *, int);}
static void release_QDir_SortFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDir::SortFlags *>(sipCppV);
}


extern "C" {static void assign_QDir_SortFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QDir_SortFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDir::SortFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDir::SortFlags *>(sipSrc);
}


extern "C" {static void *array_QDir_SortFlags(SIP_SSIZE_T);}
static void *array_QDir_SortFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDir::SortFlags[sipNrElem];
}


extern "C" {static void *copy_QDir_SortFlags(const void *, SIP_SSIZE_T);}
static void *copy_QDir_SortFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDir::SortFlags(reinterpret_cast<const  ::QDir::SortFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDir_SortFlags(sipSimpleWrapper *);}
static void dealloc_QDir_SortFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDir_SortFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDir_SortFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDir_SortFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDir::SortFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDir::SortFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QDir::SortFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QDir::SortFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QDir_SortFlags, &a0, &a0State))
        {
            sipCpp = new  ::QDir::SortFlags(*a0);
            sipReleaseType(const_cast< ::QDir::SortFlags *>(a0),sipType_QDir_SortFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QDir_SortFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QDir_SortFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QDir::SortFlags **sipCppPtr = reinterpret_cast< ::QDir::SortFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QDir::SortFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QDir_SortFlag)) ||
            sipCanConvertToType(sipPy, sipType_QDir_SortFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QDir_SortFlag)))
{
    *sipCppPtr = new QDir::SortFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QDir::SortFlags *>(sipConvertToType(sipPy, sipType_QDir_SortFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 41371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDir_SortFlags[] = {
    {(void *)slot_QDir_SortFlags___hash__, hash_slot},
    {(void *)slot_QDir_SortFlags___bool__, bool_slot},
    {(void *)slot_QDir_SortFlags___ne__, ne_slot},
    {(void *)slot_QDir_SortFlags___eq__, eq_slot},
    {(void *)slot_QDir_SortFlags___ixor__, ixor_slot},
    {(void *)slot_QDir_SortFlags___xor__, xor_slot},
    {(void *)slot_QDir_SortFlags___ior__, ior_slot},
    {(void *)slot_QDir_SortFlags___or__, or_slot},
    {(void *)slot_QDir_SortFlags___iand__, iand_slot},
    {(void *)slot_QDir_SortFlags___and__, and_slot},
    {(void *)slot_QDir_SortFlags___invert__, invert_slot},
    {(void *)slot_QDir_SortFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QDir_SortFlags, "\1QDir.SortFlags()\n"
"QDir.SortFlags(Union[QDir.SortFlags, QDir.SortFlag])\n"
"QDir.SortFlags(QDir.SortFlags)");


static pyqt5ClassPluginDef plugin_QDir_SortFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDir_SortFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDir__SortFlags,
        {SIP_NULLPTR},
        &plugin_QDir_SortFlags
    },
    {
        sipNameNr_SortFlags,
        {56, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDir_SortFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDir_SortFlags,
    init_type_QDir_SortFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDir_SortFlags,
    assign_QDir_SortFlags,
    array_QDir_SortFlags,
    copy_QDir_SortFlags,
    release_QDir_SortFlags,
    SIP_NULLPTR,
    convertTo_QDir_SortFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 41459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 41463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QDir_Filters___hash__(PyObject *);}
static long slot_QDir_Filters___hash__(PyObject *sipSelf)
{
     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QDir::Filters::Int();
#line 41481 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QDir_Filters___bool__(PyObject *);}
static int slot_QDir_Filters___bool__(PyObject *sipSelf)
{
     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDir::Filters::Int() != 0);
#line 41506 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDir_Filters___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filters___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir::Filters* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDir_Filters, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDir::Filters::Int() != a0->operator QDir::Filters::Int());
#line 41536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QDir::Filters *>(a0),sipType_QDir_Filters,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDir_Filters, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDir_Filters___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filters___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir::Filters* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDir_Filters, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QDir::Filters::Int() == a0->operator QDir::Filters::Int());
#line 41572 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QDir::Filters *>(a0),sipType_QDir_Filters,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDir_Filters, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDir_Filters___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filters___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDir_Filters)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QDir::Filters(*sipCpp ^ a0);
#line 41611 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDir_Filters___xor__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filters___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDir_Filters, &a0, &a0State, &a1))
        {
             ::QDir::Filters*sipRes;

            sipRes = new  ::QDir::Filters((*a0 ^ a1));
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDir_Filters___ior__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filters___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDir_Filters)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QDir::Filters(*sipCpp | a0);
#line 41683 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDir_Filters___or__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filters___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDir_Filters, &a0, &a0State, &a1))
        {
             ::QDir::Filters*sipRes;

            sipRes = new  ::QDir::Filters((*a0 | a1));
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDir_Filters___iand__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filters___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDir_Filters)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QDir::Filters::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDir_Filters___and__(PyObject *,PyObject *);}
static PyObject *slot_QDir_Filters___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QDir_Filters, &a0, &a0State, &a1))
        {
             ::QDir::Filters*sipRes;

            sipRes = new  ::QDir::Filters((*a0 & a1));
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDir_Filters___invert__(PyObject *);}
static PyObject *slot_QDir_Filters___invert__(PyObject *sipSelf)
{
     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QDir::Filters*sipRes;

            sipRes = new  ::QDir::Filters(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDir_Filters___int__(PyObject *);}
static PyObject *slot_QDir_Filters___int__(PyObject *sipSelf)
{
     ::QDir::Filters *sipCpp = reinterpret_cast< ::QDir::Filters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir_Filters));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDir_Filters(void *, int);}
static void release_QDir_Filters(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDir::Filters *>(sipCppV);
}


extern "C" {static void assign_QDir_Filters(void *, SIP_SSIZE_T, void *);}
static void assign_QDir_Filters(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDir::Filters *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDir::Filters *>(sipSrc);
}


extern "C" {static void *array_QDir_Filters(SIP_SSIZE_T);}
static void *array_QDir_Filters(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDir::Filters[sipNrElem];
}


extern "C" {static void *copy_QDir_Filters(const void *, SIP_SSIZE_T);}
static void *copy_QDir_Filters(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDir::Filters(reinterpret_cast<const  ::QDir::Filters *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDir_Filters(sipSimpleWrapper *);}
static void dealloc_QDir_Filters(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDir_Filters(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDir_Filters(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDir_Filters(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDir::Filters *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDir::Filters();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QDir::Filters(a0);

            return sipCpp;
        }
    }

    {
        const  ::QDir::Filters* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QDir_Filters, &a0, &a0State))
        {
            sipCpp = new  ::QDir::Filters(*a0);
            sipReleaseType(const_cast< ::QDir::Filters *>(a0),sipType_QDir_Filters,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QDir_Filters(PyObject *, void **, int *, PyObject *);}
static int convertTo_QDir_Filters(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QDir::Filters **sipCppPtr = reinterpret_cast< ::QDir::Filters **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QDir::Filters is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QDir_Filter)) ||
            sipCanConvertToType(sipPy, sipType_QDir_Filters, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QDir_Filter)))
{
    *sipCppPtr = new QDir::Filters(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QDir::Filters *>(sipConvertToType(sipPy, sipType_QDir_Filters, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 41951 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDir_Filters[] = {
    {(void *)slot_QDir_Filters___hash__, hash_slot},
    {(void *)slot_QDir_Filters___bool__, bool_slot},
    {(void *)slot_QDir_Filters___ne__, ne_slot},
    {(void *)slot_QDir_Filters___eq__, eq_slot},
    {(void *)slot_QDir_Filters___ixor__, ixor_slot},
    {(void *)slot_QDir_Filters___xor__, xor_slot},
    {(void *)slot_QDir_Filters___ior__, ior_slot},
    {(void *)slot_QDir_Filters___or__, or_slot},
    {(void *)slot_QDir_Filters___iand__, iand_slot},
    {(void *)slot_QDir_Filters___and__, and_slot},
    {(void *)slot_QDir_Filters___invert__, invert_slot},
    {(void *)slot_QDir_Filters___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QDir_Filters, "\1QDir.Filters()\n"
"QDir.Filters(Union[QDir.Filters, QDir.Filter])\n"
"QDir.Filters(QDir.Filters)");


static pyqt5ClassPluginDef plugin_QDir_Filters = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDir_Filters = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDir__Filters,
        {SIP_NULLPTR},
        &plugin_QDir_Filters
    },
    {
        sipNameNr_Filters,
        {56, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDir_Filters,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDir_Filters,
    init_type_QDir_Filters,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDir_Filters,
    assign_QDir_Filters,
    array_QDir_Filters,
    copy_QDir_Filters,
    release_QDir_Filters,
    SIP_NULLPTR,
    convertTo_QDir_Filters,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 42039 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42043 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 42046 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
#include <qdir.h>
#line 42049 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 42052 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42055 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42058 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 42061 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QDir_setPath, "setPath(self, str)");

extern "C" {static PyObject *meth_QDir_setPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setPath, doc_QDir_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_path, "path(self) -> str");

extern "C" {static PyObject *meth_QDir_path(PyObject *, PyObject *);}
static PyObject *meth_QDir_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_path, doc_QDir_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_absolutePath, "absolutePath(self) -> str");

extern "C" {static PyObject *meth_QDir_absolutePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_absolutePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->absolutePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_absolutePath, doc_QDir_absolutePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_canonicalPath, "canonicalPath(self) -> str");

extern "C" {static PyObject *meth_QDir_canonicalPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_canonicalPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->canonicalPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_canonicalPath, doc_QDir_canonicalPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_dirName, "dirName(self) -> str");

extern "C" {static PyObject *meth_QDir_dirName(PyObject *, PyObject *);}
static PyObject *meth_QDir_dirName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->dirName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_dirName, doc_QDir_dirName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_filePath, "filePath(self, str) -> str");

extern "C" {static PyObject *meth_QDir_filePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->filePath(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_filePath, doc_QDir_filePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_absoluteFilePath, "absoluteFilePath(self, str) -> str");

extern "C" {static PyObject *meth_QDir_absoluteFilePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_absoluteFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->absoluteFilePath(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_absoluteFilePath, doc_QDir_absoluteFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_relativeFilePath, "relativeFilePath(self, str) -> str");

extern "C" {static PyObject *meth_QDir_relativeFilePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_relativeFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->relativeFilePath(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_relativeFilePath, doc_QDir_relativeFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_cd, "cd(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_cd(PyObject *, PyObject *);}
static PyObject *meth_QDir_cd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->cd(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_cd, doc_QDir_cd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_cdUp, "cdUp(self) -> bool");

extern "C" {static PyObject *meth_QDir_cdUp(PyObject *, PyObject *);}
static PyObject *meth_QDir_cdUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->cdUp();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_cdUp, doc_QDir_cdUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_nameFilters, "nameFilters(self) -> List[str]");

extern "C" {static PyObject *meth_QDir_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QDir_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->nameFilters());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_nameFilters, doc_QDir_nameFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setNameFilters, "setNameFilters(self, Iterable[str])");

extern "C" {static PyObject *meth_QDir_setNameFilters(PyObject *, PyObject *);}
static PyObject *meth_QDir_setNameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setNameFilters(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setNameFilters, doc_QDir_setNameFilters);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_filter, "filter(self) -> QDir.Filters");

extern "C" {static PyObject *meth_QDir_filter(PyObject *, PyObject *);}
static PyObject *meth_QDir_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QDir::Filters*sipRes;

            sipRes = new  ::QDir::Filters(sipCpp->filter());

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_filter, doc_QDir_filter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setFilter, "setFilter(self, Union[QDir.Filters, QDir.Filter])");

extern "C" {static PyObject *meth_QDir_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QDir_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            sipCpp->setFilter(*a0);
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setFilter, doc_QDir_setFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_sorting, "sorting(self) -> QDir.SortFlags");

extern "C" {static PyObject *meth_QDir_sorting(PyObject *, PyObject *);}
static PyObject *meth_QDir_sorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::QDir::SortFlags*sipRes;

            sipRes = new  ::QDir::SortFlags(sipCpp->sorting());

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_sorting, doc_QDir_sorting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setSorting, "setSorting(self, Union[QDir.SortFlags, QDir.SortFlag])");

extern "C" {static PyObject *meth_QDir_setSorting(PyObject *, PyObject *);}
static PyObject *meth_QDir_setSorting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::SortFlags* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_SortFlags, &a0, &a0State))
        {
            sipCpp->setSorting(*a0);
            sipReleaseType(a0,sipType_QDir_SortFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setSorting, doc_QDir_setSorting);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_count, "count(self) -> int");

extern "C" {static PyObject *meth_QDir_count(PyObject *, PyObject *);}
static PyObject *meth_QDir_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->count();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_count, doc_QDir_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_nameFiltersFromString, "nameFiltersFromString(str) -> List[str]");

extern "C" {static PyObject *meth_QDir_nameFiltersFromString(PyObject *, PyObject *);}
static PyObject *meth_QDir_nameFiltersFromString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QDir::nameFiltersFromString(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_nameFiltersFromString, doc_QDir_nameFiltersFromString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_entryList, "entryList(self, filters: Union[QDir.Filters, QDir.Filter] = QDir.NoFilter, sort: Union[QDir.SortFlags, QDir.SortFlag] = QDir.NoSort) -> List[str]\n"
"entryList(self, Iterable[str], filters: Union[QDir.Filters, QDir.Filter] = QDir.NoFilter, sort: Union[QDir.SortFlags, QDir.SortFlag] = QDir.NoSort) -> List[str]");

extern "C" {static PyObject *meth_QDir_entryList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDir_entryList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters a0def = QDir::NoFilter;
         ::QDir::Filters* a0 = &a0def;
        int a0State = 0;
         ::QDir::SortFlags a1def = QDir::NoSort;
         ::QDir::SortFlags* a1 = &a1def;
        int a1State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State, sipType_QDir_SortFlags, &a1, &a1State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->entryList(*a0,*a1));
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(a1,sipType_QDir_SortFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDir::Filters a1def = QDir::NoFilter;
         ::QDir::Filters* a1 = &a1def;
        int a1State = 0;
         ::QDir::SortFlags a2def = QDir::NoSort;
         ::QDir::SortFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State, sipType_QDir_Filters, &a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->entryList(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(a1,sipType_QDir_Filters,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_entryList, doc_QDir_entryList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_entryInfoList, "entryInfoList(self, filters: Union[QDir.Filters, QDir.Filter] = QDir.NoFilter, sort: Union[QDir.SortFlags, QDir.SortFlag] = QDir.NoSort) -> List[QFileInfo]\n"
"entryInfoList(self, Iterable[str], filters: Union[QDir.Filters, QDir.Filter] = QDir.NoFilter, sort: Union[QDir.SortFlags, QDir.SortFlag] = QDir.NoSort) -> List[QFileInfo]");

extern "C" {static PyObject *meth_QDir_entryInfoList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDir_entryInfoList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters a0def = QDir::NoFilter;
         ::QDir::Filters* a0 = &a0def;
        int a0State = 0;
         ::QDir::SortFlags a1def = QDir::NoSort;
         ::QDir::SortFlags* a1 = &a1def;
        int a1State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State, sipType_QDir_SortFlags, &a1, &a1State))
        {
             ::QFileInfoList*sipRes;

            sipRes = new  ::QFileInfoList(sipCpp->entryInfoList(*a0,*a1));
            sipReleaseType(a0,sipType_QDir_Filters,a0State);
            sipReleaseType(a1,sipType_QDir_SortFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,SIP_NULLPTR);
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDir::Filters a1def = QDir::NoFilter;
         ::QDir::Filters* a1 = &a1def;
        int a1State = 0;
         ::QDir::SortFlags a2def = QDir::NoSort;
         ::QDir::SortFlags* a2 = &a2def;
        int a2State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_filters,
            sipName_sort,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QStringList,&a0, &a0State, sipType_QDir_Filters, &a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State))
        {
             ::QFileInfoList*sipRes;

            sipRes = new  ::QFileInfoList(sipCpp->entryInfoList(*a0,*a1,*a2));
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(a1,sipType_QDir_Filters,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_entryInfoList, doc_QDir_entryInfoList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_mkdir, "mkdir(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_mkdir(PyObject *, PyObject *);}
static PyObject *meth_QDir_mkdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->mkdir(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_mkdir, doc_QDir_mkdir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_rmdir, "rmdir(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_rmdir(PyObject *, PyObject *);}
static PyObject *meth_QDir_rmdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->rmdir(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_rmdir, doc_QDir_rmdir);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_mkpath, "mkpath(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_mkpath(PyObject *, PyObject *);}
static PyObject *meth_QDir_mkpath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->mkpath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_mkpath, doc_QDir_mkpath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_rmpath, "rmpath(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_rmpath(PyObject *, PyObject *);}
static PyObject *meth_QDir_rmpath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->rmpath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_rmpath, doc_QDir_rmpath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isReadable, "isReadable(self) -> bool");

extern "C" {static PyObject *meth_QDir_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QDir_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isReadable, doc_QDir_isReadable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_exists, "exists(self) -> bool\n"
"exists(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_exists(PyObject *, PyObject *);}
static PyObject *meth_QDir_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exists();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->exists(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_exists, doc_QDir_exists);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isRoot, "isRoot(self) -> bool");

extern "C" {static PyObject *meth_QDir_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRoot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRoot, doc_QDir_isRoot);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isRelativePath, "isRelativePath(str) -> bool");

extern "C" {static PyObject *meth_QDir_isRelativePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRelativePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QDir::isRelativePath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRelativePath, doc_QDir_isRelativePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isAbsolutePath, "isAbsolutePath(str) -> bool");

extern "C" {static PyObject *meth_QDir_isAbsolutePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_isAbsolutePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QDir::isAbsolutePath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isAbsolutePath, doc_QDir_isAbsolutePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isRelative, "isRelative(self) -> bool");

extern "C" {static PyObject *meth_QDir_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QDir_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRelative();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isRelative, doc_QDir_isRelative);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isAbsolute, "isAbsolute(self) -> bool");

extern "C" {static PyObject *meth_QDir_isAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QDir_isAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAbsolute();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isAbsolute, doc_QDir_isAbsolute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_makeAbsolute, "makeAbsolute(self) -> bool");

extern "C" {static PyObject *meth_QDir_makeAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QDir_makeAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->makeAbsolute();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_makeAbsolute, doc_QDir_makeAbsolute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_remove, "remove(self, str) -> bool");

extern "C" {static PyObject *meth_QDir_remove(PyObject *, PyObject *);}
static PyObject *meth_QDir_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->remove(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_remove, doc_QDir_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_rename, "rename(self, str, str) -> bool");

extern "C" {static PyObject *meth_QDir_rename(PyObject *, PyObject *);}
static PyObject *meth_QDir_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->rename(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_rename, doc_QDir_rename);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_refresh, "refresh(self)");

extern "C" {static PyObject *meth_QDir_refresh(PyObject *, PyObject *);}
static PyObject *meth_QDir_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            sipCpp->refresh();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_refresh, doc_QDir_refresh);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_drives, "drives() -> List[QFileInfo]");

extern "C" {static PyObject *meth_QDir_drives(PyObject *, PyObject *);}
static PyObject *meth_QDir_drives(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QFileInfoList*sipRes;

            sipRes = new  ::QFileInfoList( ::QDir::drives());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QFileInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_drives, doc_QDir_drives);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_separator, "separator() -> str");

extern "C" {static PyObject *meth_QDir_separator(PyObject *, PyObject *);}
static PyObject *meth_QDir_separator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar( ::QDir::separator());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_separator, doc_QDir_separator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setCurrent, "setCurrent(str) -> bool");

extern "C" {static PyObject *meth_QDir_setCurrent(PyObject *, PyObject *);}
static PyObject *meth_QDir_setCurrent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QDir::setCurrent(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setCurrent, doc_QDir_setCurrent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_current, "current() -> QDir");

extern "C" {static PyObject *meth_QDir_current(PyObject *, PyObject *);}
static PyObject *meth_QDir_current(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir( ::QDir::current());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_current, doc_QDir_current);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_currentPath, "currentPath() -> str");

extern "C" {static PyObject *meth_QDir_currentPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_currentPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDir::currentPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_currentPath, doc_QDir_currentPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_home, "home() -> QDir");

extern "C" {static PyObject *meth_QDir_home(PyObject *, PyObject *);}
static PyObject *meth_QDir_home(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir( ::QDir::home());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_home, doc_QDir_home);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_homePath, "homePath() -> str");

extern "C" {static PyObject *meth_QDir_homePath(PyObject *, PyObject *);}
static PyObject *meth_QDir_homePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDir::homePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_homePath, doc_QDir_homePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_root, "root() -> QDir");

extern "C" {static PyObject *meth_QDir_root(PyObject *, PyObject *);}
static PyObject *meth_QDir_root(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir( ::QDir::root());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_root, doc_QDir_root);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_rootPath, "rootPath() -> str");

extern "C" {static PyObject *meth_QDir_rootPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_rootPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDir::rootPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_rootPath, doc_QDir_rootPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_temp, "temp() -> QDir");

extern "C" {static PyObject *meth_QDir_temp(PyObject *, PyObject *);}
static PyObject *meth_QDir_temp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDir*sipRes;

            sipRes = new  ::QDir( ::QDir::temp());

            return sipConvertFromNewType(sipRes,sipType_QDir,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_temp, doc_QDir_temp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_tempPath, "tempPath() -> str");

extern "C" {static PyObject *meth_QDir_tempPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_tempPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDir::tempPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_tempPath, doc_QDir_tempPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_match, "match(Iterable[str], str) -> bool\n"
"match(str, str) -> bool");

extern "C" {static PyObject *meth_QDir_match(PyObject *, PyObject *);}
static PyObject *meth_QDir_match(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QStringList,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QDir::match(*a0,*a1);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes =  ::QDir::match(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_match, doc_QDir_match);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_cleanPath, "cleanPath(str) -> str");

extern "C" {static PyObject *meth_QDir_cleanPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_cleanPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDir::cleanPath(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_cleanPath, doc_QDir_cleanPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_toNativeSeparators, "toNativeSeparators(str) -> str");

extern "C" {static PyObject *meth_QDir_toNativeSeparators(PyObject *, PyObject *);}
static PyObject *meth_QDir_toNativeSeparators(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDir::toNativeSeparators(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_toNativeSeparators, doc_QDir_toNativeSeparators);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_fromNativeSeparators, "fromNativeSeparators(str) -> str");

extern "C" {static PyObject *meth_QDir_fromNativeSeparators(PyObject *, PyObject *);}
static PyObject *meth_QDir_fromNativeSeparators(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDir::fromNativeSeparators(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_fromNativeSeparators, doc_QDir_fromNativeSeparators);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_setSearchPaths, "setSearchPaths(str, Iterable[str])");

extern "C" {static PyObject *meth_QDir_setSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QDir_setSearchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
             ::QDir::setSearchPaths(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_setSearchPaths, doc_QDir_setSearchPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_addSearchPath, "addSearchPath(str, str)");

extern "C" {static PyObject *meth_QDir_addSearchPath(PyObject *, PyObject *);}
static PyObject *meth_QDir_addSearchPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDir::addSearchPath(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_addSearchPath, doc_QDir_addSearchPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_searchPaths, "searchPaths(str) -> List[str]");

extern "C" {static PyObject *meth_QDir_searchPaths(PyObject *, PyObject *);}
static PyObject *meth_QDir_searchPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QDir::searchPaths(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_searchPaths, doc_QDir_searchPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_removeRecursively, "removeRecursively(self) -> bool");

extern "C" {static PyObject *meth_QDir_removeRecursively(PyObject *, PyObject *);}
static PyObject *meth_QDir_removeRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->removeRecursively();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_removeRecursively, doc_QDir_removeRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_swap, "swap(self, QDir)");

extern "C" {static PyObject *meth_QDir_swap(PyObject *, PyObject *);}
static PyObject *meth_QDir_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir* a0;
         ::QDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_swap, doc_QDir_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_listSeparator, "listSeparator() -> str");

extern "C" {static PyObject *meth_QDir_listSeparator(PyObject *, PyObject *);}
static PyObject *meth_QDir_listSeparator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QChar*sipRes;

            sipRes = new  ::QChar( ::QDir::listSeparator());

            return sipConvertFromNewType(sipRes,sipType_QChar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_listSeparator, doc_QDir_listSeparator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDir_isEmpty, "isEmpty(self, filters: Union[QDir.Filters, QDir.Filter] = QDir.AllEntries|QDir.NoDotAndDotDot) -> bool");

extern "C" {static PyObject *meth_QDir_isEmpty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDir_isEmpty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDir::Filters a0def = QDir::AllEntries|QDir::NoDotAndDotDot;
         ::QDir::Filters* a0 = &a0def;
        int a0State = 0;
        const  ::QDir *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filters,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QDir, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty(*a0);
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName_isEmpty, doc_QDir_isEmpty);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QDir___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDir___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDir, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDir::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDir, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDir___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDir___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDir* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDir, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDir::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDir, sipSelf, sipArg);
}


extern "C" {static int slot_QDir___contains__(PyObject *,PyObject *);}
static int slot_QDir___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            int sipRes = 0;

#line 126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
        sipRes = bool(sipCpp->entryList().contains(*a0));
#line 43927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QDir___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QDir___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QString*sipRes = 0;
            int sipIsErr = 0;

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
        Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QString(sipCpp->operator[]((int)idx));
#line 43966 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QStringList*sipRes = 0;
            int sipIsErr = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdir.sip"
        Py_ssize_t start, stop, step, slicelength;
        
        if (sipConvertFromSliceObject(a0, sipCpp->count(), &start, &stop, &step, &slicelength) < 0)
        {
            sipIsErr = 1;
        }
        else
        {
            sipRes = new QStringList();
        
            for (Py_ssize_t i = 0; i < slicelength; ++i)
            {
                (*sipRes) += (*sipCpp)[start];
                start += step;
            }
        }
#line 44000 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDir, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QDir___len__(PyObject *);}
static SIP_SSIZE_T slot_QDir___len__(PyObject *sipSelf)
{
     ::QDir *sipCpp = reinterpret_cast< ::QDir *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDir));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 44031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDir(void *, int);}
static void release_QDir(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDir *>(sipCppV);
}


extern "C" {static void assign_QDir(void *, SIP_SSIZE_T, void *);}
static void assign_QDir(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDir *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDir *>(sipSrc);
}


extern "C" {static void *array_QDir(SIP_SSIZE_T);}
static void *array_QDir(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDir[sipNrElem];
}


extern "C" {static void *copy_QDir(const void *, SIP_SSIZE_T);}
static void *copy_QDir(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDir(reinterpret_cast<const  ::QDir *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDir(sipSimpleWrapper *);}
static void dealloc_QDir(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDir(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDir(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDir(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDir *sipCpp = SIP_NULLPTR;

    {
        const  ::QDir* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDir, &a0))
        {
            sipCpp = new  ::QDir(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QString& a0def = QString();
        const  ::QString* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_path,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QDir(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QDir::SortFlags a2def = QDir::SortFlags(QDir::Name|QDir::IgnoreCase);
         ::QDir::SortFlags* a2 = &a2def;
        int a2State = 0;
         ::QDir::Filters a3def =  ::QDir::AllEntries;
         ::QDir::Filters* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_sort,
            sipName_filters,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QDir_SortFlags, &a2, &a2State, sipType_QDir_Filters, &a3, &a3State))
        {
            sipCpp = new  ::QDir(*a0,*a1,*a2,*a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QDir_SortFlags,a2State);
            sipReleaseType(a3,sipType_QDir_Filters,a3State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDir[] = {
    {(void *)slot_QDir___ne__, ne_slot},
    {(void *)slot_QDir___eq__, eq_slot},
    {(void *)slot_QDir___contains__, contains_slot},
    {(void *)slot_QDir___getitem__, getitem_slot},
    {(void *)slot_QDir___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDir[] = {
    {SIP_MLNAME_CAST(sipName_absoluteFilePath), meth_QDir_absoluteFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_absoluteFilePath)},
    {SIP_MLNAME_CAST(sipName_absolutePath), meth_QDir_absolutePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_absolutePath)},
    {SIP_MLNAME_CAST(sipName_addSearchPath), meth_QDir_addSearchPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_addSearchPath)},
    {SIP_MLNAME_CAST(sipName_canonicalPath), meth_QDir_canonicalPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_canonicalPath)},
    {SIP_MLNAME_CAST(sipName_cd), meth_QDir_cd, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_cd)},
    {SIP_MLNAME_CAST(sipName_cdUp), meth_QDir_cdUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_cdUp)},
    {SIP_MLNAME_CAST(sipName_cleanPath), meth_QDir_cleanPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_cleanPath)},
    {SIP_MLNAME_CAST(sipName_count), meth_QDir_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_count)},
    {SIP_MLNAME_CAST(sipName_current), meth_QDir_current, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_current)},
    {SIP_MLNAME_CAST(sipName_currentPath), meth_QDir_currentPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_currentPath)},
    {SIP_MLNAME_CAST(sipName_dirName), meth_QDir_dirName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_dirName)},
    {SIP_MLNAME_CAST(sipName_drives), meth_QDir_drives, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_drives)},
    {SIP_MLNAME_CAST(sipName_entryInfoList), SIP_MLMETH_CAST(meth_QDir_entryInfoList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDir_entryInfoList)},
    {SIP_MLNAME_CAST(sipName_entryList), SIP_MLMETH_CAST(meth_QDir_entryList), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDir_entryList)},
    {SIP_MLNAME_CAST(sipName_exists), meth_QDir_exists, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_exists)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QDir_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_filePath)},
    {SIP_MLNAME_CAST(sipName_filter), meth_QDir_filter, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_filter)},
    {SIP_MLNAME_CAST(sipName_fromNativeSeparators), meth_QDir_fromNativeSeparators, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_fromNativeSeparators)},
    {SIP_MLNAME_CAST(sipName_home), meth_QDir_home, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_home)},
    {SIP_MLNAME_CAST(sipName_homePath), meth_QDir_homePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_homePath)},
    {SIP_MLNAME_CAST(sipName_isAbsolute), meth_QDir_isAbsolute, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isAbsolute)},
    {SIP_MLNAME_CAST(sipName_isAbsolutePath), meth_QDir_isAbsolutePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isAbsolutePath)},
    {SIP_MLNAME_CAST(sipName_isEmpty), SIP_MLMETH_CAST(meth_QDir_isEmpty), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDir_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QDir_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isReadable)},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QDir_isRelative, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isRelative)},
    {SIP_MLNAME_CAST(sipName_isRelativePath), meth_QDir_isRelativePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isRelativePath)},
    {SIP_MLNAME_CAST(sipName_isRoot), meth_QDir_isRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_isRoot)},
    {SIP_MLNAME_CAST(sipName_listSeparator), meth_QDir_listSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_listSeparator)},
    {SIP_MLNAME_CAST(sipName_makeAbsolute), meth_QDir_makeAbsolute, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_makeAbsolute)},
    {SIP_MLNAME_CAST(sipName_match), meth_QDir_match, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_match)},
    {SIP_MLNAME_CAST(sipName_mkdir), meth_QDir_mkdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_mkdir)},
    {SIP_MLNAME_CAST(sipName_mkpath), meth_QDir_mkpath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_mkpath)},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QDir_nameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_nameFilters)},
    {SIP_MLNAME_CAST(sipName_nameFiltersFromString), meth_QDir_nameFiltersFromString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_nameFiltersFromString)},
    {SIP_MLNAME_CAST(sipName_path), meth_QDir_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_path)},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QDir_refresh, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_refresh)},
    {SIP_MLNAME_CAST(sipName_relativeFilePath), meth_QDir_relativeFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_relativeFilePath)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QDir_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_remove)},
    {SIP_MLNAME_CAST(sipName_removeRecursively), meth_QDir_removeRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_removeRecursively)},
    {SIP_MLNAME_CAST(sipName_rename), meth_QDir_rename, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_rename)},
    {SIP_MLNAME_CAST(sipName_rmdir), meth_QDir_rmdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_rmdir)},
    {SIP_MLNAME_CAST(sipName_rmpath), meth_QDir_rmpath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_rmpath)},
    {SIP_MLNAME_CAST(sipName_root), meth_QDir_root, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_root)},
    {SIP_MLNAME_CAST(sipName_rootPath), meth_QDir_rootPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_rootPath)},
    {SIP_MLNAME_CAST(sipName_searchPaths), meth_QDir_searchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_searchPaths)},
    {SIP_MLNAME_CAST(sipName_separator), meth_QDir_separator, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_separator)},
    {SIP_MLNAME_CAST(sipName_setCurrent), meth_QDir_setCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setCurrent)},
    {SIP_MLNAME_CAST(sipName_setFilter), meth_QDir_setFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setFilter)},
    {SIP_MLNAME_CAST(sipName_setNameFilters), meth_QDir_setNameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setNameFilters)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QDir_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setPath)},
    {SIP_MLNAME_CAST(sipName_setSearchPaths), meth_QDir_setSearchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setSearchPaths)},
    {SIP_MLNAME_CAST(sipName_setSorting), meth_QDir_setSorting, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_setSorting)},
    {SIP_MLNAME_CAST(sipName_sorting), meth_QDir_sorting, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_sorting)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDir_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_swap)},
    {SIP_MLNAME_CAST(sipName_temp), meth_QDir_temp, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_temp)},
    {SIP_MLNAME_CAST(sipName_tempPath), meth_QDir_tempPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_tempPath)},
    {SIP_MLNAME_CAST(sipName_toNativeSeparators), meth_QDir_toNativeSeparators, METH_VARARGS, SIP_MLDOC_CAST(doc_QDir_toNativeSeparators)}
};

static sipEnumMemberDef enummembers_QDir[] = {
    {sipName_AccessMask, static_cast<int>( ::QDir::AccessMask), 57},
    {sipName_AllDirs, static_cast<int>( ::QDir::AllDirs), 57},
    {sipName_AllEntries, static_cast<int>( ::QDir::AllEntries), 57},
    {sipName_CaseSensitive, static_cast<int>( ::QDir::CaseSensitive), 57},
    {sipName_Dirs, static_cast<int>( ::QDir::Dirs), 57},
    {sipName_DirsFirst, static_cast<int>( ::QDir::DirsFirst), 59},
    {sipName_DirsLast, static_cast<int>( ::QDir::DirsLast), 59},
    {sipName_Drives, static_cast<int>( ::QDir::Drives), 57},
    {sipName_Executable, static_cast<int>( ::QDir::Executable), 57},
    {sipName_Files, static_cast<int>( ::QDir::Files), 57},
    {sipName_Hidden, static_cast<int>( ::QDir::Hidden), 57},
    {sipName_IgnoreCase, static_cast<int>( ::QDir::IgnoreCase), 59},
    {sipName_LocaleAware, static_cast<int>( ::QDir::LocaleAware), 59},
    {sipName_Modified, static_cast<int>( ::QDir::Modified), 57},
    {sipName_Name, static_cast<int>( ::QDir::Name), 59},
    {sipName_NoDot, static_cast<int>( ::QDir::NoDot), 57},
    {sipName_NoDotAndDotDot, static_cast<int>( ::QDir::NoDotAndDotDot), 57},
    {sipName_NoDotDot, static_cast<int>( ::QDir::NoDotDot), 57},
    {sipName_NoFilter, static_cast<int>( ::QDir::NoFilter), 57},
    {sipName_NoSort, static_cast<int>( ::QDir::NoSort), 59},
    {sipName_NoSymLinks, static_cast<int>( ::QDir::NoSymLinks), 57},
    {sipName_PermissionMask, static_cast<int>( ::QDir::PermissionMask), 57},
    {sipName_Readable, static_cast<int>( ::QDir::Readable), 57},
    {sipName_Reversed, static_cast<int>( ::QDir::Reversed), 59},
    {sipName_Size, static_cast<int>( ::QDir::Size), 59},
    {sipName_SortByMask, static_cast<int>( ::QDir::SortByMask), 59},
    {sipName_System, static_cast<int>( ::QDir::System), 57},
    {sipName_Time, static_cast<int>( ::QDir::Time), 59},
    {sipName_Type, static_cast<int>( ::QDir::Type), 59},
    {sipName_TypeMask, static_cast<int>( ::QDir::TypeMask), 57},
    {sipName_Unsorted, static_cast<int>( ::QDir::Unsorted), 59},
    {sipName_Writable, static_cast<int>( ::QDir::Writable), 57},
};

PyDoc_STRVAR(doc_QDir, "\1QDir(QDir)\n"
"QDir(path: str = '')\n"
"QDir(str, str, sort: QDir.SortFlags = QDir.Name|QDir.IgnoreCase, filters: QDir.Filters = QDir.AllEntries)");


static pyqt5ClassPluginDef plugin_QDir = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDir = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDir,
        {SIP_NULLPTR},
        &plugin_QDir
    },
    {
        sipNameNr_QDir,
        {0, 0, 1},
        57, methods_QDir,
        32, enummembers_QDir,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDir,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDir,
    init_type_QDir,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDir,
    assign_QDir,
    array_QDir,
    copy_QDir,
    release_QDir,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdeadlinetimer.sip"
#include <qdeadlinetimer.h>
#line 44322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 44326 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QDeadlineTimer_swap, "swap(self, QDeadlineTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_swap(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDeadlineTimer, &sipCpp, sipType_QDeadlineTimer, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_swap, doc_QDeadlineTimer_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_isForever, "isForever(self) -> bool");

extern "C" {static PyObject *meth_QDeadlineTimer_isForever(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_isForever(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isForever();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_isForever, doc_QDeadlineTimer_isForever);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_hasExpired, "hasExpired(self) -> bool");

extern "C" {static PyObject *meth_QDeadlineTimer_hasExpired(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_hasExpired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasExpired();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_hasExpired, doc_QDeadlineTimer_hasExpired);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_timerType, "timerType(self) -> Qt.TimerType");

extern "C" {static PyObject *meth_QDeadlineTimer_timerType(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_timerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::Qt::TimerType sipRes;

            sipRes = sipCpp->timerType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TimerType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_timerType, doc_QDeadlineTimer_timerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setTimerType, "setTimerType(self, Qt.TimerType)");

extern "C" {static PyObject *meth_QDeadlineTimer_setTimerType(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setTimerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TimerType a0;
         ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDeadlineTimer, &sipCpp, sipType_Qt_TimerType, &a0))
        {
            sipCpp->setTimerType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setTimerType, doc_QDeadlineTimer_setTimerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_remainingTime, "remainingTime(self) -> int");

extern "C" {static PyObject *meth_QDeadlineTimer_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->remainingTime();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_remainingTime, doc_QDeadlineTimer_remainingTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_remainingTimeNSecs, "remainingTimeNSecs(self) -> int");

extern "C" {static PyObject *meth_QDeadlineTimer_remainingTimeNSecs(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_remainingTimeNSecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->remainingTimeNSecs();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_remainingTimeNSecs, doc_QDeadlineTimer_remainingTimeNSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setRemainingTime, "setRemainingTime(self, int, type: Qt.TimerType = Qt.CoarseTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_setRemainingTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setRemainingTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;
         ::QDeadlineTimer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|E", &sipSelf, sipType_QDeadlineTimer, &sipCpp, &a0, sipType_Qt_TimerType, &a1))
        {
            sipCpp->setRemainingTime(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setRemainingTime, doc_QDeadlineTimer_setRemainingTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setPreciseRemainingTime, "setPreciseRemainingTime(self, int, nsecs: int = 0, type: Qt.TimerType = Qt.CoarseTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_setPreciseRemainingTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setPreciseRemainingTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::qint64 a1 = 0;
         ::Qt::TimerType a2 = Qt::CoarseTimer;
         ::QDeadlineTimer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_nsecs,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|nE", &sipSelf, sipType_QDeadlineTimer, &sipCpp, &a0, &a1, sipType_Qt_TimerType, &a2))
        {
            sipCpp->setPreciseRemainingTime(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setPreciseRemainingTime, doc_QDeadlineTimer_setPreciseRemainingTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_deadline, "deadline(self) -> int");

extern "C" {static PyObject *meth_QDeadlineTimer_deadline(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_deadline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->deadline();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_deadline, doc_QDeadlineTimer_deadline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_deadlineNSecs, "deadlineNSecs(self) -> int");

extern "C" {static PyObject *meth_QDeadlineTimer_deadlineNSecs(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_deadlineNSecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDeadlineTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeadlineTimer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->deadlineNSecs();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_deadlineNSecs, doc_QDeadlineTimer_deadlineNSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setDeadline, "setDeadline(self, int, type: Qt.TimerType = Qt.CoarseTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_setDeadline(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setDeadline(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;
         ::QDeadlineTimer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|E", &sipSelf, sipType_QDeadlineTimer, &sipCpp, &a0, sipType_Qt_TimerType, &a1))
        {
            sipCpp->setDeadline(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setDeadline, doc_QDeadlineTimer_setDeadline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_setPreciseDeadline, "setPreciseDeadline(self, int, nsecs: int = 0, type: Qt.TimerType = Qt.CoarseTimer)");

extern "C" {static PyObject *meth_QDeadlineTimer_setPreciseDeadline(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_setPreciseDeadline(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::qint64 a1 = 0;
         ::Qt::TimerType a2 = Qt::CoarseTimer;
         ::QDeadlineTimer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_nsecs,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bn|nE", &sipSelf, sipType_QDeadlineTimer, &sipCpp, &a0, &a1, sipType_Qt_TimerType, &a2))
        {
            sipCpp->setPreciseDeadline(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_setPreciseDeadline, doc_QDeadlineTimer_setPreciseDeadline);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_addNSecs, "addNSecs(QDeadlineTimer, int) -> QDeadlineTimer");

extern "C" {static PyObject *meth_QDeadlineTimer_addNSecs(PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_addNSecs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::qint64 a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9n", sipType_QDeadlineTimer, &a0, &a1))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer( ::QDeadlineTimer::addNSecs(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_addNSecs, doc_QDeadlineTimer_addNSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDeadlineTimer_current, "current(type: Qt.TimerType = Qt.CoarseTimer) -> QDeadlineTimer");

extern "C" {static PyObject *meth_QDeadlineTimer_current(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeadlineTimer_current(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TimerType a0 = Qt::CoarseTimer;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_Qt_TimerType, &a0))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer( ::QDeadlineTimer::current(a0));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeadlineTimer, sipName_current, doc_QDeadlineTimer_current);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QDeadlineTimer___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___lt__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___le__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator<=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___gt__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator>((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___ge__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDeadlineTimer, &a0))
        {
            bool sipRes;

            sipRes = operator>=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QDeadlineTimer, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDeadlineTimer___add__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::qint64 a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9n", sipType_QDeadlineTimer, &a0, &a1))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    {
         ::qint64 a0;
         ::QDeadlineTimer* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "nJ9", &a0, sipType_QDeadlineTimer, &a1))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer((a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDeadlineTimer___sub__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::qint64 a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9n", sipType_QDeadlineTimer, &a0, &a1))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    {
         ::QDeadlineTimer* a0;
         ::QDeadlineTimer* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDeadlineTimer, &a0, sipType_QDeadlineTimer, &a1))
        {
             ::qint64 sipRes;

            sipRes = (*a0 - *a1);

            return PyLong_FromLongLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, sub_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDeadlineTimer___isub__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDeadlineTimer)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1n", &a0))
        {
            sipCpp-> ::QDeadlineTimer::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QDeadlineTimer___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QDeadlineTimer___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QDeadlineTimer)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QDeadlineTimer *sipCpp = reinterpret_cast< ::QDeadlineTimer *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDeadlineTimer));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1n", &a0))
        {
            sipCpp-> ::QDeadlineTimer::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeadlineTimer(void *, int);}
static void release_QDeadlineTimer(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDeadlineTimer *>(sipCppV);
}


extern "C" {static void assign_QDeadlineTimer(void *, SIP_SSIZE_T, void *);}
static void assign_QDeadlineTimer(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDeadlineTimer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDeadlineTimer *>(sipSrc);
}


extern "C" {static void *array_QDeadlineTimer(SIP_SSIZE_T);}
static void *array_QDeadlineTimer(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDeadlineTimer[sipNrElem];
}


extern "C" {static void *copy_QDeadlineTimer(const void *, SIP_SSIZE_T);}
static void *copy_QDeadlineTimer(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDeadlineTimer(reinterpret_cast<const  ::QDeadlineTimer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDeadlineTimer(sipSimpleWrapper *);}
static void dealloc_QDeadlineTimer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDeadlineTimer(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDeadlineTimer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeadlineTimer(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDeadlineTimer *sipCpp = SIP_NULLPTR;

    {
         ::Qt::TimerType a0 = Qt::CoarseTimer;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_Qt_TimerType, &a0))
        {
            sipCpp = new  ::QDeadlineTimer(a0);

            return sipCpp;
        }
    }

    {
         ::QDeadlineTimer::ForeverConstant a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|E", sipType_QDeadlineTimer_ForeverConstant, &a0, sipType_Qt_TimerType, &a1))
        {
            sipCpp = new  ::QDeadlineTimer(a0,a1);

            return sipCpp;
        }
    }

    {
         ::qint64 a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "n|E", &a0, sipType_Qt_TimerType, &a1))
        {
            sipCpp = new  ::QDeadlineTimer(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QDeadlineTimer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDeadlineTimer, &a0))
        {
            sipCpp = new  ::QDeadlineTimer(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDeadlineTimer[] = {
    {(void *)slot_QDeadlineTimer___eq__, eq_slot},
    {(void *)slot_QDeadlineTimer___ne__, ne_slot},
    {(void *)slot_QDeadlineTimer___lt__, lt_slot},
    {(void *)slot_QDeadlineTimer___le__, le_slot},
    {(void *)slot_QDeadlineTimer___gt__, gt_slot},
    {(void *)slot_QDeadlineTimer___ge__, ge_slot},
    {(void *)slot_QDeadlineTimer___add__, add_slot},
    {(void *)slot_QDeadlineTimer___sub__, sub_slot},
    {(void *)slot_QDeadlineTimer___isub__, isub_slot},
    {(void *)slot_QDeadlineTimer___iadd__, iadd_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDeadlineTimer[] = {
    {SIP_MLNAME_CAST(sipName_addNSecs), meth_QDeadlineTimer_addNSecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_addNSecs)},
    {SIP_MLNAME_CAST(sipName_current), SIP_MLMETH_CAST(meth_QDeadlineTimer_current), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDeadlineTimer_current)},
    {SIP_MLNAME_CAST(sipName_deadline), meth_QDeadlineTimer_deadline, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_deadline)},
    {SIP_MLNAME_CAST(sipName_deadlineNSecs), meth_QDeadlineTimer_deadlineNSecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_deadlineNSecs)},
    {SIP_MLNAME_CAST(sipName_hasExpired), meth_QDeadlineTimer_hasExpired, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_hasExpired)},
    {SIP_MLNAME_CAST(sipName_isForever), meth_QDeadlineTimer_isForever, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_isForever)},
    {SIP_MLNAME_CAST(sipName_remainingTime), meth_QDeadlineTimer_remainingTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_remainingTime)},
    {SIP_MLNAME_CAST(sipName_remainingTimeNSecs), meth_QDeadlineTimer_remainingTimeNSecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_remainingTimeNSecs)},
    {SIP_MLNAME_CAST(sipName_setDeadline), SIP_MLMETH_CAST(meth_QDeadlineTimer_setDeadline), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDeadlineTimer_setDeadline)},
    {SIP_MLNAME_CAST(sipName_setPreciseDeadline), SIP_MLMETH_CAST(meth_QDeadlineTimer_setPreciseDeadline), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDeadlineTimer_setPreciseDeadline)},
    {SIP_MLNAME_CAST(sipName_setPreciseRemainingTime), SIP_MLMETH_CAST(meth_QDeadlineTimer_setPreciseRemainingTime), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDeadlineTimer_setPreciseRemainingTime)},
    {SIP_MLNAME_CAST(sipName_setRemainingTime), SIP_MLMETH_CAST(meth_QDeadlineTimer_setRemainingTime), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDeadlineTimer_setRemainingTime)},
    {SIP_MLNAME_CAST(sipName_setTimerType), meth_QDeadlineTimer_setTimerType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_setTimerType)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDeadlineTimer_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_swap)},
    {SIP_MLNAME_CAST(sipName_timerType), meth_QDeadlineTimer_timerType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeadlineTimer_timerType)}
};

static sipEnumMemberDef enummembers_QDeadlineTimer[] = {
    {sipName_Forever, static_cast<int>( ::QDeadlineTimer::Forever), 55},
};

PyDoc_STRVAR(doc_QDeadlineTimer, "\1QDeadlineTimer(type: Qt.TimerType = Qt.CoarseTimer)\n"
"QDeadlineTimer(QDeadlineTimer.ForeverConstant, type: Qt.TimerType = Qt.CoarseTimer)\n"
"QDeadlineTimer(int, type: Qt.TimerType = Qt.CoarseTimer)\n"
"QDeadlineTimer(QDeadlineTimer)");


static pyqt5ClassPluginDef plugin_QDeadlineTimer = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDeadlineTimer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDeadlineTimer,
        {SIP_NULLPTR},
        &plugin_QDeadlineTimer
    },
    {
        sipNameNr_QDeadlineTimer,
        {0, 0, 1},
        15, methods_QDeadlineTimer,
        1, enummembers_QDeadlineTimer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDeadlineTimer,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDeadlineTimer,
    init_type_QDeadlineTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDeadlineTimer,
    assign_QDeadlineTimer,
    array_QDeadlineTimer,
    copy_QDeadlineTimer,
    release_QDeadlineTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 45353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 45357 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 45360 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45363 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 45366 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45369 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <QHash>
#line 45372 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QDateTime_toPyDateTime, "toPyDateTime(self) -> datetime.datetime");

extern "C" {static PyObject *meth_QDateTime_toPyDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toPyDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        // Convert to a Python datetime object.
        sipDateDef py_date;
        QDate qd = sipCpp->date();
        
        py_date.pd_year = qd.year();
        py_date.pd_month = qd.month();
        py_date.pd_day = qd.day();
        
        sipTimeDef py_time;
        QTime qt = sipCpp->time();
        
        py_time.pt_hour = qt.hour();
        py_time.pt_minute = qt.minute();
        py_time.pt_second = qt.second();
        py_time.pt_microsecond = qt.msec() * 1000;
        
        sipRes = sipFromDateTime(&py_date, &py_time);
#line 45408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toPyDateTime, doc_QDateTime_toPyDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QDateTime_isNull(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_isNull, doc_QDateTime_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QDateTime_isValid(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_isValid, doc_QDateTime_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_date, "date(self) -> QDate");

extern "C" {static PyObject *meth_QDateTime_date(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_date(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->date());

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_date, doc_QDateTime_date);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_time, "time(self) -> QTime");

extern "C" {static PyObject *meth_QDateTime_time(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_time(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->time());

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_time, doc_QDateTime_time);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_timeSpec, "timeSpec(self) -> Qt.TimeSpec");

extern "C" {static PyObject *meth_QDateTime_timeSpec(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_timeSpec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::Qt::TimeSpec sipRes;

            sipRes = sipCpp->timeSpec();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_TimeSpec);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_timeSpec, doc_QDateTime_timeSpec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toTime_t, "toTime_t(self) -> int");

extern "C" {static PyObject *meth_QDateTime_toTime_t(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toTime_t(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->toTime_t();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toTime_t, doc_QDateTime_toTime_t);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_setDate, "setDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTime_setDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_setDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            sipCpp->setDate(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_setDate, doc_QDateTime_setDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_setTime, "setTime(self, Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTime_setTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_setTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            sipCpp->setTime(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_setTime, doc_QDateTime_setTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_setTimeSpec, "setTimeSpec(self, Qt.TimeSpec)");

extern "C" {static PyObject *meth_QDateTime_setTimeSpec(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_setTimeSpec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TimeSpec a0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTime, &sipCpp, sipType_Qt_TimeSpec, &a0))
        {
            sipCpp->setTimeSpec(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_setTimeSpec, doc_QDateTime_setTimeSpec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_setTime_t, "setTime_t(self, int)");

extern "C" {static PyObject *meth_QDateTime_setTime_t(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_setTime_t(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
            sipCpp->setTime_t(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_setTime_t, doc_QDateTime_setTime_t);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toString, "toString(self, format: Qt.DateFormat = Qt.TextDate) -> str\n"
"toString(self, str) -> str");

extern "C" {static PyObject *meth_QDateTime_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DateFormat a0 = Qt::TextDate;
        const  ::QDateTime *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QDateTime, &sipCpp, sipType_Qt_DateFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDateTime *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toString, doc_QDateTime_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_addDays, "addDays(self, int) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_addDays(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_addDays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->addDays(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_addDays, doc_QDateTime_addDays);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_addMonths, "addMonths(self, int) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_addMonths(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_addMonths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->addMonths(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_addMonths, doc_QDateTime_addMonths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_addYears, "addYears(self, int) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_addYears(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_addYears(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->addYears(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_addYears, doc_QDateTime_addYears);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_addSecs, "addSecs(self, int) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_addSecs(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_addSecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->addSecs(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_addSecs, doc_QDateTime_addSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_addMSecs, "addMSecs(self, int) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_addMSecs(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_addMSecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->addMSecs(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_addMSecs, doc_QDateTime_addMSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toTimeSpec, "toTimeSpec(self, Qt.TimeSpec) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_toTimeSpec(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toTimeSpec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TimeSpec a0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTime, &sipCpp, sipType_Qt_TimeSpec, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->toTimeSpec(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toTimeSpec, doc_QDateTime_toTimeSpec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toLocalTime, "toLocalTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_toLocalTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toLocalTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->toLocalTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toLocalTime, doc_QDateTime_toLocalTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toUTC, "toUTC(self) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_toUTC(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toUTC(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->toUTC());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toUTC, doc_QDateTime_toUTC);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_daysTo, "daysTo(self, Union[QDateTime, datetime.datetime]) -> int");

extern "C" {static PyObject *meth_QDateTime_daysTo(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_daysTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->daysTo(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_daysTo, doc_QDateTime_daysTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_secsTo, "secsTo(self, Union[QDateTime, datetime.datetime]) -> int");

extern "C" {static PyObject *meth_QDateTime_secsTo(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_secsTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->secsTo(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_secsTo, doc_QDateTime_secsTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_currentDateTime, "currentDateTime() -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_currentDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_currentDateTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::currentDateTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_currentDateTime, doc_QDateTime_currentDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_fromString, "fromString(str, format: Qt.DateFormat = Qt.TextDate) -> QDateTime\n"
"fromString(str, str) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_fromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDateTime_fromString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::DateFormat a1 = Qt::TextDate;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QString,&a0, &a0State, sipType_Qt_DateFormat, &a1))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromString(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromString(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_fromString, doc_QDateTime_fromString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_fromTime_t, "fromTime_t(int) -> QDateTime\n"
"fromTime_t(int, Qt.TimeSpec, offsetSeconds: int = 0) -> QDateTime\n"
"fromTime_t(int, QTimeZone) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_fromTime_t(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDateTime_fromTime_t(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "u", &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromTime_t(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    {
         ::uint a0;
         ::Qt::TimeSpec a1;
        int a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_offsetSeconds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "uE|i", &a0, sipType_Qt_TimeSpec, &a1, &a2))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromTime_t(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    {
         ::uint a0;
        const  ::QTimeZone* a1;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "uJ9", &a0, sipType_QTimeZone, &a1))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromTime_t(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_fromTime_t, doc_QDateTime_fromTime_t);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toMSecsSinceEpoch, "toMSecsSinceEpoch(self) -> int");

extern "C" {static PyObject *meth_QDateTime_toMSecsSinceEpoch(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toMSecsSinceEpoch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->toMSecsSinceEpoch();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toMSecsSinceEpoch, doc_QDateTime_toMSecsSinceEpoch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_setMSecsSinceEpoch, "setMSecsSinceEpoch(self, int)");

extern "C" {static PyObject *meth_QDateTime_setMSecsSinceEpoch(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_setMSecsSinceEpoch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
            sipCpp->setMSecsSinceEpoch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_setMSecsSinceEpoch, doc_QDateTime_setMSecsSinceEpoch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_msecsTo, "msecsTo(self, Union[QDateTime, datetime.datetime]) -> int");

extern "C" {static PyObject *meth_QDateTime_msecsTo(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_msecsTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->msecsTo(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_msecsTo, doc_QDateTime_msecsTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_currentDateTimeUtc, "currentDateTimeUtc() -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_currentDateTimeUtc(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_currentDateTimeUtc(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::currentDateTimeUtc());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_currentDateTimeUtc, doc_QDateTime_currentDateTimeUtc);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_fromMSecsSinceEpoch, "fromMSecsSinceEpoch(int) -> QDateTime\n"
"fromMSecsSinceEpoch(int, Qt.TimeSpec, offsetSeconds: int = 0) -> QDateTime\n"
"fromMSecsSinceEpoch(int, QTimeZone) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_fromMSecsSinceEpoch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDateTime_fromMSecsSinceEpoch(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "n", &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromMSecsSinceEpoch(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    {
         ::qint64 a0;
         ::Qt::TimeSpec a1;
        int a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_offsetSeconds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "nE|i", &a0, sipType_Qt_TimeSpec, &a1, &a2))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromMSecsSinceEpoch(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    {
         ::qint64 a0;
        const  ::QTimeZone* a1;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "nJ9", &a0, sipType_QTimeZone, &a1))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromMSecsSinceEpoch(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_fromMSecsSinceEpoch, doc_QDateTime_fromMSecsSinceEpoch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_currentMSecsSinceEpoch, "currentMSecsSinceEpoch() -> int");

extern "C" {static PyObject *meth_QDateTime_currentMSecsSinceEpoch(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_currentMSecsSinceEpoch(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::qint64 sipRes;

            sipRes =  ::QDateTime::currentMSecsSinceEpoch();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_currentMSecsSinceEpoch, doc_QDateTime_currentMSecsSinceEpoch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_swap, "swap(self, QDateTime)");

extern "C" {static PyObject *meth_QDateTime_swap(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDateTime* a0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QDateTime, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_swap, doc_QDateTime_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_offsetFromUtc, "offsetFromUtc(self) -> int");

extern "C" {static PyObject *meth_QDateTime_offsetFromUtc(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_offsetFromUtc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->offsetFromUtc();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_offsetFromUtc, doc_QDateTime_offsetFromUtc);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_timeZone, "timeZone(self) -> QTimeZone");

extern "C" {static PyObject *meth_QDateTime_timeZone(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_timeZone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::QTimeZone*sipRes;

            sipRes = new  ::QTimeZone(sipCpp->timeZone());

            return sipConvertFromNewType(sipRes,sipType_QTimeZone,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_timeZone, doc_QDateTime_timeZone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_timeZoneAbbreviation, "timeZoneAbbreviation(self) -> str");

extern "C" {static PyObject *meth_QDateTime_timeZoneAbbreviation(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_timeZoneAbbreviation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->timeZoneAbbreviation());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_timeZoneAbbreviation, doc_QDateTime_timeZoneAbbreviation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_isDaylightTime, "isDaylightTime(self) -> bool");

extern "C" {static PyObject *meth_QDateTime_isDaylightTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_isDaylightTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDaylightTime();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_isDaylightTime, doc_QDateTime_isDaylightTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_setOffsetFromUtc, "setOffsetFromUtc(self, int)");

extern "C" {static PyObject *meth_QDateTime_setOffsetFromUtc(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_setOffsetFromUtc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
            sipCpp->setOffsetFromUtc(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_setOffsetFromUtc, doc_QDateTime_setOffsetFromUtc);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_setTimeZone, "setTimeZone(self, QTimeZone)");

extern "C" {static PyObject *meth_QDateTime_setTimeZone(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_setTimeZone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone* a0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QTimeZone, &a0))
        {
            sipCpp->setTimeZone(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_setTimeZone, doc_QDateTime_setTimeZone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toOffsetFromUtc, "toOffsetFromUtc(self, int) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_toOffsetFromUtc(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toOffsetFromUtc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->toOffsetFromUtc(a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toOffsetFromUtc, doc_QDateTime_toOffsetFromUtc);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toTimeZone, "toTimeZone(self, QTimeZone) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_toTimeZone(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toTimeZone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimeZone* a0;
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDateTime, &sipCpp, sipType_QTimeZone, &a0))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->toTimeZone(*a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toTimeZone, doc_QDateTime_toTimeZone);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_toSecsSinceEpoch, "toSecsSinceEpoch(self) -> int");

extern "C" {static PyObject *meth_QDateTime_toSecsSinceEpoch(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_toSecsSinceEpoch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTime, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->toSecsSinceEpoch();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_toSecsSinceEpoch, doc_QDateTime_toSecsSinceEpoch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_setSecsSinceEpoch, "setSecsSinceEpoch(self, int)");

extern "C" {static PyObject *meth_QDateTime_setSecsSinceEpoch(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_setSecsSinceEpoch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QDateTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDateTime, &sipCpp, &a0))
        {
            sipCpp->setSecsSinceEpoch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_setSecsSinceEpoch, doc_QDateTime_setSecsSinceEpoch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_fromSecsSinceEpoch, "fromSecsSinceEpoch(int, spec: Qt.TimeSpec = Qt.LocalTime, offsetSeconds: int = 0) -> QDateTime\n"
"fromSecsSinceEpoch(int, QTimeZone) -> QDateTime");

extern "C" {static PyObject *meth_QDateTime_fromSecsSinceEpoch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDateTime_fromSecsSinceEpoch(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::Qt::TimeSpec a1 = Qt::LocalTime;
        int a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_spec,
            sipName_offsetSeconds,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "n|Ei", &a0, sipType_Qt_TimeSpec, &a1, &a2))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromSecsSinceEpoch(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    {
         ::qint64 a0;
        const  ::QTimeZone* a1;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "nJ9", &a0, sipType_QTimeZone, &a1))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime( ::QDateTime::fromSecsSinceEpoch(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_fromSecsSinceEpoch, doc_QDateTime_fromSecsSinceEpoch);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDateTime_currentSecsSinceEpoch, "currentSecsSinceEpoch() -> int");

extern "C" {static PyObject *meth_QDateTime_currentSecsSinceEpoch(PyObject *, PyObject *);}
static PyObject *meth_QDateTime_currentSecsSinceEpoch(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::qint64 sipRes;

            sipRes =  ::QDateTime::currentSecsSinceEpoch();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTime, sipName_currentSecsSinceEpoch, doc_QDateTime_currentSecsSinceEpoch);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QDateTime___ge__(PyObject *,PyObject *);}
static PyObject *slot_QDateTime___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDateTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDateTime::operator>=(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QDateTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDateTime___gt__(PyObject *,PyObject *);}
static PyObject *slot_QDateTime___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDateTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDateTime::operator>(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QDateTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDateTime___le__(PyObject *,PyObject *);}
static PyObject *slot_QDateTime___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDateTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDateTime::operator<=(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QDateTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDateTime___lt__(PyObject *,PyObject *);}
static PyObject *slot_QDateTime___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDateTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDateTime::operator<(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QDateTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDateTime___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDateTime___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDateTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDateTime::operator!=(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDateTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDateTime___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDateTime___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDateTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDateTime::operator==(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDateTime, sipSelf, sipArg);
}


extern "C" {static int slot_QDateTime___bool__(PyObject *);}
static int slot_QDateTime___bool__(PyObject *sipSelf)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 461 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        sipRes = !sipCpp->isNull();
#line 47010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QDateTime___hash__(PyObject *);}
static long slot_QDateTime___hash__(PyObject *sipSelf)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        sipRes = qHash(sipCpp->toString(Qt::ISODate));
#line 47035 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDateTime___repr__(PyObject *);}
static PyObject *slot_QDateTime___repr__(PyObject *sipSelf)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDateTime));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QDateTime()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QDateTime()");
        #endif
        }
        else
        {
            QDate qd = sipCpp->date();
            QTime qt = sipCpp->time();
        
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QDateTime(%i, %i, %i, %i, %i",
                    qd.year(), qd.month(), qd.day(), qt.hour(), qt.minute());
        
            if (qt.second() || qt.msec() || sipCpp->timeSpec() != Qt::LocalTime)
            {
                qpycore_Unicode_ConcatAndDel(&sipRes,
                        PyUnicode_FromFormat(", %i", qt.second()));
        
                if (qt.msec() || sipCpp->timeSpec() != Qt::LocalTime)
                {
                    qpycore_Unicode_ConcatAndDel(&sipRes,
                            PyUnicode_FromFormat(", %i", qt.msec()));
        
                    if (sipCpp->timeSpec() != Qt::LocalTime)
                        qpycore_Unicode_ConcatAndDel(&sipRes,
                                PyUnicode_FromFormat(", PyQt5.QtCore.Qt.TimeSpec(%i)",
                                        (int)sipCpp->timeSpec()));
                }
            }
        
            qpycore_Unicode_ConcatAndDel(&sipRes, PyUnicode_FromString(")"));
        #else
            sipRes = PyString_FromFormat("PyQt5.QtCore.QDateTime(%i, %i, %i, %i, %i",
                    qd.year(), qd.month(), qd.day(), qt.hour(), qt.minute());
        
            if (qt.second() || qt.msec() || sipCpp->timeSpec() != Qt::LocalTime)
            {
                PyString_ConcatAndDel(&sipRes,
                        PyString_FromFormat(", %i", qt.second()));
        
                if (qt.msec() || sipCpp->timeSpec() != Qt::LocalTime)
                {
                    PyString_ConcatAndDel(&sipRes,
                            PyString_FromFormat(", %i", qt.msec()));
        
                    if (sipCpp->timeSpec() != Qt::LocalTime)
                        PyString_ConcatAndDel(&sipRes,
                                PyString_FromFormat(", PyQt5.QtCore.Qt.TimeSpec(%i)",
                                        (int)sipCpp->timeSpec()));
                }
            }
        
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
#line 47118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDateTime(void *, int);}
static void release_QDateTime(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDateTime *>(sipCppV);
}


extern "C" {static PyObject *pickle_QDateTime(void *);}
static PyObject *pickle_QDateTime(void *sipCppV)
{
     ::QDateTime *sipCpp = reinterpret_cast< ::QDateTime *>(sipCppV);
    PyObject *sipRes;

#line 346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
    QDate qd = sipCpp->date();
    QTime qt = sipCpp->time();
    
    sipRes = Py_BuildValue((char *)"iiiiiiii", qd.year(), qd.month(), qd.day(),
            qt.hour(), qt.minute(), qt.second(), qt.msec(),
            (int)sipCpp->timeSpec());
#line 47149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QDateTime(void *, SIP_SSIZE_T, void *);}
static void assign_QDateTime(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDateTime *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDateTime *>(sipSrc);
}


extern "C" {static void *array_QDateTime(SIP_SSIZE_T);}
static void *array_QDateTime(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDateTime[sipNrElem];
}


extern "C" {static void *copy_QDateTime(const void *, SIP_SSIZE_T);}
static void *copy_QDateTime(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDateTime(reinterpret_cast<const  ::QDateTime *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDateTime(sipSimpleWrapper *);}
static void dealloc_QDateTime(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDateTime(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDateTime(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDateTime(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDateTime *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDateTime();

            return sipCpp;
        }
    }

    {
        const  ::QDateTime* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QDateTime, &a0, &a0State))
        {
            sipCpp = new  ::QDateTime(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QDate, &a0, &a0State))
        {
            sipCpp = new  ::QDateTime(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QTime* a1;
        int a1State = 0;
         ::Qt::TimeSpec a2 = Qt::LocalTime;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_timeSpec,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|E", sipType_QDate, &a0, &a0State, sipType_QTime, &a1, &a1State, sipType_Qt_TimeSpec, &a2))
        {
            sipCpp = new  ::QDateTime(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast< ::QTime *>(a1),sipType_QTime,a1State);

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5 = 0;
        int a6 = 0;
        int a7 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_second,
            sipName_msec,
            sipName_timeSpec,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iiiii|iii", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
        {
#line 361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        // This ctor is mainly supplied to allow pickling.
        QDate qd(a0, a1, a2);
        QTime qt(a3, a4, a5, a6);
        
        sipCpp = new QDateTime(qd, qt, (Qt::TimeSpec)a7);
#line 47278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipCpp;
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QTime* a1;
        int a1State = 0;
         ::Qt::TimeSpec a2;
        int a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1Ei", sipType_QDate, &a0, &a0State, sipType_QTime, &a1, &a1State, sipType_Qt_TimeSpec, &a2, &a3))
        {
            sipCpp = new  ::QDateTime(*a0,*a1,a2,a3);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast< ::QTime *>(a1),sipType_QTime,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QTime* a1;
        int a1State = 0;
        const  ::QTimeZone* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1J1J9", sipType_QDate, &a0, &a0State, sipType_QTime, &a1, &a1State, sipType_QTimeZone, &a2))
        {
            sipCpp = new  ::QDateTime(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast< ::QTime *>(a1),sipType_QTime,a1State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QDateTime(PyObject *, void **, int *, PyObject *);}
static int convertTo_QDateTime(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QDateTime **sipCppPtr = reinterpret_cast< ::QDateTime **>(sipCppPtrV);

#line 313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
// Allow a Python datetime object whenever a QDateTime is expected.

if (sipIsErr == NULL)
    return (sipGetDateTime(sipPy, 0, 0) ||
            sipCanConvertToType(sipPy, sipType_QDateTime, SIP_NO_CONVERTORS));

sipDateDef py_date;
sipTimeDef py_time;

if (sipGetDateTime(sipPy, &py_date, &py_time))
{
    QDate qdate(py_date.pd_year,
                py_date.pd_month,
                py_date.pd_day);

    QTime qtime(py_time.pt_hour,
                py_time.pt_minute,
                py_time.pt_second,
                py_time.pt_microsecond / 1000);

    QDateTime *qdt = new QDateTime(qdate, qtime);

    *sipCppPtr = qdt;

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QDateTime *>(sipConvertToType(sipPy, sipType_QDateTime, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 47359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDateTime[] = {
    {(void *)slot_QDateTime___ge__, ge_slot},
    {(void *)slot_QDateTime___gt__, gt_slot},
    {(void *)slot_QDateTime___le__, le_slot},
    {(void *)slot_QDateTime___lt__, lt_slot},
    {(void *)slot_QDateTime___ne__, ne_slot},
    {(void *)slot_QDateTime___eq__, eq_slot},
    {(void *)slot_QDateTime___bool__, bool_slot},
    {(void *)slot_QDateTime___hash__, hash_slot},
    {(void *)slot_QDateTime___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDateTime[] = {
    {SIP_MLNAME_CAST(sipName_addDays), meth_QDateTime_addDays, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_addDays)},
    {SIP_MLNAME_CAST(sipName_addMSecs), meth_QDateTime_addMSecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_addMSecs)},
    {SIP_MLNAME_CAST(sipName_addMonths), meth_QDateTime_addMonths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_addMonths)},
    {SIP_MLNAME_CAST(sipName_addSecs), meth_QDateTime_addSecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_addSecs)},
    {SIP_MLNAME_CAST(sipName_addYears), meth_QDateTime_addYears, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_addYears)},
    {SIP_MLNAME_CAST(sipName_currentDateTime), meth_QDateTime_currentDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_currentDateTime)},
    {SIP_MLNAME_CAST(sipName_currentDateTimeUtc), meth_QDateTime_currentDateTimeUtc, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_currentDateTimeUtc)},
    {SIP_MLNAME_CAST(sipName_currentMSecsSinceEpoch), meth_QDateTime_currentMSecsSinceEpoch, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_currentMSecsSinceEpoch)},
    {SIP_MLNAME_CAST(sipName_currentSecsSinceEpoch), meth_QDateTime_currentSecsSinceEpoch, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_currentSecsSinceEpoch)},
    {SIP_MLNAME_CAST(sipName_date), meth_QDateTime_date, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_date)},
    {SIP_MLNAME_CAST(sipName_daysTo), meth_QDateTime_daysTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_daysTo)},
    {SIP_MLNAME_CAST(sipName_fromMSecsSinceEpoch), SIP_MLMETH_CAST(meth_QDateTime_fromMSecsSinceEpoch), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDateTime_fromMSecsSinceEpoch)},
    {SIP_MLNAME_CAST(sipName_fromSecsSinceEpoch), SIP_MLMETH_CAST(meth_QDateTime_fromSecsSinceEpoch), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDateTime_fromSecsSinceEpoch)},
    {SIP_MLNAME_CAST(sipName_fromString), SIP_MLMETH_CAST(meth_QDateTime_fromString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDateTime_fromString)},
    {SIP_MLNAME_CAST(sipName_fromTime_t), SIP_MLMETH_CAST(meth_QDateTime_fromTime_t), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDateTime_fromTime_t)},
    {SIP_MLNAME_CAST(sipName_isDaylightTime), meth_QDateTime_isDaylightTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_isDaylightTime)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QDateTime_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QDateTime_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_isValid)},
    {SIP_MLNAME_CAST(sipName_msecsTo), meth_QDateTime_msecsTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_msecsTo)},
    {SIP_MLNAME_CAST(sipName_offsetFromUtc), meth_QDateTime_offsetFromUtc, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_offsetFromUtc)},
    {SIP_MLNAME_CAST(sipName_secsTo), meth_QDateTime_secsTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_secsTo)},
    {SIP_MLNAME_CAST(sipName_setDate), meth_QDateTime_setDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_setDate)},
    {SIP_MLNAME_CAST(sipName_setMSecsSinceEpoch), meth_QDateTime_setMSecsSinceEpoch, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_setMSecsSinceEpoch)},
    {SIP_MLNAME_CAST(sipName_setOffsetFromUtc), meth_QDateTime_setOffsetFromUtc, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_setOffsetFromUtc)},
    {SIP_MLNAME_CAST(sipName_setSecsSinceEpoch), meth_QDateTime_setSecsSinceEpoch, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_setSecsSinceEpoch)},
    {SIP_MLNAME_CAST(sipName_setTime), meth_QDateTime_setTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_setTime)},
    {SIP_MLNAME_CAST(sipName_setTimeSpec), meth_QDateTime_setTimeSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_setTimeSpec)},
    {SIP_MLNAME_CAST(sipName_setTimeZone), meth_QDateTime_setTimeZone, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_setTimeZone)},
    {SIP_MLNAME_CAST(sipName_setTime_t), meth_QDateTime_setTime_t, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_setTime_t)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDateTime_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_swap)},
    {SIP_MLNAME_CAST(sipName_time), meth_QDateTime_time, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_time)},
    {SIP_MLNAME_CAST(sipName_timeSpec), meth_QDateTime_timeSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_timeSpec)},
    {SIP_MLNAME_CAST(sipName_timeZone), meth_QDateTime_timeZone, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_timeZone)},
    {SIP_MLNAME_CAST(sipName_timeZoneAbbreviation), meth_QDateTime_timeZoneAbbreviation, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_timeZoneAbbreviation)},
    {SIP_MLNAME_CAST(sipName_toLocalTime), meth_QDateTime_toLocalTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toLocalTime)},
    {SIP_MLNAME_CAST(sipName_toMSecsSinceEpoch), meth_QDateTime_toMSecsSinceEpoch, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toMSecsSinceEpoch)},
    {SIP_MLNAME_CAST(sipName_toOffsetFromUtc), meth_QDateTime_toOffsetFromUtc, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toOffsetFromUtc)},
    {SIP_MLNAME_CAST(sipName_toPyDateTime), meth_QDateTime_toPyDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toPyDateTime)},
    {SIP_MLNAME_CAST(sipName_toSecsSinceEpoch), meth_QDateTime_toSecsSinceEpoch, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toSecsSinceEpoch)},
    {SIP_MLNAME_CAST(sipName_toString), SIP_MLMETH_CAST(meth_QDateTime_toString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDateTime_toString)},
    {SIP_MLNAME_CAST(sipName_toTimeSpec), meth_QDateTime_toTimeSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toTimeSpec)},
    {SIP_MLNAME_CAST(sipName_toTimeZone), meth_QDateTime_toTimeZone, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toTimeZone)},
    {SIP_MLNAME_CAST(sipName_toTime_t), meth_QDateTime_toTime_t, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toTime_t)},
    {SIP_MLNAME_CAST(sipName_toUTC), meth_QDateTime_toUTC, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTime_toUTC)}
};

PyDoc_STRVAR(doc_QDateTime, "\1QDateTime()\n"
"QDateTime(Union[QDateTime, datetime.datetime])\n"
"QDateTime(Union[QDate, datetime.date])\n"
"QDateTime(Union[QDate, datetime.date], Union[QTime, datetime.time], timeSpec: Qt.TimeSpec = Qt.LocalTime)\n"
"QDateTime(int, int, int, int, int, second: int = 0, msec: int = 0, timeSpec: int = 0)\n"
"QDateTime(Union[QDate, datetime.date], Union[QTime, datetime.time], Qt.TimeSpec, int)\n"
"QDateTime(Union[QDate, datetime.date], Union[QTime, datetime.time], QTimeZone)");


static pyqt5ClassPluginDef plugin_QDateTime = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDateTime = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDateTime,
        {SIP_NULLPTR},
        &plugin_QDateTime
    },
    {
        sipNameNr_QDateTime,
        {0, 0, 1},
        44, methods_QDateTime,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDateTime,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDateTime,
    init_type_QDateTime,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDateTime,
    assign_QDateTime,
    array_QDateTime,
    copy_QDateTime,
    release_QDateTime,
    SIP_NULLPTR,
    convertTo_QDateTime,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QDateTime,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 47500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 47504 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 47507 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <QHash>
#line 47510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QTime_toPyTime, "toPyTime(self) -> datetime.time");

extern "C" {static PyObject *meth_QTime_toPyTime(PyObject *, PyObject *);}
static PyObject *meth_QTime_toPyTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 252 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        // Convert to a Python time object.
        sipTimeDef py_time;
        
        py_time.pt_hour = sipCpp->hour();
        py_time.pt_minute = sipCpp->minute();
        py_time.pt_second = sipCpp->second();
        py_time.pt_microsecond = sipCpp->msec() * 1000;
        
        sipRes = sipFromTime(&py_time);
#line 47538 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_toPyTime, doc_QTime_toPyTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QTime_isNull(PyObject *, PyObject *);}
static PyObject *meth_QTime_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_isNull, doc_QTime_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_isValid, "isValid(self) -> bool\n"
"isValid(int, int, int, msec: int = 0) -> bool");

extern "C" {static PyObject *meth_QTime_isValid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTime_isValid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_msec,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "iii|i", &a0, &a1, &a2, &a3))
        {
            bool sipRes;

            sipRes =  ::QTime::isValid(a0,a1,a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_isValid, doc_QTime_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_hour, "hour(self) -> int");

extern "C" {static PyObject *meth_QTime_hour(PyObject *, PyObject *);}
static PyObject *meth_QTime_hour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hour();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_hour, doc_QTime_hour);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_minute, "minute(self) -> int");

extern "C" {static PyObject *meth_QTime_minute(PyObject *, PyObject *);}
static PyObject *meth_QTime_minute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minute();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_minute, doc_QTime_minute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_second, "second(self) -> int");

extern "C" {static PyObject *meth_QTime_second(PyObject *, PyObject *);}
static PyObject *meth_QTime_second(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->second();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_second, doc_QTime_second);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_msec, "msec(self) -> int");

extern "C" {static PyObject *meth_QTime_msec(PyObject *, PyObject *);}
static PyObject *meth_QTime_msec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->msec();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_msec, doc_QTime_msec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_toString, "toString(self, format: Qt.DateFormat = Qt.TextDate) -> str\n"
"toString(self, str) -> str");

extern "C" {static PyObject *meth_QTime_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTime_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DateFormat a0 = Qt::TextDate;
        const  ::QTime *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QTime, &sipCpp, sipType_Qt_DateFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QTime *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QTime, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_toString, doc_QTime_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_setHMS, "setHMS(self, int, int, int, msec: int = 0) -> bool");

extern "C" {static PyObject *meth_QTime_setHMS(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTime_setHMS(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 0;
         ::QTime *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_msec,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii|i", &sipSelf, sipType_QTime, &sipCpp, &a0, &a1, &a2, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->setHMS(a0,a1,a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_setHMS, doc_QTime_setHMS);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_addSecs, "addSecs(self, int) -> QTime");

extern "C" {static PyObject *meth_QTime_addSecs(PyObject *, PyObject *);}
static PyObject *meth_QTime_addSecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTime, &sipCpp, &a0))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->addSecs(a0));

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_addSecs, doc_QTime_addSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_secsTo, "secsTo(self, Union[QTime, datetime.time]) -> int");

extern "C" {static PyObject *meth_QTime_secsTo(PyObject *, PyObject *);}
static PyObject *meth_QTime_secsTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTime, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->secsTo(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_secsTo, doc_QTime_secsTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_addMSecs, "addMSecs(self, int) -> QTime");

extern "C" {static PyObject *meth_QTime_addMSecs(PyObject *, PyObject *);}
static PyObject *meth_QTime_addMSecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTime, &sipCpp, &a0))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime(sipCpp->addMSecs(a0));

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_addMSecs, doc_QTime_addMSecs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_msecsTo, "msecsTo(self, Union[QTime, datetime.time]) -> int");

extern "C" {static PyObject *meth_QTime_msecsTo(PyObject *, PyObject *);}
static PyObject *meth_QTime_msecsTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTime, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->msecsTo(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_msecsTo, doc_QTime_msecsTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_currentTime, "currentTime() -> QTime");

extern "C" {static PyObject *meth_QTime_currentTime(PyObject *, PyObject *);}
static PyObject *meth_QTime_currentTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime( ::QTime::currentTime());

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_currentTime, doc_QTime_currentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_fromString, "fromString(str, format: Qt.DateFormat = Qt.TextDate) -> QTime\n"
"fromString(str, str) -> QTime");

extern "C" {static PyObject *meth_QTime_fromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTime_fromString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::DateFormat a1 = Qt::TextDate;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QString,&a0, &a0State, sipType_Qt_DateFormat, &a1))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime( ::QTime::fromString(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime( ::QTime::fromString(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_fromString, doc_QTime_fromString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_start, "start(self)");

extern "C" {static PyObject *meth_QTime_start(PyObject *, PyObject *);}
static PyObject *meth_QTime_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_start, doc_QTime_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_restart, "restart(self) -> int");

extern "C" {static PyObject *meth_QTime_restart(PyObject *, PyObject *);}
static PyObject *meth_QTime_restart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->restart();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_restart, doc_QTime_restart);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_elapsed, "elapsed(self) -> int");

extern "C" {static PyObject *meth_QTime_elapsed(PyObject *, PyObject *);}
static PyObject *meth_QTime_elapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->elapsed();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_elapsed, doc_QTime_elapsed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_fromMSecsSinceStartOfDay, "fromMSecsSinceStartOfDay(int) -> QTime");

extern "C" {static PyObject *meth_QTime_fromMSecsSinceStartOfDay(PyObject *, PyObject *);}
static PyObject *meth_QTime_fromMSecsSinceStartOfDay(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QTime*sipRes;

            sipRes = new  ::QTime( ::QTime::fromMSecsSinceStartOfDay(a0));

            return sipConvertFromNewType(sipRes,sipType_QTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_fromMSecsSinceStartOfDay, doc_QTime_fromMSecsSinceStartOfDay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QTime_msecsSinceStartOfDay, "msecsSinceStartOfDay(self) -> int");

extern "C" {static PyObject *meth_QTime_msecsSinceStartOfDay(PyObject *, PyObject *);}
static PyObject *meth_QTime_msecsSinceStartOfDay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTime, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->msecsSinceStartOfDay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTime, sipName_msecsSinceStartOfDay, doc_QTime_msecsSinceStartOfDay);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QTime___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTime___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTime::operator>=(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTime___gt__(PyObject *,PyObject *);}
static PyObject *slot_QTime___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTime::operator>(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTime___le__(PyObject *,PyObject *);}
static PyObject *slot_QTime___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTime::operator<=(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTime___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTime___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTime::operator<(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTime___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTime___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTime::operator!=(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QTime, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QTime___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTime___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTime* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QTime, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QTime::operator==(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QTime, sipSelf, sipArg);
}


extern "C" {static int slot_QTime___bool__(PyObject *);}
static int slot_QTime___bool__(PyObject *sipSelf)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 266 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        sipRes = !sipCpp->isNull();
#line 48394 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QTime___hash__(PyObject *);}
static long slot_QTime___hash__(PyObject *sipSelf)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        sipRes = qHash(sipCpp->toString(Qt::ISODate));
#line 48419 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QTime___repr__(PyObject *);}
static PyObject *slot_QTime___repr__(PyObject *sipSelf)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTime));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 201 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QTime()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QTime()");
        #endif
        }
        else
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QTime(%i, %i", sipCpp->hour(),
                    sipCpp->minute());
        
            if (sipCpp->second() || sipCpp->msec())
            {
                qpycore_Unicode_ConcatAndDel(&sipRes,
                        PyUnicode_FromFormat(", %i", sipCpp->second()));
        
                if (sipCpp->msec())
                    qpycore_Unicode_ConcatAndDel(&sipRes,
                            PyUnicode_FromFormat(", %i", sipCpp->msec()));
            }
        
            qpycore_Unicode_ConcatAndDel(&sipRes, PyUnicode_FromString(")"));
        #else
            sipRes = PyString_FromFormat("PyQt5.QtCore.QTime(%i, %i", sipCpp->hour(),
                    sipCpp->minute());
        
            if (sipCpp->second() || sipCpp->msec())
            {
                PyString_ConcatAndDel(&sipRes,
                        PyString_FromFormat(", %i", sipCpp->second()));
        
                if (sipCpp->msec())
                    PyString_ConcatAndDel(&sipRes,
                            PyString_FromFormat(", %i", sipCpp->msec()));
            }
        
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
#line 48485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTime(void *, int);}
static void release_QTime(void *sipCppV, int)
{
    delete reinterpret_cast< ::QTime *>(sipCppV);
}


extern "C" {static PyObject *pickle_QTime(void *);}
static PyObject *pickle_QTime(void *sipCppV)
{
     ::QTime *sipCpp = reinterpret_cast< ::QTime *>(sipCppV);
    PyObject *sipRes;

#line 193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->hour(), sipCpp->minute(), sipCpp->second(), sipCpp->msec());
#line 48511 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QTime(void *, SIP_SSIZE_T, void *);}
static void assign_QTime(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QTime *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QTime *>(sipSrc);
}


extern "C" {static void *array_QTime(SIP_SSIZE_T);}
static void *array_QTime(SIP_SSIZE_T sipNrElem)
{
    return new  ::QTime[sipNrElem];
}


extern "C" {static void *copy_QTime(const void *, SIP_SSIZE_T);}
static void *copy_QTime(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QTime(reinterpret_cast<const  ::QTime *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTime(sipSimpleWrapper *);}
static void dealloc_QTime(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTime(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QTime(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTime(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QTime *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QTime();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2 = 0;
        int a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_second,
            sipName_msec,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|ii", &a0, &a1, &a2, &a3))
        {
            sipCpp = new  ::QTime(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const  ::QTime* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QTime, &a0, &a0State))
        {
            sipCpp = new  ::QTime(*a0);
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QTime(PyObject *, void **, int *, PyObject *);}
static int convertTo_QTime(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QTime **sipCppPtr = reinterpret_cast< ::QTime **>(sipCppPtrV);

#line 169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
// Allow a Python time object whenever a QTime is expected.

if (sipIsErr == NULL)
    return (sipGetTime(sipPy, 0) ||
            sipCanConvertToType(sipPy, sipType_QTime, SIP_NO_CONVERTORS));

sipTimeDef py_time;

if (sipGetTime(sipPy, &py_time))
{
    *sipCppPtr = new QTime(py_time.pt_hour,
                           py_time.pt_minute,
                           py_time.pt_second,
                           py_time.pt_microsecond / 1000);

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QTime *>(sipConvertToType(sipPy, sipType_QTime, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 48627 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTime[] = {
    {(void *)slot_QTime___ge__, ge_slot},
    {(void *)slot_QTime___gt__, gt_slot},
    {(void *)slot_QTime___le__, le_slot},
    {(void *)slot_QTime___lt__, lt_slot},
    {(void *)slot_QTime___ne__, ne_slot},
    {(void *)slot_QTime___eq__, eq_slot},
    {(void *)slot_QTime___bool__, bool_slot},
    {(void *)slot_QTime___hash__, hash_slot},
    {(void *)slot_QTime___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTime[] = {
    {SIP_MLNAME_CAST(sipName_addMSecs), meth_QTime_addMSecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_addMSecs)},
    {SIP_MLNAME_CAST(sipName_addSecs), meth_QTime_addSecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_addSecs)},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_QTime_currentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_currentTime)},
    {SIP_MLNAME_CAST(sipName_elapsed), meth_QTime_elapsed, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_elapsed)},
    {SIP_MLNAME_CAST(sipName_fromMSecsSinceStartOfDay), meth_QTime_fromMSecsSinceStartOfDay, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_fromMSecsSinceStartOfDay)},
    {SIP_MLNAME_CAST(sipName_fromString), SIP_MLMETH_CAST(meth_QTime_fromString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTime_fromString)},
    {SIP_MLNAME_CAST(sipName_hour), meth_QTime_hour, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_hour)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QTime_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), SIP_MLMETH_CAST(meth_QTime_isValid), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTime_isValid)},
    {SIP_MLNAME_CAST(sipName_minute), meth_QTime_minute, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_minute)},
    {SIP_MLNAME_CAST(sipName_msec), meth_QTime_msec, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_msec)},
    {SIP_MLNAME_CAST(sipName_msecsSinceStartOfDay), meth_QTime_msecsSinceStartOfDay, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_msecsSinceStartOfDay)},
    {SIP_MLNAME_CAST(sipName_msecsTo), meth_QTime_msecsTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_msecsTo)},
    {SIP_MLNAME_CAST(sipName_restart), meth_QTime_restart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_restart)},
    {SIP_MLNAME_CAST(sipName_second), meth_QTime_second, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_second)},
    {SIP_MLNAME_CAST(sipName_secsTo), meth_QTime_secsTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_secsTo)},
    {SIP_MLNAME_CAST(sipName_setHMS), SIP_MLMETH_CAST(meth_QTime_setHMS), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTime_setHMS)},
    {SIP_MLNAME_CAST(sipName_start), meth_QTime_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_start)},
    {SIP_MLNAME_CAST(sipName_toPyTime), meth_QTime_toPyTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTime_toPyTime)},
    {SIP_MLNAME_CAST(sipName_toString), SIP_MLMETH_CAST(meth_QTime_toString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTime_toString)}
};

PyDoc_STRVAR(doc_QTime, "\1QTime()\n"
"QTime(int, int, second: int = 0, msec: int = 0)\n"
"QTime(QTime)");


static pyqt5ClassPluginDef plugin_QTime = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTime = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTime,
        {SIP_NULLPTR},
        &plugin_QTime
    },
    {
        sipNameNr_QTime,
        {0, 0, 1},
        20, methods_QTime,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTime,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QTime,
    init_type_QTime,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTime,
    assign_QTime,
    array_QTime,
    copy_QTime,
    release_QTime,
    SIP_NULLPTR,
    convertTo_QTime,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QTime,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 48736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48740 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48743 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <QHash>
#line 48746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QDate_toPyDate, "toPyDate(self) -> datetime.date");

extern "C" {static PyObject *meth_QDate_toPyDate(PyObject *, PyObject *);}
static PyObject *meth_QDate_toPyDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 93 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        // Convert to a Python date object.
        sipDateDef py_date;
        
        py_date.pd_year = sipCpp->year();
        py_date.pd_month = sipCpp->month();
        py_date.pd_day = sipCpp->day();
        
        sipRes = sipFromDate(&py_date);
#line 48773 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_toPyDate, doc_QDate_toPyDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QDate_isNull(PyObject *, PyObject *);}
static PyObject *meth_QDate_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_isNull, doc_QDate_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_isValid, "isValid(self) -> bool\n"
"isValid(int, int, int) -> bool");

extern "C" {static PyObject *meth_QDate_isValid(PyObject *, PyObject *);}
static PyObject *meth_QDate_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "iii", &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes =  ::QDate::isValid(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_isValid, doc_QDate_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_year, "year(self) -> int");

extern "C" {static PyObject *meth_QDate_year(PyObject *, PyObject *);}
static PyObject *meth_QDate_year(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->year();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_year, doc_QDate_year);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_month, "month(self) -> int");

extern "C" {static PyObject *meth_QDate_month(PyObject *, PyObject *);}
static PyObject *meth_QDate_month(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->month();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_month, doc_QDate_month);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_day, "day(self) -> int");

extern "C" {static PyObject *meth_QDate_day(PyObject *, PyObject *);}
static PyObject *meth_QDate_day(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->day();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_day, doc_QDate_day);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_dayOfWeek, "dayOfWeek(self) -> int");

extern "C" {static PyObject *meth_QDate_dayOfWeek(PyObject *, PyObject *);}
static PyObject *meth_QDate_dayOfWeek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dayOfWeek();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_dayOfWeek, doc_QDate_dayOfWeek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_dayOfYear, "dayOfYear(self) -> int");

extern "C" {static PyObject *meth_QDate_dayOfYear(PyObject *, PyObject *);}
static PyObject *meth_QDate_dayOfYear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dayOfYear();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_dayOfYear, doc_QDate_dayOfYear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_daysInMonth, "daysInMonth(self) -> int");

extern "C" {static PyObject *meth_QDate_daysInMonth(PyObject *, PyObject *);}
static PyObject *meth_QDate_daysInMonth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->daysInMonth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_daysInMonth, doc_QDate_daysInMonth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_daysInYear, "daysInYear(self) -> int");

extern "C" {static PyObject *meth_QDate_daysInYear(PyObject *, PyObject *);}
static PyObject *meth_QDate_daysInYear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->daysInYear();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_daysInYear, doc_QDate_daysInYear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_weekNumber, "weekNumber(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_QDate_weekNumber(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_weekNumber(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->weekNumber(&a0);

            return sipBuildResult(0,"(ii)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_weekNumber, doc_QDate_weekNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_shortMonthName, "shortMonthName(int, type: QDate.MonthNameType = QDate.DateFormat) -> str");

extern "C" {static PyObject *meth_QDate_shortMonthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_shortMonthName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDate::MonthNameType a1 = QDate::DateFormat;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "i|E", &a0, sipType_QDate_MonthNameType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDate::shortMonthName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_shortMonthName, doc_QDate_shortMonthName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_shortDayName, "shortDayName(int, type: QDate.MonthNameType = QDate.DateFormat) -> str");

extern "C" {static PyObject *meth_QDate_shortDayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_shortDayName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDate::MonthNameType a1 = QDate::DateFormat;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "i|E", &a0, sipType_QDate_MonthNameType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDate::shortDayName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_shortDayName, doc_QDate_shortDayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_longMonthName, "longMonthName(int, type: QDate.MonthNameType = QDate.DateFormat) -> str");

extern "C" {static PyObject *meth_QDate_longMonthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_longMonthName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDate::MonthNameType a1 = QDate::DateFormat;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "i|E", &a0, sipType_QDate_MonthNameType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDate::longMonthName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_longMonthName, doc_QDate_longMonthName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_longDayName, "longDayName(int, type: QDate.MonthNameType = QDate.DateFormat) -> str");

extern "C" {static PyObject *meth_QDate_longDayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_longDayName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDate::MonthNameType a1 = QDate::DateFormat;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "i|E", &a0, sipType_QDate_MonthNameType, &a1))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QDate::longDayName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_longDayName, doc_QDate_longDayName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_toString, "toString(self, format: Qt.DateFormat = Qt.TextDate) -> str\n"
"toString(self, str) -> str");

extern "C" {static PyObject *meth_QDate_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DateFormat a0 = Qt::TextDate;
        const  ::QDate *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QDate, &sipCpp, sipType_Qt_DateFormat, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QDate, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_toString, doc_QDate_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_addDays, "addDays(self, int) -> QDate");

extern "C" {static PyObject *meth_QDate_addDays(PyObject *, PyObject *);}
static PyObject *meth_QDate_addDays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDate, &sipCpp, &a0))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->addDays(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_addDays, doc_QDate_addDays);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_addMonths, "addMonths(self, int) -> QDate");

extern "C" {static PyObject *meth_QDate_addMonths(PyObject *, PyObject *);}
static PyObject *meth_QDate_addMonths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDate, &sipCpp, &a0))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->addMonths(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_addMonths, doc_QDate_addMonths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_addYears, "addYears(self, int) -> QDate");

extern "C" {static PyObject *meth_QDate_addYears(PyObject *, PyObject *);}
static PyObject *meth_QDate_addYears(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDate, &sipCpp, &a0))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate(sipCpp->addYears(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_addYears, doc_QDate_addYears);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_daysTo, "daysTo(self, Union[QDate, datetime.date]) -> int");

extern "C" {static PyObject *meth_QDate_daysTo(PyObject *, PyObject *);}
static PyObject *meth_QDate_daysTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDate, &sipCpp, sipType_QDate, &a0, &a0State))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->daysTo(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_daysTo, doc_QDate_daysTo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_currentDate, "currentDate() -> QDate");

extern "C" {static PyObject *meth_QDate_currentDate(PyObject *, PyObject *);}
static PyObject *meth_QDate_currentDate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate( ::QDate::currentDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_currentDate, doc_QDate_currentDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_fromString, "fromString(str, format: Qt.DateFormat = Qt.TextDate) -> QDate\n"
"fromString(str, str) -> QDate");

extern "C" {static PyObject *meth_QDate_fromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_fromString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::DateFormat a1 = Qt::TextDate;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|E", sipType_QString,&a0, &a0State, sipType_Qt_DateFormat, &a1))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate( ::QDate::fromString(*a0,a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate( ::QDate::fromString(*a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_fromString, doc_QDate_fromString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_isLeapYear, "isLeapYear(int) -> bool");

extern "C" {static PyObject *meth_QDate_isLeapYear(PyObject *, PyObject *);}
static PyObject *meth_QDate_isLeapYear(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            bool sipRes;

            sipRes =  ::QDate::isLeapYear(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_isLeapYear, doc_QDate_isLeapYear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_fromJulianDay, "fromJulianDay(int) -> QDate");

extern "C" {static PyObject *meth_QDate_fromJulianDay(PyObject *, PyObject *);}
static PyObject *meth_QDate_fromJulianDay(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "n", &a0))
        {
             ::QDate*sipRes;

            sipRes = new  ::QDate( ::QDate::fromJulianDay(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_fromJulianDay, doc_QDate_fromJulianDay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_toJulianDay, "toJulianDay(self) -> int");

extern "C" {static PyObject *meth_QDate_toJulianDay(PyObject *, PyObject *);}
static PyObject *meth_QDate_toJulianDay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->toJulianDay();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_toJulianDay, doc_QDate_toJulianDay);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_setDate, "setDate(self, int, int, int) -> bool");

extern "C" {static PyObject *meth_QDate_setDate(PyObject *, PyObject *);}
static PyObject *meth_QDate_setDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
         ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QDate, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->setDate(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_setDate, doc_QDate_setDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDate_getDate, "getDate(self) -> Tuple[int, int, int]");

extern "C" {static PyObject *meth_QDate_getDate(PyObject *, PyObject *);}
static PyObject *meth_QDate_getDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        int a2;
        const  ::QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            sipCpp->getDate(&a0,&a1,&a2);

            return sipBuildResult(0,"(iii)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_getDate, doc_QDate_getDate);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QDate___ge__(PyObject *,PyObject *);}
static PyObject *slot_QDate___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDate::operator>=(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QDate, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDate___gt__(PyObject *,PyObject *);}
static PyObject *slot_QDate___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDate::operator>(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QDate, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDate___le__(PyObject *,PyObject *);}
static PyObject *slot_QDate___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDate::operator<=(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QDate, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDate___lt__(PyObject *,PyObject *);}
static PyObject *slot_QDate___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDate::operator<(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QDate, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDate___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDate___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDate::operator!=(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QDate, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QDate___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDate___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QDate::operator==(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QDate, sipSelf, sipArg);
}


extern "C" {static int slot_QDate___bool__(PyObject *);}
static int slot_QDate___bool__(PyObject *sipSelf)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        sipRes = !sipCpp->isNull();
#line 49834 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QDate___hash__(PyObject *);}
static long slot_QDate___hash__(PyObject *sipSelf)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 88 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        sipRes = qHash(sipCpp->toString(Qt::ISODate));
#line 49859 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDate___repr__(PyObject *);}
static PyObject *slot_QDate___repr__(PyObject *sipSelf)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QDate()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QDate()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt5.QtCore.QDate(%i, %i, %i)", sipCpp->year(),
                    sipCpp->month(), sipCpp->day());
        }
#line 49902 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDate(void *, int);}
static void release_QDate(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDate *>(sipCppV);
}


extern "C" {static PyObject *pickle_QDate(void *);}
static PyObject *pickle_QDate(void *sipCppV)
{
     ::QDate *sipCpp = reinterpret_cast< ::QDate *>(sipCppV);
    PyObject *sipRes;

#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
    sipRes = Py_BuildValue((char *)"iii", sipCpp->year(), sipCpp->month(), sipCpp->day());
#line 49928 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QDate(void *, SIP_SSIZE_T, void *);}
static void assign_QDate(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDate *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDate *>(sipSrc);
}


extern "C" {static void *array_QDate(SIP_SSIZE_T);}
static void *array_QDate(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDate[sipNrElem];
}


extern "C" {static void *copy_QDate(const void *, SIP_SSIZE_T);}
static void *copy_QDate(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDate(reinterpret_cast<const  ::QDate *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDate(sipSimpleWrapper *);}
static void dealloc_QDate(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDate(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDate(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDate(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDate *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDate();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iii", &a0, &a1, &a2))
        {
            sipCpp = new  ::QDate(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QDate, &a0, &a0State))
        {
            sipCpp = new  ::QDate(*a0);
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QDate(PyObject *, void **, int *, PyObject *);}
static int convertTo_QDate(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QDate **sipCppPtr = reinterpret_cast< ::QDate **>(sipCppPtrV);

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
// Allow a Python date object whenever a QDate is expected.

if (sipIsErr == NULL)
    return (sipGetDate(sipPy, 0) ||
            sipCanConvertToType(sipPy, sipType_QDate, SIP_NO_CONVERTORS));

sipDateDef py_date;

if (sipGetDate(sipPy, &py_date))
{
    *sipCppPtr = new QDate(py_date.pd_year,
                           py_date.pd_month,
                           py_date.pd_day);

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QDate *>(sipConvertToType(sipPy, sipType_QDate, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 50035 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDate[] = {
    {(void *)slot_QDate___ge__, ge_slot},
    {(void *)slot_QDate___gt__, gt_slot},
    {(void *)slot_QDate___le__, le_slot},
    {(void *)slot_QDate___lt__, lt_slot},
    {(void *)slot_QDate___ne__, ne_slot},
    {(void *)slot_QDate___eq__, eq_slot},
    {(void *)slot_QDate___bool__, bool_slot},
    {(void *)slot_QDate___hash__, hash_slot},
    {(void *)slot_QDate___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDate[] = {
    {SIP_MLNAME_CAST(sipName_addDays), meth_QDate_addDays, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_addDays)},
    {SIP_MLNAME_CAST(sipName_addMonths), meth_QDate_addMonths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_addMonths)},
    {SIP_MLNAME_CAST(sipName_addYears), meth_QDate_addYears, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_addYears)},
    {SIP_MLNAME_CAST(sipName_currentDate), meth_QDate_currentDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_currentDate)},
    {SIP_MLNAME_CAST(sipName_day), meth_QDate_day, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_day)},
    {SIP_MLNAME_CAST(sipName_dayOfWeek), meth_QDate_dayOfWeek, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_dayOfWeek)},
    {SIP_MLNAME_CAST(sipName_dayOfYear), meth_QDate_dayOfYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_dayOfYear)},
    {SIP_MLNAME_CAST(sipName_daysInMonth), meth_QDate_daysInMonth, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_daysInMonth)},
    {SIP_MLNAME_CAST(sipName_daysInYear), meth_QDate_daysInYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_daysInYear)},
    {SIP_MLNAME_CAST(sipName_daysTo), meth_QDate_daysTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_daysTo)},
    {SIP_MLNAME_CAST(sipName_fromJulianDay), meth_QDate_fromJulianDay, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_fromJulianDay)},
    {SIP_MLNAME_CAST(sipName_fromString), SIP_MLMETH_CAST(meth_QDate_fromString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_fromString)},
    {SIP_MLNAME_CAST(sipName_getDate), meth_QDate_getDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_getDate)},
    {SIP_MLNAME_CAST(sipName_isLeapYear), meth_QDate_isLeapYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_isLeapYear)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QDate_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QDate_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_isValid)},
    {SIP_MLNAME_CAST(sipName_longDayName), SIP_MLMETH_CAST(meth_QDate_longDayName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_longDayName)},
    {SIP_MLNAME_CAST(sipName_longMonthName), SIP_MLMETH_CAST(meth_QDate_longMonthName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_longMonthName)},
    {SIP_MLNAME_CAST(sipName_month), meth_QDate_month, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_month)},
    {SIP_MLNAME_CAST(sipName_setDate), meth_QDate_setDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_setDate)},
    {SIP_MLNAME_CAST(sipName_shortDayName), SIP_MLMETH_CAST(meth_QDate_shortDayName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_shortDayName)},
    {SIP_MLNAME_CAST(sipName_shortMonthName), SIP_MLMETH_CAST(meth_QDate_shortMonthName), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_shortMonthName)},
    {SIP_MLNAME_CAST(sipName_toJulianDay), meth_QDate_toJulianDay, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_toJulianDay)},
    {SIP_MLNAME_CAST(sipName_toPyDate), meth_QDate_toPyDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_toPyDate)},
    {SIP_MLNAME_CAST(sipName_toString), SIP_MLMETH_CAST(meth_QDate_toString), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_toString)},
    {SIP_MLNAME_CAST(sipName_weekNumber), SIP_MLMETH_CAST(meth_QDate_weekNumber), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_weekNumber)},
    {SIP_MLNAME_CAST(sipName_year), meth_QDate_year, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_year)}
};

static sipEnumMemberDef enummembers_QDate[] = {
    {sipName_DateFormat, static_cast<int>( ::QDate::DateFormat), 52},
    {sipName_StandaloneFormat, static_cast<int>( ::QDate::StandaloneFormat), 52},
};

PyDoc_STRVAR(doc_QDate, "\1QDate()\n"
"QDate(int, int, int)\n"
"QDate(QDate)");


static pyqt5ClassPluginDef plugin_QDate = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDate = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDate,
        {SIP_NULLPTR},
        &plugin_QDate
    },
    {
        sipNameNr_QDate,
        {0, 0, 1},
        27, methods_QDate,
        2, enummembers_QDate,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDate,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDate,
    init_type_QDate,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDate,
    assign_QDate,
    array_QDate,
    copy_QDate,
    release_QDate,
    SIP_NULLPTR,
    convertTo_QDate,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QDate,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 50156 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 50160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 50163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 50166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 50169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 50172 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 50175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 50178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 50181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
#include <qline.h>
#line 50184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qline.sip"
#include <qline.h>
#line 50187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 50190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 50193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 50196 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 50199 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 50202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 50205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 50208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 50211 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 50214 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 50217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 97 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 50220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 50223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qurl.sip"
#include <qurl.h>
#line 50226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/quuid.sip"
#include <quuid.h>
#line 50229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 50232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qversionnumber.sip"
#include <qversionnumber.h>
#line 50235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 50238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 50241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvariantmap.sip"
#include <qvariant.h>
#line 50244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 50247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 50250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QDataStream_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QDataStream_device(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_device, doc_QDataStream_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QDataStream_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setDevice, doc_QDataStream_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QDataStream_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_atEnd, doc_QDataStream_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_status, "status(self) -> QDataStream.Status");

extern "C" {static PyObject *meth_QDataStream_status(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QDataStream::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDataStream_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_status, doc_QDataStream_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_setStatus, "setStatus(self, QDataStream.Status)");

extern "C" {static PyObject *meth_QDataStream_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream::Status a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_Status, &a0))
        {
            sipCpp->setStatus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setStatus, doc_QDataStream_setStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_resetStatus, "resetStatus(self)");

extern "C" {static PyObject *meth_QDataStream_resetStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_resetStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            sipCpp->resetStatus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_resetStatus, doc_QDataStream_resetStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_byteOrder, "byteOrder(self) -> QDataStream.ByteOrder");

extern "C" {static PyObject *meth_QDataStream_byteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_byteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QDataStream::ByteOrder sipRes;

            sipRes = sipCpp->byteOrder();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDataStream_ByteOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_byteOrder, doc_QDataStream_byteOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_setByteOrder, "setByteOrder(self, QDataStream.ByteOrder)");

extern "C" {static PyObject *meth_QDataStream_setByteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setByteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream::ByteOrder a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_ByteOrder, &a0))
        {
            sipCpp->setByteOrder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setByteOrder, doc_QDataStream_setByteOrder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_version, "version(self) -> int");

extern "C" {static PyObject *meth_QDataStream_version(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->version();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_version, doc_QDataStream_version);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_setVersion, "setVersion(self, int)");

extern "C" {static PyObject *meth_QDataStream_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            sipCpp->setVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setVersion, doc_QDataStream_setVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_skipRawData, "skipRawData(self, int) -> int");

extern "C" {static PyObject *meth_QDataStream_skipRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_skipRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->skipRawData(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_skipRawData, doc_QDataStream_skipRawData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readInt, "readInt(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            int sipRes = 0;

#line 120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50582 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt, doc_QDataStream_readInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readInt8, "readInt8(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::qint8 sipRes = 0;

#line 127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50614 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt8, doc_QDataStream_readInt8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readUInt8, "readUInt8(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::quint8 sipRes = 0;

#line 134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50646 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt8, doc_QDataStream_readUInt8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readInt16, "readInt16(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::qint16 sipRes = 0;

#line 141 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50682 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt16, doc_QDataStream_readInt16);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readUInt16, "readUInt16(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::quint16 sipRes = 0;

#line 148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50714 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt16, doc_QDataStream_readUInt16);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readInt32, "readInt32(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::qint32 sipRes = 0;

#line 155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50750 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt32, doc_QDataStream_readInt32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readUInt32, "readUInt32(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::quint32 sipRes = 0;

#line 162 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50782 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt32, doc_QDataStream_readUInt32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readInt64, "readInt64(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::qint64 sipRes = 0;

#line 169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readInt64, doc_QDataStream_readInt64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readUInt64, "readUInt64(self) -> int");

extern "C" {static PyObject *meth_QDataStream_readUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::quint64 sipRes = 0;

#line 176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50846 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readUInt64, doc_QDataStream_readUInt64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readBool, "readBool(self) -> bool");

extern "C" {static PyObject *meth_QDataStream_readBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes = 0;

#line 183 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50878 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readBool, doc_QDataStream_readBool);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readFloat, "readFloat(self) -> float");

extern "C" {static PyObject *meth_QDataStream_readFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            float sipRes = 0;

#line 190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readFloat, doc_QDataStream_readFloat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readDouble, "readDouble(self) -> float");

extern "C" {static PyObject *meth_QDataStream_readDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            double sipRes = 0;

#line 197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 50942 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readDouble, doc_QDataStream_readDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readString, "readString(self) -> bytes");

extern "C" {static PyObject *meth_QDataStream_readString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    char *s;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> s;
    Py_END_ALLOW_THREADS

    if (s)
    {
        sipRes = SIPBytes_FromString(s);
        delete[] s;
    }
    else
    {
        sipRes = Py_None;
        Py_INCREF(Py_None);
    }
#line 50987 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readString, doc_QDataStream_readString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeInt, "writeInt(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 224 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51018 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt, doc_QDataStream_writeInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeInt8, "writeInt8(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint8 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BL", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51050 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt8, doc_QDataStream_writeInt8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt8, "writeUInt8(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint8 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BM", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51082 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt8, doc_QDataStream_writeUInt8);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeInt16, "writeInt16(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint16 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bh", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt16, doc_QDataStream_writeInt16);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt16, "writeUInt16(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 252 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt16, doc_QDataStream_writeUInt16);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeInt32, "writeInt32(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint32 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt32, doc_QDataStream_writeInt32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt32, "writeUInt32(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint32 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 266 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt32, doc_QDataStream_writeUInt32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeInt64, "writeInt64(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 273 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51242 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeInt64, doc_QDataStream_writeInt64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeUInt64, "writeUInt64(self, int)");

extern "C" {static PyObject *meth_QDataStream_writeUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint64 a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bo", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51274 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeUInt64, doc_QDataStream_writeUInt64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeBool, "writeBool(self, bool)");

extern "C" {static PyObject *meth_QDataStream_writeBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 287 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeBool, doc_QDataStream_writeBool);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeFloat, "writeFloat(self, float)");

extern "C" {static PyObject *meth_QDataStream_writeFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 294 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51338 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeFloat, doc_QDataStream_writeFloat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeDouble, "writeDouble(self, float)");

extern "C" {static PyObject *meth_QDataStream_writeDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51370 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeDouble, doc_QDataStream_writeDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeString, "writeString(self, str)");

extern "C" {static PyObject *meth_QDataStream_writeString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
#line 308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 51402 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeString, doc_QDataStream_writeString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readQString, "readQString(self) -> str");

extern "C" {static PyObject *meth_QDataStream_readQString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QString*sipRes = 0;

#line 315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    sipRes = new QString;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 51437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQString, doc_QDataStream_readQString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeQString, "writeQString(self, str)");

extern "C" {static PyObject *meth_QDataStream_writeQString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QString,&a0, &a0State))
        {
#line 324 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 51469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQString, doc_QDataStream_writeQString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readQStringList, "readQStringList(self) -> List[str]");

extern "C" {static PyObject *meth_QDataStream_readQStringList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QStringList*sipRes = 0;

#line 331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    sipRes = new QStringList;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 51505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQStringList, doc_QDataStream_readQStringList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeQStringList, "writeQStringList(self, Iterable[str])");

extern "C" {static PyObject *meth_QDataStream_writeQStringList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
#line 340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 51537 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQStringList, doc_QDataStream_writeQStringList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readQVariant, "readQVariant(self) -> Any");

extern "C" {static PyObject *meth_QDataStream_readQVariant(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QVariant*sipRes = 0;

#line 347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    sipRes = new QVariant;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 51573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariant, doc_QDataStream_readQVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariant, "writeQVariant(self, Any)");

extern "C" {static PyObject *meth_QDataStream_writeQVariant(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
#line 356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 51605 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariant, doc_QDataStream_writeQVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantList, "readQVariantList(self) -> List[Any]");

extern "C" {static PyObject *meth_QDataStream_readQVariantList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QVariantList*sipRes = 0;

#line 363 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantList;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 51641 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QList_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantList, doc_QDataStream_readQVariantList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantList, "writeQVariantList(self, Iterable[Any])");

extern "C" {static PyObject *meth_QDataStream_writeQVariantList(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantList* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QList_0100QVariant,&a0, &a0State))
        {
#line 372 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 51673 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QVariantList *>(a0),sipType_QList_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantList, doc_QDataStream_writeQVariantList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantMap, "readQVariantMap(self) -> Dict[str, Any]");

extern "C" {static PyObject *meth_QDataStream_readQVariantMap(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QVariantMap*sipRes = 0;

#line 379 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantMap;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 51709 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QVariantMap,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantMap, doc_QDataStream_readQVariantMap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantMap, "writeQVariantMap(self, Dict[str, Any])");

extern "C" {static PyObject *meth_QDataStream_writeQVariantMap(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantMap* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QVariantMap,&a0, &a0State))
        {
#line 388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 51741 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QVariantMap *>(a0),sipType_QVariantMap,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantMap, doc_QDataStream_writeQVariantMap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readQVariantHash, "readQVariantHash(self) -> Dict[str, Any]");

extern "C" {static PyObject *meth_QDataStream_readQVariantHash(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readQVariantHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QVariantHash*sipRes = 0;

#line 395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    sipRes = new QVariantHash;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> *sipRes;
    Py_END_ALLOW_THREADS
#line 51777 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QString_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readQVariantHash, doc_QDataStream_readQVariantHash);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeQVariantHash, "writeQVariantHash(self, Dict[str, Any])");

extern "C" {static PyObject *meth_QDataStream_writeQVariantHash(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeQVariantHash(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariantHash* a0;
        int a0State = 0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QHash_0100QString_0100QVariant,&a0, &a0State))
        {
#line 404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << *a0;
    Py_END_ALLOW_THREADS
#line 51809 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QVariantHash *>(a0),sipType_QHash_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeQVariantHash, doc_QDataStream_writeQVariantHash);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readBytes, "readBytes(self) -> bytes");

extern "C" {static PyObject *meth_QDataStream_readBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 410 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
        char *s;
        uint l;
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readBytes(s, l);
        Py_END_ALLOW_THREADS
        
        if ((sipRes = SIPBytes_FromStringAndSize(s, l)) == NULL)
            sipIsErr = 1;
        
        if (s)
            delete[] s;
#line 51853 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readBytes, doc_QDataStream_readBytes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_readRawData, "readRawData(self, int) -> bytes");

extern "C" {static PyObject *meth_QDataStream_readRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDataStream, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 426 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
        char *s = new char[a0];
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readRawData(s, a0);
        Py_END_ALLOW_THREADS
        
        sipRes = SIPBytes_FromStringAndSize(s, a0);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] s;
#line 51899 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_readRawData, doc_QDataStream_readRawData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeBytes, "writeBytes(self, bytes) -> QDataStream");

extern "C" {static PyObject *meth_QDataStream_writeBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QDataStream, &sipCpp, &a0, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->writeBytes(a0,(uint)a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeBytes, doc_QDataStream_writeBytes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_writeRawData, "writeRawData(self, bytes) -> int");

extern "C" {static PyObject *meth_QDataStream_writeRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QDataStream, &sipCpp, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeRawData(a0,(int)a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_writeRawData, doc_QDataStream_writeRawData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_floatingPointPrecision, "floatingPointPrecision(self) -> QDataStream.FloatingPointPrecision");

extern "C" {static PyObject *meth_QDataStream_floatingPointPrecision(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_floatingPointPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
             ::QDataStream::FloatingPointPrecision sipRes;

            sipRes = sipCpp->floatingPointPrecision();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDataStream_FloatingPointPrecision);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_floatingPointPrecision, doc_QDataStream_floatingPointPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_setFloatingPointPrecision, "setFloatingPointPrecision(self, QDataStream.FloatingPointPrecision)");

extern "C" {static PyObject *meth_QDataStream_setFloatingPointPrecision(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setFloatingPointPrecision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream::FloatingPointPrecision a0;
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDataStream, &sipCpp, sipType_QDataStream_FloatingPointPrecision, &a0))
        {
            sipCpp->setFloatingPointPrecision(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_setFloatingPointPrecision, doc_QDataStream_setFloatingPointPrecision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_startTransaction, "startTransaction(self)");

extern "C" {static PyObject *meth_QDataStream_startTransaction(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_startTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            sipCpp->startTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_startTransaction, doc_QDataStream_startTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_commitTransaction, "commitTransaction(self) -> bool");

extern "C" {static PyObject *meth_QDataStream_commitTransaction(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_commitTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->commitTransaction();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_commitTransaction, doc_QDataStream_commitTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_rollbackTransaction, "rollbackTransaction(self)");

extern "C" {static PyObject *meth_QDataStream_rollbackTransaction(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_rollbackTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            sipCpp->rollbackTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_rollbackTransaction, doc_QDataStream_rollbackTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDataStream_abortTransaction, "abortTransaction(self)");

extern "C" {static PyObject *meth_QDataStream_abortTransaction(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_abortTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDataStream, &sipCpp))
        {
            sipCpp->abortTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDataStream, sipName_abortTransaction, doc_QDataStream_abortTransaction);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QDataStream___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QDataStream___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
        const  ::QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBitArray, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QByteArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QByteArray, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QDate* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDate, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTime, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QDateTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDateTime, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QEasingCurve* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QEasingCurve, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QLine* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLine, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QLineF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLineF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QLocale* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLocale, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMargins, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMarginsF, &a1))
        {
             ::QDataStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPoint, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QPointF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPointF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRect, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRectF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRegExp* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegExp, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QRegularExpression* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegularExpression, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSize, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSizeF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QTimeZone* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTimeZone, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QUrl* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUrl, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QUuid* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUuid, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QVariant* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVariant, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QVariant::Type a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9XE", sipType_QDataStream, &a0, sipType_QVariant_Type, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
        const  ::QVersionNumber* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVersionNumber, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lshift_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QDataStream___rshift__(PyObject *,PyObject *);}
static PyObject *slot_QDataStream___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDataStream* a0;
         ::QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QBitArray, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QByteArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QByteArray, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QDate* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDate, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTime, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QDateTime* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QDateTime, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QEasingCurve* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QEasingCurve, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QLine* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLine, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QLineF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLineF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QLocale* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QLocale, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QMargins* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMargins, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QMarginsF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QMarginsF, &a1))
        {
             ::QDataStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPoint, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QPointF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QPointF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QRect* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRect, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QRectF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRectF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QRegExp* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegExp, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QRegularExpression* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QRegularExpression, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QSize* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSize, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QSizeF* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QSizeF, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QTimeZone* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QTimeZone, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QUrl* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUrl, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QUuid* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QUuid, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QVariant* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVariant, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QVariant::Type a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9XE", sipType_QDataStream, &a0, sipType_QVariant_Type, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    {
         ::QDataStream* a0;
         ::QVersionNumber* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QVersionNumber, &a1))
        {
             ::QDataStream*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, rshift_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


/* Call the instance's destructor. */
extern "C" {static void release_QDataStream(void *, int);}
static void release_QDataStream(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDataStream *>(sipCppV);
}


extern "C" {static void dealloc_QDataStream(sipSimpleWrapper *);}
static void dealloc_QDataStream(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDataStream(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDataStream(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDataStream(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDataStream *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDataStream();

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new  ::QDataStream(a0);

            return sipCpp;
        }
    }

    {
         ::QByteArray* a0;
         ::QIODevice::OpenMode* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J1", sipType_QByteArray, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp = new  ::QDataStream(a0,*a1);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QByteArray, &a0))
        {
            sipCpp = new  ::QDataStream(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDataStream[] = {
    {(void *)slot_QDataStream___lshift__, lshift_slot},
    {(void *)slot_QDataStream___rshift__, rshift_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDataStream[] = {
    {SIP_MLNAME_CAST(sipName_abortTransaction), meth_QDataStream_abortTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_abortTransaction)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QDataStream_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_atEnd)},
    {SIP_MLNAME_CAST(sipName_byteOrder), meth_QDataStream_byteOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_byteOrder)},
    {SIP_MLNAME_CAST(sipName_commitTransaction), meth_QDataStream_commitTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_commitTransaction)},
    {SIP_MLNAME_CAST(sipName_device), meth_QDataStream_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_device)},
    {SIP_MLNAME_CAST(sipName_floatingPointPrecision), meth_QDataStream_floatingPointPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_floatingPointPrecision)},
    {SIP_MLNAME_CAST(sipName_readBool), meth_QDataStream_readBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readBool)},
    {SIP_MLNAME_CAST(sipName_readBytes), meth_QDataStream_readBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readBytes)},
    {SIP_MLNAME_CAST(sipName_readDouble), meth_QDataStream_readDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readDouble)},
    {SIP_MLNAME_CAST(sipName_readFloat), meth_QDataStream_readFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readFloat)},
    {SIP_MLNAME_CAST(sipName_readInt), meth_QDataStream_readInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt)},
    {SIP_MLNAME_CAST(sipName_readInt16), meth_QDataStream_readInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt16)},
    {SIP_MLNAME_CAST(sipName_readInt32), meth_QDataStream_readInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt32)},
    {SIP_MLNAME_CAST(sipName_readInt64), meth_QDataStream_readInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt64)},
    {SIP_MLNAME_CAST(sipName_readInt8), meth_QDataStream_readInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readInt8)},
    {SIP_MLNAME_CAST(sipName_readQString), meth_QDataStream_readQString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQString)},
    {SIP_MLNAME_CAST(sipName_readQStringList), meth_QDataStream_readQStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQStringList)},
    {SIP_MLNAME_CAST(sipName_readQVariant), meth_QDataStream_readQVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariant)},
    {SIP_MLNAME_CAST(sipName_readQVariantHash), meth_QDataStream_readQVariantHash, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantHash)},
    {SIP_MLNAME_CAST(sipName_readQVariantList), meth_QDataStream_readQVariantList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantList)},
    {SIP_MLNAME_CAST(sipName_readQVariantMap), meth_QDataStream_readQVariantMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readQVariantMap)},
    {SIP_MLNAME_CAST(sipName_readRawData), meth_QDataStream_readRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readRawData)},
    {SIP_MLNAME_CAST(sipName_readString), meth_QDataStream_readString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readString)},
    {SIP_MLNAME_CAST(sipName_readUInt16), meth_QDataStream_readUInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt16)},
    {SIP_MLNAME_CAST(sipName_readUInt32), meth_QDataStream_readUInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt32)},
    {SIP_MLNAME_CAST(sipName_readUInt64), meth_QDataStream_readUInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt64)},
    {SIP_MLNAME_CAST(sipName_readUInt8), meth_QDataStream_readUInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_readUInt8)},
    {SIP_MLNAME_CAST(sipName_resetStatus), meth_QDataStream_resetStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_resetStatus)},
    {SIP_MLNAME_CAST(sipName_rollbackTransaction), meth_QDataStream_rollbackTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_rollbackTransaction)},
    {SIP_MLNAME_CAST(sipName_setByteOrder), meth_QDataStream_setByteOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setByteOrder)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QDataStream_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFloatingPointPrecision), meth_QDataStream_setFloatingPointPrecision, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setFloatingPointPrecision)},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QDataStream_setStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setStatus)},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QDataStream_setVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_setVersion)},
    {SIP_MLNAME_CAST(sipName_skipRawData), meth_QDataStream_skipRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_skipRawData)},
    {SIP_MLNAME_CAST(sipName_startTransaction), meth_QDataStream_startTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_startTransaction)},
    {SIP_MLNAME_CAST(sipName_status), meth_QDataStream_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_status)},
    {SIP_MLNAME_CAST(sipName_version), meth_QDataStream_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_version)},
    {SIP_MLNAME_CAST(sipName_writeBool), meth_QDataStream_writeBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeBool)},
    {SIP_MLNAME_CAST(sipName_writeBytes), meth_QDataStream_writeBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeBytes)},
    {SIP_MLNAME_CAST(sipName_writeDouble), meth_QDataStream_writeDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeDouble)},
    {SIP_MLNAME_CAST(sipName_writeFloat), meth_QDataStream_writeFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeFloat)},
    {SIP_MLNAME_CAST(sipName_writeInt), meth_QDataStream_writeInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt)},
    {SIP_MLNAME_CAST(sipName_writeInt16), meth_QDataStream_writeInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt16)},
    {SIP_MLNAME_CAST(sipName_writeInt32), meth_QDataStream_writeInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt32)},
    {SIP_MLNAME_CAST(sipName_writeInt64), meth_QDataStream_writeInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt64)},
    {SIP_MLNAME_CAST(sipName_writeInt8), meth_QDataStream_writeInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeInt8)},
    {SIP_MLNAME_CAST(sipName_writeQString), meth_QDataStream_writeQString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQString)},
    {SIP_MLNAME_CAST(sipName_writeQStringList), meth_QDataStream_writeQStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQStringList)},
    {SIP_MLNAME_CAST(sipName_writeQVariant), meth_QDataStream_writeQVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariant)},
    {SIP_MLNAME_CAST(sipName_writeQVariantHash), meth_QDataStream_writeQVariantHash, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantHash)},
    {SIP_MLNAME_CAST(sipName_writeQVariantList), meth_QDataStream_writeQVariantList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantList)},
    {SIP_MLNAME_CAST(sipName_writeQVariantMap), meth_QDataStream_writeQVariantMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeQVariantMap)},
    {SIP_MLNAME_CAST(sipName_writeRawData), meth_QDataStream_writeRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeRawData)},
    {SIP_MLNAME_CAST(sipName_writeString), meth_QDataStream_writeString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeString)},
    {SIP_MLNAME_CAST(sipName_writeUInt16), meth_QDataStream_writeUInt16, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt16)},
    {SIP_MLNAME_CAST(sipName_writeUInt32), meth_QDataStream_writeUInt32, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt32)},
    {SIP_MLNAME_CAST(sipName_writeUInt64), meth_QDataStream_writeUInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt64)},
    {SIP_MLNAME_CAST(sipName_writeUInt8), meth_QDataStream_writeUInt8, METH_VARARGS, SIP_MLDOC_CAST(doc_QDataStream_writeUInt8)}
};

static sipEnumMemberDef enummembers_QDataStream[] = {
    {sipName_BigEndian, static_cast<int>( ::QDataStream::BigEndian), 47},
    {sipName_DoublePrecision, static_cast<int>( ::QDataStream::DoublePrecision), 48},
    {sipName_LittleEndian, static_cast<int>( ::QDataStream::LittleEndian), 47},
    {sipName_Ok, static_cast<int>( ::QDataStream::Ok), 49},
    {sipName_Qt_1_0, static_cast<int>( ::QDataStream::Qt_1_0), 50},
    {sipName_Qt_2_0, static_cast<int>( ::QDataStream::Qt_2_0), 50},
    {sipName_Qt_2_1, static_cast<int>( ::QDataStream::Qt_2_1), 50},
    {sipName_Qt_3_0, static_cast<int>( ::QDataStream::Qt_3_0), 50},
    {sipName_Qt_3_1, static_cast<int>( ::QDataStream::Qt_3_1), 50},
    {sipName_Qt_3_3, static_cast<int>( ::QDataStream::Qt_3_3), 50},
    {sipName_Qt_4_0, static_cast<int>( ::QDataStream::Qt_4_0), 50},
    {sipName_Qt_4_1, static_cast<int>( ::QDataStream::Qt_4_1), 50},
    {sipName_Qt_4_2, static_cast<int>( ::QDataStream::Qt_4_2), 50},
    {sipName_Qt_4_3, static_cast<int>( ::QDataStream::Qt_4_3), 50},
    {sipName_Qt_4_4, static_cast<int>( ::QDataStream::Qt_4_4), 50},
    {sipName_Qt_4_5, static_cast<int>( ::QDataStream::Qt_4_5), 50},
    {sipName_Qt_4_6, static_cast<int>( ::QDataStream::Qt_4_6), 50},
    {sipName_Qt_4_7, static_cast<int>( ::QDataStream::Qt_4_7), 50},
    {sipName_Qt_4_8, static_cast<int>( ::QDataStream::Qt_4_8), 50},
    {sipName_Qt_4_9, static_cast<int>( ::QDataStream::Qt_4_9), 50},
    {sipName_Qt_5_0, static_cast<int>( ::QDataStream::Qt_5_0), 50},
    {sipName_Qt_5_1, static_cast<int>( ::QDataStream::Qt_5_1), 50},
    {sipName_Qt_5_10, static_cast<int>( ::QDataStream::Qt_5_10), 50},
    {sipName_Qt_5_11, static_cast<int>( ::QDataStream::Qt_5_11), 50},
    {sipName_Qt_5_12, static_cast<int>( ::QDataStream::Qt_5_12), 50},
    {sipName_Qt_5_2, static_cast<int>( ::QDataStream::Qt_5_2), 50},
    {sipName_Qt_5_3, static_cast<int>( ::QDataStream::Qt_5_3), 50},
    {sipName_Qt_5_4, static_cast<int>( ::QDataStream::Qt_5_4), 50},
    {sipName_Qt_5_5, static_cast<int>( ::QDataStream::Qt_5_5), 50},
    {sipName_Qt_5_6, static_cast<int>( ::QDataStream::Qt_5_6), 50},
    {sipName_Qt_5_7, static_cast<int>( ::QDataStream::Qt_5_7), 50},
    {sipName_Qt_5_8, static_cast<int>( ::QDataStream::Qt_5_8), 50},
    {sipName_Qt_5_9, static_cast<int>( ::QDataStream::Qt_5_9), 50},
    {sipName_ReadCorruptData, static_cast<int>( ::QDataStream::ReadCorruptData), 49},
    {sipName_ReadPastEnd, static_cast<int>( ::QDataStream::ReadPastEnd), 49},
    {sipName_SinglePrecision, static_cast<int>( ::QDataStream::SinglePrecision), 48},
    {sipName_WriteFailed, static_cast<int>( ::QDataStream::WriteFailed), 49},
};

PyDoc_STRVAR(doc_QDataStream, "\1QDataStream()\n"
"QDataStream(QIODevice)\n"
"QDataStream(QByteArray, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])\n"
"QDataStream(QByteArray)");


static pyqt5ClassPluginDef plugin_QDataStream = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDataStream = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDataStream,
        {SIP_NULLPTR},
        &plugin_QDataStream
    },
    {
        sipNameNr_QDataStream,
        {0, 0, 1},
        59, methods_QDataStream,
        37, enummembers_QDataStream,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDataStream,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QDataStream,
    init_type_QDataStream,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDataStream,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDataStream,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcryptographichash.sip"
#include <qcryptographichash.h>
#line 53219 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 53223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 53226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QCryptographicHash_reset, "reset(self)");

extern "C" {static PyObject *meth_QCryptographicHash_reset(PyObject *, PyObject *);}
static PyObject *meth_QCryptographicHash_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCryptographicHash *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCryptographicHash, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCryptographicHash, sipName_reset, doc_QCryptographicHash_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCryptographicHash_addData, "addData(self, bytes)\n"
"addData(self, Union[QByteArray, bytes, bytearray])\n"
"addData(self, QIODevice) -> bool");

extern "C" {static PyObject *meth_QCryptographicHash_addData(PyObject *, PyObject *);}
static PyObject *meth_QCryptographicHash_addData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QCryptographicHash *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QCryptographicHash, &sipCpp, &a0, &a1))
        {
            sipCpp->addData(a0,(int)a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QCryptographicHash *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCryptographicHash, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->addData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QIODevice* a0;
         ::QCryptographicHash *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCryptographicHash, &sipCpp, sipType_QIODevice, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addData(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCryptographicHash, sipName_addData, doc_QCryptographicHash_addData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCryptographicHash_result, "result(self) -> QByteArray");

extern "C" {static PyObject *meth_QCryptographicHash_result(PyObject *, PyObject *);}
static PyObject *meth_QCryptographicHash_result(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCryptographicHash *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCryptographicHash, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->result());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCryptographicHash, sipName_result, doc_QCryptographicHash_result);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCryptographicHash_hash, "hash(Union[QByteArray, bytes, bytearray], QCryptographicHash.Algorithm) -> QByteArray");

extern "C" {static PyObject *meth_QCryptographicHash_hash(PyObject *, PyObject *);}
static PyObject *meth_QCryptographicHash_hash(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QCryptographicHash::Algorithm a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1E", sipType_QByteArray, &a0, &a0State, sipType_QCryptographicHash_Algorithm, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QCryptographicHash::hash(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCryptographicHash, sipName_hash, doc_QCryptographicHash_hash);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCryptographicHash_hashLength, "hashLength(QCryptographicHash.Algorithm) -> int");

extern "C" {static PyObject *meth_QCryptographicHash_hashLength(PyObject *, PyObject *);}
static PyObject *meth_QCryptographicHash_hashLength(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCryptographicHash::Algorithm a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QCryptographicHash_Algorithm, &a0))
        {
            int sipRes;

            sipRes =  ::QCryptographicHash::hashLength(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCryptographicHash, sipName_hashLength, doc_QCryptographicHash_hashLength);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCryptographicHash(void *, int);}
static void release_QCryptographicHash(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCryptographicHash *>(sipCppV);
}


extern "C" {static void dealloc_QCryptographicHash(sipSimpleWrapper *);}
static void dealloc_QCryptographicHash(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCryptographicHash(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCryptographicHash(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCryptographicHash(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCryptographicHash *sipCpp = SIP_NULLPTR;

    {
         ::QCryptographicHash::Algorithm a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_QCryptographicHash_Algorithm, &a0))
        {
            sipCpp = new  ::QCryptographicHash(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QCryptographicHash[] = {
    {SIP_MLNAME_CAST(sipName_addData), meth_QCryptographicHash_addData, METH_VARARGS, SIP_MLDOC_CAST(doc_QCryptographicHash_addData)},
    {SIP_MLNAME_CAST(sipName_hash), meth_QCryptographicHash_hash, METH_VARARGS, SIP_MLDOC_CAST(doc_QCryptographicHash_hash)},
    {SIP_MLNAME_CAST(sipName_hashLength), meth_QCryptographicHash_hashLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QCryptographicHash_hashLength)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QCryptographicHash_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QCryptographicHash_reset)},
    {SIP_MLNAME_CAST(sipName_result), meth_QCryptographicHash_result, METH_VARARGS, SIP_MLDOC_CAST(doc_QCryptographicHash_result)}
};

static sipEnumMemberDef enummembers_QCryptographicHash[] = {
    {sipName_Keccak_224, static_cast<int>( ::QCryptographicHash::Keccak_224), 45},
    {sipName_Keccak_256, static_cast<int>( ::QCryptographicHash::Keccak_256), 45},
    {sipName_Keccak_384, static_cast<int>( ::QCryptographicHash::Keccak_384), 45},
    {sipName_Keccak_512, static_cast<int>( ::QCryptographicHash::Keccak_512), 45},
    {sipName_Md4, static_cast<int>( ::QCryptographicHash::Md4), 45},
    {sipName_Md5, static_cast<int>( ::QCryptographicHash::Md5), 45},
    {sipName_Sha1, static_cast<int>( ::QCryptographicHash::Sha1), 45},
    {sipName_Sha224, static_cast<int>( ::QCryptographicHash::Sha224), 45},
    {sipName_Sha256, static_cast<int>( ::QCryptographicHash::Sha256), 45},
    {sipName_Sha384, static_cast<int>( ::QCryptographicHash::Sha384), 45},
    {sipName_Sha3_224, static_cast<int>( ::QCryptographicHash::Sha3_224), 45},
    {sipName_Sha3_256, static_cast<int>( ::QCryptographicHash::Sha3_256), 45},
    {sipName_Sha3_384, static_cast<int>( ::QCryptographicHash::Sha3_384), 45},
    {sipName_Sha3_512, static_cast<int>( ::QCryptographicHash::Sha3_512), 45},
    {sipName_Sha512, static_cast<int>( ::QCryptographicHash::Sha512), 45},
};

PyDoc_STRVAR(doc_QCryptographicHash, "\1QCryptographicHash(QCryptographicHash.Algorithm)");


static pyqt5ClassPluginDef plugin_QCryptographicHash = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCryptographicHash = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCryptographicHash,
        {SIP_NULLPTR},
        &plugin_QCryptographicHash
    },
    {
        sipNameNr_QCryptographicHash,
        {0, 0, 1},
        5, methods_QCryptographicHash,
        15, enummembers_QCryptographicHash,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCryptographicHash,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QCryptographicHash,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCryptographicHash,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QCryptographicHash,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 53536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53539 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQDynamicPropertyChangeEvent : public  ::QDynamicPropertyChangeEvent
{
public:
    sipQDynamicPropertyChangeEvent(const  ::QByteArray&);
    sipQDynamicPropertyChangeEvent(const  ::QDynamicPropertyChangeEvent&);
    ~sipQDynamicPropertyChangeEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDynamicPropertyChangeEvent(const sipQDynamicPropertyChangeEvent &);
    sipQDynamicPropertyChangeEvent &operator = (const sipQDynamicPropertyChangeEvent &);
};

sipQDynamicPropertyChangeEvent::sipQDynamicPropertyChangeEvent(const  ::QByteArray& a0):  ::QDynamicPropertyChangeEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQDynamicPropertyChangeEvent::sipQDynamicPropertyChangeEvent(const  ::QDynamicPropertyChangeEvent& a0):  ::QDynamicPropertyChangeEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQDynamicPropertyChangeEvent::~sipQDynamicPropertyChangeEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QDynamicPropertyChangeEvent_propertyName, "propertyName(self) -> QByteArray");

extern "C" {static PyObject *meth_QDynamicPropertyChangeEvent_propertyName(PyObject *, PyObject *);}
static PyObject *meth_QDynamicPropertyChangeEvent_propertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDynamicPropertyChangeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDynamicPropertyChangeEvent, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->propertyName());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDynamicPropertyChangeEvent, sipName_propertyName, doc_QDynamicPropertyChangeEvent_propertyName);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDynamicPropertyChangeEvent(void *, const sipTypeDef *);}
static void *cast_QDynamicPropertyChangeEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDynamicPropertyChangeEvent *sipCpp = reinterpret_cast< ::QDynamicPropertyChangeEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDynamicPropertyChangeEvent(void *, int);}
static void release_QDynamicPropertyChangeEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDynamicPropertyChangeEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QDynamicPropertyChangeEvent *>(sipCppV);
}


extern "C" {static void dealloc_QDynamicPropertyChangeEvent(sipSimpleWrapper *);}
static void dealloc_QDynamicPropertyChangeEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDynamicPropertyChangeEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDynamicPropertyChangeEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDynamicPropertyChangeEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDynamicPropertyChangeEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQDynamicPropertyChangeEvent *sipCpp = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new sipQDynamicPropertyChangeEvent(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDynamicPropertyChangeEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDynamicPropertyChangeEvent, &a0))
        {
            sipCpp = new sipQDynamicPropertyChangeEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDynamicPropertyChangeEvent[] = {{69, 255, 1}};


static PyMethodDef methods_QDynamicPropertyChangeEvent[] = {
    {SIP_MLNAME_CAST(sipName_propertyName), meth_QDynamicPropertyChangeEvent_propertyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDynamicPropertyChangeEvent_propertyName)}
};

PyDoc_STRVAR(doc_QDynamicPropertyChangeEvent, "\1QDynamicPropertyChangeEvent(Union[QByteArray, bytes, bytearray])\n"
"QDynamicPropertyChangeEvent(QDynamicPropertyChangeEvent)");


static pyqt5ClassPluginDef plugin_QDynamicPropertyChangeEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QDynamicPropertyChangeEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDynamicPropertyChangeEvent,
        {SIP_NULLPTR},
        &plugin_QDynamicPropertyChangeEvent
    },
    {
        sipNameNr_QDynamicPropertyChangeEvent,
        {0, 0, 1},
        1, methods_QDynamicPropertyChangeEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDynamicPropertyChangeEvent,
    -1,
    -1,
    supers_QDynamicPropertyChangeEvent,
    SIP_NULLPTR,
    init_type_QDynamicPropertyChangeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDynamicPropertyChangeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDynamicPropertyChangeEvent,
    cast_QDynamicPropertyChangeEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53746 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53750 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 53753 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQChildEvent : public  ::QChildEvent
{
public:
    sipQChildEvent( ::QEvent::Type, ::QObject*);
    sipQChildEvent(const  ::QChildEvent&);
    ~sipQChildEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQChildEvent(const sipQChildEvent &);
    sipQChildEvent &operator = (const sipQChildEvent &);
};

sipQChildEvent::sipQChildEvent( ::QEvent::Type a0, ::QObject*a1):  ::QChildEvent(a0,a1), sipPySelf(SIP_NULLPTR)
{
}

sipQChildEvent::sipQChildEvent(const  ::QChildEvent& a0):  ::QChildEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQChildEvent::~sipQChildEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QChildEvent_child, "child(self) -> QObject");

extern "C" {static PyObject *meth_QChildEvent_child(PyObject *, PyObject *);}
static PyObject *meth_QChildEvent_child(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QChildEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChildEvent, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->child();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChildEvent, sipName_child, doc_QChildEvent_child);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QChildEvent_added, "added(self) -> bool");

extern "C" {static PyObject *meth_QChildEvent_added(PyObject *, PyObject *);}
static PyObject *meth_QChildEvent_added(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QChildEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChildEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->added();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChildEvent, sipName_added, doc_QChildEvent_added);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QChildEvent_polished, "polished(self) -> bool");

extern "C" {static PyObject *meth_QChildEvent_polished(PyObject *, PyObject *);}
static PyObject *meth_QChildEvent_polished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QChildEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChildEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->polished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChildEvent, sipName_polished, doc_QChildEvent_polished);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QChildEvent_removed, "removed(self) -> bool");

extern "C" {static PyObject *meth_QChildEvent_removed(PyObject *, PyObject *);}
static PyObject *meth_QChildEvent_removed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QChildEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QChildEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->removed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QChildEvent, sipName_removed, doc_QChildEvent_removed);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QChildEvent(void *, const sipTypeDef *);}
static void *cast_QChildEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QChildEvent *sipCpp = reinterpret_cast< ::QChildEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QChildEvent(void *, int);}
static void release_QChildEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQChildEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QChildEvent *>(sipCppV);
}


extern "C" {static void dealloc_QChildEvent(sipSimpleWrapper *);}
static void dealloc_QChildEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQChildEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QChildEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QChildEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QChildEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQChildEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;
         ::QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJ8", sipType_QEvent_Type, &a0, sipType_QObject, &a1))
        {
            sipCpp = new sipQChildEvent(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QChildEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QChildEvent, &a0))
        {
            sipCpp = new sipQChildEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QChildEvent[] = {{69, 255, 1}};


static PyMethodDef methods_QChildEvent[] = {
    {SIP_MLNAME_CAST(sipName_added), meth_QChildEvent_added, METH_VARARGS, SIP_MLDOC_CAST(doc_QChildEvent_added)},
    {SIP_MLNAME_CAST(sipName_child), meth_QChildEvent_child, METH_VARARGS, SIP_MLDOC_CAST(doc_QChildEvent_child)},
    {SIP_MLNAME_CAST(sipName_polished), meth_QChildEvent_polished, METH_VARARGS, SIP_MLDOC_CAST(doc_QChildEvent_polished)},
    {SIP_MLNAME_CAST(sipName_removed), meth_QChildEvent_removed, METH_VARARGS, SIP_MLDOC_CAST(doc_QChildEvent_removed)}
};

PyDoc_STRVAR(doc_QChildEvent, "\1QChildEvent(QEvent.Type, QObject)\n"
"QChildEvent(QChildEvent)");


static pyqt5ClassPluginDef plugin_QChildEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QChildEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QChildEvent,
        {SIP_NULLPTR},
        &plugin_QChildEvent
    },
    {
        sipNameNr_QChildEvent,
        {0, 0, 1},
        4, methods_QChildEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QChildEvent,
    -1,
    -1,
    supers_QChildEvent,
    SIP_NULLPTR,
    init_type_QChildEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QChildEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QChildEvent,
    cast_QChildEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54046 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54050 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQTimerEvent : public  ::QTimerEvent
{
public:
    sipQTimerEvent(int);
    sipQTimerEvent(const  ::QTimerEvent&);
    ~sipQTimerEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTimerEvent(const sipQTimerEvent &);
    sipQTimerEvent &operator = (const sipQTimerEvent &);
};

sipQTimerEvent::sipQTimerEvent(int a0):  ::QTimerEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQTimerEvent::sipQTimerEvent(const  ::QTimerEvent& a0):  ::QTimerEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQTimerEvent::~sipQTimerEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QTimerEvent_timerId, "timerId(self) -> int");

extern "C" {static PyObject *meth_QTimerEvent_timerId(PyObject *, PyObject *);}
static PyObject *meth_QTimerEvent_timerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QTimerEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimerEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->timerId();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimerEvent, sipName_timerId, doc_QTimerEvent_timerId);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTimerEvent(void *, const sipTypeDef *);}
static void *cast_QTimerEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTimerEvent *sipCpp = reinterpret_cast< ::QTimerEvent *>(sipCppV);

    if (targetType == sipType_QEvent)
        return static_cast< ::QEvent *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTimerEvent(void *, int);}
static void release_QTimerEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTimerEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QTimerEvent *>(sipCppV);
}


extern "C" {static void dealloc_QTimerEvent(sipSimpleWrapper *);}
static void dealloc_QTimerEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTimerEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTimerEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTimerEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTimerEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTimerEvent *sipCpp = SIP_NULLPTR;

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new sipQTimerEvent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QTimerEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QTimerEvent, &a0))
        {
            sipCpp = new sipQTimerEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTimerEvent[] = {{69, 255, 1}};


static PyMethodDef methods_QTimerEvent[] = {
    {SIP_MLNAME_CAST(sipName_timerId), meth_QTimerEvent_timerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimerEvent_timerId)}
};

PyDoc_STRVAR(doc_QTimerEvent, "\1QTimerEvent(int)\n"
"QTimerEvent(QTimerEvent)");


static pyqt5ClassPluginDef plugin_QTimerEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QTimerEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QTimerEvent,
        {SIP_NULLPTR},
        &plugin_QTimerEvent
    },
    {
        sipNameNr_QTimerEvent,
        {0, 0, 1},
        1, methods_QTimerEvent,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QTimerEvent,
    -1,
    -1,
    supers_QTimerEvent,
    SIP_NULLPTR,
    init_type_QTimerEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QTimerEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QTimerEvent,
    cast_QTimerEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



class sipQEvent : public  ::QEvent
{
public:
    sipQEvent( ::QEvent::Type);
    sipQEvent(const  ::QEvent&);
    ~sipQEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQEvent(const sipQEvent &);
    sipQEvent &operator = (const sipQEvent &);
};

sipQEvent::sipQEvent( ::QEvent::Type a0):  ::QEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQEvent::sipQEvent(const  ::QEvent& a0):  ::QEvent(a0), sipPySelf(SIP_NULLPTR)
{
}

sipQEvent::~sipQEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_QEvent_type, "type(self) -> QEvent.Type");

extern "C" {static PyObject *meth_QEvent_type(PyObject *, PyObject *);}
static PyObject *meth_QEvent_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
             ::QEvent::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QEvent_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_type, doc_QEvent_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEvent_spontaneous, "spontaneous(self) -> bool");

extern "C" {static PyObject *meth_QEvent_spontaneous(PyObject *, PyObject *);}
static PyObject *meth_QEvent_spontaneous(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->spontaneous();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_spontaneous, doc_QEvent_spontaneous);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEvent_setAccepted, "setAccepted(self, bool)");

extern "C" {static PyObject *meth_QEvent_setAccepted(PyObject *, PyObject *);}
static PyObject *meth_QEvent_setAccepted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QEvent, &sipCpp, &a0))
        {
            sipCpp->setAccepted(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_setAccepted, doc_QEvent_setAccepted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEvent_isAccepted, "isAccepted(self) -> bool");

extern "C" {static PyObject *meth_QEvent_isAccepted(PyObject *, PyObject *);}
static PyObject *meth_QEvent_isAccepted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAccepted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_isAccepted, doc_QEvent_isAccepted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEvent_accept, "accept(self)");

extern "C" {static PyObject *meth_QEvent_accept(PyObject *, PyObject *);}
static PyObject *meth_QEvent_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            sipCpp->accept();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_accept, doc_QEvent_accept);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEvent_ignore, "ignore(self)");

extern "C" {static PyObject *meth_QEvent_ignore(PyObject *, PyObject *);}
static PyObject *meth_QEvent_ignore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QEvent, &sipCpp))
        {
            sipCpp->ignore();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_ignore, doc_QEvent_ignore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QEvent_registerEventType, "registerEventType(hint: int = -1) -> int");

extern "C" {static PyObject *meth_QEvent_registerEventType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QEvent_registerEventType(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|i", &a0))
        {
            int sipRes;

            sipRes =  ::QEvent::registerEventType(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QEvent, sipName_registerEventType, doc_QEvent_registerEventType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEvent(void *, int);}
static void release_QEvent(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::QEvent *>(sipCppV);
}


extern "C" {static void dealloc_QEvent(sipSimpleWrapper *);}
static void dealloc_QEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQEvent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQEvent *sipCpp = SIP_NULLPTR;

    {
         ::QEvent::Type a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "E", sipType_QEvent_Type, &a0))
        {
            sipCpp = new sipQEvent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QEvent, &a0))
        {
            sipCpp = new sipQEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QEvent[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QEvent_accept, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_accept)},
    {SIP_MLNAME_CAST(sipName_ignore), meth_QEvent_ignore, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_ignore)},
    {SIP_MLNAME_CAST(sipName_isAccepted), meth_QEvent_isAccepted, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_isAccepted)},
    {SIP_MLNAME_CAST(sipName_registerEventType), SIP_MLMETH_CAST(meth_QEvent_registerEventType), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QEvent_registerEventType)},
    {SIP_MLNAME_CAST(sipName_setAccepted), meth_QEvent_setAccepted, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_setAccepted)},
    {SIP_MLNAME_CAST(sipName_spontaneous), meth_QEvent_spontaneous, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_spontaneous)},
    {SIP_MLNAME_CAST(sipName_type), meth_QEvent_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QEvent_type)}
};

static sipEnumMemberDef enummembers_QEvent[] = {
    {sipName_ActionAdded, static_cast<int>( ::QEvent::ActionAdded), 70},
    {sipName_ActionChanged, static_cast<int>( ::QEvent::ActionChanged), 70},
    {sipName_ActionRemoved, static_cast<int>( ::QEvent::ActionRemoved), 70},
    {sipName_ActivationChange, static_cast<int>( ::QEvent::ActivationChange), 70},
    {sipName_ApplicationActivate, static_cast<int>( ::QEvent::ApplicationActivate), 70},
    {sipName_ApplicationActivated, static_cast<int>( ::QEvent::ApplicationActivated), 70},
    {sipName_ApplicationDeactivate, static_cast<int>( ::QEvent::ApplicationDeactivate), 70},
    {sipName_ApplicationDeactivated, static_cast<int>( ::QEvent::ApplicationDeactivated), 70},
    {sipName_ApplicationFontChange, static_cast<int>( ::QEvent::ApplicationFontChange), 70},
    {sipName_ApplicationLayoutDirectionChange, static_cast<int>( ::QEvent::ApplicationLayoutDirectionChange), 70},
    {sipName_ApplicationPaletteChange, static_cast<int>( ::QEvent::ApplicationPaletteChange), 70},
    {sipName_ApplicationStateChange, static_cast<int>( ::QEvent::ApplicationStateChange), 70},
    {sipName_ApplicationWindowIconChange, static_cast<int>( ::QEvent::ApplicationWindowIconChange), 70},
    {sipName_ChildAdded, static_cast<int>( ::QEvent::ChildAdded), 70},
    {sipName_ChildPolished, static_cast<int>( ::QEvent::ChildPolished), 70},
    {sipName_ChildRemoved, static_cast<int>( ::QEvent::ChildRemoved), 70},
    {sipName_Clipboard, static_cast<int>( ::QEvent::Clipboard), 70},
    {sipName_Close, static_cast<int>( ::QEvent::Close), 70},
    {sipName_CloseSoftwareInputPanel, static_cast<int>( ::QEvent::CloseSoftwareInputPanel), 70},
    {sipName_ContentsRectChange, static_cast<int>( ::QEvent::ContentsRectChange), 70},
    {sipName_ContextMenu, static_cast<int>( ::QEvent::ContextMenu), 70},
    {sipName_CursorChange, static_cast<int>( ::QEvent::CursorChange), 70},
    {sipName_DeferredDelete, static_cast<int>( ::QEvent::DeferredDelete), 70},
    {sipName_DragEnter, static_cast<int>( ::QEvent::DragEnter), 70},
    {sipName_DragLeave, static_cast<int>( ::QEvent::DragLeave), 70},
    {sipName_DragMove, static_cast<int>( ::QEvent::DragMove), 70},
    {sipName_Drop, static_cast<int>( ::QEvent::Drop), 70},
    {sipName_DynamicPropertyChange, static_cast<int>( ::QEvent::DynamicPropertyChange), 70},
    {sipName_EnabledChange, static_cast<int>( ::QEvent::EnabledChange), 70},
    {sipName_Enter, static_cast<int>( ::QEvent::Enter), 70},
    {sipName_EnterWhatsThisMode, static_cast<int>( ::QEvent::EnterWhatsThisMode), 70},
    {sipName_Expose, static_cast<int>( ::QEvent::Expose), 70},
    {sipName_FileOpen, static_cast<int>( ::QEvent::FileOpen), 70},
    {sipName_FocusAboutToChange, static_cast<int>( ::QEvent::FocusAboutToChange), 70},
    {sipName_FocusIn, static_cast<int>( ::QEvent::FocusIn), 70},
    {sipName_FocusOut, static_cast<int>( ::QEvent::FocusOut), 70},
    {sipName_FontChange, static_cast<int>( ::QEvent::FontChange), 70},
    {sipName_Gesture, static_cast<int>( ::QEvent::Gesture), 70},
    {sipName_GestureOverride, static_cast<int>( ::QEvent::GestureOverride), 70},
    {sipName_GrabKeyboard, static_cast<int>( ::QEvent::GrabKeyboard), 70},
    {sipName_GrabMouse, static_cast<int>( ::QEvent::GrabMouse), 70},
    {sipName_GraphicsSceneContextMenu, static_cast<int>( ::QEvent::GraphicsSceneContextMenu), 70},
    {sipName_GraphicsSceneDragEnter, static_cast<int>( ::QEvent::GraphicsSceneDragEnter), 70},
    {sipName_GraphicsSceneDragLeave, static_cast<int>( ::QEvent::GraphicsSceneDragLeave), 70},
    {sipName_GraphicsSceneDragMove, static_cast<int>( ::QEvent::GraphicsSceneDragMove), 70},
    {sipName_GraphicsSceneDrop, static_cast<int>( ::QEvent::GraphicsSceneDrop), 70},
    {sipName_GraphicsSceneHelp, static_cast<int>( ::QEvent::GraphicsSceneHelp), 70},
    {sipName_GraphicsSceneHoverEnter, static_cast<int>( ::QEvent::GraphicsSceneHoverEnter), 70},
    {sipName_GraphicsSceneHoverLeave, static_cast<int>( ::QEvent::GraphicsSceneHoverLeave), 70},
    {sipName_GraphicsSceneHoverMove, static_cast<int>( ::QEvent::GraphicsSceneHoverMove), 70},
    {sipName_GraphicsSceneMouseDoubleClick, static_cast<int>( ::QEvent::GraphicsSceneMouseDoubleClick), 70},
    {sipName_GraphicsSceneMouseMove, static_cast<int>( ::QEvent::GraphicsSceneMouseMove), 70},
    {sipName_GraphicsSceneMousePress, static_cast<int>( ::QEvent::GraphicsSceneMousePress), 70},
    {sipName_GraphicsSceneMouseRelease, static_cast<int>( ::QEvent::GraphicsSceneMouseRelease), 70},
    {sipName_GraphicsSceneMove, static_cast<int>( ::QEvent::GraphicsSceneMove), 70},
    {sipName_GraphicsSceneResize, static_cast<int>( ::QEvent::GraphicsSceneResize), 70},
    {sipName_GraphicsSceneWheel, static_cast<int>( ::QEvent::GraphicsSceneWheel), 70},
    {sipName_Hide, static_cast<int>( ::QEvent::Hide), 70},
    {sipName_HideToParent, static_cast<int>( ::QEvent::HideToParent), 70},
    {sipName_HoverEnter, static_cast<int>( ::QEvent::HoverEnter), 70},
    {sipName_HoverLeave, static_cast<int>( ::QEvent::HoverLeave), 70},
    {sipName_HoverMove, static_cast<int>( ::QEvent::HoverMove), 70},
    {sipName_IconDrag, static_cast<int>( ::QEvent::IconDrag), 70},
    {sipName_IconTextChange, static_cast<int>( ::QEvent::IconTextChange), 70},
    {sipName_InputMethod, static_cast<int>( ::QEvent::InputMethod), 70},
    {sipName_InputMethodQuery, static_cast<int>( ::QEvent::InputMethodQuery), 70},
    {sipName_KeyPress, static_cast<int>( ::QEvent::KeyPress), 70},
    {sipName_KeyRelease, static_cast<int>( ::QEvent::KeyRelease), 70},
    {sipName_KeyboardLayoutChange, static_cast<int>( ::QEvent::KeyboardLayoutChange), 70},
    {sipName_LanguageChange, static_cast<int>( ::QEvent::LanguageChange), 70},
    {sipName_LayoutDirectionChange, static_cast<int>( ::QEvent::LayoutDirectionChange), 70},
    {sipName_LayoutRequest, static_cast<int>( ::QEvent::LayoutRequest), 70},
    {sipName_Leave, static_cast<int>( ::QEvent::Leave), 70},
    {sipName_LeaveWhatsThisMode, static_cast<int>( ::QEvent::LeaveWhatsThisMode), 70},
    {sipName_LocaleChange, static_cast<int>( ::QEvent::LocaleChange), 70},
    {sipName_MacSizeChange, static_cast<int>( ::QEvent::MacSizeChange), 70},
    {sipName_MaxUser, static_cast<int>( ::QEvent::MaxUser), 70},
    {sipName_MetaCall, static_cast<int>( ::QEvent::MetaCall), 70},
    {sipName_ModifiedChange, static_cast<int>( ::QEvent::ModifiedChange), 70},
    {sipName_MouseButtonDblClick, static_cast<int>( ::QEvent::MouseButtonDblClick), 70},
    {sipName_MouseButtonPress, static_cast<int>( ::QEvent::MouseButtonPress), 70},
    {sipName_MouseButtonRelease, static_cast<int>( ::QEvent::MouseButtonRelease), 70},
    {sipName_MouseMove, static_cast<int>( ::QEvent::MouseMove), 70},
    {sipName_MouseTrackingChange, static_cast<int>( ::QEvent::MouseTrackingChange), 70},
    {sipName_Move, static_cast<int>( ::QEvent::Move), 70},
    {sipName_NonClientAreaMouseButtonDblClick, static_cast<int>( ::QEvent::NonClientAreaMouseButtonDblClick), 70},
    {sipName_NonClientAreaMouseButtonPress, static_cast<int>( ::QEvent::NonClientAreaMouseButtonPress), 70},
    {sipName_NonClientAreaMouseButtonRelease, static_cast<int>( ::QEvent::NonClientAreaMouseButtonRelease), 70},
    {sipName_NonClientAreaMouseMove, static_cast<int>( ::QEvent::NonClientAreaMouseMove), 70},
    {sipName_None_, static_cast<int>( ::QEvent::None), 70},
    {sipName_OkRequest, static_cast<int>( ::QEvent::OkRequest), 70},
    {sipName_OrientationChange, static_cast<int>( ::QEvent::OrientationChange), 70},
    {sipName_Paint, static_cast<int>( ::QEvent::Paint), 70},
    {sipName_PaletteChange, static_cast<int>( ::QEvent::PaletteChange), 70},
    {sipName_ParentAboutToChange, static_cast<int>( ::QEvent::ParentAboutToChange), 70},
    {sipName_ParentChange, static_cast<int>( ::QEvent::ParentChange), 70},
    {sipName_PlatformPanel, static_cast<int>( ::QEvent::PlatformPanel), 70},
    {sipName_PlatformSurface, static_cast<int>( ::QEvent::PlatformSurface), 70},
    {sipName_Polish, static_cast<int>( ::QEvent::Polish), 70},
    {sipName_PolishRequest, static_cast<int>( ::QEvent::PolishRequest), 70},
    {sipName_QueryWhatsThis, static_cast<int>( ::QEvent::QueryWhatsThis), 70},
    {sipName_ReadOnlyChange, static_cast<int>( ::QEvent::ReadOnlyChange), 70},
    {sipName_RequestSoftwareInputPanel, static_cast<int>( ::QEvent::RequestSoftwareInputPanel), 70},
    {sipName_Resize, static_cast<int>( ::QEvent::Resize), 70},
    {sipName_Scroll, static_cast<int>( ::QEvent::Scroll), 70},
    {sipName_ScrollPrepare, static_cast<int>( ::QEvent::ScrollPrepare), 70},
    {sipName_Shortcut, static_cast<int>( ::QEvent::Shortcut), 70},
    {sipName_ShortcutOverride, static_cast<int>( ::QEvent::ShortcutOverride), 70},
    {sipName_Show, static_cast<int>( ::QEvent::Show), 70},
    {sipName_ShowToParent, static_cast<int>( ::QEvent::ShowToParent), 70},
    {sipName_SockAct, static_cast<int>( ::QEvent::SockAct), 70},
    {sipName_StateMachineSignal, static_cast<int>( ::QEvent::StateMachineSignal), 70},
    {sipName_StateMachineWrapped, static_cast<int>( ::QEvent::StateMachineWrapped), 70},
    {sipName_StatusTip, static_cast<int>( ::QEvent::StatusTip), 70},
    {sipName_StyleChange, static_cast<int>( ::QEvent::StyleChange), 70},
    {sipName_TabletEnterProximity, static_cast<int>( ::QEvent::TabletEnterProximity), 70},
    {sipName_TabletLeaveProximity, static_cast<int>( ::QEvent::TabletLeaveProximity), 70},
    {sipName_TabletMove, static_cast<int>( ::QEvent::TabletMove), 70},
    {sipName_TabletPress, static_cast<int>( ::QEvent::TabletPress), 70},
    {sipName_TabletRelease, static_cast<int>( ::QEvent::TabletRelease), 70},
    {sipName_TabletTrackingChange, static_cast<int>( ::QEvent::TabletTrackingChange), 70},
    {sipName_ThreadChange, static_cast<int>( ::QEvent::ThreadChange), 70},
    {sipName_Timer, static_cast<int>( ::QEvent::Timer), 70},
    {sipName_ToolBarChange, static_cast<int>( ::QEvent::ToolBarChange), 70},
    {sipName_ToolTip, static_cast<int>( ::QEvent::ToolTip), 70},
    {sipName_ToolTipChange, static_cast<int>( ::QEvent::ToolTipChange), 70},
    {sipName_TouchBegin, static_cast<int>( ::QEvent::TouchBegin), 70},
    {sipName_TouchCancel, static_cast<int>( ::QEvent::TouchCancel), 70},
    {sipName_TouchEnd, static_cast<int>( ::QEvent::TouchEnd), 70},
    {sipName_TouchUpdate, static_cast<int>( ::QEvent::TouchUpdate), 70},
    {sipName_UngrabKeyboard, static_cast<int>( ::QEvent::UngrabKeyboard), 70},
    {sipName_UngrabMouse, static_cast<int>( ::QEvent::UngrabMouse), 70},
    {sipName_UpdateLater, static_cast<int>( ::QEvent::UpdateLater), 70},
    {sipName_UpdateRequest, static_cast<int>( ::QEvent::UpdateRequest), 70},
    {sipName_User, static_cast<int>( ::QEvent::User), 70},
    {sipName_WhatsThis, static_cast<int>( ::QEvent::WhatsThis), 70},
    {sipName_WhatsThisClicked, static_cast<int>( ::QEvent::WhatsThisClicked), 70},
    {sipName_Wheel, static_cast<int>( ::QEvent::Wheel), 70},
    {sipName_WinEventAct, static_cast<int>( ::QEvent::WinEventAct), 70},
    {sipName_WinIdChange, static_cast<int>( ::QEvent::WinIdChange), 70},
    {sipName_WindowActivate, static_cast<int>( ::QEvent::WindowActivate), 70},
    {sipName_WindowBlocked, static_cast<int>( ::QEvent::WindowBlocked), 70},
    {sipName_WindowDeactivate, static_cast<int>( ::QEvent::WindowDeactivate), 70},
    {sipName_WindowIconChange, static_cast<int>( ::QEvent::WindowIconChange), 70},
    {sipName_WindowStateChange, static_cast<int>( ::QEvent::WindowStateChange), 70},
    {sipName_WindowTitleChange, static_cast<int>( ::QEvent::WindowTitleChange), 70},
    {sipName_WindowUnblocked, static_cast<int>( ::QEvent::WindowUnblocked), 70},
    {sipName_ZOrderChange, static_cast<int>( ::QEvent::ZOrderChange), 70},
};

PyDoc_STRVAR(doc_QEvent, "\1QEvent(QEvent.Type)\n"
"QEvent(QEvent)");


static pyqt5ClassPluginDef plugin_QEvent = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QEvent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QEvent,
        {SIP_NULLPTR},
        &plugin_QEvent
    },
    {
        sipNameNr_QEvent,
        {0, 0, 1},
        7, methods_QEvent,
        148, enummembers_QEvent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QEvent,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QEvent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 54771 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 54775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 54778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 54790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 54793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 54796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 54799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 54817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54820 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 54823 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54826 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 54829 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 54832 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 54835 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQCoreApplication : public  ::QCoreApplication
{
public:
    sipQCoreApplication(int&,char**);
    virtual ~sipQCoreApplication();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool notify( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCoreApplication(const sipQCoreApplication &);
    sipQCoreApplication &operator = (const sipQCoreApplication &);

    char sipPyMethods[8];
};

sipQCoreApplication::sipQCoreApplication(int& a0,char**a1):  ::QCoreApplication(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCoreApplication::~sipQCoreApplication()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQCoreApplication::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QCoreApplication);

    return  ::QCoreApplication::metaObject();
}

int sipQCoreApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QCoreApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QCoreApplication,_c,_id,_a);

    return _id;
}

void *sipQCoreApplication::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QCoreApplication, _clname, &sipCpp) ? sipCpp :  ::QCoreApplication::qt_metacast(_clname));
}

bool sipQCoreApplication::notify( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_notify);

    if (!sipMeth)
        return  ::QCoreApplication::notify(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQCoreApplication::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QCoreApplication::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQCoreApplication::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QCoreApplication::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQCoreApplication::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QCoreApplication::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QCoreApplication::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QCoreApplication::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QCoreApplication::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQCoreApplication::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QCoreApplication::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QCoreApplication_setOrganizationDomain, "setOrganizationDomain(str)");

extern "C" {static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::setOrganizationDomain(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setOrganizationDomain, doc_QCoreApplication_setOrganizationDomain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_organizationDomain, "organizationDomain() -> str");

extern "C" {static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::organizationDomain());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_organizationDomain, doc_QCoreApplication_organizationDomain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setOrganizationName, "setOrganizationName(str)");

extern "C" {static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::setOrganizationName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setOrganizationName, doc_QCoreApplication_setOrganizationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_organizationName, "organizationName() -> str");

extern "C" {static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::organizationName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_organizationName, doc_QCoreApplication_organizationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setApplicationName, "setApplicationName(str)");

extern "C" {static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::setApplicationName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setApplicationName, doc_QCoreApplication_setApplicationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationName, "applicationName() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::applicationName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationName, doc_QCoreApplication_applicationName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_arguments, "arguments() -> List[str]");

extern "C" {static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QCoreApplication::arguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_arguments, doc_QCoreApplication_arguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_instance, "instance() -> QCoreApplication");

extern "C" {static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QCoreApplication*sipRes;

            sipRes =  ::QCoreApplication::instance();

            return sipConvertFromType(sipRes,sipType_QCoreApplication,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_instance, doc_QCoreApplication_instance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_exec_, "exec_() -> int");

extern "C" {static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QCoreApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exec_, doc_QCoreApplication_exec_);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_exec, "exec() -> int");

extern "C" {static PyObject *meth_QCoreApplication_exec(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exec(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QCoreApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exec, doc_QCoreApplication_exec);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_processEvents, "processEvents(flags: Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag] = QEventLoop.AllEvents)\n"
"processEvents(Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag], int)");

extern "C" {static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
         ::QEventLoop::ProcessEventsFlags* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J1", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QCoreApplication::processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J1i", sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QCoreApplication::processEvents(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_processEvents, doc_QCoreApplication_processEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_exit, "exit(returnCode: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;

        static const char *sipKwdList[] = {
            sipName_returnCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|i", &a0))
        {
             ::QCoreApplication::exit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_exit, doc_QCoreApplication_exit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_sendEvent, "sendEvent(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QEvent* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QCoreApplication::sendEvent(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_sendEvent, doc_QCoreApplication_sendEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_postEvent, "postEvent(QObject, QEvent, priority: int = Qt.NormalEventPriority)");

extern "C" {static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QEvent* a1;
        int a2 = Qt::NormalEventPriority;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8J:|i", sipType_QObject, &a0, sipType_QEvent, &a1, &a2))
        {
             ::QCoreApplication::postEvent(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_postEvent, doc_QCoreApplication_postEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_sendPostedEvents, "sendPostedEvents(receiver: QObject = None, eventType: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            sipName_receiver,
            sipName_eventType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8i", sipType_QObject, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QCoreApplication::sendPostedEvents(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_sendPostedEvents, doc_QCoreApplication_sendPostedEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_removePostedEvents, "removePostedEvents(QObject, eventType: int = 0)");

extern "C" {static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_eventType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8|i", sipType_QObject, &a0, &a1))
        {
             ::QCoreApplication::removePostedEvents(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removePostedEvents, doc_QCoreApplication_removePostedEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_hasPendingEvents, "hasPendingEvents() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::hasPendingEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_hasPendingEvents, doc_QCoreApplication_hasPendingEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_notify, "notify(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QCoreApplication::notify(a0,a1) : sipCpp->notify(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_notify, doc_QCoreApplication_notify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_startingUp, "startingUp() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::startingUp();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_startingUp, doc_QCoreApplication_startingUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_closingDown, "closingDown() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::closingDown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_closingDown, doc_QCoreApplication_closingDown);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationDirPath, "applicationDirPath() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::applicationDirPath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationDirPath, doc_QCoreApplication_applicationDirPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationFilePath, "applicationFilePath() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::applicationFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationFilePath, doc_QCoreApplication_applicationFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setLibraryPaths, "setLibraryPaths(Iterable[str])");

extern "C" {static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QStringList,&a0, &a0State))
        {
             ::QCoreApplication::setLibraryPaths(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setLibraryPaths, doc_QCoreApplication_setLibraryPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_libraryPaths, "libraryPaths() -> List[str]");

extern "C" {static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList( ::QCoreApplication::libraryPaths());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_libraryPaths, doc_QCoreApplication_libraryPaths);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_addLibraryPath, "addLibraryPath(str)");

extern "C" {static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::addLibraryPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_addLibraryPath, doc_QCoreApplication_addLibraryPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_removeLibraryPath, "removeLibraryPath(str)");

extern "C" {static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::removeLibraryPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeLibraryPath, doc_QCoreApplication_removeLibraryPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_installTranslator, "installTranslator(QTranslator) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTranslator* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QTranslator, &a0))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::installTranslator(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_installTranslator, doc_QCoreApplication_installTranslator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_removeTranslator, "removeTranslator(QTranslator) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QTranslator* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QTranslator, &a0))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::removeTranslator(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeTranslator, doc_QCoreApplication_removeTranslator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_translate, "translate(str, str, disambiguation: str = None, n: int = -1) -> str");

extern "C" {static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;
        const char* a2 = 0;
        PyObject *a2Keep = 0;
        int a3 = -1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_disambiguation,
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "AAA8|AAi", &a0Keep, &a0, &a1Keep, &a1, &a2Keep, &a2, &a3))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::translate(a0,a1,a2,a3));
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);
            Py_XDECREF(a2Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_translate, doc_QCoreApplication_translate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_flush, "flush()");

extern "C" {static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QCoreApplication::flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_flush, doc_QCoreApplication_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setAttribute, "setAttribute(Qt.ApplicationAttribute, on: bool = True)");

extern "C" {static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ApplicationAttribute a0;
        bool a1 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "E|b", sipType_Qt_ApplicationAttribute, &a0, &a1))
        {
             ::QCoreApplication::setAttribute(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setAttribute, doc_QCoreApplication_setAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_testAttribute, "testAttribute(Qt.ApplicationAttribute) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ApplicationAttribute a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_ApplicationAttribute, &a0))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::testAttribute(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_testAttribute, doc_QCoreApplication_testAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_quit, "quit()");

extern "C" {static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QCoreApplication::quit();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_quit, doc_QCoreApplication_quit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QCoreApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QCoreApplication::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_event, doc_QCoreApplication_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setApplicationVersion, "setApplicationVersion(str)");

extern "C" {static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QCoreApplication::setApplicationVersion(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setApplicationVersion, doc_QCoreApplication_setApplicationVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationVersion, "applicationVersion() -> str");

extern "C" {static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QCoreApplication::applicationVersion());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationVersion, doc_QCoreApplication_applicationVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_applicationPid, "applicationPid() -> int");

extern "C" {static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::qint64 sipRes;

            sipRes =  ::QCoreApplication::applicationPid();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_applicationPid, doc_QCoreApplication_applicationPid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_eventDispatcher, "eventDispatcher() -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QCoreApplication_eventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_eventDispatcher(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QAbstractEventDispatcher*sipRes;

            sipRes =  ::QCoreApplication::eventDispatcher();

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_eventDispatcher, doc_QCoreApplication_eventDispatcher);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setEventDispatcher, "setEventDispatcher(QAbstractEventDispatcher)");

extern "C" {static PyObject *meth_QCoreApplication_setEventDispatcher(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setEventDispatcher(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractEventDispatcher* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J:", sipType_QAbstractEventDispatcher, &a0))
        {
             ::QCoreApplication::setEventDispatcher(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setEventDispatcher, doc_QCoreApplication_setEventDispatcher);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_isQuitLockEnabled, "isQuitLockEnabled() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_isQuitLockEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_isQuitLockEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::isQuitLockEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_isQuitLockEnabled, doc_QCoreApplication_isQuitLockEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setQuitLockEnabled, "setQuitLockEnabled(bool)");

extern "C" {static PyObject *meth_QCoreApplication_setQuitLockEnabled(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setQuitLockEnabled(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QCoreApplication::setQuitLockEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setQuitLockEnabled, doc_QCoreApplication_setQuitLockEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_installNativeEventFilter, "installNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QCoreApplication_installNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_installNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->installNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_installNativeEventFilter, doc_QCoreApplication_installNativeEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_removeNativeEventFilter, "removeNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QCoreApplication_removeNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QCoreApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCoreApplication, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->removeNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_removeNativeEventFilter, doc_QCoreApplication_removeNativeEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_setSetuidAllowed, "setSetuidAllowed(bool)");

extern "C" {static PyObject *meth_QCoreApplication_setSetuidAllowed(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setSetuidAllowed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QCoreApplication::setSetuidAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_setSetuidAllowed, doc_QCoreApplication_setSetuidAllowed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCoreApplication_isSetuidAllowed, "isSetuidAllowed() -> bool");

extern "C" {static PyObject *meth_QCoreApplication_isSetuidAllowed(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_isSetuidAllowed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QCoreApplication::isSetuidAllowed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCoreApplication, sipName_isSetuidAllowed, doc_QCoreApplication_isSetuidAllowed);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QCoreApplication(void *, const sipTypeDef *);}
static void *cast_QCoreApplication(void *sipCppV, const sipTypeDef *targetType)
{
     ::QCoreApplication *sipCpp = reinterpret_cast< ::QCoreApplication *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCoreApplication(void *, int);}
static void release_QCoreApplication(void *sipCppV, int)
{
     ::QCoreApplication *sipCpp = reinterpret_cast< ::QCoreApplication *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QCoreApplication(sipSimpleWrapper *);}
static void dealloc_QCoreApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQCoreApplication *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCoreApplication(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QCoreApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCoreApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQCoreApplication *sipCpp = SIP_NULLPTR;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = pyqt5_from_argv_list(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCoreApplication(nargc, argv);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            pyqt5_update_argv_list(a0, argc, argv);
        }
#line 56436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCoreApplication[] = {{183, 255, 1}};


static PyMethodDef methods_QCoreApplication[] = {
    {SIP_MLNAME_CAST(sipName_addLibraryPath), meth_QCoreApplication_addLibraryPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_addLibraryPath)},
    {SIP_MLNAME_CAST(sipName_applicationDirPath), meth_QCoreApplication_applicationDirPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationDirPath)},
    {SIP_MLNAME_CAST(sipName_applicationFilePath), meth_QCoreApplication_applicationFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationFilePath)},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QCoreApplication_applicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationName)},
    {SIP_MLNAME_CAST(sipName_applicationPid), meth_QCoreApplication_applicationPid, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationPid)},
    {SIP_MLNAME_CAST(sipName_applicationVersion), meth_QCoreApplication_applicationVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_applicationVersion)},
    {SIP_MLNAME_CAST(sipName_arguments), meth_QCoreApplication_arguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_arguments)},
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QCoreApplication_closingDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_closingDown)},
    {SIP_MLNAME_CAST(sipName_event), meth_QCoreApplication_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_event)},
    {SIP_MLNAME_CAST(sipName_eventDispatcher), meth_QCoreApplication_eventDispatcher, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_eventDispatcher)},
    {SIP_MLNAME_CAST(sipName_exec), meth_QCoreApplication_exec, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_exec)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QCoreApplication_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_exec_)},
    {SIP_MLNAME_CAST(sipName_exit), SIP_MLMETH_CAST(meth_QCoreApplication_exit), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_exit)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QCoreApplication_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_flush)},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QCoreApplication_hasPendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_hasPendingEvents)},
    {SIP_MLNAME_CAST(sipName_installNativeEventFilter), meth_QCoreApplication_installNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_installNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_installTranslator), meth_QCoreApplication_installTranslator, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_installTranslator)},
    {SIP_MLNAME_CAST(sipName_instance), meth_QCoreApplication_instance, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_instance)},
    {SIP_MLNAME_CAST(sipName_isQuitLockEnabled), meth_QCoreApplication_isQuitLockEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_isQuitLockEnabled)},
    {SIP_MLNAME_CAST(sipName_isSetuidAllowed), meth_QCoreApplication_isSetuidAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_isSetuidAllowed)},
    {SIP_MLNAME_CAST(sipName_libraryPaths), meth_QCoreApplication_libraryPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_libraryPaths)},
    {SIP_MLNAME_CAST(sipName_notify), meth_QCoreApplication_notify, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_notify)},
    {SIP_MLNAME_CAST(sipName_organizationDomain), meth_QCoreApplication_organizationDomain, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_organizationDomain)},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QCoreApplication_organizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_organizationName)},
    {SIP_MLNAME_CAST(sipName_postEvent), SIP_MLMETH_CAST(meth_QCoreApplication_postEvent), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_postEvent)},
    {SIP_MLNAME_CAST(sipName_processEvents), SIP_MLMETH_CAST(meth_QCoreApplication_processEvents), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_processEvents)},
    {SIP_MLNAME_CAST(sipName_quit), meth_QCoreApplication_quit, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_quit)},
    {SIP_MLNAME_CAST(sipName_removeLibraryPath), meth_QCoreApplication_removeLibraryPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removeLibraryPath)},
    {SIP_MLNAME_CAST(sipName_removeNativeEventFilter), meth_QCoreApplication_removeNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removeNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_removePostedEvents), SIP_MLMETH_CAST(meth_QCoreApplication_removePostedEvents), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_removePostedEvents)},
    {SIP_MLNAME_CAST(sipName_removeTranslator), meth_QCoreApplication_removeTranslator, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_removeTranslator)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QCoreApplication_sendEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_sendEvent)},
    {SIP_MLNAME_CAST(sipName_sendPostedEvents), SIP_MLMETH_CAST(meth_QCoreApplication_sendPostedEvents), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_sendPostedEvents)},
    {SIP_MLNAME_CAST(sipName_setApplicationName), meth_QCoreApplication_setApplicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setApplicationName)},
    {SIP_MLNAME_CAST(sipName_setApplicationVersion), meth_QCoreApplication_setApplicationVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setApplicationVersion)},
    {SIP_MLNAME_CAST(sipName_setAttribute), SIP_MLMETH_CAST(meth_QCoreApplication_setAttribute), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setEventDispatcher), meth_QCoreApplication_setEventDispatcher, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setEventDispatcher)},
    {SIP_MLNAME_CAST(sipName_setLibraryPaths), meth_QCoreApplication_setLibraryPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setLibraryPaths)},
    {SIP_MLNAME_CAST(sipName_setOrganizationDomain), meth_QCoreApplication_setOrganizationDomain, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setOrganizationDomain)},
    {SIP_MLNAME_CAST(sipName_setOrganizationName), meth_QCoreApplication_setOrganizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setOrganizationName)},
    {SIP_MLNAME_CAST(sipName_setQuitLockEnabled), meth_QCoreApplication_setQuitLockEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setQuitLockEnabled)},
    {SIP_MLNAME_CAST(sipName_setSetuidAllowed), meth_QCoreApplication_setSetuidAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_setSetuidAllowed)},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QCoreApplication_startingUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_startingUp)},
    {SIP_MLNAME_CAST(sipName_testAttribute), meth_QCoreApplication_testAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QCoreApplication_testAttribute)},
    {SIP_MLNAME_CAST(sipName_translate), SIP_MLMETH_CAST(meth_QCoreApplication_translate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCoreApplication_translate)}
};

PyDoc_STRVAR(doc_QCoreApplication, "\1QCoreApplication(List[str])");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCoreApplication[] = {
    {"aboutToQuit()", "\1aboutToQuit(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QCoreApplication = {
    & ::QCoreApplication::staticMetaObject,
    0,
    signals_QCoreApplication,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCoreApplication = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCoreApplication,
        {SIP_NULLPTR},
        &plugin_QCoreApplication
    },
    {
        sipNameNr_QCoreApplication,
        {0, 0, 1},
        45, methods_QCoreApplication,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCoreApplication,
    -1,
    -1,
    supers_QCoreApplication,
    SIP_NULLPTR,
    init_type_QCoreApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCoreApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QCoreApplication,
    cast_QCoreApplication,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineparser.sip"
#include <qcommandlineparser.h>
#line 56583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 56587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 56590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 56593 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 56596 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 56599 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QCommandLineParser_setSingleDashWordOptionMode, "setSingleDashWordOptionMode(self, QCommandLineParser.SingleDashWordOptionMode)");

extern "C" {static PyObject *meth_QCommandLineParser_setSingleDashWordOptionMode(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_setSingleDashWordOptionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser::SingleDashWordOptionMode a0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineParser_SingleDashWordOptionMode, &a0))
        {
            sipCpp->setSingleDashWordOptionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_setSingleDashWordOptionMode, doc_QCommandLineParser_setSingleDashWordOptionMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addOption, "addOption(self, QCommandLineOption) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_addOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption* a0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addOption(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addOption, doc_QCommandLineParser_addOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addVersionOption, "addVersionOption(self) -> QCommandLineOption");

extern "C" {static PyObject *meth_QCommandLineParser_addVersionOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addVersionOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QCommandLineOption*sipRes;

            sipRes = new  ::QCommandLineOption(sipCpp->addVersionOption());

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addVersionOption, doc_QCommandLineParser_addVersionOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addHelpOption, "addHelpOption(self) -> QCommandLineOption");

extern "C" {static PyObject *meth_QCommandLineParser_addHelpOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addHelpOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QCommandLineOption*sipRes;

            sipRes = new  ::QCommandLineOption(sipCpp->addHelpOption());

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addHelpOption, doc_QCommandLineParser_addHelpOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_setApplicationDescription, "setApplicationDescription(self, str)");

extern "C" {static PyObject *meth_QCommandLineParser_setApplicationDescription(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_setApplicationDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setApplicationDescription(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_setApplicationDescription, doc_QCommandLineParser_setApplicationDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_applicationDescription, "applicationDescription(self) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_applicationDescription(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_applicationDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->applicationDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_applicationDescription, doc_QCommandLineParser_applicationDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addPositionalArgument, "addPositionalArgument(self, str, str, syntax: str = '')");

extern "C" {static PyObject *meth_QCommandLineParser_addPositionalArgument(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addPositionalArgument(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QCommandLineParser *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|J1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp->addPositionalArgument(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addPositionalArgument, doc_QCommandLineParser_addPositionalArgument);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_clearPositionalArguments, "clearPositionalArguments(self)");

extern "C" {static PyObject *meth_QCommandLineParser_clearPositionalArguments(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_clearPositionalArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            sipCpp->clearPositionalArguments();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_clearPositionalArguments, doc_QCommandLineParser_clearPositionalArguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_process, "process(self, Iterable[str])\n"
"process(self, QCoreApplication)");

extern "C" {static PyObject *meth_QCommandLineParser_process(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_process(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->process(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QCoreApplication* a0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCoreApplication, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->process(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_process, doc_QCommandLineParser_process);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_parse, "parse(self, Iterable[str]) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_parse(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_parse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->parse(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_parse, doc_QCommandLineParser_parse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_errorText, "errorText(self) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_errorText(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_errorText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_errorText, doc_QCommandLineParser_errorText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_isSet, "isSet(self, str) -> bool\n"
"isSet(self, QCommandLineOption) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_isSet(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_isSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isSet(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QCommandLineOption* a0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSet(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_isSet, doc_QCommandLineParser_isSet);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_value, "value(self, str) -> str\n"
"value(self, QCommandLineOption) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_value(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->value(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    {
        const  ::QCommandLineOption* a0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->value(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_value, doc_QCommandLineParser_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_values, "values(self, str) -> List[str]\n"
"values(self, QCommandLineOption) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineParser_values(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_values(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->values(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    {
        const  ::QCommandLineOption* a0;
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->values(*a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_values, doc_QCommandLineParser_values);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_positionalArguments, "positionalArguments(self) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineParser_positionalArguments(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_positionalArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->positionalArguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_positionalArguments, doc_QCommandLineParser_positionalArguments);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_optionNames, "optionNames(self) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineParser_optionNames(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_optionNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->optionNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_optionNames, doc_QCommandLineParser_optionNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_unknownOptionNames, "unknownOptionNames(self) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineParser_unknownOptionNames(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_unknownOptionNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->unknownOptionNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_unknownOptionNames, doc_QCommandLineParser_unknownOptionNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_showHelp, "showHelp(self, exitCode: int = 0)");

extern "C" {static PyObject *meth_QCommandLineParser_showHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_showHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
         ::QCommandLineParser *sipCpp;

        static const char *sipKwdList[] = {
            sipName_exitCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QCommandLineParser, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showHelp(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_showHelp, doc_QCommandLineParser_showHelp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_helpText, "helpText(self) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_helpText(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_helpText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->helpText());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_helpText, doc_QCommandLineParser_helpText);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_addOptions, "addOptions(self, Iterable[QCommandLineOption]) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_addOptions(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QCommandLineOption>* a0;
        int a0State = 0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QList_0100QCommandLineOption,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->addOptions(*a0);
            sipReleaseType(const_cast<QList< ::QCommandLineOption> *>(a0),sipType_QList_0100QCommandLineOption,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addOptions, doc_QCommandLineParser_addOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_showVersion, "showVersion(self)");

extern "C" {static PyObject *meth_QCommandLineParser_showVersion(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_showVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            sipCpp->showVersion();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_showVersion, doc_QCommandLineParser_showVersion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineParser_setOptionsAfterPositionalArgumentsMode, "setOptionsAfterPositionalArgumentsMode(self, QCommandLineParser.OptionsAfterPositionalArgumentsMode)");

extern "C" {static PyObject *meth_QCommandLineParser_setOptionsAfterPositionalArgumentsMode(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_setOptionsAfterPositionalArgumentsMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineParser::OptionsAfterPositionalArgumentsMode a0;
         ::QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineParser_OptionsAfterPositionalArgumentsMode, &a0))
        {
            sipCpp->setOptionsAfterPositionalArgumentsMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_setOptionsAfterPositionalArgumentsMode, doc_QCommandLineParser_setOptionsAfterPositionalArgumentsMode);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCommandLineParser(void *, int);}
static void release_QCommandLineParser(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCommandLineParser *>(sipCppV);
}


extern "C" {static void dealloc_QCommandLineParser(sipSimpleWrapper *);}
static void dealloc_QCommandLineParser(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCommandLineParser(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCommandLineParser(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCommandLineParser(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCommandLineParser *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QCommandLineParser();

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QCommandLineParser[] = {
    {SIP_MLNAME_CAST(sipName_addHelpOption), meth_QCommandLineParser_addHelpOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_addHelpOption)},
    {SIP_MLNAME_CAST(sipName_addOption), meth_QCommandLineParser_addOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_addOption)},
    {SIP_MLNAME_CAST(sipName_addOptions), meth_QCommandLineParser_addOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_addOptions)},
    {SIP_MLNAME_CAST(sipName_addPositionalArgument), SIP_MLMETH_CAST(meth_QCommandLineParser_addPositionalArgument), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommandLineParser_addPositionalArgument)},
    {SIP_MLNAME_CAST(sipName_addVersionOption), meth_QCommandLineParser_addVersionOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_addVersionOption)},
    {SIP_MLNAME_CAST(sipName_applicationDescription), meth_QCommandLineParser_applicationDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_applicationDescription)},
    {SIP_MLNAME_CAST(sipName_clearPositionalArguments), meth_QCommandLineParser_clearPositionalArguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_clearPositionalArguments)},
    {SIP_MLNAME_CAST(sipName_errorText), meth_QCommandLineParser_errorText, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_errorText)},
    {SIP_MLNAME_CAST(sipName_helpText), meth_QCommandLineParser_helpText, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_helpText)},
    {SIP_MLNAME_CAST(sipName_isSet), meth_QCommandLineParser_isSet, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_isSet)},
    {SIP_MLNAME_CAST(sipName_optionNames), meth_QCommandLineParser_optionNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_optionNames)},
    {SIP_MLNAME_CAST(sipName_parse), meth_QCommandLineParser_parse, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_parse)},
    {SIP_MLNAME_CAST(sipName_positionalArguments), meth_QCommandLineParser_positionalArguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_positionalArguments)},
    {SIP_MLNAME_CAST(sipName_process), meth_QCommandLineParser_process, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_process)},
    {SIP_MLNAME_CAST(sipName_setApplicationDescription), meth_QCommandLineParser_setApplicationDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_setApplicationDescription)},
    {SIP_MLNAME_CAST(sipName_setOptionsAfterPositionalArgumentsMode), meth_QCommandLineParser_setOptionsAfterPositionalArgumentsMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_setOptionsAfterPositionalArgumentsMode)},
    {SIP_MLNAME_CAST(sipName_setSingleDashWordOptionMode), meth_QCommandLineParser_setSingleDashWordOptionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_setSingleDashWordOptionMode)},
    {SIP_MLNAME_CAST(sipName_showHelp), SIP_MLMETH_CAST(meth_QCommandLineParser_showHelp), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommandLineParser_showHelp)},
    {SIP_MLNAME_CAST(sipName_showVersion), meth_QCommandLineParser_showVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_showVersion)},
    {SIP_MLNAME_CAST(sipName_unknownOptionNames), meth_QCommandLineParser_unknownOptionNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_unknownOptionNames)},
    {SIP_MLNAME_CAST(sipName_value), meth_QCommandLineParser_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_value)},
    {SIP_MLNAME_CAST(sipName_values), meth_QCommandLineParser_values, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_values)}
};

static sipEnumMemberDef enummembers_QCommandLineParser[] = {
    {sipName_ParseAsCompactedShortOptions, static_cast<int>( ::QCommandLineParser::ParseAsCompactedShortOptions), 42},
    {sipName_ParseAsLongOptions, static_cast<int>( ::QCommandLineParser::ParseAsLongOptions), 42},
    {sipName_ParseAsOptions, static_cast<int>( ::QCommandLineParser::ParseAsOptions), 41},
    {sipName_ParseAsPositionalArguments, static_cast<int>( ::QCommandLineParser::ParseAsPositionalArguments), 41},
};

PyDoc_STRVAR(doc_QCommandLineParser, "\1QCommandLineParser()");


static pyqt5ClassPluginDef plugin_QCommandLineParser = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCommandLineParser = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCommandLineParser,
        {SIP_NULLPTR},
        &plugin_QCommandLineParser
    },
    {
        sipNameNr_QCommandLineParser,
        {0, 0, 1},
        22, methods_QCommandLineParser,
        4, enummembers_QCommandLineParser,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCommandLineParser,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QCommandLineParser,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCommandLineParser,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QCommandLineParser,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 57455 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 57459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QCommandLineOption_Flags___hash__(PyObject *);}
static long slot_QCommandLineOption_Flags___hash__(PyObject *sipSelf)
{
     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QCommandLineOption::Flags::Int();
#line 57477 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QCommandLineOption_Flags___bool__(PyObject *);}
static int slot_QCommandLineOption_Flags___bool__(PyObject *sipSelf)
{
     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QCommandLineOption::Flags::Int() != 0);
#line 57502 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QCommandLineOption_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QCommandLineOption::Flags::Int() != a0->operator QCommandLineOption::Flags::Int());
#line 57532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QCommandLineOption::Flags *>(a0),sipType_QCommandLineOption_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QCommandLineOption_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QCommandLineOption_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QCommandLineOption::Flags::Int() == a0->operator QCommandLineOption::Flags::Int());
#line 57568 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QCommandLineOption::Flags *>(a0),sipType_QCommandLineOption_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QCommandLineOption_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QCommandLineOption_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QCommandLineOption::Flags(*sipCpp ^ a0);
#line 57607 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineOption::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QCommandLineOption_Flags, &a0, &a0State, &a1))
        {
             ::QCommandLineOption::Flags*sipRes;

            sipRes = new  ::QCommandLineOption::Flags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QCommandLineOption_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QCommandLineOption_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QCommandLineOption::Flags(*sipCpp | a0);
#line 57679 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___or__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineOption::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QCommandLineOption_Flags, &a0, &a0State, &a1))
        {
             ::QCommandLineOption::Flags*sipRes;

            sipRes = new  ::QCommandLineOption::Flags((*a0 | a1));
            sipReleaseType(a0,sipType_QCommandLineOption_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QCommandLineOption_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QCommandLineOption::Flags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___and__(PyObject *,PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineOption::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QCommandLineOption_Flags, &a0, &a0State, &a1))
        {
             ::QCommandLineOption::Flags*sipRes;

            sipRes = new  ::QCommandLineOption::Flags((*a0 & a1));
            sipReleaseType(a0,sipType_QCommandLineOption_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___invert__(PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___invert__(PyObject *sipSelf)
{
     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QCommandLineOption::Flags*sipRes;

            sipRes = new  ::QCommandLineOption::Flags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption_Flags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QCommandLineOption_Flags___int__(PyObject *);}
static PyObject *slot_QCommandLineOption_Flags___int__(PyObject *sipSelf)
{
     ::QCommandLineOption::Flags *sipCpp = reinterpret_cast< ::QCommandLineOption::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCommandLineOption_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCommandLineOption_Flags(void *, int);}
static void release_QCommandLineOption_Flags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCommandLineOption::Flags *>(sipCppV);
}


extern "C" {static void assign_QCommandLineOption_Flags(void *, SIP_SSIZE_T, void *);}
static void assign_QCommandLineOption_Flags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QCommandLineOption::Flags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QCommandLineOption::Flags *>(sipSrc);
}


extern "C" {static void *array_QCommandLineOption_Flags(SIP_SSIZE_T);}
static void *array_QCommandLineOption_Flags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QCommandLineOption::Flags[sipNrElem];
}


extern "C" {static void *copy_QCommandLineOption_Flags(const void *, SIP_SSIZE_T);}
static void *copy_QCommandLineOption_Flags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QCommandLineOption::Flags(reinterpret_cast<const  ::QCommandLineOption::Flags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QCommandLineOption_Flags(sipSimpleWrapper *);}
static void dealloc_QCommandLineOption_Flags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCommandLineOption_Flags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCommandLineOption_Flags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCommandLineOption_Flags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCommandLineOption::Flags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QCommandLineOption::Flags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QCommandLineOption::Flags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QCommandLineOption::Flags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QCommandLineOption_Flags, &a0, &a0State))
        {
            sipCpp = new  ::QCommandLineOption::Flags(*a0);
            sipReleaseType(const_cast< ::QCommandLineOption::Flags *>(a0),sipType_QCommandLineOption_Flags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QCommandLineOption_Flags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QCommandLineOption_Flags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QCommandLineOption::Flags **sipCppPtr = reinterpret_cast< ::QCommandLineOption::Flags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QCommandLineOption::Flags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QCommandLineOption_Flag)) ||
            sipCanConvertToType(sipPy, sipType_QCommandLineOption_Flags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QCommandLineOption_Flag)))
{
    *sipCppPtr = new QCommandLineOption::Flags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QCommandLineOption::Flags *>(sipConvertToType(sipPy, sipType_QCommandLineOption_Flags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 57947 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QCommandLineOption_Flags[] = {
    {(void *)slot_QCommandLineOption_Flags___hash__, hash_slot},
    {(void *)slot_QCommandLineOption_Flags___bool__, bool_slot},
    {(void *)slot_QCommandLineOption_Flags___ne__, ne_slot},
    {(void *)slot_QCommandLineOption_Flags___eq__, eq_slot},
    {(void *)slot_QCommandLineOption_Flags___ixor__, ixor_slot},
    {(void *)slot_QCommandLineOption_Flags___xor__, xor_slot},
    {(void *)slot_QCommandLineOption_Flags___ior__, ior_slot},
    {(void *)slot_QCommandLineOption_Flags___or__, or_slot},
    {(void *)slot_QCommandLineOption_Flags___iand__, iand_slot},
    {(void *)slot_QCommandLineOption_Flags___and__, and_slot},
    {(void *)slot_QCommandLineOption_Flags___invert__, invert_slot},
    {(void *)slot_QCommandLineOption_Flags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QCommandLineOption_Flags, "\1QCommandLineOption.Flags()\n"
"QCommandLineOption.Flags(Union[QCommandLineOption.Flags, QCommandLineOption.Flag])\n"
"QCommandLineOption.Flags(QCommandLineOption.Flags)");


static pyqt5ClassPluginDef plugin_QCommandLineOption_Flags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCommandLineOption_Flags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCommandLineOption__Flags,
        {SIP_NULLPTR},
        &plugin_QCommandLineOption_Flags
    },
    {
        sipNameNr_Flags,
        {37, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCommandLineOption_Flags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QCommandLineOption_Flags,
    init_type_QCommandLineOption_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCommandLineOption_Flags,
    assign_QCommandLineOption_Flags,
    array_QCommandLineOption_Flags,
    copy_QCommandLineOption_Flags,
    release_QCommandLineOption_Flags,
    SIP_NULLPTR,
    convertTo_QCommandLineOption_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 58035 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58039 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 58042 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 58045 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QCommandLineOption_swap, "swap(self, QCommandLineOption)");

extern "C" {static PyObject *meth_QCommandLineOption_swap(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineOption* a0;
         ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineOption, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_swap, doc_QCommandLineOption_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_names, "names(self) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineOption_names(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_names(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineOption, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->names());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_names, doc_QCommandLineOption_names);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_setValueName, "setValueName(self, str)");

extern "C" {static PyObject *meth_QCommandLineOption_setValueName(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_setValueName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineOption, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setValueName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_setValueName, doc_QCommandLineOption_setValueName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_valueName, "valueName(self) -> str");

extern "C" {static PyObject *meth_QCommandLineOption_valueName(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_valueName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineOption, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->valueName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_valueName, doc_QCommandLineOption_valueName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_setDescription, "setDescription(self, str)");

extern "C" {static PyObject *meth_QCommandLineOption_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineOption, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDescription(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_setDescription, doc_QCommandLineOption_setDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_description, "description(self) -> str");

extern "C" {static PyObject *meth_QCommandLineOption_description(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineOption, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->description());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_description, doc_QCommandLineOption_description);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_setDefaultValue, "setDefaultValue(self, str)");

extern "C" {static PyObject *meth_QCommandLineOption_setDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_setDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineOption, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDefaultValue(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_setDefaultValue, doc_QCommandLineOption_setDefaultValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_setDefaultValues, "setDefaultValues(self, Iterable[str])");

extern "C" {static PyObject *meth_QCommandLineOption_setDefaultValues(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_setDefaultValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineOption, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setDefaultValues(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_setDefaultValues, doc_QCommandLineOption_setDefaultValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_defaultValues, "defaultValues(self) -> List[str]");

extern "C" {static PyObject *meth_QCommandLineOption_defaultValues(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_defaultValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineOption, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->defaultValues());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_defaultValues, doc_QCommandLineOption_defaultValues);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_setHidden, "setHidden(self, bool)");

extern "C" {static PyObject *meth_QCommandLineOption_setHidden(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_setHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCommandLineOption, &sipCpp, &a0))
        {
            sipCpp->setHidden(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_setHidden, doc_QCommandLineOption_setHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_isHidden, "isHidden(self) -> bool");

extern "C" {static PyObject *meth_QCommandLineOption_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineOption, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_isHidden, doc_QCommandLineOption_isHidden);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_flags, "flags(self) -> QCommandLineOption.Flags");

extern "C" {static PyObject *meth_QCommandLineOption_flags(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineOption, &sipCpp))
        {
             ::QCommandLineOption::Flags*sipRes;

            sipRes = new  ::QCommandLineOption::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption_Flags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_flags, doc_QCommandLineOption_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCommandLineOption_setFlags, "setFlags(self, Union[QCommandLineOption.Flags, QCommandLineOption.Flag])");

extern "C" {static PyObject *meth_QCommandLineOption_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineOption_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCommandLineOption::Flags* a0;
        int a0State = 0;
         ::QCommandLineOption *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineOption, &sipCpp, sipType_QCommandLineOption_Flags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_QCommandLineOption_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineOption, sipName_setFlags, doc_QCommandLineOption_setFlags);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCommandLineOption(void *, int);}
static void release_QCommandLineOption(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCommandLineOption *>(sipCppV);
}


extern "C" {static void dealloc_QCommandLineOption(sipSimpleWrapper *);}
static void dealloc_QCommandLineOption(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCommandLineOption(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCommandLineOption(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCommandLineOption(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCommandLineOption *sipCpp = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QCommandLineOption(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QStringList,&a0, &a0State))
        {
            sipCpp = new  ::QCommandLineOption(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_valueName,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            sipCpp = new  ::QCommandLineOption(*a0,*a1,*a2,*a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_valueName,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|J1J1", sipType_QStringList,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            sipCpp = new  ::QCommandLineOption(*a0,*a1,*a2,*a3);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            return sipCpp;
        }
    }

    {
        const  ::QCommandLineOption* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QCommandLineOption, &a0))
        {
            sipCpp = new  ::QCommandLineOption(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QCommandLineOption[] = {
    {SIP_MLNAME_CAST(sipName_defaultValues), meth_QCommandLineOption_defaultValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_defaultValues)},
    {SIP_MLNAME_CAST(sipName_description), meth_QCommandLineOption_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_description)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QCommandLineOption_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_flags)},
    {SIP_MLNAME_CAST(sipName_isHidden), meth_QCommandLineOption_isHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_isHidden)},
    {SIP_MLNAME_CAST(sipName_names), meth_QCommandLineOption_names, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_names)},
    {SIP_MLNAME_CAST(sipName_setDefaultValue), meth_QCommandLineOption_setDefaultValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_setDefaultValue)},
    {SIP_MLNAME_CAST(sipName_setDefaultValues), meth_QCommandLineOption_setDefaultValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_setDefaultValues)},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QCommandLineOption_setDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_setDescription)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QCommandLineOption_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_setFlags)},
    {SIP_MLNAME_CAST(sipName_setHidden), meth_QCommandLineOption_setHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_setHidden)},
    {SIP_MLNAME_CAST(sipName_setValueName), meth_QCommandLineOption_setValueName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_setValueName)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QCommandLineOption_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_swap)},
    {SIP_MLNAME_CAST(sipName_valueName), meth_QCommandLineOption_valueName, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineOption_valueName)}
};

static sipEnumMemberDef enummembers_QCommandLineOption[] = {
    {sipName_HiddenFromHelp, static_cast<int>( ::QCommandLineOption::HiddenFromHelp), 38},
    {sipName_ShortOptionStyle, static_cast<int>( ::QCommandLineOption::ShortOptionStyle), 38},
};

PyDoc_STRVAR(doc_QCommandLineOption, "\1QCommandLineOption(str)\n"
"QCommandLineOption(Iterable[str])\n"
"QCommandLineOption(str, str, valueName: str = '', defaultValue: str = '')\n"
"QCommandLineOption(Iterable[str], str, valueName: str = '', defaultValue: str = '')\n"
"QCommandLineOption(QCommandLineOption)");


static pyqt5ClassPluginDef plugin_QCommandLineOption = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCommandLineOption = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCommandLineOption,
        {SIP_NULLPTR},
        &plugin_QCommandLineOption
    },
    {
        sipNameNr_QCommandLineOption,
        {0, 0, 1},
        13, methods_QCommandLineOption,
        2, enummembers_QCommandLineOption,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCommandLineOption,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QCommandLineOption,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCommandLineOption,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QCommandLineOption,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcollator.sip"
#include <qcollator.h>
#line 58640 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 58644 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcollator.sip"
#include <qcollator.h>
#line 58647 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58650 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58653 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QCollator_swap, "swap(self, QCollator)");

extern "C" {static PyObject *meth_QCollator_swap(PyObject *, PyObject *);}
static PyObject *meth_QCollator_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCollator* a0;
         ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCollator, &sipCpp, sipType_QCollator, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_swap, doc_QCollator_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_setLocale, "setLocale(self, QLocale)");

extern "C" {static PyObject *meth_QCollator_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QCollator_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocale* a0;
         ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCollator, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_setLocale, doc_QCollator_setLocale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_locale, "locale(self) -> QLocale");

extern "C" {static PyObject *meth_QCollator_locale(PyObject *, PyObject *);}
static PyObject *meth_QCollator_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCollator, &sipCpp))
        {
             ::QLocale*sipRes;

            sipRes = new  ::QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_locale, doc_QCollator_locale);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_caseSensitivity, "caseSensitivity(self) -> Qt.CaseSensitivity");

extern "C" {static PyObject *meth_QCollator_caseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCollator_caseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCollator, &sipCpp))
        {
             ::Qt::CaseSensitivity sipRes;

            sipRes = sipCpp->caseSensitivity();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_Qt_CaseSensitivity);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_caseSensitivity, doc_QCollator_caseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_setCaseSensitivity, "setCaseSensitivity(self, Qt.CaseSensitivity)");

extern "C" {static PyObject *meth_QCollator_setCaseSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCollator_setCaseSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::CaseSensitivity a0;
         ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCollator, &sipCpp, sipType_Qt_CaseSensitivity, &a0))
        {
            sipCpp->setCaseSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_setCaseSensitivity, doc_QCollator_setCaseSensitivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_setNumericMode, "setNumericMode(self, bool)");

extern "C" {static PyObject *meth_QCollator_setNumericMode(PyObject *, PyObject *);}
static PyObject *meth_QCollator_setNumericMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCollator, &sipCpp, &a0))
        {
            sipCpp->setNumericMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_setNumericMode, doc_QCollator_setNumericMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_numericMode, "numericMode(self) -> bool");

extern "C" {static PyObject *meth_QCollator_numericMode(PyObject *, PyObject *);}
static PyObject *meth_QCollator_numericMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCollator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->numericMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_numericMode, doc_QCollator_numericMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_setIgnorePunctuation, "setIgnorePunctuation(self, bool)");

extern "C" {static PyObject *meth_QCollator_setIgnorePunctuation(PyObject *, PyObject *);}
static PyObject *meth_QCollator_setIgnorePunctuation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QCollator, &sipCpp, &a0))
        {
            sipCpp->setIgnorePunctuation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_setIgnorePunctuation, doc_QCollator_setIgnorePunctuation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_ignorePunctuation, "ignorePunctuation(self) -> bool");

extern "C" {static PyObject *meth_QCollator_ignorePunctuation(PyObject *, PyObject *);}
static PyObject *meth_QCollator_ignorePunctuation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCollator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->ignorePunctuation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_ignorePunctuation, doc_QCollator_ignorePunctuation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_compare, "compare(self, str, str) -> int");

extern "C" {static PyObject *meth_QCollator_compare(PyObject *, PyObject *);}
static PyObject *meth_QCollator_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QCollator, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            sipRes = sipCpp->compare(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_compare, doc_QCollator_compare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollator_sortKey, "sortKey(self, str) -> QCollatorSortKey");

extern "C" {static PyObject *meth_QCollator_sortKey(PyObject *, PyObject *);}
static PyObject *meth_QCollator_sortKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QCollator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCollator, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QCollatorSortKey*sipRes;

            sipRes = new  ::QCollatorSortKey(sipCpp->sortKey(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QCollatorSortKey,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollator, sipName_sortKey, doc_QCollator_sortKey);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCollator(void *, int);}
static void release_QCollator(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCollator *>(sipCppV);
}


extern "C" {static void assign_QCollator(void *, SIP_SSIZE_T, void *);}
static void assign_QCollator(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QCollator *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QCollator *>(sipSrc);
}


extern "C" {static void *array_QCollator(SIP_SSIZE_T);}
static void *array_QCollator(SIP_SSIZE_T sipNrElem)
{
    return new  ::QCollator[sipNrElem];
}


extern "C" {static void *copy_QCollator(const void *, SIP_SSIZE_T);}
static void *copy_QCollator(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QCollator(reinterpret_cast<const  ::QCollator *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QCollator(sipSimpleWrapper *);}
static void dealloc_QCollator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCollator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCollator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCollator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCollator *sipCpp = SIP_NULLPTR;

    {
        const  ::QLocale& a0def = QLocale();
        const  ::QLocale* a0 = &a0def;

        static const char *sipKwdList[] = {
            sipName_locale,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J9", sipType_QLocale, &a0))
        {
            sipCpp = new  ::QCollator(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QCollator* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QCollator, &a0))
        {
            sipCpp = new  ::QCollator(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QCollator[] = {
    {SIP_MLNAME_CAST(sipName_caseSensitivity), meth_QCollator_caseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_caseSensitivity)},
    {SIP_MLNAME_CAST(sipName_compare), meth_QCollator_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_compare)},
    {SIP_MLNAME_CAST(sipName_ignorePunctuation), meth_QCollator_ignorePunctuation, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_ignorePunctuation)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QCollator_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_locale)},
    {SIP_MLNAME_CAST(sipName_numericMode), meth_QCollator_numericMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_numericMode)},
    {SIP_MLNAME_CAST(sipName_setCaseSensitivity), meth_QCollator_setCaseSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_setCaseSensitivity)},
    {SIP_MLNAME_CAST(sipName_setIgnorePunctuation), meth_QCollator_setIgnorePunctuation, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_setIgnorePunctuation)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QCollator_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_setLocale)},
    {SIP_MLNAME_CAST(sipName_setNumericMode), meth_QCollator_setNumericMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_setNumericMode)},
    {SIP_MLNAME_CAST(sipName_sortKey), meth_QCollator_sortKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_sortKey)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QCollator_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollator_swap)}
};

PyDoc_STRVAR(doc_QCollator, "\1QCollator(locale: QLocale = QLocale())\n"
"QCollator(QCollator)");


static pyqt5ClassPluginDef plugin_QCollator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCollator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCollator,
        {SIP_NULLPTR},
        &plugin_QCollator
    },
    {
        sipNameNr_QCollator,
        {0, 0, 1},
        11, methods_QCollator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCollator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QCollator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCollator,
    assign_QCollator,
    array_QCollator,
    copy_QCollator,
    release_QCollator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcollator.sip"
#include <qcollator.h>
#line 59127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



PyDoc_STRVAR(doc_QCollatorSortKey_swap, "swap(self, QCollatorSortKey)");

extern "C" {static PyObject *meth_QCollatorSortKey_swap(PyObject *, PyObject *);}
static PyObject *meth_QCollatorSortKey_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCollatorSortKey* a0;
         ::QCollatorSortKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCollatorSortKey, &sipCpp, sipType_QCollatorSortKey, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollatorSortKey, sipName_swap, doc_QCollatorSortKey_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCollatorSortKey_compare, "compare(self, QCollatorSortKey) -> int");

extern "C" {static PyObject *meth_QCollatorSortKey_compare(PyObject *, PyObject *);}
static PyObject *meth_QCollatorSortKey_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCollatorSortKey* a0;
        const  ::QCollatorSortKey *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCollatorSortKey, &sipCpp, sipType_QCollatorSortKey, &a0))
        {
            int sipRes;

            sipRes = sipCpp->compare(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCollatorSortKey, sipName_compare, doc_QCollatorSortKey_compare);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QCollatorSortKey___ge__(PyObject *,PyObject *);}
static PyObject *slot_QCollatorSortKey___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QCollatorSortKey *sipCpp = reinterpret_cast< ::QCollatorSortKey *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCollatorSortKey));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCollatorSortKey* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QCollatorSortKey, &a0))
        {
            bool sipRes;

            sipRes = !operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QCollatorSortKey, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QCollatorSortKey___lt__(PyObject *,PyObject *);}
static PyObject *slot_QCollatorSortKey___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QCollatorSortKey *sipCpp = reinterpret_cast< ::QCollatorSortKey *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCollatorSortKey));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCollatorSortKey* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QCollatorSortKey, &a0))
        {
            bool sipRes;

            sipRes = operator<((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QCollatorSortKey, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QCollatorSortKey(void *, int);}
static void release_QCollatorSortKey(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCollatorSortKey *>(sipCppV);
}


extern "C" {static void dealloc_QCollatorSortKey(sipSimpleWrapper *);}
static void dealloc_QCollatorSortKey(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCollatorSortKey(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCollatorSortKey(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCollatorSortKey(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCollatorSortKey *sipCpp = SIP_NULLPTR;

    {
        const  ::QCollatorSortKey* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QCollatorSortKey, &a0))
        {
            sipCpp = new  ::QCollatorSortKey(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QCollatorSortKey[] = {
    {(void *)slot_QCollatorSortKey___ge__, ge_slot},
    {(void *)slot_QCollatorSortKey___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QCollatorSortKey[] = {
    {SIP_MLNAME_CAST(sipName_compare), meth_QCollatorSortKey_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollatorSortKey_compare)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QCollatorSortKey_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCollatorSortKey_swap)}
};

PyDoc_STRVAR(doc_QCollatorSortKey, "\1QCollatorSortKey(QCollatorSortKey)");


static pyqt5ClassPluginDef plugin_QCollatorSortKey = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCollatorSortKey = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCollatorSortKey,
        {SIP_NULLPTR},
        &plugin_QCollatorSortKey
    },
    {
        sipNameNr_QCollatorSortKey,
        {0, 0, 1},
        2, methods_QCollatorSortKey,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCollatorSortKey,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QCollatorSortKey,
    init_type_QCollatorSortKey,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCollatorSortKey,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QCollatorSortKey,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 59366 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



extern "C" {static void assign_QChar(void *, SIP_SSIZE_T, void *);}
static void assign_QChar(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QChar *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QChar *>(sipSrc);
}


extern "C" {static void *array_QChar(SIP_SSIZE_T);}
static void *array_QChar(SIP_SSIZE_T sipNrElem)
{
    return new  ::QChar[sipNrElem];
}


extern "C" {static void *copy_QChar(const void *, SIP_SSIZE_T);}
static void *copy_QChar(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QChar(reinterpret_cast<const  ::QChar *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QChar(void *, int);}
static void release_QChar(void *ptr, int)
{
    delete reinterpret_cast< ::QChar *>(ptr);
}



extern "C" {static int convertTo_QChar(PyObject *, void **, int *, PyObject *);}
static int convertTo_QChar(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QChar **sipCppPtr = reinterpret_cast< ::QChar **>(sipCppPtrV);

#line 31 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qchar.sip"
if (sipIsErr == NULL)
#if PY_MAJOR_VERSION < 3
    return (PyString_Check(sipPy) || PyUnicode_Check(sipPy));
#else
    return PyUnicode_Check(sipPy);
#endif

#if PY_MAJOR_VERSION < 3
if (PyString_Check(sipPy))
{
    if (PyString_Size(sipPy) != 1)
    {
        PyErr_SetString(PyExc_ValueError, "string of length 1 expected");
        *sipIsErr = 1;
        return 0;
    }

    *sipCppPtr = new QChar(*PyString_AsString(sipPy));

    return sipGetState(sipTransferObj);
}
#endif

QString qs = qpycore_PyObject_AsQString(sipPy);

if (qs.size() != 1)
{
    PyErr_SetString(PyExc_ValueError, "string of length 1 expected");
    *sipIsErr = 1;
    return 0;
}

*sipCppPtr = new QChar(qs.at(0));

return sipGetState(sipTransferObj);
#line 59441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


extern "C" {static PyObject *convertFrom_QChar(void *, PyObject *);}
static PyObject *convertFrom_QChar(void *sipCppV, PyObject *)
{
    ::QChar *sipCpp = reinterpret_cast< ::QChar *>(sipCppV);

#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qchar.sip"
    return qpycore_PyObject_FromQString(QString(*sipCpp));
#line 59452 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QChar = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_QChar,     /* QChar */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QChar,
    array_QChar,
    copy_QChar,
    release_QChar,
    convertTo_QChar,
    convertFrom_QChar
};

#line 130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborstream.sip"
#include <qcborstream.h>
#line 59484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 59488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 59491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborcommon.sip"
#include <qcborcommon.h>
#line 59494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QCborStreamReader_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QCborStreamReader_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCborStreamReader, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_setDevice, doc_QCborStreamReader_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QCborStreamReader_device(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_device, doc_QCborStreamReader_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_addData, "addData(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QCborStreamReader_addData(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_addData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCborStreamReader, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->addData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_addData, doc_QCborStreamReader_addData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_reparse, "reparse(self)");

extern "C" {static PyObject *meth_QCborStreamReader_reparse(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_reparse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            sipCpp->reparse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_reparse, doc_QCborStreamReader_reparse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_clear, "clear(self)");

extern "C" {static PyObject *meth_QCborStreamReader_clear(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_clear, doc_QCborStreamReader_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_reset, "reset(self)");

extern "C" {static PyObject *meth_QCborStreamReader_reset(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_reset, doc_QCborStreamReader_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_lastError, "lastError(self) -> QCborError");

extern "C" {static PyObject *meth_QCborStreamReader_lastError(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::QCborError*sipRes;

            sipRes = new  ::QCborError(sipCpp->lastError());

            return sipConvertFromNewType(sipRes,sipType_QCborError,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_lastError, doc_QCborStreamReader_lastError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_currentOffset, "currentOffset(self) -> int");

extern "C" {static PyObject *meth_QCborStreamReader_currentOffset(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_currentOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->currentOffset();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_currentOffset, doc_QCborStreamReader_currentOffset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isValid(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isValid, doc_QCborStreamReader_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_containerDepth, "containerDepth(self) -> int");

extern "C" {static PyObject *meth_QCborStreamReader_containerDepth(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_containerDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->containerDepth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_containerDepth, doc_QCborStreamReader_containerDepth);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_parentContainerType, "parentContainerType(self) -> QCborStreamReader.Type");

extern "C" {static PyObject *meth_QCborStreamReader_parentContainerType(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_parentContainerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::QCborStreamReader::Type sipRes;

            sipRes = sipCpp->parentContainerType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCborStreamReader_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_parentContainerType, doc_QCborStreamReader_parentContainerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_hasNext, "hasNext(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_hasNext(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_hasNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasNext();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_hasNext, doc_QCborStreamReader_hasNext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_next, "next(self, maxRecursion: int = 10000) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_next(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_next(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 10000;
         ::QCborStreamReader *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxRecursion,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QCborStreamReader, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->next(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_next, doc_QCborStreamReader_next);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_type, "type(self) -> QCborStreamReader.Type");

extern "C" {static PyObject *meth_QCborStreamReader_type(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::QCborStreamReader::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCborStreamReader_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_type, doc_QCborStreamReader_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isUnsignedInteger, "isUnsignedInteger(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isUnsignedInteger(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isUnsignedInteger(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUnsignedInteger();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isUnsignedInteger, doc_QCborStreamReader_isUnsignedInteger);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isNegativeInteger, "isNegativeInteger(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isNegativeInteger(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isNegativeInteger(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNegativeInteger();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isNegativeInteger, doc_QCborStreamReader_isNegativeInteger);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isInteger, "isInteger(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isInteger(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isInteger(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInteger();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isInteger, doc_QCborStreamReader_isInteger);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isByteArray, "isByteArray(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isByteArray(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isByteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isByteArray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isByteArray, doc_QCborStreamReader_isByteArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isString, "isString(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isString(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isString();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isString, doc_QCborStreamReader_isString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isArray, "isArray(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isArray(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isArray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isArray, doc_QCborStreamReader_isArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isMap, "isMap(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isMap(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isMap, doc_QCborStreamReader_isMap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isTag, "isTag(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isTag(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isTag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTag();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isTag, doc_QCborStreamReader_isTag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isSimpleType, "isSimpleType(self) -> bool\n"
"isSimpleType(self, QCborSimpleType) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isSimpleType(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isSimpleType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSimpleType();

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QCborSimpleType a0;
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCborStreamReader, &sipCpp, sipType_QCborSimpleType, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSimpleType(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isSimpleType, doc_QCborStreamReader_isSimpleType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isFloat16, "isFloat16(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isFloat16(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isFloat16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFloat16();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isFloat16, doc_QCborStreamReader_isFloat16);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isFloat, "isFloat(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isFloat(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFloat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isFloat, doc_QCborStreamReader_isFloat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isDouble, "isDouble(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isDouble(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDouble();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isDouble, doc_QCborStreamReader_isDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isInvalid, "isInvalid(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isInvalid(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isInvalid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInvalid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isInvalid, doc_QCborStreamReader_isInvalid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isFalse, "isFalse(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isFalse(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isFalse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFalse();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isFalse, doc_QCborStreamReader_isFalse);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isTrue, "isTrue(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isTrue(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isTrue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTrue();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isTrue, doc_QCborStreamReader_isTrue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isBool, "isBool(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isBool(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBool();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isBool, doc_QCborStreamReader_isBool);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isNull(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isNull, doc_QCborStreamReader_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isUndefined, "isUndefined(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isUndefined(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isUndefined(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndefined();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isUndefined, doc_QCborStreamReader_isUndefined);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isLengthKnown, "isLengthKnown(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isLengthKnown(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isLengthKnown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLengthKnown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isLengthKnown, doc_QCborStreamReader_isLengthKnown);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_length, "length(self) -> int");

extern "C" {static PyObject *meth_QCborStreamReader_length(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::quint64 sipRes;

            sipRes = sipCpp->length();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_length, doc_QCborStreamReader_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_isContainer, "isContainer(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_isContainer(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_isContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isContainer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_isContainer, doc_QCborStreamReader_isContainer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_enterContainer, "enterContainer(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_enterContainer(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_enterContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->enterContainer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_enterContainer, doc_QCborStreamReader_enterContainer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_leaveContainer, "leaveContainer(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_leaveContainer(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_leaveContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->leaveContainer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_leaveContainer, doc_QCborStreamReader_leaveContainer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_readString, "readString(self) -> Tuple[str, QCborStreamReader.StringResultCode]");

extern "C" {static PyObject *meth_QCborStreamReader_readString(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_readString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 204 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborstream.sip"
        QCborStreamReader::StringResult<QString> res = sipCpp->readString();
        
        QString *qs = new QString;
        if (res.status != QCborStreamReader::Error)
            *qs = res.data;
        
        sipRes = sipBuildResult(NULL, "NF", qs, sipType_QString, NULL, res.status, sipType_QCborStreamReader_StringResultCode);
#line 60576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_readString, doc_QCborStreamReader_readString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_readByteArray, "readByteArray(self) -> Tuple[QByteArray, QCborStreamReader.StringResultCode]");

extern "C" {static PyObject *meth_QCborStreamReader_readByteArray(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_readByteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 215 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborstream.sip"
        QCborStreamReader::StringResult<QByteArray> res = sipCpp->readByteArray();
        
        QByteArray *qba = new QByteArray;
        if (res.status != QCborStreamReader::Error)
            *qba = res.data;
        
        sipRes = sipBuildResult(NULL, "NF", qba, sipType_QByteArray, NULL, res.status, sipType_QCborStreamReader_StringResultCode);
#line 60612 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_readByteArray, doc_QCborStreamReader_readByteArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_toBool, "toBool(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamReader_toBool(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_toBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->toBool();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_toBool, doc_QCborStreamReader_toBool);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_toUnsignedInteger, "toUnsignedInteger(self) -> int");

extern "C" {static PyObject *meth_QCborStreamReader_toUnsignedInteger(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_toUnsignedInteger(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::quint64 sipRes;

            sipRes = sipCpp->toUnsignedInteger();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_toUnsignedInteger, doc_QCborStreamReader_toUnsignedInteger);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_toSimpleType, "toSimpleType(self) -> QCborSimpleType");

extern "C" {static PyObject *meth_QCborStreamReader_toSimpleType(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_toSimpleType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::QCborSimpleType sipRes;

            sipRes = sipCpp->toSimpleType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCborSimpleType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_toSimpleType, doc_QCborStreamReader_toSimpleType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_toDouble, "toDouble(self) -> float");

extern "C" {static PyObject *meth_QCborStreamReader_toDouble(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_toDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->toDouble();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_toDouble, doc_QCborStreamReader_toDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamReader_toInteger, "toInteger(self) -> int");

extern "C" {static PyObject *meth_QCborStreamReader_toInteger(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamReader_toInteger(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamReader, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->toInteger();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamReader, sipName_toInteger, doc_QCborStreamReader_toInteger);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QCborStreamReader___len__(PyObject *);}
static SIP_SSIZE_T slot_QCborStreamReader___len__(PyObject *sipSelf)
{
     ::QCborStreamReader *sipCpp = reinterpret_cast< ::QCborStreamReader *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QCborStreamReader));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->length();
#line 60780 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCborStreamReader(void *, int);}
static void release_QCborStreamReader(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCborStreamReader *>(sipCppV);
}


extern "C" {static void dealloc_QCborStreamReader(sipSimpleWrapper *);}
static void dealloc_QCborStreamReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCborStreamReader(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCborStreamReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCborStreamReader(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCborStreamReader *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QCborStreamReader();

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QCborStreamReader(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new  ::QCborStreamReader(a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QCborStreamReader[] = {
    {(void *)slot_QCborStreamReader___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QCborStreamReader[] = {
    {SIP_MLNAME_CAST(sipName_addData), meth_QCborStreamReader_addData, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_addData)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QCborStreamReader_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_clear)},
    {SIP_MLNAME_CAST(sipName_containerDepth), meth_QCborStreamReader_containerDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_containerDepth)},
    {SIP_MLNAME_CAST(sipName_currentOffset), meth_QCborStreamReader_currentOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_currentOffset)},
    {SIP_MLNAME_CAST(sipName_device), meth_QCborStreamReader_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_device)},
    {SIP_MLNAME_CAST(sipName_enterContainer), meth_QCborStreamReader_enterContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_enterContainer)},
    {SIP_MLNAME_CAST(sipName_hasNext), meth_QCborStreamReader_hasNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_hasNext)},
    {SIP_MLNAME_CAST(sipName_isArray), meth_QCborStreamReader_isArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isArray)},
    {SIP_MLNAME_CAST(sipName_isBool), meth_QCborStreamReader_isBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isBool)},
    {SIP_MLNAME_CAST(sipName_isByteArray), meth_QCborStreamReader_isByteArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isByteArray)},
    {SIP_MLNAME_CAST(sipName_isContainer), meth_QCborStreamReader_isContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isContainer)},
    {SIP_MLNAME_CAST(sipName_isDouble), meth_QCborStreamReader_isDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isDouble)},
    {SIP_MLNAME_CAST(sipName_isFalse), meth_QCborStreamReader_isFalse, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isFalse)},
    {SIP_MLNAME_CAST(sipName_isFloat), meth_QCborStreamReader_isFloat, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isFloat)},
    {SIP_MLNAME_CAST(sipName_isFloat16), meth_QCborStreamReader_isFloat16, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isFloat16)},
    {SIP_MLNAME_CAST(sipName_isInteger), meth_QCborStreamReader_isInteger, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isInteger)},
    {SIP_MLNAME_CAST(sipName_isInvalid), meth_QCborStreamReader_isInvalid, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isInvalid)},
    {SIP_MLNAME_CAST(sipName_isLengthKnown), meth_QCborStreamReader_isLengthKnown, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isLengthKnown)},
    {SIP_MLNAME_CAST(sipName_isMap), meth_QCborStreamReader_isMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isMap)},
    {SIP_MLNAME_CAST(sipName_isNegativeInteger), meth_QCborStreamReader_isNegativeInteger, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isNegativeInteger)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QCborStreamReader_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isNull)},
    {SIP_MLNAME_CAST(sipName_isSimpleType), meth_QCborStreamReader_isSimpleType, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isSimpleType)},
    {SIP_MLNAME_CAST(sipName_isString), meth_QCborStreamReader_isString, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isString)},
    {SIP_MLNAME_CAST(sipName_isTag), meth_QCborStreamReader_isTag, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isTag)},
    {SIP_MLNAME_CAST(sipName_isTrue), meth_QCborStreamReader_isTrue, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isTrue)},
    {SIP_MLNAME_CAST(sipName_isUndefined), meth_QCborStreamReader_isUndefined, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isUndefined)},
    {SIP_MLNAME_CAST(sipName_isUnsignedInteger), meth_QCborStreamReader_isUnsignedInteger, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isUnsignedInteger)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QCborStreamReader_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_isValid)},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QCborStreamReader_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_lastError)},
    {SIP_MLNAME_CAST(sipName_leaveContainer), meth_QCborStreamReader_leaveContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_leaveContainer)},
    {SIP_MLNAME_CAST(sipName_length), meth_QCborStreamReader_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_length)},
    {SIP_MLNAME_CAST(sipName_next), SIP_MLMETH_CAST(meth_QCborStreamReader_next), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCborStreamReader_next)},
    {SIP_MLNAME_CAST(sipName_parentContainerType), meth_QCborStreamReader_parentContainerType, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_parentContainerType)},
    {SIP_MLNAME_CAST(sipName_readByteArray), meth_QCborStreamReader_readByteArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_readByteArray)},
    {SIP_MLNAME_CAST(sipName_readString), meth_QCborStreamReader_readString, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_readString)},
    {SIP_MLNAME_CAST(sipName_reparse), meth_QCborStreamReader_reparse, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_reparse)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QCborStreamReader_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_reset)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QCborStreamReader_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_setDevice)},
    {SIP_MLNAME_CAST(sipName_toBool), meth_QCborStreamReader_toBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_toBool)},
    {SIP_MLNAME_CAST(sipName_toDouble), meth_QCborStreamReader_toDouble, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_toDouble)},
    {SIP_MLNAME_CAST(sipName_toInteger), meth_QCborStreamReader_toInteger, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_toInteger)},
    {SIP_MLNAME_CAST(sipName_toSimpleType), meth_QCborStreamReader_toSimpleType, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_toSimpleType)},
    {SIP_MLNAME_CAST(sipName_toUnsignedInteger), meth_QCborStreamReader_toUnsignedInteger, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_toUnsignedInteger)},
    {SIP_MLNAME_CAST(sipName_type), meth_QCborStreamReader_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamReader_type)}
};

static sipEnumMemberDef enummembers_QCborStreamReader[] = {
    {sipName_Array, static_cast<int>( ::QCborStreamReader::Array), 31},
    {sipName_ByteArray, static_cast<int>( ::QCborStreamReader::ByteArray), 31},
    {sipName_ByteString, static_cast<int>( ::QCborStreamReader::ByteString), 31},
    {sipName_Double, static_cast<int>( ::QCborStreamReader::Double), 31},
    {sipName_EndOfString, static_cast<int>( ::QCborStreamReader::EndOfString), 30},
    {sipName_Error, static_cast<int>( ::QCborStreamReader::Error), 30},
    {sipName_Float, static_cast<int>( ::QCborStreamReader::Float), 31},
    {sipName_Float16, static_cast<int>( ::QCborStreamReader::Float16), 31},
    {sipName_HalfFloat, static_cast<int>( ::QCborStreamReader::HalfFloat), 31},
    {sipName_Invalid, static_cast<int>( ::QCborStreamReader::Invalid), 31},
    {sipName_Map, static_cast<int>( ::QCborStreamReader::Map), 31},
    {sipName_NegativeInteger, static_cast<int>( ::QCborStreamReader::NegativeInteger), 31},
    {sipName_Ok, static_cast<int>( ::QCborStreamReader::Ok), 30},
    {sipName_SimpleType, static_cast<int>( ::QCborStreamReader::SimpleType), 31},
    {sipName_String, static_cast<int>( ::QCborStreamReader::String), 31},
    {sipName_Tag, static_cast<int>( ::QCborStreamReader::Tag), 31},
    {sipName_TextString, static_cast<int>( ::QCborStreamReader::TextString), 31},
    {sipName_UnsignedInteger, static_cast<int>( ::QCborStreamReader::UnsignedInteger), 31},
};

PyDoc_STRVAR(doc_QCborStreamReader, "\1QCborStreamReader()\n"
"QCborStreamReader(Union[QByteArray, bytes, bytearray])\n"
"QCborStreamReader(QIODevice)");


static pyqt5ClassPluginDef plugin_QCborStreamReader = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCborStreamReader = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCborStreamReader,
        {SIP_NULLPTR},
        &plugin_QCborStreamReader
    },
    {
        sipNameNr_QCborStreamReader,
        {0, 0, 1},
        44, methods_QCborStreamReader,
        18, enummembers_QCborStreamReader,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCborStreamReader,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QCborStreamReader,
    init_type_QCborStreamReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCborStreamReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QCborStreamReader,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborstream.sip"
#include <qcborstream.h>
#line 60992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 60996 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61002 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QCborStreamWriter_setDevice, "setDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QCborStreamWriter_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCborStreamWriter, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_setDevice, doc_QCborStreamWriter_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamWriter_device, "device(self) -> QIODevice");

extern "C" {static PyObject *meth_QCborStreamWriter_device(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamWriter, &sipCpp))
        {
             ::QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_device, doc_QCborStreamWriter_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamWriter_append, "append(self, QCborSimpleType)\n"
"append(self, QCborKnownTags)\n"
"append(self, str)\n"
"append(self, Union[QByteArray, bytes, bytearray])\n"
"append(self, bool)\n"
"append(self, float)\n"
"append(self, int)");

extern "C" {static PyObject *meth_QCborStreamWriter_append(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborSimpleType a0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCborStreamWriter, &sipCpp, sipType_QCborSimpleType, &a0))
        {
            sipCpp->append(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QCborKnownTags a0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCborStreamWriter, &sipCpp, sipType_QCborKnownTags, &a0))
        {
            sipCpp->append(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCborStreamWriter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->append(a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCborStreamWriter, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->append(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        bool a0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXb", &sipSelf, sipType_QCborStreamWriter, &sipCpp, &a0))
        {
            sipCpp->append(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        double a0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXd", &sipSelf, sipType_QCborStreamWriter, &sipCpp, &a0))
        {
#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborstream.sip"
        // Use the smallest type without losing precision.
        
        qfloat16 a0_16 = a0;
        
        if (qIsNaN(a0) || a0_16 == a0)
        {
            sipCpp->append(a0_16);
        }
        else
        {
            float a0_float = a0;
        
            if (a0_float == a0)
                sipCpp->append(a0_float);
            else
                sipCpp->append(a0);
        }
#line 61174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        PyObject * a0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QCborStreamWriter, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborstream.sip"
        #if PY_MAJOR_VERSION < 3
        if (PyLong_Check(a0))
        #endif
        {
            static PyObject *zero = 0;
        
            if (!zero)
                zero = PyLong_FromLong(0);
        
            if (PyObject_RichCompareBool(a0, zero, Py_LT) > 0)
            {
                PyErr_Clear();
                qint64 val = sipLong_AsLongLong(a0);
        
                if (PyErr_Occurred())
                    sipError = sipErrorFail;
                else
                    sipCpp->append(val);
            }
            else
            {
                PyErr_Clear();
                quint64 val = sipLong_AsUnsignedLongLong(a0);
        
                if (PyErr_Occurred())
                    sipError = sipErrorFail;
                else
                    sipCpp->append(val);
            }
        }
        #if PY_MAJOR_VERSION < 3
        else if (PyInt_Check(a0))
        {
            PyErr_Clear();
            long val = PyInt_AsLong(a0);
        
            if (PyErr_Occurred())
                sipError = sipErrorFail;
            else if (val < 0)
                sipCpp->append((qint64)val);
            else
                sipCpp->append((quint64)val);
        }
        #endif
#line 61234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_append, doc_QCborStreamWriter_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamWriter_appendNull, "appendNull(self)");

extern "C" {static PyObject *meth_QCborStreamWriter_appendNull(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_appendNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamWriter, &sipCpp))
        {
            sipCpp->appendNull();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_appendNull, doc_QCborStreamWriter_appendNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamWriter_appendUndefined, "appendUndefined(self)");

extern "C" {static PyObject *meth_QCborStreamWriter_appendUndefined(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_appendUndefined(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamWriter, &sipCpp))
        {
            sipCpp->appendUndefined();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_appendUndefined, doc_QCborStreamWriter_appendUndefined);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamWriter_startArray, "startArray(self)\n"
"startArray(self, int)");

extern "C" {static PyObject *meth_QCborStreamWriter_startArray(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_startArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamWriter, &sipCpp))
        {
            sipCpp->startArray();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::quint64 a0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bo", &sipSelf, sipType_QCborStreamWriter, &sipCpp, &a0))
        {
            sipCpp->startArray(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_startArray, doc_QCborStreamWriter_startArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamWriter_endArray, "endArray(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamWriter_endArray(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_endArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamWriter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->endArray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_endArray, doc_QCborStreamWriter_endArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamWriter_startMap, "startMap(self)\n"
"startMap(self, int)");

extern "C" {static PyObject *meth_QCborStreamWriter_startMap(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_startMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamWriter, &sipCpp))
        {
            sipCpp->startMap();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::quint64 a0;
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bo", &sipSelf, sipType_QCborStreamWriter, &sipCpp, &a0))
        {
            sipCpp->startMap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_startMap, doc_QCborStreamWriter_startMap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborStreamWriter_endMap, "endMap(self) -> bool");

extern "C" {static PyObject *meth_QCborStreamWriter_endMap(PyObject *, PyObject *);}
static PyObject *meth_QCborStreamWriter_endMap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QCborStreamWriter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborStreamWriter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->endMap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborStreamWriter, sipName_endMap, doc_QCborStreamWriter_endMap);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCborStreamWriter(void *, int);}
static void release_QCborStreamWriter(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCborStreamWriter *>(sipCppV);
}


extern "C" {static void dealloc_QCborStreamWriter(sipSimpleWrapper *);}
static void dealloc_QCborStreamWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCborStreamWriter(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCborStreamWriter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCborStreamWriter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCborStreamWriter *sipCpp = SIP_NULLPTR;

    {
         ::QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new  ::QCborStreamWriter(a0);

            return sipCpp;
        }
    }

    {
         ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J0", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QCborStreamWriter(a0);
            sipReleaseType(a0,sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QCborStreamWriter[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QCborStreamWriter_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_append)},
    {SIP_MLNAME_CAST(sipName_appendNull), meth_QCborStreamWriter_appendNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_appendNull)},
    {SIP_MLNAME_CAST(sipName_appendUndefined), meth_QCborStreamWriter_appendUndefined, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_appendUndefined)},
    {SIP_MLNAME_CAST(sipName_device), meth_QCborStreamWriter_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_device)},
    {SIP_MLNAME_CAST(sipName_endArray), meth_QCborStreamWriter_endArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_endArray)},
    {SIP_MLNAME_CAST(sipName_endMap), meth_QCborStreamWriter_endMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_endMap)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QCborStreamWriter_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_setDevice)},
    {SIP_MLNAME_CAST(sipName_startArray), meth_QCborStreamWriter_startArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_startArray)},
    {SIP_MLNAME_CAST(sipName_startMap), meth_QCborStreamWriter_startMap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborStreamWriter_startMap)}
};

PyDoc_STRVAR(doc_QCborStreamWriter, "\1QCborStreamWriter(QIODevice)\n"
"QCborStreamWriter(Union[QByteArray, bytes, bytearray])");


static pyqt5ClassPluginDef plugin_QCborStreamWriter = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCborStreamWriter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCborStreamWriter,
        {SIP_NULLPTR},
        &plugin_QCborStreamWriter
    },
    {
        sipNameNr_QCborStreamWriter,
        {0, 0, 1},
        9, methods_QCborStreamWriter,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCborStreamWriter,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QCborStreamWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCborStreamWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QCborStreamWriter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborcommon.sip"
#include <qcborcommon.h>
#line 61578 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61582 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QCborError_code, "code(self) -> QCborError.Code");

extern "C" {static PyObject *meth_QCborError_code(PyObject *, PyObject *);}
static PyObject *meth_QCborError_code(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborError, &sipCpp))
        {
             ::QCborError::Code sipRes =  ::QCborError::UnknownError;

#line 73 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcborcommon.sip"
    sipRes = sipCpp->c;
#line 61602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QCborError_Code);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborError, sipName_code, doc_QCborError_code);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QCborError_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QCborError_toString(PyObject *, PyObject *);}
static PyObject *meth_QCborError_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QCborError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCborError, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCborError, sipName_toString, doc_QCborError_toString);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCborError(void *, int);}
static void release_QCborError(void *sipCppV, int)
{
    delete reinterpret_cast< ::QCborError *>(sipCppV);
}


extern "C" {static void assign_QCborError(void *, SIP_SSIZE_T, void *);}
static void assign_QCborError(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QCborError *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QCborError *>(sipSrc);
}


extern "C" {static void *array_QCborError(SIP_SSIZE_T);}
static void *array_QCborError(SIP_SSIZE_T sipNrElem)
{
    return new  ::QCborError[sipNrElem];
}


extern "C" {static void *copy_QCborError(const void *, SIP_SSIZE_T);}
static void *copy_QCborError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QCborError(reinterpret_cast<const  ::QCborError *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QCborError(sipSimpleWrapper *);}
static void dealloc_QCborError(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCborError(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QCborError(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCborError(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QCborError *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QCborError();

            return sipCpp;
        }
    }

    {
        const  ::QCborError* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QCborError, &a0))
        {
            sipCpp = new  ::QCborError(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QCborError[] = {
    {SIP_MLNAME_CAST(sipName_code), meth_QCborError_code, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborError_code)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QCborError_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QCborError_toString)}
};

static sipEnumMemberDef enummembers_QCborError[] = {
    {sipName_AdvancePastEnd, static_cast<int>( ::QCborError::AdvancePastEnd), 26},
    {sipName_DataTooLarge, static_cast<int>( ::QCborError::DataTooLarge), 26},
    {sipName_EndOfFile, static_cast<int>( ::QCborError::EndOfFile), 26},
    {sipName_GarbageAtEnd, static_cast<int>( ::QCborError::GarbageAtEnd), 26},
    {sipName_IllegalNumber, static_cast<int>( ::QCborError::IllegalNumber), 26},
    {sipName_IllegalSimpleType, static_cast<int>( ::QCborError::IllegalSimpleType), 26},
    {sipName_IllegalType, static_cast<int>( ::QCborError::IllegalType), 26},
    {sipName_InputOutputError, static_cast<int>( ::QCborError::InputOutputError), 26},
    {sipName_InvalidUtf8String, static_cast<int>( ::QCborError::InvalidUtf8String), 26},
    {sipName_NestingTooDeep, static_cast<int>( ::QCborError::NestingTooDeep), 26},
    {sipName_NoError, static_cast<int>( ::QCborError::NoError), 26},
    {sipName_UnexpectedBreak, static_cast<int>( ::QCborError::UnexpectedBreak), 26},
    {sipName_UnknownError, static_cast<int>( ::QCborError::UnknownError), 26},
    {sipName_UnknownType, static_cast<int>( ::QCborError::UnknownType), 26},
    {sipName_UnsupportedType, static_cast<int>( ::QCborError::UnsupportedType), 26},
};

PyDoc_STRVAR(doc_QCborError, "\1QCborError()\n"
"QCborError(QCborError)");


static pyqt5ClassPluginDef plugin_QCborError = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QCborError = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QCborError,
        {SIP_NULLPTR},
        &plugin_QCborError
    },
    {
        sipNameNr_QCborError,
        {0, 0, 1},
        2, methods_QCborError,
        15, enummembers_QCborError,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QCborError,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QCborError,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QCborError,
    assign_QCborError,
    array_QCborError,
    copy_QCborError,
    release_QCborError,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearraymatcher.sip"
#include <qbytearraymatcher.h>
#line 61799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 61803 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QByteArrayMatcher_setPattern, "setPattern(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QByteArrayMatcher_setPattern(PyObject *, PyObject *);}
static PyObject *meth_QByteArrayMatcher_setPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QByteArrayMatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArrayMatcher, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setPattern(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArrayMatcher, sipName_setPattern, doc_QByteArrayMatcher_setPattern);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArrayMatcher_indexIn, "indexIn(self, Union[QByteArray, bytes, bytearray], from_: int = 0) -> int");

extern "C" {static PyObject *meth_QByteArrayMatcher_indexIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArrayMatcher_indexIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1 = 0;
        const  ::QByteArrayMatcher *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QByteArrayMatcher, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexIn(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArrayMatcher, sipName_indexIn, doc_QByteArrayMatcher_indexIn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArrayMatcher_pattern, "pattern(self) -> QByteArray");

extern "C" {static PyObject *meth_QByteArrayMatcher_pattern(PyObject *, PyObject *);}
static PyObject *meth_QByteArrayMatcher_pattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArrayMatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArrayMatcher, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->pattern());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArrayMatcher, sipName_pattern, doc_QByteArrayMatcher_pattern);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QByteArrayMatcher(void *, int);}
static void release_QByteArrayMatcher(void *sipCppV, int)
{
    delete reinterpret_cast< ::QByteArrayMatcher *>(sipCppV);
}


extern "C" {static void assign_QByteArrayMatcher(void *, SIP_SSIZE_T, void *);}
static void assign_QByteArrayMatcher(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QByteArrayMatcher *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QByteArrayMatcher *>(sipSrc);
}


extern "C" {static void *array_QByteArrayMatcher(SIP_SSIZE_T);}
static void *array_QByteArrayMatcher(SIP_SSIZE_T sipNrElem)
{
    return new  ::QByteArrayMatcher[sipNrElem];
}


extern "C" {static void *copy_QByteArrayMatcher(const void *, SIP_SSIZE_T);}
static void *copy_QByteArrayMatcher(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QByteArrayMatcher(reinterpret_cast<const  ::QByteArrayMatcher *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QByteArrayMatcher(sipSimpleWrapper *);}
static void dealloc_QByteArrayMatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QByteArrayMatcher(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QByteArrayMatcher(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QByteArrayMatcher(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QByteArrayMatcher *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QByteArrayMatcher();

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QByteArrayMatcher(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QByteArrayMatcher* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QByteArrayMatcher, &a0))
        {
            sipCpp = new  ::QByteArrayMatcher(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QByteArrayMatcher[] = {
    {SIP_MLNAME_CAST(sipName_indexIn), SIP_MLMETH_CAST(meth_QByteArrayMatcher_indexIn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArrayMatcher_indexIn)},
    {SIP_MLNAME_CAST(sipName_pattern), meth_QByteArrayMatcher_pattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArrayMatcher_pattern)},
    {SIP_MLNAME_CAST(sipName_setPattern), meth_QByteArrayMatcher_setPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArrayMatcher_setPattern)}
};

PyDoc_STRVAR(doc_QByteArrayMatcher, "\1QByteArrayMatcher()\n"
"QByteArrayMatcher(Union[QByteArray, bytes, bytearray])\n"
"QByteArrayMatcher(QByteArrayMatcher)");


static pyqt5ClassPluginDef plugin_QByteArrayMatcher = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QByteArrayMatcher = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QByteArrayMatcher,
        {SIP_NULLPTR},
        &plugin_QByteArrayMatcher
    },
    {
        sipNameNr_QByteArrayMatcher,
        {0, 0, 1},
        3, methods_QByteArrayMatcher,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QByteArrayMatcher,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QByteArrayMatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QByteArrayMatcher,
    assign_QByteArrayMatcher,
    array_QByteArrayMatcher,
    copy_QByteArrayMatcher,
    release_QByteArrayMatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 62055 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 62059 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QByteArray_Base64Options___hash__(PyObject *);}
static long slot_QByteArray_Base64Options___hash__(PyObject *sipSelf)
{
     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QByteArray::Base64Options::Int();
#line 62077 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QByteArray_Base64Options___bool__(PyObject *);}
static int slot_QByteArray_Base64Options___bool__(PyObject *sipSelf)
{
     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QByteArray::Base64Options::Int() != 0);
#line 62102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___ne__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Options___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray::Base64Options* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray_Base64Options, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QByteArray::Base64Options::Int() != a0->operator QByteArray::Base64Options::Int());
#line 62132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QByteArray::Base64Options *>(a0),sipType_QByteArray_Base64Options,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QByteArray_Base64Options, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___eq__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Options___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray::Base64Options* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray_Base64Options, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QByteArray::Base64Options::Int() == a0->operator QByteArray::Base64Options::Int());
#line 62168 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QByteArray::Base64Options *>(a0),sipType_QByteArray_Base64Options,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QByteArray_Base64Options, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Options___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QByteArray_Base64Options)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QByteArray::Base64Options(*sipCpp ^ a0);
#line 62207 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___xor__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Options___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray::Base64Options* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QByteArray_Base64Options, &a0, &a0State, &a1))
        {
             ::QByteArray::Base64Options*sipRes;

            sipRes = new  ::QByteArray::Base64Options((*a0 ^ a1));
            sipReleaseType(a0,sipType_QByteArray_Base64Options,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray_Base64Options,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___ior__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Options___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QByteArray_Base64Options)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QByteArray::Base64Options(*sipCpp | a0);
#line 62279 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___or__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Options___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray::Base64Options* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QByteArray_Base64Options, &a0, &a0State, &a1))
        {
             ::QByteArray::Base64Options*sipRes;

            sipRes = new  ::QByteArray::Base64Options((*a0 | a1));
            sipReleaseType(a0,sipType_QByteArray_Base64Options,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray_Base64Options,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___iand__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Options___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QByteArray_Base64Options)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QByteArray::Base64Options::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___and__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray_Base64Options___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray::Base64Options* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QByteArray_Base64Options, &a0, &a0State, &a1))
        {
             ::QByteArray::Base64Options*sipRes;

            sipRes = new  ::QByteArray::Base64Options((*a0 & a1));
            sipReleaseType(a0,sipType_QByteArray_Base64Options,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray_Base64Options,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___invert__(PyObject *);}
static PyObject *slot_QByteArray_Base64Options___invert__(PyObject *sipSelf)
{
     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QByteArray::Base64Options*sipRes;

            sipRes = new  ::QByteArray::Base64Options(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QByteArray_Base64Options,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QByteArray_Base64Options___int__(PyObject *);}
static PyObject *slot_QByteArray_Base64Options___int__(PyObject *sipSelf)
{
     ::QByteArray::Base64Options *sipCpp = reinterpret_cast< ::QByteArray::Base64Options *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray_Base64Options));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QByteArray_Base64Options(void *, int);}
static void release_QByteArray_Base64Options(void *sipCppV, int)
{
    delete reinterpret_cast< ::QByteArray::Base64Options *>(sipCppV);
}


extern "C" {static void assign_QByteArray_Base64Options(void *, SIP_SSIZE_T, void *);}
static void assign_QByteArray_Base64Options(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QByteArray::Base64Options *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QByteArray::Base64Options *>(sipSrc);
}


extern "C" {static void *array_QByteArray_Base64Options(SIP_SSIZE_T);}
static void *array_QByteArray_Base64Options(SIP_SSIZE_T sipNrElem)
{
    return new  ::QByteArray::Base64Options[sipNrElem];
}


extern "C" {static void *copy_QByteArray_Base64Options(const void *, SIP_SSIZE_T);}
static void *copy_QByteArray_Base64Options(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QByteArray::Base64Options(reinterpret_cast<const  ::QByteArray::Base64Options *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QByteArray_Base64Options(sipSimpleWrapper *);}
static void dealloc_QByteArray_Base64Options(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QByteArray_Base64Options(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QByteArray_Base64Options(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QByteArray_Base64Options(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QByteArray::Base64Options *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QByteArray::Base64Options();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QByteArray::Base64Options(a0);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray::Base64Options* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray_Base64Options, &a0, &a0State))
        {
            sipCpp = new  ::QByteArray::Base64Options(*a0);
            sipReleaseType(const_cast< ::QByteArray::Base64Options *>(a0),sipType_QByteArray_Base64Options,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QByteArray_Base64Options(PyObject *, void **, int *, PyObject *);}
static int convertTo_QByteArray_Base64Options(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QByteArray::Base64Options **sipCppPtr = reinterpret_cast< ::QByteArray::Base64Options **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QByteArray::Base64Options is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QByteArray_Base64Option)) ||
            sipCanConvertToType(sipPy, sipType_QByteArray_Base64Options, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QByteArray_Base64Option)))
{
    *sipCppPtr = new QByteArray::Base64Options(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QByteArray::Base64Options *>(sipConvertToType(sipPy, sipType_QByteArray_Base64Options, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 62547 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QByteArray_Base64Options[] = {
    {(void *)slot_QByteArray_Base64Options___hash__, hash_slot},
    {(void *)slot_QByteArray_Base64Options___bool__, bool_slot},
    {(void *)slot_QByteArray_Base64Options___ne__, ne_slot},
    {(void *)slot_QByteArray_Base64Options___eq__, eq_slot},
    {(void *)slot_QByteArray_Base64Options___ixor__, ixor_slot},
    {(void *)slot_QByteArray_Base64Options___xor__, xor_slot},
    {(void *)slot_QByteArray_Base64Options___ior__, ior_slot},
    {(void *)slot_QByteArray_Base64Options___or__, or_slot},
    {(void *)slot_QByteArray_Base64Options___iand__, iand_slot},
    {(void *)slot_QByteArray_Base64Options___and__, and_slot},
    {(void *)slot_QByteArray_Base64Options___invert__, invert_slot},
    {(void *)slot_QByteArray_Base64Options___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QByteArray_Base64Options, "\1QByteArray.Base64Options()\n"
"QByteArray.Base64Options(Union[QByteArray.Base64Options, QByteArray.Base64Option])\n"
"QByteArray.Base64Options(QByteArray.Base64Options)");


static pyqt5ClassPluginDef plugin_QByteArray_Base64Options = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QByteArray_Base64Options = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QByteArray__Base64Options,
        {SIP_NULLPTR},
        &plugin_QByteArray_Base64Options
    },
    {
        sipNameNr_Base64Options,
        {21, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QByteArray_Base64Options,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QByteArray_Base64Options,
    init_type_QByteArray_Base64Options,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QByteArray_Base64Options,
    assign_QByteArray_Base64Options,
    array_QByteArray_Base64Options,
    copy_QByteArray_Base64Options,
    release_QByteArray_Base64Options,
    SIP_NULLPTR,
    convertTo_QByteArray_Base64Options,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 62635 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62639 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 62642 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62645 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 62648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
// This is needed by __hash__().
#include <qhash.h>


// Convenience function for converting a QByteArray to a Python str object.
static PyObject *QByteArrayToPyStr(QByteArray *ba)
{
    char *data = ba->data();

    if (data)
        // QByteArrays may have embedded '\0's so set the size explicitly.    
        return SIPBytes_FromStringAndSize(data, ba->size());

    return SIPBytes_FromString("");
}
#line 62665 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QByteArray_resize, "resize(self, int)");

extern "C" {static PyObject *meth_QByteArray_resize(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
            sipCpp->resize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_resize, doc_QByteArray_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_fill, "fill(self, str, size: int = -1) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char a0;
        int a1 = -1;
         ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BaA|i", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->fill(a0,a1);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_fill, doc_QByteArray_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_clear, "clear(self)");

extern "C" {static PyObject *meth_QByteArray_clear(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_clear, doc_QByteArray_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_indexOf, "indexOf(self, Union[QByteArray, bytes, bytearray], from_: int = 0) -> int\n"
"indexOf(self, str, from_: int = 0) -> int");

extern "C" {static PyObject *meth_QByteArray_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1 = 0;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = 0;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_indexOf, doc_QByteArray_indexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_lastIndexOf, "lastIndexOf(self, Union[QByteArray, bytes, bytearray], from_: int = -1) -> int\n"
"lastIndexOf(self, str, from_: int = -1) -> int");

extern "C" {static PyObject *meth_QByteArray_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1 = -1;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexOf(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1 = -1;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexOf(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_lastIndexOf, doc_QByteArray_lastIndexOf);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_count, "count(self, Union[QByteArray, bytes, bytearray]) -> int\n"
"count(self) -> int");

extern "C" {static PyObject *meth_QByteArray_count(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->count(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_count, doc_QByteArray_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_left, "left(self, int) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_left(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_left(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->left(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_left, doc_QByteArray_left);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_right, "right(self, int) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_right(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_right(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->right(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_right, doc_QByteArray_right);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_mid, "mid(self, int, length: int = -1) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_mid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_mid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1 = -1;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->mid(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_mid, doc_QByteArray_mid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_startsWith, "startsWith(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QByteArray_startsWith(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_startsWith(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->startsWith(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_startsWith, doc_QByteArray_startsWith);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_endsWith, "endsWith(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QByteArray_endsWith(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_endsWith(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->endsWith(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_endsWith, doc_QByteArray_endsWith);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_truncate, "truncate(self, int)");

extern "C" {static PyObject *meth_QByteArray_truncate(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_truncate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
            sipCpp->truncate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_truncate, doc_QByteArray_truncate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_chop, "chop(self, int)");

extern "C" {static PyObject *meth_QByteArray_chop(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_chop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
            sipCpp->chop(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_chop, doc_QByteArray_chop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toLower, "toLower(self) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_toLower(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toLower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toLower());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toLower, doc_QByteArray_toLower);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toUpper, "toUpper(self) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_toUpper(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toUpper());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toUpper, doc_QByteArray_toUpper);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_trimmed, "trimmed(self) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_trimmed(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_trimmed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->trimmed());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_trimmed, doc_QByteArray_trimmed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_simplified, "simplified(self) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_simplified(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_simplified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->simplified());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_simplified, doc_QByteArray_simplified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_leftJustified, "leftJustified(self, int, fill: str = ' ', truncate: bool = False) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_leftJustified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_leftJustified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        char a1 = ' ';
        bool a2 = 0;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_fill,
            sipName_truncate,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|aAb", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1, &a2))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->leftJustified(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_leftJustified, doc_QByteArray_leftJustified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_rightJustified, "rightJustified(self, int, fill: str = ' ', truncate: bool = False) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_rightJustified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_rightJustified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        char a1 = ' ';
        bool a2 = 0;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_fill,
            sipName_truncate,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|aAb", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1, &a2))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->rightJustified(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_rightJustified, doc_QByteArray_rightJustified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_prepend, "prepend(self, Union[QByteArray, bytes, bytearray]) -> QByteArray\n"
"prepend(self, int, str) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_prepend(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->prepend(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        int a0;
        char a1;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bic", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->prepend(a0,a1);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_prepend, doc_QByteArray_prepend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_append, "append(self, Union[QByteArray, bytes, bytearray]) -> QByteArray\n"
"append(self, str) -> QByteArray\n"
"append(self, int, str) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_append(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->append(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->append(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        int a0;
        char a1;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bic", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->append(a0,a1);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_append, doc_QByteArray_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_insert, "insert(self, int, Union[QByteArray, bytes, bytearray]) -> QByteArray\n"
"insert(self, int, str) -> QByteArray\n"
"insert(self, int, int, str) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_insert(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QByteArray, &sipCpp, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->insert(a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QByteArray, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->insert(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        int a0;
        int a1;
        char a2;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biic", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1, &a2))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->insert(a0,a1,a2);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_insert, doc_QByteArray_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_remove, "remove(self, int, int) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_remove(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->remove(a0,a1);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_remove, doc_QByteArray_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_replace, "replace(self, int, int, Union[QByteArray, bytes, bytearray]) -> QByteArray\n"
"replace(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) -> QByteArray\n"
"replace(self, str, Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_replace(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QByteArray* a2;
        int a2State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1, sipType_QByteArray, &a2, &a2State))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->replace(a0,a1,*a2);
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->replace(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->replace(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_replace, doc_QByteArray_replace);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_split, "split(self, str) -> List[QByteArray]");

extern "C" {static PyObject *meth_QByteArray_split(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_split(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char a0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BaA", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->split(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_split, doc_QByteArray_split);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toShort, "toShort(self, base: int = 10) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QByteArray_toShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 10;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QByteArray, &sipCpp, &a1))
        {
            short sipRes;

            sipRes = sipCpp->toShort(&a0,a1);

            return sipBuildResult(0,"(hb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toShort, doc_QByteArray_toShort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toUShort, "toUShort(self, base: int = 10) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QByteArray_toUShort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toUShort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 10;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QByteArray, &sipCpp, &a1))
        {
             ::ushort sipRes;

            sipRes = sipCpp->toUShort(&a0,a1);

            return sipBuildResult(0,"(tb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toUShort, doc_QByteArray_toUShort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toInt, "toInt(self, base: int = 10) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QByteArray_toInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 10;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QByteArray, &sipCpp, &a1))
        {
            int sipRes;

            sipRes = sipCpp->toInt(&a0,a1);

            return sipBuildResult(0,"(ib)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toInt, doc_QByteArray_toInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toUInt, "toUInt(self, base: int = 10) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QByteArray_toUInt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toUInt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 10;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QByteArray, &sipCpp, &a1))
        {
             ::uint sipRes;

            sipRes = sipCpp->toUInt(&a0,a1);

            return sipBuildResult(0,"(ub)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toUInt, doc_QByteArray_toUInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toLong, "toLong(self, base: int = 10) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QByteArray_toLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 10;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QByteArray, &sipCpp, &a1))
        {
            long sipRes;

            sipRes = sipCpp->toLong(&a0,a1);

            return sipBuildResult(0,"(lb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toLong, doc_QByteArray_toLong);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toULong, "toULong(self, base: int = 10) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QByteArray_toULong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toULong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 10;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QByteArray, &sipCpp, &a1))
        {
             ::ulong sipRes;

            sipRes = sipCpp->toULong(&a0,a1);

            return sipBuildResult(0,"(mb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toULong, doc_QByteArray_toULong);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toLongLong, "toLongLong(self, base: int = 10) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QByteArray_toLongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toLongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 10;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QByteArray, &sipCpp, &a1))
        {
             ::qlonglong sipRes;

            sipRes = sipCpp->toLongLong(&a0,a1);

            return sipBuildResult(0,"(nb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toLongLong, doc_QByteArray_toLongLong);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toULongLong, "toULongLong(self, base: int = 10) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QByteArray_toULongLong(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toULongLong(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1 = 10;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QByteArray, &sipCpp, &a1))
        {
             ::qulonglong sipRes;

            sipRes = sipCpp->toULongLong(&a0,a1);

            return sipBuildResult(0,"(ob)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toULongLong, doc_QByteArray_toULongLong);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toFloat, "toFloat(self) -> Tuple[float, bool]");

extern "C" {static PyObject *meth_QByteArray_toFloat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toFloat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QByteArray *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->toFloat(&a0);

            return sipBuildResult(0,"(fb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toFloat, doc_QByteArray_toFloat);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toDouble, "toDouble(self) -> Tuple[float, bool]");

extern "C" {static PyObject *meth_QByteArray_toDouble(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toDouble(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QByteArray *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->toDouble(&a0);

            return sipBuildResult(0,"(db)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toDouble, doc_QByteArray_toDouble);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toBase64, "toBase64(self) -> QByteArray\n"
"toBase64(self, Union[QByteArray.Base64Options, QByteArray.Base64Option]) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_toBase64(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toBase64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toBase64());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
         ::QByteArray::Base64Options* a0;
        int a0State = 0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray_Base64Options, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toBase64(*a0));
            sipReleaseType(a0,sipType_QByteArray_Base64Options,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toBase64, doc_QByteArray_toBase64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_setNum, "setNum(self, float, format: str = 'g', precision: int = 6) -> QByteArray\n"
"setNum(self, int, base: int = 10) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_setNum(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_setNum(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;
         ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_precision,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BXd|aAi", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1, &a2))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->setNum(a0,a1,a2);

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;
        int a1 = 10;
         ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BP0|i", &sipSelf, sipType_QByteArray, &sipCpp, &a0, &a1))
        {
             ::QByteArray*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        #if PY_MAJOR_VERSION < 3
        if (PyInt_Check(a0))
        {
            qlonglong val = PyInt_AsLong(a0);
        
            sipRes = &sipCpp->setNum(val, a1);
        }
        else
        #endif
        {
            qlonglong val = sipLong_AsLongLong(a0);
        
            if (!PyErr_Occurred())
            {
                sipRes = &sipCpp->setNum(val, a1);
            }
            else
            {
                // If it is positive then it might fit an unsigned long long.
        
                qulonglong uval = sipLong_AsUnsignedLongLong(a0);
        
                if (!PyErr_Occurred())
                {
                    sipRes = &sipCpp->setNum(uval, a1);
                }
                else
                {
                    sipError = (PyErr_ExceptionMatches(PyExc_OverflowError)
                            ? sipErrorFail : sipErrorContinue);
                }
            }
        }
#line 64097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_setNum, doc_QByteArray_setNum);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_number, "number(float, format: str = 'g', precision: int = 6) -> QByteArray\n"
"number(int, base: int = 10) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_number(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_number(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_format,
            sipName_precision,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Xd|aAi", &a0, &a1, &a2))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QByteArray::number(a0,a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        PyObject * a0;
        int a1 = 10;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_base,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "P0|i", &a0, &a1))
        {
             ::QByteArray*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        #if PY_MAJOR_VERSION < 3
        if (PyInt_Check(a0))
        {
            qlonglong val = PyInt_AsLong(a0);
        
            sipRes = new QByteArray(QByteArray::number(val, a1));
        }
        else
        #endif
        {
            qlonglong val = sipLong_AsLongLong(a0);
        
            if (!PyErr_Occurred())
            {
                sipRes = new QByteArray(QByteArray::number(val, a1));
            }
            else
            {
                // If it is positive then it might fit an unsigned long long.
        
                qulonglong uval = sipLong_AsUnsignedLongLong(a0);
        
                if (!PyErr_Occurred())
                {
                    sipRes = new QByteArray(QByteArray::number(uval, a1));
                }
                else
                {
                    sipError = (PyErr_ExceptionMatches(PyExc_OverflowError)
                            ? sipErrorFail : sipErrorContinue);
                }
            }
        }
#line 64197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_number, doc_QByteArray_number);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_fromBase64, "fromBase64(Union[QByteArray, bytes, bytearray]) -> QByteArray\n"
"fromBase64(Union[QByteArray, bytes, bytearray], Union[QByteArray.Base64Options, QByteArray.Base64Option]) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_fromBase64(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_fromBase64(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QByteArray::fromBase64(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QByteArray::Base64Options* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QByteArray, &a0, &a0State, sipType_QByteArray_Base64Options, &a1, &a1State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QByteArray::fromBase64(*a0,*a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(a1,sipType_QByteArray_Base64Options,a1State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_fromBase64, doc_QByteArray_fromBase64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_fromRawData, "fromRawData(bytes) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_fromRawData(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_fromRawData(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        SIP_SSIZE_T a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "k", &a0, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QByteArray::fromRawData(a0,(int)a1));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_fromRawData, doc_QByteArray_fromRawData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_fromHex, "fromHex(Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_fromHex(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_fromHex(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QByteArray::fromHex(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_fromHex, doc_QByteArray_fromHex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_length, "length(self) -> int");

extern "C" {static PyObject *meth_QByteArray_length(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_length, doc_QByteArray_length);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QByteArray_isNull(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_isNull, doc_QByteArray_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_size, "size(self) -> int");

extern "C" {static PyObject *meth_QByteArray_size(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_size, doc_QByteArray_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_at, "at(self, int) -> str");

extern "C" {static PyObject *meth_QByteArray_at(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
            char sipRes;

            sipRes = sipCpp->at(a0);

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_at, doc_QByteArray_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QByteArray_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_isEmpty, doc_QByteArray_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_data, "data(self) -> bytes");

extern "C" {static PyObject *meth_QByteArray_data(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        // QByteArrays may contain embedded '\0's so set the size explicitly.
        
        char *res = sipCpp->data();
        int len = sipCpp->size();
        
        if (res)
        {
            if ((sipRes = SIPBytes_FromStringAndSize(res, len)) == NULL)
                sipIsErr = 1;
        }
        else
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
#line 64500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_data, doc_QByteArray_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_capacity, "capacity(self) -> int");

extern "C" {static PyObject *meth_QByteArray_capacity(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_capacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->capacity();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_capacity, doc_QByteArray_capacity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_reserve, "reserve(self, int)");

extern "C" {static PyObject *meth_QByteArray_reserve(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_reserve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
            sipCpp->reserve(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_reserve, doc_QByteArray_reserve);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_squeeze, "squeeze(self)");

extern "C" {static PyObject *meth_QByteArray_squeeze(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_squeeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            sipCpp->squeeze();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_squeeze, doc_QByteArray_squeeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_push_back, "push_back(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QByteArray_push_back(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_push_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->push_back(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_push_back, doc_QByteArray_push_back);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_push_front, "push_front(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QByteArray_push_front(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_push_front(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->push_front(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_push_front, doc_QByteArray_push_front);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_contains, "contains(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QByteArray_contains(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_contains, doc_QByteArray_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toHex, "toHex(self) -> QByteArray\n"
"toHex(self, str) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_toHex(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toHex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toHex());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        char a0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BaA", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toHex(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toHex, doc_QByteArray_toHex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_toPercentEncoding, "toPercentEncoding(self, exclude: Union[QByteArray, bytes, bytearray] = QByteArray(), include: Union[QByteArray, bytes, bytearray] = QByteArray(), percent: str = '%') -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_toPercentEncoding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_toPercentEncoding(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray& a0def = QByteArray();
        const  ::QByteArray* a0 = &a0def;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;
        char a2 = '%';
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            sipName_exclude,
            sipName_include,
            sipName_percent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1J1aA", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State, &a2))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toPercentEncoding(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_toPercentEncoding, doc_QByteArray_toPercentEncoding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_fromPercentEncoding, "fromPercentEncoding(Union[QByteArray, bytes, bytearray], percent: str = '%') -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_fromPercentEncoding(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_fromPercentEncoding(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        char a1 = '%';

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_percent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1|aA", sipType_QByteArray, &a0, &a0State, &a1))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray( ::QByteArray::fromPercentEncoding(*a0,a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_fromPercentEncoding, doc_QByteArray_fromPercentEncoding);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_repeated, "repeated(self, int) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_repeated(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_repeated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->repeated(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_repeated, doc_QByteArray_repeated);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_swap, "swap(self, QByteArray)");

extern "C" {static PyObject *meth_QByteArray_swap(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray* a0;
         ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_swap, doc_QByteArray_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_chopped, "chopped(self, int) -> QByteArray");

extern "C" {static PyObject *meth_QByteArray_chopped(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_chopped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QByteArray, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->chopped(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_chopped, doc_QByteArray_chopped);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_compare, "compare(self, Union[QByteArray, bytes, bytearray], cs: Qt.CaseSensitivity = Qt.CaseSensitive) -> int");

extern "C" {static PyObject *meth_QByteArray_compare(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QByteArray_compare(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        const  ::QByteArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_cs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QByteArray, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_Qt_CaseSensitivity, &a1))
        {
            int sipRes;

            sipRes = sipCpp->compare(*a0,a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_compare, doc_QByteArray_compare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_isUpper, "isUpper(self) -> bool");

extern "C" {static PyObject *meth_QByteArray_isUpper(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_isUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUpper();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_isUpper, doc_QByteArray_isUpper);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QByteArray_isLower, "isLower(self) -> bool");

extern "C" {static PyObject *meth_QByteArray_isLower(PyObject *, PyObject *);}
static PyObject *meth_QByteArray_isLower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QByteArray, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLower();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName_isLower, doc_QByteArray_isLower);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QByteArray___add__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray((*a0 + *a1));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, add_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QByteArray___imul__(PyObject *,int);}
static PyObject *slot_QByteArray___imul__(PyObject *sipSelf,int a0)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
#line 393 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        QByteArray orig(*sipCpp);
        
        sipCpp->clear();
        
        while (a0-- > 0)
            *sipCpp += orig;
#line 65042 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QByteArray___mul__(PyObject *,int);}
static PyObject *slot_QByteArray___mul__(PyObject *sipSelf,int a0)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QByteArray*sipRes = 0;

#line 385 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        sipRes = new QByteArray();
        
        while (a0-- > 0)
            *sipRes += *sipCpp;
#line 65071 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QByteArray___repr__(PyObject *);}
static PyObject *slot_QByteArray___repr__(PyObject *sipSelf)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QByteArray()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QByteArray()");
        #endif
        }
        else
        {
            PyObject *str = QByteArrayToPyStr(sipCpp);
        
            if (str)
            {
        #if PY_MAJOR_VERSION >= 3
                sipRes = PyUnicode_FromFormat("PyQt5.QtCore.QByteArray(%R)", str);
        #else
                sipRes = PyString_FromString("PyQt5.QtCore.QByteArray(");
                PyString_ConcatAndDel(&sipRes, PyObject_Repr(str));
                PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
                Py_DECREF(str);
            }
        }
#line 65120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QByteArray___str__(PyObject *);}
static PyObject *slot_QByteArray___str__(PyObject *sipSelf)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        sipRes = QByteArrayToPyStr(sipCpp);
        
        #if PY_MAJOR_VERSION >= 3
        PyObject *repr = PyObject_Repr(sipRes);
        
        if (repr)
        {
            Py_DECREF(sipRes);
            sipRes = repr;
        }
        #endif
#line 65155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QByteArray___hash__(PyObject *);}
static long slot_QByteArray___hash__(PyObject *sipSelf)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        sipRes = qHash(*sipCpp);
#line 65180 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QByteArray___contains__(PyObject *,PyObject *);}
static int slot_QByteArray___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            int sipRes = 0;

#line 330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        // It looks like you can't assign QBool to int.
        sipRes = bool(sipCpp->contains(*a0));
#line 65211 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName___contains__, SIP_NULLPTR);

    return -1;
}


extern "C" {static PyObject *slot_QByteArray___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            char sipRes = 0;
            int sipIsErr = 0;

#line 300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = sipCpp->operator[]((int)idx);
#line 65250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QByteArray*sipRes = 0;
            int sipIsErr = 0;

#line 310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
        Py_ssize_t start, stop, step, slicelength;
        
        if (sipConvertFromSliceObject(a0, sipCpp->length(), &start, &stop, &step, &slicelength) < 0)
        {
            sipIsErr = 1;
        }
        else
        {
            sipRes = new QByteArray();
        
            for (Py_ssize_t i = 0; i < slicelength; ++i)
            {
                sipRes -> append(sipCpp->at(start));
                start += step;
            }
        }
#line 65284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QByteArray, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QByteArray___len__(PyObject *);}
static SIP_SSIZE_T slot_QByteArray___len__(PyObject *sipSelf)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 65315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QByteArray___ge__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QByteArray::operator>=(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator>=((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QByteArray, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QByteArray___le__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___le__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QByteArray::operator<=(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator<=((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, le_slot, sipType_QByteArray, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QByteArray___gt__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___gt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QByteArray::operator>(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator>((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, gt_slot, sipType_QByteArray, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QByteArray___lt__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QByteArray::operator<(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator<((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QByteArray, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QByteArray___ne__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QByteArray::operator!=(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QByteArray, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QByteArray___eq__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QByteArray::operator==(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QByteArray, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QByteArray___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QByteArray___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QByteArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp-> ::QByteArray::operator+=(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
            sipCpp-> ::QByteArray::operator+=(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QByteArray(void *, int);}
static void release_QByteArray(void *sipCppV, int)
{
    delete reinterpret_cast< ::QByteArray *>(sipCppV);
}


#if PY_MAJOR_VERSION >= 3
extern "C" {static int getbuffer_QByteArray(PyObject *, void *, sipBufferDef *);}
static int getbuffer_QByteArray(PyObject *sipSelf, void *sipCppV, sipBufferDef *sipBuffer)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipCppV);
    int sipRes;

#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
    #if defined(Py_LIMITED_API)
        Q_UNUSED(sipSelf);
    
        sipBuffer->bd_buffer = sipCpp->data();
        sipBuffer->bd_length = sipCpp->size();
        sipBuffer->bd_readonly = 0;
        sipRes = 0;
    #else
        sipRes = PyBuffer_FillInfo(sipBuffer, sipSelf, sipCpp->data(),
                sipCpp->size(), 0, sipFlags);
    #endif
#line 65691 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}
#endif


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getreadbuffer_QByteArray(PyObject *, void *, SIP_SSIZE_T, void **);}
static SIP_SSIZE_T getreadbuffer_QByteArray(PyObject *, void *sipCppV, SIP_SSIZE_T sipSegment, void **sipPtrPtr)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
    if (sipSegment != 0)
    {
        PyErr_SetString(PyExc_SystemError, "accessing non-existent QByteArray segment");
        sipRes = -1;
    }
    else
    {
        *sipPtrPtr = (void *)sipCpp->data();
        sipRes = sipCpp->size();
    }
#line 65716 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}
#endif


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getsegcount_QByteArray(PyObject *, void *, SIP_SSIZE_T *);}
static SIP_SSIZE_T getsegcount_QByteArray(PyObject *, void *sipCppV, SIP_SSIZE_T *sipLenPtr)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
    if (sipLenPtr)
        *sipLenPtr = sipCpp->size();
    
    sipRes = 1;
#line 65735 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}
#endif


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getcharbuffer_QByteArray(PyObject *, void *, SIP_SSIZE_T, void **);}
static SIP_SSIZE_T getcharbuffer_QByteArray(PyObject *, void *sipCppV, SIP_SSIZE_T sipSegment, void **sipPtrPtr)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
    if (sipSegment != 0)
    {
        PyErr_SetString(PyExc_SystemError, "accessing non-existent QByteArray segment");
        sipRes = -1;
    }
    else
    {
        *sipPtrPtr = (void *)sipCpp->data();
        sipRes = sipCpp->size();
    }
#line 65760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}
#endif


extern "C" {static PyObject *pickle_QByteArray(void *);}
static PyObject *pickle_QByteArray(void *sipCppV)
{
     ::QByteArray *sipCpp = reinterpret_cast< ::QByteArray *>(sipCppV);
    PyObject *sipRes;

#line 152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
    #if PY_MAJOR_VERSION >= 3
    sipRes = Py_BuildValue((char *)"(y#)", sipCpp->data(), sipCpp->size());
    #else
    sipRes = Py_BuildValue((char *)"(s#)", sipCpp->data(), sipCpp->size());
    #endif
#line 65779 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}


extern "C" {static void assign_QByteArray(void *, SIP_SSIZE_T, void *);}
static void assign_QByteArray(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QByteArray *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QByteArray *>(sipSrc);
}


extern "C" {static void *array_QByteArray(SIP_SSIZE_T);}
static void *array_QByteArray(SIP_SSIZE_T sipNrElem)
{
    return new  ::QByteArray[sipNrElem];
}


extern "C" {static void *copy_QByteArray(const void *, SIP_SSIZE_T);}
static void *copy_QByteArray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QByteArray(reinterpret_cast<const  ::QByteArray *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QByteArray(sipSimpleWrapper *);}
static void dealloc_QByteArray(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QByteArray(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QByteArray(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QByteArray(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QByteArray *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QByteArray();

            return sipCpp;
        }
    }

    {
        int a0;
        char a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iaA", &a0, &a1))
        {
            sipCpp = new  ::QByteArray(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new  ::QByteArray(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QByteArray(PyObject *, void **, int *, PyObject *);}
static int convertTo_QByteArray(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QByteArray **sipCppPtr = reinterpret_cast< ::QByteArray **>(sipCppPtrV);

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
// We have to be very careful about what we allow to be converted to a
// QByteArray and to a QString as we need to take into account the v1 and v2
// APIs and Python v2.x and v3.x.
//
// QSvgRenderer() is a good example of what needs to work "naturally".  This
// has a ctor that takes a QString argument that is the name of the SVG file.
// It has another ctor that takes a QByteArray argument that is the SVG data.
//
// In Python v2.x we want a str object to be interpreted as the name of the
// file (as that is the historical behaviour).  This has the following
// implications.
//
// - The QString version of the ctor must appear before the QByteArray version
//   in the .sip file.  This rule should be applied wherever a similar
//   situation arises.
// - A QString must not automatically convert a QByteArray.
// - QByteArray must also exist in the v2 API.
//
// In Python v3.x we want a bytes object to be used wherever a QByteArray is
// expected.  This means that a QString must not automatically convert a bytes
// object.
//
// In PyQt v5.4 and earlier a QByteArray could be created from a Latin-1
// encoded string.  This was a mistaken attempt to ease the porting of Python2
// code to Python3.

if (sipIsErr == NULL)
    return (PyByteArray_Check(sipPy) || SIPBytes_Check(sipPy) ||
            sipCanConvertToType(sipPy, sipType_QByteArray, SIP_NO_CONVERTORS));

if (PyByteArray_Check(sipPy))
{
    *sipCppPtr = new QByteArray(PyByteArray_AsString(sipPy),
            PyByteArray_Size(sipPy));

    return sipGetState(sipTransferObj);
}

if (SIPBytes_Check(sipPy))
{
    *sipCppPtr = new QByteArray(SIPBytes_AsString(sipPy),
            SIPBytes_Size(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QByteArray *>(sipConvertToType(sipPy,
        sipType_QByteArray, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 65915 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QByteArray[] = {
    {(void *)slot_QByteArray___add__, add_slot},
    {(void *)slot_QByteArray___imul__, irepeat_slot},
    {(void *)slot_QByteArray___mul__, repeat_slot},
    {(void *)slot_QByteArray___repr__, repr_slot},
    {(void *)slot_QByteArray___str__, str_slot},
    {(void *)slot_QByteArray___hash__, hash_slot},
    {(void *)slot_QByteArray___contains__, contains_slot},
    {(void *)slot_QByteArray___getitem__, getitem_slot},
    {(void *)slot_QByteArray___len__, len_slot},
    {(void *)slot_QByteArray___ge__, ge_slot},
    {(void *)slot_QByteArray___le__, le_slot},
    {(void *)slot_QByteArray___gt__, gt_slot},
    {(void *)slot_QByteArray___lt__, lt_slot},
    {(void *)slot_QByteArray___ne__, ne_slot},
    {(void *)slot_QByteArray___eq__, eq_slot},
    {(void *)slot_QByteArray___iadd__, iconcat_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QByteArray[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QByteArray_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_append)},
    {SIP_MLNAME_CAST(sipName_at), meth_QByteArray_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_at)},
    {SIP_MLNAME_CAST(sipName_capacity), meth_QByteArray_capacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_capacity)},
    {SIP_MLNAME_CAST(sipName_chop), meth_QByteArray_chop, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_chop)},
    {SIP_MLNAME_CAST(sipName_chopped), meth_QByteArray_chopped, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_chopped)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QByteArray_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_clear)},
    {SIP_MLNAME_CAST(sipName_compare), SIP_MLMETH_CAST(meth_QByteArray_compare), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_compare)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QByteArray_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_contains)},
    {SIP_MLNAME_CAST(sipName_count), meth_QByteArray_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_count)},
    {SIP_MLNAME_CAST(sipName_data), meth_QByteArray_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_data)},
    {SIP_MLNAME_CAST(sipName_endsWith), meth_QByteArray_endsWith, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_endsWith)},
    {SIP_MLNAME_CAST(sipName_fill), SIP_MLMETH_CAST(meth_QByteArray_fill), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_fill)},
    {SIP_MLNAME_CAST(sipName_fromBase64), meth_QByteArray_fromBase64, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_fromBase64)},
    {SIP_MLNAME_CAST(sipName_fromHex), meth_QByteArray_fromHex, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_fromHex)},
    {SIP_MLNAME_CAST(sipName_fromPercentEncoding), SIP_MLMETH_CAST(meth_QByteArray_fromPercentEncoding), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_fromPercentEncoding)},
    {SIP_MLNAME_CAST(sipName_fromRawData), meth_QByteArray_fromRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_fromRawData)},
    {SIP_MLNAME_CAST(sipName_indexOf), SIP_MLMETH_CAST(meth_QByteArray_indexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_indexOf)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QByteArray_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_insert)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QByteArray_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isLower), meth_QByteArray_isLower, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_isLower)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QByteArray_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_isNull)},
    {SIP_MLNAME_CAST(sipName_isUpper), meth_QByteArray_isUpper, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_isUpper)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), SIP_MLMETH_CAST(meth_QByteArray_lastIndexOf), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_left), meth_QByteArray_left, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_left)},
    {SIP_MLNAME_CAST(sipName_leftJustified), SIP_MLMETH_CAST(meth_QByteArray_leftJustified), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_leftJustified)},
    {SIP_MLNAME_CAST(sipName_length), meth_QByteArray_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_length)},
    {SIP_MLNAME_CAST(sipName_mid), SIP_MLMETH_CAST(meth_QByteArray_mid), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_mid)},
    {SIP_MLNAME_CAST(sipName_number), SIP_MLMETH_CAST(meth_QByteArray_number), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_number)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QByteArray_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_prepend)},
    {SIP_MLNAME_CAST(sipName_push_back), meth_QByteArray_push_back, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_push_back)},
    {SIP_MLNAME_CAST(sipName_push_front), meth_QByteArray_push_front, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_push_front)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QByteArray_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_remove)},
    {SIP_MLNAME_CAST(sipName_repeated), meth_QByteArray_repeated, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_repeated)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QByteArray_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_replace)},
    {SIP_MLNAME_CAST(sipName_reserve), meth_QByteArray_reserve, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_reserve)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QByteArray_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_resize)},
    {SIP_MLNAME_CAST(sipName_right), meth_QByteArray_right, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_right)},
    {SIP_MLNAME_CAST(sipName_rightJustified), SIP_MLMETH_CAST(meth_QByteArray_rightJustified), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_rightJustified)},
    {SIP_MLNAME_CAST(sipName_setNum), SIP_MLMETH_CAST(meth_QByteArray_setNum), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_setNum)},
    {SIP_MLNAME_CAST(sipName_simplified), meth_QByteArray_simplified, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_simplified)},
    {SIP_MLNAME_CAST(sipName_size), meth_QByteArray_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_size)},
    {SIP_MLNAME_CAST(sipName_split), meth_QByteArray_split, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_split)},
    {SIP_MLNAME_CAST(sipName_squeeze), meth_QByteArray_squeeze, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_squeeze)},
    {SIP_MLNAME_CAST(sipName_startsWith), meth_QByteArray_startsWith, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_startsWith)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QByteArray_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_swap)},
    {SIP_MLNAME_CAST(sipName_toBase64), meth_QByteArray_toBase64, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_toBase64)},
    {SIP_MLNAME_CAST(sipName_toDouble), SIP_MLMETH_CAST(meth_QByteArray_toDouble), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toDouble)},
    {SIP_MLNAME_CAST(sipName_toFloat), SIP_MLMETH_CAST(meth_QByteArray_toFloat), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toFloat)},
    {SIP_MLNAME_CAST(sipName_toHex), meth_QByteArray_toHex, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_toHex)},
    {SIP_MLNAME_CAST(sipName_toInt), SIP_MLMETH_CAST(meth_QByteArray_toInt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toInt)},
    {SIP_MLNAME_CAST(sipName_toLong), SIP_MLMETH_CAST(meth_QByteArray_toLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toLong)},
    {SIP_MLNAME_CAST(sipName_toLongLong), SIP_MLMETH_CAST(meth_QByteArray_toLongLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toLongLong)},
    {SIP_MLNAME_CAST(sipName_toLower), meth_QByteArray_toLower, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_toLower)},
    {SIP_MLNAME_CAST(sipName_toPercentEncoding), SIP_MLMETH_CAST(meth_QByteArray_toPercentEncoding), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toPercentEncoding)},
    {SIP_MLNAME_CAST(sipName_toShort), SIP_MLMETH_CAST(meth_QByteArray_toShort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toShort)},
    {SIP_MLNAME_CAST(sipName_toUInt), SIP_MLMETH_CAST(meth_QByteArray_toUInt), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toUInt)},
    {SIP_MLNAME_CAST(sipName_toULong), SIP_MLMETH_CAST(meth_QByteArray_toULong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toULong)},
    {SIP_MLNAME_CAST(sipName_toULongLong), SIP_MLMETH_CAST(meth_QByteArray_toULongLong), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toULongLong)},
    {SIP_MLNAME_CAST(sipName_toUShort), SIP_MLMETH_CAST(meth_QByteArray_toUShort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QByteArray_toUShort)},
    {SIP_MLNAME_CAST(sipName_toUpper), meth_QByteArray_toUpper, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_toUpper)},
    {SIP_MLNAME_CAST(sipName_trimmed), meth_QByteArray_trimmed, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_trimmed)},
    {SIP_MLNAME_CAST(sipName_truncate), meth_QByteArray_truncate, METH_VARARGS, SIP_MLDOC_CAST(doc_QByteArray_truncate)}
};

static sipEnumMemberDef enummembers_QByteArray[] = {
    {sipName_Base64Encoding, static_cast<int>( ::QByteArray::Base64Encoding), 22},
    {sipName_Base64UrlEncoding, static_cast<int>( ::QByteArray::Base64UrlEncoding), 22},
    {sipName_KeepTrailingEquals, static_cast<int>( ::QByteArray::KeepTrailingEquals), 22},
    {sipName_OmitTrailingEquals, static_cast<int>( ::QByteArray::OmitTrailingEquals), 22},
};

PyDoc_STRVAR(doc_QByteArray, "\1QByteArray()\n"
"QByteArray(int, str)\n"
"QByteArray(Union[QByteArray, bytes, bytearray])");


static pyqt5ClassPluginDef plugin_QByteArray = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QByteArray = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QByteArray,
        {SIP_NULLPTR},
        &plugin_QByteArray
    },
    {
        sipNameNr_QByteArray,
        {0, 0, 1},
        62, methods_QByteArray,
        4, enummembers_QByteArray,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QByteArray,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QByteArray,
    init_type_QByteArray,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    getbuffer_QByteArray,
    SIP_NULLPTR,
#else
    getreadbuffer_QByteArray,
    SIP_NULLPTR,
    getsegcount_QByteArray,
    getcharbuffer_QByteArray,
#endif
    dealloc_QByteArray,
    assign_QByteArray,
    array_QByteArray,
    copy_QByteArray,
    release_QByteArray,
    SIP_NULLPTR,
    convertTo_QByteArray,
    SIP_NULLPTR,
    SIP_NULLPTR,
    pickle_QByteArray,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbuffer.sip"
#include <qbuffer.h>
#line 66080 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 66084 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66087 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 66090 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 66093 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66096 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66099 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66108 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66114 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66117 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 66120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 66126 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 66129 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 66132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQBuffer : public  ::QBuffer
{
public:
    sipQBuffer( ::QObject*);
    sipQBuffer( ::QByteArray*, ::QObject*);
    virtual ~sipQBuffer();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBuffer(const sipQBuffer &);
    sipQBuffer &operator = (const sipQBuffer &);

    char sipPyMethods[23];
};

sipQBuffer::sipQBuffer( ::QObject*a0):  ::QBuffer(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBuffer::sipQBuffer( ::QByteArray*a0, ::QObject*a1):  ::QBuffer(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBuffer::~sipQBuffer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBuffer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QBuffer);

    return  ::QBuffer::metaObject();
}

int sipQBuffer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBuffer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QBuffer,_c,_id,_a);

    return _id;
}

void *sipQBuffer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QBuffer, _clname, &sipCpp) ? sipCpp :  ::QBuffer::qt_metacast(_clname));
}

void sipQBuffer::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBuffer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQBuffer::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBuffer::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQBuffer::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBuffer::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQBuffer::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBuffer::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQBuffer::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBuffer::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQBuffer::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBuffer::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQBuffer::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QBuffer::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQBuffer::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QBuffer::isSequential();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQBuffer::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QBuffer::open(a0);

    extern bool sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQBuffer::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QBuffer::close();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQBuffer::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QBuffer::pos();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQBuffer::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QBuffer::size();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQBuffer::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QBuffer::seek(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQBuffer::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QBuffer::atEnd();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQBuffer::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QBuffer::reset();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQBuffer::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QBuffer::bytesAvailable();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQBuffer::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QBuffer::bytesToWrite();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQBuffer::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QBuffer::canReadLine();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQBuffer::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QBuffer::waitForReadyRead(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQBuffer::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QBuffer::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQBuffer::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_readData);

    if (!sipMeth)
        return  ::QBuffer::readData(a0,a1);

    extern  ::qint64 sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQBuffer::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QBuffer::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_48(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQBuffer::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QBuffer::writeData(a0,a1);

    extern  ::qint64 sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_49(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QBuffer_buffer, "buffer(self) -> QByteArray");

extern "C" {static PyObject *meth_QBuffer_buffer(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_buffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = &sipCpp->buffer();

            return sipConvertFromType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_buffer, doc_QBuffer_buffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_data, "data(self) -> QByteArray");

extern "C" {static PyObject *meth_QBuffer_data(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->data());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_data, doc_QBuffer_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_setBuffer, "setBuffer(self, QByteArray)");

extern "C" {static PyObject *meth_QBuffer_setBuffer(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_setBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QByteArray* a0;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QByteArray, &a0))
        {
            sipCpp->setBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_setBuffer, doc_QBuffer_setBuffer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_setData, "setData(self, Union[QByteArray, bytes, bytearray])\n"
"setData(self, bytes)");

extern "C" {static PyObject *meth_QBuffer_setData(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bk", &sipSelf, sipType_QBuffer, &sipCpp, &a0, &a1))
        {
            sipCpp->setData(a0,(int)a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_setData, doc_QBuffer_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_open, "open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool");

extern "C" {static PyObject *meth_QBuffer_open(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBuffer::open(*a0) : sipCpp->open(*a0));
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_open, doc_QBuffer_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_close, "close(self)");

extern "C" {static PyObject *meth_QBuffer_close(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QBuffer::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_close, doc_QBuffer_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_size, "size(self) -> int");

extern "C" {static PyObject *meth_QBuffer_size(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBuffer::size() : sipCpp->size());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_size, doc_QBuffer_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_pos, "pos(self) -> int");

extern "C" {static PyObject *meth_QBuffer_pos(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBuffer::pos() : sipCpp->pos());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_pos, doc_QBuffer_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_seek, "seek(self, int) -> bool");

extern "C" {static PyObject *meth_QBuffer_seek(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QBuffer, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBuffer::seek(a0) : sipCpp->seek(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_seek, doc_QBuffer_seek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QBuffer_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBuffer::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_atEnd, doc_QBuffer_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QBuffer_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBuffer, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBuffer::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_canReadLine, doc_QBuffer_canReadLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QBuffer_readData(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QBuffer, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 49 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbuffer.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QBuffer::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 66978 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_readData, doc_QBuffer_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QBuffer_writeData(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QBuffer, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QBuffer::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_writeData, doc_QBuffer_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QBuffer_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QBuffer::connectNotify(*a0) : sipCpp->connectNotify(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_connectNotify, doc_QBuffer_connectNotify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBuffer_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QBuffer_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QBuffer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
         ::QBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QBuffer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QBuffer::disconnectNotify(*a0) : sipCpp->disconnectNotify(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBuffer, sipName_disconnectNotify, doc_QBuffer_disconnectNotify);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBuffer(void *, const sipTypeDef *);}
static void *cast_QBuffer(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBuffer *sipCpp = reinterpret_cast< ::QBuffer *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBuffer(void *, int);}
static void release_QBuffer(void *sipCppV, int)
{
     ::QBuffer *sipCpp = reinterpret_cast< ::QBuffer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBuffer(sipSimpleWrapper *);}
static void dealloc_QBuffer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBuffer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBuffer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBuffer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBuffer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBuffer *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBuffer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QByteArray* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QByteArray, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBuffer(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBuffer[] = {{95, 255, 1}};


static PyMethodDef methods_QBuffer[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QBuffer_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_atEnd)},
    {SIP_MLNAME_CAST(sipName_buffer), meth_QBuffer_buffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_buffer)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QBuffer_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QBuffer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_close)},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QBuffer_connectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_connectNotify)},
    {SIP_MLNAME_CAST(sipName_data), meth_QBuffer_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_data)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QBuffer_disconnectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_disconnectNotify)},
    {SIP_MLNAME_CAST(sipName_open), meth_QBuffer_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_open)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QBuffer_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_pos)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QBuffer_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_readData)},
    {SIP_MLNAME_CAST(sipName_seek), meth_QBuffer_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_seek)},
    {SIP_MLNAME_CAST(sipName_setBuffer), meth_QBuffer_setBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_setBuffer)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QBuffer_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_setData)},
    {SIP_MLNAME_CAST(sipName_size), meth_QBuffer_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_size)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QBuffer_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBuffer_writeData)}
};

PyDoc_STRVAR(doc_QBuffer, "\1QBuffer(parent: QObject = None)\n"
"QBuffer(QByteArray, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QBuffer = {
    & ::QBuffer::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QBuffer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBuffer,
        {SIP_NULLPTR},
        &plugin_QBuffer
    },
    {
        sipNameNr_QBuffer,
        {0, 0, 1},
        15, methods_QBuffer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBuffer,
    -1,
    -1,
    supers_QBuffer,
    SIP_NULLPTR,
    init_type_QBuffer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBuffer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBuffer,
    cast_QBuffer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 67259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 67263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 67266 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 67269 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 67272 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 67275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67281 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67284 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 67287 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 67290 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 67293 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 67299 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67302 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 67305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 67308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 67311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQIODevice : public  ::QIODevice
{
public:
    sipQIODevice();
    sipQIODevice( ::QObject*);
    virtual ~sipQIODevice();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQIODevice(const sipQIODevice &);
    sipQIODevice &operator = (const sipQIODevice &);

    char sipPyMethods[23];
};

sipQIODevice::sipQIODevice():  ::QIODevice(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIODevice::sipQIODevice( ::QObject*a0):  ::QIODevice(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIODevice::~sipQIODevice()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQIODevice::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QIODevice);

    return  ::QIODevice::metaObject();
}

int sipQIODevice::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QIODevice::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QIODevice,_c,_id,_a);

    return _id;
}

void *sipQIODevice::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QIODevice, _clname, &sipCpp) ? sipCpp :  ::QIODevice::qt_metacast(_clname));
}

 ::qint64 sipQIODevice::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QIODevice,sipName_writeData);

    if (!sipMeth)
        return 0;

    extern  ::qint64 sipVH_QtCore_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtCore_49(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQIODevice::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QIODevice::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtCore_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_48(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQIODevice::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QIODevice,sipName_readData);

    if (!sipMeth)
        return 0;

    extern  ::qint64 sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQIODevice::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QIODevice::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIODevice::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QIODevice::waitForReadyRead(a0);

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIODevice::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QIODevice::canReadLine();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQIODevice::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QIODevice::bytesToWrite();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQIODevice::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QIODevice::bytesAvailable();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QIODevice::reset();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QIODevice::atEnd();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QIODevice::seek(a0);

    extern bool sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQIODevice::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QIODevice::size();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::qint64 sipQIODevice::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QIODevice::pos();

    extern  ::qint64 sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQIODevice::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QIODevice::close();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QIODevice::open(a0);

    extern bool sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIODevice::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QIODevice::isSequential();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QIODevice::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIODevice::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QIODevice::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQIODevice::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QIODevice::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIODevice::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QIODevice::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIODevice::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QIODevice::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIODevice::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QIODevice::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIODevice::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QIODevice::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QIODevice_openMode, "openMode(self) -> QIODevice.OpenMode");

extern "C" {static PyObject *meth_QIODevice_openMode(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_openMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
             ::QIODevice::OpenMode*sipRes;

            sipRes = new  ::QIODevice::OpenMode(sipCpp->openMode());

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_openMode, doc_QIODevice_openMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_setTextModeEnabled, "setTextModeEnabled(self, bool)");

extern "C" {static PyObject *meth_QIODevice_setTextModeEnabled(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_setTextModeEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            sipCpp->setTextModeEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_setTextModeEnabled, doc_QIODevice_setTextModeEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_isTextModeEnabled, "isTextModeEnabled(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_isTextModeEnabled(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isTextModeEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTextModeEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isTextModeEnabled, doc_QIODevice_isTextModeEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_isOpen, "isOpen(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isOpen, doc_QIODevice_isOpen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_isReadable, "isReadable(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isReadable, doc_QIODevice_isReadable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isWritable, doc_QIODevice_isWritable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isSequential, doc_QIODevice_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_open, "open(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag]) -> bool");

extern "C" {static PyObject *meth_QIODevice_open(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_open, doc_QIODevice_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_close, "close(self)");

extern "C" {static PyObject *meth_QIODevice_close(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QIODevice::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_close, doc_QIODevice_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_pos, "pos(self) -> int");

extern "C" {static PyObject *meth_QIODevice_pos(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::pos() : sipCpp->pos());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_pos, doc_QIODevice_pos);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_size, "size(self) -> int");

extern "C" {static PyObject *meth_QIODevice_size(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::size() : sipCpp->size());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_size, doc_QIODevice_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_seek, "seek(self, int) -> bool");

extern "C" {static PyObject *meth_QIODevice_seek(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::seek(a0) : sipCpp->seek(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_seek, doc_QIODevice_seek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_atEnd, doc_QIODevice_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_reset, "reset(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_reset(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::reset() : sipCpp->reset());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_reset, doc_QIODevice_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QIODevice_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_bytesAvailable, doc_QIODevice_bytesAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QIODevice_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_bytesToWrite, doc_QIODevice_bytesToWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_read, "read(self, int) -> bytes");

extern "C" {static PyObject *meth_QIODevice_read(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 70 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 68283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_read, doc_QIODevice_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_readAll, "readAll(self) -> QByteArray");

extern "C" {static PyObject *meth_QIODevice_readAll(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readAll, doc_QIODevice_readAll);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_readLine, "readLine(self, maxlen: int = 0) -> bytes");

extern "C" {static PyObject *meth_QIODevice_readLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0 = 0;
         ::QIODevice *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxlen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|n", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
        // The two C++ overloads would have the same Python signature so we get most of
        // the combined functionality by treating an argument of 0 (the default) as
        // meaning return a QByteArray of any length.  Otherwise it is treated as a
        // maximum buffer size and a Python string is returned.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else if (a0 == 0)
        {
            QByteArray *ba;
        
            Py_BEGIN_ALLOW_THREADS
            ba = new QByteArray(sipCpp->readLine(a0));
            Py_END_ALLOW_THREADS
        
            sipRes = sipBuildResult(&sipIsErr, "N", ba, sipType_QByteArray, 0);
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->readLine(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 68394 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readLine, doc_QIODevice_readLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_canReadLine, doc_QIODevice_canReadLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_peek, "peek(self, int) -> QByteArray");

extern "C" {static PyObject *meth_QIODevice_peek(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_peek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->peek(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_peek, doc_QIODevice_peek);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_write, "write(self, Union[QByteArray, bytes, bytearray]) -> int");

extern "C" {static PyObject *meth_QIODevice_write(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->write(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_write, doc_QIODevice_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_waitForReadyRead, "waitForReadyRead(self, int) -> bool");

extern "C" {static PyObject *meth_QIODevice_waitForReadyRead(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_waitForReadyRead, doc_QIODevice_waitForReadyRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_waitForBytesWritten, "waitForBytesWritten(self, int) -> bool");

extern "C" {static PyObject *meth_QIODevice_waitForBytesWritten(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QIODevice::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_waitForBytesWritten, doc_QIODevice_waitForBytesWritten);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_ungetChar, "ungetChar(self, str)");

extern "C" {static PyObject *meth_QIODevice_ungetChar(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_ungetChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BaA", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            sipCpp->ungetChar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_ungetChar, doc_QIODevice_ungetChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_putChar, "putChar(self, str) -> bool");

extern "C" {static PyObject *meth_QIODevice_putChar(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_putChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BaA", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->putChar(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_putChar, doc_QIODevice_putChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_getChar, "getChar(self) -> Tuple[bool, str]");

extern "C" {static PyObject *meth_QIODevice_getChar(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_getChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        char a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getChar(&a0);

            return sipBuildResult(0,"(bc)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_getChar, doc_QIODevice_getChar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QIODevice_errorString(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_errorString, doc_QIODevice_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QIODevice_readData(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::qint64 a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QIODevice, sipName_readData);
                return SIP_NULLPTR;
            }

#line 169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtect_readData(s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 68740 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readData, doc_QIODevice_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_readLineData, "readLineData(self, int) -> bytes");

extern "C" {static PyObject *meth_QIODevice_readLineData(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readLineData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QIODevice::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 68809 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readLineData, doc_QIODevice_readLineData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QIODevice_writeData(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QIODevice, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QIODevice, sipName_writeData);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->writeData(a0,(PY_LONG_LONG)a1);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_writeData, doc_QIODevice_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_setOpenMode, "setOpenMode(self, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])");

extern "C" {static PyObject *meth_QIODevice_setOpenMode(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_setOpenMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice::OpenMode* a0;
        int a0State = 0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp->setOpenMode(*a0);
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_setOpenMode, doc_QIODevice_setOpenMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_setErrorString, "setErrorString(self, str)");

extern "C" {static PyObject *meth_QIODevice_setErrorString(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_setErrorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setErrorString(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_setErrorString, doc_QIODevice_setErrorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_readChannelCount, "readChannelCount(self) -> int");

extern "C" {static PyObject *meth_QIODevice_readChannelCount(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readChannelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->readChannelCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readChannelCount, doc_QIODevice_readChannelCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_writeChannelCount, "writeChannelCount(self) -> int");

extern "C" {static PyObject *meth_QIODevice_writeChannelCount(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_writeChannelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->writeChannelCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_writeChannelCount, doc_QIODevice_writeChannelCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_currentReadChannel, "currentReadChannel(self) -> int");

extern "C" {static PyObject *meth_QIODevice_currentReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_currentReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentReadChannel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_currentReadChannel, doc_QIODevice_currentReadChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_setCurrentReadChannel, "setCurrentReadChannel(self, int)");

extern "C" {static PyObject *meth_QIODevice_setCurrentReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_setCurrentReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            sipCpp->setCurrentReadChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_setCurrentReadChannel, doc_QIODevice_setCurrentReadChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_currentWriteChannel, "currentWriteChannel(self) -> int");

extern "C" {static PyObject *meth_QIODevice_currentWriteChannel(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_currentWriteChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentWriteChannel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_currentWriteChannel, doc_QIODevice_currentWriteChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_setCurrentWriteChannel, "setCurrentWriteChannel(self, int)");

extern "C" {static PyObject *meth_QIODevice_setCurrentWriteChannel(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_setCurrentWriteChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            sipCpp->setCurrentWriteChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_setCurrentWriteChannel, doc_QIODevice_setCurrentWriteChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_startTransaction, "startTransaction(self)");

extern "C" {static PyObject *meth_QIODevice_startTransaction(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_startTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            sipCpp->startTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_startTransaction, doc_QIODevice_startTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_commitTransaction, "commitTransaction(self)");

extern "C" {static PyObject *meth_QIODevice_commitTransaction(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_commitTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            sipCpp->commitTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_commitTransaction, doc_QIODevice_commitTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_rollbackTransaction, "rollbackTransaction(self)");

extern "C" {static PyObject *meth_QIODevice_rollbackTransaction(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_rollbackTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            sipCpp->rollbackTransaction();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_rollbackTransaction, doc_QIODevice_rollbackTransaction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_isTransactionStarted, "isTransactionStarted(self) -> bool");

extern "C" {static PyObject *meth_QIODevice_isTransactionStarted(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isTransactionStarted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTransactionStarted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isTransactionStarted, doc_QIODevice_isTransactionStarted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QIODevice_skip, "skip(self, int) -> int");

extern "C" {static PyObject *meth_QIODevice_skip(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_skip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->skip(a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_skip, doc_QIODevice_skip);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QIODevice(void *, const sipTypeDef *);}
static void *cast_QIODevice(void *sipCppV, const sipTypeDef *targetType)
{
     ::QIODevice *sipCpp = reinterpret_cast< ::QIODevice *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIODevice(void *, int);}
static void release_QIODevice(void *sipCppV, int)
{
     ::QIODevice *sipCpp = reinterpret_cast< ::QIODevice *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QIODevice(sipSimpleWrapper *);}
static void dealloc_QIODevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQIODevice *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QIODevice(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QIODevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIODevice(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQIODevice *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQIODevice();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQIODevice(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QIODevice[] = {{183, 255, 1}};


static PyMethodDef methods_QIODevice[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QIODevice_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_atEnd)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QIODevice_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QIODevice_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QIODevice_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QIODevice_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_close)},
    {SIP_MLNAME_CAST(sipName_commitTransaction), meth_QIODevice_commitTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_commitTransaction)},
    {SIP_MLNAME_CAST(sipName_currentReadChannel), meth_QIODevice_currentReadChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_currentReadChannel)},
    {SIP_MLNAME_CAST(sipName_currentWriteChannel), meth_QIODevice_currentWriteChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_currentWriteChannel)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QIODevice_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_errorString)},
    {SIP_MLNAME_CAST(sipName_getChar), meth_QIODevice_getChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_getChar)},
    {SIP_MLNAME_CAST(sipName_isOpen), meth_QIODevice_isOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isOpen)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QIODevice_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isReadable)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QIODevice_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isSequential)},
    {SIP_MLNAME_CAST(sipName_isTextModeEnabled), meth_QIODevice_isTextModeEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isTextModeEnabled)},
    {SIP_MLNAME_CAST(sipName_isTransactionStarted), meth_QIODevice_isTransactionStarted, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isTransactionStarted)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QIODevice_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isWritable)},
    {SIP_MLNAME_CAST(sipName_open), meth_QIODevice_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_open)},
    {SIP_MLNAME_CAST(sipName_openMode), meth_QIODevice_openMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_openMode)},
    {SIP_MLNAME_CAST(sipName_peek), meth_QIODevice_peek, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_peek)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QIODevice_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_pos)},
    {SIP_MLNAME_CAST(sipName_putChar), meth_QIODevice_putChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_putChar)},
    {SIP_MLNAME_CAST(sipName_read), meth_QIODevice_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_read)},
    {SIP_MLNAME_CAST(sipName_readAll), meth_QIODevice_readAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_readAll)},
    {SIP_MLNAME_CAST(sipName_readChannelCount), meth_QIODevice_readChannelCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_readChannelCount)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QIODevice_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_readData)},
    {SIP_MLNAME_CAST(sipName_readLine), SIP_MLMETH_CAST(meth_QIODevice_readLine), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIODevice_readLine)},
    {SIP_MLNAME_CAST(sipName_readLineData), meth_QIODevice_readLineData, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_readLineData)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QIODevice_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_reset)},
    {SIP_MLNAME_CAST(sipName_rollbackTransaction), meth_QIODevice_rollbackTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_rollbackTransaction)},
    {SIP_MLNAME_CAST(sipName_seek), meth_QIODevice_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_seek)},
    {SIP_MLNAME_CAST(sipName_setCurrentReadChannel), meth_QIODevice_setCurrentReadChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_setCurrentReadChannel)},
    {SIP_MLNAME_CAST(sipName_setCurrentWriteChannel), meth_QIODevice_setCurrentWriteChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_setCurrentWriteChannel)},
    {SIP_MLNAME_CAST(sipName_setErrorString), meth_QIODevice_setErrorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_setErrorString)},
    {SIP_MLNAME_CAST(sipName_setOpenMode), meth_QIODevice_setOpenMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_setOpenMode)},
    {SIP_MLNAME_CAST(sipName_setTextModeEnabled), meth_QIODevice_setTextModeEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_setTextModeEnabled)},
    {SIP_MLNAME_CAST(sipName_size), meth_QIODevice_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_size)},
    {SIP_MLNAME_CAST(sipName_skip), meth_QIODevice_skip, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_skip)},
    {SIP_MLNAME_CAST(sipName_startTransaction), meth_QIODevice_startTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_startTransaction)},
    {SIP_MLNAME_CAST(sipName_ungetChar), meth_QIODevice_ungetChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_ungetChar)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), meth_QIODevice_waitForBytesWritten, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), meth_QIODevice_waitForReadyRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_write), meth_QIODevice_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_write)},
    {SIP_MLNAME_CAST(sipName_writeChannelCount), meth_QIODevice_writeChannelCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_writeChannelCount)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QIODevice_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_writeData)}
};

static sipEnumMemberDef enummembers_QIODevice[] = {
    {sipName_Append, static_cast<int>( ::QIODevice::Append), 97},
    {sipName_ExistingOnly, static_cast<int>( ::QIODevice::ExistingOnly), 97},
    {sipName_NewOnly, static_cast<int>( ::QIODevice::NewOnly), 97},
    {sipName_NotOpen, static_cast<int>( ::QIODevice::NotOpen), 97},
    {sipName_ReadOnly, static_cast<int>( ::QIODevice::ReadOnly), 97},
    {sipName_ReadWrite, static_cast<int>( ::QIODevice::ReadWrite), 97},
    {sipName_Text, static_cast<int>( ::QIODevice::Text), 97},
    {sipName_Truncate, static_cast<int>( ::QIODevice::Truncate), 97},
    {sipName_Unbuffered, static_cast<int>( ::QIODevice::Unbuffered), 97},
    {sipName_WriteOnly, static_cast<int>( ::QIODevice::WriteOnly), 97},
};

PyDoc_STRVAR(doc_QIODevice, "\1QIODevice()\n"
"QIODevice(QObject)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QIODevice[] = {
    {"channelBytesWritten(int,qint64)", "\1channelBytesWritten(self, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"channelReadyRead(int)", "\1channelReadyRead(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"readChannelFinished()", "\1readChannelFinished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"aboutToClose()", "\1aboutToClose(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"bytesWritten(qint64)", "\1bytesWritten(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"readyRead()", "\1readyRead(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QIODevice = {
    & ::QIODevice::staticMetaObject,
    0,
    signals_QIODevice,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QIODevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QIODevice,
        {SIP_NULLPTR},
        &plugin_QIODevice
    },
    {
        sipNameNr_QIODevice,
        {0, 0, 1},
        44, methods_QIODevice,
        10, enummembers_QIODevice,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QIODevice,
    -1,
    -1,
    supers_QIODevice,
    SIP_NULLPTR,
    init_type_QIODevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QIODevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QIODevice,
    cast_QIODevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 69441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbitarray.sip"
// This is needed by __hash__().
#include <qhash.h>
#line 69446 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QBitArray_size, "size(self) -> int");

extern "C" {static PyObject *meth_QBitArray_size(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitArray, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_size, doc_QBitArray_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_count, "count(self) -> int\n"
"count(self, bool) -> int");

extern "C" {static PyObject *meth_QBitArray_count(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitArray, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        bool a0;
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QBitArray, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->count(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_count, doc_QBitArray_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QBitArray_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitArray, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_isEmpty, doc_QBitArray_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QBitArray_isNull(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitArray, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_isNull, doc_QBitArray_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_resize, "resize(self, int)");

extern "C" {static PyObject *meth_QBitArray_resize(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBitArray, &sipCpp, &a0))
        {
            sipCpp->resize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_resize, doc_QBitArray_resize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_detach, "detach(self)");

extern "C" {static PyObject *meth_QBitArray_detach(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitArray, &sipCpp))
        {
            sipCpp->detach();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_detach, doc_QBitArray_detach);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_isDetached, "isDetached(self) -> bool");

extern "C" {static PyObject *meth_QBitArray_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitArray, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDetached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_isDetached, doc_QBitArray_isDetached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_clear, "clear(self)");

extern "C" {static PyObject *meth_QBitArray_clear(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitArray, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_clear, doc_QBitArray_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_fill, "fill(self, bool, int, int)\n"
"fill(self, bool, size: int = -1) -> bool");

extern "C" {static PyObject *meth_QBitArray_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBitArray_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        int a1;
        int a2;
         ::QBitArray *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "Bbii", &sipSelf, sipType_QBitArray, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->fill(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        bool a0;
        int a1 = -1;
         ::QBitArray *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb|i", &sipSelf, sipType_QBitArray, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->fill(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_fill, doc_QBitArray_fill);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_truncate, "truncate(self, int)");

extern "C" {static PyObject *meth_QBitArray_truncate(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_truncate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBitArray, &sipCpp, &a0))
        {
            sipCpp->truncate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_truncate, doc_QBitArray_truncate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_testBit, "testBit(self, int) -> bool");

extern "C" {static PyObject *meth_QBitArray_testBit(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_testBit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBitArray, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testBit(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_testBit, doc_QBitArray_testBit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_setBit, "setBit(self, int)\n"
"setBit(self, int, bool)");

extern "C" {static PyObject *meth_QBitArray_setBit(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_setBit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBitArray, &sipCpp, &a0))
        {
            sipCpp->setBit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        bool a1;
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QBitArray, &sipCpp, &a0, &a1))
        {
            sipCpp->setBit(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_setBit, doc_QBitArray_setBit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_clearBit, "clearBit(self, int)");

extern "C" {static PyObject *meth_QBitArray_clearBit(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_clearBit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBitArray, &sipCpp, &a0))
        {
            sipCpp->clearBit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_clearBit, doc_QBitArray_clearBit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_toggleBit, "toggleBit(self, int) -> bool");

extern "C" {static PyObject *meth_QBitArray_toggleBit(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_toggleBit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBitArray, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->toggleBit(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_toggleBit, doc_QBitArray_toggleBit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_at, "at(self, int) -> bool");

extern "C" {static PyObject *meth_QBitArray_at(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBitArray, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->at(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_at, doc_QBitArray_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_swap, "swap(self, QBitArray)");

extern "C" {static PyObject *meth_QBitArray_swap(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBitArray* a0;
         ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBitArray, &sipCpp, sipType_QBitArray, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_swap, doc_QBitArray_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_bits, "bits(self) -> bytes");

extern "C" {static PyObject *meth_QBitArray_bits(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_bits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBitArray, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 81 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbitarray.sip"
        return PyBytes_FromStringAndSize(sipCpp->bits(), (sipCpp->size() + 7) / 8);
#line 69971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_bits, doc_QBitArray_bits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBitArray_fromBits, "fromBits(str, int) -> QBitArray");

extern "C" {static PyObject *meth_QBitArray_fromBits(PyObject *, PyObject *);}
static PyObject *meth_QBitArray_fromBits(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        SIP_SSIZE_T a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0, &a1))
        {
             ::QBitArray*sipRes;

            sipRes = new  ::QBitArray( ::QBitArray::fromBits(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QBitArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName_fromBits, doc_QBitArray_fromBits);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QBitArray___or__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray* a0;
        const  ::QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QBitArray, &a0, sipType_QBitArray, &a1))
        {
             ::QBitArray*sipRes;

            sipRes = new  ::QBitArray((*a0 | *a1));

            return sipConvertFromNewType(sipRes,sipType_QBitArray,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBitArray___and__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray* a0;
        const  ::QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QBitArray, &a0, sipType_QBitArray, &a1))
        {
             ::QBitArray*sipRes;

            sipRes = new  ::QBitArray((*a0 & *a1));

            return sipConvertFromNewType(sipRes,sipType_QBitArray,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBitArray___xor__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray* a0;
        const  ::QBitArray* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QBitArray, &a0, sipType_QBitArray, &a1))
        {
             ::QBitArray*sipRes;

            sipRes = new  ::QBitArray((*a0 ^ *a1));

            return sipConvertFromNewType(sipRes,sipType_QBitArray,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static long slot_QBitArray___hash__(PyObject *);}
static long slot_QBitArray___hash__(PyObject *sipSelf)
{
     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 74 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbitarray.sip"
        sipRes = qHash(*sipCpp);
#line 70112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBitArray___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            bool sipRes = 0;
            int sipIsErr = 0;

#line 63 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbitarray.sip"
        Py_ssize_t idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = sipCpp->operator[]((int)idx);
#line 70147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipIsErr)
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBitArray, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QBitArray___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBitArray, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBitArray::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QBitArray, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBitArray___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBitArray, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBitArray::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QBitArray, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBitArray___invert__(PyObject *);}
static PyObject *slot_QBitArray___invert__(PyObject *sipSelf)
{
     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QBitArray*sipRes;

            sipRes = new  ::QBitArray(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QBitArray,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBitArray___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBitArray)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBitArray, &a0))
        {
            sipCpp-> ::QBitArray::operator^=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBitArray___ior__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBitArray)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBitArray, &a0))
        {
            sipCpp-> ::QBitArray::operator|=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBitArray___iand__(PyObject *,PyObject *);}
static PyObject *slot_QBitArray___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBitArray)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBitArray* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBitArray, &a0))
        {
            sipCpp-> ::QBitArray::operator&=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static SIP_SSIZE_T slot_QBitArray___len__(PyObject *);}
static SIP_SSIZE_T slot_QBitArray___len__(PyObject *sipSelf)
{
     ::QBitArray *sipCpp = reinterpret_cast< ::QBitArray *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBitArray));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 70385 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBitArray(void *, int);}
static void release_QBitArray(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBitArray *>(sipCppV);
}


extern "C" {static void assign_QBitArray(void *, SIP_SSIZE_T, void *);}
static void assign_QBitArray(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBitArray *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBitArray *>(sipSrc);
}


extern "C" {static void *array_QBitArray(SIP_SSIZE_T);}
static void *array_QBitArray(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBitArray[sipNrElem];
}


extern "C" {static void *copy_QBitArray(const void *, SIP_SSIZE_T);}
static void *copy_QBitArray(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBitArray(reinterpret_cast<const  ::QBitArray *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBitArray(sipSimpleWrapper *);}
static void dealloc_QBitArray(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBitArray(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBitArray(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBitArray(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBitArray *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBitArray();

            return sipCpp;
        }
    }

    {
        int a0;
        bool a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_value,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "i|b", &a0, &a1))
        {
            sipCpp = new  ::QBitArray(a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QBitArray* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBitArray, &a0))
        {
            sipCpp = new  ::QBitArray(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBitArray[] = {
    {(void *)slot_QBitArray___or__, or_slot},
    {(void *)slot_QBitArray___and__, and_slot},
    {(void *)slot_QBitArray___xor__, xor_slot},
    {(void *)slot_QBitArray___hash__, hash_slot},
    {(void *)slot_QBitArray___getitem__, getitem_slot},
    {(void *)slot_QBitArray___ne__, ne_slot},
    {(void *)slot_QBitArray___eq__, eq_slot},
    {(void *)slot_QBitArray___invert__, invert_slot},
    {(void *)slot_QBitArray___ixor__, ixor_slot},
    {(void *)slot_QBitArray___ior__, ior_slot},
    {(void *)slot_QBitArray___iand__, iand_slot},
    {(void *)slot_QBitArray___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QBitArray[] = {
    {SIP_MLNAME_CAST(sipName_at), meth_QBitArray_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_at)},
    {SIP_MLNAME_CAST(sipName_bits), meth_QBitArray_bits, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_bits)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QBitArray_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_clear)},
    {SIP_MLNAME_CAST(sipName_clearBit), meth_QBitArray_clearBit, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_clearBit)},
    {SIP_MLNAME_CAST(sipName_count), meth_QBitArray_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_count)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QBitArray_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_detach)},
    {SIP_MLNAME_CAST(sipName_fill), SIP_MLMETH_CAST(meth_QBitArray_fill), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBitArray_fill)},
    {SIP_MLNAME_CAST(sipName_fromBits), meth_QBitArray_fromBits, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_fromBits)},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QBitArray_isDetached, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_isDetached)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QBitArray_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QBitArray_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_isNull)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QBitArray_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_resize)},
    {SIP_MLNAME_CAST(sipName_setBit), meth_QBitArray_setBit, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_setBit)},
    {SIP_MLNAME_CAST(sipName_size), meth_QBitArray_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_size)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QBitArray_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_swap)},
    {SIP_MLNAME_CAST(sipName_testBit), meth_QBitArray_testBit, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_testBit)},
    {SIP_MLNAME_CAST(sipName_toggleBit), meth_QBitArray_toggleBit, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_toggleBit)},
    {SIP_MLNAME_CAST(sipName_truncate), meth_QBitArray_truncate, METH_VARARGS, SIP_MLDOC_CAST(doc_QBitArray_truncate)}
};

PyDoc_STRVAR(doc_QBitArray, "\1QBitArray()\n"
"QBitArray(int, value: bool = False)\n"
"QBitArray(QBitArray)");


static pyqt5ClassPluginDef plugin_QBitArray = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QBitArray = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBitArray,
        {SIP_NULLPTR},
        &plugin_QBitArray
    },
    {
        sipNameNr_QBitArray,
        {0, 0, 1},
        18, methods_QBitArray,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBitArray,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QBitArray,
    init_type_QBitArray,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBitArray,
    assign_QBitArray,
    array_QBitArray,
    copy_QBitArray,
    release_QBitArray,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbasictimer.sip"
#include <qbasictimer.h>
#line 70586 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 70593 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QBasicTimer_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QBasicTimer_isActive(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_isActive, doc_QBasicTimer_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBasicTimer_timerId, "timerId(self) -> int");

extern "C" {static PyObject *meth_QBasicTimer_timerId(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_timerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->timerId();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_timerId, doc_QBasicTimer_timerId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBasicTimer_start, "start(self, int, Qt.TimerType, QObject)\n"
"start(self, int, QObject)");

extern "C" {static PyObject *meth_QBasicTimer_start(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TimerType a1;
         ::QObject* a2;
         ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEJ8", &sipSelf, sipType_QBasicTimer, &sipCpp, &a0, sipType_Qt_TimerType, &a1, sipType_QObject, &a2))
        {
            sipCpp->start(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QObject* a1;
         ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QBasicTimer, &sipCpp, &a0, sipType_QObject, &a1))
        {
            sipCpp->start(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_start, doc_QBasicTimer_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBasicTimer_stop, "stop(self)");

extern "C" {static PyObject *meth_QBasicTimer_stop(PyObject *, PyObject *);}
static PyObject *meth_QBasicTimer_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBasicTimer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBasicTimer, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBasicTimer, sipName_stop, doc_QBasicTimer_stop);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBasicTimer(void *, int);}
static void release_QBasicTimer(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBasicTimer *>(sipCppV);
}


extern "C" {static void assign_QBasicTimer(void *, SIP_SSIZE_T, void *);}
static void assign_QBasicTimer(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBasicTimer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBasicTimer *>(sipSrc);
}


extern "C" {static void *array_QBasicTimer(SIP_SSIZE_T);}
static void *array_QBasicTimer(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBasicTimer[sipNrElem];
}


extern "C" {static void *copy_QBasicTimer(const void *, SIP_SSIZE_T);}
static void *copy_QBasicTimer(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBasicTimer(reinterpret_cast<const  ::QBasicTimer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBasicTimer(sipSimpleWrapper *);}
static void dealloc_QBasicTimer(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBasicTimer(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBasicTimer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBasicTimer(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBasicTimer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBasicTimer();

            return sipCpp;
        }
    }

    {
        const  ::QBasicTimer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBasicTimer, &a0))
        {
            sipCpp = new  ::QBasicTimer(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QBasicTimer[] = {
    {SIP_MLNAME_CAST(sipName_isActive), meth_QBasicTimer_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QBasicTimer_isActive)},
    {SIP_MLNAME_CAST(sipName_start), meth_QBasicTimer_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QBasicTimer_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QBasicTimer_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QBasicTimer_stop)},
    {SIP_MLNAME_CAST(sipName_timerId), meth_QBasicTimer_timerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QBasicTimer_timerId)}
};

PyDoc_STRVAR(doc_QBasicTimer, "\1QBasicTimer()\n"
"QBasicTimer(QBasicTimer)");


static pyqt5ClassPluginDef plugin_QBasicTimer = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QBasicTimer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBasicTimer,
        {SIP_NULLPTR},
        &plugin_QBasicTimer
    },
    {
        sipNameNr_QBasicTimer,
        {0, 0, 1},
        4, methods_QBasicTimer,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBasicTimer,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QBasicTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBasicTimer,
    assign_QBasicTimer,
    array_QBasicTimer,
    copy_QBasicTimer,
    release_QBasicTimer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 70865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 70869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70872 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 70875 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 70878 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70881 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70884 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 70887 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70890 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 70893 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 70896 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 70899 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70902 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 70905 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70908 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 70911 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 70914 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 70917 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAnimationGroup : public  ::QAnimationGroup
{
public:
    sipQAnimationGroup( ::QObject*);
    virtual ~sipQAnimationGroup();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAnimationGroup(const sipQAnimationGroup &);
    sipQAnimationGroup &operator = (const sipQAnimationGroup &);

    char sipPyMethods[11];
};

sipQAnimationGroup::sipQAnimationGroup( ::QObject*a0):  ::QAnimationGroup(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAnimationGroup::~sipQAnimationGroup()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAnimationGroup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAnimationGroup);

    return  ::QAnimationGroup::metaObject();
}

int sipQAnimationGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAnimationGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAnimationGroup,_c,_id,_a);

    return _id;
}

void *sipQAnimationGroup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAnimationGroup, _clname, &sipCpp) ? sipCpp :  ::QAnimationGroup::qt_metacast(_clname));
}

void sipQAnimationGroup::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAnimationGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAnimationGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAnimationGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAnimationGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAnimationGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAnimationGroup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAnimationGroup::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAnimationGroup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAnimationGroup::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAnimationGroup::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QAnimationGroup,sipName_duration);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAnimationGroup::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QAnimationGroup,sipName_updateCurrentTime);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAnimationGroup::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_updateState);

    if (!sipMeth)
    {
         ::QAnimationGroup::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAnimationGroup::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QAnimationGroup::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAnimationGroup_animationAt, "animationAt(self, int) -> QAbstractAnimation");

extern "C" {static PyObject *meth_QAnimationGroup_animationAt(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_animationAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAnimationGroup, &sipCpp, &a0))
        {
             ::QAbstractAnimation*sipRes;

            sipRes = sipCpp->animationAt(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractAnimation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_animationAt, doc_QAnimationGroup_animationAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAnimationGroup_animationCount, "animationCount(self) -> int");

extern "C" {static PyObject *meth_QAnimationGroup_animationCount(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_animationCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAnimationGroup, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->animationCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_animationCount, doc_QAnimationGroup_animationCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAnimationGroup_indexOfAnimation, "indexOfAnimation(self, QAbstractAnimation) -> int");

extern "C" {static PyObject *meth_QAnimationGroup_indexOfAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_indexOfAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
        const  ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QAbstractAnimation, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfAnimation(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_indexOfAnimation, doc_QAnimationGroup_indexOfAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAnimationGroup_addAnimation, "addAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAnimationGroup_addAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_addAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QAbstractAnimation, &a0))
        {
            sipCpp->addAnimation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_addAnimation, doc_QAnimationGroup_addAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAnimationGroup_insertAnimation, "insertAnimation(self, int, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAnimationGroup_insertAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_insertAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QAbstractAnimation* a1;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QAnimationGroup, &sipCpp, &a0, sipType_QAbstractAnimation, &a1))
        {
            sipCpp->insertAnimation(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_insertAnimation, doc_QAnimationGroup_insertAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAnimationGroup_removeAnimation, "removeAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAnimationGroup_removeAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_removeAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QAbstractAnimation, &a0))
        {
            sipCpp->removeAnimation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_removeAnimation, doc_QAnimationGroup_removeAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAnimationGroup_takeAnimation, "takeAnimation(self, int) -> QAbstractAnimation");

extern "C" {static PyObject *meth_QAnimationGroup_takeAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_takeAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAnimationGroup, &sipCpp, &a0))
        {
             ::QAbstractAnimation*sipRes;

            sipRes = sipCpp->takeAnimation(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractAnimation,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_takeAnimation, doc_QAnimationGroup_takeAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAnimationGroup_clear, "clear(self)");

extern "C" {static PyObject *meth_QAnimationGroup_clear(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAnimationGroup, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_clear, doc_QAnimationGroup_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAnimationGroup_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAnimationGroup_event(PyObject *, PyObject *);}
static PyObject *meth_QAnimationGroup_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAnimationGroup, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAnimationGroup::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAnimationGroup, sipName_event, doc_QAnimationGroup_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAnimationGroup(void *, const sipTypeDef *);}
static void *cast_QAnimationGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAnimationGroup *sipCpp = reinterpret_cast< ::QAnimationGroup *>(sipCppV);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAnimationGroup(void *, int);}
static void release_QAnimationGroup(void *sipCppV, int)
{
     ::QAnimationGroup *sipCpp = reinterpret_cast< ::QAnimationGroup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAnimationGroup(sipSimpleWrapper *);}
static void dealloc_QAnimationGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAnimationGroup *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAnimationGroup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAnimationGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAnimationGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAnimationGroup *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAnimationGroup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAnimationGroup[] = {{0, 255, 1}};


static PyMethodDef methods_QAnimationGroup[] = {
    {SIP_MLNAME_CAST(sipName_addAnimation), meth_QAnimationGroup_addAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_addAnimation)},
    {SIP_MLNAME_CAST(sipName_animationAt), meth_QAnimationGroup_animationAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_animationAt)},
    {SIP_MLNAME_CAST(sipName_animationCount), meth_QAnimationGroup_animationCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_animationCount)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QAnimationGroup_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_clear)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAnimationGroup_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_event)},
    {SIP_MLNAME_CAST(sipName_indexOfAnimation), meth_QAnimationGroup_indexOfAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_indexOfAnimation)},
    {SIP_MLNAME_CAST(sipName_insertAnimation), meth_QAnimationGroup_insertAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_insertAnimation)},
    {SIP_MLNAME_CAST(sipName_removeAnimation), meth_QAnimationGroup_removeAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_removeAnimation)},
    {SIP_MLNAME_CAST(sipName_takeAnimation), meth_QAnimationGroup_takeAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAnimationGroup_takeAnimation)}
};

PyDoc_STRVAR(doc_QAnimationGroup, "\1QAnimationGroup(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QAnimationGroup = {
    & ::QAnimationGroup::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAnimationGroup = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAnimationGroup,
        {SIP_NULLPTR},
        &plugin_QAnimationGroup
    },
    {
        sipNameNr_QAnimationGroup,
        {0, 0, 1},
        9, methods_QAnimationGroup,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAnimationGroup,
    -1,
    -1,
    supers_QAnimationGroup,
    SIP_NULLPTR,
    init_type_QAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAnimationGroup,
    cast_QAnimationGroup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 71583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 71587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71593 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 71596 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 71599 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71602 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 71605 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 71608 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71611 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71614 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 71617 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 71620 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71623 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71626 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 71629 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 71632 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71635 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 71638 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 71641 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 71644 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 71647 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 71650 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractTransition : public  ::QAbstractTransition
{
public:
    sipQAbstractTransition( ::QState*);
    virtual ~sipQAbstractTransition();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onTransition( ::QEvent*) SIP_OVERRIDE;
    bool eventTest( ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractTransition(const sipQAbstractTransition &);
    sipQAbstractTransition &operator = (const sipQAbstractTransition &);

    char sipPyMethods[9];
};

sipQAbstractTransition::sipQAbstractTransition( ::QState*a0):  ::QAbstractTransition(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractTransition::~sipQAbstractTransition()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractTransition::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractTransition);

    return  ::QAbstractTransition::metaObject();
}

int sipQAbstractTransition::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractTransition::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractTransition,_c,_id,_a);

    return _id;
}

void *sipQAbstractTransition::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractTransition, _clname, &sipCpp) ? sipCpp :  ::QAbstractTransition::qt_metacast(_clname));
}

void sipQAbstractTransition::onTransition( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractTransition,sipName_onTransition);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTransition::eventTest( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QAbstractTransition,sipName_eventTest);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTransition::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractTransition::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTransition::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractTransition::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractTransition::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractTransition::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTransition::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractTransition::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTransition::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractTransition::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTransition::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractTransition::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTransition::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractTransition::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractTransition_sourceState, "sourceState(self) -> QState");

extern "C" {static PyObject *meth_QAbstractTransition_sourceState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_sourceState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
             ::QState*sipRes;

            sipRes = sipCpp->sourceState();

            return sipConvertFromType(sipRes,sipType_QState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_sourceState, doc_QAbstractTransition_sourceState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_targetState, "targetState(self) -> QAbstractState");

extern "C" {static PyObject *meth_QAbstractTransition_targetState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_targetState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
             ::QAbstractState*sipRes;

            sipRes = sipCpp->targetState();

            return sipConvertFromType(sipRes,sipType_QAbstractState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_targetState, doc_QAbstractTransition_targetState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_setTargetState, "setTargetState(self, QAbstractState)");

extern "C" {static PyObject *meth_QAbstractTransition_setTargetState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_setTargetState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractState* a0;
        PyObject *a0Keep;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractTransition, &sipCpp, &a0Keep, sipType_QAbstractState, &a0))
        {
            sipCpp->setTargetState(a0);

            sipKeepReference(sipSelf, 0, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_setTargetState, doc_QAbstractTransition_setTargetState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_targetStates, "targetStates(self) -> List[QAbstractState]");

extern "C" {static PyObject *meth_QAbstractTransition_targetStates(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_targetStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
            QList< ::QAbstractState*>*sipRes;

            sipRes = new QList< ::QAbstractState*>(sipCpp->targetStates());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_targetStates, doc_QAbstractTransition_targetStates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_setTargetStates, "setTargetStates(self, Iterable[QAbstractState])");

extern "C" {static PyObject *meth_QAbstractTransition_setTargetStates(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_setTargetStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QAbstractState*>* a0;
        PyObject *a0Keep;
        int a0State = 0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J1", &sipSelf, sipType_QAbstractTransition, &sipCpp, &a0Keep, sipType_QList_0101QAbstractState,&a0, &a0State))
        {
            sipCpp->setTargetStates(*a0);

            sipKeepReference(sipSelf, 0, a0Keep);
            sipReleaseType(const_cast<QList< ::QAbstractState*> *>(a0),sipType_QList_0101QAbstractState,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_setTargetStates, doc_QAbstractTransition_setTargetStates);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_machine, "machine(self) -> QStateMachine");

extern "C" {static PyObject *meth_QAbstractTransition_machine(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_machine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
             ::QStateMachine*sipRes;

            sipRes = sipCpp->machine();

            return sipConvertFromType(sipRes,sipType_QStateMachine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_machine, doc_QAbstractTransition_machine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_addAnimation, "addAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAbstractTransition_addAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_addAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
        PyObject *a0Wrapper;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractTransition, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 40 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
        // We want to keep a reference to the animation but this is in addition to the
        // existing ones and does not replace them - so we can't use /KeepReference/.
        sipCpp->addAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = sipGetUserObject((sipSimpleWrapper *)sipSelf);
        
        if (!user)
        {
            user = PyList_New(0);
            sipSetUserObject((sipSimpleWrapper *)sipSelf, user);
        }
        
        if (user)
            PyList_Append(user, a0Wrapper);
#line 72081 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_addAnimation, doc_QAbstractTransition_addAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_removeAnimation, "removeAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAbstractTransition_removeAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_removeAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation* a0;
        PyObject *a0Wrapper;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractTransition, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracttransition.sip"
        // Discard the extra animation reference that we took in addAnimation().
        sipCpp->removeAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = sipGetUserObject((sipSimpleWrapper *)sipSelf);
        
        if (user)
        {
            Py_ssize_t i = 0;
            
            // Note that we deal with an object appearing in the list more than once.
            while (i < PyList_Size(user))
                if (PyList_GetItem(user, i) == a0Wrapper)
                    PyList_SetSlice(user, i, i + 1, NULL);
                else
                    ++i;
        }
#line 72128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_removeAnimation, doc_QAbstractTransition_removeAnimation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_animations, "animations(self) -> List[QAbstractAnimation]");

extern "C" {static PyObject *meth_QAbstractTransition_animations(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_animations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
            QList< ::QAbstractAnimation*>*sipRes;

            sipRes = new QList< ::QAbstractAnimation*>(sipCpp->animations());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractAnimation,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_animations, doc_QAbstractTransition_animations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_eventTest, "eventTest(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractTransition_eventTest(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_eventTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEvent* a0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTransition, sipName_eventTest);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->eventTest(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_eventTest, doc_QAbstractTransition_eventTest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_onTransition, "onTransition(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractTransition_onTransition(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_onTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEvent* a0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractTransition, &sipCpp, sipType_QEvent, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTransition, sipName_onTransition);
                return SIP_NULLPTR;
            }

            sipCpp->onTransition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_onTransition, doc_QAbstractTransition_onTransition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractTransition_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractTransition::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_event, doc_QAbstractTransition_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_transitionType, "transitionType(self) -> QAbstractTransition.TransitionType");

extern "C" {static PyObject *meth_QAbstractTransition_transitionType(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_transitionType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
             ::QAbstractTransition::TransitionType sipRes;

            sipRes = sipCpp->transitionType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractTransition_TransitionType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_transitionType, doc_QAbstractTransition_transitionType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTransition_setTransitionType, "setTransitionType(self, QAbstractTransition.TransitionType)");

extern "C" {static PyObject *meth_QAbstractTransition_setTransitionType(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_setTransitionType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractTransition::TransitionType a0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractTransition, &sipCpp, sipType_QAbstractTransition_TransitionType, &a0))
        {
            sipCpp->setTransitionType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_setTransitionType, doc_QAbstractTransition_setTransitionType);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractTransition(void *, const sipTypeDef *);}
static void *cast_QAbstractTransition(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractTransition *sipCpp = reinterpret_cast< ::QAbstractTransition *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTransition(void *, int);}
static void release_QAbstractTransition(void *sipCppV, int)
{
     ::QAbstractTransition *sipCpp = reinterpret_cast< ::QAbstractTransition *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractTransition(sipSimpleWrapper *);}
static void dealloc_QAbstractTransition(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractTransition *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractTransition(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractTransition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTransition(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractTransition *sipCpp = SIP_NULLPTR;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractTransition(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractTransition[] = {{183, 255, 1}};


static PyMethodDef methods_QAbstractTransition[] = {
    {SIP_MLNAME_CAST(sipName_addAnimation), meth_QAbstractTransition_addAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_addAnimation)},
    {SIP_MLNAME_CAST(sipName_animations), meth_QAbstractTransition_animations, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_animations)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractTransition_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_event)},
    {SIP_MLNAME_CAST(sipName_eventTest), meth_QAbstractTransition_eventTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_eventTest)},
    {SIP_MLNAME_CAST(sipName_machine), meth_QAbstractTransition_machine, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_machine)},
    {SIP_MLNAME_CAST(sipName_onTransition), meth_QAbstractTransition_onTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_onTransition)},
    {SIP_MLNAME_CAST(sipName_removeAnimation), meth_QAbstractTransition_removeAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_removeAnimation)},
    {SIP_MLNAME_CAST(sipName_setTargetState), meth_QAbstractTransition_setTargetState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_setTargetState)},
    {SIP_MLNAME_CAST(sipName_setTargetStates), meth_QAbstractTransition_setTargetStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_setTargetStates)},
    {SIP_MLNAME_CAST(sipName_setTransitionType), meth_QAbstractTransition_setTransitionType, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_setTransitionType)},
    {SIP_MLNAME_CAST(sipName_sourceState), meth_QAbstractTransition_sourceState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_sourceState)},
    {SIP_MLNAME_CAST(sipName_targetState), meth_QAbstractTransition_targetState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_targetState)},
    {SIP_MLNAME_CAST(sipName_targetStates), meth_QAbstractTransition_targetStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_targetStates)},
    {SIP_MLNAME_CAST(sipName_transitionType), meth_QAbstractTransition_transitionType, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_transitionType)}
};

static sipEnumMemberDef enummembers_QAbstractTransition[] = {
    {sipName_ExternalTransition, static_cast<int>( ::QAbstractTransition::ExternalTransition), 16},
    {sipName_InternalTransition, static_cast<int>( ::QAbstractTransition::InternalTransition), 16},
};

PyDoc_STRVAR(doc_QAbstractTransition, "\1QAbstractTransition(sourceState: QState = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractTransition[] = {
    {"targetStatesChanged()", "\1targetStatesChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"targetStateChanged()", "\1targetStateChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"triggered()", "\1triggered(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractTransition = {
    & ::QAbstractTransition::staticMetaObject,
    0,
    signals_QAbstractTransition,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractTransition = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTransition,
        {SIP_NULLPTR},
        &plugin_QAbstractTransition
    },
    {
        sipNameNr_QAbstractTransition,
        {0, 0, 1},
        14, methods_QAbstractTransition,
        2, enummembers_QAbstractTransition,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractTransition,
    -1,
    -1,
    supers_QAbstractTransition,
    SIP_NULLPTR,
    init_type_QAbstractTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractTransition,
    cast_QAbstractTransition,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 72490 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 72494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 72500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72503 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72506 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72509 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 72512 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72515 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72521 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72524 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72530 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72533 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 72539 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 72542 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 72545 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractState : public  ::QAbstractState
{
public:
    sipQAbstractState( ::QState*);
    virtual ~sipQAbstractState();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onExit( ::QEvent*) SIP_OVERRIDE;
    void onEntry( ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractState(const sipQAbstractState &);
    sipQAbstractState &operator = (const sipQAbstractState &);

    char sipPyMethods[9];
};

sipQAbstractState::sipQAbstractState( ::QState*a0):  ::QAbstractState(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractState::~sipQAbstractState()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractState::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractState);

    return  ::QAbstractState::metaObject();
}

int sipQAbstractState::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractState::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractState,_c,_id,_a);

    return _id;
}

void *sipQAbstractState::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractState, _clname, &sipCpp) ? sipCpp :  ::QAbstractState::qt_metacast(_clname));
}

void sipQAbstractState::onExit( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractState,sipName_onExit);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractState::onEntry( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QAbstractState,sipName_onEntry);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractState::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractState::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractState::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractState::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractState::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractState::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractState::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractState::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractState::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractState::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractState::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractState::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractState::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractState::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractState_parentState, "parentState(self) -> QState");

extern "C" {static PyObject *meth_QAbstractState_parentState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractState_parentState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractState, &sipCpp))
        {
             ::QState*sipRes;

            sipRes = sipCpp->parentState();

            return sipConvertFromType(sipRes,sipType_QState,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractState, sipName_parentState, doc_QAbstractState_parentState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractState_machine, "machine(self) -> QStateMachine");

extern "C" {static PyObject *meth_QAbstractState_machine(PyObject *, PyObject *);}
static PyObject *meth_QAbstractState_machine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractState, &sipCpp))
        {
             ::QStateMachine*sipRes;

            sipRes = sipCpp->machine();

            return sipConvertFromType(sipRes,sipType_QStateMachine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractState, sipName_machine, doc_QAbstractState_machine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractState_active, "active(self) -> bool");

extern "C" {static PyObject *meth_QAbstractState_active(PyObject *, PyObject *);}
static PyObject *meth_QAbstractState_active(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractState, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->active();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractState, sipName_active, doc_QAbstractState_active);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractState_onEntry, "onEntry(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractState_onEntry(PyObject *, PyObject *);}
static PyObject *meth_QAbstractState_onEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEvent* a0;
         ::QAbstractState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractState, &sipCpp, sipType_QEvent, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractState, sipName_onEntry);
                return SIP_NULLPTR;
            }

            sipCpp->onEntry(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractState, sipName_onEntry, doc_QAbstractState_onEntry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractState_onExit, "onExit(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractState_onExit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractState_onExit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEvent* a0;
         ::QAbstractState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractState, &sipCpp, sipType_QEvent, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractState, sipName_onExit);
                return SIP_NULLPTR;
            }

            sipCpp->onExit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractState, sipName_onExit, doc_QAbstractState_onExit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractState_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractState_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractState_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QAbstractState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractState, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractState::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractState, sipName_event, doc_QAbstractState_event);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractState(void *, const sipTypeDef *);}
static void *cast_QAbstractState(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractState *sipCpp = reinterpret_cast< ::QAbstractState *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractState(void *, int);}
static void release_QAbstractState(void *sipCppV, int)
{
     ::QAbstractState *sipCpp = reinterpret_cast< ::QAbstractState *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractState(sipSimpleWrapper *);}
static void dealloc_QAbstractState(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractState *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractState(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractState(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractState *sipCpp = SIP_NULLPTR;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractState(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractState[] = {{183, 255, 1}};


static PyMethodDef methods_QAbstractState[] = {
    {SIP_MLNAME_CAST(sipName_active), meth_QAbstractState_active, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractState_active)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractState_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractState_event)},
    {SIP_MLNAME_CAST(sipName_machine), meth_QAbstractState_machine, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractState_machine)},
    {SIP_MLNAME_CAST(sipName_onEntry), meth_QAbstractState_onEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractState_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), meth_QAbstractState_onExit, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractState_onExit)},
    {SIP_MLNAME_CAST(sipName_parentState), meth_QAbstractState_parentState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractState_parentState)}
};

PyDoc_STRVAR(doc_QAbstractState, "\1QAbstractState(parent: QState = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractState[] = {
    {"exited()", "\1exited(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"entered()", "\1entered(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"activeChanged(bool)", "\1activeChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractState = {
    & ::QAbstractState::staticMetaObject,
    0,
    signals_QAbstractState,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractState = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractState,
        {SIP_NULLPTR},
        &plugin_QAbstractState
    },
    {
        sipNameNr_QAbstractState,
        {0, 0, 1},
        6, methods_QAbstractState,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractState,
    -1,
    -1,
    supers_QAbstractState,
    SIP_NULLPTR,
    init_type_QAbstractState,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractState,
    cast_QAbstractState,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractproxymodel.sip"
#include <qabstractproxymodel.h>
#line 73103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 73107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 73113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 73119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 73122 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 73125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 73128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 73131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 73140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 73143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 73146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 73149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 73152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 73155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 73158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 73161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 73164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 73170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 73182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 73185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 73188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 73191 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 73197 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 73200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 73203 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractProxyModel : public  ::QAbstractProxyModel
{
public:
    sipQAbstractProxyModel( ::QObject*);
    virtual ~sipQAbstractProxyModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QItemSelection mapSelectionFromSource(const  ::QItemSelection&) const SIP_OVERRIDE;
     ::QItemSelection mapSelectionToSource(const  ::QItemSelection&) const SIP_OVERRIDE;
     ::QModelIndex mapFromSource(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex mapToSource(const  ::QModelIndex&) const SIP_OVERRIDE;
    void setSourceModel( ::QAbstractItemModel*) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex parent(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    int columnCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool hasChildren(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractProxyModel(const sipQAbstractProxyModel &);
    sipQAbstractProxyModel &operator = (const sipQAbstractProxyModel &);

    char sipPyMethods[46];
};

sipQAbstractProxyModel::sipQAbstractProxyModel( ::QObject*a0):  ::QAbstractProxyModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractProxyModel::~sipQAbstractProxyModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractProxyModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractProxyModel);

    return  ::QAbstractProxyModel::metaObject();
}

int sipQAbstractProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractProxyModel,_c,_id,_a);

    return _id;
}

void *sipQAbstractProxyModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractProxyModel, _clname, &sipCpp) ? sipCpp :  ::QAbstractProxyModel::qt_metacast(_clname));
}

 ::QItemSelection sipQAbstractProxyModel::mapSelectionFromSource(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_mapSelectionFromSource);

    if (!sipMeth)
        return  ::QAbstractProxyModel::mapSelectionFromSource(a0);

    extern  ::QItemSelection sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QItemSelection sipQAbstractProxyModel::mapSelectionToSource(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,SIP_NULLPTR,sipName_mapSelectionToSource);

    if (!sipMeth)
        return  ::QAbstractProxyModel::mapSelectionToSource(a0);

    extern  ::QItemSelection sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractProxyModel::mapFromSource(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QAbstractProxyModel,sipName_mapFromSource);

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractProxyModel::mapToSource(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QAbstractProxyModel,sipName_mapToSource);

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::setSourceModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_setSourceModel);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::setSourceModel(a0);
        return;
    }

    extern void sipVH_QtCore_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtCore_42(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractProxyModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractProxyModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractProxyModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractProxyModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_QAbstractProxyModel,sipName_index);

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQAbstractProxyModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,sipName_QAbstractProxyModel,sipName_parent);

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractProxyModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_sibling);

    if (!sipMeth)
        return  ::QAbstractProxyModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQAbstractProxyModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,sipName_QAbstractProxyModel,sipName_rowCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractProxyModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,sipName_QAbstractProxyModel,sipName_columnCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_hasChildren);

    if (!sipMeth)
        return  ::QAbstractProxyModel::hasChildren(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQAbstractProxyModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_data);

    if (!sipMeth)
        return  ::QAbstractProxyModel::data(a0,a1);

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractProxyModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
        return  ::QAbstractProxyModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQAbstractProxyModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_headerData);

    if (!sipMeth)
        return  ::QAbstractProxyModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QAbstractProxyModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMap<int, ::QVariant> sipQAbstractProxyModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_itemData);

    if (!sipMeth)
        return  ::QAbstractProxyModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_setItemData);

    if (!sipMeth)
        return  ::QAbstractProxyModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQAbstractProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,SIP_NULLPTR,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QAbstractProxyModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QMimeData* sipQAbstractProxyModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_mimeData);

    if (!sipMeth)
        return  ::QAbstractProxyModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QAbstractProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::Qt::DropActions sipQAbstractProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QAbstractProxyModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractProxyModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_insertRows);

    if (!sipMeth)
        return  ::QAbstractProxyModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_insertColumns);

    if (!sipMeth)
        return  ::QAbstractProxyModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_removeRows);

    if (!sipMeth)
        return  ::QAbstractProxyModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractProxyModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_removeColumns);

    if (!sipMeth)
        return  ::QAbstractProxyModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractProxyModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,SIP_NULLPTR,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QAbstractProxyModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::Qt::ItemFlags sipQAbstractProxyModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QAbstractProxyModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractProxyModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_sort);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQAbstractProxyModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,SIP_NULLPTR,sipName_buddy);

    if (!sipMeth)
        return  ::QAbstractProxyModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQAbstractProxyModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,SIP_NULLPTR,sipName_match);

    if (!sipMeth)
        return  ::QAbstractProxyModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QSize sipQAbstractProxyModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,SIP_NULLPTR,sipName_span);

    if (!sipMeth)
        return  ::QAbstractProxyModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_submit);

    if (!sipMeth)
        return  ::QAbstractProxyModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_revert);

    if (!sipMeth)
    {
         ::QAbstractProxyModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQAbstractProxyModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,SIP_NULLPTR,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QAbstractProxyModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QHash<int, ::QByteArray> sipQAbstractProxyModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,SIP_NULLPTR,sipName_roleNames);

    if (!sipMeth)
        return  ::QAbstractProxyModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractProxyModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,SIP_NULLPTR,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QAbstractProxyModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractProxyModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,SIP_NULLPTR,sipName_moveRows);

    if (!sipMeth)
        return  ::QAbstractProxyModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractProxyModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,SIP_NULLPTR,sipName_moveColumns);

    if (!sipMeth)
        return  ::QAbstractProxyModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}


PyDoc_STRVAR(doc_QAbstractProxyModel_setSourceModel, "setSourceModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QAbstractProxyModel_setSourceModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_setSourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::setSourceModel(a0) : sipCpp->setSourceModel(a0));

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_setSourceModel, doc_QAbstractProxyModel_setSourceModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_sourceModel, "sourceModel(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QAbstractProxyModel_sourceModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_sourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
             ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->sourceModel();

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_sourceModel, doc_QAbstractProxyModel_sourceModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mapToSource, "mapToSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractProxyModel_mapToSource(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mapToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractProxyModel, sipName_mapToSource);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QModelIndex(sipCpp->mapToSource(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mapToSource, doc_QAbstractProxyModel_mapToSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mapFromSource, "mapFromSource(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractProxyModel_mapFromSource(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mapFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractProxyModel, sipName_mapFromSource);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QModelIndex(sipCpp->mapFromSource(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mapFromSource, doc_QAbstractProxyModel_mapFromSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mapSelectionToSource, "mapSelectionToSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QAbstractProxyModel_mapSelectionToSource(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mapSelectionToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::mapSelectionToSource(*a0) : sipCpp->mapSelectionToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mapSelectionToSource, doc_QAbstractProxyModel_mapSelectionToSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mapSelectionFromSource, "mapSelectionFromSource(self, QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QAbstractProxyModel_mapSelectionFromSource(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mapSelectionFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QItemSelection*sipRes;

            sipRes = new  ::QItemSelection((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::mapSelectionFromSource(*a0) : sipCpp->mapSelectionFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mapSelectionFromSource, doc_QAbstractProxyModel_mapSelectionFromSource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_submit, "submit(self) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_submit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::submit() : sipCpp->submit());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_submit, doc_QAbstractProxyModel_submit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_revert, "revert(self)");

extern "C" {static PyObject *meth_QAbstractProxyModel_revert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::revert() : sipCpp->revert());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_revert, doc_QAbstractProxyModel_revert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QAbstractProxyModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::data(*a0,a1) : sipCpp->data(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_data, doc_QAbstractProxyModel_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|i", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_setData, doc_QAbstractProxyModel_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QAbstractProxyModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiE|i", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_headerData, doc_QAbstractProxyModel_headerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiEJ1|i", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant, &a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_setHeaderData, doc_QAbstractProxyModel_setHeaderData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_itemData, "itemData(self, QModelIndex) -> Dict[int, Any]");

extern "C" {static PyObject *meth_QAbstractProxyModel_itemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_itemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QMap<int, ::QVariant>*sipRes;

            sipRes = new QMap<int, ::QVariant>((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::itemData(*a0) : sipCpp->itemData(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_itemData, doc_QAbstractProxyModel_itemData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QAbstractProxyModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_flags, doc_QAbstractProxyModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_setItemData, "setItemData(self, QModelIndex, Dict[int, Any]) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_setItemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_setItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const QMap<int, ::QVariant>* a1;
        int a1State = 0;
         ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QMap_1800_0100QVariant,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::setItemData(*a0,*a1) : sipCpp->setItemData(*a0,*a1));
            sipReleaseType(const_cast<QMap<int, ::QVariant> *>(a1),sipType_QMap_1800_0100QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_setItemData, doc_QAbstractProxyModel_setItemData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_buddy, "buddy(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractProxyModel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::buddy(*a0) : sipCpp->buddy(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_buddy, doc_QAbstractProxyModel_buddy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_canFetchMore, "canFetchMore(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_canFetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_canFetchMore, doc_QAbstractProxyModel_canFetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_fetchMore, "fetchMore(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractProxyModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_fetchMore, doc_QAbstractProxyModel_fetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QAbstractProxyModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_sort, doc_QAbstractProxyModel_sort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_span, "span(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QAbstractProxyModel_span(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::span(*a0) : sipCpp->span(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_span, doc_QAbstractProxyModel_span);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QAbstractProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_hasChildren, doc_QAbstractProxyModel_hasChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mimeData, "mimeData(self, Iterable[QModelIndex]) -> QMimeData");

extern "C" {static PyObject *meth_QAbstractProxyModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
             ::QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mimeData, doc_QAbstractProxyModel_mimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_mimeTypes, "mimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QAbstractProxyModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_mimeTypes, doc_QAbstractProxyModel_mimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QAbstractProxyModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_supportedDropActions, doc_QAbstractProxyModel_supportedDropActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractProxyModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_sibling, doc_QAbstractProxyModel_sibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_resetInternalData, "resetInternalData(self)");

extern "C" {static PyObject *meth_QAbstractProxyModel_resetInternalData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_resetInternalData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
            sipCpp->resetInternalData();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_resetInternalData, doc_QAbstractProxyModel_resetInternalData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_canDropMimeData, "canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_canDropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_canDropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::canDropMimeData(a0,a1,a2,a3,*a4) : sipCpp->canDropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_canDropMimeData, doc_QAbstractProxyModel_canDropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractProxyModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_dropMimeData, doc_QAbstractProxyModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractProxyModel_supportedDragActions, "supportedDragActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QAbstractProxyModel_supportedDragActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractProxyModel_supportedDragActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractProxyModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QAbstractProxyModel::supportedDragActions() : sipCpp->supportedDragActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractProxyModel, sipName_supportedDragActions, doc_QAbstractProxyModel_supportedDragActions);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractProxyModel(void *, const sipTypeDef *);}
static void *cast_QAbstractProxyModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractProxyModel *sipCpp = reinterpret_cast< ::QAbstractProxyModel *>(sipCppV);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractProxyModel(void *, int);}
static void release_QAbstractProxyModel(void *sipCppV, int)
{
     ::QAbstractProxyModel *sipCpp = reinterpret_cast< ::QAbstractProxyModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractProxyModel(sipSimpleWrapper *);}
static void dealloc_QAbstractProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractProxyModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractProxyModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractProxyModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractProxyModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractProxyModel[] = {{6, 255, 1}};


static PyMethodDef methods_QAbstractProxyModel[] = {
    {SIP_MLNAME_CAST(sipName_buddy), meth_QAbstractProxyModel_buddy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_buddy)},
    {SIP_MLNAME_CAST(sipName_canDropMimeData), meth_QAbstractProxyModel_canDropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_canDropMimeData)},
    {SIP_MLNAME_CAST(sipName_canFetchMore), meth_QAbstractProxyModel_canFetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_canFetchMore)},
    {SIP_MLNAME_CAST(sipName_data), SIP_MLMETH_CAST(meth_QAbstractProxyModel_data), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QAbstractProxyModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_fetchMore), meth_QAbstractProxyModel_fetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_fetchMore)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QAbstractProxyModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), SIP_MLMETH_CAST(meth_QAbstractProxyModel_hasChildren), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), SIP_MLMETH_CAST(meth_QAbstractProxyModel_headerData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_headerData)},
    {SIP_MLNAME_CAST(sipName_itemData), meth_QAbstractProxyModel_itemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_itemData)},
    {SIP_MLNAME_CAST(sipName_mapFromSource), meth_QAbstractProxyModel_mapFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mapFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionFromSource), meth_QAbstractProxyModel_mapSelectionFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mapSelectionFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionToSource), meth_QAbstractProxyModel_mapSelectionToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mapSelectionToSource)},
    {SIP_MLNAME_CAST(sipName_mapToSource), meth_QAbstractProxyModel_mapToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mapToSource)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QAbstractProxyModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QAbstractProxyModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_resetInternalData), meth_QAbstractProxyModel_resetInternalData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_resetInternalData)},
    {SIP_MLNAME_CAST(sipName_revert), meth_QAbstractProxyModel_revert, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_revert)},
    {SIP_MLNAME_CAST(sipName_setData), SIP_MLMETH_CAST(meth_QAbstractProxyModel_setData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_setData)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), SIP_MLMETH_CAST(meth_QAbstractProxyModel_setHeaderData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setItemData), meth_QAbstractProxyModel_setItemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_setItemData)},
    {SIP_MLNAME_CAST(sipName_setSourceModel), meth_QAbstractProxyModel_setSourceModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_setSourceModel)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QAbstractProxyModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_sibling)},
    {SIP_MLNAME_CAST(sipName_sort), SIP_MLMETH_CAST(meth_QAbstractProxyModel_sort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_sort)},
    {SIP_MLNAME_CAST(sipName_sourceModel), meth_QAbstractProxyModel_sourceModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_sourceModel)},
    {SIP_MLNAME_CAST(sipName_span), meth_QAbstractProxyModel_span, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_span)},
    {SIP_MLNAME_CAST(sipName_submit), meth_QAbstractProxyModel_submit, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_submit)},
    {SIP_MLNAME_CAST(sipName_supportedDragActions), meth_QAbstractProxyModel_supportedDragActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_supportedDragActions)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QAbstractProxyModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractProxyModel_supportedDropActions)}
};

PyDoc_STRVAR(doc_QAbstractProxyModel, "\1QAbstractProxyModel(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractProxyModel[] = {
    {"sourceModelChanged()", "\1sourceModelChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractProxyModel = {
    & ::QAbstractProxyModel::staticMetaObject,
    0,
    signals_QAbstractProxyModel,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractProxyModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractProxyModel,
        {SIP_NULLPTR},
        &plugin_QAbstractProxyModel
    },
    {
        sipNameNr_QAbstractProxyModel,
        {0, 0, 1},
        29, methods_QAbstractProxyModel,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractProxyModel,
    -1,
    -1,
    supers_QAbstractProxyModel,
    SIP_NULLPTR,
    init_type_QAbstractProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractProxyModel,
    cast_QAbstractProxyModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 75138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractNativeEventFilter : public  ::QAbstractNativeEventFilter
{
public:
    sipQAbstractNativeEventFilter();
    virtual ~sipQAbstractNativeEventFilter();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool nativeEventFilter(const  ::QByteArray&,void*,long*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractNativeEventFilter(const sipQAbstractNativeEventFilter &);
    sipQAbstractNativeEventFilter &operator = (const sipQAbstractNativeEventFilter &);

    char sipPyMethods[1];
};

sipQAbstractNativeEventFilter::sipQAbstractNativeEventFilter():  ::QAbstractNativeEventFilter(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractNativeEventFilter::~sipQAbstractNativeEventFilter()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipQAbstractNativeEventFilter::nativeEventFilter(const  ::QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractNativeEventFilter,sipName_nativeEventFilter);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QByteArray&,void*,long*);

    return sipVH_QtCore_41(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QAbstractNativeEventFilter_nativeEventFilter, "nativeEventFilter(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QAbstractNativeEventFilter_nativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNativeEventFilter_nativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
         ::QAbstractNativeEventFilter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1v", &sipSelf, sipType_QAbstractNativeEventFilter, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNativeEventFilter, sipName_nativeEventFilter);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->nativeEventFilter(*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNativeEventFilter, sipName_nativeEventFilter, doc_QAbstractNativeEventFilter_nativeEventFilter);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractNativeEventFilter(void *, int);}
static void release_QAbstractNativeEventFilter(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractNativeEventFilter *>(sipCppV);
    else
        delete reinterpret_cast< ::QAbstractNativeEventFilter *>(sipCppV);
}


extern "C" {static void dealloc_QAbstractNativeEventFilter(sipSimpleWrapper *);}
static void dealloc_QAbstractNativeEventFilter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractNativeEventFilter *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractNativeEventFilter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractNativeEventFilter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractNativeEventFilter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQAbstractNativeEventFilter *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQAbstractNativeEventFilter();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QAbstractNativeEventFilter[] = {
    {SIP_MLNAME_CAST(sipName_nativeEventFilter), meth_QAbstractNativeEventFilter_nativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNativeEventFilter_nativeEventFilter)}
};

PyDoc_STRVAR(doc_QAbstractNativeEventFilter, "\1QAbstractNativeEventFilter()");


static pyqt5ClassPluginDef plugin_QAbstractNativeEventFilter = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractNativeEventFilter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractNativeEventFilter,
        {SIP_NULLPTR},
        &plugin_QAbstractNativeEventFilter
    },
    {
        sipNameNr_QAbstractNativeEventFilter,
        {0, 0, 1},
        1, methods_QAbstractNativeEventFilter,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractNativeEventFilter,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QAbstractNativeEventFilter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractNativeEventFilter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractNativeEventFilter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 75345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 75349 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 75352 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 75358 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75361 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 75364 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 75367 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75370 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75373 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 75379 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75382 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 75385 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 75388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 75391 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 75394 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75397 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75400 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 75403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 75406 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 75409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75415 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75418 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 75421 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75424 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75430 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75433 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 75439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 75442 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractListModel : public  ::QAbstractListModel
{
public:
    sipQAbstractListModel( ::QObject*);
    virtual ~sipQAbstractListModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractListModel(const sipQAbstractListModel &);
    sipQAbstractListModel &operator = (const sipQAbstractListModel &);

    char sipPyMethods[38];
};

sipQAbstractListModel::sipQAbstractListModel( ::QObject*a0):  ::QAbstractListModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractListModel::~sipQAbstractListModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractListModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractListModel);

    return  ::QAbstractListModel::metaObject();
}

int sipQAbstractListModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractListModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractListModel,_c,_id,_a);

    return _id;
}

void *sipQAbstractListModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractListModel, _clname, &sipCpp) ? sipCpp :  ::QAbstractListModel::qt_metacast(_clname));
}

void sipQAbstractListModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractListModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractListModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractListModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractListModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractListModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractListModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractListModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractListModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractListModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractListModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractListModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractListModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractListModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractListModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_index);

    if (!sipMeth)
        return  ::QAbstractListModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQAbstractListModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_sibling);

    if (!sipMeth)
        return  ::QAbstractListModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQAbstractListModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_QAbstractListModel,sipName_rowCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQAbstractListModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QAbstractListModel,sipName_data);

    if (!sipMeth)
        return  ::QVariant();

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractListModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
        return  ::QAbstractListModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQAbstractListModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_headerData);

    if (!sipMeth)
        return  ::QAbstractListModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractListModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QAbstractListModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMap<int, ::QVariant> sipQAbstractListModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,SIP_NULLPTR,sipName_itemData);

    if (!sipMeth)
        return  ::QAbstractListModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractListModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_setItemData);

    if (!sipMeth)
        return  ::QAbstractListModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQAbstractListModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QAbstractListModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QMimeData* sipQAbstractListModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_mimeData);

    if (!sipMeth)
        return  ::QAbstractListModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractListModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QAbstractListModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::Qt::DropActions sipQAbstractListModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QAbstractListModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractListModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_insertRows);

    if (!sipMeth)
        return  ::QAbstractListModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractListModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_insertColumns);

    if (!sipMeth)
        return  ::QAbstractListModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractListModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_removeRows);

    if (!sipMeth)
        return  ::QAbstractListModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractListModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_removeColumns);

    if (!sipMeth)
        return  ::QAbstractListModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractListModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QAbstractListModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractListModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QAbstractListModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::Qt::ItemFlags sipQAbstractListModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QAbstractListModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractListModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_sort);

    if (!sipMeth)
    {
         ::QAbstractListModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQAbstractListModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_buddy);

    if (!sipMeth)
        return  ::QAbstractListModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQAbstractListModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_match);

    if (!sipMeth)
        return  ::QAbstractListModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QSize sipQAbstractListModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_span);

    if (!sipMeth)
        return  ::QAbstractListModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractListModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_submit);

    if (!sipMeth)
        return  ::QAbstractListModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractListModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_revert);

    if (!sipMeth)
    {
         ::QAbstractListModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQAbstractListModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,SIP_NULLPTR,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QAbstractListModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QHash<int, ::QByteArray> sipQAbstractListModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_roleNames);

    if (!sipMeth)
        return  ::QAbstractListModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractListModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QAbstractListModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractListModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_moveRows);

    if (!sipMeth)
        return  ::QAbstractListModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractListModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_moveColumns);

    if (!sipMeth)
        return  ::QAbstractListModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}


PyDoc_STRVAR(doc_QAbstractListModel_index, "index(self, int, column: int = 0, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractListModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractListModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1 = 0;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QAbstractListModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_column,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|iJ9", &sipSelf, sipType_QAbstractListModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractListModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractListModel, sipName_index, doc_QAbstractListModel_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractListModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractListModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractListModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QAbstractListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractListModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractListModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractListModel, sipName_dropMimeData, doc_QAbstractListModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractListModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QAbstractListModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QAbstractListModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractListModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QAbstractListModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractListModel, sipName_flags, doc_QAbstractListModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractListModel_parent, "parent(self) -> QObject");

extern "C" {static PyObject *meth_QAbstractListModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractListModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractListModel, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractListModel, sipName_parent, doc_QAbstractListModel_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractListModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractListModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QAbstractListModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QAbstractListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QAbstractListModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractListModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractListModel, sipName_sibling, doc_QAbstractListModel_sibling);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QAbstractListModel_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractListModel_columnCount(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(SIP_NULLPTR, sipName_QAbstractListModel, sipName_columnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QAbstractListModel_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QAbstractListModel_hasChildren(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(SIP_NULLPTR, sipName_QAbstractListModel, sipName_hasChildren, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractListModel(void *, const sipTypeDef *);}
static void *cast_QAbstractListModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractListModel *sipCpp = reinterpret_cast< ::QAbstractListModel *>(sipCppV);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractListModel(void *, int);}
static void release_QAbstractListModel(void *sipCppV, int)
{
     ::QAbstractListModel *sipCpp = reinterpret_cast< ::QAbstractListModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractListModel(sipSimpleWrapper *);}
static void dealloc_QAbstractListModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractListModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractListModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractListModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractListModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractListModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractListModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractListModel[] = {{6, 255, 1}};


static PyMethodDef methods_QAbstractListModel[] = {
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QAbstractListModel_columnCount, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QAbstractListModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractListModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QAbstractListModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractListModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QAbstractListModel_hasChildren, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_index), SIP_MLMETH_CAST(meth_QAbstractListModel_index), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractListModel_index)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QAbstractListModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractListModel_parent)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QAbstractListModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractListModel_sibling)}
};

PyDoc_STRVAR(doc_QAbstractListModel, "\1QAbstractListModel(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QAbstractListModel = {
    & ::QAbstractListModel::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractListModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractListModel,
        {SIP_NULLPTR},
        &plugin_QAbstractListModel
    },
    {
        sipNameNr_QAbstractListModel,
        {0, 0, 1},
        7, methods_QAbstractListModel,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractListModel,
    -1,
    -1,
    supers_QAbstractListModel,
    SIP_NULLPTR,
    init_type_QAbstractListModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractListModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractListModel,
    cast_QAbstractListModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 76469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 76473 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 76476 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 76482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 76488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 76491 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 76494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76497 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 76500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 76503 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 76506 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 76509 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 76512 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 76515 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 76518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 76521 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76524 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 76527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 76530 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 76533 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76539 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76542 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 76545 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 76548 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 76551 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 76554 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76557 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 76560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 76563 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 76566 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractTableModel : public  ::QAbstractTableModel
{
public:
    sipQAbstractTableModel( ::QObject*);
    virtual ~sipQAbstractTableModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    int columnCount(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractTableModel(const sipQAbstractTableModel &);
    sipQAbstractTableModel &operator = (const sipQAbstractTableModel &);

    char sipPyMethods[39];
};

sipQAbstractTableModel::sipQAbstractTableModel( ::QObject*a0):  ::QAbstractTableModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractTableModel::~sipQAbstractTableModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractTableModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractTableModel);

    return  ::QAbstractTableModel::metaObject();
}

int sipQAbstractTableModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractTableModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractTableModel,_c,_id,_a);

    return _id;
}

void *sipQAbstractTableModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractTableModel, _clname, &sipCpp) ? sipCpp :  ::QAbstractTableModel::qt_metacast(_clname));
}

void sipQAbstractTableModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractTableModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractTableModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractTableModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractTableModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractTableModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractTableModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractTableModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractTableModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractTableModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_index);

    if (!sipMeth)
        return  ::QAbstractTableModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQAbstractTableModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_sibling);

    if (!sipMeth)
        return  ::QAbstractTableModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQAbstractTableModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_QAbstractTableModel,sipName_rowCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractTableModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QAbstractTableModel,sipName_columnCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQAbstractTableModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QAbstractTableModel,sipName_data);

    if (!sipMeth)
        return  ::QVariant();

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractTableModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
        return  ::QAbstractTableModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQAbstractTableModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_headerData);

    if (!sipMeth)
        return  ::QAbstractTableModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QAbstractTableModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMap<int, ::QVariant> sipQAbstractTableModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_itemData);

    if (!sipMeth)
        return  ::QAbstractTableModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_setItemData);

    if (!sipMeth)
        return  ::QAbstractTableModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQAbstractTableModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QAbstractTableModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QMimeData* sipQAbstractTableModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_mimeData);

    if (!sipMeth)
        return  ::QAbstractTableModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QAbstractTableModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::Qt::DropActions sipQAbstractTableModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QAbstractTableModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractTableModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_insertRows);

    if (!sipMeth)
        return  ::QAbstractTableModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_insertColumns);

    if (!sipMeth)
        return  ::QAbstractTableModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_removeRows);

    if (!sipMeth)
        return  ::QAbstractTableModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractTableModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_removeColumns);

    if (!sipMeth)
        return  ::QAbstractTableModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractTableModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QAbstractTableModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QAbstractTableModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::Qt::ItemFlags sipQAbstractTableModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QAbstractTableModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractTableModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_sort);

    if (!sipMeth)
    {
         ::QAbstractTableModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQAbstractTableModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,SIP_NULLPTR,sipName_buddy);

    if (!sipMeth)
        return  ::QAbstractTableModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQAbstractTableModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_match);

    if (!sipMeth)
        return  ::QAbstractTableModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QSize sipQAbstractTableModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_span);

    if (!sipMeth)
        return  ::QAbstractTableModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTableModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_submit);

    if (!sipMeth)
        return  ::QAbstractTableModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractTableModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_revert);

    if (!sipMeth)
    {
         ::QAbstractTableModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQAbstractTableModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,SIP_NULLPTR,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QAbstractTableModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QHash<int, ::QByteArray> sipQAbstractTableModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,SIP_NULLPTR,sipName_roleNames);

    if (!sipMeth)
        return  ::QAbstractTableModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractTableModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,SIP_NULLPTR,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QAbstractTableModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractTableModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_moveRows);

    if (!sipMeth)
        return  ::QAbstractTableModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractTableModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_moveColumns);

    if (!sipMeth)
        return  ::QAbstractTableModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}


PyDoc_STRVAR(doc_QAbstractTableModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractTableModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QAbstractTableModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractTableModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_index, doc_QAbstractTableModel_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTableModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractTableModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractTableModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_dropMimeData, doc_QAbstractTableModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTableModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QAbstractTableModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QAbstractTableModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_flags, doc_QAbstractTableModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTableModel_parent, "parent(self) -> QObject");

extern "C" {static PyObject *meth_QAbstractTableModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTableModel, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_parent, doc_QAbstractTableModel_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractTableModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractTableModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QAbstractTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QAbstractTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractTableModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTableModel, sipName_sibling, doc_QAbstractTableModel_sibling);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *meth_QAbstractTableModel_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTableModel_hasChildren(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(SIP_NULLPTR, sipName_QAbstractTableModel, sipName_hasChildren, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractTableModel(void *, const sipTypeDef *);}
static void *cast_QAbstractTableModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractTableModel *sipCpp = reinterpret_cast< ::QAbstractTableModel *>(sipCppV);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTableModel(void *, int);}
static void release_QAbstractTableModel(void *sipCppV, int)
{
     ::QAbstractTableModel *sipCpp = reinterpret_cast< ::QAbstractTableModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractTableModel(sipSimpleWrapper *);}
static void dealloc_QAbstractTableModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractTableModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractTableModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractTableModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTableModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractTableModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractTableModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractTableModel[] = {{6, 255, 1}};


static PyMethodDef methods_QAbstractTableModel[] = {
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QAbstractTableModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QAbstractTableModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QAbstractTableModel_hasChildren, METH_VARARGS, SIP_NULLPTR},
    {SIP_MLNAME_CAST(sipName_index), SIP_MLMETH_CAST(meth_QAbstractTableModel_index), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractTableModel_index)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QAbstractTableModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_parent)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QAbstractTableModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTableModel_sibling)}
};

PyDoc_STRVAR(doc_QAbstractTableModel, "\1QAbstractTableModel(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QAbstractTableModel = {
    & ::QAbstractTableModel::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractTableModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTableModel,
        {SIP_NULLPTR},
        &plugin_QAbstractTableModel
    },
    {
        sipNameNr_QAbstractTableModel,
        {0, 0, 1},
        6, methods_QAbstractTableModel,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractTableModel,
    -1,
    -1,
    supers_QAbstractTableModel,
    SIP_NULLPTR,
    init_type_QAbstractTableModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractTableModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractTableModel,
    cast_QAbstractTableModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 77597 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 77601 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_QAbstractItemModel_CheckIndexOptions___hash__(PyObject *);}
static long slot_QAbstractItemModel_CheckIndexOptions___hash__(PyObject *sipSelf)
{
     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QAbstractItemModel::CheckIndexOptions::Int();
#line 77619 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QAbstractItemModel_CheckIndexOptions___bool__(PyObject *);}
static int slot_QAbstractItemModel_CheckIndexOptions___bool__(PyObject *sipSelf)
{
     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractItemModel::CheckIndexOptions::Int() != 0);
#line 77644 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractItemModel::CheckIndexOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QAbstractItemModel_CheckIndexOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractItemModel::CheckIndexOptions::Int() != a0->operator QAbstractItemModel::CheckIndexOptions::Int());
#line 77674 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QAbstractItemModel::CheckIndexOptions *>(a0),sipType_QAbstractItemModel_CheckIndexOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QAbstractItemModel_CheckIndexOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractItemModel::CheckIndexOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QAbstractItemModel_CheckIndexOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractItemModel::CheckIndexOptions::Int() == a0->operator QAbstractItemModel::CheckIndexOptions::Int());
#line 77710 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QAbstractItemModel::CheckIndexOptions *>(a0),sipType_QAbstractItemModel_CheckIndexOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QAbstractItemModel_CheckIndexOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractItemModel_CheckIndexOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QAbstractItemModel::CheckIndexOptions(*sipCpp ^ a0);
#line 77749 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel::CheckIndexOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractItemModel_CheckIndexOptions, &a0, &a0State, &a1))
        {
             ::QAbstractItemModel::CheckIndexOptions*sipRes;

            sipRes = new  ::QAbstractItemModel::CheckIndexOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QAbstractItemModel_CheckIndexOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractItemModel_CheckIndexOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractItemModel_CheckIndexOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = QAbstractItemModel::CheckIndexOptions(*sipCpp | a0);
#line 77821 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel::CheckIndexOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractItemModel_CheckIndexOptions, &a0, &a0State, &a1))
        {
             ::QAbstractItemModel::CheckIndexOptions*sipRes;

            sipRes = new  ::QAbstractItemModel::CheckIndexOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QAbstractItemModel_CheckIndexOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractItemModel_CheckIndexOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractItemModel_CheckIndexOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QAbstractItemModel::CheckIndexOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel::CheckIndexOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractItemModel_CheckIndexOptions, &a0, &a0State, &a1))
        {
             ::QAbstractItemModel::CheckIndexOptions*sipRes;

            sipRes = new  ::QAbstractItemModel::CheckIndexOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QAbstractItemModel_CheckIndexOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractItemModel_CheckIndexOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___invert__(PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___invert__(PyObject *sipSelf)
{
     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QAbstractItemModel::CheckIndexOptions*sipRes;

            sipRes = new  ::QAbstractItemModel::CheckIndexOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QAbstractItemModel_CheckIndexOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QAbstractItemModel_CheckIndexOptions___int__(PyObject *);}
static PyObject *slot_QAbstractItemModel_CheckIndexOptions___int__(PyObject *sipSelf)
{
     ::QAbstractItemModel::CheckIndexOptions *sipCpp = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractItemModel_CheckIndexOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemModel_CheckIndexOptions(void *, int);}
static void release_QAbstractItemModel_CheckIndexOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipCppV);
}


extern "C" {static void assign_QAbstractItemModel_CheckIndexOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QAbstractItemModel_CheckIndexOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions *>(sipSrc);
}


extern "C" {static void *array_QAbstractItemModel_CheckIndexOptions(SIP_SSIZE_T);}
static void *array_QAbstractItemModel_CheckIndexOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QAbstractItemModel::CheckIndexOptions[sipNrElem];
}


extern "C" {static void *copy_QAbstractItemModel_CheckIndexOptions(const void *, SIP_SSIZE_T);}
static void *copy_QAbstractItemModel_CheckIndexOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QAbstractItemModel::CheckIndexOptions(reinterpret_cast<const  ::QAbstractItemModel::CheckIndexOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QAbstractItemModel_CheckIndexOptions(sipSimpleWrapper *);}
static void dealloc_QAbstractItemModel_CheckIndexOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractItemModel_CheckIndexOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QAbstractItemModel_CheckIndexOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractItemModel_CheckIndexOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QAbstractItemModel::CheckIndexOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QAbstractItemModel::CheckIndexOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QAbstractItemModel::CheckIndexOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QAbstractItemModel::CheckIndexOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QAbstractItemModel_CheckIndexOptions, &a0, &a0State))
        {
            sipCpp = new  ::QAbstractItemModel::CheckIndexOptions(*a0);
            sipReleaseType(const_cast< ::QAbstractItemModel::CheckIndexOptions *>(a0),sipType_QAbstractItemModel_CheckIndexOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QAbstractItemModel_CheckIndexOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QAbstractItemModel_CheckIndexOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QAbstractItemModel::CheckIndexOptions **sipCppPtr = reinterpret_cast< ::QAbstractItemModel::CheckIndexOptions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QAbstractItemModel::CheckIndexOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QAbstractItemModel_CheckIndexOption)) ||
            sipCanConvertToType(sipPy, sipType_QAbstractItemModel_CheckIndexOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QAbstractItemModel_CheckIndexOption)))
{
    *sipCppPtr = new QAbstractItemModel::CheckIndexOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QAbstractItemModel::CheckIndexOptions *>(sipConvertToType(sipPy, sipType_QAbstractItemModel_CheckIndexOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 78089 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QAbstractItemModel_CheckIndexOptions[] = {
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___hash__, hash_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___bool__, bool_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___ne__, ne_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___eq__, eq_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___ixor__, ixor_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___xor__, xor_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___ior__, ior_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___or__, or_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___iand__, iand_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___and__, and_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___invert__, invert_slot},
    {(void *)slot_QAbstractItemModel_CheckIndexOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QAbstractItemModel_CheckIndexOptions, "\1QAbstractItemModel.CheckIndexOptions()\n"
"QAbstractItemModel.CheckIndexOptions(Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption])\n"
"QAbstractItemModel.CheckIndexOptions(QAbstractItemModel.CheckIndexOptions)");


static pyqt5ClassPluginDef plugin_QAbstractItemModel_CheckIndexOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractItemModel_CheckIndexOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemModel__CheckIndexOptions,
        {SIP_NULLPTR},
        &plugin_QAbstractItemModel_CheckIndexOptions
    },
    {
        sipNameNr_CheckIndexOptions,
        {6, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractItemModel_CheckIndexOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QAbstractItemModel_CheckIndexOptions,
    init_type_QAbstractItemModel_CheckIndexOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractItemModel_CheckIndexOptions,
    assign_QAbstractItemModel_CheckIndexOptions,
    array_QAbstractItemModel_CheckIndexOptions,
    copy_QAbstractItemModel_CheckIndexOptions,
    release_QAbstractItemModel_CheckIndexOptions,
    SIP_NULLPTR,
    convertTo_QAbstractItemModel_CheckIndexOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 78177 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 78181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 78184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 78187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 78190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 78196 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78199 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 78208 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78211 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 78214 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 78217 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsize.sip"
#include <qsize.h>
#line 78220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78223 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78229 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 78232 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 78235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 78238 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78244 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 78250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78253 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78256 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78262 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78265 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78268 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78271 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractItemModel : public  ::QAbstractItemModel
{
public:
    sipQAbstractItemModel( ::QObject*);
    virtual ~sipQAbstractItemModel();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool moveColumns(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool moveRows(const  ::QModelIndex&,int,int,const  ::QModelIndex&,int) SIP_OVERRIDE;
    bool canDropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    QHash<int, ::QByteArray> roleNames() const SIP_OVERRIDE;
     ::Qt::DropActions supportedDragActions() const SIP_OVERRIDE;
    void revert() SIP_OVERRIDE;
    bool submit() SIP_OVERRIDE;
     ::QSize span(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const SIP_OVERRIDE;
     ::QModelIndex buddy(const  ::QModelIndex&) const SIP_OVERRIDE;
    void sort(int, ::Qt::SortOrder) SIP_OVERRIDE;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool canFetchMore(const  ::QModelIndex&) const SIP_OVERRIDE;
    void fetchMore(const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool removeRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertColumns(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
    bool insertRows(int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::Qt::DropActions supportedDropActions() const SIP_OVERRIDE;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&) SIP_OVERRIDE;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const SIP_OVERRIDE;
     ::QStringList mimeTypes() const SIP_OVERRIDE;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&) SIP_OVERRIDE;
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const SIP_OVERRIDE;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant headerData(int, ::Qt::Orientation,int) const SIP_OVERRIDE;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int) SIP_OVERRIDE;
     ::QVariant data(const  ::QModelIndex&,int) const SIP_OVERRIDE;
    bool hasChildren(const  ::QModelIndex&) const SIP_OVERRIDE;
    int columnCount(const  ::QModelIndex&) const SIP_OVERRIDE;
    int rowCount(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex sibling(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex parent(const  ::QModelIndex&) const SIP_OVERRIDE;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractItemModel(const sipQAbstractItemModel &);
    sipQAbstractItemModel &operator = (const sipQAbstractItemModel &);

    char sipPyMethods[41];
};

sipQAbstractItemModel::sipQAbstractItemModel( ::QObject*a0):  ::QAbstractItemModel(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractItemModel::~sipQAbstractItemModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractItemModel::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractItemModel);

    return  ::QAbstractItemModel::metaObject();
}

int sipQAbstractItemModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractItemModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractItemModel,_c,_id,_a);

    return _id;
}

void *sipQAbstractItemModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractItemModel, _clname, &sipCpp) ? sipCpp :  ::QAbstractItemModel::qt_metacast(_clname));
}

bool sipQAbstractItemModel::moveColumns(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_moveColumns);

    if (!sipMeth)
        return  ::QAbstractItemModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractItemModel::moveRows(const  ::QModelIndex& a0,int a1,int a2,const  ::QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_moveRows);

    if (!sipMeth)
        return  ::QAbstractItemModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int,const  ::QModelIndex&,int);

    return sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQAbstractItemModel::canDropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_canDropMimeData);

    if (!sipMeth)
        return  ::QAbstractItemModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int, ::QByteArray> sipQAbstractItemModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,SIP_NULLPTR,sipName_roleNames);

    if (!sipMeth)
        return  ::QAbstractItemModel::roleNames();

    extern QHash<int, ::QByteArray> sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::Qt::DropActions sipQAbstractItemModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,SIP_NULLPTR,sipName_supportedDragActions);

    if (!sipMeth)
        return  ::QAbstractItemModel::supportedDragActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractItemModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_revert);

    if (!sipMeth)
    {
         ::QAbstractItemModel::revert();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractItemModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_submit);

    if (!sipMeth)
        return  ::QAbstractItemModel::submit();

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

 ::QSize sipQAbstractItemModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_span);

    if (!sipMeth)
        return  ::QAbstractItemModel::span(a0);

    extern  ::QSize sipVH_QtCore_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_38(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQAbstractItemModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,SIP_NULLPTR,sipName_match);

    if (!sipMeth)
        return  ::QAbstractItemModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtCore_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtCore_37(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QModelIndex sipQAbstractItemModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,SIP_NULLPTR,sipName_buddy);

    if (!sipMeth)
        return  ::QAbstractItemModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_sort);

    if (!sipMeth)
    {
         ::QAbstractItemModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags sipQAbstractItemModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_flags);

    if (!sipMeth)
        return  ::QAbstractItemModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QAbstractItemModel::canFetchMore(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QAbstractItemModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_removeColumns);

    if (!sipMeth)
        return  ::QAbstractItemModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_removeRows);

    if (!sipMeth)
        return  ::QAbstractItemModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_insertColumns);

    if (!sipMeth)
        return  ::QAbstractItemModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_insertRows);

    if (!sipMeth)
        return  ::QAbstractItemModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::Qt::DropActions sipQAbstractItemModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QAbstractItemModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractItemModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QAbstractItemModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QMimeData* sipQAbstractItemModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,SIP_NULLPTR,sipName_mimeData);

    if (!sipMeth)
        return  ::QAbstractItemModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQAbstractItemModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QAbstractItemModel::mimeTypes();

    extern  ::QStringList sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractItemModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_setItemData);

    if (!sipMeth)
        return  ::QAbstractItemModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

QMap<int, ::QVariant> sipQAbstractItemModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_itemData);

    if (!sipMeth)
        return  ::QAbstractItemModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QAbstractItemModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QVariant sipQAbstractItemModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,SIP_NULLPTR,sipName_headerData);

    if (!sipMeth)
        return  ::QAbstractItemModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_setData);

    if (!sipMeth)
        return  ::QAbstractItemModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQAbstractItemModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,sipName_QAbstractItemModel,sipName_data);

    if (!sipMeth)
        return  ::QVariant();

    extern  ::QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractItemModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_hasChildren);

    if (!sipMeth)
        return  ::QAbstractItemModel::hasChildren(a0);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractItemModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,sipName_QAbstractItemModel,sipName_columnCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractItemModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,sipName_QAbstractItemModel,sipName_rowCount);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractItemModel::sibling(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,SIP_NULLPTR,sipName_sibling);

    if (!sipMeth)
        return  ::QAbstractItemModel::sibling(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQAbstractItemModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,sipName_QAbstractItemModel,sipName_parent);

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQAbstractItemModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,sipName_QAbstractItemModel,sipName_index);

    if (!sipMeth)
        return  ::QModelIndex();

    extern  ::QModelIndex sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractItemModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractItemModel::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractItemModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractItemModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractItemModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractItemModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractItemModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractItemModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractItemModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractItemModel::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractItemModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractItemModel_hasIndex, "hasIndex(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_hasIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_hasIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->hasIndex(a0,a1,*a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_hasIndex, doc_QAbstractItemModel_hasIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_index);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QModelIndex(sipCpp->index(a0,a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_index, doc_QAbstractItemModel_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_parent, "parent(self, QModelIndex) -> QModelIndex\n"
"parent(self) -> QObject");

extern "C" {static PyObject *meth_QAbstractItemModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_parent);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QModelIndex(sipCpp->parent(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_parent, doc_QAbstractItemModel_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_sibling, "sibling(self, int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_sibling, doc_QAbstractItemModel_sibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QAbstractItemModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_rowCount);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->rowCount(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_rowCount, doc_QAbstractItemModel_rowCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QAbstractItemModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_columnCount);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->columnCount(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_columnCount, doc_QAbstractItemModel_columnCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_hasChildren, doc_QAbstractItemModel_hasChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QAbstractItemModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_data);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QVariant(sipCpp->data(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_data, doc_QAbstractItemModel_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_setData, doc_QAbstractItemModel_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QAbstractItemModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiE|i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_headerData, doc_QAbstractItemModel_headerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiEJ1|i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant, &a2, &a2State, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_setHeaderData, doc_QAbstractItemModel_setHeaderData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_itemData, "itemData(self, QModelIndex) -> Dict[int, Any]");

extern "C" {static PyObject *meth_QAbstractItemModel_itemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_itemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QMap<int, ::QVariant>*sipRes;

            sipRes = new QMap<int, ::QVariant>((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::itemData(*a0) : sipCpp->itemData(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_itemData, doc_QAbstractItemModel_itemData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_setItemData, "setItemData(self, QModelIndex, Dict[int, Any]) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_setItemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const QMap<int, ::QVariant>* a1;
        int a1State = 0;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QMap_1800_0100QVariant,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::setItemData(*a0,*a1) : sipCpp->setItemData(*a0,*a1));
            sipReleaseType(const_cast<QMap<int, ::QVariant> *>(a1),sipType_QMap_1800_0100QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_setItemData, doc_QAbstractItemModel_setItemData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_mimeTypes, "mimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QAbstractItemModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_mimeTypes, doc_QAbstractItemModel_mimeTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_mimeData, "mimeData(self, Iterable[QModelIndex]) -> QMimeData");

extern "C" {static PyObject *meth_QAbstractItemModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
             ::QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_mimeData, doc_QAbstractItemModel_mimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_dropMimeData, doc_QAbstractItemModel_dropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QAbstractItemModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_supportedDropActions, doc_QAbstractItemModel_supportedDropActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_insertRows, doc_QAbstractItemModel_insertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_insertColumns, doc_QAbstractItemModel_insertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_removeRows, doc_QAbstractItemModel_removeRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_removeColumns, "removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_removeColumns, doc_QAbstractItemModel_removeColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_fetchMore, "fetchMore(self, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_fetchMore, doc_QAbstractItemModel_fetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_canFetchMore, "canFetchMore(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_canFetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_canFetchMore, doc_QAbstractItemModel_canFetchMore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QAbstractItemModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_flags, doc_QAbstractItemModel_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QAbstractItemModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_sort, doc_QAbstractItemModel_sort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_buddy, "buddy(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemModel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::buddy(*a0) : sipCpp->buddy(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_buddy, doc_QAbstractItemModel_buddy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_match, "match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchStartsWith|Qt.MatchWrap) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QAbstractItemModel_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = 1;
         ::Qt::MatchFlags a4def = Qt::MatchStartsWith|Qt::MatchWrap;
         ::Qt::MatchFlags* a4 = &a4def;
        int a4State = 0;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_hits,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9iJ1|iJ1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant, &a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_match, doc_QAbstractItemModel_match);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_span, "span(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QAbstractItemModel_span(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QSize*sipRes;

            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::span(*a0) : sipCpp->span(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_span, doc_QAbstractItemModel_span);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_submit, "submit(self) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_submit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::submit() : sipCpp->submit());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_submit, doc_QAbstractItemModel_submit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_revert, "revert(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_revert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::revert() : sipCpp->revert());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_revert, doc_QAbstractItemModel_revert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_encodeData, "encodeData(self, Iterable[QModelIndex], QDataStream)");

extern "C" {static PyObject *meth_QAbstractItemModel_encodeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_encodeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
         ::QDataStream* a1;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QDataStream, &a1))
        {
            sipCpp->encodeData(*a0,*a1);
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_encodeData, doc_QAbstractItemModel_encodeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_decodeData, "decodeData(self, int, int, QModelIndex, QDataStream) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_decodeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_decodeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QModelIndex* a2;
         ::QDataStream* a3;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piiJ9J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2, sipType_QDataStream, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->decodeData(a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_decodeData, doc_QAbstractItemModel_decodeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginInsertRows, "beginInsertRows(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginInsertRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginInsertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->beginInsertRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginInsertRows, doc_QAbstractItemModel_beginInsertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endInsertRows, "endInsertRows(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endInsertRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endInsertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endInsertRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endInsertRows, doc_QAbstractItemModel_endInsertRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginRemoveRows, "beginRemoveRows(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginRemoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginRemoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->beginRemoveRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginRemoveRows, doc_QAbstractItemModel_beginRemoveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endRemoveRows, "endRemoveRows(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endRemoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endRemoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endRemoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endRemoveRows, doc_QAbstractItemModel_endRemoveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginInsertColumns, "beginInsertColumns(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginInsertColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginInsertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->beginInsertColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginInsertColumns, doc_QAbstractItemModel_beginInsertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endInsertColumns, "endInsertColumns(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endInsertColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endInsertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endInsertColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endInsertColumns, doc_QAbstractItemModel_endInsertColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginRemoveColumns, "beginRemoveColumns(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginRemoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginRemoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->beginRemoveColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginRemoveColumns, doc_QAbstractItemModel_beginRemoveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endRemoveColumns, "endRemoveColumns(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endRemoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endRemoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endRemoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endRemoveColumns, doc_QAbstractItemModel_endRemoveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_persistentIndexList, "persistentIndexList(self) -> List[QModelIndex]");

extern "C" {static PyObject *meth_QAbstractItemModel_persistentIndexList(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_persistentIndexList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            sipRes = new  ::QModelIndexList(sipCpp->persistentIndexList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_persistentIndexList, doc_QAbstractItemModel_persistentIndexList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_changePersistentIndex, "changePersistentIndex(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QAbstractItemModel_changePersistentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_changePersistentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->changePersistentIndex(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_changePersistentIndex, doc_QAbstractItemModel_changePersistentIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_changePersistentIndexList, "changePersistentIndexList(self, Iterable[QModelIndex], Iterable[QModelIndex])");

extern "C" {static PyObject *meth_QAbstractItemModel_changePersistentIndexList(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_changePersistentIndexList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QModelIndexList* a1;
        int a1State = 0;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QList_0100QModelIndex,&a1, &a1State))
        {
            sipCpp->changePersistentIndexList(*a0,*a1);
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);
            sipReleaseType(const_cast< ::QModelIndexList *>(a1),sipType_QList_0100QModelIndex,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_changePersistentIndexList, doc_QAbstractItemModel_changePersistentIndexList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_insertRow, "insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_insertRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->insertRow(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_insertRow, doc_QAbstractItemModel_insertRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_insertColumn, "insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_insertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->insertColumn(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_insertColumn, doc_QAbstractItemModel_insertColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_removeRow, "removeRow(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_removeRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->removeRow(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_removeRow, doc_QAbstractItemModel_removeRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_removeColumn, "removeColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_removeColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|J9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->removeColumn(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_removeColumn, doc_QAbstractItemModel_removeColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_supportedDragActions, "supportedDragActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QAbstractItemModel_supportedDragActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_supportedDragActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::supportedDragActions() : sipCpp->supportedDragActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_supportedDragActions, doc_QAbstractItemModel_supportedDragActions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_roleNames, "roleNames(self) -> Dict[int, QByteArray]");

extern "C" {static PyObject *meth_QAbstractItemModel_roleNames(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_roleNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            QHash<int, ::QByteArray>*sipRes;

            sipRes = new QHash<int, ::QByteArray>((sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::roleNames() : sipCpp->roleNames()));

            return sipConvertFromNewType(sipRes,sipType_QHash_1800_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_roleNames, doc_QAbstractItemModel_roleNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_createIndex, "createIndex(self, int, int, object: object = 0) -> QModelIndex");

extern "C" {static PyObject *meth_QAbstractItemModel_createIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_createIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        PyObject * a2 = 0;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "pii|P0", &sipSelf, sipType_QAbstractItemModel, &sipCpp, &a0, &a1, &a2))
        {
             ::QModelIndex*sipRes = 0;

#line 200 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
        // The Qt API is broken (and won't be fixed as it would break binary
        // compatibility) regarding the internal id of a model index on different
        // architectures (32 vs 64 bits).  We choose to work around the breakage as it
        // is fairly subtle and continues to catch people out.  Instead of letting Qt
        // convert betweed an integer id and a pointer id (the internal format used by
        // Qt) we let Python do it.
        
        void *ptr;
        
        if (a2)
        {
            // Try and convert it to a Python long and fallback to the object's
            // address if it fails.
            ptr = PyLong_AsVoidPtr(a2);
        
            if (PyErr_Occurred())
            {
                PyErr_Clear();
                ptr = a2;
            }
        }
        else
        {
            ptr = 0;
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = new QModelIndex(sipCpp->createIndex(a0, a1, ptr));
        #else
        sipRes = new QModelIndex(sipCpp->sipProtect_createIndex(a0, a1, ptr));
        #endif
#line 80731 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_createIndex, doc_QAbstractItemModel_createIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginMoveRows, "beginMoveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_beginMoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginMoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        const  ::QModelIndex* a3;
        int a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iiJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->beginMoveRows(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginMoveRows, doc_QAbstractItemModel_beginMoveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endMoveRows, "endMoveRows(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endMoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endMoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endMoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endMoveRows, doc_QAbstractItemModel_endMoveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginMoveColumns, "beginMoveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_beginMoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginMoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        const  ::QModelIndex* a3;
        int a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9iiJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->beginMoveColumns(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginMoveColumns, doc_QAbstractItemModel_beginMoveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endMoveColumns, "endMoveColumns(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endMoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endMoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->endMoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endMoveColumns, doc_QAbstractItemModel_endMoveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_beginResetModel, "beginResetModel(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_beginResetModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginResetModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginResetModel();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_beginResetModel, doc_QAbstractItemModel_beginResetModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_endResetModel, "endResetModel(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_endResetModel(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endResetModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endResetModel();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_endResetModel, doc_QAbstractItemModel_endResetModel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_resetInternalData, "resetInternalData(self)");

extern "C" {static PyObject *meth_QAbstractItemModel_resetInternalData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_resetInternalData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QAbstractItemModel, &sipCpp))
        {
            sipCpp->resetInternalData();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_resetInternalData, doc_QAbstractItemModel_resetInternalData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_canDropMimeData, "canDropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_canDropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_canDropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
        const  ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::canDropMimeData(a0,a1,a2,a3,*a4) : sipCpp->canDropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_canDropMimeData, doc_QAbstractItemModel_canDropMimeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_moveRows, "moveRows(self, QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_moveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_moveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        const  ::QModelIndex* a3;
        int a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iiJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::moveRows(*a0,a1,a2,*a3,a4) : sipCpp->moveRows(*a0,a1,a2,*a3,a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_moveRows, doc_QAbstractItemModel_moveRows);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_moveColumns, "moveColumns(self, QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_moveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_moveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
        const  ::QModelIndex* a3;
        int a4;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iiJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractItemModel::moveColumns(*a0,a1,a2,*a3,a4) : sipCpp->moveColumns(*a0,a1,a2,*a3,a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_moveColumns, doc_QAbstractItemModel_moveColumns);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_moveRow, "moveRow(self, QModelIndex, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_moveRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_moveRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QModelIndex* a2;
        int a3;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QModelIndex, &a2, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->moveRow(*a0,a1,*a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_moveRow, doc_QAbstractItemModel_moveRow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_moveColumn, "moveColumn(self, QModelIndex, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_moveColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_moveColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QModelIndex* a2;
        int a3;
         ::QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9iJ9i", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QModelIndex, &a2, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->moveColumn(*a0,a1,*a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_moveColumn, doc_QAbstractItemModel_moveColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractItemModel_checkIndex, "checkIndex(self, QModelIndex, options: Union[QAbstractItemModel.CheckIndexOptions, QAbstractItemModel.CheckIndexOption] = QAbstractItemModel.CheckIndexOption.NoOption) -> bool");

extern "C" {static PyObject *meth_QAbstractItemModel_checkIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_checkIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemModel::CheckIndexOptions a1def = QAbstractItemModel::CheckIndexOption::NoOption;
         ::QAbstractItemModel::CheckIndexOptions* a1 = &a1def;
        int a1State = 0;
        const  ::QAbstractItemModel *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QAbstractItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemModel_CheckIndexOptions, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->checkIndex(*a0,*a1);
            sipReleaseType(a1,sipType_QAbstractItemModel_CheckIndexOptions,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_checkIndex, doc_QAbstractItemModel_checkIndex);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractItemModel(void *, const sipTypeDef *);}
static void *cast_QAbstractItemModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractItemModel *sipCpp = reinterpret_cast< ::QAbstractItemModel *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemModel(void *, int);}
static void release_QAbstractItemModel(void *sipCppV, int)
{
     ::QAbstractItemModel *sipCpp = reinterpret_cast< ::QAbstractItemModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractItemModel(sipSimpleWrapper *);}
static void dealloc_QAbstractItemModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractItemModel *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractItemModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractItemModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractItemModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractItemModel *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractItemModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractItemModel[] = {{183, 255, 1}};


static PyMethodDef methods_QAbstractItemModel[] = {
    {SIP_MLNAME_CAST(sipName_beginInsertColumns), meth_QAbstractItemModel_beginInsertColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_beginInsertColumns)},
    {SIP_MLNAME_CAST(sipName_beginInsertRows), meth_QAbstractItemModel_beginInsertRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_beginInsertRows)},
    {SIP_MLNAME_CAST(sipName_beginMoveColumns), meth_QAbstractItemModel_beginMoveColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_beginMoveColumns)},
    {SIP_MLNAME_CAST(sipName_beginMoveRows), meth_QAbstractItemModel_beginMoveRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_beginMoveRows)},
    {SIP_MLNAME_CAST(sipName_beginRemoveColumns), meth_QAbstractItemModel_beginRemoveColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_beginRemoveColumns)},
    {SIP_MLNAME_CAST(sipName_beginRemoveRows), meth_QAbstractItemModel_beginRemoveRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_beginRemoveRows)},
    {SIP_MLNAME_CAST(sipName_beginResetModel), meth_QAbstractItemModel_beginResetModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_beginResetModel)},
    {SIP_MLNAME_CAST(sipName_buddy), meth_QAbstractItemModel_buddy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_buddy)},
    {SIP_MLNAME_CAST(sipName_canDropMimeData), meth_QAbstractItemModel_canDropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_canDropMimeData)},
    {SIP_MLNAME_CAST(sipName_canFetchMore), meth_QAbstractItemModel_canFetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_canFetchMore)},
    {SIP_MLNAME_CAST(sipName_changePersistentIndex), meth_QAbstractItemModel_changePersistentIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_changePersistentIndex)},
    {SIP_MLNAME_CAST(sipName_changePersistentIndexList), meth_QAbstractItemModel_changePersistentIndexList, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_changePersistentIndexList)},
    {SIP_MLNAME_CAST(sipName_checkIndex), SIP_MLMETH_CAST(meth_QAbstractItemModel_checkIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_checkIndex)},
    {SIP_MLNAME_CAST(sipName_columnCount), SIP_MLMETH_CAST(meth_QAbstractItemModel_columnCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_createIndex), SIP_MLMETH_CAST(meth_QAbstractItemModel_createIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_createIndex)},
    {SIP_MLNAME_CAST(sipName_data), SIP_MLMETH_CAST(meth_QAbstractItemModel_data), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_data)},
    {SIP_MLNAME_CAST(sipName_decodeData), meth_QAbstractItemModel_decodeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_decodeData)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QAbstractItemModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_encodeData), meth_QAbstractItemModel_encodeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_encodeData)},
    {SIP_MLNAME_CAST(sipName_endInsertColumns), meth_QAbstractItemModel_endInsertColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_endInsertColumns)},
    {SIP_MLNAME_CAST(sipName_endInsertRows), meth_QAbstractItemModel_endInsertRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_endInsertRows)},
    {SIP_MLNAME_CAST(sipName_endMoveColumns), meth_QAbstractItemModel_endMoveColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_endMoveColumns)},
    {SIP_MLNAME_CAST(sipName_endMoveRows), meth_QAbstractItemModel_endMoveRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_endMoveRows)},
    {SIP_MLNAME_CAST(sipName_endRemoveColumns), meth_QAbstractItemModel_endRemoveColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_endRemoveColumns)},
    {SIP_MLNAME_CAST(sipName_endRemoveRows), meth_QAbstractItemModel_endRemoveRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_endRemoveRows)},
    {SIP_MLNAME_CAST(sipName_endResetModel), meth_QAbstractItemModel_endResetModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_endResetModel)},
    {SIP_MLNAME_CAST(sipName_fetchMore), meth_QAbstractItemModel_fetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_fetchMore)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QAbstractItemModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), SIP_MLMETH_CAST(meth_QAbstractItemModel_hasChildren), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_hasIndex), SIP_MLMETH_CAST(meth_QAbstractItemModel_hasIndex), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_hasIndex)},
    {SIP_MLNAME_CAST(sipName_headerData), SIP_MLMETH_CAST(meth_QAbstractItemModel_headerData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_headerData)},
    {SIP_MLNAME_CAST(sipName_index), SIP_MLMETH_CAST(meth_QAbstractItemModel_index), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_index)},
    {SIP_MLNAME_CAST(sipName_insertColumn), SIP_MLMETH_CAST(meth_QAbstractItemModel_insertColumn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_insertColumn)},
    {SIP_MLNAME_CAST(sipName_insertColumns), SIP_MLMETH_CAST(meth_QAbstractItemModel_insertColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRow), SIP_MLMETH_CAST(meth_QAbstractItemModel_insertRow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_insertRow)},
    {SIP_MLNAME_CAST(sipName_insertRows), SIP_MLMETH_CAST(meth_QAbstractItemModel_insertRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_itemData), meth_QAbstractItemModel_itemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_itemData)},
    {SIP_MLNAME_CAST(sipName_match), SIP_MLMETH_CAST(meth_QAbstractItemModel_match), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_match)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QAbstractItemModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QAbstractItemModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_moveColumn), meth_QAbstractItemModel_moveColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_moveColumn)},
    {SIP_MLNAME_CAST(sipName_moveColumns), meth_QAbstractItemModel_moveColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_moveColumns)},
    {SIP_MLNAME_CAST(sipName_moveRow), meth_QAbstractItemModel_moveRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_moveRow)},
    {SIP_MLNAME_CAST(sipName_moveRows), meth_QAbstractItemModel_moveRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_moveRows)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QAbstractItemModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_parent)},
    {SIP_MLNAME_CAST(sipName_persistentIndexList), meth_QAbstractItemModel_persistentIndexList, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_persistentIndexList)},
    {SIP_MLNAME_CAST(sipName_removeColumn), SIP_MLMETH_CAST(meth_QAbstractItemModel_removeColumn), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_removeColumn)},
    {SIP_MLNAME_CAST(sipName_removeColumns), SIP_MLMETH_CAST(meth_QAbstractItemModel_removeColumns), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRow), SIP_MLMETH_CAST(meth_QAbstractItemModel_removeRow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_removeRow)},
    {SIP_MLNAME_CAST(sipName_removeRows), SIP_MLMETH_CAST(meth_QAbstractItemModel_removeRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_resetInternalData), meth_QAbstractItemModel_resetInternalData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_resetInternalData)},
    {SIP_MLNAME_CAST(sipName_revert), meth_QAbstractItemModel_revert, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_revert)},
    {SIP_MLNAME_CAST(sipName_roleNames), meth_QAbstractItemModel_roleNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_roleNames)},
    {SIP_MLNAME_CAST(sipName_rowCount), SIP_MLMETH_CAST(meth_QAbstractItemModel_rowCount), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setData), SIP_MLMETH_CAST(meth_QAbstractItemModel_setData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_setData)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), SIP_MLMETH_CAST(meth_QAbstractItemModel_setHeaderData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setItemData), meth_QAbstractItemModel_setItemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_setItemData)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QAbstractItemModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_sibling)},
    {SIP_MLNAME_CAST(sipName_sort), SIP_MLMETH_CAST(meth_QAbstractItemModel_sort), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractItemModel_sort)},
    {SIP_MLNAME_CAST(sipName_span), meth_QAbstractItemModel_span, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_span)},
    {SIP_MLNAME_CAST(sipName_submit), meth_QAbstractItemModel_submit, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_submit)},
    {SIP_MLNAME_CAST(sipName_supportedDragActions), meth_QAbstractItemModel_supportedDragActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_supportedDragActions)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QAbstractItemModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractItemModel_supportedDropActions)}
};

static sipEnumMemberDef enummembers_QAbstractItemModel[] = {
    {sipName_DoNotUseParent, static_cast<int>(::QAbstractItemModel::CheckIndexOption::DoNotUseParent), 7},
    {sipName_HorizontalSortHint, static_cast<int>( ::QAbstractItemModel::HorizontalSortHint), 9},
    {sipName_IndexIsValid, static_cast<int>(::QAbstractItemModel::CheckIndexOption::IndexIsValid), 7},
    {sipName_NoLayoutChangeHint, static_cast<int>( ::QAbstractItemModel::NoLayoutChangeHint), 9},
    {sipName_NoOption, static_cast<int>(::QAbstractItemModel::CheckIndexOption::NoOption), 7},
    {sipName_ParentIsInvalid, static_cast<int>(::QAbstractItemModel::CheckIndexOption::ParentIsInvalid), 7},
    {sipName_VerticalSortHint, static_cast<int>( ::QAbstractItemModel::VerticalSortHint), 9},
};

PyDoc_STRVAR(doc_QAbstractItemModel, "\1QAbstractItemModel(parent: QObject = None)");


extern "C" {static int emit_QAbstractItemModel_layoutChanged(void *, PyObject *);}

static int emit_QAbstractItemModel_layoutChanged(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAbstractItemModel *sipCpp = reinterpret_cast<QAbstractItemModel *>(sipCppV);

    {
        const QList< ::QPersistentModelIndex>& a0def = QList<QPersistentModelIndex>();
        const QList< ::QPersistentModelIndex>* a0 = &a0def;
        int a0State = 0;
         ::QAbstractItemModel::LayoutChangeHint a1 = QAbstractItemModel::NoLayoutChangeHint;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J1E", sipType_QList_0100QPersistentModelIndex,&a0, &a0State, sipType_QAbstractItemModel_LayoutChangeHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->layoutChanged(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList< ::QPersistentModelIndex> *>(a0),sipType_QList_0100QPersistentModelIndex,a0State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_layoutChanged, SIP_NULLPTR);

    return -1;
}


extern "C" {static int emit_QAbstractItemModel_layoutAboutToBeChanged(void *, PyObject *);}

static int emit_QAbstractItemModel_layoutAboutToBeChanged(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAbstractItemModel *sipCpp = reinterpret_cast<QAbstractItemModel *>(sipCppV);

    {
        const QList< ::QPersistentModelIndex>& a0def = QList<QPersistentModelIndex>();
        const QList< ::QPersistentModelIndex>* a0 = &a0def;
        int a0State = 0;
         ::QAbstractItemModel::LayoutChangeHint a1 = QAbstractItemModel::NoLayoutChangeHint;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J1E", sipType_QList_0100QPersistentModelIndex,&a0, &a0State, sipType_QAbstractItemModel_LayoutChangeHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->layoutAboutToBeChanged(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList< ::QPersistentModelIndex> *>(a0),sipType_QList_0100QPersistentModelIndex,a0State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_layoutAboutToBeChanged, SIP_NULLPTR);

    return -1;
}


extern "C" {static int emit_QAbstractItemModel_dataChanged(void *, PyObject *);}

static int emit_QAbstractItemModel_dataChanged(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QAbstractItemModel *sipCpp = reinterpret_cast<QAbstractItemModel *>(sipCppV);

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
        const  ::QVector<int>& a2def = QVector<int>();
        const  ::QVector<int>* a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9|J1", sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->dataChanged(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast< ::QVector<int> *>(a2),sipType_QVector_1800,a2State);

            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractItemModel, sipName_dataChanged, SIP_NULLPTR);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractItemModel[] = {
    {"columnsMoved(QModelIndex,int,int,QModelIndex,int)", "\1columnsMoved(self, QModelIndex, int, int, QModelIndex, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsAboutToBeMoved(QModelIndex,int,int,QModelIndex,int)", "\1columnsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsMoved(QModelIndex,int,int,QModelIndex,int)", "\1rowsMoved(self, QModelIndex, int, int, QModelIndex, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsAboutToBeMoved(QModelIndex,int,int,QModelIndex,int)", "\1rowsAboutToBeMoved(self, QModelIndex, int, int, QModelIndex, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"modelReset()", "\1modelReset(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"modelAboutToBeReset()", "\1modelAboutToBeReset(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsRemoved(QModelIndex,int,int)", "\1columnsRemoved(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsAboutToBeRemoved(QModelIndex,int,int)", "\1columnsAboutToBeRemoved(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsInserted(QModelIndex,int,int)", "\1columnsInserted(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"columnsAboutToBeInserted(QModelIndex,int,int)", "\1columnsAboutToBeInserted(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsRemoved(QModelIndex,int,int)", "\1rowsRemoved(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsAboutToBeRemoved(QModelIndex,int,int)", "\1rowsAboutToBeRemoved(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsInserted(QModelIndex,int,int)", "\1rowsInserted(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"rowsAboutToBeInserted(QModelIndex,int,int)", "\1rowsAboutToBeInserted(self, QModelIndex, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"layoutChanged(QList<QPersistentModelIndex>,QAbstractItemModel::LayoutChangeHint)", "\1layoutChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint)", SIP_NULLPTR, emit_QAbstractItemModel_layoutChanged},
    {"layoutAboutToBeChanged(QList<QPersistentModelIndex>,QAbstractItemModel::LayoutChangeHint)", "\1layoutAboutToBeChanged(self, parents: Iterable[QPersistentModelIndex] = [], hint: QAbstractItemModel.LayoutChangeHint = QAbstractItemModel.NoLayoutChangeHint)", SIP_NULLPTR, emit_QAbstractItemModel_layoutAboutToBeChanged},
    {"headerDataChanged(Qt::Orientation,int,int)", "\1headerDataChanged(self, Qt.Orientation, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"dataChanged(QModelIndex,QModelIndex,QVector<int>)", "\1dataChanged(self, QModelIndex, QModelIndex, roles: Iterable[int] = [])", SIP_NULLPTR, emit_QAbstractItemModel_dataChanged},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractItemModel = {
    & ::QAbstractItemModel::staticMetaObject,
    0,
    signals_QAbstractItemModel,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractItemModel = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemModel,
        {SIP_NULLPTR},
        &plugin_QAbstractItemModel
    },
    {
        sipNameNr_QAbstractItemModel,
        {0, 0, 1},
        63, methods_QAbstractItemModel,
        7, enummembers_QAbstractItemModel,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractItemModel,
    -1,
    -1,
    supers_QAbstractItemModel,
    SIP_NULLPTR,
    init_type_QAbstractItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractItemModel,
    cast_QAbstractItemModel,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 81479 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 81483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 81486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81489 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81492 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QPersistentModelIndex_row, "row(self) -> int");

extern "C" {static PyObject *meth_QPersistentModelIndex_row(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPersistentModelIndex, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->row();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_row, doc_QPersistentModelIndex_row);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_column, "column(self) -> int");

extern "C" {static PyObject *meth_QPersistentModelIndex_column(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPersistentModelIndex, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->column();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_column, doc_QPersistentModelIndex_column);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_data, "data(self, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QPersistentModelIndex_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = Qt::DisplayRole;
        const  ::QPersistentModelIndex *sipCpp;

        static const char *sipKwdList[] = {
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QPersistentModelIndex, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->data(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_data, doc_QPersistentModelIndex_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_flags, "flags(self) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QPersistentModelIndex_flags(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPersistentModelIndex, &sipCpp))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_flags, doc_QPersistentModelIndex_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_parent, "parent(self) -> QModelIndex");

extern "C" {static PyObject *meth_QPersistentModelIndex_parent(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPersistentModelIndex, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->parent());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_parent, doc_QPersistentModelIndex_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_sibling, "sibling(self, int, int) -> QModelIndex");

extern "C" {static PyObject *meth_QPersistentModelIndex_sibling(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPersistentModelIndex, &sipCpp, &a0, &a1))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->sibling(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_sibling, doc_QPersistentModelIndex_sibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_child, "child(self, int, int) -> QModelIndex");

extern "C" {static PyObject *meth_QPersistentModelIndex_child(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_child(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPersistentModelIndex, &sipCpp, &a0, &a1))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->child(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_child, doc_QPersistentModelIndex_child);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QPersistentModelIndex_model(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPersistentModelIndex, &sipCpp))
        {
            const  ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(const_cast< ::QAbstractItemModel *>(sipRes),sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_model, doc_QPersistentModelIndex_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QPersistentModelIndex_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPersistentModelIndex, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_isValid, doc_QPersistentModelIndex_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QPersistentModelIndex_swap, "swap(self, QPersistentModelIndex)");

extern "C" {static PyObject *meth_QPersistentModelIndex_swap(PyObject *, PyObject *);}
static PyObject *meth_QPersistentModelIndex_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QPersistentModelIndex* a0;
         ::QPersistentModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPersistentModelIndex, &sipCpp, sipType_QPersistentModelIndex, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPersistentModelIndex, sipName_swap, doc_QPersistentModelIndex_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QPersistentModelIndex___ge__(PyObject *,PyObject *);}
static PyObject *slot_QPersistentModelIndex___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPersistentModelIndex *sipCpp = reinterpret_cast< ::QPersistentModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPersistentModelIndex));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPersistentModelIndex, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QPersistentModelIndex::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QPersistentModelIndex, sipSelf, sipArg);
}


extern "C" {static long slot_QPersistentModelIndex___hash__(PyObject *);}
static long slot_QPersistentModelIndex___hash__(PyObject *sipSelf)
{
     ::QPersistentModelIndex *sipCpp = reinterpret_cast< ::QPersistentModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPersistentModelIndex));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 102 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
        sipRes = qHash(*sipCpp);
#line 81831 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QPersistentModelIndex___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPersistentModelIndex___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPersistentModelIndex *sipCpp = reinterpret_cast< ::QPersistentModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPersistentModelIndex));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPersistentModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPersistentModelIndex::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPersistentModelIndex::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QPersistentModelIndex, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPersistentModelIndex___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPersistentModelIndex___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPersistentModelIndex *sipCpp = reinterpret_cast< ::QPersistentModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPersistentModelIndex));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPersistentModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPersistentModelIndex::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPersistentModelIndex::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QPersistentModelIndex, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPersistentModelIndex___lt__(PyObject *,PyObject *);}
static PyObject *slot_QPersistentModelIndex___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPersistentModelIndex *sipCpp = reinterpret_cast< ::QPersistentModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPersistentModelIndex));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QPersistentModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPersistentModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QPersistentModelIndex::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QPersistentModelIndex, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QPersistentModelIndex(void *, int);}
static void release_QPersistentModelIndex(void *sipCppV, int)
{
    delete reinterpret_cast< ::QPersistentModelIndex *>(sipCppV);
}


extern "C" {static void assign_QPersistentModelIndex(void *, SIP_SSIZE_T, void *);}
static void assign_QPersistentModelIndex(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QPersistentModelIndex *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QPersistentModelIndex *>(sipSrc);
}


extern "C" {static void *array_QPersistentModelIndex(SIP_SSIZE_T);}
static void *array_QPersistentModelIndex(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPersistentModelIndex[sipNrElem];
}


extern "C" {static void *copy_QPersistentModelIndex(const void *, SIP_SSIZE_T);}
static void *copy_QPersistentModelIndex(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPersistentModelIndex(reinterpret_cast<const  ::QPersistentModelIndex *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPersistentModelIndex(sipSimpleWrapper *);}
static void dealloc_QPersistentModelIndex(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPersistentModelIndex(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPersistentModelIndex(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPersistentModelIndex(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPersistentModelIndex *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QPersistentModelIndex();

            return sipCpp;
        }
    }

    {
        const  ::QModelIndex* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QModelIndex, &a0))
        {
            sipCpp = new  ::QPersistentModelIndex(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QPersistentModelIndex* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPersistentModelIndex, &a0))
        {
            sipCpp = new  ::QPersistentModelIndex(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPersistentModelIndex[] = {
    {(void *)slot_QPersistentModelIndex___ge__, ge_slot},
    {(void *)slot_QPersistentModelIndex___hash__, hash_slot},
    {(void *)slot_QPersistentModelIndex___ne__, ne_slot},
    {(void *)slot_QPersistentModelIndex___eq__, eq_slot},
    {(void *)slot_QPersistentModelIndex___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPersistentModelIndex[] = {
    {SIP_MLNAME_CAST(sipName_child), meth_QPersistentModelIndex_child, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_child)},
    {SIP_MLNAME_CAST(sipName_column), meth_QPersistentModelIndex_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_column)},
    {SIP_MLNAME_CAST(sipName_data), SIP_MLMETH_CAST(meth_QPersistentModelIndex_data), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_data)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QPersistentModelIndex_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_flags)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPersistentModelIndex_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_isValid)},
    {SIP_MLNAME_CAST(sipName_model), meth_QPersistentModelIndex_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_model)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QPersistentModelIndex_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_parent)},
    {SIP_MLNAME_CAST(sipName_row), meth_QPersistentModelIndex_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_row)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QPersistentModelIndex_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_sibling)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPersistentModelIndex_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPersistentModelIndex_swap)}
};

PyDoc_STRVAR(doc_QPersistentModelIndex, "\1QPersistentModelIndex()\n"
"QPersistentModelIndex(QModelIndex)\n"
"QPersistentModelIndex(QPersistentModelIndex)");


static pyqt5ClassPluginDef plugin_QPersistentModelIndex = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QPersistentModelIndex = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QPersistentModelIndex,
        {SIP_NULLPTR},
        &plugin_QPersistentModelIndex
    },
    {
        sipNameNr_QPersistentModelIndex,
        {0, 0, 1},
        10, methods_QPersistentModelIndex,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QPersistentModelIndex,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QPersistentModelIndex,
    init_type_QPersistentModelIndex,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QPersistentModelIndex,
    assign_QPersistentModelIndex,
    array_QPersistentModelIndex,
    copy_QPersistentModelIndex,
    release_QPersistentModelIndex,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 82133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 82137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 82140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 82146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


PyDoc_STRVAR(doc_QModelIndex_child, "child(self, int, int) -> QModelIndex");

extern "C" {static PyObject *meth_QModelIndex_child(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_child(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QModelIndex, &sipCpp, &a0, &a1))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->child(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_child, doc_QModelIndex_child);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_row, "row(self) -> int");

extern "C" {static PyObject *meth_QModelIndex_row(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QModelIndex, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->row();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_row, doc_QModelIndex_row);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_column, "column(self) -> int");

extern "C" {static PyObject *meth_QModelIndex_column(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QModelIndex, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->column();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_column, doc_QModelIndex_column);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_data, "data(self, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QModelIndex_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = Qt::DisplayRole;
        const  ::QModelIndex *sipCpp;

        static const char *sipKwdList[] = {
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QModelIndex, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->data(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_data, doc_QModelIndex_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_flags, "flags(self) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QModelIndex_flags(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QModelIndex, &sipCpp))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_flags, doc_QModelIndex_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_internalPointer, "internalPointer(self) -> object");

extern "C" {static PyObject *meth_QModelIndex_internalPointer(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_internalPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QModelIndex, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
        sipRes = reinterpret_cast<PyObject *>(sipCpp->internalPointer());
        
        if (!sipRes)
            sipRes = Py_None;
        
        Py_INCREF(sipRes);
#line 82318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_internalPointer, doc_QModelIndex_internalPointer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_internalId, "internalId(self) -> int");

extern "C" {static PyObject *meth_QModelIndex_internalId(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_internalId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QModelIndex, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
        // Python needs to treat the result as an unsigned value (which may not happen
        // on 64 bit systems).  Instead we get the real value as it is stored (as a
        // void *) and let Python convert that.
        sipRes = PyLong_FromVoidPtr(sipCpp->internalPointer());
#line 82351 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_internalId, doc_QModelIndex_internalId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QModelIndex_model(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QModelIndex, &sipCpp))
        {
            const  ::QAbstractItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(const_cast< ::QAbstractItemModel *>(sipRes),sipType_QAbstractItemModel,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_model, doc_QModelIndex_model);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QModelIndex_isValid(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QModelIndex, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_isValid, doc_QModelIndex_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_parent, "parent(self) -> QModelIndex");

extern "C" {static PyObject *meth_QModelIndex_parent(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QModelIndex, &sipCpp))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->parent());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_parent, doc_QModelIndex_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_sibling, "sibling(self, int, int) -> QModelIndex");

extern "C" {static PyObject *meth_QModelIndex_sibling(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        int a1;
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QModelIndex, &sipCpp, &a0, &a1))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->sibling(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_sibling, doc_QModelIndex_sibling);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_siblingAtColumn, "siblingAtColumn(self, int) -> QModelIndex");

extern "C" {static PyObject *meth_QModelIndex_siblingAtColumn(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_siblingAtColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QModelIndex, &sipCpp, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->siblingAtColumn(a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_siblingAtColumn, doc_QModelIndex_siblingAtColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QModelIndex_siblingAtRow, "siblingAtRow(self, int) -> QModelIndex");

extern "C" {static PyObject *meth_QModelIndex_siblingAtRow(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_siblingAtRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QModelIndex *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QModelIndex, &sipCpp, &a0))
        {
             ::QModelIndex*sipRes;

            sipRes = new  ::QModelIndex(sipCpp->siblingAtRow(a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QModelIndex, sipName_siblingAtRow, doc_QModelIndex_siblingAtRow);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QModelIndex___ge__(PyObject *,PyObject *);}
static PyObject *slot_QModelIndex___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QModelIndex *sipCpp = reinterpret_cast< ::QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QModelIndex::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ge_slot, sipType_QModelIndex, sipSelf, sipArg);
}


extern "C" {static long slot_QModelIndex___hash__(PyObject *);}
static long slot_QModelIndex___hash__(PyObject *sipSelf)
{
     ::QModelIndex *sipCpp = reinterpret_cast< ::QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractitemmodel.sip"
        sipRes = qHash(*sipCpp);
#line 82583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QModelIndex___ne__(PyObject *,PyObject *);}
static PyObject *slot_QModelIndex___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QModelIndex *sipCpp = reinterpret_cast< ::QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QModelIndex::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_QModelIndex, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QModelIndex___lt__(PyObject *,PyObject *);}
static PyObject *slot_QModelIndex___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QModelIndex *sipCpp = reinterpret_cast< ::QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QModelIndex::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, lt_slot, sipType_QModelIndex, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QModelIndex___eq__(PyObject *,PyObject *);}
static PyObject *slot_QModelIndex___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QModelIndex *sipCpp = reinterpret_cast< ::QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QModelIndex::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_QModelIndex, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QModelIndex(void *, int);}
static void release_QModelIndex(void *sipCppV, int)
{
    delete reinterpret_cast< ::QModelIndex *>(sipCppV);
}


extern "C" {static void assign_QModelIndex(void *, SIP_SSIZE_T, void *);}
static void assign_QModelIndex(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QModelIndex *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QModelIndex *>(sipSrc);
}


extern "C" {static void *array_QModelIndex(SIP_SSIZE_T);}
static void *array_QModelIndex(SIP_SSIZE_T sipNrElem)
{
    return new  ::QModelIndex[sipNrElem];
}


extern "C" {static void *copy_QModelIndex(const void *, SIP_SSIZE_T);}
static void *copy_QModelIndex(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QModelIndex(reinterpret_cast<const  ::QModelIndex *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QModelIndex(sipSimpleWrapper *);}
static void dealloc_QModelIndex(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QModelIndex(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QModelIndex(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QModelIndex(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QModelIndex *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QModelIndex();

            return sipCpp;
        }
    }

    {
        const  ::QModelIndex* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QModelIndex, &a0))
        {
            sipCpp = new  ::QModelIndex(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QPersistentModelIndex* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QPersistentModelIndex, &a0))
        {
            sipCpp = new  ::QModelIndex(a0->operator const  ::QModelIndex&());

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QModelIndex[] = {
    {(void *)slot_QModelIndex___ge__, ge_slot},
    {(void *)slot_QModelIndex___hash__, hash_slot},
    {(void *)slot_QModelIndex___ne__, ne_slot},
    {(void *)slot_QModelIndex___lt__, lt_slot},
    {(void *)slot_QModelIndex___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QModelIndex[] = {
    {SIP_MLNAME_CAST(sipName_child), meth_QModelIndex_child, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_child)},
    {SIP_MLNAME_CAST(sipName_column), meth_QModelIndex_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_column)},
    {SIP_MLNAME_CAST(sipName_data), SIP_MLMETH_CAST(meth_QModelIndex_data), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QModelIndex_data)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QModelIndex_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_flags)},
    {SIP_MLNAME_CAST(sipName_internalId), meth_QModelIndex_internalId, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_internalId)},
    {SIP_MLNAME_CAST(sipName_internalPointer), meth_QModelIndex_internalPointer, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_internalPointer)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QModelIndex_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_isValid)},
    {SIP_MLNAME_CAST(sipName_model), meth_QModelIndex_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_model)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QModelIndex_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_parent)},
    {SIP_MLNAME_CAST(sipName_row), meth_QModelIndex_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_row)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QModelIndex_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_sibling)},
    {SIP_MLNAME_CAST(sipName_siblingAtColumn), meth_QModelIndex_siblingAtColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_siblingAtColumn)},
    {SIP_MLNAME_CAST(sipName_siblingAtRow), meth_QModelIndex_siblingAtRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QModelIndex_siblingAtRow)}
};

PyDoc_STRVAR(doc_QModelIndex, "\1QModelIndex()\n"
"QModelIndex(QModelIndex)\n"
"QModelIndex(QPersistentModelIndex)");


static pyqt5ClassPluginDef plugin_QModelIndex = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QModelIndex = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QModelIndex,
        {SIP_NULLPTR},
        &plugin_QModelIndex
    },
    {
        sipNameNr_QModelIndex,
        {0, 0, 1},
        13, methods_QModelIndex,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QModelIndex,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QModelIndex,
    init_type_QModelIndex,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QModelIndex,
    assign_QModelIndex,
    array_QModelIndex,
    copy_QModelIndex,
    release_QModelIndex,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 82864 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractEventDispatcher_TimerInfo(void *, int);}
static void release_QAbstractEventDispatcher_TimerInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAbstractEventDispatcher::TimerInfo *>(sipCppV);
}


extern "C" {static void dealloc_QAbstractEventDispatcher_TimerInfo(sipSimpleWrapper *);}
static void dealloc_QAbstractEventDispatcher_TimerInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractEventDispatcher_TimerInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QAbstractEventDispatcher_TimerInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractEventDispatcher_TimerInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QAbstractEventDispatcher::TimerInfo *sipCpp = SIP_NULLPTR;

    {
        int a0;
        int a1;
         ::Qt::TimerType a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "iiE", &a0, &a1, sipType_Qt_TimerType, &a2))
        {
            sipCpp = new  ::QAbstractEventDispatcher::TimerInfo(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QAbstractEventDispatcher::TimerInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QAbstractEventDispatcher_TimerInfo, &a0))
        {
            sipCpp = new  ::QAbstractEventDispatcher::TimerInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QAbstractEventDispatcher_TimerInfo_interval(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractEventDispatcher_TimerInfo_interval(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QAbstractEventDispatcher::TimerInfo *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher::TimerInfo *>(sipSelf);

    sipVal = sipCpp->interval;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QAbstractEventDispatcher_TimerInfo_interval(void *, PyObject *, PyObject *);}
static int varset_QAbstractEventDispatcher_TimerInfo_interval(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QAbstractEventDispatcher::TimerInfo *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher::TimerInfo *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->interval = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QAbstractEventDispatcher_TimerInfo_timerId(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractEventDispatcher_TimerInfo_timerId(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::QAbstractEventDispatcher::TimerInfo *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher::TimerInfo *>(sipSelf);

    sipVal = sipCpp->timerId;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QAbstractEventDispatcher_TimerInfo_timerId(void *, PyObject *, PyObject *);}
static int varset_QAbstractEventDispatcher_TimerInfo_timerId(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::QAbstractEventDispatcher::TimerInfo *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher::TimerInfo *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->timerId = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QAbstractEventDispatcher_TimerInfo_timerType(void *, PyObject *, PyObject *);}
static PyObject *varget_QAbstractEventDispatcher_TimerInfo_timerType(void *sipSelf, PyObject *, PyObject *)
{
     ::Qt::TimerType sipVal;
     ::QAbstractEventDispatcher::TimerInfo *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher::TimerInfo *>(sipSelf);

    sipVal = sipCpp->timerType;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_Qt_TimerType);
}


extern "C" {static int varset_QAbstractEventDispatcher_TimerInfo_timerType(void *, PyObject *, PyObject *);}
static int varset_QAbstractEventDispatcher_TimerInfo_timerType(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::Qt::TimerType sipVal;
     ::QAbstractEventDispatcher::TimerInfo *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher::TimerInfo *>(sipSelf);

    sipVal = ( ::Qt::TimerType)sipConvertToEnum(sipPy, sipType_Qt_TimerType);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->timerType = sipVal;

    return 0;
}

sipVariableDef variables_QAbstractEventDispatcher_TimerInfo[] = {
    {InstanceVariable, sipName_interval, (PyMethodDef *)varget_QAbstractEventDispatcher_TimerInfo_interval, (PyMethodDef *)varset_QAbstractEventDispatcher_TimerInfo_interval, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_timerId, (PyMethodDef *)varget_QAbstractEventDispatcher_TimerInfo_timerId, (PyMethodDef *)varset_QAbstractEventDispatcher_TimerInfo_timerId, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_timerType, (PyMethodDef *)varget_QAbstractEventDispatcher_TimerInfo_timerType, (PyMethodDef *)varset_QAbstractEventDispatcher_TimerInfo_timerType, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QAbstractEventDispatcher_TimerInfo, "\1QAbstractEventDispatcher.TimerInfo(int, int, Qt.TimerType)\n"
"QAbstractEventDispatcher.TimerInfo(QAbstractEventDispatcher.TimerInfo)");


static pyqt5ClassPluginDef plugin_QAbstractEventDispatcher_TimerInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractEventDispatcher_TimerInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractEventDispatcher__TimerInfo,
        {SIP_NULLPTR},
        &plugin_QAbstractEventDispatcher_TimerInfo
    },
    {
        sipNameNr_TimerInfo,
        {4, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        3, variables_QAbstractEventDispatcher_TimerInfo,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractEventDispatcher_TimerInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QAbstractEventDispatcher_TimerInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractEventDispatcher_TimerInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractEventDispatcher_TimerInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 83079 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 83083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 83086 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 83089 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 83092 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 83097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qsocketnotifier.sip"
#include <qsocketnotifier.h>
#line 83103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 83106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 83109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 83112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 83115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 83118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 83121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 83124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 83127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 83130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 83133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 83136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 83139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 83142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 83145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractEventDispatcher : public  ::QAbstractEventDispatcher
{
public:
    sipQAbstractEventDispatcher( ::QObject*);
    virtual ~sipQAbstractEventDispatcher();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int remainingTime(int) SIP_OVERRIDE;
    void closingDown() SIP_OVERRIDE;
    void startingUp() SIP_OVERRIDE;
    void flush() SIP_OVERRIDE;
    void interrupt() SIP_OVERRIDE;
    void wakeUp() SIP_OVERRIDE;
    QList< ::QAbstractEventDispatcher::TimerInfo> registeredTimers( ::QObject*) const SIP_OVERRIDE;
    bool unregisterTimers( ::QObject*) SIP_OVERRIDE;
    bool unregisterTimer(int) SIP_OVERRIDE;
    void registerTimer(int,int, ::Qt::TimerType, ::QObject*) SIP_OVERRIDE;
    void unregisterSocketNotifier( ::QSocketNotifier*) SIP_OVERRIDE;
    void registerSocketNotifier( ::QSocketNotifier*) SIP_OVERRIDE;
    bool hasPendingEvents() SIP_OVERRIDE;
    bool processEvents( ::QEventLoop::ProcessEventsFlags) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractEventDispatcher(const sipQAbstractEventDispatcher &);
    sipQAbstractEventDispatcher &operator = (const sipQAbstractEventDispatcher &);

    char sipPyMethods[21];
};

sipQAbstractEventDispatcher::sipQAbstractEventDispatcher( ::QObject*a0):  ::QAbstractEventDispatcher(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractEventDispatcher::~sipQAbstractEventDispatcher()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractEventDispatcher::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractEventDispatcher);

    return  ::QAbstractEventDispatcher::metaObject();
}

int sipQAbstractEventDispatcher::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractEventDispatcher::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractEventDispatcher,_c,_id,_a);

    return _id;
}

void *sipQAbstractEventDispatcher::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractEventDispatcher, _clname, &sipCpp) ? sipCpp :  ::QAbstractEventDispatcher::qt_metacast(_clname));
}

int sipQAbstractEventDispatcher::remainingTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractEventDispatcher,sipName_remainingTime);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_18(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::closingDown()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_closingDown);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::closingDown();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::startingUp()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_startingUp);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::startingUp();
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::flush()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QAbstractEventDispatcher,sipName_flush);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::interrupt()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QAbstractEventDispatcher,sipName_interrupt);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQAbstractEventDispatcher::wakeUp()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QAbstractEventDispatcher,sipName_wakeUp);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QList< ::QAbstractEventDispatcher::TimerInfo> sipQAbstractEventDispatcher::registeredTimers( ::QObject*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_QAbstractEventDispatcher,sipName_registeredTimers);

    if (!sipMeth)
        return QList< ::QAbstractEventDispatcher::TimerInfo>();

    extern QList< ::QAbstractEventDispatcher::TimerInfo> sipVH_QtCore_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_QtCore_16(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::unregisterTimers( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimers);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_QtCore_15(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::unregisterTimer(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimer);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtCore_14(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::registerTimer(int a0,int a1, ::Qt::TimerType a2, ::QObject*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerTimer);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int, ::Qt::TimerType, ::QObject*);

    sipVH_QtCore_13(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQAbstractEventDispatcher::unregisterSocketNotifier( ::QSocketNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterSocketNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSocketNotifier*);

    sipVH_QtCore_12(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::registerSocketNotifier( ::QSocketNotifier*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerSocketNotifier);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSocketNotifier*);

    sipVH_QtCore_12(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::hasPendingEvents()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QAbstractEventDispatcher,sipName_hasPendingEvents);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractEventDispatcher::processEvents( ::QEventLoop::ProcessEventsFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,sipName_QAbstractEventDispatcher,sipName_processEvents);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEventLoop::ProcessEventsFlags);

    return sipVH_QtCore_10(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractEventDispatcher::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractEventDispatcher::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractEventDispatcher::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractEventDispatcher::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractEventDispatcher::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractEventDispatcher::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_instance, "instance(thread: QThread = None) -> QAbstractEventDispatcher");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_thread,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J8", sipType_QThread, &a0))
        {
             ::QAbstractEventDispatcher*sipRes;

            sipRes =  ::QAbstractEventDispatcher::instance(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_instance, doc_QAbstractEventDispatcher_instance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_processEvents, "processEvents(self, Union[QEventLoop.ProcessEventsFlags, QEventLoop.ProcessEventsFlag]) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEventLoop::ProcessEventsFlags* a0;
        int a0State = 0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QEventLoop_ProcessEventsFlags, &a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_processEvents);
                return SIP_NULLPTR;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEvents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_processEvents, doc_QAbstractEventDispatcher_processEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_hasPendingEvents, "hasPendingEvents(self) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_hasPendingEvents);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->hasPendingEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_hasPendingEvents, doc_QAbstractEventDispatcher_hasPendingEvents);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerSocketNotifier, "registerSocketNotifier(self, QSocketNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSocketNotifier* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QSocketNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier);
                return SIP_NULLPTR;
            }

            sipCpp->registerSocketNotifier(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier, doc_QAbstractEventDispatcher_registerSocketNotifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterSocketNotifier, "unregisterSocketNotifier(self, QSocketNotifier)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QSocketNotifier* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QSocketNotifier, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier);
                return SIP_NULLPTR;
            }

            sipCpp->unregisterSocketNotifier(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier, doc_QAbstractEventDispatcher_unregisterSocketNotifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registerTimer, "registerTimer(self, int, Qt.TimerType, QObject) -> int\n"
"registerTimer(self, int, int, Qt.TimerType, QObject)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::Qt::TimerType a1;
         ::QObject* a2;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXEJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, sipType_Qt_TimerType, &a1, sipType_QObject, &a2))
        {
            int sipRes;

            sipRes = sipCpp->registerTimer(a0,a1,a2);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
         ::Qt::TimerType a2;
         ::QObject* a3;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiEJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0, &a1, sipType_Qt_TimerType, &a2, sipType_QObject, &a3))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerTimer);
                return SIP_NULLPTR;
            }

            sipCpp->registerTimer(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registerTimer, doc_QAbstractEventDispatcher_registerTimer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterTimer, "unregisterTimer(self, int) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimer);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->unregisterTimer(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterTimer, doc_QAbstractEventDispatcher_unregisterTimer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_unregisterTimers, "unregisterTimers(self, QObject) -> bool");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QObject* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimers);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->unregisterTimers(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_unregisterTimers, doc_QAbstractEventDispatcher_unregisterTimers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_registeredTimers, "registeredTimers(self, QObject) -> List[QAbstractEventDispatcher.TimerInfo]");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QObject* a0;
        const  ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QObject, &a0))
        {
            QList< ::QAbstractEventDispatcher::TimerInfo>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registeredTimers);
                return SIP_NULLPTR;
            }

            sipRes = new QList< ::QAbstractEventDispatcher::TimerInfo>(sipCpp->registeredTimers(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QAbstractEventDispatcher_TimerInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_registeredTimers, doc_QAbstractEventDispatcher_registeredTimers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_wakeUp, "wakeUp(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_wakeUp);
                return SIP_NULLPTR;
            }

            sipCpp->wakeUp();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_wakeUp, doc_QAbstractEventDispatcher_wakeUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_interrupt, "interrupt(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_interrupt);
                return SIP_NULLPTR;
            }

            sipCpp->interrupt();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_interrupt, doc_QAbstractEventDispatcher_interrupt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_flush, "flush(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_flush);
                return SIP_NULLPTR;
            }

            sipCpp->flush();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_flush, doc_QAbstractEventDispatcher_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_startingUp, "startingUp(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractEventDispatcher::startingUp() : sipCpp->startingUp());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_startingUp, doc_QAbstractEventDispatcher_startingUp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_closingDown, "closingDown(self)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractEventDispatcher::closingDown() : sipCpp->closingDown());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_closingDown, doc_QAbstractEventDispatcher_closingDown);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_remainingTime, "remainingTime(self, int) -> int");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, &a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_remainingTime);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->remainingTime(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_remainingTime, doc_QAbstractEventDispatcher_remainingTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_installNativeEventFilter, "installNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_installNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_installNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->installNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_installNativeEventFilter, doc_QAbstractEventDispatcher_installNativeEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_removeNativeEventFilter, "removeNativeEventFilter(self, QAbstractNativeEventFilter)");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_removeNativeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_removeNativeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNativeEventFilter* a0;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QAbstractNativeEventFilter, &a0))
        {
            sipCpp->removeNativeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_removeNativeEventFilter, doc_QAbstractEventDispatcher_removeNativeEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractEventDispatcher_filterNativeEvent, "filterNativeEvent(self, Union[QByteArray, bytes, bytearray], sip.voidptr) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_QAbstractEventDispatcher_filterNativeEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_filterNativeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
         ::QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1v", &sipSelf, sipType_QAbstractEventDispatcher, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->filterNativeEvent(*a0,a1,&a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractEventDispatcher, sipName_filterNativeEvent, doc_QAbstractEventDispatcher_filterNativeEvent);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractEventDispatcher(void *, const sipTypeDef *);}
static void *cast_QAbstractEventDispatcher(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractEventDispatcher *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractEventDispatcher(void *, int);}
static void release_QAbstractEventDispatcher(void *sipCppV, int)
{
     ::QAbstractEventDispatcher *sipCpp = reinterpret_cast< ::QAbstractEventDispatcher *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *);}
static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractEventDispatcher *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractEventDispatcher(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractEventDispatcher(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractEventDispatcher *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractEventDispatcher(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractEventDispatcher[] = {{183, 255, 1}};


static PyMethodDef methods_QAbstractEventDispatcher[] = {
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QAbstractEventDispatcher_closingDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_closingDown)},
    {SIP_MLNAME_CAST(sipName_filterNativeEvent), meth_QAbstractEventDispatcher_filterNativeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_filterNativeEvent)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QAbstractEventDispatcher_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_flush)},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QAbstractEventDispatcher_hasPendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_hasPendingEvents)},
    {SIP_MLNAME_CAST(sipName_installNativeEventFilter), meth_QAbstractEventDispatcher_installNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_installNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_instance), SIP_MLMETH_CAST(meth_QAbstractEventDispatcher_instance), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_instance)},
    {SIP_MLNAME_CAST(sipName_interrupt), meth_QAbstractEventDispatcher_interrupt, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_interrupt)},
    {SIP_MLNAME_CAST(sipName_processEvents), meth_QAbstractEventDispatcher_processEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_processEvents)},
    {SIP_MLNAME_CAST(sipName_registerSocketNotifier), meth_QAbstractEventDispatcher_registerSocketNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerSocketNotifier)},
    {SIP_MLNAME_CAST(sipName_registerTimer), meth_QAbstractEventDispatcher_registerTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registerTimer)},
    {SIP_MLNAME_CAST(sipName_registeredTimers), meth_QAbstractEventDispatcher_registeredTimers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_registeredTimers)},
    {SIP_MLNAME_CAST(sipName_remainingTime), meth_QAbstractEventDispatcher_remainingTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_remainingTime)},
    {SIP_MLNAME_CAST(sipName_removeNativeEventFilter), meth_QAbstractEventDispatcher_removeNativeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_removeNativeEventFilter)},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QAbstractEventDispatcher_startingUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_startingUp)},
    {SIP_MLNAME_CAST(sipName_unregisterSocketNotifier), meth_QAbstractEventDispatcher_unregisterSocketNotifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterSocketNotifier)},
    {SIP_MLNAME_CAST(sipName_unregisterTimer), meth_QAbstractEventDispatcher_unregisterTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterTimer)},
    {SIP_MLNAME_CAST(sipName_unregisterTimers), meth_QAbstractEventDispatcher_unregisterTimers, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_unregisterTimers)},
    {SIP_MLNAME_CAST(sipName_wakeUp), meth_QAbstractEventDispatcher_wakeUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractEventDispatcher_wakeUp)}
};

PyDoc_STRVAR(doc_QAbstractEventDispatcher, "\1QAbstractEventDispatcher(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractEventDispatcher[] = {
    {"awake()", "\1awake(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"aboutToBlock()", "\1aboutToBlock(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractEventDispatcher = {
    & ::QAbstractEventDispatcher::staticMetaObject,
    0,
    signals_QAbstractEventDispatcher,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractEventDispatcher = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractEventDispatcher,
        {SIP_NULLPTR},
        &plugin_QAbstractEventDispatcher
    },
    {
        sipNameNr_QAbstractEventDispatcher,
        {0, 0, 1},
        18, methods_QAbstractEventDispatcher,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractEventDispatcher,
    -1,
    -1,
    supers_QAbstractEventDispatcher,
    SIP_NULLPTR,
    init_type_QAbstractEventDispatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractEventDispatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractEventDispatcher,
    cast_QAbstractEventDispatcher,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 84352 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 84356 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 84362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 84365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84374 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 84377 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 84383 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84386 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84398 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84404 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQAbstractAnimation : public  ::QAbstractAnimation
{
public:
    sipQAbstractAnimation( ::QObject*);
    virtual ~sipQAbstractAnimation();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void updateDirection( ::QAbstractAnimation::Direction) SIP_OVERRIDE;
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State) SIP_OVERRIDE;
    void updateCurrentTime(int) SIP_OVERRIDE;
    int duration() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractAnimation(const sipQAbstractAnimation &);
    sipQAbstractAnimation &operator = (const sipQAbstractAnimation &);

    char sipPyMethods[11];
};

sipQAbstractAnimation::sipQAbstractAnimation( ::QObject*a0):  ::QAbstractAnimation(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractAnimation::~sipQAbstractAnimation()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractAnimation::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractAnimation);

    return  ::QAbstractAnimation::metaObject();
}

int sipQAbstractAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractAnimation,_c,_id,_a);

    return _id;
}

void *sipQAbstractAnimation::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractAnimation, _clname, &sipCpp) ? sipCpp :  ::QAbstractAnimation::qt_metacast(_clname));
}

void sipQAbstractAnimation::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QAbstractAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_updateState);

    if (!sipMeth)
    {
         ::QAbstractAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QAbstractAnimation,sipName_updateCurrentTime);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQAbstractAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QAbstractAnimation,sipName_duration);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQAbstractAnimation::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractAnimation::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQAbstractAnimation::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractAnimation::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQAbstractAnimation::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractAnimation_state, "state(self) -> QAbstractAnimation.State");

extern "C" {static PyObject *meth_QAbstractAnimation_state(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
             ::QAbstractAnimation::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractAnimation_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_state, doc_QAbstractAnimation_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_group, "group(self) -> QAnimationGroup");

extern "C" {static PyObject *meth_QAbstractAnimation_group(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
             ::QAnimationGroup*sipRes;

            sipRes = sipCpp->group();

            return sipConvertFromType(sipRes,sipType_QAnimationGroup,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_group, doc_QAbstractAnimation_group);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_direction, "direction(self) -> QAbstractAnimation.Direction");

extern "C" {static PyObject *meth_QAbstractAnimation_direction(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
             ::QAbstractAnimation::Direction sipRes;

            sipRes = sipCpp->direction();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractAnimation_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_direction, doc_QAbstractAnimation_direction);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_setDirection, "setDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QAbstractAnimation_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation::Direction a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            sipCpp->setDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_setDirection, doc_QAbstractAnimation_setDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_currentTime, "currentTime(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_currentTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_currentTime, doc_QAbstractAnimation_currentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_currentLoopTime, "currentLoopTime(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_currentLoopTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_currentLoopTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentLoopTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_currentLoopTime, doc_QAbstractAnimation_currentLoopTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_loopCount, "loopCount(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_loopCount, doc_QAbstractAnimation_loopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_setLoopCount, "setLoopCount(self, int)");

extern "C" {static PyObject *meth_QAbstractAnimation_setLoopCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_setLoopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractAnimation, &sipCpp, &a0))
        {
            sipCpp->setLoopCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_setLoopCount, doc_QAbstractAnimation_setLoopCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_currentLoop, "currentLoop(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_currentLoop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_currentLoop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentLoop();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_currentLoop, doc_QAbstractAnimation_currentLoop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_duration(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractAnimation, sipName_duration);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->duration();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_duration, doc_QAbstractAnimation_duration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_totalDuration, "totalDuration(self) -> int");

extern "C" {static PyObject *meth_QAbstractAnimation_totalDuration(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_totalDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->totalDuration();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_totalDuration, doc_QAbstractAnimation_totalDuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_start, "start(self, policy: QAbstractAnimation.DeletionPolicy = QAbstractAnimation.KeepWhenStopped)");

extern "C" {static PyObject *meth_QAbstractAnimation_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation::DeletionPolicy a0 = QAbstractAnimation::KeepWhenStopped;
         ::QAbstractAnimation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_policy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QAbstractAnimation_DeletionPolicy, &a0))
        {
            sipCpp->start(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_start, doc_QAbstractAnimation_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_pause, "pause(self)");

extern "C" {static PyObject *meth_QAbstractAnimation_pause(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            sipCpp->pause();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_pause, doc_QAbstractAnimation_pause);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_resume, "resume(self)");

extern "C" {static PyObject *meth_QAbstractAnimation_resume(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            sipCpp->resume();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_resume, doc_QAbstractAnimation_resume);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_setPaused, "setPaused(self, bool)");

extern "C" {static PyObject *meth_QAbstractAnimation_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractAnimation, &sipCpp, &a0))
        {
            sipCpp->setPaused(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_setPaused, doc_QAbstractAnimation_setPaused);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_stop, "stop(self)");

extern "C" {static PyObject *meth_QAbstractAnimation_stop(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractAnimation, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_stop, doc_QAbstractAnimation_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_setCurrentTime, "setCurrentTime(self, int)");

extern "C" {static PyObject *meth_QAbstractAnimation_setCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_setCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractAnimation, &sipCpp, &a0))
        {
            sipCpp->setCurrentTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_setCurrentTime, doc_QAbstractAnimation_setCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractAnimation_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractAnimation::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_event, doc_QAbstractAnimation_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QAbstractAnimation_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QAbstractAnimation, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractAnimation, sipName_updateCurrentTime);
                return SIP_NULLPTR;
            }

            sipCpp->updateCurrentTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_updateCurrentTime, doc_QAbstractAnimation_updateCurrentTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QAbstractAnimation_updateState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractAnimation::updateState(a0,a1) : sipCpp->updateState(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_updateState, doc_QAbstractAnimation_updateState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractAnimation_updateDirection, "updateDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QAbstractAnimation_updateDirection(PyObject *, PyObject *);}
static PyObject *meth_QAbstractAnimation_updateDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::Direction a0;
         ::QAbstractAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractAnimation, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractAnimation::updateDirection(a0) : sipCpp->updateDirection(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractAnimation, sipName_updateDirection, doc_QAbstractAnimation_updateDirection);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractAnimation(void *, const sipTypeDef *);}
static void *cast_QAbstractAnimation(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractAnimation *sipCpp = reinterpret_cast< ::QAbstractAnimation *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractAnimation(void *, int);}
static void release_QAbstractAnimation(void *sipCppV, int)
{
     ::QAbstractAnimation *sipCpp = reinterpret_cast< ::QAbstractAnimation *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractAnimation(sipSimpleWrapper *);}
static void dealloc_QAbstractAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractAnimation *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractAnimation(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractAnimation *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractAnimation(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractAnimation[] = {{183, 255, 1}};


static PyMethodDef methods_QAbstractAnimation[] = {
    {SIP_MLNAME_CAST(sipName_currentLoop), meth_QAbstractAnimation_currentLoop, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_currentLoop)},
    {SIP_MLNAME_CAST(sipName_currentLoopTime), meth_QAbstractAnimation_currentLoopTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_currentLoopTime)},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_QAbstractAnimation_currentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_currentTime)},
    {SIP_MLNAME_CAST(sipName_direction), meth_QAbstractAnimation_direction, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_direction)},
    {SIP_MLNAME_CAST(sipName_duration), meth_QAbstractAnimation_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_duration)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractAnimation_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_event)},
    {SIP_MLNAME_CAST(sipName_group), meth_QAbstractAnimation_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_group)},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QAbstractAnimation_loopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_loopCount)},
    {SIP_MLNAME_CAST(sipName_pause), meth_QAbstractAnimation_pause, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_pause)},
    {SIP_MLNAME_CAST(sipName_resume), meth_QAbstractAnimation_resume, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_resume)},
    {SIP_MLNAME_CAST(sipName_setCurrentTime), meth_QAbstractAnimation_setCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_setCurrentTime)},
    {SIP_MLNAME_CAST(sipName_setDirection), meth_QAbstractAnimation_setDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_setDirection)},
    {SIP_MLNAME_CAST(sipName_setLoopCount), meth_QAbstractAnimation_setLoopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_setLoopCount)},
    {SIP_MLNAME_CAST(sipName_setPaused), meth_QAbstractAnimation_setPaused, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_setPaused)},
    {SIP_MLNAME_CAST(sipName_start), SIP_MLMETH_CAST(meth_QAbstractAnimation_start), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractAnimation_start)},
    {SIP_MLNAME_CAST(sipName_state), meth_QAbstractAnimation_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QAbstractAnimation_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_stop)},
    {SIP_MLNAME_CAST(sipName_totalDuration), meth_QAbstractAnimation_totalDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_totalDuration)},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), meth_QAbstractAnimation_updateCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_updateCurrentTime)},
    {SIP_MLNAME_CAST(sipName_updateDirection), meth_QAbstractAnimation_updateDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_updateDirection)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QAbstractAnimation_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractAnimation_updateState)}
};

static sipEnumMemberDef enummembers_QAbstractAnimation[] = {
    {sipName_Backward, static_cast<int>( ::QAbstractAnimation::Backward), 2},
    {sipName_DeleteWhenStopped, static_cast<int>( ::QAbstractAnimation::DeleteWhenStopped), 1},
    {sipName_Forward, static_cast<int>( ::QAbstractAnimation::Forward), 2},
    {sipName_KeepWhenStopped, static_cast<int>( ::QAbstractAnimation::KeepWhenStopped), 1},
    {sipName_Paused, static_cast<int>( ::QAbstractAnimation::Paused), 3},
    {sipName_Running, static_cast<int>( ::QAbstractAnimation::Running), 3},
    {sipName_Stopped, static_cast<int>( ::QAbstractAnimation::Stopped), 3},
};

PyDoc_STRVAR(doc_QAbstractAnimation, "\1QAbstractAnimation(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractAnimation[] = {
    {"directionChanged(QAbstractAnimation::Direction)", "\1directionChanged(self, QAbstractAnimation.Direction)", SIP_NULLPTR, SIP_NULLPTR},
    {"currentLoopChanged(int)", "\1currentLoopChanged(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"stateChanged(QAbstractAnimation::State,QAbstractAnimation::State)", "\1stateChanged(self, QAbstractAnimation.State, QAbstractAnimation.State)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractAnimation = {
    & ::QAbstractAnimation::staticMetaObject,
    0,
    signals_QAbstractAnimation,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractAnimation = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractAnimation,
        {SIP_NULLPTR},
        &plugin_QAbstractAnimation
    },
    {
        sipNameNr_QAbstractAnimation,
        {0, 0, 1},
        21, methods_QAbstractAnimation,
        7, enummembers_QAbstractAnimation,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractAnimation,
    -1,
    -1,
    supers_QAbstractAnimation,
    SIP_NULLPTR,
    init_type_QAbstractAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractAnimation,
    cast_QAbstractAnimation,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 85450 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 85454 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 85457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 247 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85466 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 85469 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 85472 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 85475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 85478 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 85481 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 85487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85490 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 85493 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 85496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
// This is needed by the tr() handwritten implementation.
#include <qcoreapplication.h>


// These are the helper functions for QObject::findChild() and
// QObject::findChildren.

// Wrap the given type in a 1-tuple.
static PyObject *qtcore_type_to_tuple(PyObject *type)
{
    PyObject *tuple = PyTuple_New(1);

    if (tuple)
    {
        Py_INCREF(type);
        PyTuple_SetItem(tuple, 0, type);
    }

    return tuple;
}


// Check all elements of a given tuple are type objects and return a new
// reference to the tuple if so.
static PyObject *qtcore_check_tuple_types(PyObject *types)
{
    for (Py_ssize_t i = 0; i < PyTuple_Size(types); ++i)
        if (!PyObject_TypeCheck(PyTuple_GetItem(types, i), &PyType_Type))
        {
            PyErr_SetString(PyExc_TypeError,
                    "all elements of the types argument must be type objects");
            return 0;
        }

    Py_INCREF(types);
    return types;
}


// Do the main work of finding a child.
static PyObject *qtcore_do_find_child(const QObject *parent, PyObject *types, const QString &name, Qt::FindChildOptions options)
{
    const QObjectList &children = parent->children();
    int i;

    for (i = 0; i < children.size(); ++i)
    {
        QObject *obj = children.at(i);
        PyObject *pyo = sipConvertFromType(obj, sipType_QObject, 0);

        if (!pyo)
            return 0;

        // Allow for proxies.
        QObject *resolved = reinterpret_cast<QObject *>(sipGetAddress((sipSimpleWrapper *)pyo));

        if (name.isNull() || resolved->objectName() == name)
            for (Py_ssize_t t = 0; t < PyTuple_Size(types); ++t)
                if (PyType_IsSubtype(Py_TYPE(pyo), (PyTypeObject *)PyTuple_GetItem(types, t)))
                    return pyo;

        Py_DECREF(pyo);
    }

    if (options == Qt::FindChildrenRecursively)
        for (i = 0; i < children.size(); ++i)
        {
            PyObject *pyo = qtcore_do_find_child(children.at(i), types, name, options);

            if (pyo != Py_None)
                return pyo;

            Py_DECREF(pyo);
        }

    Py_INCREF(Py_None);
    return Py_None;
}


// Find a child that is one of a number of types and with an optional name.
static PyObject *qtcore_FindChild(const QObject *parent, PyObject *types, const QString &name, Qt::FindChildOptions options)
{
    // Check that the types checking was successful.
    if (!types)
        return 0;

    PyObject *child = qtcore_do_find_child(parent, types, name, options);

    Py_DECREF(types);

    return child;
}


// Do the main work of finding the children with a string name.
static bool qtcore_do_find_children(const QObject *parent, PyObject *types, const QString &name, Qt::FindChildOptions options, PyObject *list)
{
    const QObjectList &children = parent->children();
    int i;

    for (i = 0; i < children.size(); ++i)
    {
        QObject *obj = children.at(i);
        PyObject *pyo = sipConvertFromType(obj, sipType_QObject, 0);

        if (!pyo)
            return false;

        // Allow for proxies.
        QObject *resolved = reinterpret_cast<QObject *>(sipGetAddress((sipSimpleWrapper *)pyo));

        if (name.isNull() || resolved->objectName() == name)
            for (Py_ssize_t t = 0; t < PyTuple_Size(types); ++t)
                if (PyType_IsSubtype(Py_TYPE(pyo), (PyTypeObject *)PyTuple_GetItem(types, t)))
                    if (PyList_Append(list, pyo) < 0)
                    {
                        Py_DECREF(pyo);
                        return false;
                    }

        Py_DECREF(pyo);

        if (options == Qt::FindChildrenRecursively)
        {
            bool ok = qtcore_do_find_children(obj, types, name, options, list);

            if (!ok)
                return false;
        }
    }

    return true;
}


// Find a child that is one of a number of types and with an optional string
// name.
static PyObject *qtcore_FindChildren(const QObject *parent, PyObject *types, const QString &name, Qt::FindChildOptions options)
{
    // Check that the types checking was successful.
    if (!types)
        return 0;

    PyObject *list = PyList_New(0);

    if (list)
        if (!qtcore_do_find_children(parent, types, name, options, list))
            Py_DECREF(list);

    Py_DECREF(types);

    return list;
}


// Do the main work of finding the children with a QRegExp name.
static bool qtcore_do_find_children(const QObject *parent, PyObject *types, const QRegExp &re, Qt::FindChildOptions options, PyObject *list)
{
    const QObjectList &children = parent->children();
    int i;

    for (i = 0; i < children.size(); ++i)
    {
        QObject *obj = children.at(i);
        PyObject *pyo = sipConvertFromType(obj, sipType_QObject, 0);

        if (!pyo)
            return false;

        if (re.indexIn(obj->objectName()) >= 0)
            for (Py_ssize_t t = 0; t < PyTuple_Size(types); ++t)
                if (PyType_IsSubtype(Py_TYPE(pyo), (PyTypeObject *)PyTuple_GetItem(types, t)))
                    if (PyList_Append(list, pyo) < 0)
                    {
                        Py_DECREF(pyo);
                        return false;
                    }

        Py_DECREF(pyo);

        if (options == Qt::FindChildrenRecursively)
        {
            bool ok = qtcore_do_find_children(obj, types, re, options, list);

            if (!ok)
                return false;
        }
    }

    return true;
}


// Find a child that is one of a number of types and with an optional QRegExp
// name.
static PyObject *qtcore_FindChildren(const QObject *parent, PyObject *types, const QRegExp &re, Qt::FindChildOptions options)
{
    // Check that the types checking was successful.
    if (!types)
        return 0;

    PyObject *list = PyList_New(0);

    if (list)
        if (!qtcore_do_find_children(parent, types, re, options, list))
            Py_DECREF(list);

    Py_DECREF(types);

    return list;
}


// Do the main work of finding the children with a QRegularExpression name.
static bool qtcore_do_find_children(const QObject *parent, PyObject *types, const QRegularExpression &re, Qt::FindChildOptions options, PyObject *list)
{
    const QObjectList &children = parent->children();
    int i;

    for (i = 0; i < children.size(); ++i)
    {
        QObject *obj = children.at(i);
        PyObject *pyo = sipConvertFromType(obj, sipType_QObject, 0);

        if (!pyo)
            return false;

        QRegularExpressionMatch m = re.match(obj->objectName());
        
        if (m.hasMatch())
            for (Py_ssize_t t = 0; t < PyTuple_Size(types); ++t)
                if (PyType_IsSubtype(Py_TYPE(pyo), (PyTypeObject *)PyTuple_GetItem(types, t)))
                    if (PyList_Append(list, pyo) < 0)
                    {
                        Py_DECREF(pyo);
                        return false;
                    }

        Py_DECREF(pyo);

        if (options == Qt::FindChildrenRecursively)
        {
            bool ok = qtcore_do_find_children(obj, types, re, options, list);

            if (!ok)
                return false;
        }
    }

    return true;
}


// Find a child that is one of a number of types and with an optional
// QRegularExpression name.
static PyObject *qtcore_FindChildren(const QObject *parent, PyObject *types, const QRegularExpression &re, Qt::FindChildOptions options)
{
    // Check that the types checking was successful.
    if (!types)
        return 0;

    PyObject *list = PyList_New(0);

    if (list)
        if (!qtcore_do_find_children(parent, types, re, options, list))
            Py_DECREF(list);

    Py_DECREF(types);

    return list;
}
#line 85770 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


class sipQObject : public  ::QObject
{
public:
    sipQObject( ::QObject*);
    virtual ~sipQObject();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQObject(const sipQObject &);
    sipQObject &operator = (const sipQObject &);

    char sipPyMethods[7];
};

sipQObject::sipQObject( ::QObject*a0):  ::QObject(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQObject::~sipQObject()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQObject::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QObject);

    return  ::QObject::metaObject();
}

int sipQObject::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QObject::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QObject,_c,_id,_a);

    return _id;
}

void *sipQObject::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QObject, _clname, &sipCpp) ? sipCpp :  ::QObject::qt_metacast(_clname));
}

void sipQObject::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQObject::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQObject::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQObject::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQObject::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQObject::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQObject::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QObject::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QObject_metaObject, "metaObject(self) -> QMetaObject");

extern "C" {static PyObject *meth_QObject_metaObject(PyObject *, PyObject *);}
static PyObject *meth_QObject_metaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            const  ::QMetaObject*sipRes;

            sipRes = sipCpp->metaObject();

            return sipConvertFromType(const_cast< ::QMetaObject *>(sipRes),sipType_QMetaObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_metaObject, doc_QObject_metaObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_pyqtConfigure, "QObject.pyqtConfigure(...)\n"
"\n"
"Each keyword argument is either the name of a Qt property or a Qt signal.\n"
"For properties the property is set to the given value which should be of an\n"
"appropriate type.\n"
"For signals the signal is connected to the given value which should be a\n"
"callable.");

extern "C" {static PyObject *meth_QObject_pyqtConfigure(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QObject_pyqtConfigure(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
#line 434 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        return qpycore_pyqtconfigure(sipSelf, sipArgs, sipKwds);
#line 86003 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


PyDoc_STRVAR(doc_QObject___getattr__, "__getattr__(self, str) -> object");

extern "C" {static PyObject *meth_QObject___getattr__(PyObject *, PyObject *);}
static PyObject *meth_QObject___getattr__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QObject, &sipCpp, &a0Keep, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 439 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qpycore_qobject_getattr(sipCpp, sipSelf, a0);
#line 86026 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a0Keep);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName___getattr__, doc_QObject___getattr__);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QObject_event(PyObject *, PyObject *);}
static PyObject *meth_QObject_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QObject, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QObject::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_event, doc_QObject_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QObject_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QObject_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QObject, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QObject::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_eventFilter, doc_QObject_eventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_tr, "tr(self, str, disambiguation: str = None, n: int = -1) -> str");

extern "C" {static PyObject *meth_QObject_tr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QObject_tr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1 = 0;
        PyObject *a1Keep = 0;
        int a2 = -1;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_disambiguation,
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BA8|AAi", &sipSelf, sipType_QObject, &sipCpp, &a0Keep, &a0, &a1Keep, &a1, &a2))
        {
             ::QString*sipRes = 0;

#line 446 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        // Note that tr() is really a static method.  We pretend it isn't so we can use
        // self to get hold of the class name.
        
        sipRes = new QString(QCoreApplication::translate(sipPyTypeName(Py_TYPE(sipSelf)), a0, a1, a2));
#line 86132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            Py_DECREF(a0Keep);
            Py_XDECREF(a1Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_tr, doc_QObject_tr);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_findChild, "findChild(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject\n"
"findChild(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> QObject");

extern "C" {static PyObject *meth_QObject_findChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QObject_findChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
         ::Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_name,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BT|J1J1", &sipSelf, sipType_QObject, &sipCpp, &PyType_Type, &a0, sipType_QString,&a1, &a1State, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 454 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qtcore_FindChild(sipCpp, qtcore_type_to_tuple(a0), *a1, *a2);
        
        if (!sipRes)
            sipIsErr = 1;
#line 86183 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    {
        PyObject * a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
         ::Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_name,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BT|J1J1", &sipSelf, sipType_QObject, &sipCpp, &PyTuple_Type, &a0, sipType_QString,&a1, &a1State, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qtcore_FindChild(sipCpp, qtcore_check_tuple_types(a0), *a1, *a2);
        
        if (!sipRes)
            sipIsErr = 1;
#line 86220 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_findChild, doc_QObject_findChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_findChildren, "findChildren(self, type, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n"
"findChildren(self, Tuple, name: str = '', options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n"
"findChildren(self, type, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n"
"findChildren(self, Tuple, QRegExp, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n"
"findChildren(self, type, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]\n"
"findChildren(self, Tuple, QRegularExpression, options: Union[Qt.FindChildOptions, Qt.FindChildOption] = Qt.FindChildrenRecursively) -> List[QObject]");

extern "C" {static PyObject *meth_QObject_findChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QObject_findChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
         ::Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_name,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BT|J1J1", &sipSelf, sipType_QObject, &sipCpp, &PyType_Type, &a0, sipType_QString,&a1, &a1State, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 470 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qtcore_FindChildren(sipCpp, qtcore_type_to_tuple(a0), *a1, *a2);
        
        if (!sipRes)
            sipIsErr = 1;
#line 86282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    {
        PyObject * a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
         ::Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_name,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BT|J1J1", &sipSelf, sipType_QObject, &sipCpp, &PyTuple_Type, &a0, sipType_QString,&a1, &a1State, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 478 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qtcore_FindChildren(sipCpp, qtcore_check_tuple_types(a0), *a1, *a2);
        
        if (!sipRes)
            sipIsErr = 1;
#line 86319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    {
        PyObject * a0;
        const  ::QRegExp* a1;
         ::Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
         ::Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BTJ9|J1", &sipSelf, sipType_QObject, &sipCpp, &PyType_Type, &a0, sipType_QRegExp, &a1, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qtcore_FindChildren(sipCpp, qtcore_type_to_tuple(a0), *a1, *a2);
        
        if (!sipRes)
            sipIsErr = 1;
#line 86354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    {
        PyObject * a0;
        const  ::QRegExp* a1;
         ::Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
         ::Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BTJ9|J1", &sipSelf, sipType_QObject, &sipCpp, &PyTuple_Type, &a0, sipType_QRegExp, &a1, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qtcore_FindChildren(sipCpp, qtcore_check_tuple_types(a0), *a1, *a2);
        
        if (!sipRes)
            sipIsErr = 1;
#line 86388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    {
        PyObject * a0;
        const  ::QRegularExpression* a1;
         ::Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
         ::Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BTJ9|J1", &sipSelf, sipType_QObject, &sipCpp, &PyType_Type, &a0, sipType_QRegularExpression, &a1, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 502 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qtcore_FindChildren(sipCpp, qtcore_type_to_tuple(a0), *a1, *a2);
        
        if (!sipRes)
            sipIsErr = 1;
#line 86422 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    {
        PyObject * a0;
        const  ::QRegularExpression* a1;
         ::Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
         ::Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        const  ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BTJ9|J1", &sipSelf, sipType_QObject, &sipCpp, &PyTuple_Type, &a0, sipType_QRegularExpression, &a1, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qtcore_FindChildren(sipCpp, qtcore_check_tuple_types(a0), *a1, *a2);
        
        if (!sipRes)
            sipIsErr = 1;
#line 86456 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_findChildren, doc_QObject_findChildren);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_objectName, "objectName(self) -> str");

extern "C" {static PyObject *meth_QObject_objectName(PyObject *, PyObject *);}
static PyObject *meth_QObject_objectName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->objectName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_objectName, doc_QObject_objectName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_setObjectName, "setObjectName(self, str)");

extern "C" {static PyObject *meth_QObject_setObjectName(PyObject *, PyObject *);}
static PyObject *meth_QObject_setObjectName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QObject, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setObjectName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_setObjectName, doc_QObject_setObjectName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_isWidgetType, "isWidgetType(self) -> bool");

extern "C" {static PyObject *meth_QObject_isWidgetType(PyObject *, PyObject *);}
static PyObject *meth_QObject_isWidgetType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWidgetType();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_isWidgetType, doc_QObject_isWidgetType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_isWindowType, "isWindowType(self) -> bool");

extern "C" {static PyObject *meth_QObject_isWindowType(PyObject *, PyObject *);}
static PyObject *meth_QObject_isWindowType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWindowType();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_isWindowType, doc_QObject_isWindowType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_signalsBlocked, "signalsBlocked(self) -> bool");

extern "C" {static PyObject *meth_QObject_signalsBlocked(PyObject *, PyObject *);}
static PyObject *meth_QObject_signalsBlocked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->signalsBlocked();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_signalsBlocked, doc_QObject_signalsBlocked);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_blockSignals, "blockSignals(self, bool) -> bool");

extern "C" {static PyObject *meth_QObject_blockSignals(PyObject *, PyObject *);}
static PyObject *meth_QObject_blockSignals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QObject, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->blockSignals(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_blockSignals, doc_QObject_blockSignals);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_thread, "thread(self) -> QThread");

extern "C" {static PyObject *meth_QObject_thread(PyObject *, PyObject *);}
static PyObject *meth_QObject_thread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
             ::QThread*sipRes;

            sipRes = sipCpp->thread();

            return sipConvertFromType(sipRes,sipType_QThread,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_thread, doc_QObject_thread);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_moveToThread, "moveToThread(self, QThread)");

extern "C" {static PyObject *meth_QObject_moveToThread(PyObject *, PyObject *);}
static PyObject *meth_QObject_moveToThread(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QThread* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QObject, &sipCpp, sipType_QThread, &a0))
        {
            sipCpp->moveToThread(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_moveToThread, doc_QObject_moveToThread);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_startTimer, "startTimer(self, int, timerType: Qt.TimerType = Qt.CoarseTimer) -> int");

extern "C" {static PyObject *meth_QObject_startTimer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QObject_startTimer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::Qt::TimerType a1 = Qt::CoarseTimer;
         ::QObject *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_timerType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|E", &sipSelf, sipType_QObject, &sipCpp, &a0, sipType_Qt_TimerType, &a1))
        {
            int sipRes;

            sipRes = sipCpp->startTimer(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_startTimer, doc_QObject_startTimer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_killTimer, "killTimer(self, int)");

extern "C" {static PyObject *meth_QObject_killTimer(PyObject *, PyObject *);}
static PyObject *meth_QObject_killTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QObject, &sipCpp, &a0))
        {
            sipCpp->killTimer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_killTimer, doc_QObject_killTimer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_children, "children(self) -> List[QObject]");

extern "C" {static PyObject *meth_QObject_children(PyObject *, PyObject *);}
static PyObject *meth_QObject_children(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
             ::QObjectList*sipRes;

            sipRes = new  ::QObjectList(sipCpp->children());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_children, doc_QObject_children);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_setParent, "setParent(self, QObject)");

extern "C" {static PyObject *meth_QObject_setParent(PyObject *, PyObject *);}
static PyObject *meth_QObject_setParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJH", &sipSelf, sipType_QObject, &sipCpp, sipType_QObject, &a0, &sipOwner))
        {
            sipCpp->setParent(a0);

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_setParent, doc_QObject_setParent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_installEventFilter, "installEventFilter(self, QObject)");

extern "C" {static PyObject *meth_QObject_installEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QObject_installEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QObject, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->installEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_installEventFilter, doc_QObject_installEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_removeEventFilter, "removeEventFilter(self, QObject)");

extern "C" {static PyObject *meth_QObject_removeEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QObject_removeEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QObject, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->removeEventFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_removeEventFilter, doc_QObject_removeEventFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_dumpObjectInfo, "dumpObjectInfo(self)");

extern "C" {static PyObject *meth_QObject_dumpObjectInfo(PyObject *, PyObject *);}
static PyObject *meth_QObject_dumpObjectInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            sipCpp->dumpObjectInfo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_dumpObjectInfo, doc_QObject_dumpObjectInfo);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_dumpObjectTree, "dumpObjectTree(self)");

extern "C" {static PyObject *meth_QObject_dumpObjectTree(PyObject *, PyObject *);}
static PyObject *meth_QObject_dumpObjectTree(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            sipCpp->dumpObjectTree();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_dumpObjectTree, doc_QObject_dumpObjectTree);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_dynamicPropertyNames, "dynamicPropertyNames(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QObject_dynamicPropertyNames(PyObject *, PyObject *);}
static PyObject *meth_QObject_dynamicPropertyNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->dynamicPropertyNames());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_dynamicPropertyNames, doc_QObject_dynamicPropertyNames);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_setProperty, "setProperty(self, str, Any) -> bool");

extern "C" {static PyObject *meth_QObject_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QObject_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAAJ1", &sipSelf, sipType_QObject, &sipCpp, &a0Keep, &a0, sipType_QVariant, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->setProperty(a0,*a1);
            Py_DECREF(a0Keep);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_setProperty, doc_QObject_setProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_property, "property(self, str) -> Any");

extern "C" {static PyObject *meth_QObject_property(PyObject *, PyObject *);}
static PyObject *meth_QObject_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QObject, &sipCpp, &a0Keep, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->property(a0));
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_property, doc_QObject_property);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_parent, "parent(self) -> QObject");

extern "C" {static PyObject *meth_QObject_parent(PyObject *, PyObject *);}
static PyObject *meth_QObject_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_parent, doc_QObject_parent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_inherits, "inherits(self, str) -> bool");

extern "C" {static PyObject *meth_QObject_inherits(PyObject *, PyObject *);}
static PyObject *meth_QObject_inherits(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QObject, &sipCpp, &a0Keep, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->inherits(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_inherits, doc_QObject_inherits);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_deleteLater, "deleteLater(self)");

extern "C" {static PyObject *meth_QObject_deleteLater(PyObject *, PyObject *);}
static PyObject *meth_QObject_deleteLater(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            sipCpp->deleteLater();

            sipTransferTo(sipSelf, SIP_NULLPTR);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_deleteLater, doc_QObject_deleteLater);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_sender, "sender(self) -> QObject");

extern "C" {static PyObject *meth_QObject_sender(PyObject *, PyObject *);}
static PyObject *meth_QObject_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QObject, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
            {
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
                Q_ASSERT(qtcore_qobject_sender);
            }
        
            sipRes = qtcore_qobject_sender();
        }
#line 87159 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_sender, doc_QObject_sender);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_receivers, "receivers(self, PYQT_SIGNAL) -> int");

extern "C" {static PyObject *meth_QObject_receivers(PyObject *, PyObject *);}
static PyObject *meth_QObject_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pP0", &sipSelf, sipType_QObject, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 591 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
        {
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
            Q_ASSERT(pyqt5_get_signal_signature);
        }
        
        QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->receivers(signal_signature.constData());
        }
        #else
        if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
        {
            sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
        }
        #endif
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 87219 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_receivers, doc_QObject_receivers);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QObject_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QObject_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QObject, &sipCpp, sipType_QTimerEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QObject::timerEvent(a0) : sipCpp->timerEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_timerEvent, doc_QObject_timerEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QObject_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QObject_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QObject, &sipCpp, sipType_QChildEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QObject::childEvent(a0) : sipCpp->childEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_childEvent, doc_QObject_childEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_customEvent, "customEvent(self, QEvent)");

extern "C" {static PyObject *meth_QObject_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QObject_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QObject, &sipCpp, sipType_QEvent, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QObject::customEvent(a0) : sipCpp->customEvent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_customEvent, doc_QObject_customEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_connectNotify, "connectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QObject_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QObject_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QObject, &sipCpp, sipType_QMetaMethod, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QObject::connectNotify(*a0) : sipCpp->connectNotify(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_connectNotify, doc_QObject_connectNotify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_disconnectNotify, "disconnectNotify(self, QMetaMethod)");

extern "C" {static PyObject *meth_QObject_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QObject_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMetaMethod* a0;
         ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QObject, &sipCpp, sipType_QMetaMethod, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QObject::disconnectNotify(*a0) : sipCpp->disconnectNotify(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_disconnectNotify, doc_QObject_disconnectNotify);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_senderSignalIndex, "senderSignalIndex(self) -> int");

extern "C" {static PyObject *meth_QObject_senderSignalIndex(PyObject *, PyObject *);}
static PyObject *meth_QObject_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_senderSignalIndex, doc_QObject_senderSignalIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_isSignalConnected, "isSignalConnected(self, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QObject_isSignalConnected(PyObject *, PyObject *);}
static PyObject *meth_QObject_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaMethod* a0;
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QObject, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_isSignalConnected, doc_QObject_isSignalConnected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QObject_disconnect, "disconnect(self)");

extern "C" {static PyObject *meth_QObject_disconnect(PyObject *, PyObject *);}
static PyObject *meth_QObject_disconnect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QObject, &sipCpp))
        {
            PyObject * sipRes = SIP_NULLPTR;

#line 633 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipRes = qpycore_qobject_disconnect(sipCpp);
#line 87459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QObject, sipName_disconnect, doc_QObject_disconnect);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QObject(void *, int);}
static void release_QObject(void *sipCppV, int)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static int traverse_QObject(void *, visitproc, void *);}
static int traverse_QObject(void *sipCppV,visitproc sipVisit,void *sipArg)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(sipCppV);
    int sipRes;

#line 403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    // Traverse any saved slots we might be connected to.
    sipRes = qpycore_visitSlotProxies(sipCpp, sipVisit, sipArg);
#line 87494 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}


extern "C" {static int clear_QObject(void *);}
static int clear_QObject(void *sipCppV)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(sipCppV);
    int sipRes;

#line 408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    // Clear any saved slots we might be connected to.
    sipRes = qpycore_clearSlotProxies(sipCpp);
#line 87509 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipRes;
}


extern "C" {static int final_QObject(PyObject *, void *, PyObject *, PyObject **);}
static int final_QObject(PyObject *sipSelf, void *sipCppV, PyObject *sipKwds, PyObject **sipUnused)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(sipCppV);

#line 307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
    return qpycore_qobject_finalisation(sipSelf, sipCpp, sipKwds, sipUnused);
#line 87522 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


extern "C" {static void dealloc_QObject(sipSimpleWrapper *);}
static void dealloc_QObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQObject *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QObject(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQObject *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQObject(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QObject[] = {
    {SIP_MLNAME_CAST(sipName___getattr__), meth_QObject___getattr__, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject___getattr__)},
    {SIP_MLNAME_CAST(sipName_blockSignals), meth_QObject_blockSignals, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_blockSignals)},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QObject_childEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_childEvent)},
    {SIP_MLNAME_CAST(sipName_children), meth_QObject_children, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_children)},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QObject_connectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_connectNotify)},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QObject_customEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_customEvent)},
    {SIP_MLNAME_CAST(sipName_deleteLater), meth_QObject_deleteLater, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_deleteLater)},
    {SIP_MLNAME_CAST(sipName_disconnect), meth_QObject_disconnect, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_disconnect)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QObject_disconnectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_disconnectNotify)},
    {SIP_MLNAME_CAST(sipName_dumpObjectInfo), meth_QObject_dumpObjectInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_dumpObjectInfo)},
    {SIP_MLNAME_CAST(sipName_dumpObjectTree), meth_QObject_dumpObjectTree, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_dumpObjectTree)},
    {SIP_MLNAME_CAST(sipName_dynamicPropertyNames), meth_QObject_dynamicPropertyNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_dynamicPropertyNames)},
    {SIP_MLNAME_CAST(sipName_event), meth_QObject_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QObject_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_eventFilter)},
    {SIP_MLNAME_CAST(sipName_findChild), SIP_MLMETH_CAST(meth_QObject_findChild), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QObject_findChild)},
    {SIP_MLNAME_CAST(sipName_findChildren), SIP_MLMETH_CAST(meth_QObject_findChildren), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QObject_findChildren)},
    {SIP_MLNAME_CAST(sipName_inherits), meth_QObject_inherits, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_inherits)},
    {SIP_MLNAME_CAST(sipName_installEventFilter), meth_QObject_installEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_installEventFilter)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), meth_QObject_isSignalConnected, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_isSignalConnected)},
    {SIP_MLNAME_CAST(sipName_isWidgetType), meth_QObject_isWidgetType, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_isWidgetType)},
    {SIP_MLNAME_CAST(sipName_isWindowType), meth_QObject_isWindowType, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_isWindowType)},
    {SIP_MLNAME_CAST(sipName_killTimer), meth_QObject_killTimer, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_killTimer)},
    {SIP_MLNAME_CAST(sipName_metaObject), meth_QObject_metaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_metaObject)},
    {SIP_MLNAME_CAST(sipName_moveToThread), meth_QObject_moveToThread, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_moveToThread)},
    {SIP_MLNAME_CAST(sipName_objectName), meth_QObject_objectName, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_objectName)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QObject_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_parent)},
    {SIP_MLNAME_CAST(sipName_property), meth_QObject_property, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_property)},
    {SIP_MLNAME_CAST(sipName_pyqtConfigure), SIP_MLMETH_CAST(meth_QObject_pyqtConfigure), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QObject_pyqtConfigure)},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QObject_receivers, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_receivers)},
    {SIP_MLNAME_CAST(sipName_removeEventFilter), meth_QObject_removeEventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_removeEventFilter)},
    {SIP_MLNAME_CAST(sipName_sender), meth_QObject_sender, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_sender)},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), meth_QObject_senderSignalIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_senderSignalIndex)},
    {SIP_MLNAME_CAST(sipName_setObjectName), meth_QObject_setObjectName, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_setObjectName)},
    {SIP_MLNAME_CAST(sipName_setParent), meth_QObject_setParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_setParent)},
    {SIP_MLNAME_CAST(sipName_setProperty), meth_QObject_setProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_setProperty)},
    {SIP_MLNAME_CAST(sipName_signalsBlocked), meth_QObject_signalsBlocked, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_signalsBlocked)},
    {SIP_MLNAME_CAST(sipName_startTimer), SIP_MLMETH_CAST(meth_QObject_startTimer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QObject_startTimer)},
    {SIP_MLNAME_CAST(sipName_thread), meth_QObject_thread, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_thread)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QObject_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QObject_timerEvent)},
    {SIP_MLNAME_CAST(sipName_tr), SIP_MLMETH_CAST(meth_QObject_tr), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QObject_tr)}
};


extern "C" {static PyObject *varget_QObject_staticMetaObject(void *, PyObject *, PyObject *);}
static PyObject *varget_QObject_staticMetaObject(void *, PyObject *, PyObject *sipPyType)
{
    PyObject *sipPy;

#line 415 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qobject.sip"
        sipPy = qpycore_qobject_staticmetaobject(sipPyType);
#line 87616 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

    return sipPy;
}

sipVariableDef variables_QObject[] = {
    {ClassVariable, sipName_staticMetaObject, (PyMethodDef *)varget_QObject_staticMetaObject, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QObject, "\1QObject(parent: QObject = None)");


extern "C" {static int emit_QObject_destroyed(void *, PyObject *);}

static int emit_QObject_destroyed(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    QObject *sipCpp = reinterpret_cast<QObject *>(sipCppV);

    {
         ::QObject* a0 = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J8", sipType_QObject, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->destroyed(a0);
            Py_END_ALLOW_THREADS


            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QObject, sipName_destroyed, SIP_NULLPTR);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QObject[] = {
    {"objectNameChanged(QString)", "\1objectNameChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"destroyed(QObject*)", "\1destroyed(self, object: QObject = None)", SIP_NULLPTR, emit_QObject_destroyed},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QObject = {
    & ::QObject::staticMetaObject,
    0,
    signals_QObject,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_QObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QObject,
        {SIP_NULLPTR},
        &plugin_QObject
    },
    {
        sipNameNr_QObject,
        {0, 0, 1},
        40, methods_QObject,
        0, SIP_NULLPTR,
        1, variables_QObject,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QObject,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QObject,
    traverse_QObject,
    clear_QObject,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    final_QObject,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87723 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87727 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_MouseEventFlags___hash__(PyObject *);}
static long slot_Qt_MouseEventFlags___hash__(PyObject *sipSelf)
{
     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::MouseEventFlags::Int();
#line 87745 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_MouseEventFlags___bool__(PyObject *);}
static int slot_Qt_MouseEventFlags___bool__(PyObject *sipSelf)
{
     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MouseEventFlags::Int() != 0);
#line 87770 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::MouseEventFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_MouseEventFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MouseEventFlags::Int() != a0->operator Qt::MouseEventFlags::Int());
#line 87800 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::MouseEventFlags *>(a0),sipType_Qt_MouseEventFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_MouseEventFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::MouseEventFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_MouseEventFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MouseEventFlags::Int() == a0->operator Qt::MouseEventFlags::Int());
#line 87836 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::MouseEventFlags *>(a0),sipType_Qt_MouseEventFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_MouseEventFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MouseEventFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::MouseEventFlags(*sipCpp ^ a0);
#line 87875 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseEventFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MouseEventFlags, &a0, &a0State, &a1))
        {
             ::Qt::MouseEventFlags*sipRes;

            sipRes = new  ::Qt::MouseEventFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_MouseEventFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseEventFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MouseEventFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::MouseEventFlags(*sipCpp | a0);
#line 87947 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseEventFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MouseEventFlags, &a0, &a0State, &a1))
        {
             ::Qt::MouseEventFlags*sipRes;

            sipRes = new  ::Qt::MouseEventFlags((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_MouseEventFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseEventFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MouseEventFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::MouseEventFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseEventFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MouseEventFlags, &a0, &a0State, &a1))
        {
             ::Qt::MouseEventFlags*sipRes;

            sipRes = new  ::Qt::MouseEventFlags((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_MouseEventFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseEventFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___invert__(PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___invert__(PyObject *sipSelf)
{
     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::MouseEventFlags*sipRes;

            sipRes = new  ::Qt::MouseEventFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseEventFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_MouseEventFlags___int__(PyObject *);}
static PyObject *slot_Qt_MouseEventFlags___int__(PyObject *sipSelf)
{
     ::Qt::MouseEventFlags *sipCpp = reinterpret_cast< ::Qt::MouseEventFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseEventFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_MouseEventFlags(void *, int);}
static void release_Qt_MouseEventFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::MouseEventFlags *>(sipCppV);
}


extern "C" {static void assign_Qt_MouseEventFlags(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_MouseEventFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::MouseEventFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::MouseEventFlags *>(sipSrc);
}


extern "C" {static void *array_Qt_MouseEventFlags(SIP_SSIZE_T);}
static void *array_Qt_MouseEventFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::MouseEventFlags[sipNrElem];
}


extern "C" {static void *copy_Qt_MouseEventFlags(const void *, SIP_SSIZE_T);}
static void *copy_Qt_MouseEventFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::MouseEventFlags(reinterpret_cast<const  ::Qt::MouseEventFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_MouseEventFlags(sipSimpleWrapper *);}
static void dealloc_Qt_MouseEventFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_MouseEventFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_MouseEventFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_MouseEventFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::MouseEventFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::MouseEventFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::MouseEventFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::MouseEventFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_MouseEventFlags, &a0, &a0State))
        {
            sipCpp = new  ::Qt::MouseEventFlags(*a0);
            sipReleaseType(const_cast< ::Qt::MouseEventFlags *>(a0),sipType_Qt_MouseEventFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_MouseEventFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_MouseEventFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::MouseEventFlags **sipCppPtr = reinterpret_cast< ::Qt::MouseEventFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::MouseEventFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_MouseEventFlag)) ||
            sipCanConvertToType(sipPy, sipType_Qt_MouseEventFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_MouseEventFlag)))
{
    *sipCppPtr = new Qt::MouseEventFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::MouseEventFlags *>(sipConvertToType(sipPy, sipType_Qt_MouseEventFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 88215 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_MouseEventFlags[] = {
    {(void *)slot_Qt_MouseEventFlags___hash__, hash_slot},
    {(void *)slot_Qt_MouseEventFlags___bool__, bool_slot},
    {(void *)slot_Qt_MouseEventFlags___ne__, ne_slot},
    {(void *)slot_Qt_MouseEventFlags___eq__, eq_slot},
    {(void *)slot_Qt_MouseEventFlags___ixor__, ixor_slot},
    {(void *)slot_Qt_MouseEventFlags___xor__, xor_slot},
    {(void *)slot_Qt_MouseEventFlags___ior__, ior_slot},
    {(void *)slot_Qt_MouseEventFlags___or__, or_slot},
    {(void *)slot_Qt_MouseEventFlags___iand__, iand_slot},
    {(void *)slot_Qt_MouseEventFlags___and__, and_slot},
    {(void *)slot_Qt_MouseEventFlags___invert__, invert_slot},
    {(void *)slot_Qt_MouseEventFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_MouseEventFlags, "\1Qt.MouseEventFlags()\n"
"Qt.MouseEventFlags(Union[Qt.MouseEventFlags, Qt.MouseEventFlag])\n"
"Qt.MouseEventFlags(Qt.MouseEventFlags)");


static pyqt5ClassPluginDef plugin_Qt_MouseEventFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_MouseEventFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__MouseEventFlags,
        {SIP_NULLPTR},
        &plugin_Qt_MouseEventFlags
    },
    {
        sipNameNr_MouseEventFlags,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_MouseEventFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_MouseEventFlags,
    init_type_Qt_MouseEventFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_MouseEventFlags,
    assign_Qt_MouseEventFlags,
    array_Qt_MouseEventFlags,
    copy_Qt_MouseEventFlags,
    release_Qt_MouseEventFlags,
    SIP_NULLPTR,
    convertTo_Qt_MouseEventFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_Edges___hash__(PyObject *);}
static long slot_Qt_Edges___hash__(PyObject *sipSelf)
{
     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::Edges::Int();
#line 88325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_Edges___bool__(PyObject *);}
static int slot_Qt_Edges___bool__(PyObject *sipSelf)
{
     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Edges::Int() != 0);
#line 88350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_Edges___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edges___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::Edges* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_Edges, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Edges::Int() != a0->operator Qt::Edges::Int());
#line 88380 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::Edges *>(a0),sipType_Qt_Edges,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_Edges, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_Edges___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edges___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::Edges* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_Edges, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Edges::Int() == a0->operator Qt::Edges::Int());
#line 88416 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::Edges *>(a0),sipType_Qt_Edges,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_Edges, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_Edges___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edges___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Edges)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::Edges(*sipCpp ^ a0);
#line 88455 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Edges___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edges___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Edges* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Edges, &a0, &a0State, &a1))
        {
             ::Qt::Edges*sipRes;

            sipRes = new  ::Qt::Edges((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_Edges,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Edges,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Edges___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edges___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Edges)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::Edges(*sipCpp | a0);
#line 88527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Edges___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edges___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Edges* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Edges, &a0, &a0State, &a1))
        {
             ::Qt::Edges*sipRes;

            sipRes = new  ::Qt::Edges((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_Edges,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Edges,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Edges___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edges___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Edges)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::Edges::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Edges___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Edges___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Edges* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Edges, &a0, &a0State, &a1))
        {
             ::Qt::Edges*sipRes;

            sipRes = new  ::Qt::Edges((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_Edges,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Edges,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Edges___invert__(PyObject *);}
static PyObject *slot_Qt_Edges___invert__(PyObject *sipSelf)
{
     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::Edges*sipRes;

            sipRes = new  ::Qt::Edges(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_Edges,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_Edges___int__(PyObject *);}
static PyObject *slot_Qt_Edges___int__(PyObject *sipSelf)
{
     ::Qt::Edges *sipCpp = reinterpret_cast< ::Qt::Edges *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Edges));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_Edges(void *, int);}
static void release_Qt_Edges(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::Edges *>(sipCppV);
}


extern "C" {static void assign_Qt_Edges(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_Edges(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::Edges *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::Edges *>(sipSrc);
}


extern "C" {static void *array_Qt_Edges(SIP_SSIZE_T);}
static void *array_Qt_Edges(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::Edges[sipNrElem];
}


extern "C" {static void *copy_Qt_Edges(const void *, SIP_SSIZE_T);}
static void *copy_Qt_Edges(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::Edges(reinterpret_cast<const  ::Qt::Edges *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_Edges(sipSimpleWrapper *);}
static void dealloc_Qt_Edges(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_Edges(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_Edges(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_Edges(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::Edges *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::Edges();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::Edges(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::Edges* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_Edges, &a0, &a0State))
        {
            sipCpp = new  ::Qt::Edges(*a0);
            sipReleaseType(const_cast< ::Qt::Edges *>(a0),sipType_Qt_Edges,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_Edges(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_Edges(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::Edges **sipCppPtr = reinterpret_cast< ::Qt::Edges **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::Edges is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_Edge)) ||
            sipCanConvertToType(sipPy, sipType_Qt_Edges, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_Edge)))
{
    *sipCppPtr = new Qt::Edges(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::Edges *>(sipConvertToType(sipPy, sipType_Qt_Edges, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 88795 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_Edges[] = {
    {(void *)slot_Qt_Edges___hash__, hash_slot},
    {(void *)slot_Qt_Edges___bool__, bool_slot},
    {(void *)slot_Qt_Edges___ne__, ne_slot},
    {(void *)slot_Qt_Edges___eq__, eq_slot},
    {(void *)slot_Qt_Edges___ixor__, ixor_slot},
    {(void *)slot_Qt_Edges___xor__, xor_slot},
    {(void *)slot_Qt_Edges___ior__, ior_slot},
    {(void *)slot_Qt_Edges___or__, or_slot},
    {(void *)slot_Qt_Edges___iand__, iand_slot},
    {(void *)slot_Qt_Edges___and__, and_slot},
    {(void *)slot_Qt_Edges___invert__, invert_slot},
    {(void *)slot_Qt_Edges___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_Edges, "\1Qt.Edges()\n"
"Qt.Edges(Union[Qt.Edges, Qt.Edge])\n"
"Qt.Edges(Qt.Edges)");


static pyqt5ClassPluginDef plugin_Qt_Edges = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_Edges = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__Edges,
        {SIP_NULLPTR},
        &plugin_Qt_Edges
    },
    {
        sipNameNr_Edges,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_Edges,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_Edges,
    init_type_Qt_Edges,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_Edges,
    assign_Qt_Edges,
    array_Qt_Edges,
    copy_Qt_Edges,
    release_Qt_Edges,
    SIP_NULLPTR,
    convertTo_Qt_Edges,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88883 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88887 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_ApplicationStates___hash__(PyObject *);}
static long slot_Qt_ApplicationStates___hash__(PyObject *sipSelf)
{
     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::ApplicationStates::Int();
#line 88905 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_ApplicationStates___bool__(PyObject *);}
static int slot_Qt_ApplicationStates___bool__(PyObject *sipSelf)
{
     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ApplicationStates::Int() != 0);
#line 88930 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ApplicationStates___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ApplicationStates* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ApplicationStates, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ApplicationStates::Int() != a0->operator Qt::ApplicationStates::Int());
#line 88960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ApplicationStates *>(a0),sipType_Qt_ApplicationStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_ApplicationStates, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ApplicationStates___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ApplicationStates* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ApplicationStates, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ApplicationStates::Int() == a0->operator Qt::ApplicationStates::Int());
#line 88996 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ApplicationStates *>(a0),sipType_Qt_ApplicationStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_ApplicationStates, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ApplicationStates___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ApplicationStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ApplicationStates(*sipCpp ^ a0);
#line 89035 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ApplicationStates___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ApplicationStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ApplicationStates, &a0, &a0State, &a1))
        {
             ::Qt::ApplicationStates*sipRes;

            sipRes = new  ::Qt::ApplicationStates((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_ApplicationStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ApplicationStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ApplicationStates___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ApplicationStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ApplicationStates(*sipCpp | a0);
#line 89107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ApplicationStates___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ApplicationStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ApplicationStates, &a0, &a0State, &a1))
        {
             ::Qt::ApplicationStates*sipRes;

            sipRes = new  ::Qt::ApplicationStates((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_ApplicationStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ApplicationStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ApplicationStates___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ApplicationStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::ApplicationStates::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ApplicationStates___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ApplicationStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ApplicationStates, &a0, &a0State, &a1))
        {
             ::Qt::ApplicationStates*sipRes;

            sipRes = new  ::Qt::ApplicationStates((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_ApplicationStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ApplicationStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___invert__(PyObject *);}
static PyObject *slot_Qt_ApplicationStates___invert__(PyObject *sipSelf)
{
     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::ApplicationStates*sipRes;

            sipRes = new  ::Qt::ApplicationStates(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_ApplicationStates,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ApplicationStates___int__(PyObject *);}
static PyObject *slot_Qt_ApplicationStates___int__(PyObject *sipSelf)
{
     ::Qt::ApplicationStates *sipCpp = reinterpret_cast< ::Qt::ApplicationStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ApplicationStates));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_ApplicationStates(void *, int);}
static void release_Qt_ApplicationStates(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::ApplicationStates *>(sipCppV);
}


extern "C" {static void assign_Qt_ApplicationStates(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_ApplicationStates(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::ApplicationStates *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::ApplicationStates *>(sipSrc);
}


extern "C" {static void *array_Qt_ApplicationStates(SIP_SSIZE_T);}
static void *array_Qt_ApplicationStates(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::ApplicationStates[sipNrElem];
}


extern "C" {static void *copy_Qt_ApplicationStates(const void *, SIP_SSIZE_T);}
static void *copy_Qt_ApplicationStates(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::ApplicationStates(reinterpret_cast<const  ::Qt::ApplicationStates *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_ApplicationStates(sipSimpleWrapper *);}
static void dealloc_Qt_ApplicationStates(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_ApplicationStates(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_ApplicationStates(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_ApplicationStates(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::ApplicationStates *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::ApplicationStates();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::ApplicationStates(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::ApplicationStates* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_ApplicationStates, &a0, &a0State))
        {
            sipCpp = new  ::Qt::ApplicationStates(*a0);
            sipReleaseType(const_cast< ::Qt::ApplicationStates *>(a0),sipType_Qt_ApplicationStates,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_ApplicationStates(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_ApplicationStates(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::ApplicationStates **sipCppPtr = reinterpret_cast< ::Qt::ApplicationStates **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::ApplicationStates is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ApplicationState)) ||
            sipCanConvertToType(sipPy, sipType_Qt_ApplicationStates, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ApplicationState)))
{
    *sipCppPtr = new Qt::ApplicationStates(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::ApplicationStates *>(sipConvertToType(sipPy, sipType_Qt_ApplicationStates, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 89375 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_ApplicationStates[] = {
    {(void *)slot_Qt_ApplicationStates___hash__, hash_slot},
    {(void *)slot_Qt_ApplicationStates___bool__, bool_slot},
    {(void *)slot_Qt_ApplicationStates___ne__, ne_slot},
    {(void *)slot_Qt_ApplicationStates___eq__, eq_slot},
    {(void *)slot_Qt_ApplicationStates___ixor__, ixor_slot},
    {(void *)slot_Qt_ApplicationStates___xor__, xor_slot},
    {(void *)slot_Qt_ApplicationStates___ior__, ior_slot},
    {(void *)slot_Qt_ApplicationStates___or__, or_slot},
    {(void *)slot_Qt_ApplicationStates___iand__, iand_slot},
    {(void *)slot_Qt_ApplicationStates___and__, and_slot},
    {(void *)slot_Qt_ApplicationStates___invert__, invert_slot},
    {(void *)slot_Qt_ApplicationStates___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_ApplicationStates, "\1Qt.ApplicationStates()\n"
"Qt.ApplicationStates(Union[Qt.ApplicationStates, Qt.ApplicationState])\n"
"Qt.ApplicationStates(Qt.ApplicationStates)");


static pyqt5ClassPluginDef plugin_Qt_ApplicationStates = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_ApplicationStates = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__ApplicationStates,
        {SIP_NULLPTR},
        &plugin_Qt_ApplicationStates
    },
    {
        sipNameNr_ApplicationStates,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_ApplicationStates,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_ApplicationStates,
    init_type_Qt_ApplicationStates,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_ApplicationStates,
    assign_Qt_ApplicationStates,
    array_Qt_ApplicationStates,
    copy_Qt_ApplicationStates,
    release_Qt_ApplicationStates,
    SIP_NULLPTR,
    convertTo_Qt_ApplicationStates,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89467 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_FindChildOptions___hash__(PyObject *);}
static long slot_Qt_FindChildOptions___hash__(PyObject *sipSelf)
{
     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::FindChildOptions::Int();
#line 89485 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_FindChildOptions___bool__(PyObject *);}
static int slot_Qt_FindChildOptions___bool__(PyObject *sipSelf)
{
     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::FindChildOptions::Int() != 0);
#line 89510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_FindChildOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::FindChildOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_FindChildOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::FindChildOptions::Int() != a0->operator Qt::FindChildOptions::Int());
#line 89540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::FindChildOptions *>(a0),sipType_Qt_FindChildOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_FindChildOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_FindChildOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::FindChildOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_FindChildOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::FindChildOptions::Int() == a0->operator Qt::FindChildOptions::Int());
#line 89576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::FindChildOptions *>(a0),sipType_Qt_FindChildOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_FindChildOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_FindChildOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_FindChildOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::FindChildOptions(*sipCpp ^ a0);
#line 89615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_FindChildOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::FindChildOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_FindChildOptions, &a0, &a0State, &a1))
        {
             ::Qt::FindChildOptions*sipRes;

            sipRes = new  ::Qt::FindChildOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_FindChildOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_FindChildOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_FindChildOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_FindChildOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::FindChildOptions(*sipCpp | a0);
#line 89687 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_FindChildOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::FindChildOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_FindChildOptions, &a0, &a0State, &a1))
        {
             ::Qt::FindChildOptions*sipRes;

            sipRes = new  ::Qt::FindChildOptions((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_FindChildOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_FindChildOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_FindChildOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_FindChildOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::FindChildOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_FindChildOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::FindChildOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_FindChildOptions, &a0, &a0State, &a1))
        {
             ::Qt::FindChildOptions*sipRes;

            sipRes = new  ::Qt::FindChildOptions((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_FindChildOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_FindChildOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___invert__(PyObject *);}
static PyObject *slot_Qt_FindChildOptions___invert__(PyObject *sipSelf)
{
     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::FindChildOptions*sipRes;

            sipRes = new  ::Qt::FindChildOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_FindChildOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_FindChildOptions___int__(PyObject *);}
static PyObject *slot_Qt_FindChildOptions___int__(PyObject *sipSelf)
{
     ::Qt::FindChildOptions *sipCpp = reinterpret_cast< ::Qt::FindChildOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_FindChildOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_FindChildOptions(void *, int);}
static void release_Qt_FindChildOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::FindChildOptions *>(sipCppV);
}


extern "C" {static void assign_Qt_FindChildOptions(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_FindChildOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::FindChildOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::FindChildOptions *>(sipSrc);
}


extern "C" {static void *array_Qt_FindChildOptions(SIP_SSIZE_T);}
static void *array_Qt_FindChildOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::FindChildOptions[sipNrElem];
}


extern "C" {static void *copy_Qt_FindChildOptions(const void *, SIP_SSIZE_T);}
static void *copy_Qt_FindChildOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::FindChildOptions(reinterpret_cast<const  ::Qt::FindChildOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_FindChildOptions(sipSimpleWrapper *);}
static void dealloc_Qt_FindChildOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_FindChildOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_FindChildOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_FindChildOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::FindChildOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::FindChildOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::FindChildOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::FindChildOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_FindChildOptions, &a0, &a0State))
        {
            sipCpp = new  ::Qt::FindChildOptions(*a0);
            sipReleaseType(const_cast< ::Qt::FindChildOptions *>(a0),sipType_Qt_FindChildOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_FindChildOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_FindChildOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::FindChildOptions **sipCppPtr = reinterpret_cast< ::Qt::FindChildOptions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::FindChildOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_FindChildOption)) ||
            sipCanConvertToType(sipPy, sipType_Qt_FindChildOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_FindChildOption)))
{
    *sipCppPtr = new Qt::FindChildOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::FindChildOptions *>(sipConvertToType(sipPy, sipType_Qt_FindChildOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 89955 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_FindChildOptions[] = {
    {(void *)slot_Qt_FindChildOptions___hash__, hash_slot},
    {(void *)slot_Qt_FindChildOptions___bool__, bool_slot},
    {(void *)slot_Qt_FindChildOptions___ne__, ne_slot},
    {(void *)slot_Qt_FindChildOptions___eq__, eq_slot},
    {(void *)slot_Qt_FindChildOptions___ixor__, ixor_slot},
    {(void *)slot_Qt_FindChildOptions___xor__, xor_slot},
    {(void *)slot_Qt_FindChildOptions___ior__, ior_slot},
    {(void *)slot_Qt_FindChildOptions___or__, or_slot},
    {(void *)slot_Qt_FindChildOptions___iand__, iand_slot},
    {(void *)slot_Qt_FindChildOptions___and__, and_slot},
    {(void *)slot_Qt_FindChildOptions___invert__, invert_slot},
    {(void *)slot_Qt_FindChildOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_FindChildOptions, "\1Qt.FindChildOptions()\n"
"Qt.FindChildOptions(Union[Qt.FindChildOptions, Qt.FindChildOption])\n"
"Qt.FindChildOptions(Qt.FindChildOptions)");


static pyqt5ClassPluginDef plugin_Qt_FindChildOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_FindChildOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__FindChildOptions,
        {SIP_NULLPTR},
        &plugin_Qt_FindChildOptions
    },
    {
        sipNameNr_FindChildOptions,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_FindChildOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_FindChildOptions,
    init_type_Qt_FindChildOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_FindChildOptions,
    assign_Qt_FindChildOptions,
    array_Qt_FindChildOptions,
    copy_Qt_FindChildOptions,
    release_Qt_FindChildOptions,
    SIP_NULLPTR,
    convertTo_Qt_FindChildOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90043 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90047 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_ScreenOrientations___hash__(PyObject *);}
static long slot_Qt_ScreenOrientations___hash__(PyObject *sipSelf)
{
     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::ScreenOrientations::Int();
#line 90065 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_ScreenOrientations___bool__(PyObject *);}
static int slot_Qt_ScreenOrientations___bool__(PyObject *sipSelf)
{
     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ScreenOrientations::Int() != 0);
#line 90090 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ScreenOrientations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ScreenOrientations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ScreenOrientations::Int() != a0->operator Qt::ScreenOrientations::Int());
#line 90120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ScreenOrientations *>(a0),sipType_Qt_ScreenOrientations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_ScreenOrientations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ScreenOrientations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ScreenOrientations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ScreenOrientations::Int() == a0->operator Qt::ScreenOrientations::Int());
#line 90156 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ScreenOrientations *>(a0),sipType_Qt_ScreenOrientations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_ScreenOrientations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ScreenOrientations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ScreenOrientations(*sipCpp ^ a0);
#line 90195 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ScreenOrientations, &a0, &a0State, &a1))
        {
             ::Qt::ScreenOrientations*sipRes;

            sipRes = new  ::Qt::ScreenOrientations((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_ScreenOrientations,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ScreenOrientations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ScreenOrientations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ScreenOrientations(*sipCpp | a0);
#line 90267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ScreenOrientations, &a0, &a0State, &a1))
        {
             ::Qt::ScreenOrientations*sipRes;

            sipRes = new  ::Qt::ScreenOrientations((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_ScreenOrientations,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ScreenOrientations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ScreenOrientations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::ScreenOrientations::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ScreenOrientations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ScreenOrientations, &a0, &a0State, &a1))
        {
             ::Qt::ScreenOrientations*sipRes;

            sipRes = new  ::Qt::ScreenOrientations((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_ScreenOrientations,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ScreenOrientations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___invert__(PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___invert__(PyObject *sipSelf)
{
     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::ScreenOrientations*sipRes;

            sipRes = new  ::Qt::ScreenOrientations(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_ScreenOrientations,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ScreenOrientations___int__(PyObject *);}
static PyObject *slot_Qt_ScreenOrientations___int__(PyObject *sipSelf)
{
     ::Qt::ScreenOrientations *sipCpp = reinterpret_cast< ::Qt::ScreenOrientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ScreenOrientations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_ScreenOrientations(void *, int);}
static void release_Qt_ScreenOrientations(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::ScreenOrientations *>(sipCppV);
}


extern "C" {static void assign_Qt_ScreenOrientations(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_ScreenOrientations(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::ScreenOrientations *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::ScreenOrientations *>(sipSrc);
}


extern "C" {static void *array_Qt_ScreenOrientations(SIP_SSIZE_T);}
static void *array_Qt_ScreenOrientations(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::ScreenOrientations[sipNrElem];
}


extern "C" {static void *copy_Qt_ScreenOrientations(const void *, SIP_SSIZE_T);}
static void *copy_Qt_ScreenOrientations(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::ScreenOrientations(reinterpret_cast<const  ::Qt::ScreenOrientations *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_ScreenOrientations(sipSimpleWrapper *);}
static void dealloc_Qt_ScreenOrientations(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_ScreenOrientations(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_ScreenOrientations(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_ScreenOrientations(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::ScreenOrientations *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::ScreenOrientations();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::ScreenOrientations(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::ScreenOrientations* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_ScreenOrientations, &a0, &a0State))
        {
            sipCpp = new  ::Qt::ScreenOrientations(*a0);
            sipReleaseType(const_cast< ::Qt::ScreenOrientations *>(a0),sipType_Qt_ScreenOrientations,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_ScreenOrientations(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_ScreenOrientations(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::ScreenOrientations **sipCppPtr = reinterpret_cast< ::Qt::ScreenOrientations **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::ScreenOrientations is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ScreenOrientation)) ||
            sipCanConvertToType(sipPy, sipType_Qt_ScreenOrientations, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ScreenOrientation)))
{
    *sipCppPtr = new Qt::ScreenOrientations(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::ScreenOrientations *>(sipConvertToType(sipPy, sipType_Qt_ScreenOrientations, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 90535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_ScreenOrientations[] = {
    {(void *)slot_Qt_ScreenOrientations___hash__, hash_slot},
    {(void *)slot_Qt_ScreenOrientations___bool__, bool_slot},
    {(void *)slot_Qt_ScreenOrientations___ne__, ne_slot},
    {(void *)slot_Qt_ScreenOrientations___eq__, eq_slot},
    {(void *)slot_Qt_ScreenOrientations___ixor__, ixor_slot},
    {(void *)slot_Qt_ScreenOrientations___xor__, xor_slot},
    {(void *)slot_Qt_ScreenOrientations___ior__, ior_slot},
    {(void *)slot_Qt_ScreenOrientations___or__, or_slot},
    {(void *)slot_Qt_ScreenOrientations___iand__, iand_slot},
    {(void *)slot_Qt_ScreenOrientations___and__, and_slot},
    {(void *)slot_Qt_ScreenOrientations___invert__, invert_slot},
    {(void *)slot_Qt_ScreenOrientations___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_ScreenOrientations, "\1Qt.ScreenOrientations()\n"
"Qt.ScreenOrientations(Union[Qt.ScreenOrientations, Qt.ScreenOrientation])\n"
"Qt.ScreenOrientations(Qt.ScreenOrientations)");


static pyqt5ClassPluginDef plugin_Qt_ScreenOrientations = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_ScreenOrientations = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__ScreenOrientations,
        {SIP_NULLPTR},
        &plugin_Qt_ScreenOrientations
    },
    {
        sipNameNr_ScreenOrientations,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_ScreenOrientations,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_ScreenOrientations,
    init_type_Qt_ScreenOrientations,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_ScreenOrientations,
    assign_Qt_ScreenOrientations,
    array_Qt_ScreenOrientations,
    copy_Qt_ScreenOrientations,
    release_Qt_ScreenOrientations,
    SIP_NULLPTR,
    convertTo_Qt_ScreenOrientations,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90623 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90627 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_GestureFlags___hash__(PyObject *);}
static long slot_Qt_GestureFlags___hash__(PyObject *sipSelf)
{
     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::GestureFlags::Int();
#line 90645 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_GestureFlags___bool__(PyObject *);}
static int slot_Qt_GestureFlags___bool__(PyObject *sipSelf)
{
     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::GestureFlags::Int() != 0);
#line 90670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_GestureFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::GestureFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_GestureFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::GestureFlags::Int() != a0->operator Qt::GestureFlags::Int());
#line 90700 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::GestureFlags *>(a0),sipType_Qt_GestureFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_GestureFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_GestureFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::GestureFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_GestureFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::GestureFlags::Int() == a0->operator Qt::GestureFlags::Int());
#line 90736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::GestureFlags *>(a0),sipType_Qt_GestureFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_GestureFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_GestureFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_GestureFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::GestureFlags(*sipCpp ^ a0);
#line 90775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_GestureFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::GestureFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_GestureFlags, &a0, &a0State, &a1))
        {
             ::Qt::GestureFlags*sipRes;

            sipRes = new  ::Qt::GestureFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_GestureFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_GestureFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_GestureFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_GestureFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::GestureFlags(*sipCpp | a0);
#line 90847 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_GestureFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::GestureFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_GestureFlags, &a0, &a0State, &a1))
        {
             ::Qt::GestureFlags*sipRes;

            sipRes = new  ::Qt::GestureFlags((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_GestureFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_GestureFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_GestureFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_GestureFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::GestureFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_GestureFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_GestureFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::GestureFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_GestureFlags, &a0, &a0State, &a1))
        {
             ::Qt::GestureFlags*sipRes;

            sipRes = new  ::Qt::GestureFlags((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_GestureFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_GestureFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_GestureFlags___invert__(PyObject *);}
static PyObject *slot_Qt_GestureFlags___invert__(PyObject *sipSelf)
{
     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::GestureFlags*sipRes;

            sipRes = new  ::Qt::GestureFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_GestureFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_GestureFlags___int__(PyObject *);}
static PyObject *slot_Qt_GestureFlags___int__(PyObject *sipSelf)
{
     ::Qt::GestureFlags *sipCpp = reinterpret_cast< ::Qt::GestureFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_GestureFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_GestureFlags(void *, int);}
static void release_Qt_GestureFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::GestureFlags *>(sipCppV);
}


extern "C" {static void assign_Qt_GestureFlags(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_GestureFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::GestureFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::GestureFlags *>(sipSrc);
}


extern "C" {static void *array_Qt_GestureFlags(SIP_SSIZE_T);}
static void *array_Qt_GestureFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::GestureFlags[sipNrElem];
}


extern "C" {static void *copy_Qt_GestureFlags(const void *, SIP_SSIZE_T);}
static void *copy_Qt_GestureFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::GestureFlags(reinterpret_cast<const  ::Qt::GestureFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_GestureFlags(sipSimpleWrapper *);}
static void dealloc_Qt_GestureFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_GestureFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_GestureFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_GestureFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::GestureFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::GestureFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::GestureFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::GestureFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_GestureFlags, &a0, &a0State))
        {
            sipCpp = new  ::Qt::GestureFlags(*a0);
            sipReleaseType(const_cast< ::Qt::GestureFlags *>(a0),sipType_Qt_GestureFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_GestureFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_GestureFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::GestureFlags **sipCppPtr = reinterpret_cast< ::Qt::GestureFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::GestureFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GestureFlag)) ||
            sipCanConvertToType(sipPy, sipType_Qt_GestureFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GestureFlag)))
{
    *sipCppPtr = new Qt::GestureFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::GestureFlags *>(sipConvertToType(sipPy, sipType_Qt_GestureFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 91115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_GestureFlags[] = {
    {(void *)slot_Qt_GestureFlags___hash__, hash_slot},
    {(void *)slot_Qt_GestureFlags___bool__, bool_slot},
    {(void *)slot_Qt_GestureFlags___ne__, ne_slot},
    {(void *)slot_Qt_GestureFlags___eq__, eq_slot},
    {(void *)slot_Qt_GestureFlags___ixor__, ixor_slot},
    {(void *)slot_Qt_GestureFlags___xor__, xor_slot},
    {(void *)slot_Qt_GestureFlags___ior__, ior_slot},
    {(void *)slot_Qt_GestureFlags___or__, or_slot},
    {(void *)slot_Qt_GestureFlags___iand__, iand_slot},
    {(void *)slot_Qt_GestureFlags___and__, and_slot},
    {(void *)slot_Qt_GestureFlags___invert__, invert_slot},
    {(void *)slot_Qt_GestureFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_GestureFlags, "\1Qt.GestureFlags()\n"
"Qt.GestureFlags(Union[Qt.GestureFlags, Qt.GestureFlag])\n"
"Qt.GestureFlags(Qt.GestureFlags)");


static pyqt5ClassPluginDef plugin_Qt_GestureFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_GestureFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__GestureFlags,
        {SIP_NULLPTR},
        &plugin_Qt_GestureFlags
    },
    {
        sipNameNr_GestureFlags,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_GestureFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_GestureFlags,
    init_type_Qt_GestureFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_GestureFlags,
    assign_Qt_GestureFlags,
    array_Qt_GestureFlags,
    copy_Qt_GestureFlags,
    release_Qt_GestureFlags,
    SIP_NULLPTR,
    convertTo_Qt_GestureFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91203 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91207 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_TouchPointStates___hash__(PyObject *);}
static long slot_Qt_TouchPointStates___hash__(PyObject *sipSelf)
{
     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::TouchPointStates::Int();
#line 91225 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_TouchPointStates___bool__(PyObject *);}
static int slot_Qt_TouchPointStates___bool__(PyObject *sipSelf)
{
     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::TouchPointStates::Int() != 0);
#line 91250 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointStates___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::TouchPointStates* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_TouchPointStates, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::TouchPointStates::Int() != a0->operator Qt::TouchPointStates::Int());
#line 91280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::TouchPointStates *>(a0),sipType_Qt_TouchPointStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_TouchPointStates, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointStates___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::TouchPointStates* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_TouchPointStates, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::TouchPointStates::Int() == a0->operator Qt::TouchPointStates::Int());
#line 91316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::TouchPointStates *>(a0),sipType_Qt_TouchPointStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_TouchPointStates, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointStates___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_TouchPointStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::TouchPointStates(*sipCpp ^ a0);
#line 91355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointStates___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TouchPointStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_TouchPointStates, &a0, &a0State, &a1))
        {
             ::Qt::TouchPointStates*sipRes;

            sipRes = new  ::Qt::TouchPointStates((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_TouchPointStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TouchPointStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointStates___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_TouchPointStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::TouchPointStates(*sipCpp | a0);
#line 91427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointStates___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TouchPointStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_TouchPointStates, &a0, &a0State, &a1))
        {
             ::Qt::TouchPointStates*sipRes;

            sipRes = new  ::Qt::TouchPointStates((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_TouchPointStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TouchPointStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointStates___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_TouchPointStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::TouchPointStates::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TouchPointStates___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TouchPointStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_TouchPointStates, &a0, &a0State, &a1))
        {
             ::Qt::TouchPointStates*sipRes;

            sipRes = new  ::Qt::TouchPointStates((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_TouchPointStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TouchPointStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___invert__(PyObject *);}
static PyObject *slot_Qt_TouchPointStates___invert__(PyObject *sipSelf)
{
     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::TouchPointStates*sipRes;

            sipRes = new  ::Qt::TouchPointStates(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_TouchPointStates,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_TouchPointStates___int__(PyObject *);}
static PyObject *slot_Qt_TouchPointStates___int__(PyObject *sipSelf)
{
     ::Qt::TouchPointStates *sipCpp = reinterpret_cast< ::Qt::TouchPointStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TouchPointStates));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_TouchPointStates(void *, int);}
static void release_Qt_TouchPointStates(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::TouchPointStates *>(sipCppV);
}


extern "C" {static void assign_Qt_TouchPointStates(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_TouchPointStates(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::TouchPointStates *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::TouchPointStates *>(sipSrc);
}


extern "C" {static void *array_Qt_TouchPointStates(SIP_SSIZE_T);}
static void *array_Qt_TouchPointStates(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::TouchPointStates[sipNrElem];
}


extern "C" {static void *copy_Qt_TouchPointStates(const void *, SIP_SSIZE_T);}
static void *copy_Qt_TouchPointStates(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::TouchPointStates(reinterpret_cast<const  ::Qt::TouchPointStates *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_TouchPointStates(sipSimpleWrapper *);}
static void dealloc_Qt_TouchPointStates(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_TouchPointStates(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_TouchPointStates(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_TouchPointStates(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::TouchPointStates *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::TouchPointStates();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::TouchPointStates(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::TouchPointStates* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_TouchPointStates, &a0, &a0State))
        {
            sipCpp = new  ::Qt::TouchPointStates(*a0);
            sipReleaseType(const_cast< ::Qt::TouchPointStates *>(a0),sipType_Qt_TouchPointStates,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_TouchPointStates(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_TouchPointStates(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::TouchPointStates **sipCppPtr = reinterpret_cast< ::Qt::TouchPointStates **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::TouchPointStates is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_TouchPointState)) ||
            sipCanConvertToType(sipPy, sipType_Qt_TouchPointStates, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_TouchPointState)))
{
    *sipCppPtr = new Qt::TouchPointStates(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::TouchPointStates *>(sipConvertToType(sipPy, sipType_Qt_TouchPointStates, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 91695 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_TouchPointStates[] = {
    {(void *)slot_Qt_TouchPointStates___hash__, hash_slot},
    {(void *)slot_Qt_TouchPointStates___bool__, bool_slot},
    {(void *)slot_Qt_TouchPointStates___ne__, ne_slot},
    {(void *)slot_Qt_TouchPointStates___eq__, eq_slot},
    {(void *)slot_Qt_TouchPointStates___ixor__, ixor_slot},
    {(void *)slot_Qt_TouchPointStates___xor__, xor_slot},
    {(void *)slot_Qt_TouchPointStates___ior__, ior_slot},
    {(void *)slot_Qt_TouchPointStates___or__, or_slot},
    {(void *)slot_Qt_TouchPointStates___iand__, iand_slot},
    {(void *)slot_Qt_TouchPointStates___and__, and_slot},
    {(void *)slot_Qt_TouchPointStates___invert__, invert_slot},
    {(void *)slot_Qt_TouchPointStates___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_TouchPointStates, "\1Qt.TouchPointStates()\n"
"Qt.TouchPointStates(Union[Qt.TouchPointStates, Qt.TouchPointState])\n"
"Qt.TouchPointStates(Qt.TouchPointStates)");


static pyqt5ClassPluginDef plugin_Qt_TouchPointStates = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_TouchPointStates = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__TouchPointStates,
        {SIP_NULLPTR},
        &plugin_Qt_TouchPointStates
    },
    {
        sipNameNr_TouchPointStates,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_TouchPointStates,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_TouchPointStates,
    init_type_Qt_TouchPointStates,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_TouchPointStates,
    assign_Qt_TouchPointStates,
    array_Qt_TouchPointStates,
    copy_Qt_TouchPointStates,
    release_Qt_TouchPointStates,
    SIP_NULLPTR,
    convertTo_Qt_TouchPointStates,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91783 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_InputMethodHints___hash__(PyObject *);}
static long slot_Qt_InputMethodHints___hash__(PyObject *sipSelf)
{
     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::InputMethodHints::Int();
#line 91805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_InputMethodHints___bool__(PyObject *);}
static int slot_Qt_InputMethodHints___bool__(PyObject *sipSelf)
{
     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::InputMethodHints::Int() != 0);
#line 91830 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHints___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::InputMethodHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_InputMethodHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::InputMethodHints::Int() != a0->operator Qt::InputMethodHints::Int());
#line 91860 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::InputMethodHints *>(a0),sipType_Qt_InputMethodHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_InputMethodHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHints___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::InputMethodHints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_InputMethodHints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::InputMethodHints::Int() == a0->operator Qt::InputMethodHints::Int());
#line 91896 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::InputMethodHints *>(a0),sipType_Qt_InputMethodHints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_InputMethodHints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHints___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_InputMethodHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::InputMethodHints(*sipCpp ^ a0);
#line 91935 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHints___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_InputMethodHints, &a0, &a0State, &a1))
        {
             ::Qt::InputMethodHints*sipRes;

            sipRes = new  ::Qt::InputMethodHints((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_InputMethodHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHints___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_InputMethodHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::InputMethodHints(*sipCpp | a0);
#line 92007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHints___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_InputMethodHints, &a0, &a0State, &a1))
        {
             ::Qt::InputMethodHints*sipRes;

            sipRes = new  ::Qt::InputMethodHints((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_InputMethodHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHints___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_InputMethodHints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::InputMethodHints::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodHints___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodHints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_InputMethodHints, &a0, &a0State, &a1))
        {
             ::Qt::InputMethodHints*sipRes;

            sipRes = new  ::Qt::InputMethodHints((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_InputMethodHints,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodHints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___invert__(PyObject *);}
static PyObject *slot_Qt_InputMethodHints___invert__(PyObject *sipSelf)
{
     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::InputMethodHints*sipRes;

            sipRes = new  ::Qt::InputMethodHints(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodHints,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_InputMethodHints___int__(PyObject *);}
static PyObject *slot_Qt_InputMethodHints___int__(PyObject *sipSelf)
{
     ::Qt::InputMethodHints *sipCpp = reinterpret_cast< ::Qt::InputMethodHints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodHints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_InputMethodHints(void *, int);}
static void release_Qt_InputMethodHints(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::InputMethodHints *>(sipCppV);
}


extern "C" {static void assign_Qt_InputMethodHints(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_InputMethodHints(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::InputMethodHints *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::InputMethodHints *>(sipSrc);
}


extern "C" {static void *array_Qt_InputMethodHints(SIP_SSIZE_T);}
static void *array_Qt_InputMethodHints(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::InputMethodHints[sipNrElem];
}


extern "C" {static void *copy_Qt_InputMethodHints(const void *, SIP_SSIZE_T);}
static void *copy_Qt_InputMethodHints(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::InputMethodHints(reinterpret_cast<const  ::Qt::InputMethodHints *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_InputMethodHints(sipSimpleWrapper *);}
static void dealloc_Qt_InputMethodHints(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_InputMethodHints(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_InputMethodHints(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_InputMethodHints(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::InputMethodHints *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::InputMethodHints();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::InputMethodHints(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::InputMethodHints* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_InputMethodHints, &a0, &a0State))
        {
            sipCpp = new  ::Qt::InputMethodHints(*a0);
            sipReleaseType(const_cast< ::Qt::InputMethodHints *>(a0),sipType_Qt_InputMethodHints,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_InputMethodHints(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_InputMethodHints(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::InputMethodHints **sipCppPtr = reinterpret_cast< ::Qt::InputMethodHints **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::InputMethodHints is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_InputMethodHint)) ||
            sipCanConvertToType(sipPy, sipType_Qt_InputMethodHints, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_InputMethodHint)))
{
    *sipCppPtr = new Qt::InputMethodHints(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::InputMethodHints *>(sipConvertToType(sipPy, sipType_Qt_InputMethodHints, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 92275 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_InputMethodHints[] = {
    {(void *)slot_Qt_InputMethodHints___hash__, hash_slot},
    {(void *)slot_Qt_InputMethodHints___bool__, bool_slot},
    {(void *)slot_Qt_InputMethodHints___ne__, ne_slot},
    {(void *)slot_Qt_InputMethodHints___eq__, eq_slot},
    {(void *)slot_Qt_InputMethodHints___ixor__, ixor_slot},
    {(void *)slot_Qt_InputMethodHints___xor__, xor_slot},
    {(void *)slot_Qt_InputMethodHints___ior__, ior_slot},
    {(void *)slot_Qt_InputMethodHints___or__, or_slot},
    {(void *)slot_Qt_InputMethodHints___iand__, iand_slot},
    {(void *)slot_Qt_InputMethodHints___and__, and_slot},
    {(void *)slot_Qt_InputMethodHints___invert__, invert_slot},
    {(void *)slot_Qt_InputMethodHints___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_InputMethodHints, "\1Qt.InputMethodHints()\n"
"Qt.InputMethodHints(Union[Qt.InputMethodHints, Qt.InputMethodHint])\n"
"Qt.InputMethodHints(Qt.InputMethodHints)");


static pyqt5ClassPluginDef plugin_Qt_InputMethodHints = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_InputMethodHints = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__InputMethodHints,
        {SIP_NULLPTR},
        &plugin_Qt_InputMethodHints
    },
    {
        sipNameNr_InputMethodHints,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_InputMethodHints,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_InputMethodHints,
    init_type_Qt_InputMethodHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_InputMethodHints,
    assign_Qt_InputMethodHints,
    array_Qt_InputMethodHints,
    copy_Qt_InputMethodHints,
    release_Qt_InputMethodHints,
    SIP_NULLPTR,
    convertTo_Qt_InputMethodHints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92363 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92367 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_TextInteractionFlags___hash__(PyObject *);}
static long slot_Qt_TextInteractionFlags___hash__(PyObject *sipSelf)
{
     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::TextInteractionFlags::Int();
#line 92385 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_TextInteractionFlags___bool__(PyObject *);}
static int slot_Qt_TextInteractionFlags___bool__(PyObject *sipSelf)
{
     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::TextInteractionFlags::Int() != 0);
#line 92410 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::TextInteractionFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::TextInteractionFlags::Int() != a0->operator Qt::TextInteractionFlags::Int());
#line 92440 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::TextInteractionFlags *>(a0),sipType_Qt_TextInteractionFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_TextInteractionFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::TextInteractionFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::TextInteractionFlags::Int() == a0->operator Qt::TextInteractionFlags::Int());
#line 92476 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::TextInteractionFlags *>(a0),sipType_Qt_TextInteractionFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_TextInteractionFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_TextInteractionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::TextInteractionFlags(*sipCpp ^ a0);
#line 92515 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_TextInteractionFlags, &a0, &a0State, &a1))
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_TextInteractionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::TextInteractionFlags(*sipCpp | a0);
#line 92587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_TextInteractionFlags, &a0, &a0State, &a1))
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_TextInteractionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::TextInteractionFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_TextInteractionFlags, &a0, &a0State, &a1))
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___invert__(PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___invert__(PyObject *sipSelf)
{
     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::TextInteractionFlags*sipRes;

            sipRes = new  ::Qt::TextInteractionFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_TextInteractionFlags___int__(PyObject *);}
static PyObject *slot_Qt_TextInteractionFlags___int__(PyObject *sipSelf)
{
     ::Qt::TextInteractionFlags *sipCpp = reinterpret_cast< ::Qt::TextInteractionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_TextInteractionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_TextInteractionFlags(void *, int);}
static void release_Qt_TextInteractionFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::TextInteractionFlags *>(sipCppV);
}


extern "C" {static void assign_Qt_TextInteractionFlags(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_TextInteractionFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::TextInteractionFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::TextInteractionFlags *>(sipSrc);
}


extern "C" {static void *array_Qt_TextInteractionFlags(SIP_SSIZE_T);}
static void *array_Qt_TextInteractionFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::TextInteractionFlags[sipNrElem];
}


extern "C" {static void *copy_Qt_TextInteractionFlags(const void *, SIP_SSIZE_T);}
static void *copy_Qt_TextInteractionFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::TextInteractionFlags(reinterpret_cast<const  ::Qt::TextInteractionFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_TextInteractionFlags(sipSimpleWrapper *);}
static void dealloc_Qt_TextInteractionFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_TextInteractionFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_TextInteractionFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_TextInteractionFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::TextInteractionFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::TextInteractionFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::TextInteractionFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::TextInteractionFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            sipCpp = new  ::Qt::TextInteractionFlags(*a0);
            sipReleaseType(const_cast< ::Qt::TextInteractionFlags *>(a0),sipType_Qt_TextInteractionFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_TextInteractionFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_TextInteractionFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::TextInteractionFlags **sipCppPtr = reinterpret_cast< ::Qt::TextInteractionFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::TextInteractionFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_TextInteractionFlag)) ||
            sipCanConvertToType(sipPy, sipType_Qt_TextInteractionFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_TextInteractionFlag)))
{
    *sipCppPtr = new Qt::TextInteractionFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::TextInteractionFlags *>(sipConvertToType(sipPy, sipType_Qt_TextInteractionFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 92855 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_TextInteractionFlags[] = {
    {(void *)slot_Qt_TextInteractionFlags___hash__, hash_slot},
    {(void *)slot_Qt_TextInteractionFlags___bool__, bool_slot},
    {(void *)slot_Qt_TextInteractionFlags___ne__, ne_slot},
    {(void *)slot_Qt_TextInteractionFlags___eq__, eq_slot},
    {(void *)slot_Qt_TextInteractionFlags___ixor__, ixor_slot},
    {(void *)slot_Qt_TextInteractionFlags___xor__, xor_slot},
    {(void *)slot_Qt_TextInteractionFlags___ior__, ior_slot},
    {(void *)slot_Qt_TextInteractionFlags___or__, or_slot},
    {(void *)slot_Qt_TextInteractionFlags___iand__, iand_slot},
    {(void *)slot_Qt_TextInteractionFlags___and__, and_slot},
    {(void *)slot_Qt_TextInteractionFlags___invert__, invert_slot},
    {(void *)slot_Qt_TextInteractionFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_TextInteractionFlags, "\1Qt.TextInteractionFlags()\n"
"Qt.TextInteractionFlags(Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag])\n"
"Qt.TextInteractionFlags(Qt.TextInteractionFlags)");


static pyqt5ClassPluginDef plugin_Qt_TextInteractionFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_TextInteractionFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__TextInteractionFlags,
        {SIP_NULLPTR},
        &plugin_Qt_TextInteractionFlags
    },
    {
        sipNameNr_TextInteractionFlags,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_TextInteractionFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_TextInteractionFlags,
    init_type_Qt_TextInteractionFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_TextInteractionFlags,
    assign_Qt_TextInteractionFlags,
    array_Qt_TextInteractionFlags,
    copy_Qt_TextInteractionFlags,
    release_Qt_TextInteractionFlags,
    SIP_NULLPTR,
    convertTo_Qt_TextInteractionFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92943 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 92947 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_MatchFlags___hash__(PyObject *);}
static long slot_Qt_MatchFlags___hash__(PyObject *sipSelf)
{
     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::MatchFlags::Int();
#line 92965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_MatchFlags___bool__(PyObject *);}
static int slot_Qt_MatchFlags___bool__(PyObject *sipSelf)
{
     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MatchFlags::Int() != 0);
#line 92990 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_MatchFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::MatchFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_MatchFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MatchFlags::Int() != a0->operator Qt::MatchFlags::Int());
#line 93020 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::MatchFlags *>(a0),sipType_Qt_MatchFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_MatchFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_MatchFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::MatchFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_MatchFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MatchFlags::Int() == a0->operator Qt::MatchFlags::Int());
#line 93056 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::MatchFlags *>(a0),sipType_Qt_MatchFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_MatchFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_MatchFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MatchFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::MatchFlags(*sipCpp ^ a0);
#line 93095 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MatchFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MatchFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MatchFlags, &a0, &a0State, &a1))
        {
             ::Qt::MatchFlags*sipRes;

            sipRes = new  ::Qt::MatchFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_MatchFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MatchFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MatchFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MatchFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::MatchFlags(*sipCpp | a0);
#line 93167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MatchFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MatchFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MatchFlags, &a0, &a0State, &a1))
        {
             ::Qt::MatchFlags*sipRes;

            sipRes = new  ::Qt::MatchFlags((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_MatchFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MatchFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MatchFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MatchFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::MatchFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MatchFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MatchFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MatchFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MatchFlags, &a0, &a0State, &a1))
        {
             ::Qt::MatchFlags*sipRes;

            sipRes = new  ::Qt::MatchFlags((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_MatchFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MatchFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MatchFlags___invert__(PyObject *);}
static PyObject *slot_Qt_MatchFlags___invert__(PyObject *sipSelf)
{
     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::MatchFlags*sipRes;

            sipRes = new  ::Qt::MatchFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_MatchFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_MatchFlags___int__(PyObject *);}
static PyObject *slot_Qt_MatchFlags___int__(PyObject *sipSelf)
{
     ::Qt::MatchFlags *sipCpp = reinterpret_cast< ::Qt::MatchFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MatchFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_MatchFlags(void *, int);}
static void release_Qt_MatchFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::MatchFlags *>(sipCppV);
}


extern "C" {static void assign_Qt_MatchFlags(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_MatchFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::MatchFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::MatchFlags *>(sipSrc);
}


extern "C" {static void *array_Qt_MatchFlags(SIP_SSIZE_T);}
static void *array_Qt_MatchFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::MatchFlags[sipNrElem];
}


extern "C" {static void *copy_Qt_MatchFlags(const void *, SIP_SSIZE_T);}
static void *copy_Qt_MatchFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::MatchFlags(reinterpret_cast<const  ::Qt::MatchFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_MatchFlags(sipSimpleWrapper *);}
static void dealloc_Qt_MatchFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_MatchFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_MatchFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_MatchFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::MatchFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::MatchFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::MatchFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::MatchFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_MatchFlags, &a0, &a0State))
        {
            sipCpp = new  ::Qt::MatchFlags(*a0);
            sipReleaseType(const_cast< ::Qt::MatchFlags *>(a0),sipType_Qt_MatchFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_MatchFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_MatchFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::MatchFlags **sipCppPtr = reinterpret_cast< ::Qt::MatchFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::MatchFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_MatchFlag)) ||
            sipCanConvertToType(sipPy, sipType_Qt_MatchFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_MatchFlag)))
{
    *sipCppPtr = new Qt::MatchFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::MatchFlags *>(sipConvertToType(sipPy, sipType_Qt_MatchFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 93435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_MatchFlags[] = {
    {(void *)slot_Qt_MatchFlags___hash__, hash_slot},
    {(void *)slot_Qt_MatchFlags___bool__, bool_slot},
    {(void *)slot_Qt_MatchFlags___ne__, ne_slot},
    {(void *)slot_Qt_MatchFlags___eq__, eq_slot},
    {(void *)slot_Qt_MatchFlags___ixor__, ixor_slot},
    {(void *)slot_Qt_MatchFlags___xor__, xor_slot},
    {(void *)slot_Qt_MatchFlags___ior__, ior_slot},
    {(void *)slot_Qt_MatchFlags___or__, or_slot},
    {(void *)slot_Qt_MatchFlags___iand__, iand_slot},
    {(void *)slot_Qt_MatchFlags___and__, and_slot},
    {(void *)slot_Qt_MatchFlags___invert__, invert_slot},
    {(void *)slot_Qt_MatchFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_MatchFlags, "\1Qt.MatchFlags()\n"
"Qt.MatchFlags(Union[Qt.MatchFlags, Qt.MatchFlag])\n"
"Qt.MatchFlags(Qt.MatchFlags)");


static pyqt5ClassPluginDef plugin_Qt_MatchFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_MatchFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__MatchFlags,
        {SIP_NULLPTR},
        &plugin_Qt_MatchFlags
    },
    {
        sipNameNr_MatchFlags,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_MatchFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_MatchFlags,
    init_type_Qt_MatchFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_MatchFlags,
    assign_Qt_MatchFlags,
    array_Qt_MatchFlags,
    copy_Qt_MatchFlags,
    release_Qt_MatchFlags,
    SIP_NULLPTR,
    convertTo_Qt_MatchFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93523 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_ItemFlags___hash__(PyObject *);}
static long slot_Qt_ItemFlags___hash__(PyObject *sipSelf)
{
     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::ItemFlags::Int();
#line 93545 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_ItemFlags___bool__(PyObject *);}
static int slot_Qt_ItemFlags___bool__(PyObject *sipSelf)
{
     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ItemFlags::Int() != 0);
#line 93570 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ItemFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ItemFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ItemFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ItemFlags::Int() != a0->operator Qt::ItemFlags::Int());
#line 93600 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ItemFlags *>(a0),sipType_Qt_ItemFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_ItemFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ItemFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ItemFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ItemFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ItemFlags::Int() == a0->operator Qt::ItemFlags::Int());
#line 93636 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ItemFlags *>(a0),sipType_Qt_ItemFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_ItemFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ItemFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ItemFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ItemFlags(*sipCpp ^ a0);
#line 93675 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ItemFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ItemFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ItemFlags, &a0, &a0State, &a1))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ItemFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ItemFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ItemFlags(*sipCpp | a0);
#line 93747 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ItemFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ItemFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ItemFlags, &a0, &a0State, &a1))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ItemFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ItemFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::ItemFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ItemFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ItemFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ItemFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ItemFlags, &a0, &a0State, &a1))
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ItemFlags___invert__(PyObject *);}
static PyObject *slot_Qt_ItemFlags___invert__(PyObject *sipSelf)
{
     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::ItemFlags*sipRes;

            sipRes = new  ::Qt::ItemFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ItemFlags___int__(PyObject *);}
static PyObject *slot_Qt_ItemFlags___int__(PyObject *sipSelf)
{
     ::Qt::ItemFlags *sipCpp = reinterpret_cast< ::Qt::ItemFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ItemFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_ItemFlags(void *, int);}
static void release_Qt_ItemFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::ItemFlags *>(sipCppV);
}


extern "C" {static void assign_Qt_ItemFlags(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_ItemFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::ItemFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::ItemFlags *>(sipSrc);
}


extern "C" {static void *array_Qt_ItemFlags(SIP_SSIZE_T);}
static void *array_Qt_ItemFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::ItemFlags[sipNrElem];
}


extern "C" {static void *copy_Qt_ItemFlags(const void *, SIP_SSIZE_T);}
static void *copy_Qt_ItemFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::ItemFlags(reinterpret_cast<const  ::Qt::ItemFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_ItemFlags(sipSimpleWrapper *);}
static void dealloc_Qt_ItemFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_ItemFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_ItemFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_ItemFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::ItemFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::ItemFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::ItemFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::ItemFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_ItemFlags, &a0, &a0State))
        {
            sipCpp = new  ::Qt::ItemFlags(*a0);
            sipReleaseType(const_cast< ::Qt::ItemFlags *>(a0),sipType_Qt_ItemFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_ItemFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_ItemFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::ItemFlags **sipCppPtr = reinterpret_cast< ::Qt::ItemFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::ItemFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ItemFlag)) ||
            sipCanConvertToType(sipPy, sipType_Qt_ItemFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ItemFlag)))
{
    *sipCppPtr = new Qt::ItemFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::ItemFlags *>(sipConvertToType(sipPy, sipType_Qt_ItemFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 94015 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_ItemFlags[] = {
    {(void *)slot_Qt_ItemFlags___hash__, hash_slot},
    {(void *)slot_Qt_ItemFlags___bool__, bool_slot},
    {(void *)slot_Qt_ItemFlags___ne__, ne_slot},
    {(void *)slot_Qt_ItemFlags___eq__, eq_slot},
    {(void *)slot_Qt_ItemFlags___ixor__, ixor_slot},
    {(void *)slot_Qt_ItemFlags___xor__, xor_slot},
    {(void *)slot_Qt_ItemFlags___ior__, ior_slot},
    {(void *)slot_Qt_ItemFlags___or__, or_slot},
    {(void *)slot_Qt_ItemFlags___iand__, iand_slot},
    {(void *)slot_Qt_ItemFlags___and__, and_slot},
    {(void *)slot_Qt_ItemFlags___invert__, invert_slot},
    {(void *)slot_Qt_ItemFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_ItemFlags, "\1Qt.ItemFlags()\n"
"Qt.ItemFlags(Union[Qt.ItemFlags, Qt.ItemFlag])\n"
"Qt.ItemFlags(Qt.ItemFlags)");


static pyqt5ClassPluginDef plugin_Qt_ItemFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_ItemFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__ItemFlags,
        {SIP_NULLPTR},
        &plugin_Qt_ItemFlags
    },
    {
        sipNameNr_ItemFlags,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_ItemFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_ItemFlags,
    init_type_Qt_ItemFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_ItemFlags,
    assign_Qt_ItemFlags,
    array_Qt_ItemFlags,
    copy_Qt_ItemFlags,
    release_Qt_ItemFlags,
    SIP_NULLPTR,
    convertTo_Qt_ItemFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 94103 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 94107 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_DropActions___hash__(PyObject *);}
static long slot_Qt_DropActions___hash__(PyObject *sipSelf)
{
     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::DropActions::Int();
#line 94125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_DropActions___bool__(PyObject *);}
static int slot_Qt_DropActions___bool__(PyObject *sipSelf)
{
     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::DropActions::Int() != 0);
#line 94150 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_DropActions___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropActions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::DropActions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_DropActions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::DropActions::Int() != a0->operator Qt::DropActions::Int());
#line 94180 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::DropActions *>(a0),sipType_Qt_DropActions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_DropActions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_DropActions___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropActions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::DropActions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_DropActions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::DropActions::Int() == a0->operator Qt::DropActions::Int());
#line 94216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::DropActions *>(a0),sipType_Qt_DropActions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_DropActions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_DropActions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropActions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_DropActions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::DropActions(*sipCpp ^ a0);
#line 94255 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_DropActions___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropActions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DropActions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_DropActions, &a0, &a0State, &a1))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_DropActions___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropActions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_DropActions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::DropActions(*sipCpp | a0);
#line 94327 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_DropActions___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropActions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DropActions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_DropActions, &a0, &a0State, &a1))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_DropActions___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropActions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_DropActions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::DropActions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_DropActions___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DropActions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DropActions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_DropActions, &a0, &a0State, &a1))
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_DropActions___invert__(PyObject *);}
static PyObject *slot_Qt_DropActions___invert__(PyObject *sipSelf)
{
     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::DropActions*sipRes;

            sipRes = new  ::Qt::DropActions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_DropActions___int__(PyObject *);}
static PyObject *slot_Qt_DropActions___int__(PyObject *sipSelf)
{
     ::Qt::DropActions *sipCpp = reinterpret_cast< ::Qt::DropActions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DropActions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_DropActions(void *, int);}
static void release_Qt_DropActions(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::DropActions *>(sipCppV);
}


extern "C" {static void assign_Qt_DropActions(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_DropActions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::DropActions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::DropActions *>(sipSrc);
}


extern "C" {static void *array_Qt_DropActions(SIP_SSIZE_T);}
static void *array_Qt_DropActions(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::DropActions[sipNrElem];
}


extern "C" {static void *copy_Qt_DropActions(const void *, SIP_SSIZE_T);}
static void *copy_Qt_DropActions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::DropActions(reinterpret_cast<const  ::Qt::DropActions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_DropActions(sipSimpleWrapper *);}
static void dealloc_Qt_DropActions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_DropActions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_DropActions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_DropActions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::DropActions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::DropActions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::DropActions(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::DropActions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_DropActions, &a0, &a0State))
        {
            sipCpp = new  ::Qt::DropActions(*a0);
            sipReleaseType(const_cast< ::Qt::DropActions *>(a0),sipType_Qt_DropActions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_DropActions(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_DropActions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::DropActions **sipCppPtr = reinterpret_cast< ::Qt::DropActions **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::DropActions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_DropAction)) ||
            sipCanConvertToType(sipPy, sipType_Qt_DropActions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_DropAction)))
{
    *sipCppPtr = new Qt::DropActions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::DropActions *>(sipConvertToType(sipPy, sipType_Qt_DropActions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 94595 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_DropActions[] = {
    {(void *)slot_Qt_DropActions___hash__, hash_slot},
    {(void *)slot_Qt_DropActions___bool__, bool_slot},
    {(void *)slot_Qt_DropActions___ne__, ne_slot},
    {(void *)slot_Qt_DropActions___eq__, eq_slot},
    {(void *)slot_Qt_DropActions___ixor__, ixor_slot},
    {(void *)slot_Qt_DropActions___xor__, xor_slot},
    {(void *)slot_Qt_DropActions___ior__, ior_slot},
    {(void *)slot_Qt_DropActions___or__, or_slot},
    {(void *)slot_Qt_DropActions___iand__, iand_slot},
    {(void *)slot_Qt_DropActions___and__, and_slot},
    {(void *)slot_Qt_DropActions___invert__, invert_slot},
    {(void *)slot_Qt_DropActions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_DropActions, "\1Qt.DropActions()\n"
"Qt.DropActions(Union[Qt.DropActions, Qt.DropAction])\n"
"Qt.DropActions(Qt.DropActions)");


static pyqt5ClassPluginDef plugin_Qt_DropActions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_DropActions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__DropActions,
        {SIP_NULLPTR},
        &plugin_Qt_DropActions
    },
    {
        sipNameNr_DropActions,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_DropActions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_DropActions,
    init_type_Qt_DropActions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_DropActions,
    assign_Qt_DropActions,
    array_Qt_DropActions,
    copy_Qt_DropActions,
    release_Qt_DropActions,
    SIP_NULLPTR,
    convertTo_Qt_DropActions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 94683 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 94687 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_InputMethodQueries___hash__(PyObject *);}
static long slot_Qt_InputMethodQueries___hash__(PyObject *sipSelf)
{
     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::InputMethodQueries::Int();
#line 94705 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_InputMethodQueries___bool__(PyObject *);}
static int slot_Qt_InputMethodQueries___bool__(PyObject *sipSelf)
{
     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::InputMethodQueries::Int() != 0);
#line 94730 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::InputMethodQueries* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::InputMethodQueries::Int() != a0->operator Qt::InputMethodQueries::Int());
#line 94760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::InputMethodQueries *>(a0),sipType_Qt_InputMethodQueries,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_InputMethodQueries, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::InputMethodQueries* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::InputMethodQueries::Int() == a0->operator Qt::InputMethodQueries::Int());
#line 94796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::InputMethodQueries *>(a0),sipType_Qt_InputMethodQueries,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_InputMethodQueries, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_InputMethodQueries)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::InputMethodQueries(*sipCpp ^ a0);
#line 94835 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQueries* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_InputMethodQueries, &a0, &a0State, &a1))
        {
             ::Qt::InputMethodQueries*sipRes;

            sipRes = new  ::Qt::InputMethodQueries((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodQueries,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_InputMethodQueries)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::InputMethodQueries(*sipCpp | a0);
#line 94907 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQueries* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_InputMethodQueries, &a0, &a0State, &a1))
        {
             ::Qt::InputMethodQueries*sipRes;

            sipRes = new  ::Qt::InputMethodQueries((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodQueries,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_InputMethodQueries)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::InputMethodQueries::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::InputMethodQueries* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_InputMethodQueries, &a0, &a0State, &a1))
        {
             ::Qt::InputMethodQueries*sipRes;

            sipRes = new  ::Qt::InputMethodQueries((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodQueries,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___invert__(PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___invert__(PyObject *sipSelf)
{
     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::InputMethodQueries*sipRes;

            sipRes = new  ::Qt::InputMethodQueries(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodQueries,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_InputMethodQueries___int__(PyObject *);}
static PyObject *slot_Qt_InputMethodQueries___int__(PyObject *sipSelf)
{
     ::Qt::InputMethodQueries *sipCpp = reinterpret_cast< ::Qt::InputMethodQueries *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_InputMethodQueries));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_InputMethodQueries(void *, int);}
static void release_Qt_InputMethodQueries(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::InputMethodQueries *>(sipCppV);
}


extern "C" {static void assign_Qt_InputMethodQueries(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_InputMethodQueries(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::InputMethodQueries *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::InputMethodQueries *>(sipSrc);
}


extern "C" {static void *array_Qt_InputMethodQueries(SIP_SSIZE_T);}
static void *array_Qt_InputMethodQueries(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::InputMethodQueries[sipNrElem];
}


extern "C" {static void *copy_Qt_InputMethodQueries(const void *, SIP_SSIZE_T);}
static void *copy_Qt_InputMethodQueries(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::InputMethodQueries(reinterpret_cast<const  ::Qt::InputMethodQueries *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_InputMethodQueries(sipSimpleWrapper *);}
static void dealloc_Qt_InputMethodQueries(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_InputMethodQueries(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_InputMethodQueries(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_InputMethodQueries(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::InputMethodQueries *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::InputMethodQueries();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::InputMethodQueries(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::InputMethodQueries* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            sipCpp = new  ::Qt::InputMethodQueries(*a0);
            sipReleaseType(const_cast< ::Qt::InputMethodQueries *>(a0),sipType_Qt_InputMethodQueries,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_InputMethodQueries(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_InputMethodQueries(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::InputMethodQueries **sipCppPtr = reinterpret_cast< ::Qt::InputMethodQueries **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::InputMethodQueries is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_InputMethodQuery)) ||
            sipCanConvertToType(sipPy, sipType_Qt_InputMethodQueries, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_InputMethodQuery)))
{
    *sipCppPtr = new Qt::InputMethodQueries(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::InputMethodQueries *>(sipConvertToType(sipPy, sipType_Qt_InputMethodQueries, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 95175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_InputMethodQueries[] = {
    {(void *)slot_Qt_InputMethodQueries___hash__, hash_slot},
    {(void *)slot_Qt_InputMethodQueries___bool__, bool_slot},
    {(void *)slot_Qt_InputMethodQueries___ne__, ne_slot},
    {(void *)slot_Qt_InputMethodQueries___eq__, eq_slot},
    {(void *)slot_Qt_InputMethodQueries___ixor__, ixor_slot},
    {(void *)slot_Qt_InputMethodQueries___xor__, xor_slot},
    {(void *)slot_Qt_InputMethodQueries___ior__, ior_slot},
    {(void *)slot_Qt_InputMethodQueries___or__, or_slot},
    {(void *)slot_Qt_InputMethodQueries___iand__, iand_slot},
    {(void *)slot_Qt_InputMethodQueries___and__, and_slot},
    {(void *)slot_Qt_InputMethodQueries___invert__, invert_slot},
    {(void *)slot_Qt_InputMethodQueries___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_InputMethodQueries, "\1Qt.InputMethodQueries()\n"
"Qt.InputMethodQueries(Union[Qt.InputMethodQueries, Qt.InputMethodQuery])\n"
"Qt.InputMethodQueries(Qt.InputMethodQueries)");


static pyqt5ClassPluginDef plugin_Qt_InputMethodQueries = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_InputMethodQueries = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__InputMethodQueries,
        {SIP_NULLPTR},
        &plugin_Qt_InputMethodQueries
    },
    {
        sipNameNr_InputMethodQueries,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_InputMethodQueries,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_InputMethodQueries,
    init_type_Qt_InputMethodQueries,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_InputMethodQueries,
    assign_Qt_InputMethodQueries,
    array_Qt_InputMethodQueries,
    copy_Qt_InputMethodQueries,
    release_Qt_InputMethodQueries,
    SIP_NULLPTR,
    convertTo_Qt_InputMethodQueries,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_ToolBarAreas___hash__(PyObject *);}
static long slot_Qt_ToolBarAreas___hash__(PyObject *sipSelf)
{
     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::ToolBarAreas::Int();
#line 95285 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_ToolBarAreas___bool__(PyObject *);}
static int slot_Qt_ToolBarAreas___bool__(PyObject *sipSelf)
{
     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ToolBarAreas::Int() != 0);
#line 95310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ToolBarAreas* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ToolBarAreas, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ToolBarAreas::Int() != a0->operator Qt::ToolBarAreas::Int());
#line 95340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ToolBarAreas *>(a0),sipType_Qt_ToolBarAreas,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_ToolBarAreas, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ToolBarAreas* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ToolBarAreas, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ToolBarAreas::Int() == a0->operator Qt::ToolBarAreas::Int());
#line 95376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ToolBarAreas *>(a0),sipType_Qt_ToolBarAreas,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_ToolBarAreas, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ToolBarAreas)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ToolBarAreas(*sipCpp ^ a0);
#line 95415 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ToolBarAreas* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ToolBarAreas, &a0, &a0State, &a1))
        {
             ::Qt::ToolBarAreas*sipRes;

            sipRes = new  ::Qt::ToolBarAreas((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_ToolBarAreas,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ToolBarAreas,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ToolBarAreas)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ToolBarAreas(*sipCpp | a0);
#line 95487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ToolBarAreas* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ToolBarAreas, &a0, &a0State, &a1))
        {
             ::Qt::ToolBarAreas*sipRes;

            sipRes = new  ::Qt::ToolBarAreas((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_ToolBarAreas,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ToolBarAreas,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ToolBarAreas)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::ToolBarAreas::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ToolBarAreas* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ToolBarAreas, &a0, &a0State, &a1))
        {
             ::Qt::ToolBarAreas*sipRes;

            sipRes = new  ::Qt::ToolBarAreas((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_ToolBarAreas,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ToolBarAreas,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___invert__(PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___invert__(PyObject *sipSelf)
{
     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::ToolBarAreas*sipRes;

            sipRes = new  ::Qt::ToolBarAreas(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_ToolBarAreas,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ToolBarAreas___int__(PyObject *);}
static PyObject *slot_Qt_ToolBarAreas___int__(PyObject *sipSelf)
{
     ::Qt::ToolBarAreas *sipCpp = reinterpret_cast< ::Qt::ToolBarAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ToolBarAreas));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_ToolBarAreas(void *, int);}
static void release_Qt_ToolBarAreas(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::ToolBarAreas *>(sipCppV);
}


extern "C" {static void assign_Qt_ToolBarAreas(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_ToolBarAreas(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::ToolBarAreas *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::ToolBarAreas *>(sipSrc);
}


extern "C" {static void *array_Qt_ToolBarAreas(SIP_SSIZE_T);}
static void *array_Qt_ToolBarAreas(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::ToolBarAreas[sipNrElem];
}


extern "C" {static void *copy_Qt_ToolBarAreas(const void *, SIP_SSIZE_T);}
static void *copy_Qt_ToolBarAreas(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::ToolBarAreas(reinterpret_cast<const  ::Qt::ToolBarAreas *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_ToolBarAreas(sipSimpleWrapper *);}
static void dealloc_Qt_ToolBarAreas(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_ToolBarAreas(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_ToolBarAreas(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_ToolBarAreas(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::ToolBarAreas *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::ToolBarAreas();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::ToolBarAreas(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::ToolBarAreas* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_ToolBarAreas, &a0, &a0State))
        {
            sipCpp = new  ::Qt::ToolBarAreas(*a0);
            sipReleaseType(const_cast< ::Qt::ToolBarAreas *>(a0),sipType_Qt_ToolBarAreas,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_ToolBarAreas(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_ToolBarAreas(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::ToolBarAreas **sipCppPtr = reinterpret_cast< ::Qt::ToolBarAreas **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::ToolBarAreas is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ToolBarArea)) ||
            sipCanConvertToType(sipPy, sipType_Qt_ToolBarAreas, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ToolBarArea)))
{
    *sipCppPtr = new Qt::ToolBarAreas(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::ToolBarAreas *>(sipConvertToType(sipPy, sipType_Qt_ToolBarAreas, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 95755 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_ToolBarAreas[] = {
    {(void *)slot_Qt_ToolBarAreas___hash__, hash_slot},
    {(void *)slot_Qt_ToolBarAreas___bool__, bool_slot},
    {(void *)slot_Qt_ToolBarAreas___ne__, ne_slot},
    {(void *)slot_Qt_ToolBarAreas___eq__, eq_slot},
    {(void *)slot_Qt_ToolBarAreas___ixor__, ixor_slot},
    {(void *)slot_Qt_ToolBarAreas___xor__, xor_slot},
    {(void *)slot_Qt_ToolBarAreas___ior__, ior_slot},
    {(void *)slot_Qt_ToolBarAreas___or__, or_slot},
    {(void *)slot_Qt_ToolBarAreas___iand__, iand_slot},
    {(void *)slot_Qt_ToolBarAreas___and__, and_slot},
    {(void *)slot_Qt_ToolBarAreas___invert__, invert_slot},
    {(void *)slot_Qt_ToolBarAreas___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_ToolBarAreas, "\1Qt.ToolBarAreas()\n"
"Qt.ToolBarAreas(Union[Qt.ToolBarAreas, Qt.ToolBarArea])\n"
"Qt.ToolBarAreas(Qt.ToolBarAreas)");


static pyqt5ClassPluginDef plugin_Qt_ToolBarAreas = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_ToolBarAreas = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__ToolBarAreas,
        {SIP_NULLPTR},
        &plugin_Qt_ToolBarAreas
    },
    {
        sipNameNr_ToolBarAreas,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_ToolBarAreas,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_ToolBarAreas,
    init_type_Qt_ToolBarAreas,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_ToolBarAreas,
    assign_Qt_ToolBarAreas,
    array_Qt_ToolBarAreas,
    copy_Qt_ToolBarAreas,
    release_Qt_ToolBarAreas,
    SIP_NULLPTR,
    convertTo_Qt_ToolBarAreas,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95843 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 95847 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_DockWidgetAreas___hash__(PyObject *);}
static long slot_Qt_DockWidgetAreas___hash__(PyObject *sipSelf)
{
     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::DockWidgetAreas::Int();
#line 95865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_DockWidgetAreas___bool__(PyObject *);}
static int slot_Qt_DockWidgetAreas___bool__(PyObject *sipSelf)
{
     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::DockWidgetAreas::Int() != 0);
#line 95890 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::DockWidgetAreas* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_DockWidgetAreas, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::DockWidgetAreas::Int() != a0->operator Qt::DockWidgetAreas::Int());
#line 95920 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::DockWidgetAreas *>(a0),sipType_Qt_DockWidgetAreas,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_DockWidgetAreas, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::DockWidgetAreas* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_DockWidgetAreas, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::DockWidgetAreas::Int() == a0->operator Qt::DockWidgetAreas::Int());
#line 95956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::DockWidgetAreas *>(a0),sipType_Qt_DockWidgetAreas,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_DockWidgetAreas, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_DockWidgetAreas)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::DockWidgetAreas(*sipCpp ^ a0);
#line 95995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DockWidgetAreas* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_DockWidgetAreas, &a0, &a0State, &a1))
        {
             ::Qt::DockWidgetAreas*sipRes;

            sipRes = new  ::Qt::DockWidgetAreas((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_DockWidgetAreas,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DockWidgetAreas,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_DockWidgetAreas)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::DockWidgetAreas(*sipCpp | a0);
#line 96067 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DockWidgetAreas* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_DockWidgetAreas, &a0, &a0State, &a1))
        {
             ::Qt::DockWidgetAreas*sipRes;

            sipRes = new  ::Qt::DockWidgetAreas((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_DockWidgetAreas,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DockWidgetAreas,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_DockWidgetAreas)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::DockWidgetAreas::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::DockWidgetAreas* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_DockWidgetAreas, &a0, &a0State, &a1))
        {
             ::Qt::DockWidgetAreas*sipRes;

            sipRes = new  ::Qt::DockWidgetAreas((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_DockWidgetAreas,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DockWidgetAreas,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___invert__(PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___invert__(PyObject *sipSelf)
{
     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::DockWidgetAreas*sipRes;

            sipRes = new  ::Qt::DockWidgetAreas(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_DockWidgetAreas,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_DockWidgetAreas___int__(PyObject *);}
static PyObject *slot_Qt_DockWidgetAreas___int__(PyObject *sipSelf)
{
     ::Qt::DockWidgetAreas *sipCpp = reinterpret_cast< ::Qt::DockWidgetAreas *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_DockWidgetAreas));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_DockWidgetAreas(void *, int);}
static void release_Qt_DockWidgetAreas(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::DockWidgetAreas *>(sipCppV);
}


extern "C" {static void assign_Qt_DockWidgetAreas(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_DockWidgetAreas(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::DockWidgetAreas *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::DockWidgetAreas *>(sipSrc);
}


extern "C" {static void *array_Qt_DockWidgetAreas(SIP_SSIZE_T);}
static void *array_Qt_DockWidgetAreas(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::DockWidgetAreas[sipNrElem];
}


extern "C" {static void *copy_Qt_DockWidgetAreas(const void *, SIP_SSIZE_T);}
static void *copy_Qt_DockWidgetAreas(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::DockWidgetAreas(reinterpret_cast<const  ::Qt::DockWidgetAreas *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_DockWidgetAreas(sipSimpleWrapper *);}
static void dealloc_Qt_DockWidgetAreas(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_DockWidgetAreas(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_DockWidgetAreas(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_DockWidgetAreas(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::DockWidgetAreas *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::DockWidgetAreas();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::DockWidgetAreas(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::DockWidgetAreas* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_DockWidgetAreas, &a0, &a0State))
        {
            sipCpp = new  ::Qt::DockWidgetAreas(*a0);
            sipReleaseType(const_cast< ::Qt::DockWidgetAreas *>(a0),sipType_Qt_DockWidgetAreas,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_DockWidgetAreas(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_DockWidgetAreas(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::DockWidgetAreas **sipCppPtr = reinterpret_cast< ::Qt::DockWidgetAreas **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::DockWidgetAreas is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_DockWidgetArea)) ||
            sipCanConvertToType(sipPy, sipType_Qt_DockWidgetAreas, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_DockWidgetArea)))
{
    *sipCppPtr = new Qt::DockWidgetAreas(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::DockWidgetAreas *>(sipConvertToType(sipPy, sipType_Qt_DockWidgetAreas, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 96335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_DockWidgetAreas[] = {
    {(void *)slot_Qt_DockWidgetAreas___hash__, hash_slot},
    {(void *)slot_Qt_DockWidgetAreas___bool__, bool_slot},
    {(void *)slot_Qt_DockWidgetAreas___ne__, ne_slot},
    {(void *)slot_Qt_DockWidgetAreas___eq__, eq_slot},
    {(void *)slot_Qt_DockWidgetAreas___ixor__, ixor_slot},
    {(void *)slot_Qt_DockWidgetAreas___xor__, xor_slot},
    {(void *)slot_Qt_DockWidgetAreas___ior__, ior_slot},
    {(void *)slot_Qt_DockWidgetAreas___or__, or_slot},
    {(void *)slot_Qt_DockWidgetAreas___iand__, iand_slot},
    {(void *)slot_Qt_DockWidgetAreas___and__, and_slot},
    {(void *)slot_Qt_DockWidgetAreas___invert__, invert_slot},
    {(void *)slot_Qt_DockWidgetAreas___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_DockWidgetAreas, "\1Qt.DockWidgetAreas()\n"
"Qt.DockWidgetAreas(Union[Qt.DockWidgetAreas, Qt.DockWidgetArea])\n"
"Qt.DockWidgetAreas(Qt.DockWidgetAreas)");


static pyqt5ClassPluginDef plugin_Qt_DockWidgetAreas = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_DockWidgetAreas = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__DockWidgetAreas,
        {SIP_NULLPTR},
        &plugin_Qt_DockWidgetAreas
    },
    {
        sipNameNr_DockWidgetAreas,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_DockWidgetAreas,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_DockWidgetAreas,
    init_type_Qt_DockWidgetAreas,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_DockWidgetAreas,
    assign_Qt_DockWidgetAreas,
    array_Qt_DockWidgetAreas,
    copy_Qt_DockWidgetAreas,
    release_Qt_DockWidgetAreas,
    SIP_NULLPTR,
    convertTo_Qt_DockWidgetAreas,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96427 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_ImageConversionFlags___hash__(PyObject *);}
static long slot_Qt_ImageConversionFlags___hash__(PyObject *sipSelf)
{
     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::ImageConversionFlags::Int();
#line 96445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_ImageConversionFlags___bool__(PyObject *);}
static int slot_Qt_ImageConversionFlags___bool__(PyObject *sipSelf)
{
     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ImageConversionFlags::Int() != 0);
#line 96470 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ImageConversionFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ImageConversionFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ImageConversionFlags::Int() != a0->operator Qt::ImageConversionFlags::Int());
#line 96500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ImageConversionFlags *>(a0),sipType_Qt_ImageConversionFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_ImageConversionFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::ImageConversionFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_ImageConversionFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::ImageConversionFlags::Int() == a0->operator Qt::ImageConversionFlags::Int());
#line 96536 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::ImageConversionFlags *>(a0),sipType_Qt_ImageConversionFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_ImageConversionFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ImageConversionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ImageConversionFlags(*sipCpp ^ a0);
#line 96575 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ImageConversionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ImageConversionFlags, &a0, &a0State, &a1))
        {
             ::Qt::ImageConversionFlags*sipRes;

            sipRes = new  ::Qt::ImageConversionFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_ImageConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ImageConversionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ImageConversionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::ImageConversionFlags(*sipCpp | a0);
#line 96647 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ImageConversionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ImageConversionFlags, &a0, &a0State, &a1))
        {
             ::Qt::ImageConversionFlags*sipRes;

            sipRes = new  ::Qt::ImageConversionFlags((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_ImageConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ImageConversionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_ImageConversionFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::ImageConversionFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::ImageConversionFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_ImageConversionFlags, &a0, &a0State, &a1))
        {
             ::Qt::ImageConversionFlags*sipRes;

            sipRes = new  ::Qt::ImageConversionFlags((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_ImageConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ImageConversionFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___invert__(PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___invert__(PyObject *sipSelf)
{
     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::ImageConversionFlags*sipRes;

            sipRes = new  ::Qt::ImageConversionFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_ImageConversionFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_ImageConversionFlags___int__(PyObject *);}
static PyObject *slot_Qt_ImageConversionFlags___int__(PyObject *sipSelf)
{
     ::Qt::ImageConversionFlags *sipCpp = reinterpret_cast< ::Qt::ImageConversionFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_ImageConversionFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_ImageConversionFlags(void *, int);}
static void release_Qt_ImageConversionFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::ImageConversionFlags *>(sipCppV);
}


extern "C" {static void assign_Qt_ImageConversionFlags(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_ImageConversionFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::ImageConversionFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::ImageConversionFlags *>(sipSrc);
}


extern "C" {static void *array_Qt_ImageConversionFlags(SIP_SSIZE_T);}
static void *array_Qt_ImageConversionFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::ImageConversionFlags[sipNrElem];
}


extern "C" {static void *copy_Qt_ImageConversionFlags(const void *, SIP_SSIZE_T);}
static void *copy_Qt_ImageConversionFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::ImageConversionFlags(reinterpret_cast<const  ::Qt::ImageConversionFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_ImageConversionFlags(sipSimpleWrapper *);}
static void dealloc_Qt_ImageConversionFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_ImageConversionFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_ImageConversionFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_ImageConversionFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::ImageConversionFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::ImageConversionFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::ImageConversionFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::ImageConversionFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_ImageConversionFlags, &a0, &a0State))
        {
            sipCpp = new  ::Qt::ImageConversionFlags(*a0);
            sipReleaseType(const_cast< ::Qt::ImageConversionFlags *>(a0),sipType_Qt_ImageConversionFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_ImageConversionFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_ImageConversionFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::ImageConversionFlags **sipCppPtr = reinterpret_cast< ::Qt::ImageConversionFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::ImageConversionFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ImageConversionFlag)) ||
            sipCanConvertToType(sipPy, sipType_Qt_ImageConversionFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_ImageConversionFlag)))
{
    *sipCppPtr = new Qt::ImageConversionFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::ImageConversionFlags *>(sipConvertToType(sipPy, sipType_Qt_ImageConversionFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 96915 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_ImageConversionFlags[] = {
    {(void *)slot_Qt_ImageConversionFlags___hash__, hash_slot},
    {(void *)slot_Qt_ImageConversionFlags___bool__, bool_slot},
    {(void *)slot_Qt_ImageConversionFlags___ne__, ne_slot},
    {(void *)slot_Qt_ImageConversionFlags___eq__, eq_slot},
    {(void *)slot_Qt_ImageConversionFlags___ixor__, ixor_slot},
    {(void *)slot_Qt_ImageConversionFlags___xor__, xor_slot},
    {(void *)slot_Qt_ImageConversionFlags___ior__, ior_slot},
    {(void *)slot_Qt_ImageConversionFlags___or__, or_slot},
    {(void *)slot_Qt_ImageConversionFlags___iand__, iand_slot},
    {(void *)slot_Qt_ImageConversionFlags___and__, and_slot},
    {(void *)slot_Qt_ImageConversionFlags___invert__, invert_slot},
    {(void *)slot_Qt_ImageConversionFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_ImageConversionFlags, "\1Qt.ImageConversionFlags()\n"
"Qt.ImageConversionFlags(Union[Qt.ImageConversionFlags, Qt.ImageConversionFlag])\n"
"Qt.ImageConversionFlags(Qt.ImageConversionFlags)");


static pyqt5ClassPluginDef plugin_Qt_ImageConversionFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_ImageConversionFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__ImageConversionFlags,
        {SIP_NULLPTR},
        &plugin_Qt_ImageConversionFlags
    },
    {
        sipNameNr_ImageConversionFlags,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_ImageConversionFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_ImageConversionFlags,
    init_type_Qt_ImageConversionFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_ImageConversionFlags,
    assign_Qt_ImageConversionFlags,
    array_Qt_ImageConversionFlags,
    copy_Qt_ImageConversionFlags,
    release_Qt_ImageConversionFlags,
    SIP_NULLPTR,
    convertTo_Qt_ImageConversionFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 97003 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 97007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_WindowStates___hash__(PyObject *);}
static long slot_Qt_WindowStates___hash__(PyObject *sipSelf)
{
     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::WindowStates::Int();
#line 97025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_WindowStates___bool__(PyObject *);}
static int slot_Qt_WindowStates___bool__(PyObject *sipSelf)
{
     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::WindowStates::Int() != 0);
#line 97050 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_WindowStates___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowStates___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::WindowStates* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_WindowStates, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::WindowStates::Int() != a0->operator Qt::WindowStates::Int());
#line 97080 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::WindowStates *>(a0),sipType_Qt_WindowStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_WindowStates, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_WindowStates___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowStates___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::WindowStates* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_WindowStates, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::WindowStates::Int() == a0->operator Qt::WindowStates::Int());
#line 97116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::WindowStates *>(a0),sipType_Qt_WindowStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_WindowStates, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_WindowStates___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowStates___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::WindowStates(*sipCpp ^ a0);
#line 97155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_WindowStates___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowStates___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_WindowStates, &a0, &a0State, &a1))
        {
             ::Qt::WindowStates*sipRes;

            sipRes = new  ::Qt::WindowStates((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowStates___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowStates___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::WindowStates(*sipCpp | a0);
#line 97227 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_WindowStates___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowStates___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_WindowStates, &a0, &a0State, &a1))
        {
             ::Qt::WindowStates*sipRes;

            sipRes = new  ::Qt::WindowStates((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowStates___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowStates___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::WindowStates::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_WindowStates___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowStates___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowStates* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_WindowStates, &a0, &a0State, &a1))
        {
             ::Qt::WindowStates*sipRes;

            sipRes = new  ::Qt::WindowStates((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowStates___invert__(PyObject *);}
static PyObject *slot_Qt_WindowStates___invert__(PyObject *sipSelf)
{
     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::WindowStates*sipRes;

            sipRes = new  ::Qt::WindowStates(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_WindowStates___int__(PyObject *);}
static PyObject *slot_Qt_WindowStates___int__(PyObject *sipSelf)
{
     ::Qt::WindowStates *sipCpp = reinterpret_cast< ::Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_WindowStates(void *, int);}
static void release_Qt_WindowStates(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::WindowStates *>(sipCppV);
}


extern "C" {static void assign_Qt_WindowStates(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_WindowStates(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::WindowStates *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::WindowStates *>(sipSrc);
}


extern "C" {static void *array_Qt_WindowStates(SIP_SSIZE_T);}
static void *array_Qt_WindowStates(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::WindowStates[sipNrElem];
}


extern "C" {static void *copy_Qt_WindowStates(const void *, SIP_SSIZE_T);}
static void *copy_Qt_WindowStates(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::WindowStates(reinterpret_cast<const  ::Qt::WindowStates *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_WindowStates(sipSimpleWrapper *);}
static void dealloc_Qt_WindowStates(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_WindowStates(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_WindowStates(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_WindowStates(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::WindowStates *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::WindowStates();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::WindowStates(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::WindowStates* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_WindowStates, &a0, &a0State))
        {
            sipCpp = new  ::Qt::WindowStates(*a0);
            sipReleaseType(const_cast< ::Qt::WindowStates *>(a0),sipType_Qt_WindowStates,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_WindowStates(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_WindowStates(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::WindowStates **sipCppPtr = reinterpret_cast< ::Qt::WindowStates **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::WindowStates is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_WindowState)) ||
            sipCanConvertToType(sipPy, sipType_Qt_WindowStates, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_WindowState)))
{
    *sipCppPtr = new Qt::WindowStates(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::WindowStates *>(sipConvertToType(sipPy, sipType_Qt_WindowStates, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 97495 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_WindowStates[] = {
    {(void *)slot_Qt_WindowStates___hash__, hash_slot},
    {(void *)slot_Qt_WindowStates___bool__, bool_slot},
    {(void *)slot_Qt_WindowStates___ne__, ne_slot},
    {(void *)slot_Qt_WindowStates___eq__, eq_slot},
    {(void *)slot_Qt_WindowStates___ixor__, ixor_slot},
    {(void *)slot_Qt_WindowStates___xor__, xor_slot},
    {(void *)slot_Qt_WindowStates___ior__, ior_slot},
    {(void *)slot_Qt_WindowStates___or__, or_slot},
    {(void *)slot_Qt_WindowStates___iand__, iand_slot},
    {(void *)slot_Qt_WindowStates___and__, and_slot},
    {(void *)slot_Qt_WindowStates___invert__, invert_slot},
    {(void *)slot_Qt_WindowStates___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_WindowStates, "\1Qt.WindowStates()\n"
"Qt.WindowStates(Union[Qt.WindowStates, Qt.WindowState])\n"
"Qt.WindowStates(Qt.WindowStates)");


static pyqt5ClassPluginDef plugin_Qt_WindowStates = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_WindowStates = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__WindowStates,
        {SIP_NULLPTR},
        &plugin_Qt_WindowStates
    },
    {
        sipNameNr_WindowStates,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_WindowStates,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_WindowStates,
    init_type_Qt_WindowStates,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_WindowStates,
    assign_Qt_WindowStates,
    array_Qt_WindowStates,
    copy_Qt_WindowStates,
    release_Qt_WindowStates,
    SIP_NULLPTR,
    convertTo_Qt_WindowStates,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 97583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 97587 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_WindowFlags___hash__(PyObject *);}
static long slot_Qt_WindowFlags___hash__(PyObject *sipSelf)
{
     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::WindowFlags::Int();
#line 97605 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_WindowFlags___bool__(PyObject *);}
static int slot_Qt_WindowFlags___bool__(PyObject *sipSelf)
{
     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::WindowFlags::Int() != 0);
#line 97630 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_WindowFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::WindowFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_WindowFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::WindowFlags::Int() != a0->operator Qt::WindowFlags::Int());
#line 97660 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::WindowFlags *>(a0),sipType_Qt_WindowFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_WindowFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_WindowFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::WindowFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_WindowFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::WindowFlags::Int() == a0->operator Qt::WindowFlags::Int());
#line 97696 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::WindowFlags *>(a0),sipType_Qt_WindowFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_WindowFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_WindowFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::WindowFlags(*sipCpp ^ a0);
#line 97735 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_WindowFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_WindowFlags, &a0, &a0State, &a1))
        {
             ::Qt::WindowFlags*sipRes;

            sipRes = new  ::Qt::WindowFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::WindowFlags(*sipCpp | a0);
#line 97807 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_WindowFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_WindowFlags, &a0, &a0State, &a1))
        {
             ::Qt::WindowFlags*sipRes;

            sipRes = new  ::Qt::WindowFlags((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::WindowFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_WindowFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_WindowFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::WindowFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_WindowFlags, &a0, &a0State, &a1))
        {
             ::Qt::WindowFlags*sipRes;

            sipRes = new  ::Qt::WindowFlags((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowFlags___invert__(PyObject *);}
static PyObject *slot_Qt_WindowFlags___invert__(PyObject *sipSelf)
{
     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::WindowFlags*sipRes;

            sipRes = new  ::Qt::WindowFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_WindowFlags___int__(PyObject *);}
static PyObject *slot_Qt_WindowFlags___int__(PyObject *sipSelf)
{
     ::Qt::WindowFlags *sipCpp = reinterpret_cast< ::Qt::WindowFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_WindowFlags(void *, int);}
static void release_Qt_WindowFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::WindowFlags *>(sipCppV);
}


extern "C" {static void assign_Qt_WindowFlags(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_WindowFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::WindowFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::WindowFlags *>(sipSrc);
}


extern "C" {static void *array_Qt_WindowFlags(SIP_SSIZE_T);}
static void *array_Qt_WindowFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::WindowFlags[sipNrElem];
}


extern "C" {static void *copy_Qt_WindowFlags(const void *, SIP_SSIZE_T);}
static void *copy_Qt_WindowFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::WindowFlags(reinterpret_cast<const  ::Qt::WindowFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_WindowFlags(sipSimpleWrapper *);}
static void dealloc_Qt_WindowFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_WindowFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_WindowFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_WindowFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::WindowFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::WindowFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::WindowFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::WindowFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_WindowFlags, &a0, &a0State))
        {
            sipCpp = new  ::Qt::WindowFlags(*a0);
            sipReleaseType(const_cast< ::Qt::WindowFlags *>(a0),sipType_Qt_WindowFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_WindowFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_WindowFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::WindowFlags **sipCppPtr = reinterpret_cast< ::Qt::WindowFlags **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::WindowFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_WindowType)) ||
            sipCanConvertToType(sipPy, sipType_Qt_WindowFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_WindowType)))
{
    *sipCppPtr = new Qt::WindowFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::WindowFlags *>(sipConvertToType(sipPy, sipType_Qt_WindowFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 98075 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_WindowFlags[] = {
    {(void *)slot_Qt_WindowFlags___hash__, hash_slot},
    {(void *)slot_Qt_WindowFlags___bool__, bool_slot},
    {(void *)slot_Qt_WindowFlags___ne__, ne_slot},
    {(void *)slot_Qt_WindowFlags___eq__, eq_slot},
    {(void *)slot_Qt_WindowFlags___ixor__, ixor_slot},
    {(void *)slot_Qt_WindowFlags___xor__, xor_slot},
    {(void *)slot_Qt_WindowFlags___ior__, ior_slot},
    {(void *)slot_Qt_WindowFlags___or__, or_slot},
    {(void *)slot_Qt_WindowFlags___iand__, iand_slot},
    {(void *)slot_Qt_WindowFlags___and__, and_slot},
    {(void *)slot_Qt_WindowFlags___invert__, invert_slot},
    {(void *)slot_Qt_WindowFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_WindowFlags, "\1Qt.WindowFlags()\n"
"Qt.WindowFlags(Union[Qt.WindowFlags, Qt.WindowType])\n"
"Qt.WindowFlags(Qt.WindowFlags)");


static pyqt5ClassPluginDef plugin_Qt_WindowFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_WindowFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__WindowFlags,
        {SIP_NULLPTR},
        &plugin_Qt_WindowFlags
    },
    {
        sipNameNr_WindowFlags,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_WindowFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_WindowFlags,
    init_type_Qt_WindowFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_WindowFlags,
    assign_Qt_WindowFlags,
    array_Qt_WindowFlags,
    copy_Qt_WindowFlags,
    release_Qt_WindowFlags,
    SIP_NULLPTR,
    convertTo_Qt_WindowFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_Alignment___hash__(PyObject *);}
static long slot_Qt_Alignment___hash__(PyObject *sipSelf)
{
     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::Alignment::Int();
#line 98185 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_Alignment___bool__(PyObject *);}
static int slot_Qt_Alignment___bool__(PyObject *sipSelf)
{
     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Alignment::Int() != 0);
#line 98210 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_Alignment___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Alignment___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::Alignment* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_Alignment, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Alignment::Int() != a0->operator Qt::Alignment::Int());
#line 98240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::Alignment *>(a0),sipType_Qt_Alignment,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_Alignment, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_Alignment___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Alignment___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::Alignment* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_Alignment, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Alignment::Int() == a0->operator Qt::Alignment::Int());
#line 98276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::Alignment *>(a0),sipType_Qt_Alignment,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_Alignment, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_Alignment___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Alignment___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Alignment)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::Alignment(*sipCpp ^ a0);
#line 98315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Alignment___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Alignment___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Alignment, &a0, &a0State, &a1))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Alignment___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Alignment___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Alignment)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::Alignment(*sipCpp | a0);
#line 98387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Alignment___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Alignment___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Alignment, &a0, &a0State, &a1))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Alignment___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Alignment___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Alignment)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::Alignment::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Alignment___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Alignment___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Alignment, &a0, &a0State, &a1))
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Alignment___invert__(PyObject *);}
static PyObject *slot_Qt_Alignment___invert__(PyObject *sipSelf)
{
     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::Alignment*sipRes;

            sipRes = new  ::Qt::Alignment(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_Alignment___int__(PyObject *);}
static PyObject *slot_Qt_Alignment___int__(PyObject *sipSelf)
{
     ::Qt::Alignment *sipCpp = reinterpret_cast< ::Qt::Alignment *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Alignment));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_Alignment(void *, int);}
static void release_Qt_Alignment(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::Alignment *>(sipCppV);
}


extern "C" {static void assign_Qt_Alignment(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_Alignment(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::Alignment *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::Alignment *>(sipSrc);
}


extern "C" {static void *array_Qt_Alignment(SIP_SSIZE_T);}
static void *array_Qt_Alignment(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::Alignment[sipNrElem];
}


extern "C" {static void *copy_Qt_Alignment(const void *, SIP_SSIZE_T);}
static void *copy_Qt_Alignment(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::Alignment(reinterpret_cast<const  ::Qt::Alignment *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_Alignment(sipSimpleWrapper *);}
static void dealloc_Qt_Alignment(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_Alignment(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_Alignment(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_Alignment(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::Alignment *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::Alignment();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::Alignment(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::Alignment* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp = new  ::Qt::Alignment(*a0);
            sipReleaseType(const_cast< ::Qt::Alignment *>(a0),sipType_Qt_Alignment,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_Alignment(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_Alignment(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::Alignment **sipCppPtr = reinterpret_cast< ::Qt::Alignment **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::Alignment is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_AlignmentFlag)) ||
            sipCanConvertToType(sipPy, sipType_Qt_Alignment, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_AlignmentFlag)))
{
    *sipCppPtr = new Qt::Alignment(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::Alignment *>(sipConvertToType(sipPy, sipType_Qt_Alignment, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 98655 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_Alignment[] = {
    {(void *)slot_Qt_Alignment___hash__, hash_slot},
    {(void *)slot_Qt_Alignment___bool__, bool_slot},
    {(void *)slot_Qt_Alignment___ne__, ne_slot},
    {(void *)slot_Qt_Alignment___eq__, eq_slot},
    {(void *)slot_Qt_Alignment___ixor__, ixor_slot},
    {(void *)slot_Qt_Alignment___xor__, xor_slot},
    {(void *)slot_Qt_Alignment___ior__, ior_slot},
    {(void *)slot_Qt_Alignment___or__, or_slot},
    {(void *)slot_Qt_Alignment___iand__, iand_slot},
    {(void *)slot_Qt_Alignment___and__, and_slot},
    {(void *)slot_Qt_Alignment___invert__, invert_slot},
    {(void *)slot_Qt_Alignment___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_Alignment, "\1Qt.Alignment()\n"
"Qt.Alignment(Union[Qt.Alignment, Qt.AlignmentFlag])\n"
"Qt.Alignment(Qt.Alignment)");


static pyqt5ClassPluginDef plugin_Qt_Alignment = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_Alignment = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__Alignment,
        {SIP_NULLPTR},
        &plugin_Qt_Alignment
    },
    {
        sipNameNr_Alignment,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_Alignment,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_Alignment,
    init_type_Qt_Alignment,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_Alignment,
    assign_Qt_Alignment,
    array_Qt_Alignment,
    copy_Qt_Alignment,
    release_Qt_Alignment,
    SIP_NULLPTR,
    convertTo_Qt_Alignment,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98743 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 98747 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_Orientations___hash__(PyObject *);}
static long slot_Qt_Orientations___hash__(PyObject *sipSelf)
{
     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::Orientations::Int();
#line 98765 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_Orientations___bool__(PyObject *);}
static int slot_Qt_Orientations___bool__(PyObject *sipSelf)
{
     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Orientations::Int() != 0);
#line 98790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_Orientations___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientations___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::Orientations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_Orientations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Orientations::Int() != a0->operator Qt::Orientations::Int());
#line 98820 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::Orientations *>(a0),sipType_Qt_Orientations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_Orientations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_Orientations___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientations___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::Orientations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_Orientations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::Orientations::Int() == a0->operator Qt::Orientations::Int());
#line 98856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::Orientations *>(a0),sipType_Qt_Orientations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_Orientations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_Orientations___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientations___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Orientations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::Orientations(*sipCpp ^ a0);
#line 98895 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Orientations___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientations___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Orientations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Orientations, &a0, &a0State, &a1))
        {
             ::Qt::Orientations*sipRes;

            sipRes = new  ::Qt::Orientations((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_Orientations,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Orientations___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientations___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Orientations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::Orientations(*sipCpp | a0);
#line 98967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Orientations___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientations___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Orientations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Orientations, &a0, &a0State, &a1))
        {
             ::Qt::Orientations*sipRes;

            sipRes = new  ::Qt::Orientations((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_Orientations,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Orientations___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientations___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_Orientations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::Orientations::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_Orientations___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_Orientations___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::Orientations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_Orientations, &a0, &a0State, &a1))
        {
             ::Qt::Orientations*sipRes;

            sipRes = new  ::Qt::Orientations((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_Orientations,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_Orientations___invert__(PyObject *);}
static PyObject *slot_Qt_Orientations___invert__(PyObject *sipSelf)
{
     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::Orientations*sipRes;

            sipRes = new  ::Qt::Orientations(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_Orientations___int__(PyObject *);}
static PyObject *slot_Qt_Orientations___int__(PyObject *sipSelf)
{
     ::Qt::Orientations *sipCpp = reinterpret_cast< ::Qt::Orientations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_Orientations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_Orientations(void *, int);}
static void release_Qt_Orientations(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::Orientations *>(sipCppV);
}


extern "C" {static void assign_Qt_Orientations(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_Orientations(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::Orientations *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::Orientations *>(sipSrc);
}


extern "C" {static void *array_Qt_Orientations(SIP_SSIZE_T);}
static void *array_Qt_Orientations(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::Orientations[sipNrElem];
}


extern "C" {static void *copy_Qt_Orientations(const void *, SIP_SSIZE_T);}
static void *copy_Qt_Orientations(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::Orientations(reinterpret_cast<const  ::Qt::Orientations *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_Orientations(sipSimpleWrapper *);}
static void dealloc_Qt_Orientations(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_Orientations(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_Orientations(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_Orientations(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::Orientations *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::Orientations();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::Orientations(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::Orientations* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_Orientations, &a0, &a0State))
        {
            sipCpp = new  ::Qt::Orientations(*a0);
            sipReleaseType(const_cast< ::Qt::Orientations *>(a0),sipType_Qt_Orientations,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_Orientations(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_Orientations(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::Orientations **sipCppPtr = reinterpret_cast< ::Qt::Orientations **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::Orientations is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_Orientation)) ||
            sipCanConvertToType(sipPy, sipType_Qt_Orientations, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_Orientation)))
{
    *sipCppPtr = new Qt::Orientations(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::Orientations *>(sipConvertToType(sipPy, sipType_Qt_Orientations, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 99235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_Orientations[] = {
    {(void *)slot_Qt_Orientations___hash__, hash_slot},
    {(void *)slot_Qt_Orientations___bool__, bool_slot},
    {(void *)slot_Qt_Orientations___ne__, ne_slot},
    {(void *)slot_Qt_Orientations___eq__, eq_slot},
    {(void *)slot_Qt_Orientations___ixor__, ixor_slot},
    {(void *)slot_Qt_Orientations___xor__, xor_slot},
    {(void *)slot_Qt_Orientations___ior__, ior_slot},
    {(void *)slot_Qt_Orientations___or__, or_slot},
    {(void *)slot_Qt_Orientations___iand__, iand_slot},
    {(void *)slot_Qt_Orientations___and__, and_slot},
    {(void *)slot_Qt_Orientations___invert__, invert_slot},
    {(void *)slot_Qt_Orientations___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_Orientations, "\1Qt.Orientations()\n"
"Qt.Orientations(Union[Qt.Orientations, Qt.Orientation])\n"
"Qt.Orientations(Qt.Orientations)");


static pyqt5ClassPluginDef plugin_Qt_Orientations = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_Orientations = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__Orientations,
        {SIP_NULLPTR},
        &plugin_Qt_Orientations
    },
    {
        sipNameNr_Orientations,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_Orientations,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_Orientations,
    init_type_Qt_Orientations,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_Orientations,
    assign_Qt_Orientations,
    array_Qt_Orientations,
    copy_Qt_Orientations,
    release_Qt_Orientations,
    SIP_NULLPTR,
    convertTo_Qt_Orientations,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99327 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_MouseButtons___hash__(PyObject *);}
static long slot_Qt_MouseButtons___hash__(PyObject *sipSelf)
{
     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::MouseButtons::Int();
#line 99345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_MouseButtons___bool__(PyObject *);}
static int slot_Qt_MouseButtons___bool__(PyObject *sipSelf)
{
     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MouseButtons::Int() != 0);
#line 99370 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_MouseButtons___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButtons___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::MouseButtons* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_MouseButtons, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MouseButtons::Int() != a0->operator Qt::MouseButtons::Int());
#line 99400 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::MouseButtons *>(a0),sipType_Qt_MouseButtons,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_MouseButtons, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_MouseButtons___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButtons___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::MouseButtons* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_MouseButtons, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::MouseButtons::Int() == a0->operator Qt::MouseButtons::Int());
#line 99436 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::MouseButtons *>(a0),sipType_Qt_MouseButtons,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_MouseButtons, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_MouseButtons___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButtons___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MouseButtons)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::MouseButtons(*sipCpp ^ a0);
#line 99475 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MouseButtons___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButtons___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseButtons* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MouseButtons, &a0, &a0State, &a1))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_MouseButtons,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MouseButtons___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButtons___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MouseButtons)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::MouseButtons(*sipCpp | a0);
#line 99547 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MouseButtons___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButtons___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseButtons* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MouseButtons, &a0, &a0State, &a1))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_MouseButtons,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MouseButtons___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButtons___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_MouseButtons)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::MouseButtons::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_MouseButtons___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_MouseButtons___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::MouseButtons* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_MouseButtons, &a0, &a0State, &a1))
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_MouseButtons,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_MouseButtons___invert__(PyObject *);}
static PyObject *slot_Qt_MouseButtons___invert__(PyObject *sipSelf)
{
     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::MouseButtons*sipRes;

            sipRes = new  ::Qt::MouseButtons(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_MouseButtons___int__(PyObject *);}
static PyObject *slot_Qt_MouseButtons___int__(PyObject *sipSelf)
{
     ::Qt::MouseButtons *sipCpp = reinterpret_cast< ::Qt::MouseButtons *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_MouseButtons));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_MouseButtons(void *, int);}
static void release_Qt_MouseButtons(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::MouseButtons *>(sipCppV);
}


extern "C" {static void assign_Qt_MouseButtons(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_MouseButtons(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::MouseButtons *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::MouseButtons *>(sipSrc);
}


extern "C" {static void *array_Qt_MouseButtons(SIP_SSIZE_T);}
static void *array_Qt_MouseButtons(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::MouseButtons[sipNrElem];
}


extern "C" {static void *copy_Qt_MouseButtons(const void *, SIP_SSIZE_T);}
static void *copy_Qt_MouseButtons(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::MouseButtons(reinterpret_cast<const  ::Qt::MouseButtons *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_MouseButtons(sipSimpleWrapper *);}
static void dealloc_Qt_MouseButtons(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_MouseButtons(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_MouseButtons(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_MouseButtons(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::MouseButtons *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::MouseButtons();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::MouseButtons(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::MouseButtons* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_MouseButtons, &a0, &a0State))
        {
            sipCpp = new  ::Qt::MouseButtons(*a0);
            sipReleaseType(const_cast< ::Qt::MouseButtons *>(a0),sipType_Qt_MouseButtons,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_MouseButtons(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_MouseButtons(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::MouseButtons **sipCppPtr = reinterpret_cast< ::Qt::MouseButtons **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::MouseButtons is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_MouseButton)) ||
            sipCanConvertToType(sipPy, sipType_Qt_MouseButtons, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_MouseButton)))
{
    *sipCppPtr = new Qt::MouseButtons(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::MouseButtons *>(sipConvertToType(sipPy, sipType_Qt_MouseButtons, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 99815 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_MouseButtons[] = {
    {(void *)slot_Qt_MouseButtons___hash__, hash_slot},
    {(void *)slot_Qt_MouseButtons___bool__, bool_slot},
    {(void *)slot_Qt_MouseButtons___ne__, ne_slot},
    {(void *)slot_Qt_MouseButtons___eq__, eq_slot},
    {(void *)slot_Qt_MouseButtons___ixor__, ixor_slot},
    {(void *)slot_Qt_MouseButtons___xor__, xor_slot},
    {(void *)slot_Qt_MouseButtons___ior__, ior_slot},
    {(void *)slot_Qt_MouseButtons___or__, or_slot},
    {(void *)slot_Qt_MouseButtons___iand__, iand_slot},
    {(void *)slot_Qt_MouseButtons___and__, and_slot},
    {(void *)slot_Qt_MouseButtons___invert__, invert_slot},
    {(void *)slot_Qt_MouseButtons___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_MouseButtons, "\1Qt.MouseButtons()\n"
"Qt.MouseButtons(Union[Qt.MouseButtons, Qt.MouseButton])\n"
"Qt.MouseButtons(Qt.MouseButtons)");


static pyqt5ClassPluginDef plugin_Qt_MouseButtons = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_MouseButtons = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__MouseButtons,
        {SIP_NULLPTR},
        &plugin_Qt_MouseButtons
    },
    {
        sipNameNr_MouseButtons,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_MouseButtons,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_MouseButtons,
    init_type_Qt_MouseButtons,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_MouseButtons,
    assign_Qt_MouseButtons,
    array_Qt_MouseButtons,
    copy_Qt_MouseButtons,
    release_Qt_MouseButtons,
    SIP_NULLPTR,
    convertTo_Qt_MouseButtons,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99903 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99907 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


extern "C" {static long slot_Qt_KeyboardModifiers___hash__(PyObject *);}
static long slot_Qt_KeyboardModifiers___hash__(PyObject *sipSelf)
{
     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator Qt::KeyboardModifiers::Int();
#line 99925 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_Qt_KeyboardModifiers___bool__(PyObject *);}
static int slot_Qt_KeyboardModifiers___bool__(PyObject *sipSelf)
{
     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::KeyboardModifiers::Int() != 0);
#line 99950 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___ne__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::KeyboardModifiers* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_KeyboardModifiers, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::KeyboardModifiers::Int() != a0->operator Qt::KeyboardModifiers::Int());
#line 99980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::KeyboardModifiers *>(a0),sipType_Qt_KeyboardModifiers,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, ne_slot, sipType_Qt_KeyboardModifiers, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___eq__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::Qt::KeyboardModifiers* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_Qt_KeyboardModifiers, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator Qt::KeyboardModifiers::Int() == a0->operator Qt::KeyboardModifiers::Int());
#line 100016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
            sipReleaseType(const_cast< ::Qt::KeyboardModifiers *>(a0),sipType_Qt_KeyboardModifiers,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, eq_slot, sipType_Qt_KeyboardModifiers, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___ixor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_KeyboardModifiers)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::KeyboardModifiers(*sipCpp ^ a0);
#line 100055 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___xor__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::KeyboardModifiers* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_KeyboardModifiers, &a0, &a0State, &a1))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers((*a0 ^ a1));
            sipReleaseType(a0,sipType_Qt_KeyboardModifiers,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___ior__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_KeyboardModifiers)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
        *sipCpp = Qt::KeyboardModifiers(*sipCpp | a0);
#line 100127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___or__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::KeyboardModifiers* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_KeyboardModifiers, &a0, &a0State, &a1))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers((*a0 | a1));
            sipReleaseType(a0,sipType_Qt_KeyboardModifiers,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___iand__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_KeyboardModifiers)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::Qt::KeyboardModifiers::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___and__(PyObject *,PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::Qt::KeyboardModifiers* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_Qt_KeyboardModifiers, &a0, &a0State, &a1))
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers((*a0 & a1));
            sipReleaseType(a0,sipType_Qt_KeyboardModifiers,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtCore, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___invert__(PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___invert__(PyObject *sipSelf)
{
     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::Qt::KeyboardModifiers*sipRes;

            sipRes = new  ::Qt::KeyboardModifiers(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Qt_KeyboardModifiers___int__(PyObject *);}
static PyObject *slot_Qt_KeyboardModifiers___int__(PyObject *sipSelf)
{
     ::Qt::KeyboardModifiers *sipCpp = reinterpret_cast< ::Qt::KeyboardModifiers *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_KeyboardModifiers));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_KeyboardModifiers(void *, int);}
static void release_Qt_KeyboardModifiers(void *sipCppV, int)
{
    delete reinterpret_cast< ::Qt::KeyboardModifiers *>(sipCppV);
}


extern "C" {static void assign_Qt_KeyboardModifiers(void *, SIP_SSIZE_T, void *);}
static void assign_Qt_KeyboardModifiers(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Qt::KeyboardModifiers *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Qt::KeyboardModifiers *>(sipSrc);
}


extern "C" {static void *array_Qt_KeyboardModifiers(SIP_SSIZE_T);}
static void *array_Qt_KeyboardModifiers(SIP_SSIZE_T sipNrElem)
{
    return new  ::Qt::KeyboardModifiers[sipNrElem];
}


extern "C" {static void *copy_Qt_KeyboardModifiers(const void *, SIP_SSIZE_T);}
static void *copy_Qt_KeyboardModifiers(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Qt::KeyboardModifiers(reinterpret_cast<const  ::Qt::KeyboardModifiers *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_KeyboardModifiers(sipSimpleWrapper *);}
static void dealloc_Qt_KeyboardModifiers(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_Qt_KeyboardModifiers(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_Qt_KeyboardModifiers(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Qt_KeyboardModifiers(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::Qt::KeyboardModifiers *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::Qt::KeyboardModifiers();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::Qt::KeyboardModifiers(a0);

            return sipCpp;
        }
    }

    {
        const  ::Qt::KeyboardModifiers* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Qt_KeyboardModifiers, &a0, &a0State))
        {
            sipCpp = new  ::Qt::KeyboardModifiers(*a0);
            sipReleaseType(const_cast< ::Qt::KeyboardModifiers *>(a0),sipType_Qt_KeyboardModifiers,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_Qt_KeyboardModifiers(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_KeyboardModifiers(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Qt::KeyboardModifiers **sipCppPtr = reinterpret_cast< ::Qt::KeyboardModifiers **>(sipCppPtrV);

#line 121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::KeyboardModifiers is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_KeyboardModifier)) ||
            sipCanConvertToType(sipPy, sipType_Qt_KeyboardModifiers, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_KeyboardModifier)))
{
    *sipCppPtr = new Qt::KeyboardModifiers(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::KeyboardModifiers *>(sipConvertToType(sipPy, sipType_Qt_KeyboardModifiers, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 100395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_KeyboardModifiers[] = {
    {(void *)slot_Qt_KeyboardModifiers___hash__, hash_slot},
    {(void *)slot_Qt_KeyboardModifiers___bool__, bool_slot},
    {(void *)slot_Qt_KeyboardModifiers___ne__, ne_slot},
    {(void *)slot_Qt_KeyboardModifiers___eq__, eq_slot},
    {(void *)slot_Qt_KeyboardModifiers___ixor__, ixor_slot},
    {(void *)slot_Qt_KeyboardModifiers___xor__, xor_slot},
    {(void *)slot_Qt_KeyboardModifiers___ior__, ior_slot},
    {(void *)slot_Qt_KeyboardModifiers___or__, or_slot},
    {(void *)slot_Qt_KeyboardModifiers___iand__, iand_slot},
    {(void *)slot_Qt_KeyboardModifiers___and__, and_slot},
    {(void *)slot_Qt_KeyboardModifiers___invert__, invert_slot},
    {(void *)slot_Qt_KeyboardModifiers___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_Qt_KeyboardModifiers, "\1Qt.KeyboardModifiers()\n"
"Qt.KeyboardModifiers(Union[Qt.KeyboardModifiers, Qt.KeyboardModifier])\n"
"Qt.KeyboardModifiers(Qt.KeyboardModifiers)");


static pyqt5ClassPluginDef plugin_Qt_KeyboardModifiers = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt_KeyboardModifiers = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_Qt__KeyboardModifiers,
        {SIP_NULLPTR},
        &plugin_Qt_KeyboardModifiers
    },
    {
        sipNameNr_KeyboardModifiers,
        {339, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_Qt_KeyboardModifiers,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_Qt_KeyboardModifiers,
    init_type_Qt_KeyboardModifiers,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_Qt_KeyboardModifiers,
    assign_Qt_KeyboardModifiers,
    array_Qt_KeyboardModifiers,
    copy_Qt_KeyboardModifiers,
    release_Qt_KeyboardModifiers,
    SIP_NULLPTR,
    convertTo_Qt_KeyboardModifiers,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 100483 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"


static sipEnumMemberDef enummembers_Qt[] = {
    {sipName_AA_CompressHighFrequencyEvents, static_cast<int>( ::Qt::AA_CompressHighFrequencyEvents), 343},
    {sipName_AA_CompressTabletEvents, static_cast<int>( ::Qt::AA_CompressTabletEvents), 343},
    {sipName_AA_DisableHighDpiScaling, static_cast<int>( ::Qt::AA_DisableHighDpiScaling), 343},
    {sipName_AA_DisableShaderDiskCache, static_cast<int>( ::Qt::AA_DisableShaderDiskCache), 343},
    {sipName_AA_DisableWindowContextHelpButton, static_cast<int>( ::Qt::AA_DisableWindowContextHelpButton), 343},
    {sipName_AA_DontCheckOpenGLContextThreadAffinity, static_cast<int>( ::Qt::AA_DontCheckOpenGLContextThreadAffinity), 343},
    {sipName_AA_DontCreateNativeWidgetSiblings, static_cast<int>( ::Qt::AA_DontCreateNativeWidgetSiblings), 343},
    {sipName_AA_DontShowIconsInMenus, static_cast<int>( ::Qt::AA_DontShowIconsInMenus), 343},
    {sipName_AA_DontShowShortcutsInContextMenus, static_cast<int>( ::Qt::AA_DontShowShortcutsInContextMenus), 343},
    {sipName_AA_DontUseNativeDialogs, static_cast<int>( ::Qt::AA_DontUseNativeDialogs), 343},
    {sipName_AA_DontUseNativeMenuBar, static_cast<int>( ::Qt::AA_DontUseNativeMenuBar), 343},
    {sipName_AA_EnableHighDpiScaling, static_cast<int>( ::Qt::AA_EnableHighDpiScaling), 343},
    {sipName_AA_ForceRasterWidgets, static_cast<int>( ::Qt::AA_ForceRasterWidgets), 343},
    {sipName_AA_ImmediateWidgetCreation, static_cast<int>( ::Qt::AA_ImmediateWidgetCreation), 343},
    {sipName_AA_MSWindowsUseDirect3DByDefault, static_cast<int>( ::Qt::AA_MSWindowsUseDirect3DByDefault), 343},
    {sipName_AA_MacDontSwapCtrlAndMeta, static_cast<int>( ::Qt::AA_MacDontSwapCtrlAndMeta), 343},
    {sipName_AA_MacPluginApplication, static_cast<int>( ::Qt::AA_MacPluginApplication), 343},
    {sipName_AA_NativeWindows, static_cast<int>( ::Qt::AA_NativeWindows), 343},
    {sipName_AA_PluginApplication, static_cast<int>( ::Qt::AA_PluginApplication), 343},
    {sipName_AA_SetPalette, static_cast<int>( ::Qt::AA_SetPalette), 343},
    {sipName_AA_ShareOpenGLContexts, static_cast<int>( ::Qt::AA_ShareOpenGLContexts), 343},
    {sipName_AA_SynthesizeMouseForUnhandledTabletEvents, static_cast<int>( ::Qt::AA_SynthesizeMouseForUnhandledTabletEvents), 343},
    {sipName_AA_SynthesizeMouseForUnhandledTouchEvents, static_cast<int>( ::Qt::AA_SynthesizeMouseForUnhandledTouchEvents), 343},
    {sipName_AA_SynthesizeTouchForUnhandledMouseEvents, static_cast<int>( ::Qt::AA_SynthesizeTouchForUnhandledMouseEvents), 343},
    {sipName_AA_Use96Dpi, static_cast<int>( ::Qt::AA_Use96Dpi), 343},
    {sipName_AA_UseDesktopOpenGL, static_cast<int>( ::Qt::AA_UseDesktopOpenGL), 343},
    {sipName_AA_UseHighDpiPixmaps, static_cast<int>( ::Qt::AA_UseHighDpiPixmaps), 343},
    {sipName_AA_UseOpenGLES, static_cast<int>( ::Qt::AA_UseOpenGLES), 343},
    {sipName_AA_UseSoftwareOpenGL, static_cast<int>( ::Qt::AA_UseSoftwareOpenGL), 343},
    {sipName_AA_UseStyleSheetPropagationInWidgetStyles, static_cast<int>( ::Qt::AA_UseStyleSheetPropagationInWidgetStyles), 343},
    {sipName_AA_X11InitThreads, static_cast<int>( ::Qt::AA_X11InitThreads), 343},
    {sipName_ALT, static_cast<int>( ::Qt::ALT), 400},
    {sipName_AbsoluteSize, static_cast<int>( ::Qt::AbsoluteSize), 419},
    {sipName_AccessibleDescriptionRole, static_cast<int>( ::Qt::AccessibleDescriptionRole), 388},
    {sipName_AccessibleTextRole, static_cast<int>( ::Qt::AccessibleTextRole), 388},
    {sipName_ActionMask, static_cast<int>( ::Qt::ActionMask), 365},
    {sipName_ActionsContextMenu, static_cast<int>( ::Qt::ActionsContextMenu), 356},
    {sipName_ActiveWindowFocusReason, static_cast<int>( ::Qt::ActiveWindowFocusReason), 375},
    {sipName_AddToSelection, static_cast<int>( ::Qt::AddToSelection), 392},
    {sipName_AlignAbsolute, static_cast<int>( ::Qt::AlignAbsolute), 341},
    {sipName_AlignBaseline, static_cast<int>( ::Qt::AlignBaseline), 341},
    {sipName_AlignBottom, static_cast<int>( ::Qt::AlignBottom), 341},
    {sipName_AlignCenter, static_cast<int>( ::Qt::AlignCenter), 341},
    {sipName_AlignHCenter, static_cast<int>( ::Qt::AlignHCenter), 341},
    {sipName_AlignHorizontal_Mask, static_cast<int>( ::Qt::AlignHorizontal_Mask), 341},
    {sipName_AlignJustify, static_cast<int>( ::Qt::AlignJustify), 341},
    {sipName_AlignLeading, static_cast<int>( ::Qt::AlignLeading), 341},
    {sipName_AlignLeft, static_cast<int>( ::Qt::AlignLeft), 341},
    {sipName_AlignRight, static_cast<int>( ::Qt::AlignRight), 341},
    {sipName_AlignTop, static_cast<int>( ::Qt::AlignTop), 341},
    {sipName_AlignTrailing, static_cast<int>( ::Qt::AlignTrailing), 341},
    {sipName_AlignVCenter, static_cast<int>( ::Qt::AlignVCenter), 341},
    {sipName_AlignVertical_Mask, static_cast<int>( ::Qt::AlignVertical_Mask), 341},
    {sipName_AllButtons, static_cast<int>( ::Qt::AllButtons), 401},
    {sipName_AllDockWidgetAreas, static_cast<int>( ::Qt::AllDockWidgetAreas), 363},
    {sipName_AllToolBarAreas, static_cast<int>( ::Qt::AllToolBarAreas), 430},
    {sipName_AltModifier, static_cast<int>( ::Qt::AltModifier), 394},
    {sipName_AnchorBottom, static_cast<int>( ::Qt::AnchorBottom), 342},
    {sipName_AnchorHorizontalCenter, static_cast<int>( ::Qt::AnchorHorizontalCenter), 342},
    {sipName_AnchorLeft, static_cast<int>( ::Qt::AnchorLeft), 342},
    {sipName_AnchorRight, static_cast<int>( ::Qt::AnchorRight), 342},
    {sipName_AnchorTop, static_cast<int>( ::Qt::AnchorTop), 342},
    {sipName_AnchorVerticalCenter, static_cast<int>( ::Qt::AnchorVerticalCenter), 342},
    {sipName_ApplicationActive, static_cast<int>( ::Qt::ApplicationActive), 344},
    {sipName_ApplicationHidden, static_cast<int>( ::Qt::ApplicationHidden), 344},
    {sipName_ApplicationInactive, static_cast<int>( ::Qt::ApplicationInactive), 344},
    {sipName_ApplicationModal, static_cast<int>( ::Qt::ApplicationModal), 441},
    {sipName_ApplicationShortcut, static_cast<int>( ::Qt::ApplicationShortcut), 417},
    {sipName_ApplicationSuspended, static_cast<int>( ::Qt::ApplicationSuspended), 344},
    {sipName_ArrowCursor, static_cast<int>( ::Qt::ArrowCursor), 360},
    {sipName_AscendingOrder, static_cast<int>( ::Qt::AscendingOrder), 420},
    {sipName_AutoColor, static_cast<int>( ::Qt::AutoColor), 382},
    {sipName_AutoConnection, static_cast<int>( ::Qt::AutoConnection), 355},
    {sipName_AutoDither, static_cast<int>( ::Qt::AutoDither), 382},
    {sipName_AutoText, static_cast<int>( ::Qt::AutoText), 424},
    {sipName_AvoidDither, static_cast<int>( ::Qt::AvoidDither), 382},
    {sipName_BDiagPattern, static_cast<int>( ::Qt::BDiagPattern), 350},
    {sipName_BackButton, static_cast<int>( ::Qt::BackButton), 401},
    {sipName_BackgroundColorRole, static_cast<int>( ::Qt::BackgroundColorRole), 388},
    {sipName_BackgroundRole, static_cast<int>( ::Qt::BackgroundRole), 388},
    {sipName_BacktabFocusReason, static_cast<int>( ::Qt::BacktabFocusReason), 375},
    {sipName_BeginNativeGesture, static_cast<int>( ::Qt::BeginNativeGesture), 406},
    {sipName_BevelJoin, static_cast<int>( ::Qt::BevelJoin), 411},
    {sipName_BitmapCursor, static_cast<int>( ::Qt::BitmapCursor), 360},
    {sipName_BlankCursor, static_cast<int>( ::Qt::BlankCursor), 360},
    {sipName_BlockingQueuedConnection, static_cast<int>( ::Qt::BlockingQueuedConnection), 355},
    {sipName_BottomDockWidgetArea, static_cast<int>( ::Qt::BottomDockWidgetArea), 363},
    {sipName_BottomEdge, static_cast<int>( ::Qt::BottomEdge), 367},
    {sipName_BottomLeftCorner, static_cast<int>( ::Qt::BottomLeftCorner), 358},
    {sipName_BottomLeftSection, static_cast<int>( ::Qt::BottomLeftSection), 440},
    {sipName_BottomRightCorner, static_cast<int>( ::Qt::BottomRightCorner), 358},
    {sipName_BottomRightSection, static_cast<int>( ::Qt::BottomRightSection), 440},
    {sipName_BottomSection, static_cast<int>( ::Qt::BottomSection), 440},
    {sipName_BottomToolBarArea, static_cast<int>( ::Qt::BottomToolBarArea), 430},
    {sipName_BusyCursor, static_cast<int>( ::Qt::BusyCursor), 360},
    {sipName_BypassGraphicsProxyWidget, static_cast<int>( ::Qt::BypassGraphicsProxyWidget), 444},
    {sipName_BypassWindowManagerHint, static_cast<int>( ::Qt::BypassWindowManagerHint), 444},
    {sipName_CTRL, static_cast<int>( ::Qt::CTRL), 400},
    {sipName_CaseInsensitive, static_cast<int>( ::Qt::CaseInsensitive), 351},
    {sipName_CaseSensitive, static_cast<int>( ::Qt::CaseSensitive), 351},
    {sipName_CheckStateRole, static_cast<int>( ::Qt::CheckStateRole), 388},
    {sipName_Checked, static_cast<int>( ::Qt::Checked), 352},
    {sipName_ChecksumIso3309, static_cast<int>( ::Qt::ChecksumIso3309), 353},
    {sipName_ChecksumItuV41, static_cast<int>( ::Qt::ChecksumItuV41), 353},
    {sipName_ClickFocus, static_cast<int>( ::Qt::ClickFocus), 374},
    {sipName_ClosedHandCursor, static_cast<int>( ::Qt::ClosedHandCursor), 360},
    {sipName_CoarseTimer, static_cast<int>( ::Qt::CoarseTimer), 429},
    {sipName_ColorOnly, static_cast<int>( ::Qt::ColorOnly), 382},
    {sipName_ConicalGradientPattern, static_cast<int>( ::Qt::ConicalGradientPattern), 350},
    {sipName_ContainsItemBoundingRect, static_cast<int>( ::Qt::ContainsItemBoundingRect), 391},
    {sipName_ContainsItemShape, static_cast<int>( ::Qt::ContainsItemShape), 391},
    {sipName_ControlModifier, static_cast<int>( ::Qt::ControlModifier), 394},
    {sipName_CopyAction, static_cast<int>( ::Qt::CopyAction), 365},
    {sipName_CoverWindow, static_cast<int>( ::Qt::CoverWindow), 444},
    {sipName_CrossCursor, static_cast<int>( ::Qt::CrossCursor), 360},
    {sipName_CrossPattern, static_cast<int>( ::Qt::CrossPattern), 350},
    {sipName_CustomContextMenu, static_cast<int>( ::Qt::CustomContextMenu), 356},
    {sipName_CustomCursor, static_cast<int>( ::Qt::CustomCursor), 360},
    {sipName_CustomDashLine, static_cast<int>( ::Qt::CustomDashLine), 412},
    {sipName_CustomGesture, static_cast<int>( ::Qt::CustomGesture), 379},
    {sipName_CustomizeWindowHint, static_cast<int>( ::Qt::CustomizeWindowHint), 444},
    {sipName_DashDotDotLine, static_cast<int>( ::Qt::DashDotDotLine), 412},
    {sipName_DashDotLine, static_cast<int>( ::Qt::DashDotLine), 412},
    {sipName_DashLine, static_cast<int>( ::Qt::DashLine), 412},
    {sipName_DecorationRole, static_cast<int>( ::Qt::DecorationRole), 388},
    {sipName_DefaultContextMenu, static_cast<int>( ::Qt::DefaultContextMenu), 356},
    {sipName_DefaultLocaleLongDate, static_cast<int>( ::Qt::DefaultLocaleLongDate), 361},
    {sipName_DefaultLocaleShortDate, static_cast<int>( ::Qt::DefaultLocaleShortDate), 361},
    {sipName_Dense1Pattern, static_cast<int>( ::Qt::Dense1Pattern), 350},
    {sipName_Dense2Pattern, static_cast<int>( ::Qt::Dense2Pattern), 350},
    {sipName_Dense3Pattern, static_cast<int>( ::Qt::Dense3Pattern), 350},
    {sipName_Dense4Pattern, static_cast<int>( ::Qt::Dense4Pattern), 350},
    {sipName_Dense5Pattern, static_cast<int>( ::Qt::Dense5Pattern), 350},
    {sipName_Dense6Pattern, static_cast<int>( ::Qt::Dense6Pattern), 350},
    {sipName_Dense7Pattern, static_cast<int>( ::Qt::Dense7Pattern), 350},
    {sipName_DescendingOrder, static_cast<int>( ::Qt::DescendingOrder), 420},
    {sipName_Desktop, static_cast<int>( ::Qt::Desktop), 444},
    {sipName_DeviceCoordinates, static_cast<int>( ::Qt::DeviceCoordinates), 357},
    {sipName_DiagCrossPattern, static_cast<int>( ::Qt::DiagCrossPattern), 350},
    {sipName_Dialog, static_cast<int>( ::Qt::Dialog), 444},
    {sipName_DiffuseAlphaDither, static_cast<int>( ::Qt::DiffuseAlphaDither), 382},
    {sipName_DiffuseDither, static_cast<int>( ::Qt::DiffuseDither), 382},
    {sipName_DirectConnection, static_cast<int>( ::Qt::DirectConnection), 355},
    {sipName_DisplayRole, static_cast<int>( ::Qt::DisplayRole), 388},
    {sipName_DockWidgetArea_Mask, static_cast<int>( ::Qt::DockWidgetArea_Mask), 363},
    {sipName_DontStartGestureOnChildren, static_cast<int>( ::Qt::DontStartGestureOnChildren), 376},
    {sipName_DotLine, static_cast<int>( ::Qt::DotLine), 412},
    {sipName_DownArrow, static_cast<int>( ::Qt::DownArrow), 346},
    {sipName_DragCopyCursor, static_cast<int>( ::Qt::DragCopyCursor), 360},
    {sipName_DragLinkCursor, static_cast<int>( ::Qt::DragLinkCursor), 360},
    {sipName_DragMoveCursor, static_cast<int>( ::Qt::DragMoveCursor), 360},
    {sipName_Drawer, static_cast<int>( ::Qt::Drawer), 444},
    {sipName_EditRole, static_cast<int>( ::Qt::EditRole), 388},
    {sipName_ElideLeft, static_cast<int>( ::Qt::ElideLeft), 422},
    {sipName_ElideMiddle, static_cast<int>( ::Qt::ElideMiddle), 422},
    {sipName_ElideNone, static_cast<int>( ::Qt::ElideNone), 422},
    {sipName_ElideRight, static_cast<int>( ::Qt::ElideRight), 422},
    {sipName_EndNativeGesture, static_cast<int>( ::Qt::EndNativeGesture), 406},
    {sipName_EnterKeyDefault, static_cast<int>( ::Qt::EnterKeyDefault), 369},
    {sipName_EnterKeyDone, static_cast<int>( ::Qt::EnterKeyDone), 369},
    {sipName_EnterKeyGo, static_cast<int>( ::Qt::EnterKeyGo), 369},
    {sipName_EnterKeyNext, static_cast<int>( ::Qt::EnterKeyNext), 369},
    {sipName_EnterKeyPrevious, static_cast<int>( ::Qt::EnterKeyPrevious), 369},
    {sipName_EnterKeyReturn, static_cast<int>( ::Qt::EnterKeyReturn), 369},
    {sipName_EnterKeySearch, static_cast<int>( ::Qt::EnterKeySearch), 369},
    {sipName_EnterKeySend, static_cast<int>( ::Qt::EnterKeySend), 369},
    {sipName_ExactHit, static_cast<int>( ::Qt::ExactHit), 381},
    {sipName_ExtraButton1, static_cast<int>( ::Qt::ExtraButton1), 401},
    {sipName_ExtraButton10, static_cast<int>( ::Qt::ExtraButton10), 401},
    {sipName_ExtraButton11, static_cast<int>( ::Qt::ExtraButton11), 401},
    {sipName_ExtraButton12, static_cast<int>( ::Qt::ExtraButton12), 401},
    {sipName_ExtraButton13, static_cast<int>( ::Qt::ExtraButton13), 401},
    {sipName_ExtraButton14, static_cast<int>( ::Qt::ExtraButton14), 401},
    {sipName_ExtraButton15, static_cast<int>( ::Qt::ExtraButton15), 401},
    {sipName_ExtraButton16, static_cast<int>( ::Qt::ExtraButton16), 401},
    {sipName_ExtraButton17, static_cast<int>( ::Qt::ExtraButton17), 401},
    {sipName_ExtraButton18, static_cast<int>( ::Qt::ExtraButton18), 401},
    {sipName_ExtraButton19, static_cast<int>( ::Qt::ExtraButton19), 401},
    {sipName_ExtraButton2, static_cast<int>( ::Qt::ExtraButton2), 401},
    {sipName_ExtraButton20, static_cast<int>( ::Qt::ExtraButton20), 401},
    {sipName_ExtraButton21, static_cast<int>( ::Qt::ExtraButton21), 401},
    {sipName_ExtraButton22, static_cast<int>( ::Qt::ExtraButton22), 401},
    {sipName_ExtraButton23, static_cast<int>( ::Qt::ExtraButton23), 401},
    {sipName_ExtraButton24, static_cast<int>( ::Qt::ExtraButton24), 401},
    {sipName_ExtraButton3, static_cast<int>( ::Qt::ExtraButton3), 401},
    {sipName_ExtraButton4, static_cast<int>( ::Qt::ExtraButton4), 401},
    {sipName_ExtraButton5, static_cast<int>( ::Qt::ExtraButton5), 401},
    {sipName_ExtraButton6, static_cast<int>( ::Qt::ExtraButton6), 401},
    {sipName_ExtraButton7, static_cast<int>( ::Qt::ExtraButton7), 401},
    {sipName_ExtraButton8, static_cast<int>( ::Qt::ExtraButton8), 401},
    {sipName_ExtraButton9, static_cast<int>( ::Qt::ExtraButton9), 401},
    {sipName_FDiagPattern, static_cast<int>( ::Qt::FDiagPattern), 350},
    {sipName_FastTransformation, static_cast<int>( ::Qt::FastTransformation), 435},
    {sipName_FindChildrenRecursively, static_cast<int>( ::Qt::FindChildrenRecursively), 372},
    {sipName_FindDirectChildrenOnly, static_cast<int>( ::Qt::FindDirectChildrenOnly), 372},
    {sipName_FlatCap, static_cast<int>( ::Qt::FlatCap), 410},
    {sipName_FontRole, static_cast<int>( ::Qt::FontRole), 388},
    {sipName_ForbiddenCursor, static_cast<int>( ::Qt::ForbiddenCursor), 360},
    {sipName_ForegroundRole, static_cast<int>( ::Qt::ForegroundRole), 388},
    {sipName_ForeignWindow, static_cast<int>( ::Qt::ForeignWindow), 444},
    {sipName_ForwardButton, static_cast<int>( ::Qt::ForwardButton), 401},
    {sipName_FramelessWindowHint, static_cast<int>( ::Qt::FramelessWindowHint), 444},
    {sipName_Friday, static_cast<int>( ::Qt::Friday), 362},
    {sipName_FuzzyHit, static_cast<int>( ::Qt::FuzzyHit), 381},
    {sipName_GestureCanceled, static_cast<int>( ::Qt::GestureCanceled), 378},
    {sipName_GestureFinished, static_cast<int>( ::Qt::GestureFinished), 378},
    {sipName_GestureStarted, static_cast<int>( ::Qt::GestureStarted), 378},
    {sipName_GestureUpdated, static_cast<int>( ::Qt::GestureUpdated), 378},
    {sipName_GroupSwitchModifier, static_cast<int>( ::Qt::GroupSwitchModifier), 394},
    {sipName_HighEventPriority, static_cast<int>( ::Qt::HighEventPriority), 370},
    {sipName_HorPattern, static_cast<int>( ::Qt::HorPattern), 350},
    {sipName_Horizontal, static_cast<int>( ::Qt::Horizontal), 408},
    {sipName_IBeamCursor, static_cast<int>( ::Qt::IBeamCursor), 360},
    {sipName_ISODate, static_cast<int>( ::Qt::ISODate), 361},
    {sipName_ISODateWithMs, static_cast<int>( ::Qt::ISODateWithMs), 361},
    {sipName_IgnoreAction, static_cast<int>( ::Qt::IgnoreAction), 365},
    {sipName_IgnoreAspectRatio, static_cast<int>( ::Qt::IgnoreAspectRatio), 347},
    {sipName_IgnoredGesturesPropagateToParent, static_cast<int>( ::Qt::IgnoredGesturesPropagateToParent), 376},
    {sipName_ImAbsolutePosition, static_cast<int>( ::Qt::ImAbsolutePosition), 387},
    {sipName_ImAnchorPosition, static_cast<int>( ::Qt::ImAnchorPosition), 387},
    {sipName_ImAnchorRectangle, static_cast<int>( ::Qt::ImAnchorRectangle), 387},
    {sipName_ImCurrentSelection, static_cast<int>( ::Qt::ImCurrentSelection), 387},
    {sipName_ImCursorPosition, static_cast<int>( ::Qt::ImCursorPosition), 387},
    {sipName_ImCursorRectangle, static_cast<int>( ::Qt::ImCursorRectangle), 387},
    {sipName_ImEnabled, static_cast<int>( ::Qt::ImEnabled), 387},
    {sipName_ImEnterKeyType, static_cast<int>( ::Qt::ImEnterKeyType), 387},
    {sipName_ImFont, static_cast<int>( ::Qt::ImFont), 387},
    {sipName_ImHints, static_cast<int>( ::Qt::ImHints), 387},
    {sipName_ImInputItemClipRectangle, static_cast<int>( ::Qt::ImInputItemClipRectangle), 387},
    {sipName_ImMaximumTextLength, static_cast<int>( ::Qt::ImMaximumTextLength), 387},
    {sipName_ImMicroFocus, static_cast<int>( ::Qt::ImMicroFocus), 387},
    {sipName_ImPlatformData, static_cast<int>( ::Qt::ImPlatformData), 387},
    {sipName_ImPreferredLanguage, static_cast<int>( ::Qt::ImPreferredLanguage), 387},
    {sipName_ImQueryAll, static_cast<int>( ::Qt::ImQueryAll), 387},
    {sipName_ImQueryInput, static_cast<int>( ::Qt::ImQueryInput), 387},
    {sipName_ImSurroundingText, static_cast<int>( ::Qt::ImSurroundingText), 387},
    {sipName_ImTextAfterCursor, static_cast<int>( ::Qt::ImTextAfterCursor), 387},
    {sipName_ImTextBeforeCursor, static_cast<int>( ::Qt::ImTextBeforeCursor), 387},
    {sipName_ImhDate, static_cast<int>( ::Qt::ImhDate), 384},
    {sipName_ImhDialableCharactersOnly, static_cast<int>( ::Qt::ImhDialableCharactersOnly), 384},
    {sipName_ImhDigitsOnly, static_cast<int>( ::Qt::ImhDigitsOnly), 384},
    {sipName_ImhEmailCharactersOnly, static_cast<int>( ::Qt::ImhEmailCharactersOnly), 384},
    {sipName_ImhExclusiveInputMask, static_cast<int>( ::Qt::ImhExclusiveInputMask), 384},
    {sipName_ImhFormattedNumbersOnly, static_cast<int>( ::Qt::ImhFormattedNumbersOnly), 384},
    {sipName_ImhHiddenText, static_cast<int>( ::Qt::ImhHiddenText), 384},
    {sipName_ImhLatinOnly, static_cast<int>( ::Qt::ImhLatinOnly), 384},
    {sipName_ImhLowercaseOnly, static_cast<int>( ::Qt::ImhLowercaseOnly), 384},
    {sipName_ImhMultiLine, static_cast<int>( ::Qt::ImhMultiLine), 384},
    {sipName_ImhNoAutoUppercase, static_cast<int>( ::Qt::ImhNoAutoUppercase), 384},
    {sipName_ImhNoEditMenu, static_cast<int>( ::Qt::ImhNoEditMenu), 384},
    {sipName_ImhNoPredictiveText, static_cast<int>( ::Qt::ImhNoPredictiveText), 384},
    {sipName_ImhNoTextHandles, static_cast<int>( ::Qt::ImhNoTextHandles), 384},
    {sipName_ImhNone, static_cast<int>( ::Qt::ImhNone), 384},
    {sipName_ImhPreferLatin, static_cast<int>( ::Qt::ImhPreferLatin), 384},
    {sipName_ImhPreferLowercase, static_cast<int>( ::Qt::ImhPreferLowercase), 384},
    {sipName_ImhPreferNumbers, static_cast<int>( ::Qt::ImhPreferNumbers), 384},
    {sipName_ImhPreferUppercase, static_cast<int>( ::Qt::ImhPreferUppercase), 384},
    {sipName_ImhSensitiveData, static_cast<int>( ::Qt::ImhSensitiveData), 384},
    {sipName_ImhTime, static_cast<int>( ::Qt::ImhTime), 384},
    {sipName_ImhUppercaseOnly, static_cast<int>( ::Qt::ImhUppercaseOnly), 384},
    {sipName_ImhUrlCharactersOnly, static_cast<int>( ::Qt::ImhUrlCharactersOnly), 384},
    {sipName_InitialSortOrderRole, static_cast<int>( ::Qt::InitialSortOrderRole), 388},
    {sipName_IntersectClip, static_cast<int>( ::Qt::IntersectClip), 354},
    {sipName_IntersectsItemBoundingRect, static_cast<int>( ::Qt::IntersectsItemBoundingRect), 391},
    {sipName_IntersectsItemShape, static_cast<int>( ::Qt::IntersectsItemShape), 391},
    {sipName_InvertedLandscapeOrientation, static_cast<int>( ::Qt::InvertedLandscapeOrientation), 413},
    {sipName_InvertedPortraitOrientation, static_cast<int>( ::Qt::InvertedPortraitOrientation), 413},
    {sipName_ItemIsAutoTristate, static_cast<int>( ::Qt::ItemIsAutoTristate), 389},
    {sipName_ItemIsDragEnabled, static_cast<int>( ::Qt::ItemIsDragEnabled), 389},
    {sipName_ItemIsDropEnabled, static_cast<int>( ::Qt::ItemIsDropEnabled), 389},
    {sipName_ItemIsEditable, static_cast<int>( ::Qt::ItemIsEditable), 389},
    {sipName_ItemIsEnabled, static_cast<int>( ::Qt::ItemIsEnabled), 389},
    {sipName_ItemIsSelectable, static_cast<int>( ::Qt::ItemIsSelectable), 389},
    {sipName_ItemIsTristate, static_cast<int>( ::Qt::ItemIsTristate), 389},
    {sipName_ItemIsUserCheckable, static_cast<int>( ::Qt::ItemIsUserCheckable), 389},
    {sipName_ItemIsUserTristate, static_cast<int>( ::Qt::ItemIsUserTristate), 389},
    {sipName_ItemNeverHasChildren, static_cast<int>( ::Qt::ItemNeverHasChildren), 389},
    {sipName_KeepAspectRatio, static_cast<int>( ::Qt::KeepAspectRatio), 347},
    {sipName_KeepAspectRatioByExpanding, static_cast<int>( ::Qt::KeepAspectRatioByExpanding), 347},
    {sipName_Key_0, static_cast<int>( ::Qt::Key_0), 393},
    {sipName_Key_1, static_cast<int>( ::Qt::Key_1), 393},
    {sipName_Key_2, static_cast<int>( ::Qt::Key_2), 393},
    {sipName_Key_3, static_cast<int>( ::Qt::Key_3), 393},
    {sipName_Key_4, static_cast<int>( ::Qt::Key_4), 393},
    {sipName_Key_5, static_cast<int>( ::Qt::Key_5), 393},
    {sipName_Key_6, static_cast<int>( ::Qt::Key_6), 393},
    {sipName_Key_7, static_cast<int>( ::Qt::Key_7), 393},
    {sipName_Key_8, static_cast<int>( ::Qt::Key_8), 393},
    {sipName_Key_9, static_cast<int>( ::Qt::Key_9), 393},
    {sipName_Key_A, static_cast<int>( ::Qt::Key_A), 393},
    {sipName_Key_AE, static_cast<int>( ::Qt::Key_AE), 393},
    {sipName_Key_Aacute, static_cast<int>( ::Qt::Key_Aacute), 393},
    {sipName_Key_Acircumflex, static_cast<int>( ::Qt::Key_Acircumflex), 393},
    {sipName_Key_AddFavorite, static_cast<int>( ::Qt::Key_AddFavorite), 393},
    {sipName_Key_Adiaeresis, static_cast<int>( ::Qt::Key_Adiaeresis), 393},
    {sipName_Key_Agrave, static_cast<int>( ::Qt::Key_Agrave), 393},
    {sipName_Key_Alt, static_cast<int>( ::Qt::Key_Alt), 393},
    {sipName_Key_AltGr, static_cast<int>( ::Qt::Key_AltGr), 393},
    {sipName_Key_Ampersand, static_cast<int>( ::Qt::Key_Ampersand), 393},
    {sipName_Key_Any, static_cast<int>( ::Qt::Key_Any), 393},
    {sipName_Key_Apostrophe, static_cast<int>( ::Qt::Key_Apostrophe), 393},
    {sipName_Key_ApplicationLeft, static_cast<int>( ::Qt::Key_ApplicationLeft), 393},
    {sipName_Key_ApplicationRight, static_cast<int>( ::Qt::Key_ApplicationRight), 393},
    {sipName_Key_Aring, static_cast<int>( ::Qt::Key_Aring), 393},
    {sipName_Key_AsciiCircum, static_cast<int>( ::Qt::Key_AsciiCircum), 393},
    {sipName_Key_AsciiTilde, static_cast<int>( ::Qt::Key_AsciiTilde), 393},
    {sipName_Key_Asterisk, static_cast<int>( ::Qt::Key_Asterisk), 393},
    {sipName_Key_At, static_cast<int>( ::Qt::Key_At), 393},
    {sipName_Key_Atilde, static_cast<int>( ::Qt::Key_Atilde), 393},
    {sipName_Key_AudioCycleTrack, static_cast<int>( ::Qt::Key_AudioCycleTrack), 393},
    {sipName_Key_AudioForward, static_cast<int>( ::Qt::Key_AudioForward), 393},
    {sipName_Key_AudioRandomPlay, static_cast<int>( ::Qt::Key_AudioRandomPlay), 393},
    {sipName_Key_AudioRepeat, static_cast<int>( ::Qt::Key_AudioRepeat), 393},
    {sipName_Key_AudioRewind, static_cast<int>( ::Qt::Key_AudioRewind), 393},
    {sipName_Key_Away, static_cast<int>( ::Qt::Key_Away), 393},
    {sipName_Key_B, static_cast<int>( ::Qt::Key_B), 393},
    {sipName_Key_Back, static_cast<int>( ::Qt::Key_Back), 393},
    {sipName_Key_BackForward, static_cast<int>( ::Qt::Key_BackForward), 393},
    {sipName_Key_Backslash, static_cast<int>( ::Qt::Key_Backslash), 393},
    {sipName_Key_Backspace, static_cast<int>( ::Qt::Key_Backspace), 393},
    {sipName_Key_Backtab, static_cast<int>( ::Qt::Key_Backtab), 393},
    {sipName_Key_Bar, static_cast<int>( ::Qt::Key_Bar), 393},
    {sipName_Key_BassBoost, static_cast<int>( ::Qt::Key_BassBoost), 393},
    {sipName_Key_BassDown, static_cast<int>( ::Qt::Key_BassDown), 393},
    {sipName_Key_BassUp, static_cast<int>( ::Qt::Key_BassUp), 393},
    {sipName_Key_Battery, static_cast<int>( ::Qt::Key_Battery), 393},
    {sipName_Key_Blue, static_cast<int>( ::Qt::Key_Blue), 393},
    {sipName_Key_Bluetooth, static_cast<int>( ::Qt::Key_Bluetooth), 393},
    {sipName_Key_Book, static_cast<int>( ::Qt::Key_Book), 393},
    {sipName_Key_BraceLeft, static_cast<int>( ::Qt::Key_BraceLeft), 393},
    {sipName_Key_BraceRight, static_cast<int>( ::Qt::Key_BraceRight), 393},
    {sipName_Key_BracketLeft, static_cast<int>( ::Qt::Key_BracketLeft), 393},
    {sipName_Key_BracketRight, static_cast<int>( ::Qt::Key_BracketRight), 393},
    {sipName_Key_BrightnessAdjust, static_cast<int>( ::Qt::Key_BrightnessAdjust), 393},
    {sipName_Key_C, static_cast<int>( ::Qt::Key_C), 393},
    {sipName_Key_CD, static_cast<int>( ::Qt::Key_CD), 393},
    {sipName_Key_Calculator, static_cast<int>( ::Qt::Key_Calculator), 393},
    {sipName_Key_Calendar, static_cast<int>( ::Qt::Key_Calendar), 393},
    {sipName_Key_Call, static_cast<int>( ::Qt::Key_Call), 393},
    {sipName_Key_Camera, static_cast<int>( ::Qt::Key_Camera), 393},
    {sipName_Key_CameraFocus, static_cast<int>( ::Qt::Key_CameraFocus), 393},
    {sipName_Key_Cancel, static_cast<int>( ::Qt::Key_Cancel), 393},
    {sipName_Key_CapsLock, static_cast<int>( ::Qt::Key_CapsLock), 393},
    {sipName_Key_Ccedilla, static_cast<int>( ::Qt::Key_Ccedilla), 393},
    {sipName_Key_ChannelDown, static_cast<int>( ::Qt::Key_ChannelDown), 393},
    {sipName_Key_ChannelUp, static_cast<int>( ::Qt::Key_ChannelUp), 393},
    {sipName_Key_Clear, static_cast<int>( ::Qt::Key_Clear), 393},
    {sipName_Key_ClearGrab, static_cast<int>( ::Qt::Key_ClearGrab), 393},
    {sipName_Key_Close, static_cast<int>( ::Qt::Key_Close), 393},
    {sipName_Key_Codeinput, static_cast<int>( ::Qt::Key_Codeinput), 393},
    {sipName_Key_Colon, static_cast<int>( ::Qt::Key_Colon), 393},
    {sipName_Key_Comma, static_cast<int>( ::Qt::Key_Comma), 393},
    {sipName_Key_Community, static_cast<int>( ::Qt::Key_Community), 393},
    {sipName_Key_Context1, static_cast<int>( ::Qt::Key_Context1), 393},
    {sipName_Key_Context2, static_cast<int>( ::Qt::Key_Context2), 393},
    {sipName_Key_Context3, static_cast<int>( ::Qt::Key_Context3), 393},
    {sipName_Key_Context4, static_cast<int>( ::Qt::Key_Context4), 393},
    {sipName_Key_ContrastAdjust, static_cast<int>( ::Qt::Key_ContrastAdjust), 393},
    {sipName_Key_Control, static_cast<int>( ::Qt::Key_Control), 393},
    {sipName_Key_Copy, static_cast<int>( ::Qt::Key_Copy), 393},
    {sipName_Key_Cut, static_cast<int>( ::Qt::Key_Cut), 393},
    {sipName_Key_D, static_cast<int>( ::Qt::Key_D), 393},
    {sipName_Key_DOS, static_cast<int>( ::Qt::Key_DOS), 393},
    {sipName_Key_Dead_A, static_cast<int>( ::Qt::Key_Dead_A), 393},
    {sipName_Key_Dead_Abovecomma, static_cast<int>( ::Qt::Key_Dead_Abovecomma), 393},
    {sipName_Key_Dead_Abovedot, static_cast<int>( ::Qt::Key_Dead_Abovedot), 393},
    {sipName_Key_Dead_Abovereversedcomma, static_cast<int>( ::Qt::Key_Dead_Abovereversedcomma), 393},
    {sipName_Key_Dead_Abovering, static_cast<int>( ::Qt::Key_Dead_Abovering), 393},
    {sipName_Key_Dead_Aboveverticalline, static_cast<int>( ::Qt::Key_Dead_Aboveverticalline), 393},
    {sipName_Key_Dead_Acute, static_cast<int>( ::Qt::Key_Dead_Acute), 393},
    {sipName_Key_Dead_Belowbreve, static_cast<int>( ::Qt::Key_Dead_Belowbreve), 393},
    {sipName_Key_Dead_Belowcircumflex, static_cast<int>( ::Qt::Key_Dead_Belowcircumflex), 393},
    {sipName_Key_Dead_Belowcomma, static_cast<int>( ::Qt::Key_Dead_Belowcomma), 393},
    {sipName_Key_Dead_Belowdiaeresis, static_cast<int>( ::Qt::Key_Dead_Belowdiaeresis), 393},
    {sipName_Key_Dead_Belowdot, static_cast<int>( ::Qt::Key_Dead_Belowdot), 393},
    {sipName_Key_Dead_Belowmacron, static_cast<int>( ::Qt::Key_Dead_Belowmacron), 393},
    {sipName_Key_Dead_Belowring, static_cast<int>( ::Qt::Key_Dead_Belowring), 393},
    {sipName_Key_Dead_Belowtilde, static_cast<int>( ::Qt::Key_Dead_Belowtilde), 393},
    {sipName_Key_Dead_Belowverticalline, static_cast<int>( ::Qt::Key_Dead_Belowverticalline), 393},
    {sipName_Key_Dead_Breve, static_cast<int>( ::Qt::Key_Dead_Breve), 393},
    {sipName_Key_Dead_Capital_Schwa, static_cast<int>( ::Qt::Key_Dead_Capital_Schwa), 393},
    {sipName_Key_Dead_Caron, static_cast<int>( ::Qt::Key_Dead_Caron), 393},
    {sipName_Key_Dead_Cedilla, static_cast<int>( ::Qt::Key_Dead_Cedilla), 393},
    {sipName_Key_Dead_Circumflex, static_cast<int>( ::Qt::Key_Dead_Circumflex), 393},
    {sipName_Key_Dead_Currency, static_cast<int>( ::Qt::Key_Dead_Currency), 393},
    {sipName_Key_Dead_Diaeresis, static_cast<int>( ::Qt::Key_Dead_Diaeresis), 393},
    {sipName_Key_Dead_Doubleacute, static_cast<int>( ::Qt::Key_Dead_Doubleacute), 393},
    {sipName_Key_Dead_Doublegrave, static_cast<int>( ::Qt::Key_Dead_Doublegrave), 393},
    {sipName_Key_Dead_E, static_cast<int>( ::Qt::Key_Dead_E), 393},
    {sipName_Key_Dead_Grave, static_cast<int>( ::Qt::Key_Dead_Grave), 393},
    {sipName_Key_Dead_Greek, static_cast<int>( ::Qt::Key_Dead_Greek), 393},
    {sipName_Key_Dead_Hook, static_cast<int>( ::Qt::Key_Dead_Hook), 393},
    {sipName_Key_Dead_Horn, static_cast<int>( ::Qt::Key_Dead_Horn), 393},
    {sipName_Key_Dead_I, static_cast<int>( ::Qt::Key_Dead_I), 393},
    {sipName_Key_Dead_Invertedbreve, static_cast<int>( ::Qt::Key_Dead_Invertedbreve), 393},
    {sipName_Key_Dead_Iota, static_cast<int>( ::Qt::Key_Dead_Iota), 393},
    {sipName_Key_Dead_Longsolidusoverlay, static_cast<int>( ::Qt::Key_Dead_Longsolidusoverlay), 393},
    {sipName_Key_Dead_Lowline, static_cast<int>( ::Qt::Key_Dead_Lowline), 393},
    {sipName_Key_Dead_Macron, static_cast<int>( ::Qt::Key_Dead_Macron), 393},
    {sipName_Key_Dead_O, static_cast<int>( ::Qt::Key_Dead_O), 393},
    {sipName_Key_Dead_Ogonek, static_cast<int>( ::Qt::Key_Dead_Ogonek), 393},
    {sipName_Key_Dead_Semivoiced_Sound, static_cast<int>( ::Qt::Key_Dead_Semivoiced_Sound), 393},
    {sipName_Key_Dead_Small_Schwa, static_cast<int>( ::Qt::Key_Dead_Small_Schwa), 393},
    {sipName_Key_Dead_Stroke, static_cast<int>( ::Qt::Key_Dead_Stroke), 393},
    {sipName_Key_Dead_Tilde, static_cast<int>( ::Qt::Key_Dead_Tilde), 393},
    {sipName_Key_Dead_U, static_cast<int>( ::Qt::Key_Dead_U), 393},
    {sipName_Key_Dead_Voiced_Sound, static_cast<int>( ::Qt::Key_Dead_Voiced_Sound), 393},
    {sipName_Key_Dead_a, static_cast<int>( ::Qt::Key_Dead_a), 393},
    {sipName_Key_Dead_e, static_cast<int>( ::Qt::Key_Dead_e), 393},
    {sipName_Key_Dead_i, static_cast<int>( ::Qt::Key_Dead_i), 393},
    {sipName_Key_Dead_o, static_cast<int>( ::Qt::Key_Dead_o), 393},
    {sipName_Key_Dead_u, static_cast<int>( ::Qt::Key_Dead_u), 393},
    {sipName_Key_Delete, static_cast<int>( ::Qt::Key_Delete), 393},
    {sipName_Key_Direction_L, static_cast<int>( ::Qt::Key_Direction_L), 393},
    {sipName_Key_Direction_R, static_cast<int>( ::Qt::Key_Direction_R), 393},
    {sipName_Key_Display, static_cast<int>( ::Qt::Key_Display), 393},
    {sipName_Key_Documents, static_cast<int>( ::Qt::Key_Documents), 393},
    {sipName_Key_Dollar, static_cast<int>( ::Qt::Key_Dollar), 393},
    {sipName_Key_Down, static_cast<int>( ::Qt::Key_Down), 393},
    {sipName_Key_E, static_cast<int>( ::Qt::Key_E), 393},
    {sipName_Key_ETH, static_cast<int>( ::Qt::Key_ETH), 393},
    {sipName_Key_Eacute, static_cast<int>( ::Qt::Key_Eacute), 393},
    {sipName_Key_Ecircumflex, static_cast<int>( ::Qt::Key_Ecircumflex), 393},
    {sipName_Key_Ediaeresis, static_cast<int>( ::Qt::Key_Ediaeresis), 393},
    {sipName_Key_Egrave, static_cast<int>( ::Qt::Key_Egrave), 393},
    {sipName_Key_Eisu_Shift, static_cast<int>( ::Qt::Key_Eisu_Shift), 393},
    {sipName_Key_Eisu_toggle, static_cast<int>( ::Qt::Key_Eisu_toggle), 393},
    {sipName_Key_Eject, static_cast<int>( ::Qt::Key_Eject), 393},
    {sipName_Key_End, static_cast<int>( ::Qt::Key_End), 393},
    {sipName_Key_Enter, static_cast<int>( ::Qt::Key_Enter), 393},
    {sipName_Key_Equal, static_cast<int>( ::Qt::Key_Equal), 393},
    {sipName_Key_Escape, static_cast<int>( ::Qt::Key_Escape), 393},
    {sipName_Key_Excel, static_cast<int>( ::Qt::Key_Excel), 393},
    {sipName_Key_Exclam, static_cast<int>( ::Qt::Key_Exclam), 393},
    {sipName_Key_Execute, static_cast<int>( ::Qt::Key_Execute), 393},
    {sipName_Key_Exit, static_cast<int>( ::Qt::Key_Exit), 393},
    {sipName_Key_Explorer, static_cast<int>( ::Qt::Key_Explorer), 393},
    {sipName_Key_F, static_cast<int>( ::Qt::Key_F), 393},
    {sipName_Key_F1, static_cast<int>( ::Qt::Key_F1), 393},
    {sipName_Key_F10, static_cast<int>( ::Qt::Key_F10), 393},
    {sipName_Key_F11, static_cast<int>( ::Qt::Key_F11), 393},
    {sipName_Key_F12, static_cast<int>( ::Qt::Key_F12), 393},
    {sipName_Key_F13, static_cast<int>( ::Qt::Key_F13), 393},
    {sipName_Key_F14, static_cast<int>( ::Qt::Key_F14), 393},
    {sipName_Key_F15, static_cast<int>( ::Qt::Key_F15), 393},
    {sipName_Key_F16, static_cast<int>( ::Qt::Key_F16), 393},
    {sipName_Key_F17, static_cast<int>( ::Qt::Key_F17), 393},
    {sipName_Key_F18, static_cast<int>( ::Qt::Key_F18), 393},
    {sipName_Key_F19, static_cast<int>( ::Qt::Key_F19), 393},
    {sipName_Key_F2, static_cast<int>( ::Qt::Key_F2), 393},
    {sipName_Key_F20, static_cast<int>( ::Qt::Key_F20), 393},
    {sipName_Key_F21, static_cast<int>( ::Qt::Key_F21), 393},
    {sipName_Key_F22, static_cast<int>( ::Qt::Key_F22), 393},
    {sipName_Key_F23, static_cast<int>( ::Qt::Key_F23), 393},
    {sipName_Key_F24, static_cast<int>( ::Qt::Key_F24), 393},
    {sipName_Key_F25, static_cast<int>( ::Qt::Key_F25), 393},
    {sipName_Key_F26, static_cast<int>( ::Qt::Key_F26), 393},
    {sipName_Key_F27, static_cast<int>( ::Qt::Key_F27), 393},
    {sipName_Key_F28, static_cast<int>( ::Qt::Key_F28), 393},
    {sipName_Key_F29, static_cast<int>( ::Qt::Key_F29), 393},
    {sipName_Key_F3, static_cast<int>( ::Qt::Key_F3), 393},
    {sipName_Key_F30, static_cast<int>( ::Qt::Key_F30), 393},
    {sipName_Key_F31, static_cast<int>( ::Qt::Key_F31), 393},
    {sipName_Key_F32, static_cast<int>( ::Qt::Key_F32), 393},
    {sipName_Key_F33, static_cast<int>( ::Qt::Key_F33), 393},
    {sipName_Key_F34, static_cast<int>( ::Qt::Key_F34), 393},
    {sipName_Key_F35, static_cast<int>( ::Qt::Key_F35), 393},
    {sipName_Key_F4, static_cast<int>( ::Qt::Key_F4), 393},
    {sipName_Key_F5, static_cast<int>( ::Qt::Key_F5), 393},
    {sipName_Key_F6, static_cast<int>( ::Qt::Key_F6), 393},
    {sipName_Key_F7, static_cast<int>( ::Qt::Key_F7), 393},
    {sipName_Key_F8, static_cast<int>( ::Qt::Key_F8), 393},
    {sipName_Key_F9, static_cast<int>( ::Qt::Key_F9), 393},
    {sipName_Key_Favorites, static_cast<int>( ::Qt::Key_Favorites), 393},
    {sipName_Key_Finance, static_cast<int>( ::Qt::Key_Finance), 393},
    {sipName_Key_Find, static_cast<int>( ::Qt::Key_Find), 393},
    {sipName_Key_Flip, static_cast<int>( ::Qt::Key_Flip), 393},
    {sipName_Key_Forward, static_cast<int>( ::Qt::Key_Forward), 393},
    {sipName_Key_G, static_cast<int>( ::Qt::Key_G), 393},
    {sipName_Key_Game, static_cast<int>( ::Qt::Key_Game), 393},
    {sipName_Key_Go, static_cast<int>( ::Qt::Key_Go), 393},
    {sipName_Key_Greater, static_cast<int>( ::Qt::Key_Greater), 393},
    {sipName_Key_Green, static_cast<int>( ::Qt::Key_Green), 393},
    {sipName_Key_Guide, static_cast<int>( ::Qt::Key_Guide), 393},
    {sipName_Key_H, static_cast<int>( ::Qt::Key_H), 393},
    {sipName_Key_Hangul, static_cast<int>( ::Qt::Key_Hangul), 393},
    {sipName_Key_Hangul_Banja, static_cast<int>( ::Qt::Key_Hangul_Banja), 393},
    {sipName_Key_Hangul_End, static_cast<int>( ::Qt::Key_Hangul_End), 393},
    {sipName_Key_Hangul_Hanja, static_cast<int>( ::Qt::Key_Hangul_Hanja), 393},
    {sipName_Key_Hangul_Jamo, static_cast<int>( ::Qt::Key_Hangul_Jamo), 393},
    {sipName_Key_Hangul_Jeonja, static_cast<int>( ::Qt::Key_Hangul_Jeonja), 393},
    {sipName_Key_Hangul_PostHanja, static_cast<int>( ::Qt::Key_Hangul_PostHanja), 393},
    {sipName_Key_Hangul_PreHanja, static_cast<int>( ::Qt::Key_Hangul_PreHanja), 393},
    {sipName_Key_Hangul_Romaja, static_cast<int>( ::Qt::Key_Hangul_Romaja), 393},
    {sipName_Key_Hangul_Special, static_cast<int>( ::Qt::Key_Hangul_Special), 393},
    {sipName_Key_Hangul_Start, static_cast<int>( ::Qt::Key_Hangul_Start), 393},
    {sipName_Key_Hangup, static_cast<int>( ::Qt::Key_Hangup), 393},
    {sipName_Key_Hankaku, static_cast<int>( ::Qt::Key_Hankaku), 393},
    {sipName_Key_Help, static_cast<int>( ::Qt::Key_Help), 393},
    {sipName_Key_Henkan, static_cast<int>( ::Qt::Key_Henkan), 393},
    {sipName_Key_Hibernate, static_cast<int>( ::Qt::Key_Hibernate), 393},
    {sipName_Key_Hiragana, static_cast<int>( ::Qt::Key_Hiragana), 393},
    {sipName_Key_Hiragana_Katakana, static_cast<int>( ::Qt::Key_Hiragana_Katakana), 393},
    {sipName_Key_History, static_cast<int>( ::Qt::Key_History), 393},
    {sipName_Key_Home, static_cast<int>( ::Qt::Key_Home), 393},
    {sipName_Key_HomePage, static_cast<int>( ::Qt::Key_HomePage), 393},
    {sipName_Key_HotLinks, static_cast<int>( ::Qt::Key_HotLinks), 393},
    {sipName_Key_Hyper_L, static_cast<int>( ::Qt::Key_Hyper_L), 393},
    {sipName_Key_Hyper_R, static_cast<int>( ::Qt::Key_Hyper_R), 393},
    {sipName_Key_I, static_cast<int>( ::Qt::Key_I), 393},
    {sipName_Key_Iacute, static_cast<int>( ::Qt::Key_Iacute), 393},
    {sipName_Key_Icircumflex, static_cast<int>( ::Qt::Key_Icircumflex), 393},
    {sipName_Key_Idiaeresis, static_cast<int>( ::Qt::Key_Idiaeresis), 393},
    {sipName_Key_Igrave, static_cast<int>( ::Qt::Key_Igrave), 393},
    {sipName_Key_Info, static_cast<int>( ::Qt::Key_Info), 393},
    {sipName_Key_Insert, static_cast<int>( ::Qt::Key_Insert), 393},
    {sipName_Key_J, static_cast<int>( ::Qt::Key_J), 393},
    {sipName_Key_K, static_cast<int>( ::Qt::Key_K), 393},
    {sipName_Key_Kana_Lock, static_cast<int>( ::Qt::Key_Kana_Lock), 393},
    {sipName_Key_Kana_Shift, static_cast<int>( ::Qt::Key_Kana_Shift), 393},
    {sipName_Key_Kanji, static_cast<int>( ::Qt::Key_Kanji), 393},
    {sipName_Key_Katakana, static_cast<int>( ::Qt::Key_Katakana), 393},
    {sipName_Key_KeyboardBrightnessDown, static_cast<int>( ::Qt::Key_KeyboardBrightnessDown), 393},
    {sipName_Key_KeyboardBrightnessUp, static_cast<int>( ::Qt::Key_KeyboardBrightnessUp), 393},
    {sipName_Key_KeyboardLightOnOff, static_cast<int>( ::Qt::Key_KeyboardLightOnOff), 393},
    {sipName_Key_L, static_cast<int>( ::Qt::Key_L), 393},
    {sipName_Key_LastNumberRedial, static_cast<int>( ::Qt::Key_LastNumberRedial), 393},
    {sipName_Key_Launch0, static_cast<int>( ::Qt::Key_Launch0), 393},
    {sipName_Key_Launch1, static_cast<int>( ::Qt::Key_Launch1), 393},
    {sipName_Key_Launch2, static_cast<int>( ::Qt::Key_Launch2), 393},
    {sipName_Key_Launch3, static_cast<int>( ::Qt::Key_Launch3), 393},
    {sipName_Key_Launch4, static_cast<int>( ::Qt::Key_Launch4), 393},
    {sipName_Key_Launch5, static_cast<int>( ::Qt::Key_Launch5), 393},
    {sipName_Key_Launch6, static_cast<int>( ::Qt::Key_Launch6), 393},
    {sipName_Key_Launch7, static_cast<int>( ::Qt::Key_Launch7), 393},
    {sipName_Key_Launch8, static_cast<int>( ::Qt::Key_Launch8), 393},
    {sipName_Key_Launch9, static_cast<int>( ::Qt::Key_Launch9), 393},
    {sipName_Key_LaunchA, static_cast<int>( ::Qt::Key_LaunchA), 393},
    {sipName_Key_LaunchB, static_cast<int>( ::Qt::Key_LaunchB), 393},
    {sipName_Key_LaunchC, static_cast<int>( ::Qt::Key_LaunchC), 393},
    {sipName_Key_LaunchD, static_cast<int>( ::Qt::Key_LaunchD), 393},
    {sipName_Key_LaunchE, static_cast<int>( ::Qt::Key_LaunchE), 393},
    {sipName_Key_LaunchF, static_cast<int>( ::Qt::Key_LaunchF), 393},
    {sipName_Key_LaunchG, static_cast<int>( ::Qt::Key_LaunchG), 393},
    {sipName_Key_LaunchH, static_cast<int>( ::Qt::Key_LaunchH), 393},
    {sipName_Key_LaunchMail, static_cast<int>( ::Qt::Key_LaunchMail), 393},
    {sipName_Key_LaunchMedia, static_cast<int>( ::Qt::Key_LaunchMedia), 393},
    {sipName_Key_Left, static_cast<int>( ::Qt::Key_Left), 393},
    {sipName_Key_Less, static_cast<int>( ::Qt::Key_Less), 393},
    {sipName_Key_LightBulb, static_cast<int>( ::Qt::Key_LightBulb), 393},
    {sipName_Key_LogOff, static_cast<int>( ::Qt::Key_LogOff), 393},
    {sipName_Key_M, static_cast<int>( ::Qt::Key_M), 393},
    {sipName_Key_MailForward, static_cast<int>( ::Qt::Key_MailForward), 393},
    {sipName_Key_Market, static_cast<int>( ::Qt::Key_Market), 393},
    {sipName_Key_Massyo, static_cast<int>( ::Qt::Key_Massyo), 393},
    {sipName_Key_MediaLast, static_cast<int>( ::Qt::Key_MediaLast), 393},
    {sipName_Key_MediaNext, static_cast<int>( ::Qt::Key_MediaNext), 393},
    {sipName_Key_MediaPause, static_cast<int>( ::Qt::Key_MediaPause), 393},
    {sipName_Key_MediaPlay, static_cast<int>( ::Qt::Key_MediaPlay), 393},
    {sipName_Key_MediaPrevious, static_cast<int>( ::Qt::Key_MediaPrevious), 393},
    {sipName_Key_MediaRecord, static_cast<int>( ::Qt::Key_MediaRecord), 393},
    {sipName_Key_MediaStop, static_cast<int>( ::Qt::Key_MediaStop), 393},
    {sipName_Key_MediaTogglePlayPause, static_cast<int>( ::Qt::Key_MediaTogglePlayPause), 393},
    {sipName_Key_Meeting, static_cast<int>( ::Qt::Key_Meeting), 393},
    {sipName_Key_Memo, static_cast<int>( ::Qt::Key_Memo), 393},
    {sipName_Key_Menu, static_cast<int>( ::Qt::Key_Menu), 393},
    {sipName_Key_MenuKB, static_cast<int>( ::Qt::Key_MenuKB), 393},
    {sipName_Key_MenuPB, static_cast<int>( ::Qt::Key_MenuPB), 393},
    {sipName_Key_Messenger, static_cast<int>( ::Qt::Key_Messenger), 393},
    {sipName_Key_Meta, static_cast<int>( ::Qt::Key_Meta), 393},
    {sipName_Key_MicMute, static_cast<int>( ::Qt::Key_MicMute), 393},
    {sipName_Key_MicVolumeDown, static_cast<int>( ::Qt::Key_MicVolumeDown), 393},
    {sipName_Key_MicVolumeUp, static_cast<int>( ::Qt::Key_MicVolumeUp), 393},
    {sipName_Key_Minus, static_cast<int>( ::Qt::Key_Minus), 393},
    {sipName_Key_Mode_switch, static_cast<int>( ::Qt::Key_Mode_switch), 393},
    {sipName_Key_MonBrightnessDown, static_cast<int>( ::Qt::Key_MonBrightnessDown), 393},
    {sipName_Key_MonBrightnessUp, static_cast<int>( ::Qt::Key_MonBrightnessUp), 393},
    {sipName_Key_Muhenkan, static_cast<int>( ::Qt::Key_Muhenkan), 393},
    {sipName_Key_Multi_key, static_cast<int>( ::Qt::Key_Multi_key), 393},
    {sipName_Key_MultipleCandidate, static_cast<int>( ::Qt::Key_MultipleCandidate), 393},
    {sipName_Key_Music, static_cast<int>( ::Qt::Key_Music), 393},
    {sipName_Key_MySites, static_cast<int>( ::Qt::Key_MySites), 393},
    {sipName_Key_N, static_cast<int>( ::Qt::Key_N), 393},
    {sipName_Key_New, static_cast<int>( ::Qt::Key_New), 393},
    {sipName_Key_News, static_cast<int>( ::Qt::Key_News), 393},
    {sipName_Key_No, static_cast<int>( ::Qt::Key_No), 393},
    {sipName_Key_Ntilde, static_cast<int>( ::Qt::Key_Ntilde), 393},
    {sipName_Key_NumLock, static_cast<int>( ::Qt::Key_NumLock), 393},
    {sipName_Key_NumberSign, static_cast<int>( ::Qt::Key_NumberSign), 393},
    {sipName_Key_O, static_cast<int>( ::Qt::Key_O), 393},
    {sipName_Key_Oacute, static_cast<int>( ::Qt::Key_Oacute), 393},
    {sipName_Key_Ocircumflex, static_cast<int>( ::Qt::Key_Ocircumflex), 393},
    {sipName_Key_Odiaeresis, static_cast<int>( ::Qt::Key_Odiaeresis), 393},
    {sipName_Key_OfficeHome, static_cast<int>( ::Qt::Key_OfficeHome), 393},
    {sipName_Key_Ograve, static_cast<int>( ::Qt::Key_Ograve), 393},
    {sipName_Key_Ooblique, static_cast<int>( ::Qt::Key_Ooblique), 393},
    {sipName_Key_Open, static_cast<int>( ::Qt::Key_Open), 393},
    {sipName_Key_OpenUrl, static_cast<int>( ::Qt::Key_OpenUrl), 393},
    {sipName_Key_Option, static_cast<int>( ::Qt::Key_Option), 393},
    {sipName_Key_Otilde, static_cast<int>( ::Qt::Key_Otilde), 393},
    {sipName_Key_P, static_cast<int>( ::Qt::Key_P), 393},
    {sipName_Key_PageDown, static_cast<int>( ::Qt::Key_PageDown), 393},
    {sipName_Key_PageUp, static_cast<int>( ::Qt::Key_PageUp), 393},
    {sipName_Key_ParenLeft, static_cast<int>( ::Qt::Key_ParenLeft), 393},
    {sipName_Key_ParenRight, static_cast<int>( ::Qt::Key_ParenRight), 393},
    {sipName_Key_Paste, static_cast<int>( ::Qt::Key_Paste), 393},
    {sipName_Key_Pause, static_cast<int>( ::Qt::Key_Pause), 393},
    {sipName_Key_Percent, static_cast<int>( ::Qt::Key_Percent), 393},
    {sipName_Key_Period, static_cast<int>( ::Qt::Key_Period), 393},
    {sipName_Key_Phone, static_cast<int>( ::Qt::Key_Phone), 393},
    {sipName_Key_Pictures, static_cast<int>( ::Qt::Key_Pictures), 393},
    {sipName_Key_Play, static_cast<int>( ::Qt::Key_Play), 393},
    {sipName_Key_Plus, static_cast<int>( ::Qt::Key_Plus), 393},
    {sipName_Key_PowerDown, static_cast<int>( ::Qt::Key_PowerDown), 393},
    {sipName_Key_PowerOff, static_cast<int>( ::Qt::Key_PowerOff), 393},
    {sipName_Key_PreviousCandidate, static_cast<int>( ::Qt::Key_PreviousCandidate), 393},
    {sipName_Key_Print, static_cast<int>( ::Qt::Key_Print), 393},
    {sipName_Key_Printer, static_cast<int>( ::Qt::Key_Printer), 393},
    {sipName_Key_Q, static_cast<int>( ::Qt::Key_Q), 393},
    {sipName_Key_Question, static_cast<int>( ::Qt::Key_Question), 393},
    {sipName_Key_QuoteDbl, static_cast<int>( ::Qt::Key_QuoteDbl), 393},
    {sipName_Key_QuoteLeft, static_cast<int>( ::Qt::Key_QuoteLeft), 393},
    {sipName_Key_R, static_cast<int>( ::Qt::Key_R), 393},
    {sipName_Key_Red, static_cast<int>( ::Qt::Key_Red), 393},
    {sipName_Key_Redo, static_cast<int>( ::Qt::Key_Redo), 393},
    {sipName_Key_Refresh, static_cast<int>( ::Qt::Key_Refresh), 393},
    {sipName_Key_Reload, static_cast<int>( ::Qt::Key_Reload), 393},
    {sipName_Key_Reply, static_cast<int>( ::Qt::Key_Reply), 393},
    {sipName_Key_Return, static_cast<int>( ::Qt::Key_Return), 393},
    {sipName_Key_Right, static_cast<int>( ::Qt::Key_Right), 393},
    {sipName_Key_Romaji, static_cast<int>( ::Qt::Key_Romaji), 393},
    {sipName_Key_RotateWindows, static_cast<int>( ::Qt::Key_RotateWindows), 393},
    {sipName_Key_RotationKB, static_cast<int>( ::Qt::Key_RotationKB), 393},
    {sipName_Key_RotationPB, static_cast<int>( ::Qt::Key_RotationPB), 393},
    {sipName_Key_S, static_cast<int>( ::Qt::Key_S), 393},
    {sipName_Key_Save, static_cast<int>( ::Qt::Key_Save), 393},
    {sipName_Key_ScreenSaver, static_cast<int>( ::Qt::Key_ScreenSaver), 393},
    {sipName_Key_ScrollLock, static_cast<int>( ::Qt::Key_ScrollLock), 393},
    {sipName_Key_Search, static_cast<int>( ::Qt::Key_Search), 393},
    {sipName_Key_Select, static_cast<int>( ::Qt::Key_Select), 393},
    {sipName_Key_Semicolon, static_cast<int>( ::Qt::Key_Semicolon), 393},
    {sipName_Key_Send, static_cast<int>( ::Qt::Key_Send), 393},
    {sipName_Key_Settings, static_cast<int>( ::Qt::Key_Settings), 393},
    {sipName_Key_Shift, static_cast<int>( ::Qt::Key_Shift), 393},
    {sipName_Key_Shop, static_cast<int>( ::Qt::Key_Shop), 393},
    {sipName_Key_SingleCandidate, static_cast<int>( ::Qt::Key_SingleCandidate), 393},
    {sipName_Key_Slash, static_cast<int>( ::Qt::Key_Slash), 393},
    {sipName_Key_Sleep, static_cast<int>( ::Qt::Key_Sleep), 393},
    {sipName_Key_Space, static_cast<int>( ::Qt::Key_Space), 393},
    {sipName_Key_Spell, static_cast<int>( ::Qt::Key_Spell), 393},
    {sipName_Key_SplitScreen, static_cast<int>( ::Qt::Key_SplitScreen), 393},
    {sipName_Key_Standby, static_cast<int>( ::Qt::Key_Standby), 393},
    {sipName_Key_Stop, static_cast<int>( ::Qt::Key_Stop), 393},
    {sipName_Key_Subtitle, static_cast<int>( ::Qt::Key_Subtitle), 393},
    {sipName_Key_Super_L, static_cast<int>( ::Qt::Key_Super_L), 393},
    {sipName_Key_Super_R, static_cast<int>( ::Qt::Key_Super_R), 393},
    {sipName_Key_Support, static_cast<int>( ::Qt::Key_Support), 393},
    {sipName_Key_Suspend, static_cast<int>( ::Qt::Key_Suspend), 393},
    {sipName_Key_SysReq, static_cast<int>( ::Qt::Key_SysReq), 393},
    {sipName_Key_T, static_cast<int>( ::Qt::Key_T), 393},
    {sipName_Key_THORN, static_cast<int>( ::Qt::Key_THORN), 393},
    {sipName_Key_Tab, static_cast<int>( ::Qt::Key_Tab), 393},
    {sipName_Key_TaskPane, static_cast<int>( ::Qt::Key_TaskPane), 393},
    {sipName_Key_Terminal, static_cast<int>( ::Qt::Key_Terminal), 393},
    {sipName_Key_Time, static_cast<int>( ::Qt::Key_Time), 393},
    {sipName_Key_ToDoList, static_cast<int>( ::Qt::Key_ToDoList), 393},
    {sipName_Key_ToggleCallHangup, static_cast<int>( ::Qt::Key_ToggleCallHangup), 393},
    {sipName_Key_Tools, static_cast<int>( ::Qt::Key_Tools), 393},
    {sipName_Key_TopMenu, static_cast<int>( ::Qt::Key_TopMenu), 393},
    {sipName_Key_TouchpadOff, static_cast<int>( ::Qt::Key_TouchpadOff), 393},
    {sipName_Key_TouchpadOn, static_cast<int>( ::Qt::Key_TouchpadOn), 393},
    {sipName_Key_TouchpadToggle, static_cast<int>( ::Qt::Key_TouchpadToggle), 393},
    {sipName_Key_Touroku, static_cast<int>( ::Qt::Key_Touroku), 393},
    {sipName_Key_Travel, static_cast<int>( ::Qt::Key_Travel), 393},
    {sipName_Key_TrebleDown, static_cast<int>( ::Qt::Key_TrebleDown), 393},
    {sipName_Key_TrebleUp, static_cast<int>( ::Qt::Key_TrebleUp), 393},
    {sipName_Key_U, static_cast<int>( ::Qt::Key_U), 393},
    {sipName_Key_UWB, static_cast<int>( ::Qt::Key_UWB), 393},
    {sipName_Key_Uacute, static_cast<int>( ::Qt::Key_Uacute), 393},
    {sipName_Key_Ucircumflex, static_cast<int>( ::Qt::Key_Ucircumflex), 393},
    {sipName_Key_Udiaeresis, static_cast<int>( ::Qt::Key_Udiaeresis), 393},
    {sipName_Key_Ugrave, static_cast<int>( ::Qt::Key_Ugrave), 393},
    {sipName_Key_Underscore, static_cast<int>( ::Qt::Key_Underscore), 393},
    {sipName_Key_Undo, static_cast<int>( ::Qt::Key_Undo), 393},
    {sipName_Key_Up, static_cast<int>( ::Qt::Key_Up), 393},
    {sipName_Key_V, static_cast<int>( ::Qt::Key_V), 393},
    {sipName_Key_Video, static_cast<int>( ::Qt::Key_Video), 393},
    {sipName_Key_View, static_cast<int>( ::Qt::Key_View), 393},
    {sipName_Key_VoiceDial, static_cast<int>( ::Qt::Key_VoiceDial), 393},
    {sipName_Key_VolumeDown, static_cast<int>( ::Qt::Key_VolumeDown), 393},
    {sipName_Key_VolumeMute, static_cast<int>( ::Qt::Key_VolumeMute), 393},
    {sipName_Key_VolumeUp, static_cast<int>( ::Qt::Key_VolumeUp), 393},
    {sipName_Key_W, static_cast<int>( ::Qt::Key_W), 393},
    {sipName_Key_WLAN, static_cast<int>( ::Qt::Key_WLAN), 393},
    {sipName_Key_WWW, static_cast<int>( ::Qt::Key_WWW), 393},
    {sipName_Key_WakeUp, static_cast<int>( ::Qt::Key_WakeUp), 393},
    {sipName_Key_WebCam, static_cast<int>( ::Qt::Key_WebCam), 393},
    {sipName_Key_Word, static_cast<int>( ::Qt::Key_Word), 393},
    {sipName_Key_X, static_cast<int>( ::Qt::Key_X), 393},
    {sipName_Key_Xfer, static_cast<int>( ::Qt::Key_Xfer), 393},
    {sipName_Key_Y, static_cast<int>( ::Qt::Key_Y), 393},
    {sipName_Key_Yacute, static_cast<int>( ::Qt::Key_Yacute), 393},
    {sipName_Key_Yellow, static_cast<int>( ::Qt::Key_Yellow), 393},
    {sipName_Key_Yes, static_cast<int>( ::Qt::Key_Yes), 393},
    {sipName_Key_Z, static_cast<int>( ::Qt::Key_Z), 393},
    {sipName_Key_Zenkaku, static_cast<int>( ::Qt::Key_Zenkaku), 393},
    {sipName_Key_Zenkaku_Hankaku, static_cast<int>( ::Qt::Key_Zenkaku_Hankaku), 393},
    {sipName_Key_Zoom, static_cast<int>( ::Qt::Key_Zoom), 393},
    {sipName_Key_ZoomIn, static_cast<int>( ::Qt::Key_ZoomIn), 393},
    {sipName_Key_ZoomOut, static_cast<int>( ::Qt::Key_ZoomOut), 393},
    {sipName_Key_acute, static_cast<int>( ::Qt::Key_acute), 393},
    {sipName_Key_brokenbar, static_cast<int>( ::Qt::Key_brokenbar), 393},
    {sipName_Key_cedilla, static_cast<int>( ::Qt::Key_cedilla), 393},
    {sipName_Key_cent, static_cast<int>( ::Qt::Key_cent), 393},
    {sipName_Key_copyright, static_cast<int>( ::Qt::Key_copyright), 393},
    {sipName_Key_currency, static_cast<int>( ::Qt::Key_currency), 393},
    {sipName_Key_degree, static_cast<int>( ::Qt::Key_degree), 393},
    {sipName_Key_diaeresis, static_cast<int>( ::Qt::Key_diaeresis), 393},
    {sipName_Key_division, static_cast<int>( ::Qt::Key_division), 393},
    {sipName_Key_exclamdown, static_cast<int>( ::Qt::Key_exclamdown), 393},
    {sipName_Key_guillemotleft, static_cast<int>( ::Qt::Key_guillemotleft), 393},
    {sipName_Key_guillemotright, static_cast<int>( ::Qt::Key_guillemotright), 393},
    {sipName_Key_hyphen, static_cast<int>( ::Qt::Key_hyphen), 393},
    {sipName_Key_iTouch, static_cast<int>( ::Qt::Key_iTouch), 393},
    {sipName_Key_macron, static_cast<int>( ::Qt::Key_macron), 393},
    {sipName_Key_masculine, static_cast<int>( ::Qt::Key_masculine), 393},
    {sipName_Key_mu, static_cast<int>( ::Qt::Key_mu), 393},
    {sipName_Key_multiply, static_cast<int>( ::Qt::Key_multiply), 393},
    {sipName_Key_nobreakspace, static_cast<int>( ::Qt::Key_nobreakspace), 393},
    {sipName_Key_notsign, static_cast<int>( ::Qt::Key_notsign), 393},
    {sipName_Key_onehalf, static_cast<int>( ::Qt::Key_onehalf), 393},
    {sipName_Key_onequarter, static_cast<int>( ::Qt::Key_onequarter), 393},
    {sipName_Key_onesuperior, static_cast<int>( ::Qt::Key_onesuperior), 393},
    {sipName_Key_ordfeminine, static_cast<int>( ::Qt::Key_ordfeminine), 393},
    {sipName_Key_paragraph, static_cast<int>( ::Qt::Key_paragraph), 393},
    {sipName_Key_periodcentered, static_cast<int>( ::Qt::Key_periodcentered), 393},
    {sipName_Key_plusminus, static_cast<int>( ::Qt::Key_plusminus), 393},
    {sipName_Key_questiondown, static_cast<int>( ::Qt::Key_questiondown), 393},
    {sipName_Key_registered, static_cast<int>( ::Qt::Key_registered), 393},
    {sipName_Key_section, static_cast<int>( ::Qt::Key_section), 393},
    {sipName_Key_ssharp, static_cast<int>( ::Qt::Key_ssharp), 393},
    {sipName_Key_sterling, static_cast<int>( ::Qt::Key_sterling), 393},
    {sipName_Key_threequarters, static_cast<int>( ::Qt::Key_threequarters), 393},
    {sipName_Key_threesuperior, static_cast<int>( ::Qt::Key_threesuperior), 393},
    {sipName_Key_twosuperior, static_cast<int>( ::Qt::Key_twosuperior), 393},
    {sipName_Key_unknown, static_cast<int>( ::Qt::Key_unknown), 393},
    {sipName_Key_ydiaeresis, static_cast<int>( ::Qt::Key_ydiaeresis), 393},
    {sipName_Key_yen, static_cast<int>( ::Qt::Key_yen), 393},
    {sipName_KeyboardModifierMask, static_cast<int>( ::Qt::KeyboardModifierMask), 394},
    {sipName_KeypadModifier, static_cast<int>( ::Qt::KeypadModifier), 394},
    {sipName_LandscapeOrientation, static_cast<int>( ::Qt::LandscapeOrientation), 413},
    {sipName_LastCursor, static_cast<int>( ::Qt::LastCursor), 360},
    {sipName_LayoutDirectionAuto, static_cast<int>( ::Qt::LayoutDirectionAuto), 396},
    {sipName_LeftArrow, static_cast<int>( ::Qt::LeftArrow), 346},
    {sipName_LeftButton, static_cast<int>( ::Qt::LeftButton), 401},
    {sipName_LeftDockWidgetArea, static_cast<int>( ::Qt::LeftDockWidgetArea), 363},
    {sipName_LeftEdge, static_cast<int>( ::Qt::LeftEdge), 367},
    {sipName_LeftSection, static_cast<int>( ::Qt::LeftSection), 440},
    {sipName_LeftToRight, static_cast<int>( ::Qt::LeftToRight), 396},
    {sipName_LeftToolBarArea, static_cast<int>( ::Qt::LeftToolBarArea), 430},
    {sipName_LinearGradientPattern, static_cast<int>( ::Qt::LinearGradientPattern), 350},
    {sipName_LinkAction, static_cast<int>( ::Qt::LinkAction), 365},
    {sipName_LinksAccessibleByKeyboard, static_cast<int>( ::Qt::LinksAccessibleByKeyboard), 425},
    {sipName_LinksAccessibleByMouse, static_cast<int>( ::Qt::LinksAccessibleByMouse), 425},
    {sipName_LocalDate, static_cast<int>( ::Qt::LocalDate), 361},
    {sipName_LocalTime, static_cast<int>( ::Qt::LocalTime), 428},
    {sipName_LocaleDate, static_cast<int>( ::Qt::LocaleDate), 361},
    {sipName_LogicalCoordinates, static_cast<int>( ::Qt::LogicalCoordinates), 357},
    {sipName_LogicalMoveStyle, static_cast<int>( ::Qt::LogicalMoveStyle), 359},
    {sipName_LowEventPriority, static_cast<int>( ::Qt::LowEventPriority), 370},
    {sipName_META, static_cast<int>( ::Qt::META), 400},
    {sipName_MODIFIER_MASK, static_cast<int>( ::Qt::MODIFIER_MASK), 400},
    {sipName_MPenCapStyle, static_cast<int>( ::Qt::MPenCapStyle), 410},
    {sipName_MPenJoinStyle, static_cast<int>( ::Qt::MPenJoinStyle), 411},
    {sipName_MPenStyle, static_cast<int>( ::Qt::MPenStyle), 412},
    {sipName_MSWindowsFixedSizeDialogHint, static_cast<int>( ::Qt::MSWindowsFixedSizeDialogHint), 444},
    {sipName_MSWindowsOwnDC, static_cast<int>( ::Qt::MSWindowsOwnDC), 444},
    {sipName_MacWindowToolBarButtonHint, static_cast<int>( ::Qt::MacWindowToolBarButtonHint), 444},
    {sipName_MaskInColor, static_cast<int>( ::Qt::MaskInColor), 397},
    {sipName_MaskOutColor, static_cast<int>( ::Qt::MaskOutColor), 397},
    {sipName_MatchCaseSensitive, static_cast<int>( ::Qt::MatchCaseSensitive), 398},
    {sipName_MatchContains, static_cast<int>( ::Qt::MatchContains), 398},
    {sipName_MatchEndsWith, static_cast<int>( ::Qt::MatchEndsWith), 398},
    {sipName_MatchExactly, static_cast<int>( ::Qt::MatchExactly), 398},
    {sipName_MatchFixedString, static_cast<int>( ::Qt::MatchFixedString), 398},
    {sipName_MatchRecursive, static_cast<int>( ::Qt::MatchRecursive), 398},
    {sipName_MatchRegExp, static_cast<int>( ::Qt::MatchRegExp), 398},
    {sipName_MatchStartsWith, static_cast<int>( ::Qt::MatchStartsWith), 398},
    {sipName_MatchWildcard, static_cast<int>( ::Qt::MatchWildcard), 398},
    {sipName_MatchWrap, static_cast<int>( ::Qt::MatchWrap), 398},
    {sipName_MaximizeUsingFullscreenGeometryHint, static_cast<int>( ::Qt::MaximizeUsingFullscreenGeometryHint), 444},
    {sipName_MaximumSize, static_cast<int>( ::Qt::MaximumSize), 418},
    {sipName_MenuBarFocusReason, static_cast<int>( ::Qt::MenuBarFocusReason), 375},
    {sipName_MetaModifier, static_cast<int>( ::Qt::MetaModifier), 394},
    {sipName_MidButton, static_cast<int>( ::Qt::MidButton), 401},
    {sipName_MiddleButton, static_cast<int>( ::Qt::MiddleButton), 401},
    {sipName_MinimumDescent, static_cast<int>( ::Qt::MinimumDescent), 418},
    {sipName_MinimumSize, static_cast<int>( ::Qt::MinimumSize), 418},
    {sipName_MiterJoin, static_cast<int>( ::Qt::MiterJoin), 411},
    {sipName_Monday, static_cast<int>( ::Qt::Monday), 362},
    {sipName_MonoOnly, static_cast<int>( ::Qt::MonoOnly), 382},
    {sipName_MouseEventCreatedDoubleClick, static_cast<int>( ::Qt::MouseEventCreatedDoubleClick), 403},
    {sipName_MouseEventNotSynthesized, static_cast<int>( ::Qt::MouseEventNotSynthesized), 405},
    {sipName_MouseEventSynthesizedByApplication, static_cast<int>( ::Qt::MouseEventSynthesizedByApplication), 405},
    {sipName_MouseEventSynthesizedByQt, static_cast<int>( ::Qt::MouseEventSynthesizedByQt), 405},
    {sipName_MouseEventSynthesizedBySystem, static_cast<int>( ::Qt::MouseEventSynthesizedBySystem), 405},
    {sipName_MouseFocusReason, static_cast<int>( ::Qt::MouseFocusReason), 375},
    {sipName_MoveAction, static_cast<int>( ::Qt::MoveAction), 365},
    {sipName_NavigationModeCursorAuto, static_cast<int>( ::Qt::NavigationModeCursorAuto), 407},
    {sipName_NavigationModeCursorForceVisible, static_cast<int>( ::Qt::NavigationModeCursorForceVisible), 407},
    {sipName_NavigationModeKeypadDirectional, static_cast<int>( ::Qt::NavigationModeKeypadDirectional), 407},
    {sipName_NavigationModeKeypadTabOrder, static_cast<int>( ::Qt::NavigationModeKeypadTabOrder), 407},
    {sipName_NavigationModeNone, static_cast<int>( ::Qt::NavigationModeNone), 407},
    {sipName_NoArrow, static_cast<int>( ::Qt::NoArrow), 346},
    {sipName_NoBrush, static_cast<int>( ::Qt::NoBrush), 350},
    {sipName_NoButton, static_cast<int>( ::Qt::NoButton), 401},
    {sipName_NoClip, static_cast<int>( ::Qt::NoClip), 354},
    {sipName_NoContextMenu, static_cast<int>( ::Qt::NoContextMenu), 356},
    {sipName_NoDockWidgetArea, static_cast<int>( ::Qt::NoDockWidgetArea), 363},
    {sipName_NoDropShadowWindowHint, static_cast<int>( ::Qt::NoDropShadowWindowHint), 444},
    {sipName_NoFocus, static_cast<int>( ::Qt::NoFocus), 374},
    {sipName_NoFocusReason, static_cast<int>( ::Qt::NoFocusReason), 375},
    {sipName_NoFormatConversion, static_cast<int>( ::Qt::NoFormatConversion), 382},
    {sipName_NoItemFlags, static_cast<int>( ::Qt::NoItemFlags), 389},
    {sipName_NoModifier, static_cast<int>( ::Qt::NoModifier), 394},
    {sipName_NoOpaqueDetection, static_cast<int>( ::Qt::NoOpaqueDetection), 382},
    {sipName_NoPen, static_cast<int>( ::Qt::NoPen), 412},
    {sipName_NoScrollPhase, static_cast<int>( ::Qt::NoScrollPhase), 416},
    {sipName_NoSection, static_cast<int>( ::Qt::NoSection), 440},
    {sipName_NoTabFocus, static_cast<int>( ::Qt::NoTabFocus), 421},
    {sipName_NoTextInteraction, static_cast<int>( ::Qt::NoTextInteraction), 425},
    {sipName_NoToolBarArea, static_cast<int>( ::Qt::NoToolBarArea), 430},
    {sipName_NonModal, static_cast<int>( ::Qt::NonModal), 441},
    {sipName_NormalEventPriority, static_cast<int>( ::Qt::NormalEventPriority), 370},
    {sipName_OddEvenFill, static_cast<int>( ::Qt::OddEvenFill), 371},
    {sipName_OffsetFromUTC, static_cast<int>( ::Qt::OffsetFromUTC), 428},
    {sipName_OpaqueMode, static_cast<int>( ::Qt::OpaqueMode), 349},
    {sipName_OpenHandCursor, static_cast<int>( ::Qt::OpenHandCursor), 360},
    {sipName_OrderedAlphaDither, static_cast<int>( ::Qt::OrderedAlphaDither), 382},
    {sipName_OrderedDither, static_cast<int>( ::Qt::OrderedDither), 382},
    {sipName_OtherFocusReason, static_cast<int>( ::Qt::OtherFocusReason), 375},
    {sipName_PanGesture, static_cast<int>( ::Qt::PanGesture), 379},
    {sipName_PanNativeGesture, static_cast<int>( ::Qt::PanNativeGesture), 406},
    {sipName_PartiallyChecked, static_cast<int>( ::Qt::PartiallyChecked), 352},
    {sipName_PinchGesture, static_cast<int>( ::Qt::PinchGesture), 379},
    {sipName_PlainText, static_cast<int>( ::Qt::PlainText), 424},
    {sipName_PointingHandCursor, static_cast<int>( ::Qt::PointingHandCursor), 360},
    {sipName_Popup, static_cast<int>( ::Qt::Popup), 444},
    {sipName_PopupFocusReason, static_cast<int>( ::Qt::PopupFocusReason), 375},
    {sipName_PortraitOrientation, static_cast<int>( ::Qt::PortraitOrientation), 413},
    {sipName_PreciseTimer, static_cast<int>( ::Qt::PreciseTimer), 429},
    {sipName_PreferDither, static_cast<int>( ::Qt::PreferDither), 382},
    {sipName_PreferredSize, static_cast<int>( ::Qt::PreferredSize), 418},
    {sipName_PreventContextMenu, static_cast<int>( ::Qt::PreventContextMenu), 356},
    {sipName_PrimaryOrientation, static_cast<int>( ::Qt::PrimaryOrientation), 413},
    {sipName_QueuedConnection, static_cast<int>( ::Qt::QueuedConnection), 355},
    {sipName_RFC2822Date, static_cast<int>( ::Qt::RFC2822Date), 361},
    {sipName_RadialGradientPattern, static_cast<int>( ::Qt::RadialGradientPattern), 350},
    {sipName_ReceivePartialGestures, static_cast<int>( ::Qt::ReceivePartialGestures), 376},
    {sipName_RelativeSize, static_cast<int>( ::Qt::RelativeSize), 419},
    {sipName_RepeatTile, static_cast<int>( ::Qt::RepeatTile), 427},
    {sipName_ReplaceClip, static_cast<int>( ::Qt::ReplaceClip), 354},
    {sipName_ReplaceSelection, static_cast<int>( ::Qt::ReplaceSelection), 392},
    {sipName_RichText, static_cast<int>( ::Qt::RichText), 424},
    {sipName_RightArrow, static_cast<int>( ::Qt::RightArrow), 346},
    {sipName_RightButton, static_cast<int>( ::Qt::RightButton), 401},
    {sipName_RightDockWidgetArea, static_cast<int>( ::Qt::RightDockWidgetArea), 363},
    {sipName_RightEdge, static_cast<int>( ::Qt::RightEdge), 367},
    {sipName_RightSection, static_cast<int>( ::Qt::RightSection), 440},
    {sipName_RightToLeft, static_cast<int>( ::Qt::RightToLeft), 396},
    {sipName_RightToolBarArea, static_cast<int>( ::Qt::RightToolBarArea), 430},
    {sipName_RotateNativeGesture, static_cast<int>( ::Qt::RotateNativeGesture), 406},
    {sipName_RoundCap, static_cast<int>( ::Qt::RoundCap), 410},
    {sipName_RoundJoin, static_cast<int>( ::Qt::RoundJoin), 411},
    {sipName_RoundTile, static_cast<int>( ::Qt::RoundTile), 427},
    {sipName_SHIFT, static_cast<int>( ::Qt::SHIFT), 400},
    {sipName_Saturday, static_cast<int>( ::Qt::Saturday), 362},
    {sipName_ScrollBarAlwaysOff, static_cast<int>( ::Qt::ScrollBarAlwaysOff), 415},
    {sipName_ScrollBarAlwaysOn, static_cast<int>( ::Qt::ScrollBarAlwaysOn), 415},
    {sipName_ScrollBarAsNeeded, static_cast<int>( ::Qt::ScrollBarAsNeeded), 415},
    {sipName_ScrollBegin, static_cast<int>( ::Qt::ScrollBegin), 416},
    {sipName_ScrollEnd, static_cast<int>( ::Qt::ScrollEnd), 416},
    {sipName_ScrollMomentum, static_cast<int>( ::Qt::ScrollMomentum), 416},
    {sipName_ScrollUpdate, static_cast<int>( ::Qt::ScrollUpdate), 416},
    {sipName_Sheet, static_cast<int>( ::Qt::Sheet), 444},
    {sipName_ShiftModifier, static_cast<int>( ::Qt::ShiftModifier), 394},
    {sipName_ShortcutFocusReason, static_cast<int>( ::Qt::ShortcutFocusReason), 375},
    {sipName_SizeAllCursor, static_cast<int>( ::Qt::SizeAllCursor), 360},
    {sipName_SizeBDiagCursor, static_cast<int>( ::Qt::SizeBDiagCursor), 360},
    {sipName_SizeFDiagCursor, static_cast<int>( ::Qt::SizeFDiagCursor), 360},
    {sipName_SizeHintRole, static_cast<int>( ::Qt::SizeHintRole), 388},
    {sipName_SizeHorCursor, static_cast<int>( ::Qt::SizeHorCursor), 360},
    {sipName_SizeVerCursor, static_cast<int>( ::Qt::SizeVerCursor), 360},
    {sipName_SmartZoomNativeGesture, static_cast<int>( ::Qt::SmartZoomNativeGesture), 406},
    {sipName_SmoothTransformation, static_cast<int>( ::Qt::SmoothTransformation), 435},
    {sipName_SolidLine, static_cast<int>( ::Qt::SolidLine), 412},
    {sipName_SolidPattern, static_cast<int>( ::Qt::SolidPattern), 350},
    {sipName_SplashScreen, static_cast<int>( ::Qt::SplashScreen), 444},
    {sipName_SplitHCursor, static_cast<int>( ::Qt::SplitHCursor), 360},
    {sipName_SplitVCursor, static_cast<int>( ::Qt::SplitVCursor), 360},
    {sipName_SquareCap, static_cast<int>( ::Qt::SquareCap), 410},
    {sipName_StatusTipRole, static_cast<int>( ::Qt::StatusTipRole), 388},
    {sipName_StretchTile, static_cast<int>( ::Qt::StretchTile), 427},
    {sipName_StrongFocus, static_cast<int>( ::Qt::StrongFocus), 374},
    {sipName_SubWindow, static_cast<int>( ::Qt::SubWindow), 444},
    {sipName_Sunday, static_cast<int>( ::Qt::Sunday), 362},
    {sipName_SvgMiterJoin, static_cast<int>( ::Qt::SvgMiterJoin), 411},
    {sipName_SwipeGesture, static_cast<int>( ::Qt::SwipeGesture), 379},
    {sipName_SwipeNativeGesture, static_cast<int>( ::Qt::SwipeNativeGesture), 406},
    {sipName_SystemLocaleDate, static_cast<int>( ::Qt::SystemLocaleDate), 361},
    {sipName_SystemLocaleLongDate, static_cast<int>( ::Qt::SystemLocaleLongDate), 361},
    {sipName_SystemLocaleShortDate, static_cast<int>( ::Qt::SystemLocaleShortDate), 361},
    {sipName_TabFocus, static_cast<int>( ::Qt::TabFocus), 374},
    {sipName_TabFocusAllControls, static_cast<int>( ::Qt::TabFocusAllControls), 421},
    {sipName_TabFocusListControls, static_cast<int>( ::Qt::TabFocusListControls), 421},
    {sipName_TabFocusReason, static_cast<int>( ::Qt::TabFocusReason), 375},
    {sipName_TabFocusTextControls, static_cast<int>( ::Qt::TabFocusTextControls), 421},
    {sipName_TapAndHoldGesture, static_cast<int>( ::Qt::TapAndHoldGesture), 379},
    {sipName_TapGesture, static_cast<int>( ::Qt::TapGesture), 379},
    {sipName_TargetMoveAction, static_cast<int>( ::Qt::TargetMoveAction), 365},
    {sipName_TaskButton, static_cast<int>( ::Qt::TaskButton), 401},
    {sipName_TextAlignmentRole, static_cast<int>( ::Qt::TextAlignmentRole), 388},
    {sipName_TextBrowserInteraction, static_cast<int>( ::Qt::TextBrowserInteraction), 425},
    {sipName_TextColorRole, static_cast<int>( ::Qt::TextColorRole), 388},
    {sipName_TextDate, static_cast<int>( ::Qt::TextDate), 361},
    {sipName_TextDontClip, static_cast<int>( ::Qt::TextDontClip), 423},
    {sipName_TextDontPrint, static_cast<int>( ::Qt::TextDontPrint), 423},
    {sipName_TextEditable, static_cast<int>( ::Qt::TextEditable), 425},
    {sipName_TextEditorInteraction, static_cast<int>( ::Qt::TextEditorInteraction), 425},
    {sipName_TextExpandTabs, static_cast<int>( ::Qt::TextExpandTabs), 423},
    {sipName_TextHideMnemonic, static_cast<int>( ::Qt::TextHideMnemonic), 423},
    {sipName_TextIncludeTrailingSpaces, static_cast<int>( ::Qt::TextIncludeTrailingSpaces), 423},
    {sipName_TextJustificationForced, static_cast<int>( ::Qt::TextJustificationForced), 423},
    {sipName_TextSelectableByKeyboard, static_cast<int>( ::Qt::TextSelectableByKeyboard), 425},
    {sipName_TextSelectableByMouse, static_cast<int>( ::Qt::TextSelectableByMouse), 425},
    {sipName_TextShowMnemonic, static_cast<int>( ::Qt::TextShowMnemonic), 423},
    {sipName_TextSingleLine, static_cast<int>( ::Qt::TextSingleLine), 423},
    {sipName_TextWordWrap, static_cast<int>( ::Qt::TextWordWrap), 423},
    {sipName_TextWrapAnywhere, static_cast<int>( ::Qt::TextWrapAnywhere), 423},
    {sipName_TexturePattern, static_cast<int>( ::Qt::TexturePattern), 350},
    {sipName_ThresholdAlphaDither, static_cast<int>( ::Qt::ThresholdAlphaDither), 382},
    {sipName_ThresholdDither, static_cast<int>( ::Qt::ThresholdDither), 382},
    {sipName_Thursday, static_cast<int>( ::Qt::Thursday), 362},
    {sipName_TimeZone, static_cast<int>( ::Qt::TimeZone), 428},
    {sipName_TitleBarArea, static_cast<int>( ::Qt::TitleBarArea), 440},
    {sipName_Tool, static_cast<int>( ::Qt::Tool), 444},
    {sipName_ToolBarArea_Mask, static_cast<int>( ::Qt::ToolBarArea_Mask), 430},
    {sipName_ToolButtonFollowStyle, static_cast<int>( ::Qt::ToolButtonFollowStyle), 432},
    {sipName_ToolButtonIconOnly, static_cast<int>( ::Qt::ToolButtonIconOnly), 432},
    {sipName_ToolButtonTextBesideIcon, static_cast<int>( ::Qt::ToolButtonTextBesideIcon), 432},
    {sipName_ToolButtonTextOnly, static_cast<int>( ::Qt::ToolButtonTextOnly), 432},
    {sipName_ToolButtonTextUnderIcon, static_cast<int>( ::Qt::ToolButtonTextUnderIcon), 432},
    {sipName_ToolTip, static_cast<int>( ::Qt::ToolTip), 444},
    {sipName_ToolTipRole, static_cast<int>( ::Qt::ToolTipRole), 388},
    {sipName_TopDockWidgetArea, static_cast<int>( ::Qt::TopDockWidgetArea), 363},
    {sipName_TopEdge, static_cast<int>( ::Qt::TopEdge), 367},
    {sipName_TopLeftCorner, static_cast<int>( ::Qt::TopLeftCorner), 358},
    {sipName_TopLeftSection, static_cast<int>( ::Qt::TopLeftSection), 440},
    {sipName_TopRightCorner, static_cast<int>( ::Qt::TopRightCorner), 358},
    {sipName_TopRightSection, static_cast<int>( ::Qt::TopRightSection), 440},
    {sipName_TopSection, static_cast<int>( ::Qt::TopSection), 440},
    {sipName_TopToolBarArea, static_cast<int>( ::Qt::TopToolBarArea), 430},
    {sipName_TouchPointMoved, static_cast<int>( ::Qt::TouchPointMoved), 433},
    {sipName_TouchPointPressed, static_cast<int>( ::Qt::TouchPointPressed), 433},
    {sipName_TouchPointReleased, static_cast<int>( ::Qt::TouchPointReleased), 433},
    {sipName_TouchPointStationary, static_cast<int>( ::Qt::TouchPointStationary), 433},
    {sipName_TransparentMode, static_cast<int>( ::Qt::TransparentMode), 349},
    {sipName_Tuesday, static_cast<int>( ::Qt::Tuesday), 362},
    {sipName_UI_AnimateCombo, static_cast<int>( ::Qt::UI_AnimateCombo), 436},
    {sipName_UI_AnimateMenu, static_cast<int>( ::Qt::UI_AnimateMenu), 436},
    {sipName_UI_AnimateToolBox, static_cast<int>( ::Qt::UI_AnimateToolBox), 436},
    {sipName_UI_AnimateTooltip, static_cast<int>( ::Qt::UI_AnimateTooltip), 436},
    {sipName_UI_FadeMenu, static_cast<int>( ::Qt::UI_FadeMenu), 436},
    {sipName_UI_FadeTooltip, static_cast<int>( ::Qt::UI_FadeTooltip), 436},
    {sipName_UI_General, static_cast<int>( ::Qt::UI_General), 436},
    {sipName_UNICODE_ACCEL, static_cast<int>( ::Qt::UNICODE_ACCEL), 400},
    {sipName_UTC, static_cast<int>( ::Qt::UTC), 428},
    {sipName_Unchecked, static_cast<int>( ::Qt::Unchecked), 352},
    {sipName_UniqueConnection, static_cast<int>( ::Qt::UniqueConnection), 355},
    {sipName_UpArrow, static_cast<int>( ::Qt::UpArrow), 346},
    {sipName_UpArrowCursor, static_cast<int>( ::Qt::UpArrowCursor), 360},
    {sipName_UserRole, static_cast<int>( ::Qt::UserRole), 388},
    {sipName_VerPattern, static_cast<int>( ::Qt::VerPattern), 350},
    {sipName_Vertical, static_cast<int>( ::Qt::Vertical), 408},
    {sipName_VeryCoarseTimer, static_cast<int>( ::Qt::VeryCoarseTimer), 429},
    {sipName_VisualMoveStyle, static_cast<int>( ::Qt::VisualMoveStyle), 359},
    {sipName_WA_AcceptDrops, static_cast<int>( ::Qt::WA_AcceptDrops), 438},
    {sipName_WA_AcceptTouchEvents, static_cast<int>( ::Qt::WA_AcceptTouchEvents), 438},
    {sipName_WA_AlwaysShowToolTips, static_cast<int>( ::Qt::WA_AlwaysShowToolTips), 438},
    {sipName_WA_AlwaysStackOnTop, static_cast<int>( ::Qt::WA_AlwaysStackOnTop), 438},
    {sipName_WA_AttributeCount, static_cast<int>( ::Qt::WA_AttributeCount), 438},
    {sipName_WA_CustomWhatsThis, static_cast<int>( ::Qt::WA_CustomWhatsThis), 438},
    {sipName_WA_DeleteOnClose, static_cast<int>( ::Qt::WA_DeleteOnClose), 438},
    {sipName_WA_Disabled, static_cast<int>( ::Qt::WA_Disabled), 438},
    {sipName_WA_DontCreateNativeAncestors, static_cast<int>( ::Qt::WA_DontCreateNativeAncestors), 438},
    {sipName_WA_DontShowOnScreen, static_cast<int>( ::Qt::WA_DontShowOnScreen), 438},
    {sipName_WA_ForceDisabled, static_cast<int>( ::Qt::WA_ForceDisabled), 438},
    {sipName_WA_ForceUpdatesDisabled, static_cast<int>( ::Qt::WA_ForceUpdatesDisabled), 438},
    {sipName_WA_GrabbedShortcut, static_cast<int>( ::Qt::WA_GrabbedShortcut), 438},
    {sipName_WA_GroupLeader, static_cast<int>( ::Qt::WA_GroupLeader), 438},
    {sipName_WA_Hover, static_cast<int>( ::Qt::WA_Hover), 438},
    {sipName_WA_InputMethodEnabled, static_cast<int>( ::Qt::WA_InputMethodEnabled), 438},
    {sipName_WA_InputMethodTransparent, static_cast<int>( ::Qt::WA_InputMethodTransparent), 438},
    {sipName_WA_InvalidSize, static_cast<int>( ::Qt::WA_InvalidSize), 438},
    {sipName_WA_KeyCompression, static_cast<int>( ::Qt::WA_KeyCompression), 438},
    {sipName_WA_KeyboardFocusChange, static_cast<int>( ::Qt::WA_KeyboardFocusChange), 438},
    {sipName_WA_LaidOut, static_cast<int>( ::Qt::WA_LaidOut), 438},
    {sipName_WA_LayoutOnEntireRect, static_cast<int>( ::Qt::WA_LayoutOnEntireRect), 438},
    {sipName_WA_LayoutUsesWidgetRect, static_cast<int>( ::Qt::WA_LayoutUsesWidgetRect), 438},
    {sipName_WA_MSWindowsUseDirect3D, static_cast<int>( ::Qt::WA_MSWindowsUseDirect3D), 438},
    {sipName_WA_MacAlwaysShowToolWindow, static_cast<int>( ::Qt::WA_MacAlwaysShowToolWindow), 438},
    {sipName_WA_MacBrushedMetal, static_cast<int>( ::Qt::WA_MacBrushedMetal), 438},
    {sipName_WA_MacFrameworkScaled, static_cast<int>( ::Qt::WA_MacFrameworkScaled), 438},
    {sipName_WA_MacMetalStyle, static_cast<int>( ::Qt::WA_MacMetalStyle), 438},
    {sipName_WA_MacMiniSize, static_cast<int>( ::Qt::WA_MacMiniSize), 438},
    {sipName_WA_MacNoClickThrough, static_cast<int>( ::Qt::WA_MacNoClickThrough), 438},
    {sipName_WA_MacNoShadow, static_cast<int>( ::Qt::WA_MacNoShadow), 438},
    {sipName_WA_MacNormalSize, static_cast<int>( ::Qt::WA_MacNormalSize), 438},
    {sipName_WA_MacOpaqueSizeGrip, static_cast<int>( ::Qt::WA_MacOpaqueSizeGrip), 438},
    {sipName_WA_MacShowFocusRect, static_cast<int>( ::Qt::WA_MacShowFocusRect), 438},
    {sipName_WA_MacSmallSize, static_cast<int>( ::Qt::WA_MacSmallSize), 438},
    {sipName_WA_MacVariableSize, static_cast<int>( ::Qt::WA_MacVariableSize), 438},
    {sipName_WA_Mapped, static_cast<int>( ::Qt::WA_Mapped), 438},
    {sipName_WA_MouseNoMask, static_cast<int>( ::Qt::WA_MouseNoMask), 438},
    {sipName_WA_MouseTracking, static_cast<int>( ::Qt::WA_MouseTracking), 438},
    {sipName_WA_Moved, static_cast<int>( ::Qt::WA_Moved), 438},
    {sipName_WA_NativeWindow, static_cast<int>( ::Qt::WA_NativeWindow), 438},
    {sipName_WA_NoChildEventsForParent, static_cast<int>( ::Qt::WA_NoChildEventsForParent), 438},
    {sipName_WA_NoChildEventsFromChildren, static_cast<int>( ::Qt::WA_NoChildEventsFromChildren), 438},
    {sipName_WA_NoMousePropagation, static_cast<int>( ::Qt::WA_NoMousePropagation), 438},
    {sipName_WA_NoMouseReplay, static_cast<int>( ::Qt::WA_NoMouseReplay), 438},
    {sipName_WA_NoSystemBackground, static_cast<int>( ::Qt::WA_NoSystemBackground), 438},
    {sipName_WA_NoX11EventCompression, static_cast<int>( ::Qt::WA_NoX11EventCompression), 438},
    {sipName_WA_OpaquePaintEvent, static_cast<int>( ::Qt::WA_OpaquePaintEvent), 438},
    {sipName_WA_OutsideWSRange, static_cast<int>( ::Qt::WA_OutsideWSRange), 438},
    {sipName_WA_PaintOnScreen, static_cast<int>( ::Qt::WA_PaintOnScreen), 438},
    {sipName_WA_PaintUnclipped, static_cast<int>( ::Qt::WA_PaintUnclipped), 438},
    {sipName_WA_PendingMoveEvent, static_cast<int>( ::Qt::WA_PendingMoveEvent), 438},
    {sipName_WA_PendingResizeEvent, static_cast<int>( ::Qt::WA_PendingResizeEvent), 438},
    {sipName_WA_PendingUpdate, static_cast<int>( ::Qt::WA_PendingUpdate), 438},
    {sipName_WA_QuitOnClose, static_cast<int>( ::Qt::WA_QuitOnClose), 438},
    {sipName_WA_Resized, static_cast<int>( ::Qt::WA_Resized), 438},
    {sipName_WA_RightToLeft, static_cast<int>( ::Qt::WA_RightToLeft), 438},
    {sipName_WA_SetCursor, static_cast<int>( ::Qt::WA_SetCursor), 438},
    {sipName_WA_SetFont, static_cast<int>( ::Qt::WA_SetFont), 438},
    {sipName_WA_SetLayoutDirection, static_cast<int>( ::Qt::WA_SetLayoutDirection), 438},
    {sipName_WA_SetLocale, static_cast<int>( ::Qt::WA_SetLocale), 438},
    {sipName_WA_SetPalette, static_cast<int>( ::Qt::WA_SetPalette), 438},
    {sipName_WA_SetStyle, static_cast<int>( ::Qt::WA_SetStyle), 438},
    {sipName_WA_SetWindowIcon, static_cast<int>( ::Qt::WA_SetWindowIcon), 438},
    {sipName_WA_ShowWithoutActivating, static_cast<int>( ::Qt::WA_ShowWithoutActivating), 438},
    {sipName_WA_StaticContents, static_cast<int>( ::Qt::WA_StaticContents), 438},
    {sipName_WA_StyleSheet, static_cast<int>( ::Qt::WA_StyleSheet), 438},
    {sipName_WA_StyleSheetTarget, static_cast<int>( ::Qt::WA_StyleSheetTarget), 438},
    {sipName_WA_StyledBackground, static_cast<int>( ::Qt::WA_StyledBackground), 438},
    {sipName_WA_TabletTracking, static_cast<int>( ::Qt::WA_TabletTracking), 438},
    {sipName_WA_TintedBackground, static_cast<int>( ::Qt::WA_TintedBackground), 438},
    {sipName_WA_TouchPadAcceptSingleTouchEvents, static_cast<int>( ::Qt::WA_TouchPadAcceptSingleTouchEvents), 438},
    {sipName_WA_TranslucentBackground, static_cast<int>( ::Qt::WA_TranslucentBackground), 438},
    {sipName_WA_TransparentForMouseEvents, static_cast<int>( ::Qt::WA_TransparentForMouseEvents), 438},
    {sipName_WA_UnderMouse, static_cast<int>( ::Qt::WA_UnderMouse), 438},
    {sipName_WA_UpdatesDisabled, static_cast<int>( ::Qt::WA_UpdatesDisabled), 438},
    {sipName_WA_WState_CompressKeys, static_cast<int>( ::Qt::WA_WState_CompressKeys), 438},
    {sipName_WA_WState_ConfigPending, static_cast<int>( ::Qt::WA_WState_ConfigPending), 438},
    {sipName_WA_WState_Created, static_cast<int>( ::Qt::WA_WState_Created), 438},
    {sipName_WA_WState_ExplicitShowHide, static_cast<int>( ::Qt::WA_WState_ExplicitShowHide), 438},
    {sipName_WA_WState_Hidden, static_cast<int>( ::Qt::WA_WState_Hidden), 438},
    {sipName_WA_WState_InPaintEvent, static_cast<int>( ::Qt::WA_WState_InPaintEvent), 438},
    {sipName_WA_WState_OwnSizePolicy, static_cast<int>( ::Qt::WA_WState_OwnSizePolicy), 438},
    {sipName_WA_WState_Polished, static_cast<int>( ::Qt::WA_WState_Polished), 438},
    {sipName_WA_WState_Reparented, static_cast<int>( ::Qt::WA_WState_Reparented), 438},
    {sipName_WA_WState_Visible, static_cast<int>( ::Qt::WA_WState_Visible), 438},
    {sipName_WA_WindowModified, static_cast<int>( ::Qt::WA_WindowModified), 438},
    {sipName_WA_WindowPropagation, static_cast<int>( ::Qt::WA_WindowPropagation), 438},
    {sipName_WA_X11DoNotAcceptFocus, static_cast<int>( ::Qt::WA_X11DoNotAcceptFocus), 438},
    {sipName_WA_X11NetWmWindowTypeCombo, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeCombo), 438},
    {sipName_WA_X11NetWmWindowTypeDND, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeDND), 438},
    {sipName_WA_X11NetWmWindowTypeDesktop, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeDesktop), 438},
    {sipName_WA_X11NetWmWindowTypeDialog, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeDialog), 438},
    {sipName_WA_X11NetWmWindowTypeDock, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeDock), 438},
    {sipName_WA_X11NetWmWindowTypeDropDownMenu, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeDropDownMenu), 438},
    {sipName_WA_X11NetWmWindowTypeMenu, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeMenu), 438},
    {sipName_WA_X11NetWmWindowTypeNotification, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeNotification), 438},
    {sipName_WA_X11NetWmWindowTypePopupMenu, static_cast<int>( ::Qt::WA_X11NetWmWindowTypePopupMenu), 438},
    {sipName_WA_X11NetWmWindowTypeSplash, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeSplash), 438},
    {sipName_WA_X11NetWmWindowTypeToolBar, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeToolBar), 438},
    {sipName_WA_X11NetWmWindowTypeToolTip, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeToolTip), 438},
    {sipName_WA_X11NetWmWindowTypeUtility, static_cast<int>( ::Qt::WA_X11NetWmWindowTypeUtility), 438},
    {sipName_WA_X11OpenGLOverlay, static_cast<int>( ::Qt::WA_X11OpenGLOverlay), 438},
    {sipName_WaitCursor, static_cast<int>( ::Qt::WaitCursor), 360},
    {sipName_Wednesday, static_cast<int>( ::Qt::Wednesday), 362},
    {sipName_WhatsThisCursor, static_cast<int>( ::Qt::WhatsThisCursor), 360},
    {sipName_WhatsThisRole, static_cast<int>( ::Qt::WhatsThisRole), 388},
    {sipName_WheelFocus, static_cast<int>( ::Qt::WheelFocus), 374},
    {sipName_WhiteSpaceModeUndefined, static_cast<int>( ::Qt::WhiteSpaceModeUndefined), 437},
    {sipName_WhiteSpaceNoWrap, static_cast<int>( ::Qt::WhiteSpaceNoWrap), 437},
    {sipName_WhiteSpaceNormal, static_cast<int>( ::Qt::WhiteSpaceNormal), 437},
    {sipName_WhiteSpacePre, static_cast<int>( ::Qt::WhiteSpacePre), 437},
    {sipName_Widget, static_cast<int>( ::Qt::Widget), 444},
    {sipName_WidgetShortcut, static_cast<int>( ::Qt::WidgetShortcut), 417},
    {sipName_WidgetWithChildrenShortcut, static_cast<int>( ::Qt::WidgetWithChildrenShortcut), 417},
    {sipName_WindingFill, static_cast<int>( ::Qt::WindingFill), 371},
    {sipName_Window, static_cast<int>( ::Qt::Window), 444},
    {sipName_WindowActive, static_cast<int>( ::Qt::WindowActive), 442},
    {sipName_WindowCloseButtonHint, static_cast<int>( ::Qt::WindowCloseButtonHint), 444},
    {sipName_WindowContextHelpButtonHint, static_cast<int>( ::Qt::WindowContextHelpButtonHint), 444},
    {sipName_WindowDoesNotAcceptFocus, static_cast<int>( ::Qt::WindowDoesNotAcceptFocus), 444},
    {sipName_WindowFullScreen, static_cast<int>( ::Qt::WindowFullScreen), 442},
    {sipName_WindowFullscreenButtonHint, static_cast<int>( ::Qt::WindowFullscreenButtonHint), 444},
    {sipName_WindowMaximizeButtonHint, static_cast<int>( ::Qt::WindowMaximizeButtonHint), 444},
    {sipName_WindowMaximized, static_cast<int>( ::Qt::WindowMaximized), 442},
    {sipName_WindowMinMaxButtonsHint, static_cast<int>( ::Qt::WindowMinMaxButtonsHint), 444},
    {sipName_WindowMinimizeButtonHint, static_cast<int>( ::Qt::WindowMinimizeButtonHint), 444},
    {sipName_WindowMinimized, static_cast<int>( ::Qt::WindowMinimized), 442},
    {sipName_WindowModal, static_cast<int>( ::Qt::WindowModal), 441},
    {sipName_WindowNoState, static_cast<int>( ::Qt::WindowNoState), 442},
    {sipName_WindowOverridesSystemGestures, static_cast<int>( ::Qt::WindowOverridesSystemGestures), 444},
    {sipName_WindowShadeButtonHint, static_cast<int>( ::Qt::WindowShadeButtonHint), 444},
    {sipName_WindowShortcut, static_cast<int>( ::Qt::WindowShortcut), 417},
    {sipName_WindowStaysOnBottomHint, static_cast<int>( ::Qt::WindowStaysOnBottomHint), 444},
    {sipName_WindowStaysOnTopHint, static_cast<int>( ::Qt::WindowStaysOnTopHint), 444},
    {sipName_WindowSystemMenuHint, static_cast<int>( ::Qt::WindowSystemMenuHint), 444},
    {sipName_WindowTitleHint, static_cast<int>( ::Qt::WindowTitleHint), 444},
    {sipName_WindowTransparentForInput, static_cast<int>( ::Qt::WindowTransparentForInput), 444},
    {sipName_WindowType_Mask, static_cast<int>( ::Qt::WindowType_Mask), 444},
    {sipName_X11BypassWindowManagerHint, static_cast<int>( ::Qt::X11BypassWindowManagerHint), 444},
    {sipName_XAxis, static_cast<int>( ::Qt::XAxis), 348},
    {sipName_XButton1, static_cast<int>( ::Qt::XButton1), 401},
    {sipName_XButton2, static_cast<int>( ::Qt::XButton2), 401},
    {sipName_YAxis, static_cast<int>( ::Qt::YAxis), 348},
    {sipName_ZAxis, static_cast<int>( ::Qt::ZAxis), 348},
    {sipName_ZoomNativeGesture, static_cast<int>( ::Qt::ZoomNativeGesture), 406},
    {sipName_black, static_cast<int>( ::Qt::black), 380},
    {sipName_blue, static_cast<int>( ::Qt::blue), 380},
    {sipName_color0, static_cast<int>( ::Qt::color0), 380},
    {sipName_color1, static_cast<int>( ::Qt::color1), 380},
    {sipName_cyan, static_cast<int>( ::Qt::cyan), 380},
    {sipName_darkBlue, static_cast<int>( ::Qt::darkBlue), 380},
    {sipName_darkCyan, static_cast<int>( ::Qt::darkCyan), 380},
    {sipName_darkGray, static_cast<int>( ::Qt::darkGray), 380},
    {sipName_darkGreen, static_cast<int>( ::Qt::darkGreen), 380},
    {sipName_darkMagenta, static_cast<int>( ::Qt::darkMagenta), 380},
    {sipName_darkRed, static_cast<int>( ::Qt::darkRed), 380},
    {sipName_darkYellow, static_cast<int>( ::Qt::darkYellow), 380},
    {sipName_gray, static_cast<int>( ::Qt::gray), 380},
    {sipName_green, static_cast<int>( ::Qt::green), 380},
    {sipName_lightGray, static_cast<int>( ::Qt::lightGray), 380},
    {sipName_magenta, static_cast<int>( ::Qt::magenta), 380},
    {sipName_red, static_cast<int>( ::Qt::red), 380},
    {sipName_transparent, static_cast<int>( ::Qt::transparent), 380},
    {sipName_white, static_cast<int>( ::Qt::white), 380},
    {sipName_yellow, static_cast<int>( ::Qt::yellow), 380},
};


static pyqt5ClassPluginDef plugin_Qt = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtCore_Qt = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_NAMESPACE,
        sipNameNr_Qt,
        {SIP_NULLPTR},
        &plugin_Qt
    },
    {
        sipNameNr_Qt,
        {0, 0, 1},
        0, SIP_NULLPTR,
        1152, enummembers_Qt,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 101701 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



extern "C" {static void assign_quintptr(void *, SIP_SSIZE_T, void *);}
static void assign_quintptr(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::quintptr *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::quintptr *>(sipSrc);
}


extern "C" {static void *array_quintptr(SIP_SSIZE_T);}
static void *array_quintptr(SIP_SSIZE_T sipNrElem)
{
    return new  ::quintptr[sipNrElem];
}


extern "C" {static void *copy_quintptr(const void *, SIP_SSIZE_T);}
static void *copy_quintptr(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::quintptr(reinterpret_cast<const  ::quintptr *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_quintptr(void *, int);}
static void release_quintptr(void *ptr, int)
{
    delete reinterpret_cast< ::quintptr *>(ptr);
}



extern "C" {static int convertTo_quintptr(PyObject *, void **, int *, PyObject *);}
static int convertTo_quintptr(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
     ::quintptr **sipCppPtr = reinterpret_cast< ::quintptr **>(sipCppPtrV);

#line 193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
    quintptr ptr = (quintptr)sipConvertToVoidPtr(sipPy);

    if (!sipIsErr)
        return !PyErr_Occurred();

    // Mapped types deal with pointers, so create one on the heap.
    quintptr *heap = new quintptr;
    *heap = ptr;

    *sipCppPtr = heap;

    // Make sure the pointer doesn't leak.
    return SIP_TEMPORARY;
#line 101754 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


extern "C" {static PyObject *convertFrom_quintptr(void *, PyObject *);}
static PyObject *convertFrom_quintptr(void *sipCppV, PyObject *)
{
    ::quintptr *sipCpp = reinterpret_cast< ::quintptr *>(sipCppV);

#line 209 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
    return sipConvertFromVoidPtr((void *)*sipCpp);
#line 101765 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_quintptr = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_quintptr,     /* quintptr */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_quintptr,
    array_quintptr,
    copy_quintptr,
    release_quintptr,
    convertTo_quintptr,
    convertFrom_quintptr
};

#line 160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 101797 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"



extern "C" {static void assign_qintptr(void *, SIP_SSIZE_T, void *);}
static void assign_qintptr(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::qintptr *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::qintptr *>(sipSrc);
}


extern "C" {static void *array_qintptr(SIP_SSIZE_T);}
static void *array_qintptr(SIP_SSIZE_T sipNrElem)
{
    return new  ::qintptr[sipNrElem];
}


extern "C" {static void *copy_qintptr(const void *, SIP_SSIZE_T);}
static void *copy_qintptr(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::qintptr(reinterpret_cast<const  ::qintptr *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_qintptr(void *, int);}
static void release_qintptr(void *ptr, int)
{
    delete reinterpret_cast< ::qintptr *>(ptr);
}



extern "C" {static int convertTo_qintptr(PyObject *, void **, int *, PyObject *);}
static int convertTo_qintptr(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
     ::qintptr **sipCppPtr = reinterpret_cast< ::qintptr **>(sipCppPtrV);

#line 164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
    qintptr ptr = (qintptr)sipConvertToVoidPtr(sipPy);

    if (!sipIsErr)
        return !PyErr_Occurred();

    // Mapped types deal with pointers, so create one on the heap.
    qintptr *heap = new qintptr;
    *heap = ptr;

    *sipCppPtr = heap;

    // Make sure the pointer doesn't leak.
    return SIP_TEMPORARY;
#line 101850 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


extern "C" {static PyObject *convertFrom_qintptr(void *, PyObject *);}
static PyObject *convertFrom_qintptr(void *sipCppV, PyObject *)
{
    ::qintptr *sipCpp = reinterpret_cast< ::qintptr *>(sipCppV);

#line 180 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtCore/qglobal.sip"
    return sipConvertFromVoidPtr((void *)*sipCpp);
#line 101861 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtCore/sipQtCorepart1.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_qintptr = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_qintptr,     /* qintptr */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_qintptr,
    array_qintptr,
    copy_qintptr,
    release_qintptr,
    convertTo_qintptr,
    convertFrom_qintptr
};
