/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQml.h"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 35 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 38 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 44 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 47 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlabstracturlinterceptor.sip"
#include <qqmlabstracturlinterceptor.h>
#line 53 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 56 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 62 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 65 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 74 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlproperty.sip"
#include <qqmlproperty.h>
#line 77 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 80 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 83 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 88 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 91 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmllist.sip"
#include <qqmllist.h>
#line 94 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlscriptstring.sip"
#include <qqmlscriptstring.h>
#line 97 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtQml[] = {
    'Q', 'Q', 'm', 'l', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'U', 'r', 'l', 'I', 'n', 't', 'e', 'r', 'c', 'e', 'p', 't', 'o', 'r', ':', ':', 'D', 'a', 't', 'a', 'T', 'y', 'p', 'e', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'Q', 'm', 'l', 'C', 'o', 'n', 't', 'e', 'x', 't', ':', ':', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'i', 'r', '>', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', ':', ':', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'y', 'p', 'e', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    's', 'e', 't', 'O', 'u', 't', 'p', 'u', 't', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 's', 'T', 'o', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'Q', 'm', 'l', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'B', 'a', 's', 'e', ':', ':', 'I', 'm', 'a', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'N', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'o', 'f', 'f', 'l', 'i', 'n', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 'D', 'a', 't', 'a', 'b', 'a', 's', 'e', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'N', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', ':', ':', 'C', 'o', 'm', 'p', 'i', 'l', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'Q', 'm', 'l', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'o', 'r', ':', ':', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'o', 'u', 't', 'p', 'u', 't', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 's', 'T', 'o', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'F', 'o', 'r', 'c', 'e', 'A', 's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 'I', 'm', 'a', 'g', 'e', 'L', 'o', 'a', 'd', 'i', 'n', 'g', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'n', 'g', 'O', 'b', 'j', 'e', 'c', 't', 'C', 'o', 'u', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'Q', 'm', 'l', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'B', 'a', 's', 'e', ':', ':', 'F', 'l', 'a', 'g', 's', 0,
    'q', 'm', 'l', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'Q', 'm', 'l', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'O', 'b', 'j', 'e', 'c', 't', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    'n', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'Q', 'Q', 'm', 'l', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'B', 'a', 's', 'e', ':', ':', 'F', 'l', 'a', 'g', 0,
    'q', 'm', 'l', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'U', 'n', 'c', 'r', 'e', 'a', 't', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'U', 'r', 'l', 'I', 'n', 't', 'e', 'r', 'c', 'e', 'p', 't', 'o', 'r', 0,
    'G', 'a', 'r', 'b', 'a', 'g', 'e', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'i', 'n', 's', 't', 'a', 'l', 'l', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'o', 'r', 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'Q', 'm', 'l', 'L', 'i', 's', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', '<', 'Q', 'O', 'b', 'j', 'e', 'c', 't', '>', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'n', 't', 'e', 'x', 't', ':', ':', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'i', 'r', 0,
    'q', 'm', 'l', 'C', 'l', 'e', 'a', 'r', 'T', 'y', 'p', 'e', 'R', 'e', 'g', 'i', 's', 't', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    'q', 'm', 'l', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'S', 'i', 'n', 'g', 'l', 'e', 't', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'e', 't', 'N', 'o', 't', 'i', 'f', 'y', 'O', 'n', 'V', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 0,
    'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', ':', ':', 'S', 'p', 'e', 'c', 'i', 'a', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'n', 'g', 'O', 'b', 'j', 'e', 'c', 't', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'Q', 'm', 'l', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'o', 'r', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    's', 'e', 't', 'O', 'f', 'f', 'l', 'i', 'n', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 'P', 'a', 't', 'h', 0,
    'Q', 'Q', 'm', 'l', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'B', 'a', 's', 'e', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    'Q', 'Q', 'm', 'l', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'Q', 'J', 'S', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'y', 'p', 'e', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'A', 's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 'I', 'f', 'N', 'e', 's', 't', 'e', 'd', 0,
    'n', 'o', 't', 'i', 'f', 'y', 'O', 'n', 'V', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 0,
    'n', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'i', 'o', 'n', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'Q', 'J', 'S', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', '>', 0,
    'q', 'm', 'l', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 'v', 'i', 's', 'i', 'o', 'n', 0,
    'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'Q', 'Q', 'm', 'l', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 'P', 'l', 'u', 'g', 'i', 'n', 0,
    'J', 'a', 'v', 'a', 'S', 'c', 'r', 'i', 'p', 't', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'F', 'o', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'c', 'l', 'e', 'a', 'r', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'C', 'a', 'c', 'h', 'e', 0,
    'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', ':', ':', 'E', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', 0,
    'a', 't', 't', 'a', 'c', 'h', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'i', 's', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', ':', ':', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    'o', 'f', 'f', 'l', 'i', 'n', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 'P', 'a', 't', 'h', 0,
    't', 'r', 'i', 'm', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'C', 'a', 'c', 'h', 'e', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'n', 'e', 'e', 'd', 's', 'N', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'c', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 0,
    'Q', 'Q', 'm', 'l', 'L', 'i', 's', 't', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    's', 'e', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'i', 'n', 'g', 'l', 'e', 't', 'o', 'n', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    's', 'e', 't', 'P', 'l', 'u', 'g', 'i', 'n', 'P', 'a', 't', 'h', 'L', 'i', 's', 't', 0,
    's', 'e', 't', 'I', 'm', 'p', 'o', 'r', 't', 'P', 'a', 't', 'h', 'L', 'i', 's', 't', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'S', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 0,
    'c', 'a', 'l', 'l', 'A', 's', 'C', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'o', 'r', 0,
    'i', 'n', 's', 't', 'a', 'l', 'l', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'E', 'x', 't', 'r', 'a', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 's', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'Q', 'm', 'l', 'E', 'r', 'r', 'o', 'r', '>', 0,
    'Q', 'Q', 'm', 'l', 'S', 'c', 'r', 'i', 'p', 't', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'S', 'i', 'g', 'n', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'Q', 'Q', 'm', 'l', 'P', 'a', 'r', 's', 'e', 'r', 'S', 't', 'a', 't', 'u', 's', 0,
    'Q', 'Q', 'm', 'l', 'F', 'i', 'l', 'e', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'v', 'a', 'l', 'u', 'e', 'I', 's', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 'F', 'o', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'a', 'd', 'd', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'c', 'a', 'l', 'l', 'W', 'i', 't', 'h', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'C', 'o', 'n', 's', 'o', 'l', 'e', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', '>', 0,
    'q', 'm', 'l', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'M', 'a', 'p', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'l', 'i', 's', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'f', 'o', 'r', 'c', 'e', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'i', 'o', 'n', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'r', 'e', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    's', 'e', 't', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'S', 't', 'a', 't', 'e', 0,
    'h', 'a', 's', 'N', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'b', 'o', 'o', 'l', 'e', 'a', 'n', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'Q', 'm', 'l', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'M', 'e', 's', 's', 'a', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'a', 'd', 'd', 'N', 'a', 'm', 'e', 'd', 'B', 'u', 'n', 'd', 'l', 'e', 0,
    'p', 'l', 'u', 'g', 'i', 'n', 'P', 'a', 't', 'h', 'L', 'i', 's', 't', 0,
    'i', 'm', 'p', 'o', 'r', 't', 'P', 'a', 't', 'h', 'L', 'i', 's', 't', 0,
    'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'C', 'r', 'e', 'a', 't', 'e', 0,
    'J', 'a', 'v', 'a', 'S', 'c', 'r', 'i', 'p', 't', 'F', 'i', 'l', 'e', 0,
    'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'd', 'e', 'l', 'e', 't', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'h', 'a', 's', 'O', 'w', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    's', 't', 'r', 'i', 'c', 't', 'l', 'y', 'E', 'q', 'u', 'a', 'l', 's', 0,
    'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'n', 'e', 'w', 'E', 'r', 'r', 'o', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'n', 'e', 'w', 'Q', 'M', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'o', 'l', 'l', 'e', 'c', 't', 'G', 'a', 'r', 'b', 'a', 'g', 'e', 0,
    's', 'e', 't', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    's', 't', 'r', 'i', 'n', 'g', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    'i', 's', 'N', 'u', 'l', 'l', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    'i', 's', 'M', 'a', 'n', 'i', 'p', 'u', 'l', 'a', 'b', 'l', 'e', 0,
    'Q', 'Q', 'm', 'l', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'o', 'r', 0,
    'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'y', 'p', 'e', 's', 0,
    's', 'e', 't', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'i', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'a', 'd', 'd', 'P', 'l', 'u', 'g', 'i', 'n', 'P', 'a', 't', 'h', 0,
    'a', 'd', 'd', 'I', 'm', 'p', 'o', 'r', 't', 'P', 'a', 't', 'h', 0,
    'I', 'm', 'a', 'g', 'e', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 0,
    'n', 'a', 'm', 'e', 'F', 'o', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    's', 't', 'a', 't', 'u', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'A', 'l', 'l', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 's', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'C', 'p', 'p', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    'i', 'm', 'p', 'o', 'r', 't', 'P', 'l', 'u', 'g', 'i', 'n', 0,
    'A', 's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 0,
    'G', 'e', 'n', 'e', 'r', 'i', 'c', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'P', 'r', 'o', 't', 'o', 't', 'y', 'p', 'e', 0,
    'i', 'm', 'p', 'o', 'r', 't', 'M', 'o', 'd', 'u', 'l', 'e', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 's', 'R', 'e', 's', 'e', 't', 't', 'a', 'b', 'l', 'e', 0,
    'i', 's', 'D', 'e', 's', 'i', 'g', 'n', 'a', 'b', 'l', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'e', 'F', 'o', 'r', 0,
    's', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 0,
    's', 'c', 'o', 'p', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'r', 'e', 't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'r', 'o', 'o', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 'd', 'U', 'r', 'l', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'b', 'e', 'g', 'i', 'n', 'C', 'r', 'e', 'a', 't', 'e', 0,
    'r', 'o', 'o', 't', 'O', 'b', 'j', 'e', 'c', 't', 's', 0,
    'S', 'y', 'n', 't', 'a', 'x', 'E', 'r', 'r', 'o', 'r', 0,
    'h', 'a', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'i', 's', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'Q', 'm', 'l', 0,
    'i', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'l', 'a', 's', 's', 'B', 'e', 'g', 'i', 'n', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'B', 'a', 's', 'e', 'U', 'r', 'l', 0,
    'f', 'o', 'r', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'Q', 'Q', 'm', 'l', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'Q', 'm', 'l', 'd', 'i', 'r', 'F', 'i', 'l', 'e', 0,
    'R', 'a', 'n', 'g', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 's', 'C', 'a', 'l', 'l', 'a', 'b', 'l', 'e', 0,
    't', 'h', 'r', 'o', 'w', 'E', 'r', 'r', 'o', 'r', 0,
    'n', 'e', 'w', 'Q', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'l', 'i', 'n', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'c', 'l', 'e', 'a', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    'e', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    't', 'o', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    'i', 's', 'W', 'r', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'i', 's', 'R', 'e', 'a', 'd', 'a', 'b', 'l', 'e', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    's', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'c', 'a', 'n', 'A', 'p', 'p', 'e', 'n', 'd', 0,
    's', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'Q', 'Q', 'm', 'l', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 'm', 'a', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'L', 'o', 'a', 'd', 'i', 'n', 'g', 0,
    'i', 'n', 't', 'e', 'r', 'c', 'e', 'p', 't', 0,
    'U', 'r', 'l', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'T', 'y', 'p', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'E', 'v', 'a', 'l', 'E', 'r', 'r', 'o', 'r', 0,
    'p', 'r', 'o', 't', 'o', 't', 'y', 'p', 'e', 0,
    't', 'o', 'Q', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'i', 's', 'Q', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'i', 's', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'N', 'u', 'l', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'q', 'j', 's', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', 0,
    'n', 'e', 'w', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'J', 'S', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'q', 'm', 'l', 'T', 'y', 'p', 'e', 'I', 'd', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    't', 'o', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'c', 'a', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'a', 'n', 'C', 'l', 'e', 'a', 'r', 0,
    's', 'e', 'l', 'e', 'c', 't', 'o', 'r', 0,
    'w', 'a', 'r', 'n', 'i', 'n', 'g', 's', 0,
    'l', 'o', 'a', 'd', 'D', 'a', 't', 'a', 0,
    'U', 'R', 'I', 'E', 'r', 'r', 'o', 'r', 0,
    't', 'o', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'i', 's', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    'i', 's', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', 0,
    'n', 'e', 'w', 'A', 'r', 'r', 'a', 'y', 0,
    'e', 'v', 'a', 'l', 'u', 'a', 't', 'e', 0,
    'h', 'a', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'i', 's', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 0,
    'f', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'b', 'a', 's', 'e', 'U', 'r', 'l', 0,
    'l', 'o', 'a', 'd', 'U', 'r', 'l', 0,
    'Q', 'm', 'l', 'F', 'i', 'l', 'e', 0,
    'i', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 's', 'R', 'e', 'a', 'd', 'y', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 0,
    'i', 's', 'A', 'r', 'r', 'a', 'y', 0,
    'h', 'a', 's', 'N', 'e', 'x', 't', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 0,
    'i', 's', 'E', 'm', 'p', 't', 'y', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    's', 'e', 't', 'D', 'a', 't', 'a', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 0,
    'e', 'n', 'g', 'i', 'n', 'e', 0,
    'e', 'q', 'u', 'a', 'l', 's', 0,
    'i', 's', 'D', 'a', 't', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 's', 0,
    'P', 'i', 'x', 'm', 'a', 'p', 0,
    's', 'e', 't', 'U', 'r', 'l', 0,
    'c', 'r', 'e', 'a', 't', 'e', 0,
    's', 't', 'a', 't', 'u', 's', 0,
    'm', 'e', 't', 'h', 'o', 'd', 0,
    't', 'o', 'B', 'o', 'o', 'l', 0,
    'i', 's', 'B', 'o', 'o', 'l', 0,
    't', 'o', 'U', 'I', 'n', 't', 0,
    'i', 'n', 's', 'e', 'r', 't', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 0,
    'l', 'e', 'n', 'g', 't', 'h', 0,
    'i', 's', 'N', 'u', 'l', 'l', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'o', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    'c', 'a', 'n', 'A', 't', 0,
    'I', 'm', 'a', 'g', 'e', 0,
    's', 'c', 'o', 'p', 'e', 0,
    'w', 'r', 'i', 't', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'r', 'e', 's', 'e', 't', 0,
    't', 'o', 'I', 'n', 't', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'c', 'a', 'l', 'l', 0,
    'a', 'r', 'g', 's', 0,
    'k', 'e', 'y', 's', 0,
    'l', 'i', 'n', 'e', 0,
    'l', 'o', 'a', 'd', 0,
    'r', 'e', 'a', 'd', 0,
    'q', 'u', 'i', 't', 0,
    'e', 'x', 'i', 't', 0,
    'm', 'o', 'd', 'e', 0,
    'n', 'a', 'm', 'e', 0,
    'n', 'e', 'x', 't', 0,
    's', 'i', 'z', 'e', 0,
    'u', 'r', 'l', 0,
    'a', 't', 0,
};
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqml.sip"
#include <qqml.h>
#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 113 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlproperty.sip"
// Imports from QtCore.
pyqt5_qtqml_get_connection_parts_t pyqt5_qtqml_get_connection_parts;
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
// Imports from QtCore.
pyqt5_qtqml_get_qmetaobject_t pyqt5_qtqml_get_qmetaobject;
#line 418 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

void sipVH_QtQml_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QQmlProperty& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QQmlProperty(a0), sipType_QQmlProperty, SIP_NULLPTR);
}

 ::QVariant sipVH_QtQml_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0,const  ::QVariant& a1)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NN", new  ::QString(a0), sipType_QString, SIP_NULLPTR, new  ::QVariant(a1), sipType_QVariant, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

 ::QNetworkAccessManager* sipVH_QtQml_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0)
{
     ::QNetworkAccessManager* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QObject, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QNetworkAccessManager, &sipRes);

    return sipRes;
}

void sipVH_QtQml_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "i", a0);
}

void sipVH_QtQml_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QObject, SIP_NULLPTR);
}

void sipVH_QtQml_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQmlIncubator::Status a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "F", a0, sipType_QQmlIncubator_Status);
}

void sipVH_QtQml_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQmlEngine*a0,const char*a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "DA", a0, sipType_QQmlEngine, SIP_NULLPTR, a1);
}

void sipVH_QtQml_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "A", a0);
}

 ::QQmlImageProviderBase::Flags sipVH_QtQml_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QQmlImageProviderBase::Flags sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QQmlImageProviderBase_Flags, &sipRes);

    return sipRes;
}

 ::QQmlImageProviderBase::ImageType sipVH_QtQml_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::QQmlImageProviderBase::ImageType sipRes =  ::QQmlImageProviderBase::Image;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QQmlImageProviderBase_ImageType, &sipRes);

    return sipRes;
}

void sipVH_QtQml_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

 ::QObject* sipVH_QtQml_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QQmlContext*a0)
{
     ::QObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QQmlContext, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QObject, &sipRes);

    return sipRes;
}

 ::QUrl sipVH_QtQml_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QUrl& a0, ::QQmlAbstractUrlInterceptor::DataType a1)
{
     ::QUrl sipRes;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "NF", new  ::QUrl(a0), sipType_QUrl, SIP_NULLPTR, a1, sipType_QQmlAbstractUrlInterceptor_DataType);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QUrl, &sipRes);

    return sipRes;
}

bool sipVH_QtQml_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtQml_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(SIP_NULLPTR, sipMethod, "DD", a0, sipType_QObject, SIP_NULLPTR, a1, sipType_QEvent, SIP_NULLPTR);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtQml_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTimerEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTimerEvent, SIP_NULLPTR);
}

void sipVH_QtQml_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QChildEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QChildEvent, SIP_NULLPTR);
}

void sipVH_QtQml_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QEvent, SIP_NULLPTR);
}

void sipVH_QtQml_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QMetaMethod& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QMetaMethod(a0), sipType_QMetaMethod, SIP_NULLPTR);
}


PyDoc_STRVAR(doc_qmlRegisterUncreatableType, "qmlRegisterUncreatableType(type, str, int, int, str, str) -> int\n"
"qmlRegisterUncreatableType(type, int, str, int, int, str, str) -> int");

extern "C" {static PyObject *func_qmlRegisterUncreatableType(PyObject *,PyObject *);}
static PyObject *func_qmlRegisterUncreatableType(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        const char* a1;
        PyObject *a1Keep;
        int a2;
        int a3;
        const char* a4;
        PyObject *a4Keep;
        const  ::QString* a5;
        int a5State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "TAAiiAAJ1", &PyType_Type, &a0, &a1Keep, &a1, &a2, &a3, &a4Keep, &a4, sipType_QString,&a5, &a5State))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 92 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_uncreatable_type((PyTypeObject *)a0, a1, a2, a3, a4, *a5, -1)) < 0)
        sipError = sipErrorFail;
#line 585 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
            Py_DECREF(a1Keep);
            Py_DECREF(a4Keep);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        PyObject * a0;
        int a1;
        const char* a2;
        PyObject *a2Keep;
        int a3;
        int a4;
        const char* a5;
        PyObject *a5Keep;
        const  ::QString* a6;
        int a6State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "TiAAiiAAJ1", &PyType_Type, &a0, &a1, &a2Keep, &a2, &a3, &a4, &a5Keep, &a5, sipType_QString,&a6, &a6State))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_uncreatable_type((PyTypeObject *)a0, a2, a3, a4, a5, *a6, a1)) < 0)
        sipError = sipErrorFail;
#line 622 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
            Py_DECREF(a2Keep);
            Py_DECREF(a5Keep);
            sipReleaseType(const_cast< ::QString *>(a6),sipType_QString,a6State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlRegisterUncreatableType, doc_qmlRegisterUncreatableType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qmlRegisterType, "qmlRegisterType(QUrl, str, int, int, str) -> int\n"
"qmlRegisterType(type, attachedProperties: type = 0) -> int\n"
"qmlRegisterType(type, str, int, int, str, attachedProperties: type = 0) -> int\n"
"qmlRegisterType(type, int, str, int, int, str, attachedProperties: type = 0) -> int");

extern "C" {static PyObject *func_qmlRegisterType(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qmlRegisterType(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
        const char* a1;
        PyObject *a1Keep;
        int a2;
        int a3;
        const char* a4;
        PyObject *a4Keep;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "J9AAiiAA", sipType_QUrl, &a0, &a1Keep, &a1, &a2, &a3, &a4Keep, &a4))
        {
            int sipRes;

            sipRes = qmlRegisterType(*a0,a1,a2,a3,a4);
            Py_DECREF(a1Keep);
            Py_DECREF(a4Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        PyObject * a0;
        PyObject * a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_attachedProperties,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "T|T", &PyType_Type, &a0, &PyType_Type, &a1))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 68 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_type((PyTypeObject *)a0, (PyTypeObject *)a1)) < 0)
        sipError = sipErrorFail;
#line 698 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        PyObject * a0;
        const char* a1;
        PyObject *a1Keep;
        int a2;
        int a3;
        const char* a4;
        PyObject *a4Keep;
        PyObject * a5 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_attachedProperties,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "TAAiiAA|T", &PyType_Type, &a0, &a1Keep, &a1, &a2, &a3, &a4Keep, &a4, &PyType_Type, &a5))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 76 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_library_type((PyTypeObject *)a0, a1, a2, a3, a4, -1, (PyTypeObject *)a5)) < 0)
        sipError = sipErrorFail;
#line 739 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
            Py_DECREF(a1Keep);
            Py_DECREF(a4Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        PyObject * a0;
        int a1;
        const char* a2;
        PyObject *a2Keep;
        int a3;
        int a4;
        const char* a5;
        PyObject *a5Keep;
        PyObject * a6 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_attachedProperties,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "TiAAiiAA|T", &PyType_Type, &a0, &a1, &a2Keep, &a2, &a3, &a4, &a5Keep, &a5, &PyType_Type, &a6))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_library_type((PyTypeObject *)a0, a2, a3, a4, a5, a1, (PyTypeObject *)a6)) < 0)
        sipError = sipErrorFail;
#line 784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
            Py_DECREF(a2Keep);
            Py_DECREF(a5Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlRegisterType, doc_qmlRegisterType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qmlRegisterSingletonType, "qmlRegisterSingletonType(QUrl, str, int, int, str) -> int\n"
"qmlRegisterSingletonType(type, str, int, int, str, Callable[[QQmlEngine, QJSEngine], Any]) -> int");

extern "C" {static PyObject *func_qmlRegisterSingletonType(PyObject *,PyObject *);}
static PyObject *func_qmlRegisterSingletonType(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
        const char* a1;
        PyObject *a1Keep;
        int a2;
        int a3;
        const char* a4;
        PyObject *a4Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9AAiiAA", sipType_QUrl, &a0, &a1Keep, &a1, &a2, &a3, &a4Keep, &a4))
        {
            int sipRes;

            sipRes = qmlRegisterSingletonType(*a0,a1,a2,a3,a4);
            Py_DECREF(a1Keep);
            Py_DECREF(a4Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        PyObject * a0;
        const char* a1;
        PyObject *a1Keep;
        int a2;
        int a3;
        const char* a4;
        PyObject *a4Keep;
        PyObject * a5;

        if (sipParseArgs(&sipParseErr, sipArgs, "TAAiiAAF", &PyType_Type, &a0, &a1Keep, &a1, &a2, &a3, &a4Keep, &a4, &a5))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_singleton_type((PyTypeObject *)a0, a1, a2, a3, a4, a5)) < 0)
        sipError = sipErrorFail;
#line 856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
            Py_DECREF(a1Keep);
            Py_DECREF(a4Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlRegisterSingletonType, doc_qmlRegisterSingletonType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qmlRegisterRevision, "qmlRegisterRevision(type, int, str, int, int, attachedProperties: type = 0) -> int");

extern "C" {static PyObject *func_qmlRegisterRevision(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qmlRegisterRevision(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        int a1;
        const char* a2;
        PyObject *a2Keep;
        int a3;
        int a4;
        PyObject * a5 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_attachedProperties,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "TiAAii|T", &PyType_Type, &a0, &a1, &a2Keep, &a2, &a3, &a4, &PyType_Type, &a5))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 43 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_library_type((PyTypeObject *)a0, a2, a3, a4, 0, a1, (PyTypeObject *)a5)) < 0)
        sipError = sipErrorFail;
#line 913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
            Py_DECREF(a2Keep);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlRegisterRevision, doc_qmlRegisterRevision);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qmlAttachedPropertiesObject, "qmlAttachedPropertiesObject(type, QObject, create: bool = True) -> QObject");

extern "C" {static PyObject *func_qmlAttachedPropertiesObject(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qmlAttachedPropertiesObject(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
         ::QObject* a1;
        bool a2 = 1;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_create,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "TJ8|b", &PyType_Type, &a0, sipType_QObject, &a1, &a2))
        {
             ::QObject*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlattachedpropertiesobject.sip"
    QObject *proxy = qpyqml_find_proxy_for(a1);

    if (!proxy)
    {
        sipError = sipErrorFail;
    }
    else
    {
        static QHash<PyTypeObject *, int> cache;

        int idx = cache.value((PyTypeObject *)a0, -1);
        const QMetaObject *mo = pyqt5_qtqml_get_qmetaobject((PyTypeObject *)a0);

        sipRes = qmlAttachedPropertiesObject(&idx, proxy, mo, a2);

        cache.insert((PyTypeObject *)a0, idx);
    }
#line 977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlAttachedPropertiesObject, doc_qmlAttachedPropertiesObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qjsEngine, "qjsEngine(QObject) -> QJSEngine");

extern "C" {static PyObject *func_qjsEngine(PyObject *,PyObject *);}
static PyObject *func_qjsEngine(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
             ::QJSEngine*sipRes;

            sipRes = qjsEngine(a0);

            return sipConvertFromType(sipRes,sipType_QJSEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qjsEngine, doc_qjsEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qmlTypeId, "qmlTypeId(str, int, int, str) -> int");

extern "C" {static PyObject *func_qmlTypeId(PyObject *,PyObject *);}
static PyObject *func_qmlTypeId(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        int a1;
        int a2;
        const char* a3;
        PyObject *a3Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AAiiAA", &a0Keep, &a0, &a1, &a2, &a3Keep, &a3))
        {
            int sipRes;

            sipRes = qmlTypeId(a0,a1,a2,a3);
            Py_DECREF(a0Keep);
            Py_DECREF(a3Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlTypeId, doc_qmlTypeId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_qmlClearTypeRegistrations, "qmlClearTypeRegistrations()");

extern "C" {static PyObject *func_qmlClearTypeRegistrations(PyObject *,PyObject *);}
static PyObject *func_qmlClearTypeRegistrations(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            qmlClearTypeRegistrations();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlClearTypeRegistrations, doc_qmlClearTypeRegistrations);

    return SIP_NULLPTR;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QJSEngine(void **);}
static const sipTypeDef *sipSubClass_QJSEngine(void **sipCppRet)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 34 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QQmlExpression, &sipType_QQmlExpression, -1, 1},
    #if QT_VERSION >= 0x050200
        {sipName_QQmlFileSelector, &sipType_QQmlFileSelector, -1, 2},
    #else
        {0, 0, -1, 2},
    #endif
        {sipName_QQmlContext, &sipType_QQmlContext, -1, 3},
        {sipName_QQmlPropertyMap, &sipType_QQmlPropertyMap, -1, 4},
        {sipName_QQmlComponent, &sipType_QQmlComponent, -1, 5},
        {sipName_QQmlExtensionPlugin, &sipType_QQmlExtensionPlugin, -1, 6},
        {sipName_QJSEngine, &sipType_QJSEngine, 7, -1},
        {sipName_QQmlEngine, &sipType_QQmlEngine, 8, -1},
    #if QT_VERSION >= 0x050100
        {sipName_QQmlApplicationEngine, &sipType_QQmlApplicationEngine, -1, -1},
    #else
        {0, 0, -1, -1},
    #endif
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 1135 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

    return sipType;
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flag___or__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlImageProviderBase::Flag a0;
         ::QQmlImageProviderBase::Flags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QQmlImageProviderBase_Flag, &a0, sipType_QQmlImageProviderBase_Flags, &a1, &a1State))
        {
             ::QQmlImageProviderBase::Flags*sipRes;

            sipRes = new  ::QQmlImageProviderBase::Flags((a0 | *a1));
            sipReleaseType(a1,sipType_QQmlImageProviderBase_Flags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QQmlImageProviderBase_Flag[] = {
    {(void *)slot_QQmlImageProviderBase_Flag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QJSEngine_Extension___or__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extension___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSEngine::Extension a0;
         ::QJSEngine::Extensions* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QJSEngine_Extension, &a0, sipType_QJSEngine_Extensions, &a1, &a1State))
        {
             ::QJSEngine::Extensions*sipRes;

            sipRes = new  ::QJSEngine::Extensions((a0 | *a1));
            sipReleaseType(a1,sipType_QJSEngine_Extensions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QJSEngine_Extensions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QJSEngine_Extension[] = {
    {(void *)slot_QJSEngine_Extension___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlProperty__Type, {0}, 0}, sipNameNr_Type, 36, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlProperty__PropertyTypeCategory, {0}, 0}, sipNameNr_PropertyTypeCategory, 36, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlIncubator__Status, {0}, 0}, sipNameNr_Status, 29, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlIncubator__IncubationMode, {0}, 0}, sipNameNr_IncubationMode, 29, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlEngine__ObjectOwnership, {0}, 0}, sipNameNr_ObjectOwnership, 18, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlImageProviderBase__Flag, {0}, 0}, sipNameNr_Flag, 24, slots_QQmlImageProviderBase_Flag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlImageProviderBase__ImageType, {0}, 0}, sipNameNr_ImageType, 24, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlComponent__Status, {0}, 0}, sipNameNr_Status, 13, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlComponent__CompilationMode, {0}, 0}, sipNameNr_CompilationMode, 13, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlAbstractUrlInterceptor__DataType, {0}, 0}, sipNameNr_DataType, 10, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QJSValue__ErrorType, {0}, 0}, sipNameNr_ErrorType, 3, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QJSValue__SpecialValue, {0}, 0}, sipNameNr_SpecialValue, 3, SIP_NULLPTR},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QJSEngine__Extension, {0}, 0}, sipNameNr_Extension, 0, slots_QJSEngine_Extension},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_QtQml[] = {
    &sipTypeDef_QtQml_QJSEngine.ctd_base,
    &enumTypes[12].etd_base,
    &sipTypeDef_QtQml_QJSEngine_Extensions.ctd_base,
    &sipTypeDef_QtQml_QJSValue.ctd_base,
    &enumTypes[10].etd_base,
    &enumTypes[11].etd_base,
    &sipTypeDef_QtQml_QJSValueIterator.ctd_base,
    &sipTypeDef_QtQml_QList_0100QJSValue.mtd_base,
    &sipTypeDef_QtQml_QList_0100QQmlError.mtd_base,
    &sipTypeDef_QtQml_QList_0100QQmlProperty.mtd_base,
    &sipTypeDef_QtQml_QQmlAbstractUrlInterceptor.ctd_base,
    &enumTypes[9].etd_base,
    &sipTypeDef_QtQml_QQmlApplicationEngine.ctd_base,
    &sipTypeDef_QtQml_QQmlComponent.ctd_base,
    &enumTypes[8].etd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_QtQml_QQmlContext.ctd_base,
    &sipTypeDef_QtQml_QQmlContext_PropertyPair.ctd_base,
    &sipTypeDef_QtQml_QQmlEngine.ctd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_QtQml_QQmlError.ctd_base,
    &sipTypeDef_QtQml_QQmlExpression.ctd_base,
    &sipTypeDef_QtQml_QQmlExtensionPlugin.ctd_base,
    &sipTypeDef_QtQml_QQmlFileSelector.ctd_base,
    &sipTypeDef_QtQml_QQmlImageProviderBase.ctd_base,
    &enumTypes[5].etd_base,
    &sipTypeDef_QtQml_QQmlImageProviderBase_Flags.ctd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef_QtQml_QQmlIncubationController.ctd_base,
    &sipTypeDef_QtQml_QQmlIncubator.ctd_base,
    &enumTypes[3].etd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_QtQml_QQmlListProperty_0100QObject.mtd_base,
    &sipTypeDef_QtQml_QQmlListReference.ctd_base,
    &sipTypeDef_QtQml_QQmlNetworkAccessManagerFactory.ctd_base,
    &sipTypeDef_QtQml_QQmlParserStatus.ctd_base,
    &sipTypeDef_QtQml_QQmlProperty.ctd_base,
    &enumTypes[1].etd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_QtQml_QQmlPropertyMap.ctd_base,
    &sipTypeDef_QtQml_QQmlPropertyValueSource.ctd_base,
    &sipTypeDef_QtQml_QQmlScriptString.ctd_base,
    &sipTypeDef_QtQml_QVector_0100QQmlContext_PropertyPair.mtd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"QJSValueList", "QList<QJSValue>"},
    {"QQmlProperties", "QList<QQmlProperty>"},
};


/* This defines the types that this module needs to import from QtCore. */
sipImportedTypeDef sipImportedTypes_QtQml_QtCore[] = {
    {"QByteArray"},
    {"QChildEvent"},
    {"QDateTime"},
    {"QEvent"},
    {"QFileSelector"},
    {"QList<QObject*>"},
    {"QMetaMethod"},
    {"QMetaObject"},
    {"QMetaProperty"},
    {"QObject"},
    {"QString"},
    {"QStringList"},
    {"QTimerEvent"},
    {"QUrl"},
    {"QVariant"},
    {"QtMsgType"},
    {SIP_NULLPTR}
};


/*
 * This defines the virtual error handlers that this module needs to import
 * from QtCore.
 */
sipImportedVirtErrorHandlerDef sipImportedVirtErrorHandlers_QtQml_QtCore[] = {
    {"PyQt5"},
    {SIP_NULLPTR}
};


/* This defines the types that this module needs to import from QtNetwork. */
sipImportedTypeDef sipImportedTypes_QtQml_QtNetwork[] = {
    {"QNetworkAccessManager"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", sipImportedTypes_QtQml_QtCore, sipImportedVirtErrorHandlers_QtQml_QtCore, SIP_NULLPTR},
    {"PyQt5.QtNetwork", sipImportedTypes_QtQml_QtNetwork, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QJSEngine, {9, 0, 0}, SIP_NULLPTR},
    {SIP_NULLPTR, {0, 0, 0}, SIP_NULLPTR}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtQml = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtQml,
    0,
    sipStrings_QtQml,
    importsTable,
    SIP_NULLPTR,
    43,
    sipExportedTypes_QtQml,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    2,
    typedefsTable,
    SIP_NULLPTR,
    convertorsTable,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtQml;

sip_qt_metaobject_func sip_QtQml_qt_metaobject;
sip_qt_metacall_func sip_QtQml_qt_metacall;
sip_qt_metacast_func sip_QtQml_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtQml
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtQml
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_MLNAME_CAST(sipName_qmlRegisterUncreatableType), func_qmlRegisterUncreatableType, METH_VARARGS, SIP_MLDOC_CAST(doc_qmlRegisterUncreatableType)},
        {SIP_MLNAME_CAST(sipName_qmlRegisterType), SIP_MLMETH_CAST(func_qmlRegisterType), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qmlRegisterType)},
        {SIP_MLNAME_CAST(sipName_qmlRegisterSingletonType), func_qmlRegisterSingletonType, METH_VARARGS, SIP_MLDOC_CAST(doc_qmlRegisterSingletonType)},
        {SIP_MLNAME_CAST(sipName_qmlRegisterRevision), SIP_MLMETH_CAST(func_qmlRegisterRevision), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qmlRegisterRevision)},
        {SIP_MLNAME_CAST(sipName_qmlAttachedPropertiesObject), SIP_MLMETH_CAST(func_qmlAttachedPropertiesObject), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qmlAttachedPropertiesObject)},
        {SIP_MLNAME_CAST(sipName_qjsEngine), func_qjsEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_qjsEngine)},
        {SIP_MLNAME_CAST(sipName_qmlTypeId), func_qmlTypeId, METH_VARARGS, SIP_MLDOC_CAST(doc_qmlTypeId)},
        {SIP_MLNAME_CAST(sipName_qmlClearTypeRegistrations), func_qmlClearTypeRegistrations, METH_VARARGS, SIP_MLDOC_CAST(doc_qmlClearTypeRegistrations)},
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtQml",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtQml, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtQml), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("PyQt5.sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("PyQt5.sip"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtQml = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "PyQt5.sip._C_API"));
#else
    sipAPI_QtQml = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtQml == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtQml,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_QtQml_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtQml_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtQml_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtQml_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtQml,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#line 136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
qpyqml_post_init(sipModuleDict);
#line 118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlproperty.sip"
// Imports from QtCore.
pyqt5_qtqml_get_connection_parts = (pyqt5_qtqml_get_connection_parts_t)sipImportSymbol("pyqt5_get_connection_parts");
Q_ASSERT(pyqt5_qtqml_get_connection_parts);
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qmlregistertype.sip"
// Imports from QtCore.
pyqt5_qtqml_get_qmetaobject = (pyqt5_qtqml_get_qmetaobject_t)sipImportSymbol(
        "pyqt5_get_qmetaobject");
Q_ASSERT(pyqt5_qtqml_get_qmetaobject);
#line 1514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

    SIP_MODULE_RETURN(sipModule);
}

#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 1521 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 1527 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


extern "C" {static void assign_QVector_0100QQmlContext_PropertyPair(void *, SIP_SSIZE_T, void *);}
static void assign_QVector_0100QQmlContext_PropertyPair(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QVector< ::QQmlContext::PropertyPair> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QVector< ::QQmlContext::PropertyPair> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QQmlContext_PropertyPair(SIP_SSIZE_T);}
static void *array_QVector_0100QQmlContext_PropertyPair(SIP_SSIZE_T sipNrElem)
{
    return new QVector< ::QQmlContext::PropertyPair>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QQmlContext_PropertyPair(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QQmlContext_PropertyPair(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector< ::QQmlContext::PropertyPair>(reinterpret_cast<const QVector< ::QQmlContext::PropertyPair> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QQmlContext_PropertyPair(void *, int);}
static void release_QVector_0100QQmlContext_PropertyPair(void *ptr, int)
{
    delete reinterpret_cast<QVector< ::QQmlContext::PropertyPair> *>(ptr);
}



extern "C" {static int convertTo_QVector_0100QQmlContext_PropertyPair(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QQmlContext_PropertyPair(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector< ::QQmlContext::PropertyPair> **sipCppPtr = reinterpret_cast<QVector< ::QQmlContext::PropertyPair> **>(sipCppPtrV);

#line 58 "sip/QtCore/qpycore_qvector.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QVector<QQmlContext::PropertyPair> *qv = new QVector<QQmlContext::PropertyPair>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete qv;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QQmlContext::PropertyPair *t = reinterpret_cast<QQmlContext::PropertyPair *>(
                sipForceConvertToType(itm, sipType_QQmlContext_PropertyPair, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QQmlContext::PropertyPair' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete qv;
            Py_DECREF(iter);

            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QQmlContext_PropertyPair, state);
        Py_DECREF(itm);
    }

    Py_DECREF(iter);
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 1637 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QQmlContext_PropertyPair(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QQmlContext_PropertyPair(void *sipCppV, PyObject *sipTransferObj)
{
   QVector< ::QQmlContext::PropertyPair> *sipCpp = reinterpret_cast<QVector< ::QQmlContext::PropertyPair> *>(sipCppV);

#line 32 "sip/QtCore/qpycore_qvector.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QQmlContext::PropertyPair *t = new QQmlContext::PropertyPair(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QQmlContext_PropertyPair,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 1670 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtQml_QVector_0100QQmlContext_PropertyPair = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_37,     /* QVector<QQmlContext::PropertyPair> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QQmlContext_PropertyPair,
    array_QVector_0100QQmlContext_PropertyPair,
    copy_QVector_0100QQmlContext_PropertyPair,
    release_QVector_0100QQmlContext_PropertyPair,
    convertTo_QVector_0100QQmlContext_PropertyPair,
    convertFrom_QVector_0100QQmlContext_PropertyPair
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 1706 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


extern "C" {static void assign_QList_0100QQmlError(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QQmlError(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QQmlError> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QQmlError> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QQmlError(SIP_SSIZE_T);}
static void *array_QList_0100QQmlError(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QQmlError>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QQmlError(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QQmlError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QQmlError>(reinterpret_cast<const QList< ::QQmlError> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QQmlError(void *, int);}
static void release_QList_0100QQmlError(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QQmlError> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QQmlError(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QQmlError(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QQmlError> **sipCppPtr = reinterpret_cast<QList< ::QQmlError> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QQmlError> *ql = new QList<QQmlError>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QQmlError *t = reinterpret_cast<QQmlError *>(
                sipForceConvertToType(itm, sipType_QQmlError, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QQmlError' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QQmlError, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 1816 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QQmlError(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QQmlError(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QQmlError> *sipCpp = reinterpret_cast<QList< ::QQmlError> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QQmlError *t = new QQmlError(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QQmlError,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 1849 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtQml_QList_0100QQmlError = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1740,     /* QList<QQmlError> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QQmlError,
    array_QList_0100QQmlError,
    copy_QList_0100QQmlError,
    release_QList_0100QQmlError,
    convertTo_QList_0100QQmlError,
    convertFrom_QList_0100QQmlError
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1881 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlproperty.sip"
#include <qqmlproperty.h>
#line 1885 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


extern "C" {static void assign_QList_0100QQmlProperty(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QQmlProperty(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QQmlProperty> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QQmlProperty> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QQmlProperty(SIP_SSIZE_T);}
static void *array_QList_0100QQmlProperty(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QQmlProperty>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QQmlProperty(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QQmlProperty(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QQmlProperty>(reinterpret_cast<const QList< ::QQmlProperty> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QQmlProperty(void *, int);}
static void release_QList_0100QQmlProperty(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QQmlProperty> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QQmlProperty(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QQmlProperty(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QQmlProperty> **sipCppPtr = reinterpret_cast<QList< ::QQmlProperty> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QQmlProperty> *ql = new QList<QQmlProperty>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QQmlProperty *t = reinterpret_cast<QQmlProperty *>(
                sipForceConvertToType(itm, sipType_QQmlProperty, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QQmlProperty' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QQmlProperty, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 1995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QQmlProperty(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QQmlProperty(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QQmlProperty> *sipCpp = reinterpret_cast<QList< ::QQmlProperty> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QQmlProperty *t = new QQmlProperty(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QQmlProperty,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 2028 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtQml_QList_0100QQmlProperty = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1211,     /* QList<QQmlProperty> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QQmlProperty,
    array_QList_0100QQmlProperty,
    copy_QList_0100QQmlProperty,
    release_QList_0100QQmlProperty,
    convertTo_QList_0100QQmlProperty,
    convertFrom_QList_0100QQmlProperty
};

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2060 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 2064 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


extern "C" {static void assign_QList_0100QJSValue(void *, SIP_SSIZE_T, void *);}
static void assign_QList_0100QJSValue(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast<QList< ::QJSValue> *>(sipDst)[sipDstIdx] = *reinterpret_cast<QList< ::QJSValue> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QJSValue(SIP_SSIZE_T);}
static void *array_QList_0100QJSValue(SIP_SSIZE_T sipNrElem)
{
    return new QList< ::QJSValue>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QJSValue(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QJSValue(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QList< ::QJSValue>(reinterpret_cast<const QList< ::QJSValue> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QJSValue(void *, int);}
static void release_QList_0100QJSValue(void *ptr, int)
{
    delete reinterpret_cast<QList< ::QJSValue> *>(ptr);
}



extern "C" {static int convertTo_QList_0100QJSValue(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QJSValue(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QList< ::QJSValue> **sipCppPtr = reinterpret_cast<QList< ::QJSValue> **>(sipCppPtrV);

#line 68 "sip/QtCore/qpycore_qlist.sip"
    PyObject *iter = PyObject_GetIter(sipPy);

    if (!sipIsErr)
    {
        PyErr_Clear();
        Py_XDECREF(iter);

        return (iter
#if PY_MAJOR_VERSION < 3
                && !PyString_Check(sipPy)
#endif
                && !PyUnicode_Check(sipPy));
    }

    if (!iter)
    {
        *sipIsErr = 1;

        return 0;
    }

    QList<QJSValue> *ql = new QList<QJSValue>;
 
    for (Py_ssize_t i = 0; ; ++i)
    {
        PyErr_Clear();
        PyObject *itm = PyIter_Next(iter);

        if (!itm)
        {
            if (PyErr_Occurred())
            {
                delete ql;
                Py_DECREF(iter);
                *sipIsErr = 1;

                return 0;
            }

            break;
        }

        int state;
        QJSValue *t = reinterpret_cast<QJSValue *>(
                sipForceConvertToType(itm, sipType_QJSValue, sipTransferObj,
                        SIP_NOT_NONE, &state, sipIsErr));

        if (*sipIsErr)
        {
            PyErr_Format(PyExc_TypeError,
                    "index %zd has type '%s' but 'QJSValue' is expected", i,
                    sipPyTypeName(Py_TYPE(itm)));

            Py_DECREF(itm);
            delete ql;
            Py_DECREF(iter);

            return 0;
        }

        ql->append(*t);

        sipReleaseType(t, sipType_QJSValue, state);
        Py_DECREF(itm);
    }
 
    Py_DECREF(iter);

    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 2174 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QJSValue(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QJSValue(void *sipCppV, PyObject *sipTransferObj)
{
   QList< ::QJSValue> *sipCpp = reinterpret_cast<QList< ::QJSValue> *>(sipCppV);

#line 42 "sip/QtCore/qpycore_qlist.sip"
    PyObject *l = PyList_New(sipCpp->size());

    if (!l)
        return 0;

    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QJSValue *t = new QJSValue(sipCpp->at(i));
        PyObject *tobj = sipConvertFromNewType(t, sipType_QJSValue,
                sipTransferObj);

        if (!tobj)
        {
            delete t;
            Py_DECREF(l);

            return 0;
        }

        PyList_SetItem(l, i, tobj);
    }

    return l;
#line 2207 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtQml_QList_0100QJSValue = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1995,     /* QList<QJSValue> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QJSValue,
    array_QList_0100QJSValue,
    copy_QList_0100QJSValue,
    release_QList_0100QJSValue,
    convertTo_QList_0100QJSValue,
    convertFrom_QList_0100QJSValue
};

#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qpyqmllistproperty.sip"
#include "qpyqmllistpropertywrapper.h"
#line 2239 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 2243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


extern "C" {static void assign_QQmlListProperty_0100QObject(void *, SIP_SSIZE_T, void *);}
static void assign_QQmlListProperty_0100QObject(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQmlListProperty< ::QObject> *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQmlListProperty< ::QObject> *>(sipSrc);
}


extern "C" {static void *array_QQmlListProperty_0100QObject(SIP_SSIZE_T);}
static void *array_QQmlListProperty_0100QObject(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQmlListProperty< ::QObject>[sipNrElem];
}


extern "C" {static void *copy_QQmlListProperty_0100QObject(const void *, SIP_SSIZE_T);}
static void *copy_QQmlListProperty_0100QObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQmlListProperty< ::QObject>(reinterpret_cast<const  ::QQmlListProperty< ::QObject> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QQmlListProperty_0100QObject(void *, int);}
static void release_QQmlListProperty_0100QObject(void *ptr, int)
{
    delete reinterpret_cast< ::QQmlListProperty< ::QObject> *>(ptr);
}



extern "C" {static int convertTo_QQmlListProperty_0100QObject(PyObject *, void **, int *, PyObject *);}
static int convertTo_QQmlListProperty_0100QObject(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *)
{
     ::QQmlListProperty< ::QObject> **sipCppPtr = reinterpret_cast< ::QQmlListProperty< ::QObject> **>(sipCppPtrV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qpyqmllistproperty.sip"
    if (sipIsErr == NULL)
        return PyObject_IsInstance(sipPy, (PyObject *)qpyqml_QQmlListPropertyWrapper_TypeObject);

    *sipCppPtr = ((qpyqml_QQmlListPropertyWrapper *)sipPy)->qml_list_property;

    // It isn't a temporary copy.
    return 0;
#line 2289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


extern "C" {static PyObject *convertFrom_QQmlListProperty_0100QObject(void *, PyObject *);}
static PyObject *convertFrom_QQmlListProperty_0100QObject(void *sipCppV, PyObject *)
{
    ::QQmlListProperty< ::QObject> *sipCpp = reinterpret_cast< ::QQmlListProperty< ::QObject> *>(sipCppV);

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qpyqmllistproperty.sip"
    return qpyqml_QQmlListPropertyWrapper_New(sipCpp, 0);
#line 2300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
}


sipMappedTypeDef sipTypeDef_QtQml_QQmlListProperty_0100QObject = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_666,     /* QQmlListProperty<QObject> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QQmlListProperty_0100QObject,
    array_QQmlListProperty_0100QObject,
    copy_QQmlListProperty_0100QObject,
    release_QQmlListProperty_0100QObject,
    convertTo_QQmlListProperty_0100QObject,
    convertFrom_QQmlListProperty_0100QObject
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlscriptstring.sip"
#include <qqmlscriptstring.h>
#line 2332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 2336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


PyDoc_STRVAR(doc_QQmlScriptString_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QQmlScriptString_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QQmlScriptString_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlScriptString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlScriptString, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlScriptString, sipName_isEmpty, doc_QQmlScriptString_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlScriptString_isUndefinedLiteral, "isUndefinedLiteral(self) -> bool");

extern "C" {static PyObject *meth_QQmlScriptString_isUndefinedLiteral(PyObject *, PyObject *);}
static PyObject *meth_QQmlScriptString_isUndefinedLiteral(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlScriptString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlScriptString, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndefinedLiteral();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlScriptString, sipName_isUndefinedLiteral, doc_QQmlScriptString_isUndefinedLiteral);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlScriptString_isNullLiteral, "isNullLiteral(self) -> bool");

extern "C" {static PyObject *meth_QQmlScriptString_isNullLiteral(PyObject *, PyObject *);}
static PyObject *meth_QQmlScriptString_isNullLiteral(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlScriptString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlScriptString, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNullLiteral();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlScriptString, sipName_isNullLiteral, doc_QQmlScriptString_isNullLiteral);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlScriptString_stringLiteral, "stringLiteral(self) -> str");

extern "C" {static PyObject *meth_QQmlScriptString_stringLiteral(PyObject *, PyObject *);}
static PyObject *meth_QQmlScriptString_stringLiteral(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlScriptString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlScriptString, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->stringLiteral());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlScriptString, sipName_stringLiteral, doc_QQmlScriptString_stringLiteral);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlScriptString_numberLiteral, "numberLiteral(self) -> Tuple[float, bool]");

extern "C" {static PyObject *meth_QQmlScriptString_numberLiteral(PyObject *, PyObject *);}
static PyObject *meth_QQmlScriptString_numberLiteral(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QQmlScriptString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlScriptString, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->numberLiteral(&a0);

            return sipBuildResult(0,"(db)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlScriptString, sipName_numberLiteral, doc_QQmlScriptString_numberLiteral);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlScriptString_booleanLiteral, "booleanLiteral(self) -> Tuple[bool, bool]");

extern "C" {static PyObject *meth_QQmlScriptString_booleanLiteral(PyObject *, PyObject *);}
static PyObject *meth_QQmlScriptString_booleanLiteral(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QQmlScriptString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlScriptString, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->booleanLiteral(&a0);

            return sipBuildResult(0,"(bb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlScriptString, sipName_booleanLiteral, doc_QQmlScriptString_booleanLiteral);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QQmlScriptString___ne__(PyObject *,PyObject *);}
static PyObject *slot_QQmlScriptString___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQmlScriptString *sipCpp = reinterpret_cast< ::QQmlScriptString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlScriptString));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlScriptString* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQmlScriptString, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QQmlScriptString::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, ne_slot, sipType_QQmlScriptString, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQmlScriptString___eq__(PyObject *,PyObject *);}
static PyObject *slot_QQmlScriptString___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQmlScriptString *sipCpp = reinterpret_cast< ::QQmlScriptString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlScriptString));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlScriptString* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQmlScriptString, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QQmlScriptString::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, eq_slot, sipType_QQmlScriptString, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlScriptString(void *, int);}
static void release_QQmlScriptString(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQmlScriptString *>(sipCppV);
}


extern "C" {static void assign_QQmlScriptString(void *, SIP_SSIZE_T, void *);}
static void assign_QQmlScriptString(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQmlScriptString *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQmlScriptString *>(sipSrc);
}


extern "C" {static void *array_QQmlScriptString(SIP_SSIZE_T);}
static void *array_QQmlScriptString(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQmlScriptString[sipNrElem];
}


extern "C" {static void *copy_QQmlScriptString(const void *, SIP_SSIZE_T);}
static void *copy_QQmlScriptString(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQmlScriptString(reinterpret_cast<const  ::QQmlScriptString *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQmlScriptString(sipSimpleWrapper *);}
static void dealloc_QQmlScriptString(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlScriptString(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQmlScriptString(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlScriptString(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQmlScriptString *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQmlScriptString();

            return sipCpp;
        }
    }

    {
        const  ::QQmlScriptString* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlScriptString, &a0))
        {
            sipCpp = new  ::QQmlScriptString(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QQmlScriptString[] = {
    {(void *)slot_QQmlScriptString___ne__, ne_slot},
    {(void *)slot_QQmlScriptString___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QQmlScriptString[] = {
    {SIP_MLNAME_CAST(sipName_booleanLiteral), meth_QQmlScriptString_booleanLiteral, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlScriptString_booleanLiteral)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QQmlScriptString_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlScriptString_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isNullLiteral), meth_QQmlScriptString_isNullLiteral, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlScriptString_isNullLiteral)},
    {SIP_MLNAME_CAST(sipName_isUndefinedLiteral), meth_QQmlScriptString_isUndefinedLiteral, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlScriptString_isUndefinedLiteral)},
    {SIP_MLNAME_CAST(sipName_numberLiteral), meth_QQmlScriptString_numberLiteral, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlScriptString_numberLiteral)},
    {SIP_MLNAME_CAST(sipName_stringLiteral), meth_QQmlScriptString_stringLiteral, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlScriptString_stringLiteral)}
};

PyDoc_STRVAR(doc_QQmlScriptString, "\1QQmlScriptString()\n"
"QQmlScriptString(QQmlScriptString)");


static pyqt5ClassPluginDef plugin_QQmlScriptString = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlScriptString = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlScriptString,
        {SIP_NULLPTR},
        &plugin_QQmlScriptString
    },
    {
        sipNameNr_QQmlScriptString,
        {0, 0, 1},
        6, methods_QQmlScriptString,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlScriptString,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QQmlScriptString,
    init_type_QQmlScriptString,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlScriptString,
    assign_QQmlScriptString,
    array_QQmlScriptString,
    copy_QQmlScriptString,
    release_QQmlScriptString,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlpropertyvaluesource.sip"
#include <qqmlpropertyvaluesource.h>
#line 2723 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlproperty.sip"
#include <qqmlproperty.h>
#line 2727 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


class sipQQmlPropertyValueSource : public  ::QQmlPropertyValueSource
{
public:
    sipQQmlPropertyValueSource();
    sipQQmlPropertyValueSource(const  ::QQmlPropertyValueSource&);
    virtual ~sipQQmlPropertyValueSource();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setTarget(const  ::QQmlProperty&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlPropertyValueSource(const sipQQmlPropertyValueSource &);
    sipQQmlPropertyValueSource &operator = (const sipQQmlPropertyValueSource &);

    char sipPyMethods[1];
};

sipQQmlPropertyValueSource::sipQQmlPropertyValueSource():  ::QQmlPropertyValueSource(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlPropertyValueSource::sipQQmlPropertyValueSource(const  ::QQmlPropertyValueSource& a0):  ::QQmlPropertyValueSource(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlPropertyValueSource::~sipQQmlPropertyValueSource()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQQmlPropertyValueSource::setTarget(const  ::QQmlProperty& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QQmlPropertyValueSource,sipName_setTarget);

    if (!sipMeth)
        return;

    extern void sipVH_QtQml_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QQmlProperty&);

    sipVH_QtQml_18(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlPropertyValueSource_setTarget, "setTarget(self, QQmlProperty)");

extern "C" {static PyObject *meth_QQmlPropertyValueSource_setTarget(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyValueSource_setTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QQmlProperty* a0;
         ::QQmlPropertyValueSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlPropertyValueSource, &sipCpp, sipType_QQmlProperty, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlPropertyValueSource, sipName_setTarget);
                return SIP_NULLPTR;
            }

            sipCpp->setTarget(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyValueSource, sipName_setTarget, doc_QQmlPropertyValueSource_setTarget);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlPropertyValueSource(void *, int);}
static void release_QQmlPropertyValueSource(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQmlPropertyValueSource *>(sipCppV);
    else
        delete reinterpret_cast< ::QQmlPropertyValueSource *>(sipCppV);
}


extern "C" {static int mixin_QQmlPropertyValueSource(PyObject *, PyObject *, PyObject *);}
static int mixin_QQmlPropertyValueSource(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    return sipInitMixin(sipSelf, sipArgs, sipKwds, (sipClassTypeDef *)&sipTypeDef_QtQml_QQmlPropertyValueSource);
}


extern "C" {static void dealloc_QQmlPropertyValueSource(sipSimpleWrapper *);}
static void dealloc_QQmlPropertyValueSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlPropertyValueSource *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlPropertyValueSource(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlPropertyValueSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlPropertyValueSource(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQmlPropertyValueSource *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQmlPropertyValueSource();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QQmlPropertyValueSource* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlPropertyValueSource, &a0))
        {
            sipCpp = new sipQQmlPropertyValueSource(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQmlPropertyValueSource[] = {
    {SIP_MLNAME_CAST(sipName_setTarget), meth_QQmlPropertyValueSource_setTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyValueSource_setTarget)}
};

PyDoc_STRVAR(doc_QQmlPropertyValueSource, "\1QQmlPropertyValueSource()\n"
"QQmlPropertyValueSource(QQmlPropertyValueSource)");


static pyqt5ClassPluginDef plugin_QQmlPropertyValueSource = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    "org.qt-project.Qt.QQmlPropertyValueSource"
};


sipClassTypeDef sipTypeDef_QtQml_QQmlPropertyValueSource = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlPropertyValueSource,
        {SIP_NULLPTR},
        &plugin_QQmlPropertyValueSource
    },
    {
        sipNameNr_QQmlPropertyValueSource,
        {0, 0, 1},
        1, methods_QQmlPropertyValueSource,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlPropertyValueSource,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlPropertyValueSource,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlPropertyValueSource,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlPropertyValueSource,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    mixin_QQmlPropertyValueSource
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlpropertymap.sip"
#include <qqmlpropertymap.h>
#line 2953 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 2957 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 2960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 2963 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 2966 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 2969 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 2972 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 2975 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 2978 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2981 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 2984 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2987 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 2990 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 2993 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 2996 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 2999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 3002 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 3005 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


class sipQQmlPropertyMap : public  ::QQmlPropertyMap
{
public:
    sipQQmlPropertyMap( ::QObject*);
    virtual ~sipQQmlPropertyMap();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QVariant updateValue(const  ::QString&,const  ::QVariant&) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlPropertyMap(const sipQQmlPropertyMap &);
    sipQQmlPropertyMap &operator = (const sipQQmlPropertyMap &);

    char sipPyMethods[8];
};

sipQQmlPropertyMap::sipQQmlPropertyMap( ::QObject*a0):  ::QQmlPropertyMap(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlPropertyMap::~sipQQmlPropertyMap()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQmlPropertyMap::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlPropertyMap);

    return  ::QQmlPropertyMap::metaObject();
}

int sipQQmlPropertyMap::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQmlPropertyMap::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlPropertyMap,_c,_id,_a);

    return _id;
}

void *sipQQmlPropertyMap::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlPropertyMap, _clname, &sipCpp) ? sipCpp :  ::QQmlPropertyMap::qt_metacast(_clname));
}

 ::QVariant sipQQmlPropertyMap::updateValue(const  ::QString& a0,const  ::QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_updateValue);

    if (!sipMeth)
        return  ::QQmlPropertyMap::updateValue(a0,a1);

    extern  ::QVariant sipVH_QtQml_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,const  ::QVariant&);

    return sipVH_QtQml_17(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQQmlPropertyMap::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQmlPropertyMap::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlPropertyMap::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQmlPropertyMap::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQmlPropertyMap::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQmlPropertyMap::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlPropertyMap::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQmlPropertyMap::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlPropertyMap::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQmlPropertyMap::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlPropertyMap::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQmlPropertyMap::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlPropertyMap::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQmlPropertyMap::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlPropertyMap_value, "value(self, str) -> Any");

extern "C" {static PyObject *meth_QQmlPropertyMap_value(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlPropertyMap, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->value(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_value, doc_QQmlPropertyMap_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlPropertyMap_insert, "insert(self, str, Any)");

extern "C" {static PyObject *meth_QQmlPropertyMap_insert(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QQmlPropertyMap, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->insert(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_insert, doc_QQmlPropertyMap_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlPropertyMap_clear, "clear(self, str)");

extern "C" {static PyObject *meth_QQmlPropertyMap_clear(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlPropertyMap, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->clear(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_clear, doc_QQmlPropertyMap_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlPropertyMap_keys, "keys(self) -> List[str]");

extern "C" {static PyObject *meth_QQmlPropertyMap_keys(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_keys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlPropertyMap, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->keys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_keys, doc_QQmlPropertyMap_keys);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlPropertyMap_count, "count(self) -> int");

extern "C" {static PyObject *meth_QQmlPropertyMap_count(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlPropertyMap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_count, doc_QQmlPropertyMap_count);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlPropertyMap_size, "size(self) -> int");

extern "C" {static PyObject *meth_QQmlPropertyMap_size(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlPropertyMap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_size, doc_QQmlPropertyMap_size);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlPropertyMap_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QQmlPropertyMap_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlPropertyMap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_isEmpty, doc_QQmlPropertyMap_isEmpty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlPropertyMap_contains, "contains(self, str) -> bool");

extern "C" {static PyObject *meth_QQmlPropertyMap_contains(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlPropertyMap, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_contains, doc_QQmlPropertyMap_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlPropertyMap_updateValue, "updateValue(self, str, Any) -> Any");

extern "C" {static PyObject *meth_QQmlPropertyMap_updateValue(PyObject *, PyObject *);}
static PyObject *meth_QQmlPropertyMap_updateValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QQmlPropertyMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QQmlPropertyMap, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QQmlPropertyMap::updateValue(*a0,*a1) : sipCpp->updateValue(*a0,*a1)));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName_updateValue, doc_QQmlPropertyMap_updateValue);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QQmlPropertyMap___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QQmlPropertyMap___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQmlPropertyMap *sipCpp = reinterpret_cast< ::QQmlPropertyMap *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlPropertyMap));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QString,&a0, &a0State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((*sipCpp)[*a0]);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlPropertyMap, sipName___getitem__, SIP_NULLPTR);

    return SIP_NULLPTR;
}


extern "C" {static SIP_SSIZE_T slot_QQmlPropertyMap___len__(PyObject *);}
static SIP_SSIZE_T slot_QQmlPropertyMap___len__(PyObject *sipSelf)
{
     ::QQmlPropertyMap *sipCpp = reinterpret_cast< ::QQmlPropertyMap *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlPropertyMap));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->size();
#line 3532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQmlPropertyMap(void *, const sipTypeDef *);}
static void *cast_QQmlPropertyMap(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQmlPropertyMap *sipCpp = reinterpret_cast< ::QQmlPropertyMap *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlPropertyMap(void *, int);}
static void release_QQmlPropertyMap(void *sipCppV, int)
{
     ::QQmlPropertyMap *sipCpp = reinterpret_cast< ::QQmlPropertyMap *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlPropertyMap(sipSimpleWrapper *);}
static void dealloc_QQmlPropertyMap(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlPropertyMap *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlPropertyMap(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlPropertyMap(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlPropertyMap(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlPropertyMap *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQmlPropertyMap(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlPropertyMap[] = {{9, 0, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QQmlPropertyMap[] = {
    {(void *)slot_QQmlPropertyMap___getitem__, getitem_slot},
    {(void *)slot_QQmlPropertyMap___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QQmlPropertyMap[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QQmlPropertyMap_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QQmlPropertyMap_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_contains)},
    {SIP_MLNAME_CAST(sipName_count), meth_QQmlPropertyMap_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_count)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QQmlPropertyMap_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_insert)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QQmlPropertyMap_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_isEmpty)},
    {SIP_MLNAME_CAST(sipName_keys), meth_QQmlPropertyMap_keys, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_keys)},
    {SIP_MLNAME_CAST(sipName_size), meth_QQmlPropertyMap_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_size)},
    {SIP_MLNAME_CAST(sipName_updateValue), meth_QQmlPropertyMap_updateValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_updateValue)},
    {SIP_MLNAME_CAST(sipName_value), meth_QQmlPropertyMap_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlPropertyMap_value)}
};

PyDoc_STRVAR(doc_QQmlPropertyMap, "\1QQmlPropertyMap(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQmlPropertyMap[] = {
    {"valueChanged(QString,QVariant)", "\1valueChanged(self, str, Any)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQmlPropertyMap = {
    & ::QQmlPropertyMap::staticMetaObject,
    0,
    signals_QQmlPropertyMap,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlPropertyMap = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlPropertyMap,
        {SIP_NULLPTR},
        &plugin_QQmlPropertyMap
    },
    {
        sipNameNr_QQmlPropertyMap,
        {0, 0, 1},
        9, methods_QQmlPropertyMap,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlPropertyMap,
    -1,
    -1,
    supers_QQmlPropertyMap,
    slots_QQmlPropertyMap,
    init_type_QQmlPropertyMap,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlPropertyMap,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlPropertyMap,
    cast_QQmlPropertyMap,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlproperty.sip"
#include <qqmlproperty.h>
#line 3701 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 3705 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 3708 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 3711 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 3714 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 3717 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 169 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 3720 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 3723 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


PyDoc_STRVAR(doc_QQmlProperty_type, "type(self) -> QQmlProperty.Type");

extern "C" {static PyObject *meth_QQmlProperty_type(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
             ::QQmlProperty::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQmlProperty_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_type, doc_QQmlProperty_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_isValid(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_isValid, doc_QQmlProperty_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_isProperty, "isProperty(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_isProperty(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_isProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isProperty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_isProperty, doc_QQmlProperty_isProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_isSignalProperty, "isSignalProperty(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_isSignalProperty(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_isSignalProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSignalProperty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_isSignalProperty, doc_QQmlProperty_isSignalProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_propertyType, "propertyType(self) -> int");

extern "C" {static PyObject *meth_QQmlProperty_propertyType(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_propertyType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyType();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_propertyType, doc_QQmlProperty_propertyType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_propertyTypeCategory, "propertyTypeCategory(self) -> QQmlProperty.PropertyTypeCategory");

extern "C" {static PyObject *meth_QQmlProperty_propertyTypeCategory(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_propertyTypeCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
             ::QQmlProperty::PropertyTypeCategory sipRes;

            sipRes = sipCpp->propertyTypeCategory();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQmlProperty_PropertyTypeCategory);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_propertyTypeCategory, doc_QQmlProperty_propertyTypeCategory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_propertyTypeName, "propertyTypeName(self) -> str");

extern "C" {static PyObject *meth_QQmlProperty_propertyTypeName(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_propertyTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->propertyTypeName();

            if (sipRes == SIP_NULLPTR)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return PyUnicode_DecodeASCII(sipRes, strlen(sipRes), SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_propertyTypeName, doc_QQmlProperty_propertyTypeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_name, "name(self) -> str");

extern "C" {static PyObject *meth_QQmlProperty_name(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_name, doc_QQmlProperty_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_read, "read(self) -> Any\n"
"read(QObject, str) -> Any\n"
"read(QObject, str, QQmlContext) -> Any\n"
"read(QObject, str, QQmlEngine) -> Any");

extern "C" {static PyObject *meth_QQmlProperty_read(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->read());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    {
        const  ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1", sipType_QObject, &a0, sipType_QString,&a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant( ::QQmlProperty::read(a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    {
        const  ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QQmlContext* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QQmlContext, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant( ::QQmlProperty::read(a0,*a1,a2));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    {
        const  ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QQmlEngine* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QQmlEngine, &a2))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant( ::QQmlProperty::read(a0,*a1,a2));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_read, doc_QQmlProperty_read);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_write, "write(self, Any) -> bool\n"
"write(QObject, str, Any) -> bool\n"
"write(QObject, str, Any, QQmlContext) -> bool\n"
"write(QObject, str, Any, QQmlEngine) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_write(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QVariant* a0;
        int a0State = 0;
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlProperty, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->write(*a0);
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QVariant* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QVariant, &a2, &a2State))
        {
            bool sipRes;

            sipRes =  ::QQmlProperty::write(a0,*a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QVariant* a2;
        int a2State = 0;
         ::QQmlContext* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QVariant, &a2, &a2State, sipType_QQmlContext, &a3))
        {
            bool sipRes;

            sipRes =  ::QQmlProperty::write(a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QVariant* a2;
        int a2State = 0;
         ::QQmlEngine* a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QVariant, &a2, &a2State, sipType_QQmlEngine, &a3))
        {
            bool sipRes;

            sipRes =  ::QQmlProperty::write(a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_write, doc_QQmlProperty_write);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_reset, "reset(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_reset(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->reset();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_reset, doc_QQmlProperty_reset);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_hasNotifySignal, "hasNotifySignal(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_hasNotifySignal(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_hasNotifySignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasNotifySignal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_hasNotifySignal, doc_QQmlProperty_hasNotifySignal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_needsNotifySignal, "needsNotifySignal(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_needsNotifySignal(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_needsNotifySignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->needsNotifySignal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_needsNotifySignal, doc_QQmlProperty_needsNotifySignal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_connectNotifySignal, "connectNotifySignal(self, PYQT_SLOT) -> bool\n"
"connectNotifySignal(self, QObject, int) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_connectNotifySignal(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_connectNotifySignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * a0;
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QQmlProperty, &sipCpp, &a0))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 81 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlproperty.sip"
        QObject *receiver;
        QByteArray slot;
        
        if ((sipError = pyqt5_qtqml_get_connection_parts(a0, 0, "()", false, &receiver, slot)) == sipErrorNone)
        {
            sipRes = sipCpp->connectNotifySignal(receiver, slot.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 4251 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
         ::QObject* a0;
        int a1;
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QQmlProperty, &sipCpp, sipType_QObject, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->connectNotifySignal(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_connectNotifySignal, doc_QQmlProperty_connectNotifySignal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_isWritable, "isWritable(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_isWritable, doc_QQmlProperty_isWritable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_isDesignable, "isDesignable(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_isDesignable(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_isDesignable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDesignable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_isDesignable, doc_QQmlProperty_isDesignable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_isResettable, "isResettable(self) -> bool");

extern "C" {static PyObject *meth_QQmlProperty_isResettable(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_isResettable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isResettable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_isResettable, doc_QQmlProperty_isResettable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_object, "object(self) -> QObject");

extern "C" {static PyObject *meth_QQmlProperty_object(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->object();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_object, doc_QQmlProperty_object);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_index, "index(self) -> int");

extern "C" {static PyObject *meth_QQmlProperty_index(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->index();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_index, doc_QQmlProperty_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_property, "property(self) -> QMetaProperty");

extern "C" {static PyObject *meth_QQmlProperty_property(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
             ::QMetaProperty*sipRes;

            sipRes = new  ::QMetaProperty(sipCpp->property());

            return sipConvertFromNewType(sipRes,sipType_QMetaProperty,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_property, doc_QQmlProperty_property);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlProperty_method, "method(self) -> QMetaMethod");

extern "C" {static PyObject *meth_QQmlProperty_method(PyObject *, PyObject *);}
static PyObject *meth_QQmlProperty_method(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlProperty, &sipCpp))
        {
             ::QMetaMethod*sipRes;

            sipRes = new  ::QMetaMethod(sipCpp->method());

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlProperty, sipName_method, doc_QQmlProperty_method);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QQmlProperty___ne__(PyObject *,PyObject *);}
static PyObject *slot_QQmlProperty___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQmlProperty *sipCpp = reinterpret_cast< ::QQmlProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlProperty));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQmlProperty, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QQmlProperty::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, ne_slot, sipType_QQmlProperty, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQmlProperty___eq__(PyObject *,PyObject *);}
static PyObject *slot_QQmlProperty___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQmlProperty *sipCpp = reinterpret_cast< ::QQmlProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlProperty));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlProperty* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQmlProperty, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QQmlProperty::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, eq_slot, sipType_QQmlProperty, sipSelf, sipArg);
}


extern "C" {static long slot_QQmlProperty___hash__(PyObject *);}
static long slot_QQmlProperty___hash__(PyObject *sipSelf)
{
     ::QQmlProperty *sipCpp = reinterpret_cast< ::QQmlProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlProperty));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 56 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlproperty.sip"
        sipRes = qHash(*sipCpp);
#line 4562 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlProperty(void *, int);}
static void release_QQmlProperty(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQmlProperty *>(sipCppV);
}


extern "C" {static void assign_QQmlProperty(void *, SIP_SSIZE_T, void *);}
static void assign_QQmlProperty(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQmlProperty *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQmlProperty *>(sipSrc);
}


extern "C" {static void *array_QQmlProperty(SIP_SSIZE_T);}
static void *array_QQmlProperty(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQmlProperty[sipNrElem];
}


extern "C" {static void *copy_QQmlProperty(const void *, SIP_SSIZE_T);}
static void *copy_QQmlProperty(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQmlProperty(reinterpret_cast<const  ::QQmlProperty *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQmlProperty(sipSimpleWrapper *);}
static void dealloc_QQmlProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlProperty(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQmlProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlProperty(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQmlProperty *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQmlProperty();

            return sipCpp;
        }
    }

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8", sipType_QObject, &a0))
        {
            sipCpp = new  ::QQmlProperty(a0);

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
         ::QQmlContext* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J8", sipType_QObject, &a0, sipType_QQmlContext, &a1))
        {
            sipCpp = new  ::QQmlProperty(a0,a1);

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
         ::QQmlEngine* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J8", sipType_QObject, &a0, sipType_QQmlEngine, &a1))
        {
            sipCpp = new  ::QQmlProperty(a0,a1);

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J1", sipType_QObject, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new  ::QQmlProperty(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QQmlContext* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QQmlContext, &a2))
        {
            sipCpp = new  ::QQmlProperty(a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QQmlEngine* a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J8J1J8", sipType_QObject, &a0, sipType_QString,&a1, &a1State, sipType_QQmlEngine, &a2))
        {
            sipCpp = new  ::QQmlProperty(a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QQmlProperty* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlProperty, &a0))
        {
            sipCpp = new  ::QQmlProperty(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QQmlProperty[] = {
    {(void *)slot_QQmlProperty___ne__, ne_slot},
    {(void *)slot_QQmlProperty___eq__, eq_slot},
    {(void *)slot_QQmlProperty___hash__, hash_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QQmlProperty[] = {
    {SIP_MLNAME_CAST(sipName_connectNotifySignal), meth_QQmlProperty_connectNotifySignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_connectNotifySignal)},
    {SIP_MLNAME_CAST(sipName_hasNotifySignal), meth_QQmlProperty_hasNotifySignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_hasNotifySignal)},
    {SIP_MLNAME_CAST(sipName_index), meth_QQmlProperty_index, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_index)},
    {SIP_MLNAME_CAST(sipName_isDesignable), meth_QQmlProperty_isDesignable, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_isDesignable)},
    {SIP_MLNAME_CAST(sipName_isProperty), meth_QQmlProperty_isProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_isProperty)},
    {SIP_MLNAME_CAST(sipName_isResettable), meth_QQmlProperty_isResettable, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_isResettable)},
    {SIP_MLNAME_CAST(sipName_isSignalProperty), meth_QQmlProperty_isSignalProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_isSignalProperty)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QQmlProperty_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_isValid)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QQmlProperty_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_isWritable)},
    {SIP_MLNAME_CAST(sipName_method), meth_QQmlProperty_method, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_method)},
    {SIP_MLNAME_CAST(sipName_name), meth_QQmlProperty_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_name)},
    {SIP_MLNAME_CAST(sipName_needsNotifySignal), meth_QQmlProperty_needsNotifySignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_needsNotifySignal)},
    {SIP_MLNAME_CAST(sipName_object), meth_QQmlProperty_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_object)},
    {SIP_MLNAME_CAST(sipName_property), meth_QQmlProperty_property, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_property)},
    {SIP_MLNAME_CAST(sipName_propertyType), meth_QQmlProperty_propertyType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_propertyType)},
    {SIP_MLNAME_CAST(sipName_propertyTypeCategory), meth_QQmlProperty_propertyTypeCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_propertyTypeCategory)},
    {SIP_MLNAME_CAST(sipName_propertyTypeName), meth_QQmlProperty_propertyTypeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_propertyTypeName)},
    {SIP_MLNAME_CAST(sipName_read), meth_QQmlProperty_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_read)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QQmlProperty_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_reset)},
    {SIP_MLNAME_CAST(sipName_type), meth_QQmlProperty_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_type)},
    {SIP_MLNAME_CAST(sipName_write), meth_QQmlProperty_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlProperty_write)}
};

static sipEnumMemberDef enummembers_QQmlProperty[] = {
    {sipName_Invalid, static_cast<int>( ::QQmlProperty::Invalid), 38},
    {sipName_InvalidCategory, static_cast<int>( ::QQmlProperty::InvalidCategory), 37},
    {sipName_List, static_cast<int>( ::QQmlProperty::List), 37},
    {sipName_Normal, static_cast<int>( ::QQmlProperty::Normal), 37},
    {sipName_Object, static_cast<int>( ::QQmlProperty::Object), 37},
    {sipName_Property, static_cast<int>( ::QQmlProperty::Property), 38},
    {sipName_SignalProperty, static_cast<int>( ::QQmlProperty::SignalProperty), 38},
};

PyDoc_STRVAR(doc_QQmlProperty, "\1QQmlProperty()\n"
"QQmlProperty(QObject)\n"
"QQmlProperty(QObject, QQmlContext)\n"
"QQmlProperty(QObject, QQmlEngine)\n"
"QQmlProperty(QObject, str)\n"
"QQmlProperty(QObject, str, QQmlContext)\n"
"QQmlProperty(QObject, str, QQmlEngine)\n"
"QQmlProperty(QQmlProperty)");


static pyqt5ClassPluginDef plugin_QQmlProperty = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlProperty = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlProperty,
        {SIP_NULLPTR},
        &plugin_QQmlProperty
    },
    {
        sipNameNr_QQmlProperty,
        {0, 0, 1},
        21, methods_QQmlProperty,
        7, enummembers_QQmlProperty,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlProperty,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QQmlProperty,
    init_type_QQmlProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlProperty,
    assign_QQmlProperty,
    array_QQmlProperty,
    copy_QQmlProperty,
    release_QQmlProperty,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlparserstatus.sip"
#include <qqmlparserstatus.h>
#line 4839 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"



class sipQQmlParserStatus : public  ::QQmlParserStatus
{
public:
    sipQQmlParserStatus();
    sipQQmlParserStatus(const  ::QQmlParserStatus&);
    virtual ~sipQQmlParserStatus();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void componentComplete() SIP_OVERRIDE;
    void classBegin() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlParserStatus(const sipQQmlParserStatus &);
    sipQQmlParserStatus &operator = (const sipQQmlParserStatus &);

    char sipPyMethods[2];
};

sipQQmlParserStatus::sipQQmlParserStatus():  ::QQmlParserStatus(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlParserStatus::sipQQmlParserStatus(const  ::QQmlParserStatus& a0):  ::QQmlParserStatus(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlParserStatus::~sipQQmlParserStatus()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQQmlParserStatus::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QQmlParserStatus,sipName_componentComplete);

    if (!sipMeth)
        return;

    extern void sipVH_QtQml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQml_8(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQQmlParserStatus::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QQmlParserStatus,sipName_classBegin);

    if (!sipMeth)
        return;

    extern void sipVH_QtQml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQml_8(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QQmlParserStatus_classBegin, "classBegin(self)");

extern "C" {static PyObject *meth_QQmlParserStatus_classBegin(PyObject *, PyObject *);}
static PyObject *meth_QQmlParserStatus_classBegin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QQmlParserStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlParserStatus, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlParserStatus, sipName_classBegin);
                return SIP_NULLPTR;
            }

            sipCpp->classBegin();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlParserStatus, sipName_classBegin, doc_QQmlParserStatus_classBegin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlParserStatus_componentComplete, "componentComplete(self)");

extern "C" {static PyObject *meth_QQmlParserStatus_componentComplete(PyObject *, PyObject *);}
static PyObject *meth_QQmlParserStatus_componentComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QQmlParserStatus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlParserStatus, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlParserStatus, sipName_componentComplete);
                return SIP_NULLPTR;
            }

            sipCpp->componentComplete();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlParserStatus, sipName_componentComplete, doc_QQmlParserStatus_componentComplete);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlParserStatus(void *, int);}
static void release_QQmlParserStatus(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQmlParserStatus *>(sipCppV);
    else
        delete reinterpret_cast< ::QQmlParserStatus *>(sipCppV);
}


extern "C" {static int mixin_QQmlParserStatus(PyObject *, PyObject *, PyObject *);}
static int mixin_QQmlParserStatus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    return sipInitMixin(sipSelf, sipArgs, sipKwds, (sipClassTypeDef *)&sipTypeDef_QtQml_QQmlParserStatus);
}


extern "C" {static void dealloc_QQmlParserStatus(sipSimpleWrapper *);}
static void dealloc_QQmlParserStatus(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlParserStatus *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlParserStatus(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlParserStatus(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlParserStatus(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQmlParserStatus *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQmlParserStatus();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QQmlParserStatus* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlParserStatus, &a0))
        {
            sipCpp = new sipQQmlParserStatus(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQmlParserStatus[] = {
    {SIP_MLNAME_CAST(sipName_classBegin), meth_QQmlParserStatus_classBegin, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlParserStatus_classBegin)},
    {SIP_MLNAME_CAST(sipName_componentComplete), meth_QQmlParserStatus_componentComplete, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlParserStatus_componentComplete)}
};

PyDoc_STRVAR(doc_QQmlParserStatus, "\1QQmlParserStatus()\n"
"QQmlParserStatus(QQmlParserStatus)");


static pyqt5ClassPluginDef plugin_QQmlParserStatus = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    "org.qt-project.Qt.QQmlParserStatus"
};


sipClassTypeDef sipTypeDef_QtQml_QQmlParserStatus = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlParserStatus,
        {SIP_NULLPTR},
        &plugin_QQmlParserStatus
    },
    {
        sipNameNr_QQmlParserStatus,
        {0, 0, 1},
        2, methods_QQmlParserStatus,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlParserStatus,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlParserStatus,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlParserStatus,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlParserStatus,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    mixin_QQmlParserStatus
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlnetworkaccessmanagerfactory.sip"
#include <qqmlnetworkaccessmanagerfactory.h>
#line 5116 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 5120 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 5123 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


class sipQQmlNetworkAccessManagerFactory : public  ::QQmlNetworkAccessManagerFactory
{
public:
    sipQQmlNetworkAccessManagerFactory();
    sipQQmlNetworkAccessManagerFactory(const  ::QQmlNetworkAccessManagerFactory&);
    virtual ~sipQQmlNetworkAccessManagerFactory();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QNetworkAccessManager* create( ::QObject*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlNetworkAccessManagerFactory(const sipQQmlNetworkAccessManagerFactory &);
    sipQQmlNetworkAccessManagerFactory &operator = (const sipQQmlNetworkAccessManagerFactory &);

    char sipPyMethods[1];
};

sipQQmlNetworkAccessManagerFactory::sipQQmlNetworkAccessManagerFactory():  ::QQmlNetworkAccessManagerFactory(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlNetworkAccessManagerFactory::sipQQmlNetworkAccessManagerFactory(const  ::QQmlNetworkAccessManagerFactory& a0):  ::QQmlNetworkAccessManagerFactory(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlNetworkAccessManagerFactory::~sipQQmlNetworkAccessManagerFactory()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QNetworkAccessManager* sipQQmlNetworkAccessManagerFactory::create( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QQmlNetworkAccessManagerFactory,sipName_create);

    if (!sipMeth)
        return 0;

    extern  ::QNetworkAccessManager* sipVH_QtQml_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    return sipVH_QtQml_16(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlNetworkAccessManagerFactory_create, "create(self, QObject) -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QQmlNetworkAccessManagerFactory_create(PyObject *, PyObject *);}
static PyObject *meth_QQmlNetworkAccessManagerFactory_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QObject* a0;
         ::QQmlNetworkAccessManagerFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQmlNetworkAccessManagerFactory, &sipCpp, sipType_QObject, &a0))
        {
             ::QNetworkAccessManager*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlNetworkAccessManagerFactory, sipName_create);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->create(a0);

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlNetworkAccessManagerFactory, sipName_create, doc_QQmlNetworkAccessManagerFactory_create);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlNetworkAccessManagerFactory(void *, int);}
static void release_QQmlNetworkAccessManagerFactory(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQmlNetworkAccessManagerFactory *>(sipCppV);
    else
        delete reinterpret_cast< ::QQmlNetworkAccessManagerFactory *>(sipCppV);
}


extern "C" {static void dealloc_QQmlNetworkAccessManagerFactory(sipSimpleWrapper *);}
static void dealloc_QQmlNetworkAccessManagerFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlNetworkAccessManagerFactory *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlNetworkAccessManagerFactory(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlNetworkAccessManagerFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlNetworkAccessManagerFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQmlNetworkAccessManagerFactory *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQmlNetworkAccessManagerFactory();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QQmlNetworkAccessManagerFactory* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlNetworkAccessManagerFactory, &a0))
        {
            sipCpp = new sipQQmlNetworkAccessManagerFactory(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQmlNetworkAccessManagerFactory[] = {
    {SIP_MLNAME_CAST(sipName_create), meth_QQmlNetworkAccessManagerFactory_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlNetworkAccessManagerFactory_create)}
};

PyDoc_STRVAR(doc_QQmlNetworkAccessManagerFactory, "\1QQmlNetworkAccessManagerFactory()\n"
"QQmlNetworkAccessManagerFactory(QQmlNetworkAccessManagerFactory)");


static pyqt5ClassPluginDef plugin_QQmlNetworkAccessManagerFactory = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlNetworkAccessManagerFactory = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlNetworkAccessManagerFactory,
        {SIP_NULLPTR},
        &plugin_QQmlNetworkAccessManagerFactory
    },
    {
        sipNameNr_QQmlNetworkAccessManagerFactory,
        {0, 0, 1},
        1, methods_QQmlNetworkAccessManagerFactory,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlNetworkAccessManagerFactory,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlNetworkAccessManagerFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlNetworkAccessManagerFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlNetworkAccessManagerFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmllist.sip"
#include <qqmllist.h>
#line 5343 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 5347 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 5350 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 5353 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


PyDoc_STRVAR(doc_QQmlListReference_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_isValid(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_isValid, doc_QQmlListReference_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_object, "object(self) -> QObject");

extern "C" {static PyObject *meth_QQmlListReference_object(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->object();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_object, doc_QQmlListReference_object);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_listElementType, "listElementType(self) -> QMetaObject");

extern "C" {static PyObject *meth_QQmlListReference_listElementType(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_listElementType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            const  ::QMetaObject*sipRes;

            sipRes = sipCpp->listElementType();

            return sipConvertFromType(const_cast< ::QMetaObject *>(sipRes),sipType_QMetaObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_listElementType, doc_QQmlListReference_listElementType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_canAppend, "canAppend(self) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_canAppend(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_canAppend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canAppend();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_canAppend, doc_QQmlListReference_canAppend);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_canAt, "canAt(self) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_canAt(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_canAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canAt();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_canAt, doc_QQmlListReference_canAt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_canClear, "canClear(self) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_canClear(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_canClear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canClear();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_canClear, doc_QQmlListReference_canClear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_canCount, "canCount(self) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_canCount(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_canCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canCount();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_canCount, doc_QQmlListReference_canCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_isManipulable, "isManipulable(self) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_isManipulable(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_isManipulable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isManipulable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_isManipulable, doc_QQmlListReference_isManipulable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_isReadable, "isReadable(self) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_isReadable, doc_QQmlListReference_isReadable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_append, "append(self, QObject) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_append(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQmlListReference, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->append(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_append, doc_QQmlListReference_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_at, "at(self, int) -> QObject");

extern "C" {static PyObject *meth_QQmlListReference_at(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QQmlListReference, &sipCpp, &a0))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->at(a0);

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_at, doc_QQmlListReference_at);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_clear, "clear(self) -> bool");

extern "C" {static PyObject *meth_QQmlListReference_clear(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->clear();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_clear, doc_QQmlListReference_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlListReference_count, "count(self) -> int");

extern "C" {static PyObject *meth_QQmlListReference_count(PyObject *, PyObject *);}
static PyObject *meth_QQmlListReference_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlListReference *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlListReference, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlListReference, sipName_count, doc_QQmlListReference_count);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlListReference(void *, int);}
static void release_QQmlListReference(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQmlListReference *>(sipCppV);
}


extern "C" {static void assign_QQmlListReference(void *, SIP_SSIZE_T, void *);}
static void assign_QQmlListReference(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQmlListReference *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQmlListReference *>(sipSrc);
}


extern "C" {static void *array_QQmlListReference(SIP_SSIZE_T);}
static void *array_QQmlListReference(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQmlListReference[sipNrElem];
}


extern "C" {static void *copy_QQmlListReference(const void *, SIP_SSIZE_T);}
static void *copy_QQmlListReference(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQmlListReference(reinterpret_cast<const  ::QQmlListReference *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQmlListReference(sipSimpleWrapper *);}
static void dealloc_QQmlListReference(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlListReference(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQmlListReference(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlListReference(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQmlListReference *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQmlListReference();

            return sipCpp;
        }
    }

    {
         ::QObject* a0;
        const char* a1;
        PyObject *a1Keep;
         ::QQmlEngine* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_engine,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8AA|J8", sipType_QObject, &a0, &a1Keep, &a1, sipType_QQmlEngine, &a2))
        {
            sipCpp = new  ::QQmlListReference(a0,a1,a2);
            Py_DECREF(a1Keep);

            return sipCpp;
        }
    }

    {
        const  ::QQmlListReference* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlListReference, &a0))
        {
            sipCpp = new  ::QQmlListReference(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQmlListReference[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QQmlListReference_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_append)},
    {SIP_MLNAME_CAST(sipName_at), meth_QQmlListReference_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_at)},
    {SIP_MLNAME_CAST(sipName_canAppend), meth_QQmlListReference_canAppend, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_canAppend)},
    {SIP_MLNAME_CAST(sipName_canAt), meth_QQmlListReference_canAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_canAt)},
    {SIP_MLNAME_CAST(sipName_canClear), meth_QQmlListReference_canClear, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_canClear)},
    {SIP_MLNAME_CAST(sipName_canCount), meth_QQmlListReference_canCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_canCount)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QQmlListReference_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_clear)},
    {SIP_MLNAME_CAST(sipName_count), meth_QQmlListReference_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_count)},
    {SIP_MLNAME_CAST(sipName_isManipulable), meth_QQmlListReference_isManipulable, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_isManipulable)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QQmlListReference_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_isReadable)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QQmlListReference_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_isValid)},
    {SIP_MLNAME_CAST(sipName_listElementType), meth_QQmlListReference_listElementType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_listElementType)},
    {SIP_MLNAME_CAST(sipName_object), meth_QQmlListReference_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlListReference_object)}
};

PyDoc_STRVAR(doc_QQmlListReference, "\1QQmlListReference()\n"
"QQmlListReference(QObject, str, engine: QQmlEngine = None)\n"
"QQmlListReference(QQmlListReference)");


static pyqt5ClassPluginDef plugin_QQmlListReference = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlListReference = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlListReference,
        {SIP_NULLPTR},
        &plugin_QQmlListReference
    },
    {
        sipNameNr_QQmlListReference,
        {0, 0, 1},
        13, methods_QQmlListReference,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlListReference,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlListReference,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlListReference,
    assign_QQmlListReference,
    array_QQmlListReference,
    copy_QQmlListReference,
    release_QQmlListReference,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 5894 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 5898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


class sipQQmlIncubationController : public  ::QQmlIncubationController
{
public:
    sipQQmlIncubationController();
    virtual ~sipQQmlIncubationController();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void incubatingObjectCountChanged(int) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlIncubationController(const sipQQmlIncubationController &);
    sipQQmlIncubationController &operator = (const sipQQmlIncubationController &);

    char sipPyMethods[1];
};

sipQQmlIncubationController::sipQQmlIncubationController():  ::QQmlIncubationController(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlIncubationController::~sipQQmlIncubationController()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQQmlIncubationController::incubatingObjectCountChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_incubatingObjectCountChanged);

    if (!sipMeth)
    {
         ::QQmlIncubationController::incubatingObjectCountChanged(a0);
        return;
    }

    extern void sipVH_QtQml_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtQml_15(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlIncubationController_engine, "engine(self) -> QQmlEngine");

extern "C" {static PyObject *meth_QQmlIncubationController_engine(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubationController_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubationController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubationController, &sipCpp))
        {
             ::QQmlEngine*sipRes;

            sipRes = sipCpp->engine();

            return sipConvertFromType(sipRes,sipType_QQmlEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubationController, sipName_engine, doc_QQmlIncubationController_engine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubationController_incubatingObjectCount, "incubatingObjectCount(self) -> int");

extern "C" {static PyObject *meth_QQmlIncubationController_incubatingObjectCount(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubationController_incubatingObjectCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubationController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubationController, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->incubatingObjectCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubationController, sipName_incubatingObjectCount, doc_QQmlIncubationController_incubatingObjectCount);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubationController_incubateFor, "incubateFor(self, int)");

extern "C" {static PyObject *meth_QQmlIncubationController_incubateFor(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubationController_incubateFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QQmlIncubationController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QQmlIncubationController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->incubateFor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubationController, sipName_incubateFor, doc_QQmlIncubationController_incubateFor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubationController_incubatingObjectCountChanged, "incubatingObjectCountChanged(self, int)");

extern "C" {static PyObject *meth_QQmlIncubationController_incubatingObjectCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubationController_incubatingObjectCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QQmlIncubationController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QQmlIncubationController, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQmlIncubationController::incubatingObjectCountChanged(a0) : sipCpp->incubatingObjectCountChanged(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubationController, sipName_incubatingObjectCountChanged, doc_QQmlIncubationController_incubatingObjectCountChanged);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlIncubationController(void *, int);}
static void release_QQmlIncubationController(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQmlIncubationController *>(sipCppV);
    else
        delete reinterpret_cast< ::QQmlIncubationController *>(sipCppV);
}


extern "C" {static void dealloc_QQmlIncubationController(sipSimpleWrapper *);}
static void dealloc_QQmlIncubationController(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlIncubationController *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlIncubationController(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlIncubationController(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlIncubationController(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQmlIncubationController *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQmlIncubationController();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQmlIncubationController[] = {
    {SIP_MLNAME_CAST(sipName_engine), meth_QQmlIncubationController_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubationController_engine)},
    {SIP_MLNAME_CAST(sipName_incubateFor), meth_QQmlIncubationController_incubateFor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubationController_incubateFor)},
    {SIP_MLNAME_CAST(sipName_incubatingObjectCount), meth_QQmlIncubationController_incubatingObjectCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubationController_incubatingObjectCount)},
    {SIP_MLNAME_CAST(sipName_incubatingObjectCountChanged), meth_QQmlIncubationController_incubatingObjectCountChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubationController_incubatingObjectCountChanged)}
};

PyDoc_STRVAR(doc_QQmlIncubationController, "\1QQmlIncubationController()");


static pyqt5ClassPluginDef plugin_QQmlIncubationController = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlIncubationController = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlIncubationController,
        {SIP_NULLPTR},
        &plugin_QQmlIncubationController
    },
    {
        sipNameNr_QQmlIncubationController,
        {0, 0, 1},
        4, methods_QQmlIncubationController,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlIncubationController,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlIncubationController,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlIncubationController,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlIncubationController,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 6182 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 6186 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6189 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 6192 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


class sipQQmlIncubator : public  ::QQmlIncubator
{
public:
    sipQQmlIncubator( ::QQmlIncubator::IncubationMode);
    virtual ~sipQQmlIncubator();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setInitialState( ::QObject*) SIP_OVERRIDE;
    void statusChanged( ::QQmlIncubator::Status) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlIncubator(const sipQQmlIncubator &);
    sipQQmlIncubator &operator = (const sipQQmlIncubator &);

    char sipPyMethods[2];
};

sipQQmlIncubator::sipQQmlIncubator( ::QQmlIncubator::IncubationMode a0):  ::QQmlIncubator(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlIncubator::~sipQQmlIncubator()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipQQmlIncubator::setInitialState( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_setInitialState);

    if (!sipMeth)
    {
         ::QQmlIncubator::setInitialState(a0);
        return;
    }

    extern void sipVH_QtQml_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    sipVH_QtQml_14(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlIncubator::statusChanged( ::QQmlIncubator::Status a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_statusChanged);

    if (!sipMeth)
    {
         ::QQmlIncubator::statusChanged(a0);
        return;
    }

    extern void sipVH_QtQml_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQmlIncubator::Status);

    sipVH_QtQml_13(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlIncubator_clear, "clear(self)");

extern "C" {static PyObject *meth_QQmlIncubator_clear(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_clear, doc_QQmlIncubator_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_forceCompletion, "forceCompletion(self)");

extern "C" {static PyObject *meth_QQmlIncubator_forceCompletion(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_forceCompletion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
            sipCpp->forceCompletion();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_forceCompletion, doc_QQmlIncubator_forceCompletion);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QQmlIncubator_isNull(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_isNull, doc_QQmlIncubator_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_isReady, "isReady(self) -> bool");

extern "C" {static PyObject *meth_QQmlIncubator_isReady(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_isReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReady();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_isReady, doc_QQmlIncubator_isReady);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_isError, "isError(self) -> bool");

extern "C" {static PyObject *meth_QQmlIncubator_isError(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_isError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_isError, doc_QQmlIncubator_isError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_isLoading, "isLoading(self) -> bool");

extern "C" {static PyObject *meth_QQmlIncubator_isLoading(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_isLoading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLoading();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_isLoading, doc_QQmlIncubator_isLoading);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_errors, "errors(self) -> List[QQmlError]");

extern "C" {static PyObject *meth_QQmlIncubator_errors(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_errors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
            QList< ::QQmlError>*sipRes;

            sipRes = new QList< ::QQmlError>(sipCpp->errors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QQmlError,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_errors, doc_QQmlIncubator_errors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_incubationMode, "incubationMode(self) -> QQmlIncubator.IncubationMode");

extern "C" {static PyObject *meth_QQmlIncubator_incubationMode(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_incubationMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
             ::QQmlIncubator::IncubationMode sipRes;

            sipRes = sipCpp->incubationMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQmlIncubator_IncubationMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_incubationMode, doc_QQmlIncubator_incubationMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_status, "status(self) -> QQmlIncubator.Status");

extern "C" {static PyObject *meth_QQmlIncubator_status(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
             ::QQmlIncubator::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQmlIncubator_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_status, doc_QQmlIncubator_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_object, "object(self) -> QObject");

extern "C" {static PyObject *meth_QQmlIncubator_object(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubator, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->object();

            return sipConvertFromNewType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_object, doc_QQmlIncubator_object);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_statusChanged, "statusChanged(self, QQmlIncubator.Status)");

extern "C" {static PyObject *meth_QQmlIncubator_statusChanged(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_statusChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQmlIncubator::Status a0;
         ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QQmlIncubator, &sipCpp, sipType_QQmlIncubator_Status, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQmlIncubator::statusChanged(a0) : sipCpp->statusChanged(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_statusChanged, doc_QQmlIncubator_statusChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlIncubator_setInitialState, "setInitialState(self, QObject)");

extern "C" {static PyObject *meth_QQmlIncubator_setInitialState(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubator_setInitialState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QQmlIncubator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQmlIncubator, &sipCpp, sipType_QObject, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QQmlIncubator::setInitialState(a0) : sipCpp->setInitialState(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubator, sipName_setInitialState, doc_QQmlIncubator_setInitialState);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlIncubator(void *, int);}
static void release_QQmlIncubator(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQmlIncubator *>(sipCppV);
    else
        delete reinterpret_cast< ::QQmlIncubator *>(sipCppV);
}


extern "C" {static void dealloc_QQmlIncubator(sipSimpleWrapper *);}
static void dealloc_QQmlIncubator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlIncubator *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlIncubator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlIncubator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlIncubator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQmlIncubator *sipCpp = SIP_NULLPTR;

    {
         ::QQmlIncubator::IncubationMode a0 = QQmlIncubator::Asynchronous;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QQmlIncubator_IncubationMode, &a0))
        {
            sipCpp = new sipQQmlIncubator(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQmlIncubator[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QQmlIncubator_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_clear)},
    {SIP_MLNAME_CAST(sipName_errors), meth_QQmlIncubator_errors, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_errors)},
    {SIP_MLNAME_CAST(sipName_forceCompletion), meth_QQmlIncubator_forceCompletion, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_forceCompletion)},
    {SIP_MLNAME_CAST(sipName_incubationMode), meth_QQmlIncubator_incubationMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_incubationMode)},
    {SIP_MLNAME_CAST(sipName_isError), meth_QQmlIncubator_isError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_isError)},
    {SIP_MLNAME_CAST(sipName_isLoading), meth_QQmlIncubator_isLoading, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_isLoading)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QQmlIncubator_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_isNull)},
    {SIP_MLNAME_CAST(sipName_isReady), meth_QQmlIncubator_isReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_isReady)},
    {SIP_MLNAME_CAST(sipName_object), meth_QQmlIncubator_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_object)},
    {SIP_MLNAME_CAST(sipName_setInitialState), meth_QQmlIncubator_setInitialState, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_setInitialState)},
    {SIP_MLNAME_CAST(sipName_status), meth_QQmlIncubator_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_status)},
    {SIP_MLNAME_CAST(sipName_statusChanged), meth_QQmlIncubator_statusChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubator_statusChanged)}
};

static sipEnumMemberDef enummembers_QQmlIncubator[] = {
    {sipName_Asynchronous, static_cast<int>( ::QQmlIncubator::Asynchronous), 30},
    {sipName_AsynchronousIfNested, static_cast<int>( ::QQmlIncubator::AsynchronousIfNested), 30},
    {sipName_Error, static_cast<int>( ::QQmlIncubator::Error), 31},
    {sipName_Loading, static_cast<int>( ::QQmlIncubator::Loading), 31},
    {sipName_Null, static_cast<int>( ::QQmlIncubator::Null), 31},
    {sipName_Ready, static_cast<int>( ::QQmlIncubator::Ready), 31},
    {sipName_Synchronous, static_cast<int>( ::QQmlIncubator::Synchronous), 30},
};

PyDoc_STRVAR(doc_QQmlIncubator, "\1QQmlIncubator(mode: QQmlIncubator.IncubationMode = QQmlIncubator.Asynchronous)");


static pyqt5ClassPluginDef plugin_QQmlIncubator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlIncubator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlIncubator,
        {SIP_NULLPTR},
        &plugin_QQmlIncubator
    },
    {
        sipNameNr_QQmlIncubator,
        {0, 0, 1},
        12, methods_QQmlIncubator,
        7, enummembers_QQmlIncubator,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlIncubator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlIncubator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlIncubator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlIncubator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlfileselector.sip"
#include <qqmlfileselector.h>
#line 6740 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 6744 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 6747 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 28 "sip/QtCore/qfileselector.sip"
#include <qfileselector.h>
#line 6750 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 6753 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 6756 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 6759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 6762 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 6765 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 6768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 6771 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6774 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 6777 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6780 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 6783 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 6786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 6789 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 6792 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 6795 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 6798 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart0.cpp"


class sipQQmlFileSelector : public  ::QQmlFileSelector
{
public:
    sipQQmlFileSelector( ::QQmlEngine*, ::QObject*);
    virtual ~sipQQmlFileSelector();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlFileSelector(const sipQQmlFileSelector &);
    sipQQmlFileSelector &operator = (const sipQQmlFileSelector &);

    char sipPyMethods[7];
};

sipQQmlFileSelector::sipQQmlFileSelector( ::QQmlEngine*a0, ::QObject*a1):  ::QQmlFileSelector(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlFileSelector::~sipQQmlFileSelector()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQmlFileSelector::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlFileSelector);

    return  ::QQmlFileSelector::metaObject();
}

int sipQQmlFileSelector::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQmlFileSelector::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlFileSelector,_c,_id,_a);

    return _id;
}

void *sipQQmlFileSelector::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlFileSelector, _clname, &sipCpp) ? sipCpp :  ::QQmlFileSelector::qt_metacast(_clname));
}

bool sipQQmlFileSelector::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQmlFileSelector::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlFileSelector::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQmlFileSelector::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQmlFileSelector::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQmlFileSelector::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlFileSelector::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQmlFileSelector::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlFileSelector::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQmlFileSelector::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlFileSelector::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQmlFileSelector::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlFileSelector::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQmlFileSelector::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlFileSelector_setSelector, "setSelector(self, QFileSelector)");

extern "C" {static PyObject *meth_QQmlFileSelector_setSelector(PyObject *, PyObject *);}
static PyObject *meth_QQmlFileSelector_setSelector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QFileSelector* a0;
         ::QQmlFileSelector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQmlFileSelector, &sipCpp, sipType_QFileSelector, &a0))
        {
            sipCpp->setSelector(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlFileSelector, sipName_setSelector, doc_QQmlFileSelector_setSelector);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlFileSelector_setExtraSelectors, "setExtraSelectors(self, Iterable[str])");

extern "C" {static PyObject *meth_QQmlFileSelector_setExtraSelectors(PyObject *, PyObject *);}
static PyObject *meth_QQmlFileSelector_setExtraSelectors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QQmlFileSelector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlFileSelector, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setExtraSelectors(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlFileSelector, sipName_setExtraSelectors, doc_QQmlFileSelector_setExtraSelectors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlFileSelector_get, "get(QQmlEngine) -> QQmlFileSelector");

extern "C" {static PyObject *meth_QQmlFileSelector_get(PyObject *, PyObject *);}
static PyObject *meth_QQmlFileSelector_get(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlEngine* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QQmlEngine, &a0))
        {
             ::QQmlFileSelector*sipRes;

            sipRes =  ::QQmlFileSelector::get(a0);

            return sipConvertFromType(sipRes,sipType_QQmlFileSelector,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlFileSelector, sipName_get, doc_QQmlFileSelector_get);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlFileSelector_selector, "selector(self) -> QFileSelector");

extern "C" {static PyObject *meth_QQmlFileSelector_selector(PyObject *, PyObject *);}
static PyObject *meth_QQmlFileSelector_selector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlFileSelector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlFileSelector, &sipCpp))
        {
             ::QFileSelector*sipRes;

            sipRes = sipCpp->selector();

            return sipConvertFromType(sipRes,sipType_QFileSelector,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlFileSelector, sipName_selector, doc_QQmlFileSelector_selector);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQmlFileSelector(void *, const sipTypeDef *);}
static void *cast_QQmlFileSelector(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQmlFileSelector *sipCpp = reinterpret_cast< ::QQmlFileSelector *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlFileSelector(void *, int);}
static void release_QQmlFileSelector(void *sipCppV, int)
{
     ::QQmlFileSelector *sipCpp = reinterpret_cast< ::QQmlFileSelector *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlFileSelector(sipSimpleWrapper *);}
static void dealloc_QQmlFileSelector(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlFileSelector *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlFileSelector(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlFileSelector(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlFileSelector(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlFileSelector *sipCpp = SIP_NULLPTR;

    {
         ::QQmlEngine* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QQmlEngine, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQQmlFileSelector(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlFileSelector[] = {{9, 0, 1}};


static PyMethodDef methods_QQmlFileSelector[] = {
    {SIP_MLNAME_CAST(sipName_get), meth_QQmlFileSelector_get, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlFileSelector_get)},
    {SIP_MLNAME_CAST(sipName_selector), meth_QQmlFileSelector_selector, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlFileSelector_selector)},
    {SIP_MLNAME_CAST(sipName_setExtraSelectors), meth_QQmlFileSelector_setExtraSelectors, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlFileSelector_setExtraSelectors)},
    {SIP_MLNAME_CAST(sipName_setSelector), meth_QQmlFileSelector_setSelector, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlFileSelector_setSelector)}
};

PyDoc_STRVAR(doc_QQmlFileSelector, "\1QQmlFileSelector(QQmlEngine, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QQmlFileSelector = {
    & ::QQmlFileSelector::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlFileSelector = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlFileSelector,
        {SIP_NULLPTR},
        &plugin_QQmlFileSelector
    },
    {
        sipNameNr_QQmlFileSelector,
        {0, 0, 1},
        4, methods_QQmlFileSelector,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlFileSelector,
    -1,
    -1,
    supers_QQmlFileSelector,
    SIP_NULLPTR,
    init_type_QQmlFileSelector,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlFileSelector,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlFileSelector,
    cast_QQmlFileSelector,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
