/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtAndroidExtras.h"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtAndroidExtras/qandroidjniobject.sip"
#include <qandroidjniobject.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtAndroidExtras/sipQtAndroidExtraspart0.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtAndroidExtras[] = {
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'A', 'n', 'd', 'r', 'o', 'i', 'd', 'E', 'x', 't', 'r', 'a', 's', 0,
    'Q', 'A', 'n', 'd', 'r', 'o', 'i', 'd', 'J', 'n', 'i', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'a', 'n', 'd', 'r', 'o', 'i', 'd', 'S', 'd', 'k', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'i', 's', 'C', 'l', 'a', 's', 's', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'c', 'a', 'l', 'l', 'S', 't', 'a', 't', 'i', 'c', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'h', 'i', 'd', 'e', 'S', 'p', 'l', 'a', 's', 'h', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'a', 'n', 'd', 'r', 'o', 'i', 'd', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 0,
    'a', 'n', 'd', 'r', 'o', 'i', 'd', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'a', 'n', 'd', 'r', 'o', 'i', 'd', 'S', 'e', 'r', 'v', 'i', 'c', 'e', 0,
    'c', 'a', 'l', 'l', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'Q', 't', 'A', 'n', 'd', 'r', 'o', 'i', 'd', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_QtAndroidExtras[] = {
    &sipTypeDef_QtAndroidExtras_QAndroidJniObject.ctd_base,
    &sipTypeDef_QtAndroidExtras_QtAndroid.ctd_base,
};


/* This defines the types that this module needs to import from QtCore. */
sipImportedTypeDef sipImportedTypes_QtAndroidExtras_QtCore[] = {
    {"QString"},
    {SIP_NULLPTR}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", sipImportedTypes_QtAndroidExtras_QtCore, SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtAndroidExtras = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtAndroidExtras,
    0,
    sipStrings_QtAndroidExtras,
    importsTable,
    SIP_NULLPTR,
    2,
    sipExportedTypes_QtAndroidExtras,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtAndroidExtras;

sip_qt_metaobject_func sip_QtAndroidExtras_qt_metaobject;
sip_qt_metacall_func sip_QtAndroidExtras_qt_metacall;
sip_qt_metacast_func sip_QtAndroidExtras_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtAndroidExtras
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtAndroidExtras
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_NULLPTR, SIP_NULLPTR, 0, SIP_NULLPTR}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtAndroidExtras",
        SIP_NULLPTR,
        -1,
        sip_methods,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_NULLPTR
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtAndroidExtras, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtAndroidExtras), sip_methods);
#endif

    if (sipModule == SIP_NULLPTR)
        SIP_MODULE_RETURN(SIP_NULLPTR);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("PyQt5.sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("PyQt5.sip"));
#endif

    if (sip_sipmod == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == SIP_NULLPTR || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == SIP_NULLPTR || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtAndroidExtras = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "PyQt5.sip._C_API"));
#else
    sipAPI_QtAndroidExtras = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtAndroidExtras == SIP_NULLPTR)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtAndroidExtras,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    sip_QtAndroidExtras_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtAndroidExtras_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtAndroidExtras_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtAndroidExtras_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtAndroidExtras,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(SIP_NULLPTR);
    }

    SIP_MODULE_RETURN(sipModule);
}

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtAndroidExtras/qandroidjniobject.sip"
#include <qandroidjniobject.h>
#line 233 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtAndroidExtras/sipQtAndroidExtraspart0.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtAndroidExtras/sipQtAndroidExtraspart0.cpp"


PyDoc_STRVAR(doc_QAndroidJniObject_callMethod, "callMethod(self, str) -> int");

extern "C" {static PyObject *meth_QAndroidJniObject_callMethod(PyObject *, PyObject *);}
static PyObject *meth_QAndroidJniObject_callMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const  ::QAndroidJniObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QAndroidJniObject, &sipCpp, &a0Keep, &a0))
        {
            int sipRes = 0;

#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtAndroidExtras/qandroidjniobject.sip"
        sipRes = sipCpp->callMethod<int>(a0);
#line 259 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtAndroidExtras/sipQtAndroidExtraspart0.cpp"
            Py_DECREF(a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAndroidJniObject, sipName_callMethod, doc_QAndroidJniObject_callMethod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAndroidJniObject_callStaticMethod, "callStaticMethod(str, str) -> int");

extern "C" {static PyObject *meth_QAndroidJniObject_callStaticMethod(PyObject *, PyObject *);}
static PyObject *meth_QAndroidJniObject_callStaticMethod(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;
        const char* a1;
        PyObject *a1Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AAAA", &a0Keep, &a0, &a1Keep, &a1))
        {
            int sipRes = 0;

#line 41 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtAndroidExtras/qandroidjniobject.sip"
        sipRes = QAndroidJniObject::callStaticMethod<int>(a0, a1);
#line 293 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtAndroidExtras/sipQtAndroidExtraspart0.cpp"
            Py_DECREF(a0Keep);
            Py_DECREF(a1Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAndroidJniObject, sipName_callStaticMethod, doc_QAndroidJniObject_callStaticMethod);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAndroidJniObject_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QAndroidJniObject_isValid(PyObject *, PyObject *);}
static PyObject *meth_QAndroidJniObject_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAndroidJniObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAndroidJniObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAndroidJniObject, sipName_isValid, doc_QAndroidJniObject_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAndroidJniObject_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QAndroidJniObject_toString(PyObject *, PyObject *);}
static PyObject *meth_QAndroidJniObject_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAndroidJniObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAndroidJniObject, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAndroidJniObject, sipName_toString, doc_QAndroidJniObject_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAndroidJniObject_isClassAvailable, "isClassAvailable(str) -> bool");

extern "C" {static PyObject *meth_QAndroidJniObject_isClassAvailable(PyObject *, PyObject *);}
static PyObject *meth_QAndroidJniObject_isClassAvailable(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipParseErr, sipArgs, "AA", &a0Keep, &a0))
        {
            bool sipRes;

            sipRes =  ::QAndroidJniObject::isClassAvailable(a0);
            Py_DECREF(a0Keep);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAndroidJniObject, sipName_isClassAvailable, doc_QAndroidJniObject_isClassAvailable);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QAndroidJniObject___ne__(PyObject *,PyObject *);}
static PyObject *slot_QAndroidJniObject___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAndroidJniObject *sipCpp = reinterpret_cast< ::QAndroidJniObject *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAndroidJniObject));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAndroidJniObject* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QAndroidJniObject, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtAndroidExtras, ne_slot, sipType_QAndroidJniObject, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QAndroidJniObject___eq__(PyObject *,PyObject *);}
static PyObject *slot_QAndroidJniObject___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAndroidJniObject *sipCpp = reinterpret_cast< ::QAndroidJniObject *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAndroidJniObject));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAndroidJniObject* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QAndroidJniObject, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtAndroidExtras, eq_slot, sipType_QAndroidJniObject, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QAndroidJniObject(void *, int);}
static void release_QAndroidJniObject(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAndroidJniObject *>(sipCppV);
}


extern "C" {static void assign_QAndroidJniObject(void *, SIP_SSIZE_T, void *);}
static void assign_QAndroidJniObject(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QAndroidJniObject *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QAndroidJniObject *>(sipSrc);
}


extern "C" {static void *array_QAndroidJniObject(SIP_SSIZE_T);}
static void *array_QAndroidJniObject(SIP_SSIZE_T sipNrElem)
{
    return new  ::QAndroidJniObject[sipNrElem];
}


extern "C" {static void *copy_QAndroidJniObject(const void *, SIP_SSIZE_T);}
static void *copy_QAndroidJniObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QAndroidJniObject(reinterpret_cast<const  ::QAndroidJniObject *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QAndroidJniObject(sipSimpleWrapper *);}
static void dealloc_QAndroidJniObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAndroidJniObject(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QAndroidJniObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAndroidJniObject(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QAndroidJniObject *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QAndroidJniObject();

            return sipCpp;
        }
    }

    {
        const char* a0;
        PyObject *a0Keep;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "AA", &a0Keep, &a0))
        {
            sipCpp = new  ::QAndroidJniObject(a0);
            Py_DECREF(a0Keep);

            return sipCpp;
        }
    }

    {
        const  ::QAndroidJniObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QAndroidJniObject, &a0))
        {
            sipCpp = new  ::QAndroidJniObject(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QAndroidJniObject[] = {
    {(void *)slot_QAndroidJniObject___ne__, ne_slot},
    {(void *)slot_QAndroidJniObject___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QAndroidJniObject[] = {
    {SIP_MLNAME_CAST(sipName_callMethod), meth_QAndroidJniObject_callMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QAndroidJniObject_callMethod)},
    {SIP_MLNAME_CAST(sipName_callStaticMethod), meth_QAndroidJniObject_callStaticMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QAndroidJniObject_callStaticMethod)},
    {SIP_MLNAME_CAST(sipName_isClassAvailable), meth_QAndroidJniObject_isClassAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QAndroidJniObject_isClassAvailable)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QAndroidJniObject_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QAndroidJniObject_isValid)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QAndroidJniObject_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QAndroidJniObject_toString)}
};

PyDoc_STRVAR(doc_QAndroidJniObject, "\1QAndroidJniObject()\n"
"QAndroidJniObject(str)\n"
"QAndroidJniObject(QAndroidJniObject)");


static pyqt5ClassPluginDef plugin_QAndroidJniObject = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtAndroidExtras_QAndroidJniObject = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAndroidJniObject,
        {SIP_NULLPTR},
        &plugin_QAndroidJniObject
    },
    {
        sipNameNr_QAndroidJniObject,
        {0, 0, 1},
        5, methods_QAndroidJniObject,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAndroidJniObject,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QAndroidJniObject,
    init_type_QAndroidJniObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAndroidJniObject,
    assign_QAndroidJniObject,
    array_QAndroidJniObject,
    copy_QAndroidJniObject,
    release_QAndroidJniObject,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
