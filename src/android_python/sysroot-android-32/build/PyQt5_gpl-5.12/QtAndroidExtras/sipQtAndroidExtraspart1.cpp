/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtAndroidExtras.h"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtAndroidExtras/qtandroid.sip"
#include <QtAndroid>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtAndroidExtras/sipQtAndroidExtraspart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtAndroidExtras/qandroidjniobject.sip"
#include <qandroidjniobject.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtAndroidExtras/sipQtAndroidExtraspart1.cpp"


PyDoc_STRVAR(doc_QtAndroid_androidContext, "androidContext() -> QAndroidJniObject");

extern "C" {static PyObject *meth_QtAndroid_androidContext(PyObject *, PyObject *);}
static PyObject *meth_QtAndroid_androidContext(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QAndroidJniObject*sipRes;

            sipRes = new  ::QAndroidJniObject( ::QtAndroid::androidContext());

            return sipConvertFromNewType(sipRes,sipType_QAndroidJniObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_androidContext, doc_QtAndroid_androidContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QtAndroid_hideSplashScreen, "hideSplashScreen()");

extern "C" {static PyObject *meth_QtAndroid_hideSplashScreen(PyObject *, PyObject *);}
static PyObject *meth_QtAndroid_hideSplashScreen(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QtAndroid::hideSplashScreen();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_hideSplashScreen, doc_QtAndroid_hideSplashScreen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QtAndroid_androidService, "androidService() -> QAndroidJniObject");

extern "C" {static PyObject *meth_QtAndroid_androidService(PyObject *, PyObject *);}
static PyObject *meth_QtAndroid_androidService(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QAndroidJniObject*sipRes;

            sipRes = new  ::QAndroidJniObject( ::QtAndroid::androidService());

            return sipConvertFromNewType(sipRes,sipType_QAndroidJniObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_androidService, doc_QtAndroid_androidService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QtAndroid_androidActivity, "androidActivity() -> QAndroidJniObject");

extern "C" {static PyObject *meth_QtAndroid_androidActivity(PyObject *, PyObject *);}
static PyObject *meth_QtAndroid_androidActivity(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QAndroidJniObject*sipRes;

            sipRes = new  ::QAndroidJniObject( ::QtAndroid::androidActivity());

            return sipConvertFromNewType(sipRes,sipType_QAndroidJniObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_androidActivity, doc_QtAndroid_androidActivity);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QtAndroid_androidSdkVersion, "androidSdkVersion() -> int");

extern "C" {static PyObject *meth_QtAndroid_androidSdkVersion(PyObject *, PyObject *);}
static PyObject *meth_QtAndroid_androidSdkVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipRes =  ::QtAndroid::androidSdkVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_androidSdkVersion, doc_QtAndroid_androidSdkVersion);

    return SIP_NULLPTR;
}


static PyMethodDef methods_QtAndroid[] = {
    {SIP_MLNAME_CAST(sipName_androidActivity), meth_QtAndroid_androidActivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QtAndroid_androidActivity)},
    {SIP_MLNAME_CAST(sipName_androidContext), meth_QtAndroid_androidContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QtAndroid_androidContext)},
    {SIP_MLNAME_CAST(sipName_androidSdkVersion), meth_QtAndroid_androidSdkVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QtAndroid_androidSdkVersion)},
    {SIP_MLNAME_CAST(sipName_androidService), meth_QtAndroid_androidService, METH_VARARGS, SIP_MLDOC_CAST(doc_QtAndroid_androidService)},
    {SIP_MLNAME_CAST(sipName_hideSplashScreen), meth_QtAndroid_hideSplashScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QtAndroid_hideSplashScreen)}
};


static pyqt5ClassPluginDef plugin_QtAndroid = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtAndroidExtras_QtAndroid = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_NAMESPACE,
        sipNameNr_QtAndroid,
        {SIP_NULLPTR},
        &plugin_QtAndroid
    },
    {
        sipNameNr_QtAndroid,
        {0, 0, 1},
        5, methods_QtAndroid,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
