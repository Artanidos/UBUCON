/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergycharacteristic.sip"
#include <qlowenergycharacteristic.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergydescriptor.sip"
#include <qlowenergydescriptor.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 39 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergycharacteristic.sip"
#include <qlowenergycharacteristic.h>
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QLowEnergyCharacteristic_name, "name(self) -> str");

extern "C" {static PyObject *meth_QLowEnergyCharacteristic_name(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristic_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristic, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristic, sipName_name, doc_QLowEnergyCharacteristic_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristic_uuid, "uuid(self) -> QBluetoothUuid");

extern "C" {static PyObject *meth_QLowEnergyCharacteristic_uuid(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristic_uuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristic, &sipCpp))
        {
             ::QBluetoothUuid*sipRes;

            sipRes = new  ::QBluetoothUuid(sipCpp->uuid());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristic, sipName_uuid, doc_QLowEnergyCharacteristic_uuid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristic_value, "value(self) -> QByteArray");

extern "C" {static PyObject *meth_QLowEnergyCharacteristic_value(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristic_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristic, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristic, sipName_value, doc_QLowEnergyCharacteristic_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristic_properties, "properties(self) -> QLowEnergyCharacteristic.PropertyTypes");

extern "C" {static PyObject *meth_QLowEnergyCharacteristic_properties(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristic_properties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristic, &sipCpp))
        {
             ::QLowEnergyCharacteristic::PropertyTypes*sipRes;

            sipRes = new  ::QLowEnergyCharacteristic::PropertyTypes(sipCpp->properties());

            return sipConvertFromNewType(sipRes,sipType_QLowEnergyCharacteristic_PropertyTypes,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristic, sipName_properties, doc_QLowEnergyCharacteristic_properties);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristic_handle, "handle(self) -> int");

extern "C" {static PyObject *meth_QLowEnergyCharacteristic_handle(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristic_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristic, &sipCpp))
        {
             ::QLowEnergyHandle sipRes;

            sipRes = sipCpp->handle();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristic, sipName_handle, doc_QLowEnergyCharacteristic_handle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristic_descriptor, "descriptor(self, QBluetoothUuid) -> QLowEnergyDescriptor");

extern "C" {static PyObject *meth_QLowEnergyCharacteristic_descriptor(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristic_descriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothUuid* a0;
        const  ::QLowEnergyCharacteristic *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyCharacteristic, &sipCpp, sipType_QBluetoothUuid, &a0))
        {
             ::QLowEnergyDescriptor*sipRes;

            sipRes = new  ::QLowEnergyDescriptor(sipCpp->descriptor(*a0));

            return sipConvertFromNewType(sipRes,sipType_QLowEnergyDescriptor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristic, sipName_descriptor, doc_QLowEnergyCharacteristic_descriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristic_descriptors, "descriptors(self) -> List[QLowEnergyDescriptor]");

extern "C" {static PyObject *meth_QLowEnergyCharacteristic_descriptors(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristic_descriptors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristic, &sipCpp))
        {
            QList< ::QLowEnergyDescriptor>*sipRes;

            sipRes = new QList< ::QLowEnergyDescriptor>(sipCpp->descriptors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLowEnergyDescriptor,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristic, sipName_descriptors, doc_QLowEnergyCharacteristic_descriptors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyCharacteristic_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QLowEnergyCharacteristic_isValid(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyCharacteristic_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyCharacteristic, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyCharacteristic, sipName_isValid, doc_QLowEnergyCharacteristic_isValid);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QLowEnergyCharacteristic___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyCharacteristic___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLowEnergyCharacteristic *sipCpp = reinterpret_cast< ::QLowEnergyCharacteristic *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyCharacteristic));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyCharacteristic, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QLowEnergyCharacteristic::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QLowEnergyCharacteristic, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLowEnergyCharacteristic___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyCharacteristic___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLowEnergyCharacteristic *sipCpp = reinterpret_cast< ::QLowEnergyCharacteristic *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyCharacteristic));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyCharacteristic* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyCharacteristic, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QLowEnergyCharacteristic::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QLowEnergyCharacteristic, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLowEnergyCharacteristic(void *, int);}
static void release_QLowEnergyCharacteristic(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLowEnergyCharacteristic *>(sipCppV);
}


extern "C" {static void assign_QLowEnergyCharacteristic(void *, SIP_SSIZE_T, void *);}
static void assign_QLowEnergyCharacteristic(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLowEnergyCharacteristic *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLowEnergyCharacteristic *>(sipSrc);
}


extern "C" {static void *array_QLowEnergyCharacteristic(SIP_SSIZE_T);}
static void *array_QLowEnergyCharacteristic(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLowEnergyCharacteristic[sipNrElem];
}


extern "C" {static void *copy_QLowEnergyCharacteristic(const void *, SIP_SSIZE_T);}
static void *copy_QLowEnergyCharacteristic(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLowEnergyCharacteristic(reinterpret_cast<const  ::QLowEnergyCharacteristic *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLowEnergyCharacteristic(sipSimpleWrapper *);}
static void dealloc_QLowEnergyCharacteristic(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLowEnergyCharacteristic(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLowEnergyCharacteristic(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLowEnergyCharacteristic(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLowEnergyCharacteristic *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLowEnergyCharacteristic();

            return sipCpp;
        }
    }

    {
        const  ::QLowEnergyCharacteristic* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLowEnergyCharacteristic, &a0))
        {
            sipCpp = new  ::QLowEnergyCharacteristic(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLowEnergyCharacteristic[] = {
    {(void *)slot_QLowEnergyCharacteristic___ne__, ne_slot},
    {(void *)slot_QLowEnergyCharacteristic___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLowEnergyCharacteristic[] = {
    {SIP_MLNAME_CAST(sipName_descriptor), meth_QLowEnergyCharacteristic_descriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristic_descriptor)},
    {SIP_MLNAME_CAST(sipName_descriptors), meth_QLowEnergyCharacteristic_descriptors, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristic_descriptors)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QLowEnergyCharacteristic_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristic_handle)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QLowEnergyCharacteristic_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristic_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_QLowEnergyCharacteristic_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristic_name)},
    {SIP_MLNAME_CAST(sipName_properties), meth_QLowEnergyCharacteristic_properties, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristic_properties)},
    {SIP_MLNAME_CAST(sipName_uuid), meth_QLowEnergyCharacteristic_uuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristic_uuid)},
    {SIP_MLNAME_CAST(sipName_value), meth_QLowEnergyCharacteristic_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyCharacteristic_value)}
};

static sipEnumMemberDef enummembers_QLowEnergyCharacteristic[] = {
    {sipName_Broadcasting, static_cast<int>( ::QLowEnergyCharacteristic::Broadcasting), 77},
    {sipName_ExtendedProperty, static_cast<int>( ::QLowEnergyCharacteristic::ExtendedProperty), 77},
    {sipName_Indicate, static_cast<int>( ::QLowEnergyCharacteristic::Indicate), 77},
    {sipName_Notify, static_cast<int>( ::QLowEnergyCharacteristic::Notify), 77},
    {sipName_Read, static_cast<int>( ::QLowEnergyCharacteristic::Read), 77},
    {sipName_Unknown, static_cast<int>( ::QLowEnergyCharacteristic::Unknown), 77},
    {sipName_Write, static_cast<int>( ::QLowEnergyCharacteristic::Write), 77},
    {sipName_WriteNoResponse, static_cast<int>( ::QLowEnergyCharacteristic::WriteNoResponse), 77},
    {sipName_WriteSigned, static_cast<int>( ::QLowEnergyCharacteristic::WriteSigned), 77},
};

PyDoc_STRVAR(doc_QLowEnergyCharacteristic, "\1QLowEnergyCharacteristic()\n"
"QLowEnergyCharacteristic(QLowEnergyCharacteristic)");


static pyqt5ClassPluginDef plugin_QLowEnergyCharacteristic = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QLowEnergyCharacteristic = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLowEnergyCharacteristic,
        {SIP_NULLPTR},
        &plugin_QLowEnergyCharacteristic
    },
    {
        sipNameNr_QLowEnergyCharacteristic,
        {0, 0, 1},
        8, methods_QLowEnergyCharacteristic,
        9, enummembers_QLowEnergyCharacteristic,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLowEnergyCharacteristic,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QLowEnergyCharacteristic,
    init_type_QLowEnergyCharacteristic,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLowEnergyCharacteristic,
    assign_QLowEnergyCharacteristic,
    array_QLowEnergyCharacteristic,
    copy_QLowEnergyCharacteristic,
    release_QLowEnergyCharacteristic,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergyadvertisingparameters.sip"
#include <qlowenergyadvertisingparameters.h>
#line 49 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergyadvertisingparameters.sip"
#include <qlowenergyadvertisingparameters.h>
#line 510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergycontroller.sip"
#include <qlowenergycontroller.h>
#line 517 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


extern "C" {static PyObject *slot_QLowEnergyAdvertisingParameters_AddressInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyAdvertisingParameters_AddressInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLowEnergyAdvertisingParameters::AddressInfo *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyAdvertisingParameters_AddressInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters::AddressInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyAdvertisingParameters_AddressInfo, &a0))
        {
            bool sipRes;

            sipRes = !operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QLowEnergyAdvertisingParameters_AddressInfo, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLowEnergyAdvertisingParameters_AddressInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyAdvertisingParameters_AddressInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLowEnergyAdvertisingParameters::AddressInfo *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyAdvertisingParameters_AddressInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters::AddressInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyAdvertisingParameters_AddressInfo, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QLowEnergyAdvertisingParameters_AddressInfo, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLowEnergyAdvertisingParameters_AddressInfo(void *, int);}
static void release_QLowEnergyAdvertisingParameters_AddressInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipCppV);
}


extern "C" {static void assign_QLowEnergyAdvertisingParameters_AddressInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QLowEnergyAdvertisingParameters_AddressInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipSrc);
}


extern "C" {static void *array_QLowEnergyAdvertisingParameters_AddressInfo(SIP_SSIZE_T);}
static void *array_QLowEnergyAdvertisingParameters_AddressInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLowEnergyAdvertisingParameters::AddressInfo[sipNrElem];
}


extern "C" {static void *copy_QLowEnergyAdvertisingParameters_AddressInfo(const void *, SIP_SSIZE_T);}
static void *copy_QLowEnergyAdvertisingParameters_AddressInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLowEnergyAdvertisingParameters::AddressInfo(reinterpret_cast<const  ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLowEnergyAdvertisingParameters_AddressInfo(sipSimpleWrapper *);}
static void dealloc_QLowEnergyAdvertisingParameters_AddressInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLowEnergyAdvertisingParameters_AddressInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLowEnergyAdvertisingParameters_AddressInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLowEnergyAdvertisingParameters_AddressInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLowEnergyAdvertisingParameters::AddressInfo *sipCpp = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;
         ::QLowEnergyController::RemoteAddressType a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9E", sipType_QBluetoothAddress, &a0, sipType_QLowEnergyController_RemoteAddressType, &a1))
        {
            sipCpp = new  ::QLowEnergyAdvertisingParameters::AddressInfo(*a0,a1);

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLowEnergyAdvertisingParameters::AddressInfo();

            return sipCpp;
        }
    }

    {
        const  ::QLowEnergyAdvertisingParameters::AddressInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLowEnergyAdvertisingParameters_AddressInfo, &a0))
        {
            sipCpp = new  ::QLowEnergyAdvertisingParameters::AddressInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLowEnergyAdvertisingParameters_AddressInfo[] = {
    {(void *)slot_QLowEnergyAdvertisingParameters_AddressInfo___ne__, ne_slot},
    {(void *)slot_QLowEnergyAdvertisingParameters_AddressInfo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


extern "C" {static PyObject *varget_QLowEnergyAdvertisingParameters_AddressInfo_address(void *, PyObject *, PyObject *);}
static PyObject *varget_QLowEnergyAdvertisingParameters_AddressInfo_address(void *sipSelf, PyObject *, PyObject *)
{
     ::QBluetoothAddress*sipVal;
     ::QLowEnergyAdvertisingParameters::AddressInfo *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipSelf);

    sipVal = &sipCpp->address;

    return sipConvertFromType(sipVal, sipType_QBluetoothAddress, SIP_NULLPTR);
}


extern "C" {static int varset_QLowEnergyAdvertisingParameters_AddressInfo_address(void *, PyObject *, PyObject *);}
static int varset_QLowEnergyAdvertisingParameters_AddressInfo_address(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QBluetoothAddress*sipVal;
     ::QLowEnergyAdvertisingParameters::AddressInfo *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QBluetoothAddress *>(sipForceConvertToType(sipPy, sipType_QBluetoothAddress, SIP_NULLPTR, SIP_NOT_NONE, SIP_NULLPTR, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->address = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QLowEnergyAdvertisingParameters_AddressInfo_type(void *, PyObject *, PyObject *);}
static PyObject *varget_QLowEnergyAdvertisingParameters_AddressInfo_type(void *sipSelf, PyObject *, PyObject *)
{
     ::QLowEnergyController::RemoteAddressType sipVal;
     ::QLowEnergyAdvertisingParameters::AddressInfo *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipSelf);

    sipVal = sipCpp->type;

    return sipConvertFromEnum(static_cast<int>(sipVal), sipType_QLowEnergyController_RemoteAddressType);
}


extern "C" {static int varset_QLowEnergyAdvertisingParameters_AddressInfo_type(void *, PyObject *, PyObject *);}
static int varset_QLowEnergyAdvertisingParameters_AddressInfo_type(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QLowEnergyController::RemoteAddressType sipVal;
     ::QLowEnergyAdvertisingParameters::AddressInfo *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingParameters::AddressInfo *>(sipSelf);

    sipVal = ( ::QLowEnergyController::RemoteAddressType)sipConvertToEnum(sipPy, sipType_QLowEnergyController_RemoteAddressType);

    if (PyErr_Occurred() != SIP_NULLPTR)
        return -1;

    sipCpp->type = sipVal;

    return 0;
}

sipVariableDef variables_QLowEnergyAdvertisingParameters_AddressInfo[] = {
    {InstanceVariable, sipName_address, (PyMethodDef *)varget_QLowEnergyAdvertisingParameters_AddressInfo_address, (PyMethodDef *)varset_QLowEnergyAdvertisingParameters_AddressInfo_address, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_type, (PyMethodDef *)varget_QLowEnergyAdvertisingParameters_AddressInfo_type, (PyMethodDef *)varset_QLowEnergyAdvertisingParameters_AddressInfo_type, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_AddressInfo, "\1QLowEnergyAdvertisingParameters.AddressInfo(QBluetoothAddress, QLowEnergyController.RemoteAddressType)\n"
"QLowEnergyAdvertisingParameters.AddressInfo()\n"
"QLowEnergyAdvertisingParameters.AddressInfo(QLowEnergyAdvertisingParameters.AddressInfo)");


static pyqt5ClassPluginDef plugin_QLowEnergyAdvertisingParameters_AddressInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QLowEnergyAdvertisingParameters_AddressInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLowEnergyAdvertisingParameters__AddressInfo,
        {SIP_NULLPTR},
        &plugin_QLowEnergyAdvertisingParameters_AddressInfo
    },
    {
        sipNameNr_AddressInfo,
        {72, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        2, variables_QLowEnergyAdvertisingParameters_AddressInfo,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLowEnergyAdvertisingParameters_AddressInfo,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QLowEnergyAdvertisingParameters_AddressInfo,
    init_type_QLowEnergyAdvertisingParameters_AddressInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLowEnergyAdvertisingParameters_AddressInfo,
    assign_QLowEnergyAdvertisingParameters_AddressInfo,
    array_QLowEnergyAdvertisingParameters_AddressInfo,
    copy_QLowEnergyAdvertisingParameters_AddressInfo,
    release_QLowEnergyAdvertisingParameters_AddressInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergyadvertisingparameters.sip"
#include <qlowenergyadvertisingparameters.h>
#line 803 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 807 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergyadvertisingparameters.sip"
#include <qlowenergyadvertisingparameters.h>
#line 49 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergyadvertisingparameters.sip"
#include <qlowenergyadvertisingparameters.h>
#line 812 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_setMode, "setMode(self, QLowEnergyAdvertisingParameters.Mode)");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_setMode(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_setMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLowEnergyAdvertisingParameters::Mode a0;
         ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp, sipType_QLowEnergyAdvertisingParameters_Mode, &a0))
        {
            sipCpp->setMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_setMode, doc_QLowEnergyAdvertisingParameters_setMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_mode, "mode(self) -> QLowEnergyAdvertisingParameters.Mode");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_mode(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_mode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp))
        {
             ::QLowEnergyAdvertisingParameters::Mode sipRes;

            sipRes = sipCpp->mode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLowEnergyAdvertisingParameters_Mode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_mode, doc_QLowEnergyAdvertisingParameters_mode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_setWhiteList, "setWhiteList(self, Iterable[QLowEnergyAdvertisingParameters.AddressInfo], QLowEnergyAdvertisingParameters.FilterPolicy)");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_setWhiteList(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_setWhiteList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QLowEnergyAdvertisingParameters::AddressInfo>* a0;
        int a0State = 0;
         ::QLowEnergyAdvertisingParameters::FilterPolicy a1;
         ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp, sipType_QList_0100QLowEnergyAdvertisingParameters_AddressInfo,&a0, &a0State, sipType_QLowEnergyAdvertisingParameters_FilterPolicy, &a1))
        {
            sipCpp->setWhiteList(*a0,a1);
            sipReleaseType(const_cast<QList< ::QLowEnergyAdvertisingParameters::AddressInfo> *>(a0),sipType_QList_0100QLowEnergyAdvertisingParameters_AddressInfo,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_setWhiteList, doc_QLowEnergyAdvertisingParameters_setWhiteList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_whiteList, "whiteList(self) -> List[QLowEnergyAdvertisingParameters.AddressInfo]");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_whiteList(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_whiteList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp))
        {
            QList< ::QLowEnergyAdvertisingParameters::AddressInfo>*sipRes;

            sipRes = new QList< ::QLowEnergyAdvertisingParameters::AddressInfo>(sipCpp->whiteList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLowEnergyAdvertisingParameters_AddressInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_whiteList, doc_QLowEnergyAdvertisingParameters_whiteList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_filterPolicy, "filterPolicy(self) -> QLowEnergyAdvertisingParameters.FilterPolicy");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_filterPolicy(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_filterPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp))
        {
             ::QLowEnergyAdvertisingParameters::FilterPolicy sipRes;

            sipRes = sipCpp->filterPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLowEnergyAdvertisingParameters_FilterPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_filterPolicy, doc_QLowEnergyAdvertisingParameters_filterPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_setInterval, "setInterval(self, int, int)");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_setInterval(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_setInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::quint16 a1;
         ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Btt", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp, &a0, &a1))
        {
            sipCpp->setInterval(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_setInterval, doc_QLowEnergyAdvertisingParameters_setInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_minimumInterval, "minimumInterval(self) -> int");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_minimumInterval(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_minimumInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_minimumInterval, doc_QLowEnergyAdvertisingParameters_minimumInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_maximumInterval, "maximumInterval(self) -> int");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_maximumInterval(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_maximumInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_maximumInterval, doc_QLowEnergyAdvertisingParameters_maximumInterval);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters_swap, "swap(self, QLowEnergyAdvertisingParameters)");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingParameters_swap(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingParameters_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLowEnergyAdvertisingParameters* a0;
         ::QLowEnergyAdvertisingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyAdvertisingParameters, &sipCpp, sipType_QLowEnergyAdvertisingParameters, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingParameters, sipName_swap, doc_QLowEnergyAdvertisingParameters_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QLowEnergyAdvertisingParameters___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyAdvertisingParameters___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLowEnergyAdvertisingParameters *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingParameters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyAdvertisingParameters));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyAdvertisingParameters, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QLowEnergyAdvertisingParameters, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLowEnergyAdvertisingParameters___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyAdvertisingParameters___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLowEnergyAdvertisingParameters *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingParameters *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyAdvertisingParameters));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingParameters* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyAdvertisingParameters, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QLowEnergyAdvertisingParameters, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLowEnergyAdvertisingParameters(void *, int);}
static void release_QLowEnergyAdvertisingParameters(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLowEnergyAdvertisingParameters *>(sipCppV);
}


extern "C" {static void assign_QLowEnergyAdvertisingParameters(void *, SIP_SSIZE_T, void *);}
static void assign_QLowEnergyAdvertisingParameters(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLowEnergyAdvertisingParameters *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLowEnergyAdvertisingParameters *>(sipSrc);
}


extern "C" {static void *array_QLowEnergyAdvertisingParameters(SIP_SSIZE_T);}
static void *array_QLowEnergyAdvertisingParameters(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLowEnergyAdvertisingParameters[sipNrElem];
}


extern "C" {static void *copy_QLowEnergyAdvertisingParameters(const void *, SIP_SSIZE_T);}
static void *copy_QLowEnergyAdvertisingParameters(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLowEnergyAdvertisingParameters(reinterpret_cast<const  ::QLowEnergyAdvertisingParameters *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLowEnergyAdvertisingParameters(sipSimpleWrapper *);}
static void dealloc_QLowEnergyAdvertisingParameters(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLowEnergyAdvertisingParameters(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLowEnergyAdvertisingParameters(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLowEnergyAdvertisingParameters(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLowEnergyAdvertisingParameters *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLowEnergyAdvertisingParameters();

            return sipCpp;
        }
    }

    {
        const  ::QLowEnergyAdvertisingParameters* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLowEnergyAdvertisingParameters, &a0))
        {
            sipCpp = new  ::QLowEnergyAdvertisingParameters(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLowEnergyAdvertisingParameters[] = {
    {(void *)slot_QLowEnergyAdvertisingParameters___eq__, eq_slot},
    {(void *)slot_QLowEnergyAdvertisingParameters___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLowEnergyAdvertisingParameters[] = {
    {SIP_MLNAME_CAST(sipName_filterPolicy), meth_QLowEnergyAdvertisingParameters_filterPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_filterPolicy)},
    {SIP_MLNAME_CAST(sipName_maximumInterval), meth_QLowEnergyAdvertisingParameters_maximumInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_maximumInterval)},
    {SIP_MLNAME_CAST(sipName_minimumInterval), meth_QLowEnergyAdvertisingParameters_minimumInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_minimumInterval)},
    {SIP_MLNAME_CAST(sipName_mode), meth_QLowEnergyAdvertisingParameters_mode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_mode)},
    {SIP_MLNAME_CAST(sipName_setInterval), meth_QLowEnergyAdvertisingParameters_setInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_setInterval)},
    {SIP_MLNAME_CAST(sipName_setMode), meth_QLowEnergyAdvertisingParameters_setMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_setMode)},
    {SIP_MLNAME_CAST(sipName_setWhiteList), meth_QLowEnergyAdvertisingParameters_setWhiteList, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_setWhiteList)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QLowEnergyAdvertisingParameters_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_swap)},
    {SIP_MLNAME_CAST(sipName_whiteList), meth_QLowEnergyAdvertisingParameters_whiteList, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingParameters_whiteList)}
};

static sipEnumMemberDef enummembers_QLowEnergyAdvertisingParameters[] = {
    {sipName_AdvInd, static_cast<int>( ::QLowEnergyAdvertisingParameters::AdvInd), 75},
    {sipName_AdvNonConnInd, static_cast<int>( ::QLowEnergyAdvertisingParameters::AdvNonConnInd), 75},
    {sipName_AdvScanInd, static_cast<int>( ::QLowEnergyAdvertisingParameters::AdvScanInd), 75},
    {sipName_IgnoreWhiteList, static_cast<int>( ::QLowEnergyAdvertisingParameters::IgnoreWhiteList), 74},
    {sipName_UseWhiteListForConnecting, static_cast<int>( ::QLowEnergyAdvertisingParameters::UseWhiteListForConnecting), 74},
    {sipName_UseWhiteListForScanning, static_cast<int>( ::QLowEnergyAdvertisingParameters::UseWhiteListForScanning), 74},
    {sipName_UseWhiteListForScanningAndConnecting, static_cast<int>( ::QLowEnergyAdvertisingParameters::UseWhiteListForScanningAndConnecting), 74},
};

PyDoc_STRVAR(doc_QLowEnergyAdvertisingParameters, "\1QLowEnergyAdvertisingParameters()\n"
"QLowEnergyAdvertisingParameters(QLowEnergyAdvertisingParameters)");


static pyqt5ClassPluginDef plugin_QLowEnergyAdvertisingParameters = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QLowEnergyAdvertisingParameters = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLowEnergyAdvertisingParameters,
        {SIP_NULLPTR},
        &plugin_QLowEnergyAdvertisingParameters
    },
    {
        sipNameNr_QLowEnergyAdvertisingParameters,
        {0, 0, 1},
        9, methods_QLowEnergyAdvertisingParameters,
        7, enummembers_QLowEnergyAdvertisingParameters,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLowEnergyAdvertisingParameters,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QLowEnergyAdvertisingParameters,
    init_type_QLowEnergyAdvertisingParameters,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLowEnergyAdvertisingParameters,
    assign_QLowEnergyAdvertisingParameters,
    array_QLowEnergyAdvertisingParameters,
    copy_QLowEnergyAdvertisingParameters,
    release_QLowEnergyAdvertisingParameters,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qlowenergyadvertisingdata.sip"
#include <qlowenergyadvertisingdata.h>
#line 1298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 1302 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 1305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 1308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 1311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_setLocalName, "setLocalName(self, str)");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_setLocalName(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_setLocalName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setLocalName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_setLocalName, doc_QLowEnergyAdvertisingData_setLocalName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_localName, "localName(self) -> str");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_localName(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_localName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->localName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_localName, doc_QLowEnergyAdvertisingData_localName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_invalidManufacturerId, "invalidManufacturerId() -> int");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_invalidManufacturerId(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_invalidManufacturerId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::quint16 sipRes;

            sipRes =  ::QLowEnergyAdvertisingData::invalidManufacturerId();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_invalidManufacturerId, doc_QLowEnergyAdvertisingData_invalidManufacturerId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_setManufacturerData, "setManufacturerData(self, int, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_setManufacturerData(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_setManufacturerData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BtJ1", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp, &a0, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setManufacturerData(a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_setManufacturerData, doc_QLowEnergyAdvertisingData_setManufacturerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_manufacturerId, "manufacturerId(self) -> int");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_manufacturerId(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_manufacturerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->manufacturerId();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_manufacturerId, doc_QLowEnergyAdvertisingData_manufacturerId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_manufacturerData, "manufacturerData(self) -> QByteArray");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_manufacturerData(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_manufacturerData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->manufacturerData());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_manufacturerData, doc_QLowEnergyAdvertisingData_manufacturerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_setIncludePowerLevel, "setIncludePowerLevel(self, bool)");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_setIncludePowerLevel(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_setIncludePowerLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp, &a0))
        {
            sipCpp->setIncludePowerLevel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_setIncludePowerLevel, doc_QLowEnergyAdvertisingData_setIncludePowerLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_includePowerLevel, "includePowerLevel(self) -> bool");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_includePowerLevel(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_includePowerLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->includePowerLevel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_includePowerLevel, doc_QLowEnergyAdvertisingData_includePowerLevel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_setDiscoverability, "setDiscoverability(self, QLowEnergyAdvertisingData.Discoverability)");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_setDiscoverability(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_setDiscoverability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLowEnergyAdvertisingData::Discoverability a0;
         ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp, sipType_QLowEnergyAdvertisingData_Discoverability, &a0))
        {
            sipCpp->setDiscoverability(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_setDiscoverability, doc_QLowEnergyAdvertisingData_setDiscoverability);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_discoverability, "discoverability(self) -> QLowEnergyAdvertisingData.Discoverability");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_discoverability(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_discoverability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp))
        {
             ::QLowEnergyAdvertisingData::Discoverability sipRes;

            sipRes = sipCpp->discoverability();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLowEnergyAdvertisingData_Discoverability);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_discoverability, doc_QLowEnergyAdvertisingData_discoverability);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_setServices, "setServices(self, Iterable[QBluetoothUuid])");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_setServices(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_setServices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QBluetoothUuid>* a0;
        int a0State = 0;
         ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp, sipType_QList_0100QBluetoothUuid,&a0, &a0State))
        {
            sipCpp->setServices(*a0);
            sipReleaseType(const_cast<QList< ::QBluetoothUuid> *>(a0),sipType_QList_0100QBluetoothUuid,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_setServices, doc_QLowEnergyAdvertisingData_setServices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_services, "services(self) -> List[QBluetoothUuid]");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_services(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_services(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp))
        {
            QList< ::QBluetoothUuid>*sipRes;

            sipRes = new QList< ::QBluetoothUuid>(sipCpp->services());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_services, doc_QLowEnergyAdvertisingData_services);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_setRawData, "setRawData(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_setRawData(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_setRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setRawData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_setRawData, doc_QLowEnergyAdvertisingData_setRawData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_rawData, "rawData(self) -> QByteArray");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_rawData(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_rawData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->rawData());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_rawData, doc_QLowEnergyAdvertisingData_rawData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLowEnergyAdvertisingData_swap, "swap(self, QLowEnergyAdvertisingData)");

extern "C" {static PyObject *meth_QLowEnergyAdvertisingData_swap(PyObject *, PyObject *);}
static PyObject *meth_QLowEnergyAdvertisingData_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLowEnergyAdvertisingData* a0;
         ::QLowEnergyAdvertisingData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLowEnergyAdvertisingData, &sipCpp, sipType_QLowEnergyAdvertisingData, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLowEnergyAdvertisingData, sipName_swap, doc_QLowEnergyAdvertisingData_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QLowEnergyAdvertisingData___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyAdvertisingData___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLowEnergyAdvertisingData *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyAdvertisingData));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyAdvertisingData, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QLowEnergyAdvertisingData, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLowEnergyAdvertisingData___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLowEnergyAdvertisingData___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLowEnergyAdvertisingData *sipCpp = reinterpret_cast< ::QLowEnergyAdvertisingData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLowEnergyAdvertisingData));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLowEnergyAdvertisingData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QLowEnergyAdvertisingData, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QLowEnergyAdvertisingData, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QLowEnergyAdvertisingData(void *, int);}
static void release_QLowEnergyAdvertisingData(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLowEnergyAdvertisingData *>(sipCppV);
}


extern "C" {static void assign_QLowEnergyAdvertisingData(void *, SIP_SSIZE_T, void *);}
static void assign_QLowEnergyAdvertisingData(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLowEnergyAdvertisingData *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLowEnergyAdvertisingData *>(sipSrc);
}


extern "C" {static void *array_QLowEnergyAdvertisingData(SIP_SSIZE_T);}
static void *array_QLowEnergyAdvertisingData(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLowEnergyAdvertisingData[sipNrElem];
}


extern "C" {static void *copy_QLowEnergyAdvertisingData(const void *, SIP_SSIZE_T);}
static void *copy_QLowEnergyAdvertisingData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLowEnergyAdvertisingData(reinterpret_cast<const  ::QLowEnergyAdvertisingData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLowEnergyAdvertisingData(sipSimpleWrapper *);}
static void dealloc_QLowEnergyAdvertisingData(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLowEnergyAdvertisingData(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLowEnergyAdvertisingData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLowEnergyAdvertisingData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLowEnergyAdvertisingData *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLowEnergyAdvertisingData();

            return sipCpp;
        }
    }

    {
        const  ::QLowEnergyAdvertisingData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QLowEnergyAdvertisingData, &a0))
        {
            sipCpp = new  ::QLowEnergyAdvertisingData(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLowEnergyAdvertisingData[] = {
    {(void *)slot_QLowEnergyAdvertisingData___eq__, eq_slot},
    {(void *)slot_QLowEnergyAdvertisingData___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLowEnergyAdvertisingData[] = {
    {SIP_MLNAME_CAST(sipName_discoverability), meth_QLowEnergyAdvertisingData_discoverability, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_discoverability)},
    {SIP_MLNAME_CAST(sipName_includePowerLevel), meth_QLowEnergyAdvertisingData_includePowerLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_includePowerLevel)},
    {SIP_MLNAME_CAST(sipName_invalidManufacturerId), meth_QLowEnergyAdvertisingData_invalidManufacturerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_invalidManufacturerId)},
    {SIP_MLNAME_CAST(sipName_localName), meth_QLowEnergyAdvertisingData_localName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_localName)},
    {SIP_MLNAME_CAST(sipName_manufacturerData), meth_QLowEnergyAdvertisingData_manufacturerData, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_manufacturerData)},
    {SIP_MLNAME_CAST(sipName_manufacturerId), meth_QLowEnergyAdvertisingData_manufacturerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_manufacturerId)},
    {SIP_MLNAME_CAST(sipName_rawData), meth_QLowEnergyAdvertisingData_rawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_rawData)},
    {SIP_MLNAME_CAST(sipName_services), meth_QLowEnergyAdvertisingData_services, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_services)},
    {SIP_MLNAME_CAST(sipName_setDiscoverability), meth_QLowEnergyAdvertisingData_setDiscoverability, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_setDiscoverability)},
    {SIP_MLNAME_CAST(sipName_setIncludePowerLevel), meth_QLowEnergyAdvertisingData_setIncludePowerLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_setIncludePowerLevel)},
    {SIP_MLNAME_CAST(sipName_setLocalName), meth_QLowEnergyAdvertisingData_setLocalName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_setLocalName)},
    {SIP_MLNAME_CAST(sipName_setManufacturerData), meth_QLowEnergyAdvertisingData_setManufacturerData, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_setManufacturerData)},
    {SIP_MLNAME_CAST(sipName_setRawData), meth_QLowEnergyAdvertisingData_setRawData, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_setRawData)},
    {SIP_MLNAME_CAST(sipName_setServices), meth_QLowEnergyAdvertisingData_setServices, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_setServices)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QLowEnergyAdvertisingData_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QLowEnergyAdvertisingData_swap)}
};

static sipEnumMemberDef enummembers_QLowEnergyAdvertisingData[] = {
    {sipName_DiscoverabilityGeneral, static_cast<int>( ::QLowEnergyAdvertisingData::DiscoverabilityGeneral), 71},
    {sipName_DiscoverabilityLimited, static_cast<int>( ::QLowEnergyAdvertisingData::DiscoverabilityLimited), 71},
    {sipName_DiscoverabilityNone, static_cast<int>( ::QLowEnergyAdvertisingData::DiscoverabilityNone), 71},
};

PyDoc_STRVAR(doc_QLowEnergyAdvertisingData, "\1QLowEnergyAdvertisingData()\n"
"QLowEnergyAdvertisingData(QLowEnergyAdvertisingData)");


static pyqt5ClassPluginDef plugin_QLowEnergyAdvertisingData = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QLowEnergyAdvertisingData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLowEnergyAdvertisingData,
        {SIP_NULLPTR},
        &plugin_QLowEnergyAdvertisingData
    },
    {
        sipNameNr_QLowEnergyAdvertisingData,
        {0, 0, 1},
        15, methods_QLowEnergyAdvertisingData,
        3, enummembers_QLowEnergyAdvertisingData,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLowEnergyAdvertisingData,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QLowEnergyAdvertisingData,
    init_type_QLowEnergyAdvertisingData,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLowEnergyAdvertisingData,
    assign_QLowEnergyAdvertisingData,
    array_QLowEnergyAdvertisingData,
    copy_QLowEnergyAdvertisingData,
    release_QLowEnergyAdvertisingData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 1978 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 24 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qpybluetooth_quint128.sip"
#include <qbluetoothuuid.h>
#line 1982 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 1985 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/quuid.sip"
#include <quuid.h>
#line 1988 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 1991 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QBluetoothUuid_minimumSize, "minimumSize(self) -> int");

extern "C" {static PyObject *meth_QBluetoothUuid_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothUuid_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothUuid, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothUuid, sipName_minimumSize, doc_QBluetoothUuid_minimumSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothUuid_toUInt16, "toUInt16(self) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QBluetoothUuid_toUInt16(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothUuid_toUInt16(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QBluetoothUuid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QBluetoothUuid, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->toUInt16(&a0);

            return sipBuildResult(0,"(tb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothUuid, sipName_toUInt16, doc_QBluetoothUuid_toUInt16);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothUuid_toUInt32, "toUInt32(self) -> Tuple[int, bool]");

extern "C" {static PyObject *meth_QBluetoothUuid_toUInt32(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothUuid_toUInt32(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QBluetoothUuid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QBluetoothUuid, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->toUInt32(&a0);

            return sipBuildResult(0,"(ub)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothUuid, sipName_toUInt32, doc_QBluetoothUuid_toUInt32);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothUuid_toUInt128, "toUInt128(self) -> Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]");

extern "C" {static PyObject *meth_QBluetoothUuid_toUInt128(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothUuid_toUInt128(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothUuid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothUuid, &sipCpp))
        {
             ::quint128*sipRes;

            sipRes = new  ::quint128(sipCpp->toUInt128());

            return sipConvertFromNewType(sipRes,sipType_quint128,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothUuid, sipName_toUInt128, doc_QBluetoothUuid_toUInt128);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothUuid_serviceClassToString, "serviceClassToString(QBluetoothUuid.ServiceClassUuid) -> str");

extern "C" {static PyObject *meth_QBluetoothUuid_serviceClassToString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothUuid_serviceClassToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothUuid::ServiceClassUuid a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QBluetoothUuid_ServiceClassUuid, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QBluetoothUuid::serviceClassToString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothUuid, sipName_serviceClassToString, doc_QBluetoothUuid_serviceClassToString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothUuid_protocolToString, "protocolToString(QBluetoothUuid.ProtocolUuid) -> str");

extern "C" {static PyObject *meth_QBluetoothUuid_protocolToString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothUuid_protocolToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothUuid::ProtocolUuid a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QBluetoothUuid_ProtocolUuid, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QBluetoothUuid::protocolToString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothUuid, sipName_protocolToString, doc_QBluetoothUuid_protocolToString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothUuid_characteristicToString, "characteristicToString(QBluetoothUuid.CharacteristicType) -> str");

extern "C" {static PyObject *meth_QBluetoothUuid_characteristicToString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothUuid_characteristicToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothUuid::CharacteristicType a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QBluetoothUuid_CharacteristicType, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QBluetoothUuid::characteristicToString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothUuid, sipName_characteristicToString, doc_QBluetoothUuid_characteristicToString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothUuid_descriptorToString, "descriptorToString(QBluetoothUuid.DescriptorType) -> str");

extern "C" {static PyObject *meth_QBluetoothUuid_descriptorToString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothUuid_descriptorToString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothUuid::DescriptorType a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QBluetoothUuid_DescriptorType, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QBluetoothUuid::descriptorToString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothUuid, sipName_descriptorToString, doc_QBluetoothUuid_descriptorToString);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QBluetoothUuid___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothUuid___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothUuid *sipCpp = reinterpret_cast< ::QBluetoothUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothUuid::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothUuid, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothUuid___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothUuid___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothUuid *sipCpp = reinterpret_cast< ::QBluetoothUuid *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothUuid));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothUuid* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothUuid, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothUuid::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothUuid, sipSelf, sipArg);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothUuid(void *, const sipTypeDef *);}
static void *cast_QBluetoothUuid(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothUuid *sipCpp = reinterpret_cast< ::QBluetoothUuid *>(sipCppV);

    if (targetType == sipType_QUuid)
        return static_cast< ::QUuid *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothUuid(void *, int);}
static void release_QBluetoothUuid(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothUuid *>(sipCppV);
}


extern "C" {static void assign_QBluetoothUuid(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothUuid(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothUuid *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothUuid *>(sipSrc);
}


extern "C" {static void *array_QBluetoothUuid(SIP_SSIZE_T);}
static void *array_QBluetoothUuid(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothUuid[sipNrElem];
}


extern "C" {static void *copy_QBluetoothUuid(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothUuid(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothUuid(reinterpret_cast<const  ::QBluetoothUuid *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothUuid(sipSimpleWrapper *);}
static void dealloc_QBluetoothUuid(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothUuid(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothUuid(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothUuid(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothUuid *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothUuid();

            return sipCpp;
        }
    }

    {
         ::quint32 a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "u", &a0))
        {
            sipCpp = new  ::QBluetoothUuid(a0);

            return sipCpp;
        }
    }

    {
         ::quint128* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_quint128,&a0, &a0State))
        {
            sipCpp = new  ::QBluetoothUuid(*a0);
            sipReleaseType(a0,sipType_quint128,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QBluetoothUuid(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothUuid* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBluetoothUuid, &a0))
        {
            sipCpp = new  ::QBluetoothUuid(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QUuid* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QUuid, &a0))
        {
            sipCpp = new  ::QBluetoothUuid(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothUuid[] = {{10, 0, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothUuid[] = {
    {(void *)slot_QBluetoothUuid___ne__, ne_slot},
    {(void *)slot_QBluetoothUuid___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QBluetoothUuid[] = {
    {SIP_MLNAME_CAST(sipName_characteristicToString), meth_QBluetoothUuid_characteristicToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothUuid_characteristicToString)},
    {SIP_MLNAME_CAST(sipName_descriptorToString), meth_QBluetoothUuid_descriptorToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothUuid_descriptorToString)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QBluetoothUuid_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothUuid_minimumSize)},
    {SIP_MLNAME_CAST(sipName_protocolToString), meth_QBluetoothUuid_protocolToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothUuid_protocolToString)},
    {SIP_MLNAME_CAST(sipName_serviceClassToString), meth_QBluetoothUuid_serviceClassToString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothUuid_serviceClassToString)},
    {SIP_MLNAME_CAST(sipName_toUInt128), meth_QBluetoothUuid_toUInt128, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothUuid_toUInt128)},
    {SIP_MLNAME_CAST(sipName_toUInt16), SIP_MLMETH_CAST(meth_QBluetoothUuid_toUInt16), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothUuid_toUInt16)},
    {SIP_MLNAME_CAST(sipName_toUInt32), SIP_MLMETH_CAST(meth_QBluetoothUuid_toUInt32), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothUuid_toUInt32)}
};

static sipEnumMemberDef enummembers_QBluetoothUuid[] = {
    {sipName_AV_RemoteControl, static_cast<int>( ::QBluetoothUuid::AV_RemoteControl), 56},
    {sipName_AV_RemoteControlController, static_cast<int>( ::QBluetoothUuid::AV_RemoteControlController), 56},
    {sipName_AV_RemoteControlTarget, static_cast<int>( ::QBluetoothUuid::AV_RemoteControlTarget), 56},
    {sipName_AdvancedAudioDistribution, static_cast<int>( ::QBluetoothUuid::AdvancedAudioDistribution), 56},
    {sipName_AerobicHeartRateLowerLimit, static_cast<int>( ::QBluetoothUuid::AerobicHeartRateLowerLimit), 53},
    {sipName_AerobicHeartRateUpperLimit, static_cast<int>( ::QBluetoothUuid::AerobicHeartRateUpperLimit), 53},
    {sipName_AerobicThreshold, static_cast<int>( ::QBluetoothUuid::AerobicThreshold), 53},
    {sipName_Age, static_cast<int>( ::QBluetoothUuid::Age), 53},
    {sipName_AlertCategoryID, static_cast<int>( ::QBluetoothUuid::AlertCategoryID), 53},
    {sipName_AlertCategoryIDBitMask, static_cast<int>( ::QBluetoothUuid::AlertCategoryIDBitMask), 53},
    {sipName_AlertLevel, static_cast<int>( ::QBluetoothUuid::AlertLevel), 53},
    {sipName_AlertNotificationControlPoint, static_cast<int>( ::QBluetoothUuid::AlertNotificationControlPoint), 53},
    {sipName_AlertNotificationService, static_cast<int>( ::QBluetoothUuid::AlertNotificationService), 56},
    {sipName_AlertStatus, static_cast<int>( ::QBluetoothUuid::AlertStatus), 53},
    {sipName_AnaerobicHeartRateLowerLimit, static_cast<int>( ::QBluetoothUuid::AnaerobicHeartRateLowerLimit), 53},
    {sipName_AnaerobicHeartRateUpperLimit, static_cast<int>( ::QBluetoothUuid::AnaerobicHeartRateUpperLimit), 53},
    {sipName_AnaerobicThreshold, static_cast<int>( ::QBluetoothUuid::AnaerobicThreshold), 53},
    {sipName_ApparentWindDirection, static_cast<int>( ::QBluetoothUuid::ApparentWindDirection), 53},
    {sipName_ApparentWindSpeed, static_cast<int>( ::QBluetoothUuid::ApparentWindSpeed), 53},
    {sipName_Appearance, static_cast<int>( ::QBluetoothUuid::Appearance), 53},
    {sipName_Att, static_cast<int>( ::QBluetoothUuid::Att), 55},
    {sipName_AudioSink, static_cast<int>( ::QBluetoothUuid::AudioSink), 56},
    {sipName_AudioSource, static_cast<int>( ::QBluetoothUuid::AudioSource), 56},
    {sipName_Avctp, static_cast<int>( ::QBluetoothUuid::Avctp), 55},
    {sipName_Avdtp, static_cast<int>( ::QBluetoothUuid::Avdtp), 55},
    {sipName_BarometricPressureTrend, static_cast<int>( ::QBluetoothUuid::BarometricPressureTrend), 53},
    {sipName_BasicImage, static_cast<int>( ::QBluetoothUuid::BasicImage), 56},
    {sipName_BasicPrinting, static_cast<int>( ::QBluetoothUuid::BasicPrinting), 56},
    {sipName_BatteryLevel, static_cast<int>( ::QBluetoothUuid::BatteryLevel), 53},
    {sipName_BatteryService, static_cast<int>( ::QBluetoothUuid::BatteryService), 56},
    {sipName_BloodPressure, static_cast<int>( ::QBluetoothUuid::BloodPressure), 56},
    {sipName_BloodPressureFeature, static_cast<int>( ::QBluetoothUuid::BloodPressureFeature), 53},
    {sipName_BloodPressureMeasurement, static_cast<int>( ::QBluetoothUuid::BloodPressureMeasurement), 53},
    {sipName_Bnep, static_cast<int>( ::QBluetoothUuid::Bnep), 55},
    {sipName_BodyComposition, static_cast<int>( ::QBluetoothUuid::BodyComposition), 56},
    {sipName_BodyCompositionFeature, static_cast<int>( ::QBluetoothUuid::BodyCompositionFeature), 53},
    {sipName_BodyCompositionMeasurement, static_cast<int>( ::QBluetoothUuid::BodyCompositionMeasurement), 53},
    {sipName_BodySensorLocation, static_cast<int>( ::QBluetoothUuid::BodySensorLocation), 53},
    {sipName_BondManagement, static_cast<int>( ::QBluetoothUuid::BondManagement), 56},
    {sipName_BootKeyboardInputReport, static_cast<int>( ::QBluetoothUuid::BootKeyboardInputReport), 53},
    {sipName_BootKeyboardOutputReport, static_cast<int>( ::QBluetoothUuid::BootKeyboardOutputReport), 53},
    {sipName_BootMouseInputReport, static_cast<int>( ::QBluetoothUuid::BootMouseInputReport), 53},
    {sipName_BrowseGroupDescriptor, static_cast<int>( ::QBluetoothUuid::BrowseGroupDescriptor), 56},
    {sipName_CSCFeature, static_cast<int>( ::QBluetoothUuid::CSCFeature), 53},
    {sipName_CSCMeasurement, static_cast<int>( ::QBluetoothUuid::CSCMeasurement), 53},
    {sipName_CharacteristicAggregateFormat, static_cast<int>( ::QBluetoothUuid::CharacteristicAggregateFormat), 54},
    {sipName_CharacteristicExtendedProperties, static_cast<int>( ::QBluetoothUuid::CharacteristicExtendedProperties), 54},
    {sipName_CharacteristicPresentationFormat, static_cast<int>( ::QBluetoothUuid::CharacteristicPresentationFormat), 54},
    {sipName_CharacteristicUserDescription, static_cast<int>( ::QBluetoothUuid::CharacteristicUserDescription), 54},
    {sipName_ClientCharacteristicConfiguration, static_cast<int>( ::QBluetoothUuid::ClientCharacteristicConfiguration), 54},
    {sipName_Cmtp, static_cast<int>( ::QBluetoothUuid::Cmtp), 55},
    {sipName_ContinuousGlucoseMonitoring, static_cast<int>( ::QBluetoothUuid::ContinuousGlucoseMonitoring), 56},
    {sipName_CurrentTime, static_cast<int>( ::QBluetoothUuid::CurrentTime), 53},
    {sipName_CurrentTimeService, static_cast<int>( ::QBluetoothUuid::CurrentTimeService), 56},
    {sipName_CyclingPower, static_cast<int>( ::QBluetoothUuid::CyclingPower), 56},
    {sipName_CyclingPowerControlPoint, static_cast<int>( ::QBluetoothUuid::CyclingPowerControlPoint), 53},
    {sipName_CyclingPowerFeature, static_cast<int>( ::QBluetoothUuid::CyclingPowerFeature), 53},
    {sipName_CyclingPowerMeasurement, static_cast<int>( ::QBluetoothUuid::CyclingPowerMeasurement), 53},
    {sipName_CyclingPowerVector, static_cast<int>( ::QBluetoothUuid::CyclingPowerVector), 53},
    {sipName_CyclingSpeedAndCadence, static_cast<int>( ::QBluetoothUuid::CyclingSpeedAndCadence), 56},
    {sipName_DSTOffset, static_cast<int>( ::QBluetoothUuid::DSTOffset), 53},
    {sipName_DatabaseChangeIncrement, static_cast<int>( ::QBluetoothUuid::DatabaseChangeIncrement), 53},
    {sipName_DateOfBirth, static_cast<int>( ::QBluetoothUuid::DateOfBirth), 53},
    {sipName_DateOfThresholdAssessment, static_cast<int>( ::QBluetoothUuid::DateOfThresholdAssessment), 53},
    {sipName_DateTime, static_cast<int>( ::QBluetoothUuid::DateTime), 53},
    {sipName_DayDateTime, static_cast<int>( ::QBluetoothUuid::DayDateTime), 53},
    {sipName_DayOfWeek, static_cast<int>( ::QBluetoothUuid::DayOfWeek), 53},
    {sipName_DescriptorValueChanged, static_cast<int>( ::QBluetoothUuid::DescriptorValueChanged), 53},
    {sipName_DeviceInformation, static_cast<int>( ::QBluetoothUuid::DeviceInformation), 56},
    {sipName_DeviceName, static_cast<int>( ::QBluetoothUuid::DeviceName), 53},
    {sipName_DewPoint, static_cast<int>( ::QBluetoothUuid::DewPoint), 53},
    {sipName_DialupNetworking, static_cast<int>( ::QBluetoothUuid::DialupNetworking), 56},
    {sipName_DirectPrinting, static_cast<int>( ::QBluetoothUuid::DirectPrinting), 56},
    {sipName_DirectPrintingReferenceObjectsService, static_cast<int>( ::QBluetoothUuid::DirectPrintingReferenceObjectsService), 56},
    {sipName_Display3D, static_cast<int>( ::QBluetoothUuid::Display3D), 56},
    {sipName_Elevation, static_cast<int>( ::QBluetoothUuid::Elevation), 53},
    {sipName_EmailAddress, static_cast<int>( ::QBluetoothUuid::EmailAddress), 53},
    {sipName_EnvironmentalSensing, static_cast<int>( ::QBluetoothUuid::EnvironmentalSensing), 56},
    {sipName_EnvironmentalSensingConfiguration, static_cast<int>( ::QBluetoothUuid::EnvironmentalSensingConfiguration), 54},
    {sipName_EnvironmentalSensingMeasurement, static_cast<int>( ::QBluetoothUuid::EnvironmentalSensingMeasurement), 54},
    {sipName_EnvironmentalSensingTriggerSetting, static_cast<int>( ::QBluetoothUuid::EnvironmentalSensingTriggerSetting), 54},
    {sipName_ExactTime256, static_cast<int>( ::QBluetoothUuid::ExactTime256), 53},
    {sipName_ExternalReportReference, static_cast<int>( ::QBluetoothUuid::ExternalReportReference), 54},
    {sipName_FatBurnHeartRateLowerLimit, static_cast<int>( ::QBluetoothUuid::FatBurnHeartRateLowerLimit), 53},
    {sipName_FatBurnHeartRateUpperLimit, static_cast<int>( ::QBluetoothUuid::FatBurnHeartRateUpperLimit), 53},
    {sipName_FirmwareRevisionString, static_cast<int>( ::QBluetoothUuid::FirmwareRevisionString), 53},
    {sipName_FirstName, static_cast<int>( ::QBluetoothUuid::FirstName), 53},
    {sipName_FiveZoneHeartRateLimits, static_cast<int>( ::QBluetoothUuid::FiveZoneHeartRateLimits), 53},
    {sipName_Ftp, static_cast<int>( ::QBluetoothUuid::Ftp), 55},
    {sipName_GN, static_cast<int>( ::QBluetoothUuid::GN), 56},
    {sipName_GNSS, static_cast<int>( ::QBluetoothUuid::GNSS), 56},
    {sipName_GNSSServer, static_cast<int>( ::QBluetoothUuid::GNSSServer), 56},
    {sipName_Gender, static_cast<int>( ::QBluetoothUuid::Gender), 53},
    {sipName_GenericAccess, static_cast<int>( ::QBluetoothUuid::GenericAccess), 56},
    {sipName_GenericAttribute, static_cast<int>( ::QBluetoothUuid::GenericAttribute), 56},
    {sipName_GenericAudio, static_cast<int>( ::QBluetoothUuid::GenericAudio), 56},
    {sipName_GenericFileTransfer, static_cast<int>( ::QBluetoothUuid::GenericFileTransfer), 56},
    {sipName_GenericNetworking, static_cast<int>( ::QBluetoothUuid::GenericNetworking), 56},
    {sipName_GenericTelephony, static_cast<int>( ::QBluetoothUuid::GenericTelephony), 56},
    {sipName_Glasses3D, static_cast<int>( ::QBluetoothUuid::Glasses3D), 56},
    {sipName_Glucose, static_cast<int>( ::QBluetoothUuid::Glucose), 56},
    {sipName_GlucoseFeature, static_cast<int>( ::QBluetoothUuid::GlucoseFeature), 53},
    {sipName_GlucoseMeasurement, static_cast<int>( ::QBluetoothUuid::GlucoseMeasurement), 53},
    {sipName_GlucoseMeasurementContext, static_cast<int>( ::QBluetoothUuid::GlucoseMeasurementContext), 53},
    {sipName_GustFactor, static_cast<int>( ::QBluetoothUuid::GustFactor), 53},
    {sipName_HCRPrint, static_cast<int>( ::QBluetoothUuid::HCRPrint), 56},
    {sipName_HCRScan, static_cast<int>( ::QBluetoothUuid::HCRScan), 56},
    {sipName_HDP, static_cast<int>( ::QBluetoothUuid::HDP), 56},
    {sipName_HDPSink, static_cast<int>( ::QBluetoothUuid::HDPSink), 56},
    {sipName_HDPSource, static_cast<int>( ::QBluetoothUuid::HDPSource), 56},
    {sipName_HIDControlPoint, static_cast<int>( ::QBluetoothUuid::HIDControlPoint), 53},
    {sipName_HIDInformation, static_cast<int>( ::QBluetoothUuid::HIDInformation), 53},
    {sipName_Handsfree, static_cast<int>( ::QBluetoothUuid::Handsfree), 56},
    {sipName_HandsfreeAudioGateway, static_cast<int>( ::QBluetoothUuid::HandsfreeAudioGateway), 56},
    {sipName_HardcopyCableReplacement, static_cast<int>( ::QBluetoothUuid::HardcopyCableReplacement), 56},
    {sipName_HardcopyControlChannel, static_cast<int>( ::QBluetoothUuid::HardcopyControlChannel), 55},
    {sipName_HardcopyDataChannel, static_cast<int>( ::QBluetoothUuid::HardcopyDataChannel), 55},
    {sipName_HardcopyNotification, static_cast<int>( ::QBluetoothUuid::HardcopyNotification), 55},
    {sipName_HardwareRevisionString, static_cast<int>( ::QBluetoothUuid::HardwareRevisionString), 53},
    {sipName_Headset, static_cast<int>( ::QBluetoothUuid::Headset), 56},
    {sipName_HeadsetAG, static_cast<int>( ::QBluetoothUuid::HeadsetAG), 56},
    {sipName_HeadsetHS, static_cast<int>( ::QBluetoothUuid::HeadsetHS), 56},
    {sipName_HealthThermometer, static_cast<int>( ::QBluetoothUuid::HealthThermometer), 56},
    {sipName_HeartRate, static_cast<int>( ::QBluetoothUuid::HeartRate), 56},
    {sipName_HeartRateControlPoint, static_cast<int>( ::QBluetoothUuid::HeartRateControlPoint), 53},
    {sipName_HeartRateMax, static_cast<int>( ::QBluetoothUuid::HeartRateMax), 53},
    {sipName_HeartRateMeasurement, static_cast<int>( ::QBluetoothUuid::HeartRateMeasurement), 53},
    {sipName_HeatIndex, static_cast<int>( ::QBluetoothUuid::HeatIndex), 53},
    {sipName_Height, static_cast<int>( ::QBluetoothUuid::Height), 53},
    {sipName_Hidp, static_cast<int>( ::QBluetoothUuid::Hidp), 55},
    {sipName_HipCircumference, static_cast<int>( ::QBluetoothUuid::HipCircumference), 53},
    {sipName_Http, static_cast<int>( ::QBluetoothUuid::Http), 55},
    {sipName_HumanInterfaceDevice, static_cast<int>( ::QBluetoothUuid::HumanInterfaceDevice), 56},
    {sipName_HumanInterfaceDeviceService, static_cast<int>( ::QBluetoothUuid::HumanInterfaceDeviceService), 56},
    {sipName_Humidity, static_cast<int>( ::QBluetoothUuid::Humidity), 53},
    {sipName_IEEE1107320601RegulatoryCertificationDataList, static_cast<int>( ::QBluetoothUuid::IEEE1107320601RegulatoryCertificationDataList), 53},
    {sipName_ImagingAutomaticArchive, static_cast<int>( ::QBluetoothUuid::ImagingAutomaticArchive), 56},
    {sipName_ImagingReferenceObjects, static_cast<int>( ::QBluetoothUuid::ImagingReferenceObjects), 56},
    {sipName_ImagingResponder, static_cast<int>( ::QBluetoothUuid::ImagingResponder), 56},
    {sipName_ImmediateAlert, static_cast<int>( ::QBluetoothUuid::ImmediateAlert), 56},
    {sipName_IntermediateCuffPressure, static_cast<int>( ::QBluetoothUuid::IntermediateCuffPressure), 53},
    {sipName_IntermediateTemperature, static_cast<int>( ::QBluetoothUuid::IntermediateTemperature), 53},
    {sipName_Ip, static_cast<int>( ::QBluetoothUuid::Ip), 55},
    {sipName_IrMCSync, static_cast<int>( ::QBluetoothUuid::IrMCSync), 56},
    {sipName_IrMCSyncCommand, static_cast<int>( ::QBluetoothUuid::IrMCSyncCommand), 56},
    {sipName_Irradiance, static_cast<int>( ::QBluetoothUuid::Irradiance), 53},
    {sipName_L2cap, static_cast<int>( ::QBluetoothUuid::L2cap), 55},
    {sipName_LANAccessUsingPPP, static_cast<int>( ::QBluetoothUuid::LANAccessUsingPPP), 56},
    {sipName_LNControlPoint, static_cast<int>( ::QBluetoothUuid::LNControlPoint), 53},
    {sipName_LNFeature, static_cast<int>( ::QBluetoothUuid::LNFeature), 53},
    {sipName_Language, static_cast<int>( ::QBluetoothUuid::Language), 53},
    {sipName_LastName, static_cast<int>( ::QBluetoothUuid::LastName), 53},
    {sipName_LinkLoss, static_cast<int>( ::QBluetoothUuid::LinkLoss), 56},
    {sipName_LocalTimeInformation, static_cast<int>( ::QBluetoothUuid::LocalTimeInformation), 53},
    {sipName_LocationAndNavigation, static_cast<int>( ::QBluetoothUuid::LocationAndNavigation), 56},
    {sipName_LocationAndSpeed, static_cast<int>( ::QBluetoothUuid::LocationAndSpeed), 53},
    {sipName_MPSProfile, static_cast<int>( ::QBluetoothUuid::MPSProfile), 56},
    {sipName_MPSService, static_cast<int>( ::QBluetoothUuid::MPSService), 56},
    {sipName_MagneticDeclination, static_cast<int>( ::QBluetoothUuid::MagneticDeclination), 53},
    {sipName_MagneticFluxDensity2D, static_cast<int>( ::QBluetoothUuid::MagneticFluxDensity2D), 53},
    {sipName_MagneticFluxDensity3D, static_cast<int>( ::QBluetoothUuid::MagneticFluxDensity3D), 53},
    {sipName_ManufacturerNameString, static_cast<int>( ::QBluetoothUuid::ManufacturerNameString), 53},
    {sipName_MaximumRecommendedHeartRate, static_cast<int>( ::QBluetoothUuid::MaximumRecommendedHeartRate), 53},
    {sipName_McapControlChannel, static_cast<int>( ::QBluetoothUuid::McapControlChannel), 55},
    {sipName_McapDataChannel, static_cast<int>( ::QBluetoothUuid::McapDataChannel), 55},
    {sipName_MeasurementInterval, static_cast<int>( ::QBluetoothUuid::MeasurementInterval), 53},
    {sipName_MessageAccessProfile, static_cast<int>( ::QBluetoothUuid::MessageAccessProfile), 56},
    {sipName_MessageAccessServer, static_cast<int>( ::QBluetoothUuid::MessageAccessServer), 56},
    {sipName_MessageNotificationServer, static_cast<int>( ::QBluetoothUuid::MessageNotificationServer), 56},
    {sipName_ModelNumberString, static_cast<int>( ::QBluetoothUuid::ModelNumberString), 53},
    {sipName_NAP, static_cast<int>( ::QBluetoothUuid::NAP), 56},
    {sipName_Navigation, static_cast<int>( ::QBluetoothUuid::Navigation), 53},
    {sipName_NewAlert, static_cast<int>( ::QBluetoothUuid::NewAlert), 53},
    {sipName_NextDSTChangeService, static_cast<int>( ::QBluetoothUuid::NextDSTChangeService), 56},
    {sipName_OBEXFileTransfer, static_cast<int>( ::QBluetoothUuid::OBEXFileTransfer), 56},
    {sipName_Obex, static_cast<int>( ::QBluetoothUuid::Obex), 55},
    {sipName_ObexObjectPush, static_cast<int>( ::QBluetoothUuid::ObexObjectPush), 56},
    {sipName_PANU, static_cast<int>( ::QBluetoothUuid::PANU), 56},
    {sipName_PeripheralPreferredConnectionParameters, static_cast<int>( ::QBluetoothUuid::PeripheralPreferredConnectionParameters), 53},
    {sipName_PeripheralPrivacyFlag, static_cast<int>( ::QBluetoothUuid::PeripheralPrivacyFlag), 53},
    {sipName_PhoneAlertStatusService, static_cast<int>( ::QBluetoothUuid::PhoneAlertStatusService), 56},
    {sipName_PhonebookAccess, static_cast<int>( ::QBluetoothUuid::PhonebookAccess), 56},
    {sipName_PhonebookAccessPCE, static_cast<int>( ::QBluetoothUuid::PhonebookAccessPCE), 56},
    {sipName_PhonebookAccessPSE, static_cast<int>( ::QBluetoothUuid::PhonebookAccessPSE), 56},
    {sipName_PnPID, static_cast<int>( ::QBluetoothUuid::PnPID), 53},
    {sipName_PnPInformation, static_cast<int>( ::QBluetoothUuid::PnPInformation), 56},
    {sipName_PollenConcentration, static_cast<int>( ::QBluetoothUuid::PollenConcentration), 53},
    {sipName_PositionQuality, static_cast<int>( ::QBluetoothUuid::PositionQuality), 53},
    {sipName_Pressure, static_cast<int>( ::QBluetoothUuid::Pressure), 53},
    {sipName_PrintingStatus, static_cast<int>( ::QBluetoothUuid::PrintingStatus), 56},
    {sipName_ProtocolMode, static_cast<int>( ::QBluetoothUuid::ProtocolMode), 53},
    {sipName_PublicBrowseGroup, static_cast<int>( ::QBluetoothUuid::PublicBrowseGroup), 56},
    {sipName_RSCFeature, static_cast<int>( ::QBluetoothUuid::RSCFeature), 53},
    {sipName_RSCMeasurement, static_cast<int>( ::QBluetoothUuid::RSCMeasurement), 53},
    {sipName_Rainfall, static_cast<int>( ::QBluetoothUuid::Rainfall), 53},
    {sipName_ReconnectionAddress, static_cast<int>( ::QBluetoothUuid::ReconnectionAddress), 53},
    {sipName_RecordAccessControlPoint, static_cast<int>( ::QBluetoothUuid::RecordAccessControlPoint), 53},
    {sipName_ReferencePrinting, static_cast<int>( ::QBluetoothUuid::ReferencePrinting), 56},
    {sipName_ReferenceTimeInformation, static_cast<int>( ::QBluetoothUuid::ReferenceTimeInformation), 53},
    {sipName_ReferenceTimeUpdateService, static_cast<int>( ::QBluetoothUuid::ReferenceTimeUpdateService), 56},
    {sipName_ReflectedUI, static_cast<int>( ::QBluetoothUuid::ReflectedUI), 56},
    {sipName_Report, static_cast<int>( ::QBluetoothUuid::Report), 53},
    {sipName_ReportMap, static_cast<int>( ::QBluetoothUuid::ReportMap), 53},
    {sipName_ReportReference, static_cast<int>( ::QBluetoothUuid::ReportReference), 54},
    {sipName_RestingHeartRate, static_cast<int>( ::QBluetoothUuid::RestingHeartRate), 53},
    {sipName_Rfcomm, static_cast<int>( ::QBluetoothUuid::Rfcomm), 55},
    {sipName_RingerControlPoint, static_cast<int>( ::QBluetoothUuid::RingerControlPoint), 53},
    {sipName_RingerSetting, static_cast<int>( ::QBluetoothUuid::RingerSetting), 53},
    {sipName_RunningSpeedAndCadence, static_cast<int>( ::QBluetoothUuid::RunningSpeedAndCadence), 56},
    {sipName_SCControlPoint, static_cast<int>( ::QBluetoothUuid::SCControlPoint), 53},
    {sipName_SIMAccess, static_cast<int>( ::QBluetoothUuid::SIMAccess), 56},
    {sipName_ScanIntervalWindow, static_cast<int>( ::QBluetoothUuid::ScanIntervalWindow), 53},
    {sipName_ScanParameters, static_cast<int>( ::QBluetoothUuid::ScanParameters), 56},
    {sipName_ScanRefresh, static_cast<int>( ::QBluetoothUuid::ScanRefresh), 53},
    {sipName_Sdp, static_cast<int>( ::QBluetoothUuid::Sdp), 55},
    {sipName_SensorLocation, static_cast<int>( ::QBluetoothUuid::SensorLocation), 53},
    {sipName_SerialNumberString, static_cast<int>( ::QBluetoothUuid::SerialNumberString), 53},
    {sipName_SerialPort, static_cast<int>( ::QBluetoothUuid::SerialPort), 56},
    {sipName_ServerCharacteristicConfiguration, static_cast<int>( ::QBluetoothUuid::ServerCharacteristicConfiguration), 54},
    {sipName_ServiceChanged, static_cast<int>( ::QBluetoothUuid::ServiceChanged), 53},
    {sipName_ServiceDiscoveryServer, static_cast<int>( ::QBluetoothUuid::ServiceDiscoveryServer), 56},
    {sipName_SoftwareRevisionString, static_cast<int>( ::QBluetoothUuid::SoftwareRevisionString), 53},
    {sipName_SportTypeForAerobicAnaerobicThresholds, static_cast<int>( ::QBluetoothUuid::SportTypeForAerobicAnaerobicThresholds), 53},
    {sipName_SupportedNewAlertCategory, static_cast<int>( ::QBluetoothUuid::SupportedNewAlertCategory), 53},
    {sipName_SupportedUnreadAlertCategory, static_cast<int>( ::QBluetoothUuid::SupportedUnreadAlertCategory), 53},
    {sipName_Synchronization3D, static_cast<int>( ::QBluetoothUuid::Synchronization3D), 56},
    {sipName_SystemID, static_cast<int>( ::QBluetoothUuid::SystemID), 53},
    {sipName_Tcp, static_cast<int>( ::QBluetoothUuid::Tcp), 55},
    {sipName_TcsAt, static_cast<int>( ::QBluetoothUuid::TcsAt), 55},
    {sipName_TcsBin, static_cast<int>( ::QBluetoothUuid::TcsBin), 55},
    {sipName_Temperature, static_cast<int>( ::QBluetoothUuid::Temperature), 53},
    {sipName_TemperatureMeasurement, static_cast<int>( ::QBluetoothUuid::TemperatureMeasurement), 53},
    {sipName_TemperatureType, static_cast<int>( ::QBluetoothUuid::TemperatureType), 53},
    {sipName_ThreeZoneHeartRateLimits, static_cast<int>( ::QBluetoothUuid::ThreeZoneHeartRateLimits), 53},
    {sipName_TimeAccuracy, static_cast<int>( ::QBluetoothUuid::TimeAccuracy), 53},
    {sipName_TimeSource, static_cast<int>( ::QBluetoothUuid::TimeSource), 53},
    {sipName_TimeUpdateControlPoint, static_cast<int>( ::QBluetoothUuid::TimeUpdateControlPoint), 53},
    {sipName_TimeUpdateState, static_cast<int>( ::QBluetoothUuid::TimeUpdateState), 53},
    {sipName_TimeWithDST, static_cast<int>( ::QBluetoothUuid::TimeWithDST), 53},
    {sipName_TimeZone, static_cast<int>( ::QBluetoothUuid::TimeZone), 53},
    {sipName_TrueWindDirection, static_cast<int>( ::QBluetoothUuid::TrueWindDirection), 53},
    {sipName_TrueWindSpeed, static_cast<int>( ::QBluetoothUuid::TrueWindSpeed), 53},
    {sipName_TwoZoneHeartRateLimits, static_cast<int>( ::QBluetoothUuid::TwoZoneHeartRateLimits), 53},
    {sipName_TxPower, static_cast<int>( ::QBluetoothUuid::TxPower), 56},
    {sipName_TxPowerLevel, static_cast<int>( ::QBluetoothUuid::TxPowerLevel), 53},
    {sipName_UVIndex, static_cast<int>( ::QBluetoothUuid::UVIndex), 53},
    {sipName_UdiCPlain, static_cast<int>( ::QBluetoothUuid::UdiCPlain), 55},
    {sipName_Udp, static_cast<int>( ::QBluetoothUuid::Udp), 55},
    {sipName_UnknownDescriptorType, static_cast<int>( ::QBluetoothUuid::UnknownDescriptorType), 54},
    {sipName_UnreadAlertStatus, static_cast<int>( ::QBluetoothUuid::UnreadAlertStatus), 53},
    {sipName_Upnp, static_cast<int>( ::QBluetoothUuid::Upnp), 55},
    {sipName_UserControlPoint, static_cast<int>( ::QBluetoothUuid::UserControlPoint), 53},
    {sipName_UserData, static_cast<int>( ::QBluetoothUuid::UserData), 56},
    {sipName_UserIndex, static_cast<int>( ::QBluetoothUuid::UserIndex), 53},
    {sipName_VO2Max, static_cast<int>( ::QBluetoothUuid::VO2Max), 53},
    {sipName_ValidRange, static_cast<int>( ::QBluetoothUuid::ValidRange), 54},
    {sipName_VideoDistribution, static_cast<int>( ::QBluetoothUuid::VideoDistribution), 56},
    {sipName_VideoSink, static_cast<int>( ::QBluetoothUuid::VideoSink), 56},
    {sipName_VideoSource, static_cast<int>( ::QBluetoothUuid::VideoSource), 56},
    {sipName_WaistCircumference, static_cast<int>( ::QBluetoothUuid::WaistCircumference), 53},
    {sipName_Weight, static_cast<int>( ::QBluetoothUuid::Weight), 53},
    {sipName_WeightMeasurement, static_cast<int>( ::QBluetoothUuid::WeightMeasurement), 53},
    {sipName_WeightScale, static_cast<int>( ::QBluetoothUuid::WeightScale), 56},
    {sipName_WeightScaleFeature, static_cast<int>( ::QBluetoothUuid::WeightScaleFeature), 53},
    {sipName_WindChill, static_cast<int>( ::QBluetoothUuid::WindChill), 53},
    {sipName_Wsp, static_cast<int>( ::QBluetoothUuid::Wsp), 55},
};

PyDoc_STRVAR(doc_QBluetoothUuid, "\1QBluetoothUuid()\n"
"QBluetoothUuid(int)\n"
"QBluetoothUuid(Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int])\n"
"QBluetoothUuid(str)\n"
"QBluetoothUuid(QBluetoothUuid)\n"
"QBluetoothUuid(QUuid)");


static pyqt5ClassPluginDef plugin_QBluetoothUuid = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothUuid = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothUuid,
        {SIP_NULLPTR},
        &plugin_QBluetoothUuid
    },
    {
        sipNameNr_QBluetoothUuid,
        {0, 0, 1},
        8, methods_QBluetoothUuid,
        266, enummembers_QBluetoothUuid,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothUuid,
    -1,
    -1,
    supers_QBluetoothUuid,
    slots_QBluetoothUuid,
    init_type_QBluetoothUuid,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothUuid,
    assign_QBluetoothUuid,
    array_QBluetoothUuid,
    copy_QBluetoothUuid,
    release_QBluetoothUuid,
    cast_QBluetoothUuid,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothtransferrequest.sip"
#include <qbluetoothtransferrequest.h>
#line 2778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 2782 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 2785 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QBluetoothTransferRequest_attribute, "attribute(self, QBluetoothTransferRequest.Attribute, defaultValue: Any = None) -> Any");

extern "C" {static PyObject *meth_QBluetoothTransferRequest_attribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferRequest_attribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothTransferRequest::Attribute a0;
        const  ::QVariant& a1def = QVariant();
        const  ::QVariant* a1 = &a1def;
        int a1State = 0;
        const  ::QBluetoothTransferRequest *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J1", &sipSelf, sipType_QBluetoothTransferRequest, &sipCpp, sipType_QBluetoothTransferRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->attribute(a0,*a1));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferRequest, sipName_attribute, doc_QBluetoothTransferRequest_attribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferRequest_setAttribute, "setAttribute(self, QBluetoothTransferRequest.Attribute, Any)");

extern "C" {static PyObject *meth_QBluetoothTransferRequest_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferRequest_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothTransferRequest::Attribute a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QBluetoothTransferRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QBluetoothTransferRequest, &sipCpp, sipType_QBluetoothTransferRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferRequest, sipName_setAttribute, doc_QBluetoothTransferRequest_setAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferRequest_address, "address(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothTransferRequest_address(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferRequest_address(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothTransferRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothTransferRequest, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->address());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferRequest, sipName_address, doc_QBluetoothTransferRequest_address);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QBluetoothTransferRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothTransferRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothTransferRequest *sipCpp = reinterpret_cast< ::QBluetoothTransferRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothTransferRequest));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothTransferRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothTransferRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothTransferRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothTransferRequest, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothTransferRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothTransferRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothTransferRequest *sipCpp = reinterpret_cast< ::QBluetoothTransferRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothTransferRequest));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothTransferRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothTransferRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothTransferRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothTransferRequest, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothTransferRequest(void *, int);}
static void release_QBluetoothTransferRequest(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothTransferRequest *>(sipCppV);
}


extern "C" {static void assign_QBluetoothTransferRequest(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothTransferRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothTransferRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothTransferRequest *>(sipSrc);
}


extern "C" {static void *array_QBluetoothTransferRequest(SIP_SSIZE_T);}
static void *array_QBluetoothTransferRequest(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothTransferRequest[sipNrElem];
}


extern "C" {static void *copy_QBluetoothTransferRequest(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothTransferRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothTransferRequest(reinterpret_cast<const  ::QBluetoothTransferRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothTransferRequest(sipSimpleWrapper *);}
static void dealloc_QBluetoothTransferRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothTransferRequest(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothTransferRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothTransferRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothTransferRequest *sipCpp = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress& a0def = QBluetoothAddress();
        const  ::QBluetoothAddress* a0 = &a0def;

        static const char *sipKwdList[] = {
            sipName_address,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J9", sipType_QBluetoothAddress, &a0))
        {
            sipCpp = new  ::QBluetoothTransferRequest(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothTransferRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBluetoothTransferRequest, &a0))
        {
            sipCpp = new  ::QBluetoothTransferRequest(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothTransferRequest[] = {
    {(void *)slot_QBluetoothTransferRequest___eq__, eq_slot},
    {(void *)slot_QBluetoothTransferRequest___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QBluetoothTransferRequest[] = {
    {SIP_MLNAME_CAST(sipName_address), meth_QBluetoothTransferRequest_address, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferRequest_address)},
    {SIP_MLNAME_CAST(sipName_attribute), SIP_MLMETH_CAST(meth_QBluetoothTransferRequest_attribute), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothTransferRequest_attribute)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QBluetoothTransferRequest_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferRequest_setAttribute)}
};

static sipEnumMemberDef enummembers_QBluetoothTransferRequest[] = {
    {sipName_DescriptionAttribute, static_cast<int>( ::QBluetoothTransferRequest::DescriptionAttribute), 51},
    {sipName_LengthAttribute, static_cast<int>( ::QBluetoothTransferRequest::LengthAttribute), 51},
    {sipName_NameAttribute, static_cast<int>( ::QBluetoothTransferRequest::NameAttribute), 51},
    {sipName_TimeAttribute, static_cast<int>( ::QBluetoothTransferRequest::TimeAttribute), 51},
    {sipName_TypeAttribute, static_cast<int>( ::QBluetoothTransferRequest::TypeAttribute), 51},
};

PyDoc_STRVAR(doc_QBluetoothTransferRequest, "\1QBluetoothTransferRequest(address: QBluetoothAddress = QBluetoothAddress())\n"
"QBluetoothTransferRequest(QBluetoothTransferRequest)");


static pyqt5ClassPluginDef plugin_QBluetoothTransferRequest = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothTransferRequest = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothTransferRequest,
        {SIP_NULLPTR},
        &plugin_QBluetoothTransferRequest
    },
    {
        sipNameNr_QBluetoothTransferRequest,
        {0, 0, 1},
        3, methods_QBluetoothTransferRequest,
        5, enummembers_QBluetoothTransferRequest,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothTransferRequest,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetoothTransferRequest,
    init_type_QBluetoothTransferRequest,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothTransferRequest,
    assign_QBluetoothTransferRequest,
    array_QBluetoothTransferRequest,
    copy_QBluetoothTransferRequest,
    release_QBluetoothTransferRequest,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothtransferreply.sip"
#include <qbluetoothtransferreply.h>
#line 3111 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 3115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothtransferrequest.sip"
#include <qbluetoothtransferrequest.h>
#line 3118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothtransfermanager.sip"
#include <qbluetoothtransfermanager.h>
#line 3121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 3124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 3127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 3139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 3145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 3154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 3160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 3163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 3166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


class sipQBluetoothTransferReply : public  ::QBluetoothTransferReply
{
public:
    sipQBluetoothTransferReply( ::QObject*);
    virtual ~sipQBluetoothTransferReply();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString errorString() const SIP_OVERRIDE;
     ::QBluetoothTransferReply::TransferError error() const SIP_OVERRIDE;
    bool isRunning() const SIP_OVERRIDE;
    bool isFinished() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothTransferReply(const sipQBluetoothTransferReply &);
    sipQBluetoothTransferReply &operator = (const sipQBluetoothTransferReply &);

    char sipPyMethods[11];
};

sipQBluetoothTransferReply::sipQBluetoothTransferReply( ::QObject*a0):  ::QBluetoothTransferReply(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothTransferReply::~sipQBluetoothTransferReply()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothTransferReply::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothTransferReply);

    return  ::QBluetoothTransferReply::metaObject();
}

int sipQBluetoothTransferReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothTransferReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothTransferReply,_c,_id,_a);

    return _id;
}

void *sipQBluetoothTransferReply::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothTransferReply, _clname, &sipCpp) ? sipCpp :  ::QBluetoothTransferReply::qt_metacast(_clname));
}

 ::QString sipQBluetoothTransferReply::errorString() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QBluetoothTransferReply,sipName_errorString);

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH_QtBluetooth_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_16(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QBluetoothTransferReply::TransferError sipQBluetoothTransferReply::error() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QBluetoothTransferReply,sipName_error);

    if (!sipMeth)
        return  ::QBluetoothTransferReply::NoError;

    extern  ::QBluetoothTransferReply::TransferError sipVH_QtBluetooth_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_15(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBluetoothTransferReply::isRunning() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QBluetoothTransferReply,sipName_isRunning);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtBluetooth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_10(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBluetoothTransferReply::isFinished() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QBluetoothTransferReply,sipName_isFinished);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtBluetooth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_10(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBluetoothTransferReply::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothTransferReply::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothTransferReply::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothTransferReply::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQBluetoothTransferReply::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothTransferReply::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothTransferReply::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothTransferReply::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothTransferReply::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothTransferReply::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothTransferReply::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothTransferReply::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothTransferReply::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothTransferReply::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothTransferReply_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QBluetoothTransferReply, sipName_isFinished);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_isFinished, doc_QBluetoothTransferReply_isFinished);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothTransferReply_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QBluetoothTransferReply, sipName_isRunning);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_isRunning, doc_QBluetoothTransferReply_isRunning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_manager, "manager(self) -> QBluetoothTransferManager");

extern "C" {static PyObject *meth_QBluetoothTransferReply_manager(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_manager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp))
        {
             ::QBluetoothTransferManager*sipRes;

            sipRes = sipCpp->manager();

            return sipConvertFromType(sipRes,sipType_QBluetoothTransferManager,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_manager, doc_QBluetoothTransferReply_manager);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_error, "error(self) -> QBluetoothTransferReply.TransferError");

extern "C" {static PyObject *meth_QBluetoothTransferReply_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp))
        {
             ::QBluetoothTransferReply::TransferError sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QBluetoothTransferReply, sipName_error);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothTransferReply_TransferError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_error, doc_QBluetoothTransferReply_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QBluetoothTransferReply_errorString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QBluetoothTransferReply, sipName_errorString);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_errorString, doc_QBluetoothTransferReply_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_request, "request(self) -> QBluetoothTransferRequest");

extern "C" {static PyObject *meth_QBluetoothTransferReply_request(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_request(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp))
        {
             ::QBluetoothTransferRequest*sipRes;

            sipRes = new  ::QBluetoothTransferRequest(sipCpp->request());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothTransferRequest,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_request, doc_QBluetoothTransferReply_request);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_abort, "abort(self)");

extern "C" {static PyObject *meth_QBluetoothTransferReply_abort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_abort, doc_QBluetoothTransferReply_abort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_setManager, "setManager(self, QBluetoothTransferManager)");

extern "C" {static PyObject *meth_QBluetoothTransferReply_setManager(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_setManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothTransferManager* a0;
         ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp, sipType_QBluetoothTransferManager, &a0))
        {
            sipCpp->setManager(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_setManager, doc_QBluetoothTransferReply_setManager);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothTransferReply_setRequest, "setRequest(self, QBluetoothTransferRequest)");

extern "C" {static PyObject *meth_QBluetoothTransferReply_setRequest(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferReply_setRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothTransferRequest* a0;
         ::QBluetoothTransferReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QBluetoothTransferReply, &sipCpp, sipType_QBluetoothTransferRequest, &a0))
        {
            sipCpp->setRequest(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferReply, sipName_setRequest, doc_QBluetoothTransferReply_setRequest);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothTransferReply(void *, const sipTypeDef *);}
static void *cast_QBluetoothTransferReply(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothTransferReply *sipCpp = reinterpret_cast< ::QBluetoothTransferReply *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothTransferReply(void *, int);}
static void release_QBluetoothTransferReply(void *sipCppV, int)
{
     ::QBluetoothTransferReply *sipCpp = reinterpret_cast< ::QBluetoothTransferReply *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothTransferReply(sipSimpleWrapper *);}
static void dealloc_QBluetoothTransferReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothTransferReply *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothTransferReply(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothTransferReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothTransferReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothTransferReply *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothTransferReply(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothTransferReply[] = {{7, 0, 1}};


static PyMethodDef methods_QBluetoothTransferReply[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QBluetoothTransferReply_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_abort)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothTransferReply_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QBluetoothTransferReply_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_errorString)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QBluetoothTransferReply_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_isFinished)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QBluetoothTransferReply_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_isRunning)},
    {SIP_MLNAME_CAST(sipName_manager), meth_QBluetoothTransferReply_manager, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_manager)},
    {SIP_MLNAME_CAST(sipName_request), meth_QBluetoothTransferReply_request, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_request)},
    {SIP_MLNAME_CAST(sipName_setManager), meth_QBluetoothTransferReply_setManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_setManager)},
    {SIP_MLNAME_CAST(sipName_setRequest), meth_QBluetoothTransferReply_setRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferReply_setRequest)}
};

static sipEnumMemberDef enummembers_QBluetoothTransferReply[] = {
    {sipName_FileNotFoundError, static_cast<int>( ::QBluetoothTransferReply::FileNotFoundError), 49},
    {sipName_HostNotFoundError, static_cast<int>( ::QBluetoothTransferReply::HostNotFoundError), 49},
    {sipName_IODeviceNotReadableError, static_cast<int>( ::QBluetoothTransferReply::IODeviceNotReadableError), 49},
    {sipName_NoError, static_cast<int>( ::QBluetoothTransferReply::NoError), 49},
    {sipName_ResourceBusyError, static_cast<int>( ::QBluetoothTransferReply::ResourceBusyError), 49},
    {sipName_SessionError, static_cast<int>( ::QBluetoothTransferReply::SessionError), 49},
    {sipName_UnknownError, static_cast<int>( ::QBluetoothTransferReply::UnknownError), 49},
    {sipName_UserCanceledTransferError, static_cast<int>( ::QBluetoothTransferReply::UserCanceledTransferError), 49},
};

PyDoc_STRVAR(doc_QBluetoothTransferReply, "\1QBluetoothTransferReply(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothTransferReply[] = {
    {"transferProgress(qint64,qint64)", "\1transferProgress(self, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished(QBluetoothTransferReply*)", "\1finished(self, QBluetoothTransferReply)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QBluetoothTransferReply::TransferError)", "\1error(self, QBluetoothTransferReply.TransferError)", &methods_QBluetoothTransferReply[1], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QBluetoothTransferReply = {
    & ::QBluetoothTransferReply::staticMetaObject,
    0,
    signals_QBluetoothTransferReply,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothTransferReply = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothTransferReply,
        {SIP_NULLPTR},
        &plugin_QBluetoothTransferReply
    },
    {
        sipNameNr_QBluetoothTransferReply,
        {0, 0, 1},
        9, methods_QBluetoothTransferReply,
        8, enummembers_QBluetoothTransferReply,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothTransferReply,
    -1,
    -1,
    supers_QBluetoothTransferReply,
    SIP_NULLPTR,
    init_type_QBluetoothTransferReply,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothTransferReply,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBluetoothTransferReply,
    cast_QBluetoothTransferReply,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothtransfermanager.sip"
#include <qbluetoothtransfermanager.h>
#line 3865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 3869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothtransferreply.sip"
#include <qbluetoothtransferreply.h>
#line 3872 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothtransferrequest.sip"
#include <qbluetoothtransferrequest.h>
#line 3875 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 3878 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 3881 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3884 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3887 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3890 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 3893 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 3896 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3899 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 3902 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3905 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3908 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 3911 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3914 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 3917 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 3920 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 3923 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


class sipQBluetoothTransferManager : public  ::QBluetoothTransferManager
{
public:
    sipQBluetoothTransferManager( ::QObject*);
    virtual ~sipQBluetoothTransferManager();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothTransferManager(const sipQBluetoothTransferManager &);
    sipQBluetoothTransferManager &operator = (const sipQBluetoothTransferManager &);

    char sipPyMethods[7];
};

sipQBluetoothTransferManager::sipQBluetoothTransferManager( ::QObject*a0):  ::QBluetoothTransferManager(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothTransferManager::~sipQBluetoothTransferManager()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothTransferManager::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothTransferManager);

    return  ::QBluetoothTransferManager::metaObject();
}

int sipQBluetoothTransferManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothTransferManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothTransferManager,_c,_id,_a);

    return _id;
}

void *sipQBluetoothTransferManager::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothTransferManager, _clname, &sipCpp) ? sipCpp :  ::QBluetoothTransferManager::qt_metacast(_clname));
}

bool sipQBluetoothTransferManager::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothTransferManager::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothTransferManager::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothTransferManager::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQBluetoothTransferManager::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothTransferManager::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothTransferManager::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothTransferManager::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothTransferManager::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothTransferManager::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothTransferManager::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothTransferManager::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothTransferManager::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothTransferManager::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothTransferManager_put, "put(self, QBluetoothTransferRequest, QIODevice) -> QBluetoothTransferReply");

extern "C" {static PyObject *meth_QBluetoothTransferManager_put(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothTransferManager_put(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothTransferRequest* a0;
         ::QIODevice* a1;
         ::QBluetoothTransferManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QBluetoothTransferManager, &sipCpp, sipType_QBluetoothTransferRequest, &a0, sipType_QIODevice, &a1))
        {
             ::QBluetoothTransferReply*sipRes;

            sipRes = sipCpp->put(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QBluetoothTransferReply,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothTransferManager, sipName_put, doc_QBluetoothTransferManager_put);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothTransferManager(void *, const sipTypeDef *);}
static void *cast_QBluetoothTransferManager(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothTransferManager *sipCpp = reinterpret_cast< ::QBluetoothTransferManager *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothTransferManager(void *, int);}
static void release_QBluetoothTransferManager(void *sipCppV, int)
{
     ::QBluetoothTransferManager *sipCpp = reinterpret_cast< ::QBluetoothTransferManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothTransferManager(sipSimpleWrapper *);}
static void dealloc_QBluetoothTransferManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothTransferManager *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothTransferManager(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothTransferManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothTransferManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothTransferManager *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothTransferManager(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothTransferManager[] = {{7, 0, 1}};


static PyMethodDef methods_QBluetoothTransferManager[] = {
    {SIP_MLNAME_CAST(sipName_put), meth_QBluetoothTransferManager_put, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothTransferManager_put)}
};

PyDoc_STRVAR(doc_QBluetoothTransferManager, "\1QBluetoothTransferManager(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothTransferManager[] = {
    {"finished(QBluetoothTransferReply*)", "\1finished(self, QBluetoothTransferReply)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QBluetoothTransferManager = {
    & ::QBluetoothTransferManager::staticMetaObject,
    0,
    signals_QBluetoothTransferManager,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothTransferManager = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothTransferManager,
        {SIP_NULLPTR},
        &plugin_QBluetoothTransferManager
    },
    {
        sipNameNr_QBluetoothTransferManager,
        {0, 0, 1},
        1, methods_QBluetoothTransferManager,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothTransferManager,
    -1,
    -1,
    supers_QBluetoothTransferManager,
    SIP_NULLPTR,
    init_type_QBluetoothTransferManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothTransferManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBluetoothTransferManager,
    cast_QBluetoothTransferManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothsocket.sip"
#include <qbluetoothsocket.h>
#line 4288 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothserviceinfo.sip"
#include <qbluetoothserviceinfo.h>
#line 4292 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 4295 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 4298 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 4301 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 4304 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 4307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 4310 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 4313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 4316 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4322 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 4328 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4331 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4334 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 4337 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 4340 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 4343 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 4346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 4349 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 4352 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


class sipQBluetoothSocket : public  ::QBluetoothSocket
{
public:
    sipQBluetoothSocket( ::QBluetoothServiceInfo::Protocol, ::QObject*);
    sipQBluetoothSocket( ::QObject*);
    virtual ~sipQBluetoothSocket();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothSocket(const sipQBluetoothSocket &);
    sipQBluetoothSocket &operator = (const sipQBluetoothSocket &);

    char sipPyMethods[23];
};

sipQBluetoothSocket::sipQBluetoothSocket( ::QBluetoothServiceInfo::Protocol a0, ::QObject*a1):  ::QBluetoothSocket(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothSocket::sipQBluetoothSocket( ::QObject*a0):  ::QBluetoothSocket(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothSocket::~sipQBluetoothSocket()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothSocket::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothSocket);

    return  ::QBluetoothSocket::metaObject();
}

int sipQBluetoothSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothSocket,_c,_id,_a);

    return _id;
}

void *sipQBluetoothSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothSocket, _clname, &sipCpp) ? sipCpp :  ::QBluetoothSocket::qt_metacast(_clname));
}

void sipQBluetoothSocket::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothSocket::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothSocket::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothSocket::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothSocket::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothSocket::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothSocket::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothSocket::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQBluetoothSocket::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothSocket::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QBluetoothSocket::isSequential();

    extern bool sipVH_QtBluetooth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_10(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QBluetoothSocket::open(a0);

    extern bool sipVH_QtBluetooth_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtBluetooth_14(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QBluetoothSocket::close();
        return;
    }

    extern void sipVH_QtBluetooth_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtBluetooth_13(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQBluetoothSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QBluetoothSocket::pos();

    extern  ::qint64 sipVH_QtBluetooth_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_11(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQBluetoothSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QBluetoothSocket::size();

    extern  ::qint64 sipVH_QtBluetooth_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_11(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QBluetoothSocket::seek(a0);

    extern bool sipVH_QtBluetooth_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtBluetooth_12(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QBluetoothSocket::atEnd();

    extern bool sipVH_QtBluetooth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_10(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QBluetoothSocket::reset();

    extern bool sipVH_QtBluetooth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_10(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQBluetoothSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QBluetoothSocket::bytesAvailable();

    extern  ::qint64 sipVH_QtBluetooth_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_11(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQBluetoothSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QBluetoothSocket::bytesToWrite();

    extern  ::qint64 sipVH_QtBluetooth_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_11(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QBluetoothSocket::canReadLine();

    extern bool sipVH_QtBluetooth_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtBluetooth_10(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQBluetoothSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QBluetoothSocket::waitForReadyRead(a0);

    extern bool sipVH_QtBluetooth_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtBluetooth_9(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QBluetoothSocket::waitForBytesWritten(a0);

    extern bool sipVH_QtBluetooth_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtBluetooth_9(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQBluetoothSocket::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_readData);

    if (!sipMeth)
        return  ::QBluetoothSocket::readData(a0,a1);

    extern  ::qint64 sipVH_QtBluetooth_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtBluetooth_8(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQBluetoothSocket::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QBluetoothSocket::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtBluetooth_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtBluetooth_7(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQBluetoothSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QBluetoothSocket::writeData(a0,a1);

    extern  ::qint64 sipVH_QtBluetooth_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtBluetooth_6(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QBluetoothSocket_abort, "abort(self)");

extern "C" {static PyObject *meth_QBluetoothSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_abort, doc_QBluetoothSocket_abort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_close, "close(self)");

extern "C" {static PyObject *meth_QBluetoothSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QBluetoothSocket::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_close, doc_QBluetoothSocket_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothSocket_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBluetoothSocket::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_isSequential, doc_QBluetoothSocket_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBluetoothSocket::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_bytesAvailable, doc_QBluetoothSocket_bytesAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBluetoothSocket::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_bytesToWrite, doc_QBluetoothSocket_bytesToWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QBluetoothSocket::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_canReadLine, doc_QBluetoothSocket_canReadLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_connectToService, "connectToService(self, QBluetoothServiceInfo, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
"connectToService(self, QBluetoothAddress, QBluetoothUuid, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
"connectToService(self, QBluetoothAddress, int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QBluetoothSocket_connectToService(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_connectToService(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo* a0;
         ::QIODevice::OpenMode a1def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QBluetoothSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothServiceInfo, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToService(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QBluetoothAddress* a0;
        const  ::QBluetoothUuid* a1;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QBluetoothSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9|J1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothAddress, &a0, sipType_QBluetoothUuid, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToService(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QBluetoothAddress* a0;
         ::quint16 a1;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QBluetoothSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9t|J1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothAddress, &a0, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToService(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_connectToService, doc_QBluetoothSocket_connectToService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_disconnectFromService, "disconnectFromService(self)");

extern "C" {static PyObject *meth_QBluetoothSocket_disconnectFromService(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_disconnectFromService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disconnectFromService();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_disconnectFromService, doc_QBluetoothSocket_disconnectFromService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_localName, "localName(self) -> str");

extern "C" {static PyObject *meth_QBluetoothSocket_localName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_localName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->localName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_localName, doc_QBluetoothSocket_localName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_localAddress, "localAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothSocket_localAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_localAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->localAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_localAddress, doc_QBluetoothSocket_localAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_localPort, "localPort(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_localPort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_localPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->localPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_localPort, doc_QBluetoothSocket_localPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_peerName, "peerName(self) -> str");

extern "C" {static PyObject *meth_QBluetoothSocket_peerName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_peerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->peerName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_peerName, doc_QBluetoothSocket_peerName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_peerAddress, "peerAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothSocket_peerAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_peerAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->peerAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_peerAddress, doc_QBluetoothSocket_peerAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_peerPort, "peerPort(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_peerPort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_peerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->peerPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_peerPort, doc_QBluetoothSocket_peerPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_setSocketDescriptor, "setSocketDescriptor(self, int, QBluetoothServiceInfo.Protocol, state: QBluetoothSocket.SocketState = QBluetoothSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QBluetoothSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBluetoothServiceInfo::Protocol a1;
         ::QBluetoothSocket::SocketState a2 = QBluetoothSocket::ConnectedState;
         ::QIODevice::OpenMode a3def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a3 = &a3def;
        int a3State = 0;
         ::QBluetoothSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiE|EJ1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, &a0, sipType_QBluetoothServiceInfo_Protocol, &a1, sipType_QBluetoothSocket_SocketState, &a2, sipType_QIODevice_OpenMode, &a3, &a3State))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(a0,a1,a2,*a3);
            sipReleaseType(a3,sipType_QIODevice_OpenMode,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_setSocketDescriptor, doc_QBluetoothSocket_setSocketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_socketDescriptor, "socketDescriptor(self) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->socketDescriptor();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_socketDescriptor, doc_QBluetoothSocket_socketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_socketType, "socketType(self) -> QBluetoothServiceInfo.Protocol");

extern "C" {static PyObject *meth_QBluetoothSocket_socketType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_socketType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QBluetoothServiceInfo::Protocol sipRes;

            sipRes = sipCpp->socketType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothServiceInfo_Protocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_socketType, doc_QBluetoothSocket_socketType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_state, "state(self) -> QBluetoothSocket.SocketState");

extern "C" {static PyObject *meth_QBluetoothSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QBluetoothSocket::SocketState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothSocket_SocketState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_state, doc_QBluetoothSocket_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_error, "error(self) -> QBluetoothSocket.SocketError");

extern "C" {static PyObject *meth_QBluetoothSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QBluetoothSocket::SocketError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_error, doc_QBluetoothSocket_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QBluetoothSocket_errorString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_errorString, doc_QBluetoothSocket_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QBluetoothSocket_readData(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QBluetoothSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 99 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QBluetoothSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 5517 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_readData, doc_QBluetoothSocket_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QBluetoothSocket_writeData(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QBluetoothSocket, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QBluetoothSocket::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_writeData, doc_QBluetoothSocket_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_setSocketState, "setSocketState(self, QBluetoothSocket.SocketState)");

extern "C" {static PyObject *meth_QBluetoothSocket_setSocketState(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_setSocketState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothSocket::SocketState a0;
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothSocket_SocketState, &a0))
        {
            sipCpp->setSocketState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_setSocketState, doc_QBluetoothSocket_setSocketState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_setSocketError, "setSocketError(self, QBluetoothSocket.SocketError)");

extern "C" {static PyObject *meth_QBluetoothSocket_setSocketError(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_setSocketError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothSocket::SocketError a0;
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothSocket_SocketError, &a0))
        {
            sipCpp->setSocketError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_setSocketError, doc_QBluetoothSocket_setSocketError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_doDeviceDiscovery, "doDeviceDiscovery(self, QBluetoothServiceInfo, Union[QIODevice.OpenMode, QIODevice.OpenModeFlag])");

extern "C" {static PyObject *meth_QBluetoothSocket_doDeviceDiscovery(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_doDeviceDiscovery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo* a0;
         ::QIODevice::OpenMode* a1;
        int a1State = 0;
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetoothServiceInfo, &a0, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->doDeviceDiscovery(*a0,*a1);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_doDeviceDiscovery, doc_QBluetoothSocket_doDeviceDiscovery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_setPreferredSecurityFlags, "setPreferredSecurityFlags(self, Union[QBluetooth.SecurityFlags, QBluetooth.Security])");

extern "C" {static PyObject *meth_QBluetoothSocket_setPreferredSecurityFlags(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_setPreferredSecurityFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetooth::SecurityFlags* a0;
        int a0State = 0;
         ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothSocket, &sipCpp, sipType_QBluetooth_SecurityFlags, &a0, &a0State))
        {
            sipCpp->setPreferredSecurityFlags(*a0);
            sipReleaseType(a0,sipType_QBluetooth_SecurityFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_setPreferredSecurityFlags, doc_QBluetoothSocket_setPreferredSecurityFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothSocket_preferredSecurityFlags, "preferredSecurityFlags(self) -> QBluetooth.SecurityFlags");

extern "C" {static PyObject *meth_QBluetoothSocket_preferredSecurityFlags(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothSocket_preferredSecurityFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothSocket, &sipCpp))
        {
             ::QBluetooth::SecurityFlags*sipRes;

            sipRes = new  ::QBluetooth::SecurityFlags(sipCpp->preferredSecurityFlags());

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_SecurityFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothSocket, sipName_preferredSecurityFlags, doc_QBluetoothSocket_preferredSecurityFlags);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothSocket(void *, const sipTypeDef *);}
static void *cast_QBluetoothSocket(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothSocket *sipCpp = reinterpret_cast< ::QBluetoothSocket *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothSocket(void *, int);}
static void release_QBluetoothSocket(void *sipCppV, int)
{
     ::QBluetoothSocket *sipCpp = reinterpret_cast< ::QBluetoothSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothSocket(sipSimpleWrapper *);}
static void dealloc_QBluetoothSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothSocket *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothSocket(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothSocket *sipCpp = SIP_NULLPTR;

    {
         ::QBluetoothServiceInfo::Protocol a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QBluetoothServiceInfo_Protocol, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothSocket(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothSocket(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothSocket[] = {{4, 0, 1}};


static PyMethodDef methods_QBluetoothSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QBluetoothSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_abort)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QBluetoothSocket_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QBluetoothSocket_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QBluetoothSocket_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QBluetoothSocket_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_close)},
    {SIP_MLNAME_CAST(sipName_connectToService), SIP_MLMETH_CAST(meth_QBluetoothSocket_connectToService), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothSocket_connectToService)},
    {SIP_MLNAME_CAST(sipName_disconnectFromService), meth_QBluetoothSocket_disconnectFromService, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_disconnectFromService)},
    {SIP_MLNAME_CAST(sipName_doDeviceDiscovery), meth_QBluetoothSocket_doDeviceDiscovery, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_doDeviceDiscovery)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothSocket_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QBluetoothSocket_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_errorString)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QBluetoothSocket_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_isSequential)},
    {SIP_MLNAME_CAST(sipName_localAddress), meth_QBluetoothSocket_localAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_localAddress)},
    {SIP_MLNAME_CAST(sipName_localName), meth_QBluetoothSocket_localName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_localName)},
    {SIP_MLNAME_CAST(sipName_localPort), meth_QBluetoothSocket_localPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_localPort)},
    {SIP_MLNAME_CAST(sipName_peerAddress), meth_QBluetoothSocket_peerAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_peerAddress)},
    {SIP_MLNAME_CAST(sipName_peerName), meth_QBluetoothSocket_peerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_peerName)},
    {SIP_MLNAME_CAST(sipName_peerPort), meth_QBluetoothSocket_peerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_peerPort)},
    {SIP_MLNAME_CAST(sipName_preferredSecurityFlags), meth_QBluetoothSocket_preferredSecurityFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_preferredSecurityFlags)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QBluetoothSocket_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_readData)},
    {SIP_MLNAME_CAST(sipName_setPreferredSecurityFlags), meth_QBluetoothSocket_setPreferredSecurityFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_setPreferredSecurityFlags)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), SIP_MLMETH_CAST(meth_QBluetoothSocket_setSocketDescriptor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothSocket_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_setSocketError), meth_QBluetoothSocket_setSocketError, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_setSocketError)},
    {SIP_MLNAME_CAST(sipName_setSocketState), meth_QBluetoothSocket_setSocketState, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_setSocketState)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QBluetoothSocket_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketType), meth_QBluetoothSocket_socketType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_socketType)},
    {SIP_MLNAME_CAST(sipName_state), meth_QBluetoothSocket_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_state)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QBluetoothSocket_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothSocket_writeData)}
};

static sipEnumMemberDef enummembers_QBluetoothSocket[] = {
    {sipName_BoundState, static_cast<int>( ::QBluetoothSocket::BoundState), 46},
    {sipName_ClosingState, static_cast<int>( ::QBluetoothSocket::ClosingState), 46},
    {sipName_ConnectedState, static_cast<int>( ::QBluetoothSocket::ConnectedState), 46},
    {sipName_ConnectingState, static_cast<int>( ::QBluetoothSocket::ConnectingState), 46},
    {sipName_HostNotFoundError, static_cast<int>( ::QBluetoothSocket::HostNotFoundError), 45},
    {sipName_ListeningState, static_cast<int>( ::QBluetoothSocket::ListeningState), 46},
    {sipName_NetworkError, static_cast<int>( ::QBluetoothSocket::NetworkError), 45},
    {sipName_NoSocketError, static_cast<int>( ::QBluetoothSocket::NoSocketError), 45},
    {sipName_OperationError, static_cast<int>( ::QBluetoothSocket::OperationError), 45},
    {sipName_RemoteHostClosedError, static_cast<int>( ::QBluetoothSocket::RemoteHostClosedError), 45},
    {sipName_ServiceLookupState, static_cast<int>( ::QBluetoothSocket::ServiceLookupState), 46},
    {sipName_ServiceNotFoundError, static_cast<int>( ::QBluetoothSocket::ServiceNotFoundError), 45},
    {sipName_UnconnectedState, static_cast<int>( ::QBluetoothSocket::UnconnectedState), 46},
    {sipName_UnknownSocketError, static_cast<int>( ::QBluetoothSocket::UnknownSocketError), 45},
    {sipName_UnsupportedProtocolError, static_cast<int>( ::QBluetoothSocket::UnsupportedProtocolError), 45},
};

PyDoc_STRVAR(doc_QBluetoothSocket, "\1QBluetoothSocket(QBluetoothServiceInfo.Protocol, parent: QObject = None)\n"
"QBluetoothSocket(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothSocket[] = {
    {"stateChanged(QBluetoothSocket::SocketState)", "\1stateChanged(self, QBluetoothSocket.SocketState)", SIP_NULLPTR, SIP_NULLPTR},
    {"disconnected()", "\1disconnected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"connected()", "\1connected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QBluetoothSocket::SocketError)", "\1error(self, QBluetoothSocket.SocketError)", &methods_QBluetoothSocket[8], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QBluetoothSocket = {
    & ::QBluetoothSocket::staticMetaObject,
    0,
    signals_QBluetoothSocket,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothSocket = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothSocket,
        {SIP_NULLPTR},
        &plugin_QBluetoothSocket
    },
    {
        sipNameNr_QBluetoothSocket,
        {0, 0, 1},
        27, methods_QBluetoothSocket,
        15, enummembers_QBluetoothSocket,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothSocket,
    -1,
    -1,
    supers_QBluetoothSocket,
    SIP_NULLPTR,
    init_type_QBluetoothSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBluetoothSocket,
    cast_QBluetoothSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothserviceinfo.sip"
#include <qbluetoothserviceinfo.h>
#line 5925 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5929 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 5932 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 5935 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qpybluetooth_qlist.sip"
#include <qbluetoothserviceinfo.h>
#line 5938 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 5941 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 5944 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qpybluetooth_qlist.sip"
#include <qlist.h>
#line 5947 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 5950 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QBluetoothServiceInfo_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_isValid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_isValid, doc_QBluetoothServiceInfo_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_isComplete, "isComplete(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_isComplete(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_isComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isComplete();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_isComplete, doc_QBluetoothServiceInfo_isComplete);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setDevice, "setDevice(self, QBluetoothDeviceInfo)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo* a0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QBluetoothDeviceInfo, &a0))
        {
            sipCpp->setDevice(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setDevice, doc_QBluetoothServiceInfo_setDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_device, "device(self) -> QBluetoothDeviceInfo");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_device(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
             ::QBluetoothDeviceInfo*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo(sipCpp->device());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_device, doc_QBluetoothServiceInfo_device);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_attribute, "attribute(self, int) -> Any");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_attribute(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_attribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->attribute(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_attribute, doc_QBluetoothServiceInfo_attribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_attributes, "attributes(self) -> List[int]");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_attributes(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
             ::QList< ::quint16>*sipRes;

            sipRes = new  ::QList< ::quint16>(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QList_1600,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_attributes, doc_QBluetoothServiceInfo_attributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_contains, "contains(self, int) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_contains(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_contains, doc_QBluetoothServiceInfo_contains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_removeAttribute, "removeAttribute(self, int)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_removeAttribute(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_removeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0))
        {
            sipCpp->removeAttribute(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_removeAttribute, doc_QBluetoothServiceInfo_removeAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_socketProtocol, "socketProtocol(self) -> QBluetoothServiceInfo.Protocol");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_socketProtocol(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_socketProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
             ::QBluetoothServiceInfo::Protocol sipRes;

            sipRes = sipCpp->socketProtocol();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothServiceInfo_Protocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_socketProtocol, doc_QBluetoothServiceInfo_socketProtocol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_protocolServiceMultiplexer, "protocolServiceMultiplexer(self) -> int");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_protocolServiceMultiplexer(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_protocolServiceMultiplexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->protocolServiceMultiplexer();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_protocolServiceMultiplexer, doc_QBluetoothServiceInfo_protocolServiceMultiplexer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serverChannel, "serverChannel(self) -> int");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serverChannel(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serverChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->serverChannel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serverChannel, doc_QBluetoothServiceInfo_serverChannel);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_protocolDescriptor, "protocolDescriptor(self, QBluetoothUuid.ProtocolUuid) -> List[Any]");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_protocolDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_protocolDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothUuid::ProtocolUuid a0;
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QBluetoothUuid_ProtocolUuid, &a0))
        {
             ::QBluetoothServiceInfo::Sequence*sipRes;

            sipRes = new  ::QBluetoothServiceInfo::Sequence(sipCpp->protocolDescriptor(a0));

            return sipConvertFromNewType(sipRes,sipType_QBluetoothServiceInfo_Sequence,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_protocolDescriptor, doc_QBluetoothServiceInfo_protocolDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_isRegistered, "isRegistered(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_isRegistered(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_isRegistered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRegistered();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_isRegistered, doc_QBluetoothServiceInfo_isRegistered);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_registerService, "registerService(self, localAdapter: QBluetoothAddress = QBluetoothAddress()) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_registerService(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_registerService(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress& a0def = QBluetoothAddress();
        const  ::QBluetoothAddress* a0 = &a0def;
         ::QBluetoothServiceInfo *sipCpp;

        static const char *sipKwdList[] = {
            sipName_localAdapter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QBluetoothAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->registerService(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_registerService, doc_QBluetoothServiceInfo_registerService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_unregisterService, "unregisterService(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_unregisterService(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_unregisterService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->unregisterService();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_unregisterService, doc_QBluetoothServiceInfo_unregisterService);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setAttribute, "setAttribute(self, int, QBluetoothUuid)\n"
"setAttribute(self, int, Iterable[Any])\n"
"setAttribute(self, int, Any)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
        const  ::QBluetoothUuid* a1;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BtJ9", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0, sipType_QBluetoothUuid, &a1))
        {
            sipCpp->setAttribute(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::quint16 a0;
        const  ::QBluetoothServiceInfo::Sequence* a1;
        int a1State = 0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BtJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0, sipType_QBluetoothServiceInfo_Sequence,&a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast< ::QBluetoothServiceInfo::Sequence *>(a1),sipType_QBluetoothServiceInfo_Sequence,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::quint16 a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BtJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setAttribute, doc_QBluetoothServiceInfo_setAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceName, "setServiceName(self, str)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServiceName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceName, doc_QBluetoothServiceInfo_setServiceName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceName, "serviceName(self) -> str");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->serviceName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceName, doc_QBluetoothServiceInfo_serviceName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceDescription, "setServiceDescription(self, str)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceDescription(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServiceDescription(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceDescription, doc_QBluetoothServiceInfo_setServiceDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceDescription, "serviceDescription(self) -> str");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceDescription(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->serviceDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceDescription, doc_QBluetoothServiceInfo_serviceDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceProvider, "setServiceProvider(self, str)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceProvider(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServiceProvider(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceProvider, doc_QBluetoothServiceInfo_setServiceProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceProvider, "serviceProvider(self) -> str");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceProvider(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->serviceProvider());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceProvider, doc_QBluetoothServiceInfo_serviceProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceAvailability, "setServiceAvailability(self, int)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceAvailability(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceAvailability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint8 a0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BM", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0))
        {
            sipCpp->setServiceAvailability(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceAvailability, doc_QBluetoothServiceInfo_setServiceAvailability);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceAvailability, "serviceAvailability(self) -> int");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceAvailability(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceAvailability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
             ::quint8 sipRes;

            sipRes = sipCpp->serviceAvailability();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceAvailability, doc_QBluetoothServiceInfo_serviceAvailability);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceUuid, "setServiceUuid(self, QBluetoothUuid)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceUuid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothUuid* a0;
         ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QBluetoothUuid, &a0))
        {
            sipCpp->setServiceUuid(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceUuid, doc_QBluetoothServiceInfo_setServiceUuid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceUuid, "serviceUuid(self) -> QBluetoothUuid");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceUuid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
             ::QBluetoothUuid*sipRes;

            sipRes = new  ::QBluetoothUuid(sipCpp->serviceUuid());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceUuid, doc_QBluetoothServiceInfo_serviceUuid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceClassUuids, "serviceClassUuids(self) -> List[QBluetoothUuid]");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceClassUuids(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceClassUuids(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QList< ::QBluetoothUuid>*sipRes;

            sipRes = new QList< ::QBluetoothUuid>(sipCpp->serviceClassUuids());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceClassUuids, doc_QBluetoothServiceInfo_serviceClassUuids);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothServiceInfo(void *, int);}
static void release_QBluetoothServiceInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothServiceInfo *>(sipCppV);
}


extern "C" {static void assign_QBluetoothServiceInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothServiceInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothServiceInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothServiceInfo *>(sipSrc);
}


extern "C" {static void *array_QBluetoothServiceInfo(SIP_SSIZE_T);}
static void *array_QBluetoothServiceInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothServiceInfo[sipNrElem];
}


extern "C" {static void *copy_QBluetoothServiceInfo(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothServiceInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothServiceInfo(reinterpret_cast<const  ::QBluetoothServiceInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothServiceInfo(sipSimpleWrapper *);}
static void dealloc_QBluetoothServiceInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothServiceInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothServiceInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothServiceInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothServiceInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothServiceInfo();

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothServiceInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBluetoothServiceInfo, &a0))
        {
            sipCpp = new  ::QBluetoothServiceInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QBluetoothServiceInfo[] = {
    {SIP_MLNAME_CAST(sipName_attribute), meth_QBluetoothServiceInfo_attribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_attribute)},
    {SIP_MLNAME_CAST(sipName_attributes), meth_QBluetoothServiceInfo_attributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_attributes)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QBluetoothServiceInfo_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_contains)},
    {SIP_MLNAME_CAST(sipName_device), meth_QBluetoothServiceInfo_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_device)},
    {SIP_MLNAME_CAST(sipName_isComplete), meth_QBluetoothServiceInfo_isComplete, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_isComplete)},
    {SIP_MLNAME_CAST(sipName_isRegistered), meth_QBluetoothServiceInfo_isRegistered, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_isRegistered)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QBluetoothServiceInfo_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_isValid)},
    {SIP_MLNAME_CAST(sipName_protocolDescriptor), meth_QBluetoothServiceInfo_protocolDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_protocolDescriptor)},
    {SIP_MLNAME_CAST(sipName_protocolServiceMultiplexer), meth_QBluetoothServiceInfo_protocolServiceMultiplexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_protocolServiceMultiplexer)},
    {SIP_MLNAME_CAST(sipName_registerService), SIP_MLMETH_CAST(meth_QBluetoothServiceInfo_registerService), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_registerService)},
    {SIP_MLNAME_CAST(sipName_removeAttribute), meth_QBluetoothServiceInfo_removeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_removeAttribute)},
    {SIP_MLNAME_CAST(sipName_serverChannel), meth_QBluetoothServiceInfo_serverChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serverChannel)},
    {SIP_MLNAME_CAST(sipName_serviceAvailability), meth_QBluetoothServiceInfo_serviceAvailability, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceAvailability)},
    {SIP_MLNAME_CAST(sipName_serviceClassUuids), meth_QBluetoothServiceInfo_serviceClassUuids, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceClassUuids)},
    {SIP_MLNAME_CAST(sipName_serviceDescription), meth_QBluetoothServiceInfo_serviceDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceDescription)},
    {SIP_MLNAME_CAST(sipName_serviceName), meth_QBluetoothServiceInfo_serviceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceName)},
    {SIP_MLNAME_CAST(sipName_serviceProvider), meth_QBluetoothServiceInfo_serviceProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceProvider)},
    {SIP_MLNAME_CAST(sipName_serviceUuid), meth_QBluetoothServiceInfo_serviceUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceUuid)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QBluetoothServiceInfo_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QBluetoothServiceInfo_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setDevice)},
    {SIP_MLNAME_CAST(sipName_setServiceAvailability), meth_QBluetoothServiceInfo_setServiceAvailability, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceAvailability)},
    {SIP_MLNAME_CAST(sipName_setServiceDescription), meth_QBluetoothServiceInfo_setServiceDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceDescription)},
    {SIP_MLNAME_CAST(sipName_setServiceName), meth_QBluetoothServiceInfo_setServiceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceName)},
    {SIP_MLNAME_CAST(sipName_setServiceProvider), meth_QBluetoothServiceInfo_setServiceProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceProvider)},
    {SIP_MLNAME_CAST(sipName_setServiceUuid), meth_QBluetoothServiceInfo_setServiceUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceUuid)},
    {SIP_MLNAME_CAST(sipName_socketProtocol), meth_QBluetoothServiceInfo_socketProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_socketProtocol)},
    {SIP_MLNAME_CAST(sipName_unregisterService), meth_QBluetoothServiceInfo_unregisterService, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_unregisterService)}
};

static sipEnumMemberDef enummembers_QBluetoothServiceInfo[] = {
    {sipName_AdditionalProtocolDescriptorList, static_cast<int>( ::QBluetoothServiceInfo::AdditionalProtocolDescriptorList), 41},
    {sipName_BluetoothProfileDescriptorList, static_cast<int>( ::QBluetoothServiceInfo::BluetoothProfileDescriptorList), 41},
    {sipName_BrowseGroupList, static_cast<int>( ::QBluetoothServiceInfo::BrowseGroupList), 41},
    {sipName_ClientExecutableUrl, static_cast<int>( ::QBluetoothServiceInfo::ClientExecutableUrl), 41},
    {sipName_DocumentationUrl, static_cast<int>( ::QBluetoothServiceInfo::DocumentationUrl), 41},
    {sipName_IconUrl, static_cast<int>( ::QBluetoothServiceInfo::IconUrl), 41},
    {sipName_L2capProtocol, static_cast<int>( ::QBluetoothServiceInfo::L2capProtocol), 42},
    {sipName_LanguageBaseAttributeIdList, static_cast<int>( ::QBluetoothServiceInfo::LanguageBaseAttributeIdList), 41},
    {sipName_PrimaryLanguageBase, static_cast<int>( ::QBluetoothServiceInfo::PrimaryLanguageBase), 41},
    {sipName_ProtocolDescriptorList, static_cast<int>( ::QBluetoothServiceInfo::ProtocolDescriptorList), 41},
    {sipName_RfcommProtocol, static_cast<int>( ::QBluetoothServiceInfo::RfcommProtocol), 42},
    {sipName_ServiceAvailability, static_cast<int>( ::QBluetoothServiceInfo::ServiceAvailability), 41},
    {sipName_ServiceClassIds, static_cast<int>( ::QBluetoothServiceInfo::ServiceClassIds), 41},
    {sipName_ServiceDescription, static_cast<int>( ::QBluetoothServiceInfo::ServiceDescription), 41},
    {sipName_ServiceId, static_cast<int>( ::QBluetoothServiceInfo::ServiceId), 41},
    {sipName_ServiceInfoTimeToLive, static_cast<int>( ::QBluetoothServiceInfo::ServiceInfoTimeToLive), 41},
    {sipName_ServiceName, static_cast<int>( ::QBluetoothServiceInfo::ServiceName), 41},
    {sipName_ServiceProvider, static_cast<int>( ::QBluetoothServiceInfo::ServiceProvider), 41},
    {sipName_ServiceRecordHandle, static_cast<int>( ::QBluetoothServiceInfo::ServiceRecordHandle), 41},
    {sipName_ServiceRecordState, static_cast<int>( ::QBluetoothServiceInfo::ServiceRecordState), 41},
    {sipName_UnknownProtocol, static_cast<int>( ::QBluetoothServiceInfo::UnknownProtocol), 42},
};

PyDoc_STRVAR(doc_QBluetoothServiceInfo, "\1QBluetoothServiceInfo()\n"
"QBluetoothServiceInfo(QBluetoothServiceInfo)");


static pyqt5ClassPluginDef plugin_QBluetoothServiceInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothServiceInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothServiceInfo,
        {SIP_NULLPTR},
        &plugin_QBluetoothServiceInfo
    },
    {
        sipNameNr_QBluetoothServiceInfo,
        {0, 0, 1},
        27, methods_QBluetoothServiceInfo,
        21, enummembers_QBluetoothServiceInfo,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothServiceInfo,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QBluetoothServiceInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothServiceInfo,
    assign_QBluetoothServiceInfo,
    array_QBluetoothServiceInfo,
    copy_QBluetoothServiceInfo,
    release_QBluetoothServiceInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothservicediscoveryagent.sip"
#include <qbluetoothservicediscoveryagent.h>
#line 6952 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 6956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 6959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothserviceinfo.sip"
#include <qbluetoothserviceinfo.h>
#line 6962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 6968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 6974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 6977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 6980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 6983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 6986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 6989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 6995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 7004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 7010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 7013 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 7016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


class sipQBluetoothServiceDiscoveryAgent : public  ::QBluetoothServiceDiscoveryAgent
{
public:
    sipQBluetoothServiceDiscoveryAgent( ::QObject*);
    sipQBluetoothServiceDiscoveryAgent(const  ::QBluetoothAddress&, ::QObject*);
    virtual ~sipQBluetoothServiceDiscoveryAgent();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothServiceDiscoveryAgent(const sipQBluetoothServiceDiscoveryAgent &);
    sipQBluetoothServiceDiscoveryAgent &operator = (const sipQBluetoothServiceDiscoveryAgent &);

    char sipPyMethods[7];
};

sipQBluetoothServiceDiscoveryAgent::sipQBluetoothServiceDiscoveryAgent( ::QObject*a0):  ::QBluetoothServiceDiscoveryAgent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothServiceDiscoveryAgent::sipQBluetoothServiceDiscoveryAgent(const  ::QBluetoothAddress& a0, ::QObject*a1):  ::QBluetoothServiceDiscoveryAgent(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothServiceDiscoveryAgent::~sipQBluetoothServiceDiscoveryAgent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothServiceDiscoveryAgent::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothServiceDiscoveryAgent);

    return  ::QBluetoothServiceDiscoveryAgent::metaObject();
}

int sipQBluetoothServiceDiscoveryAgent::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothServiceDiscoveryAgent::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothServiceDiscoveryAgent,_c,_id,_a);

    return _id;
}

void *sipQBluetoothServiceDiscoveryAgent::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothServiceDiscoveryAgent, _clname, &sipCpp) ? sipCpp :  ::QBluetoothServiceDiscoveryAgent::qt_metacast(_clname));
}

bool sipQBluetoothServiceDiscoveryAgent::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothServiceDiscoveryAgent::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothServiceDiscoveryAgent::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothServiceDiscoveryAgent::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQBluetoothServiceDiscoveryAgent::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServiceDiscoveryAgent::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServiceDiscoveryAgent::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServiceDiscoveryAgent::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServiceDiscoveryAgent::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothServiceDiscoveryAgent::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_isActive(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_isActive, doc_QBluetoothServiceDiscoveryAgent_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_error, "error(self) -> QBluetoothServiceDiscoveryAgent.Error");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
             ::QBluetoothServiceDiscoveryAgent::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothServiceDiscoveryAgent_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_error, doc_QBluetoothServiceDiscoveryAgent_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_errorString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_errorString, doc_QBluetoothServiceDiscoveryAgent_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_discoveredServices, "discoveredServices(self) -> List[QBluetoothServiceInfo]");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_discoveredServices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_discoveredServices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            QList< ::QBluetoothServiceInfo>*sipRes;

            sipRes = new QList< ::QBluetoothServiceInfo>(sipCpp->discoveredServices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothServiceInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_discoveredServices, doc_QBluetoothServiceDiscoveryAgent_discoveredServices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_setUuidFilter, "setUuidFilter(self, Iterable[QBluetoothUuid])\n"
"setUuidFilter(self, QBluetoothUuid)");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_setUuidFilter(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_setUuidFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QBluetoothUuid>* a0;
        int a0State = 0;
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp, sipType_QList_0100QBluetoothUuid,&a0, &a0State))
        {
            sipCpp->setUuidFilter(*a0);
            sipReleaseType(const_cast<QList< ::QBluetoothUuid> *>(a0),sipType_QList_0100QBluetoothUuid,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QBluetoothUuid* a0;
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp, sipType_QBluetoothUuid, &a0))
        {
            sipCpp->setUuidFilter(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_setUuidFilter, doc_QBluetoothServiceDiscoveryAgent_setUuidFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_uuidFilter, "uuidFilter(self) -> List[QBluetoothUuid]");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_uuidFilter(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_uuidFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            QList< ::QBluetoothUuid>*sipRes;

            sipRes = new QList< ::QBluetoothUuid>(sipCpp->uuidFilter());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_uuidFilter, doc_QBluetoothServiceDiscoveryAgent_uuidFilter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_setRemoteAddress, "setRemoteAddress(self, QBluetoothAddress) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_setRemoteAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_setRemoteAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp, sipType_QBluetoothAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setRemoteAddress(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_setRemoteAddress, doc_QBluetoothServiceDiscoveryAgent_setRemoteAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_remoteAddress, "remoteAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_remoteAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_remoteAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->remoteAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_remoteAddress, doc_QBluetoothServiceDiscoveryAgent_remoteAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_start, "start(self, mode: QBluetoothServiceDiscoveryAgent.DiscoveryMode = QBluetoothServiceDiscoveryAgent.MinimalDiscovery)");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothServiceDiscoveryAgent::DiscoveryMode a0 = QBluetoothServiceDiscoveryAgent::MinimalDiscovery;
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp, sipType_QBluetoothServiceDiscoveryAgent_DiscoveryMode, &a0))
        {
            sipCpp->start(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_start, doc_QBluetoothServiceDiscoveryAgent_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_stop, "stop(self)");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_stop(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_stop, doc_QBluetoothServiceDiscoveryAgent_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent_clear, "clear(self)");

extern "C" {static PyObject *meth_QBluetoothServiceDiscoveryAgent_clear(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceDiscoveryAgent_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothServiceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceDiscoveryAgent, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceDiscoveryAgent, sipName_clear, doc_QBluetoothServiceDiscoveryAgent_clear);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothServiceDiscoveryAgent(void *, const sipTypeDef *);}
static void *cast_QBluetoothServiceDiscoveryAgent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothServiceDiscoveryAgent *sipCpp = reinterpret_cast< ::QBluetoothServiceDiscoveryAgent *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothServiceDiscoveryAgent(void *, int);}
static void release_QBluetoothServiceDiscoveryAgent(void *sipCppV, int)
{
     ::QBluetoothServiceDiscoveryAgent *sipCpp = reinterpret_cast< ::QBluetoothServiceDiscoveryAgent *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothServiceDiscoveryAgent(sipSimpleWrapper *);}
static void dealloc_QBluetoothServiceDiscoveryAgent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothServiceDiscoveryAgent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothServiceDiscoveryAgent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothServiceDiscoveryAgent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothServiceDiscoveryAgent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothServiceDiscoveryAgent *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothServiceDiscoveryAgent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothAddress* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothAddress, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothServiceDiscoveryAgent(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothServiceDiscoveryAgent[] = {{7, 0, 1}};


static PyMethodDef methods_QBluetoothServiceDiscoveryAgent[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QBluetoothServiceDiscoveryAgent_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_clear)},
    {SIP_MLNAME_CAST(sipName_discoveredServices), meth_QBluetoothServiceDiscoveryAgent_discoveredServices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_discoveredServices)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothServiceDiscoveryAgent_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QBluetoothServiceDiscoveryAgent_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_errorString)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QBluetoothServiceDiscoveryAgent_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_isActive)},
    {SIP_MLNAME_CAST(sipName_remoteAddress), meth_QBluetoothServiceDiscoveryAgent_remoteAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_remoteAddress)},
    {SIP_MLNAME_CAST(sipName_setRemoteAddress), meth_QBluetoothServiceDiscoveryAgent_setRemoteAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_setRemoteAddress)},
    {SIP_MLNAME_CAST(sipName_setUuidFilter), meth_QBluetoothServiceDiscoveryAgent_setUuidFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_setUuidFilter)},
    {SIP_MLNAME_CAST(sipName_start), SIP_MLMETH_CAST(meth_QBluetoothServiceDiscoveryAgent_start), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QBluetoothServiceDiscoveryAgent_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_stop)},
    {SIP_MLNAME_CAST(sipName_uuidFilter), meth_QBluetoothServiceDiscoveryAgent_uuidFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceDiscoveryAgent_uuidFilter)}
};

static sipEnumMemberDef enummembers_QBluetoothServiceDiscoveryAgent[] = {
    {sipName_FullDiscovery, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::FullDiscovery), 38},
    {sipName_InputOutputError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::InputOutputError), 39},
    {sipName_InvalidBluetoothAdapterError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::InvalidBluetoothAdapterError), 39},
    {sipName_MinimalDiscovery, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::MinimalDiscovery), 38},
    {sipName_NoError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::NoError), 39},
    {sipName_PoweredOffError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::PoweredOffError), 39},
    {sipName_UnknownError, static_cast<int>( ::QBluetoothServiceDiscoveryAgent::UnknownError), 39},
};

PyDoc_STRVAR(doc_QBluetoothServiceDiscoveryAgent, "\1QBluetoothServiceDiscoveryAgent(parent: QObject = None)\n"
"QBluetoothServiceDiscoveryAgent(QBluetoothAddress, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothServiceDiscoveryAgent[] = {
    {"canceled()", "\1canceled(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"serviceDiscovered(QBluetoothServiceInfo)", "\1serviceDiscovered(self, QBluetoothServiceInfo)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QBluetoothServiceDiscoveryAgent::Error)", "\1error(self, QBluetoothServiceDiscoveryAgent.Error)", &methods_QBluetoothServiceDiscoveryAgent[2], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QBluetoothServiceDiscoveryAgent = {
    & ::QBluetoothServiceDiscoveryAgent::staticMetaObject,
    0,
    signals_QBluetoothServiceDiscoveryAgent,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothServiceDiscoveryAgent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothServiceDiscoveryAgent,
        {SIP_NULLPTR},
        &plugin_QBluetoothServiceDiscoveryAgent
    },
    {
        sipNameNr_QBluetoothServiceDiscoveryAgent,
        {0, 0, 1},
        11, methods_QBluetoothServiceDiscoveryAgent,
        7, enummembers_QBluetoothServiceDiscoveryAgent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothServiceDiscoveryAgent,
    -1,
    -1,
    supers_QBluetoothServiceDiscoveryAgent,
    SIP_NULLPTR,
    init_type_QBluetoothServiceDiscoveryAgent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothServiceDiscoveryAgent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBluetoothServiceDiscoveryAgent,
    cast_QBluetoothServiceDiscoveryAgent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothserver.sip"
#include <qbluetoothserver.h>
#line 7729 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothserviceinfo.sip"
#include <qbluetoothserviceinfo.h>
#line 7733 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 7736 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 7739 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 7742 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothsocket.sip"
#include <qbluetoothsocket.h>
#line 7745 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 7748 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 7751 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 7754 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 7757 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 7760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 7763 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 7766 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7769 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 7772 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 7781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 7787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 7790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 7793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


class sipQBluetoothServer : public  ::QBluetoothServer
{
public:
    sipQBluetoothServer( ::QBluetoothServiceInfo::Protocol, ::QObject*);
    virtual ~sipQBluetoothServer();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothServer(const sipQBluetoothServer &);
    sipQBluetoothServer &operator = (const sipQBluetoothServer &);

    char sipPyMethods[7];
};

sipQBluetoothServer::sipQBluetoothServer( ::QBluetoothServiceInfo::Protocol a0, ::QObject*a1):  ::QBluetoothServer(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothServer::~sipQBluetoothServer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothServer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothServer);

    return  ::QBluetoothServer::metaObject();
}

int sipQBluetoothServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothServer,_c,_id,_a);

    return _id;
}

void *sipQBluetoothServer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothServer, _clname, &sipCpp) ? sipCpp :  ::QBluetoothServer::qt_metacast(_clname));
}

bool sipQBluetoothServer::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothServer::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothServer::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothServer::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQBluetoothServer::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothServer::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServer::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothServer::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServer::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothServer::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServer::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothServer::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothServer::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothServer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothServer_close, "close(self)");

extern "C" {static PyObject *meth_QBluetoothServer_close(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->close();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_close, doc_QBluetoothServer_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_listen, "listen(self, address: QBluetoothAddress = QBluetoothAddress(), port: int = 0) -> bool\n"
"listen(self, QBluetoothUuid, serviceName: str = '') -> QBluetoothServiceInfo");

extern "C" {static PyObject *meth_QBluetoothServer_listen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_listen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress& a0def = QBluetoothAddress();
        const  ::QBluetoothAddress* a0 = &a0def;
         ::quint16 a1 = 0;
         ::QBluetoothServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_address,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9t", &sipSelf, sipType_QBluetoothServer, &sipCpp, sipType_QBluetoothAddress, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->listen(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QBluetoothUuid* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QBluetoothServer *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_serviceName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J1", &sipSelf, sipType_QBluetoothServer, &sipCpp, sipType_QBluetoothUuid, &a0, sipType_QString,&a1, &a1State))
        {
             ::QBluetoothServiceInfo*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QBluetoothServiceInfo(sipCpp->listen(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothServiceInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_listen, doc_QBluetoothServer_listen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_isListening, "isListening(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListening();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_isListening, doc_QBluetoothServer_isListening);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_setMaxPendingConnections, "setMaxPendingConnections(self, int)");

extern "C" {static PyObject *meth_QBluetoothServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBluetoothServer, &sipCpp, &a0))
        {
            sipCpp->setMaxPendingConnections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_setMaxPendingConnections, doc_QBluetoothServer_setMaxPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_maxPendingConnections, "maxPendingConnections(self) -> int");

extern "C" {static PyObject *meth_QBluetoothServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxPendingConnections();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_maxPendingConnections, doc_QBluetoothServer_maxPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_hasPendingConnections, "hasPendingConnections(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasPendingConnections();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_hasPendingConnections, doc_QBluetoothServer_hasPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_nextPendingConnection, "nextPendingConnection(self) -> QBluetoothSocket");

extern "C" {static PyObject *meth_QBluetoothServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
             ::QBluetoothSocket*sipRes;

            sipRes = sipCpp->nextPendingConnection();

            return sipConvertFromNewType(sipRes,sipType_QBluetoothSocket,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_nextPendingConnection, doc_QBluetoothServer_nextPendingConnection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_serverAddress, "serverAddress(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothServer_serverAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_serverAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->serverAddress());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_serverAddress, doc_QBluetoothServer_serverAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_serverPort, "serverPort(self) -> int");

extern "C" {static PyObject *meth_QBluetoothServer_serverPort(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_serverPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->serverPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_serverPort, doc_QBluetoothServer_serverPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_setSecurityFlags, "setSecurityFlags(self, Union[QBluetooth.SecurityFlags, QBluetooth.Security])");

extern "C" {static PyObject *meth_QBluetoothServer_setSecurityFlags(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_setSecurityFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetooth::SecurityFlags* a0;
        int a0State = 0;
         ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServer, &sipCpp, sipType_QBluetooth_SecurityFlags, &a0, &a0State))
        {
            sipCpp->setSecurityFlags(*a0);
            sipReleaseType(a0,sipType_QBluetooth_SecurityFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_setSecurityFlags, doc_QBluetoothServer_setSecurityFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_securityFlags, "securityFlags(self) -> QBluetooth.SecurityFlags");

extern "C" {static PyObject *meth_QBluetoothServer_securityFlags(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_securityFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
             ::QBluetooth::SecurityFlags*sipRes;

            sipRes = new  ::QBluetooth::SecurityFlags(sipCpp->securityFlags());

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_SecurityFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_securityFlags, doc_QBluetoothServer_securityFlags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_serverType, "serverType(self) -> QBluetoothServiceInfo.Protocol");

extern "C" {static PyObject *meth_QBluetoothServer_serverType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_serverType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
             ::QBluetoothServiceInfo::Protocol sipRes;

            sipRes = sipCpp->serverType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothServiceInfo_Protocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_serverType, doc_QBluetoothServer_serverType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothServer_error, "error(self) -> QBluetoothServer.Error");

extern "C" {static PyObject *meth_QBluetoothServer_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServer_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServer, &sipCpp))
        {
             ::QBluetoothServer::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothServer_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServer, sipName_error, doc_QBluetoothServer_error);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothServer(void *, const sipTypeDef *);}
static void *cast_QBluetoothServer(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothServer *sipCpp = reinterpret_cast< ::QBluetoothServer *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothServer(void *, int);}
static void release_QBluetoothServer(void *sipCppV, int)
{
     ::QBluetoothServer *sipCpp = reinterpret_cast< ::QBluetoothServer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothServer(sipSimpleWrapper *);}
static void dealloc_QBluetoothServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothServer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothServer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothServer *sipCpp = SIP_NULLPTR;

    {
         ::QBluetoothServiceInfo::Protocol a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QBluetoothServiceInfo_Protocol, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothServer(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothServer[] = {{7, 0, 1}};


static PyMethodDef methods_QBluetoothServer[] = {
    {SIP_MLNAME_CAST(sipName_close), meth_QBluetoothServer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_close)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothServer_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_error)},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QBluetoothServer_hasPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_hasPendingConnections)},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QBluetoothServer_isListening, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_isListening)},
    {SIP_MLNAME_CAST(sipName_listen), SIP_MLMETH_CAST(meth_QBluetoothServer_listen), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothServer_listen)},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QBluetoothServer_maxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_maxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QBluetoothServer_nextPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_nextPendingConnection)},
    {SIP_MLNAME_CAST(sipName_securityFlags), meth_QBluetoothServer_securityFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_securityFlags)},
    {SIP_MLNAME_CAST(sipName_serverAddress), meth_QBluetoothServer_serverAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_serverAddress)},
    {SIP_MLNAME_CAST(sipName_serverPort), meth_QBluetoothServer_serverPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_serverPort)},
    {SIP_MLNAME_CAST(sipName_serverType), meth_QBluetoothServer_serverType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_serverType)},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QBluetoothServer_setMaxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_setMaxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_setSecurityFlags), meth_QBluetoothServer_setSecurityFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServer_setSecurityFlags)}
};

static sipEnumMemberDef enummembers_QBluetoothServer[] = {
    {sipName_InputOutputError, static_cast<int>( ::QBluetoothServer::InputOutputError), 36},
    {sipName_NoError, static_cast<int>( ::QBluetoothServer::NoError), 36},
    {sipName_PoweredOffError, static_cast<int>( ::QBluetoothServer::PoweredOffError), 36},
    {sipName_ServiceAlreadyRegisteredError, static_cast<int>( ::QBluetoothServer::ServiceAlreadyRegisteredError), 36},
    {sipName_UnknownError, static_cast<int>( ::QBluetoothServer::UnknownError), 36},
    {sipName_UnsupportedProtocolError, static_cast<int>( ::QBluetoothServer::UnsupportedProtocolError), 36},
};

PyDoc_STRVAR(doc_QBluetoothServer, "\1QBluetoothServer(QBluetoothServiceInfo.Protocol, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothServer[] = {
    {"newConnection()", "\1newConnection(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QBluetoothServer::Error)", "\1error(self, QBluetoothServer.Error)", &methods_QBluetoothServer[1], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QBluetoothServer = {
    & ::QBluetoothServer::staticMetaObject,
    0,
    signals_QBluetoothServer,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothServer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothServer,
        {SIP_NULLPTR},
        &plugin_QBluetoothServer
    },
    {
        sipNameNr_QBluetoothServer,
        {0, 0, 1},
        13, methods_QBluetoothServer,
        6, enummembers_QBluetoothServer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothServer,
    -1,
    -1,
    supers_QBluetoothServer,
    SIP_NULLPTR,
    init_type_QBluetoothServer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothServer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBluetoothServer,
    cast_QBluetoothServer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothlocaldevice.sip"
#include <qbluetoothlocaldevice.h>
#line 8560 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 8564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 8567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 8570 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothhostinfo.sip"
#include <qbluetoothhostinfo.h>
#line 8579 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 8582 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8585 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8588 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 8591 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 8594 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8597 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 8600 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 8603 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8606 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 8609 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 8612 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 8615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 8618 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 8621 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


class sipQBluetoothLocalDevice : public  ::QBluetoothLocalDevice
{
public:
    sipQBluetoothLocalDevice( ::QObject*);
    sipQBluetoothLocalDevice(const  ::QBluetoothAddress&, ::QObject*);
    virtual ~sipQBluetoothLocalDevice();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothLocalDevice(const sipQBluetoothLocalDevice &);
    sipQBluetoothLocalDevice &operator = (const sipQBluetoothLocalDevice &);

    char sipPyMethods[7];
};

sipQBluetoothLocalDevice::sipQBluetoothLocalDevice( ::QObject*a0):  ::QBluetoothLocalDevice(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothLocalDevice::sipQBluetoothLocalDevice(const  ::QBluetoothAddress& a0, ::QObject*a1):  ::QBluetoothLocalDevice(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothLocalDevice::~sipQBluetoothLocalDevice()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothLocalDevice::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothLocalDevice);

    return  ::QBluetoothLocalDevice::metaObject();
}

int sipQBluetoothLocalDevice::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothLocalDevice::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothLocalDevice,_c,_id,_a);

    return _id;
}

void *sipQBluetoothLocalDevice::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothLocalDevice, _clname, &sipCpp) ? sipCpp :  ::QBluetoothLocalDevice::qt_metacast(_clname));
}

bool sipQBluetoothLocalDevice::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothLocalDevice::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothLocalDevice::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothLocalDevice::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQBluetoothLocalDevice::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothLocalDevice::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothLocalDevice::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothLocalDevice::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothLocalDevice::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothLocalDevice::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothLocalDevice::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothLocalDevice::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothLocalDevice::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothLocalDevice::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_isValid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_isValid, doc_QBluetoothLocalDevice_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_requestPairing, "requestPairing(self, QBluetoothAddress, QBluetoothLocalDevice.Pairing)");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_requestPairing(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_requestPairing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;
         ::QBluetoothLocalDevice::Pairing a1;
         ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp, sipType_QBluetoothAddress, &a0, sipType_QBluetoothLocalDevice_Pairing, &a1))
        {
            sipCpp->requestPairing(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_requestPairing, doc_QBluetoothLocalDevice_requestPairing);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_pairingStatus, "pairingStatus(self, QBluetoothAddress) -> QBluetoothLocalDevice.Pairing");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_pairingStatus(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_pairingStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;
        const  ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp, sipType_QBluetoothAddress, &a0))
        {
             ::QBluetoothLocalDevice::Pairing sipRes;

            sipRes = sipCpp->pairingStatus(*a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothLocalDevice_Pairing);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_pairingStatus, doc_QBluetoothLocalDevice_pairingStatus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_setHostMode, "setHostMode(self, QBluetoothLocalDevice.HostMode)");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_setHostMode(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_setHostMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothLocalDevice::HostMode a0;
         ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp, sipType_QBluetoothLocalDevice_HostMode, &a0))
        {
            sipCpp->setHostMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_setHostMode, doc_QBluetoothLocalDevice_setHostMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_hostMode, "hostMode(self) -> QBluetoothLocalDevice.HostMode");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_hostMode(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_hostMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
             ::QBluetoothLocalDevice::HostMode sipRes;

            sipRes = sipCpp->hostMode();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothLocalDevice_HostMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_hostMode, doc_QBluetoothLocalDevice_hostMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_powerOn, "powerOn(self)");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_powerOn(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_powerOn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            sipCpp->powerOn();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_powerOn, doc_QBluetoothLocalDevice_powerOn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_name, "name(self) -> str");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_name(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_name, doc_QBluetoothLocalDevice_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_address, "address(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_address(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_address(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->address());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_address, doc_QBluetoothLocalDevice_address);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_allDevices, "allDevices() -> List[QBluetoothHostInfo]");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_allDevices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_allDevices(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QBluetoothHostInfo>*sipRes;

            sipRes = new QList< ::QBluetoothHostInfo>( ::QBluetoothLocalDevice::allDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothHostInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_allDevices, doc_QBluetoothLocalDevice_allDevices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_connectedDevices, "connectedDevices(self) -> List[QBluetoothAddress]");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_connectedDevices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_connectedDevices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp))
        {
            QList< ::QBluetoothAddress>*sipRes;

            sipRes = new QList< ::QBluetoothAddress>(sipCpp->connectedDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_connectedDevices, doc_QBluetoothLocalDevice_connectedDevices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothLocalDevice_pairingConfirmation, "pairingConfirmation(self, bool)");

extern "C" {static PyObject *meth_QBluetoothLocalDevice_pairingConfirmation(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothLocalDevice_pairingConfirmation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QBluetoothLocalDevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QBluetoothLocalDevice, &sipCpp, &a0))
        {
            sipCpp->pairingConfirmation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothLocalDevice, sipName_pairingConfirmation, doc_QBluetoothLocalDevice_pairingConfirmation);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothLocalDevice(void *, const sipTypeDef *);}
static void *cast_QBluetoothLocalDevice(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothLocalDevice *sipCpp = reinterpret_cast< ::QBluetoothLocalDevice *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothLocalDevice(void *, int);}
static void release_QBluetoothLocalDevice(void *sipCppV, int)
{
     ::QBluetoothLocalDevice *sipCpp = reinterpret_cast< ::QBluetoothLocalDevice *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothLocalDevice(sipSimpleWrapper *);}
static void dealloc_QBluetoothLocalDevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothLocalDevice *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothLocalDevice(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothLocalDevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothLocalDevice(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothLocalDevice *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothLocalDevice(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothAddress* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothAddress, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothLocalDevice(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothLocalDevice[] = {{7, 0, 1}};


static PyMethodDef methods_QBluetoothLocalDevice[] = {
    {SIP_MLNAME_CAST(sipName_address), meth_QBluetoothLocalDevice_address, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_address)},
    {SIP_MLNAME_CAST(sipName_allDevices), meth_QBluetoothLocalDevice_allDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_allDevices)},
    {SIP_MLNAME_CAST(sipName_connectedDevices), meth_QBluetoothLocalDevice_connectedDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_connectedDevices)},
    {SIP_MLNAME_CAST(sipName_hostMode), meth_QBluetoothLocalDevice_hostMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_hostMode)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QBluetoothLocalDevice_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_QBluetoothLocalDevice_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_name)},
    {SIP_MLNAME_CAST(sipName_pairingConfirmation), meth_QBluetoothLocalDevice_pairingConfirmation, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_pairingConfirmation)},
    {SIP_MLNAME_CAST(sipName_pairingStatus), meth_QBluetoothLocalDevice_pairingStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_pairingStatus)},
    {SIP_MLNAME_CAST(sipName_powerOn), meth_QBluetoothLocalDevice_powerOn, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_powerOn)},
    {SIP_MLNAME_CAST(sipName_requestPairing), meth_QBluetoothLocalDevice_requestPairing, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_requestPairing)},
    {SIP_MLNAME_CAST(sipName_setHostMode), meth_QBluetoothLocalDevice_setHostMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothLocalDevice_setHostMode)}
};

static sipEnumMemberDef enummembers_QBluetoothLocalDevice[] = {
    {sipName_AuthorizedPaired, static_cast<int>( ::QBluetoothLocalDevice::AuthorizedPaired), 34},
    {sipName_HostConnectable, static_cast<int>( ::QBluetoothLocalDevice::HostConnectable), 33},
    {sipName_HostDiscoverable, static_cast<int>( ::QBluetoothLocalDevice::HostDiscoverable), 33},
    {sipName_HostDiscoverableLimitedInquiry, static_cast<int>( ::QBluetoothLocalDevice::HostDiscoverableLimitedInquiry), 33},
    {sipName_HostPoweredOff, static_cast<int>( ::QBluetoothLocalDevice::HostPoweredOff), 33},
    {sipName_NoError, static_cast<int>( ::QBluetoothLocalDevice::NoError), 32},
    {sipName_Paired, static_cast<int>( ::QBluetoothLocalDevice::Paired), 34},
    {sipName_PairingError, static_cast<int>( ::QBluetoothLocalDevice::PairingError), 32},
    {sipName_UnknownError, static_cast<int>( ::QBluetoothLocalDevice::UnknownError), 32},
    {sipName_Unpaired, static_cast<int>( ::QBluetoothLocalDevice::Unpaired), 34},
};

PyDoc_STRVAR(doc_QBluetoothLocalDevice, "\1QBluetoothLocalDevice(parent: QObject = None)\n"
"QBluetoothLocalDevice(QBluetoothAddress, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothLocalDevice[] = {
    {"deviceDisconnected(QBluetoothAddress)", "\1deviceDisconnected(self, QBluetoothAddress)", SIP_NULLPTR, SIP_NULLPTR},
    {"deviceConnected(QBluetoothAddress)", "\1deviceConnected(self, QBluetoothAddress)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QBluetoothLocalDevice::Error)", "\1error(self, QBluetoothLocalDevice.Error)", SIP_NULLPTR, SIP_NULLPTR},
    {"pairingDisplayConfirmation(QBluetoothAddress,QString)", "\1pairingDisplayConfirmation(self, QBluetoothAddress, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"pairingDisplayPinCode(QBluetoothAddress,QString)", "\1pairingDisplayPinCode(self, QBluetoothAddress, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"pairingFinished(QBluetoothAddress,QBluetoothLocalDevice::Pairing)", "\1pairingFinished(self, QBluetoothAddress, QBluetoothLocalDevice.Pairing)", SIP_NULLPTR, SIP_NULLPTR},
    {"hostModeStateChanged(QBluetoothLocalDevice::HostMode)", "\1hostModeStateChanged(self, QBluetoothLocalDevice.HostMode)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QBluetoothLocalDevice = {
    & ::QBluetoothLocalDevice::staticMetaObject,
    0,
    signals_QBluetoothLocalDevice,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothLocalDevice = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothLocalDevice,
        {SIP_NULLPTR},
        &plugin_QBluetoothLocalDevice
    },
    {
        sipNameNr_QBluetoothLocalDevice,
        {0, 0, 1},
        11, methods_QBluetoothLocalDevice,
        10, enummembers_QBluetoothLocalDevice,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothLocalDevice,
    -1,
    -1,
    supers_QBluetoothLocalDevice,
    SIP_NULLPTR,
    init_type_QBluetoothLocalDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothLocalDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBluetoothLocalDevice,
    cast_QBluetoothLocalDevice,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothhostinfo.sip"
#include <qbluetoothhostinfo.h>
#line 9319 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 9323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 9326 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QBluetoothHostInfo_address, "address(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothHostInfo_address(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothHostInfo_address(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothHostInfo, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->address());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothHostInfo, sipName_address, doc_QBluetoothHostInfo_address);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothHostInfo_setAddress, "setAddress(self, QBluetoothAddress)");

extern "C" {static PyObject *meth_QBluetoothHostInfo_setAddress(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothHostInfo_setAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;
         ::QBluetoothHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothHostInfo, &sipCpp, sipType_QBluetoothAddress, &a0))
        {
            sipCpp->setAddress(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothHostInfo, sipName_setAddress, doc_QBluetoothHostInfo_setAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothHostInfo_name, "name(self) -> str");

extern "C" {static PyObject *meth_QBluetoothHostInfo_name(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothHostInfo_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothHostInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothHostInfo, sipName_name, doc_QBluetoothHostInfo_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothHostInfo_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QBluetoothHostInfo_setName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothHostInfo_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QBluetoothHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothHostInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothHostInfo, sipName_setName, doc_QBluetoothHostInfo_setName);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QBluetoothHostInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothHostInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothHostInfo *sipCpp = reinterpret_cast< ::QBluetoothHostInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothHostInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothHostInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothHostInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothHostInfo::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothHostInfo, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothHostInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothHostInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothHostInfo *sipCpp = reinterpret_cast< ::QBluetoothHostInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothHostInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothHostInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothHostInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothHostInfo::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothHostInfo, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothHostInfo(void *, int);}
static void release_QBluetoothHostInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothHostInfo *>(sipCppV);
}


extern "C" {static void assign_QBluetoothHostInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothHostInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothHostInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothHostInfo *>(sipSrc);
}


extern "C" {static void *array_QBluetoothHostInfo(SIP_SSIZE_T);}
static void *array_QBluetoothHostInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothHostInfo[sipNrElem];
}


extern "C" {static void *copy_QBluetoothHostInfo(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothHostInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothHostInfo(reinterpret_cast<const  ::QBluetoothHostInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothHostInfo(sipSimpleWrapper *);}
static void dealloc_QBluetoothHostInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothHostInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothHostInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothHostInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothHostInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothHostInfo();

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothHostInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBluetoothHostInfo, &a0))
        {
            sipCpp = new  ::QBluetoothHostInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothHostInfo[] = {
    {(void *)slot_QBluetoothHostInfo___ne__, ne_slot},
    {(void *)slot_QBluetoothHostInfo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QBluetoothHostInfo[] = {
    {SIP_MLNAME_CAST(sipName_address), meth_QBluetoothHostInfo_address, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothHostInfo_address)},
    {SIP_MLNAME_CAST(sipName_name), meth_QBluetoothHostInfo_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothHostInfo_name)},
    {SIP_MLNAME_CAST(sipName_setAddress), meth_QBluetoothHostInfo_setAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothHostInfo_setAddress)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QBluetoothHostInfo_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothHostInfo_setName)}
};

PyDoc_STRVAR(doc_QBluetoothHostInfo, "\1QBluetoothHostInfo()\n"
"QBluetoothHostInfo(QBluetoothHostInfo)");


static pyqt5ClassPluginDef plugin_QBluetoothHostInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothHostInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothHostInfo,
        {SIP_NULLPTR},
        &plugin_QBluetoothHostInfo
    },
    {
        sipNameNr_QBluetoothHostInfo,
        {0, 0, 1},
        4, methods_QBluetoothHostInfo,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothHostInfo,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetoothHostInfo,
    init_type_QBluetoothHostInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothHostInfo,
    assign_QBluetoothHostInfo,
    array_QBluetoothHostInfo,
    copy_QBluetoothHostInfo,
    release_QBluetoothHostInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 9655 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 9659 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


extern "C" {static long slot_QBluetoothDeviceInfo_Fields___hash__(PyObject *);}
static long slot_QBluetoothDeviceInfo_Fields___hash__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QBluetoothDeviceInfo::Fields::Int();
#line 9677 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QBluetoothDeviceInfo_Fields___bool__(PyObject *);}
static int slot_QBluetoothDeviceInfo_Fields___bool__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::Fields::Int() != 0);
#line 9702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo::Fields* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetoothDeviceInfo_Fields, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::Fields::Int() != a0->operator QBluetoothDeviceInfo::Fields::Int());
#line 9732 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::Fields *>(a0),sipType_QBluetoothDeviceInfo_Fields,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothDeviceInfo_Fields, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo::Fields* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetoothDeviceInfo_Fields, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::Fields::Int() == a0->operator QBluetoothDeviceInfo::Fields::Int());
#line 9768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::Fields *>(a0),sipType_QBluetoothDeviceInfo_Fields,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothDeviceInfo_Fields, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_Fields)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetoothDeviceInfo::Fields(*sipCpp ^ a0);
#line 9807 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___xor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::Fields* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_Fields, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::Fields*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::Fields((*a0 ^ a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_Fields,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_Fields,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___ior__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_Fields)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetoothDeviceInfo::Fields(*sipCpp | a0);
#line 9879 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___or__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::Fields* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_Fields, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::Fields*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::Fields((*a0 | a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_Fields,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_Fields,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___iand__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_Fields)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QBluetoothDeviceInfo::Fields::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___and__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::Fields* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_Fields, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::Fields*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::Fields((*a0 & a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_Fields,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_Fields,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___invert__(PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___invert__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QBluetoothDeviceInfo::Fields*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::Fields(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_Fields,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_Fields___int__(PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_Fields___int__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::Fields *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_Fields));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothDeviceInfo_Fields(void *, int);}
static void release_QBluetoothDeviceInfo_Fields(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipCppV);
}


extern "C" {static void assign_QBluetoothDeviceInfo_Fields(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothDeviceInfo_Fields(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothDeviceInfo::Fields *>(sipSrc);
}


extern "C" {static void *array_QBluetoothDeviceInfo_Fields(SIP_SSIZE_T);}
static void *array_QBluetoothDeviceInfo_Fields(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothDeviceInfo::Fields[sipNrElem];
}


extern "C" {static void *copy_QBluetoothDeviceInfo_Fields(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothDeviceInfo_Fields(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothDeviceInfo::Fields(reinterpret_cast<const  ::QBluetoothDeviceInfo::Fields *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothDeviceInfo_Fields(sipSimpleWrapper *);}
static void dealloc_QBluetoothDeviceInfo_Fields(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothDeviceInfo_Fields(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothDeviceInfo_Fields(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothDeviceInfo_Fields(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothDeviceInfo::Fields *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::Fields();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::Fields(a0);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothDeviceInfo::Fields* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QBluetoothDeviceInfo_Fields, &a0, &a0State))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::Fields(*a0);
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::Fields *>(a0),sipType_QBluetoothDeviceInfo_Fields,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QBluetoothDeviceInfo_Fields(PyObject *, void **, int *, PyObject *);}
static int convertTo_QBluetoothDeviceInfo_Fields(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QBluetoothDeviceInfo::Fields **sipCppPtr = reinterpret_cast< ::QBluetoothDeviceInfo::Fields **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QBluetoothDeviceInfo::Fields is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_Field)) ||
            sipCanConvertToType(sipPy, sipType_QBluetoothDeviceInfo_Fields, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_Field)))
{
    *sipCppPtr = new QBluetoothDeviceInfo::Fields(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QBluetoothDeviceInfo::Fields *>(sipConvertToType(sipPy, sipType_QBluetoothDeviceInfo_Fields, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 10147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothDeviceInfo_Fields[] = {
    {(void *)slot_QBluetoothDeviceInfo_Fields___hash__, hash_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___bool__, bool_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___ne__, ne_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___eq__, eq_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___ixor__, ixor_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___xor__, xor_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___ior__, ior_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___or__, or_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___iand__, iand_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___and__, and_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___invert__, invert_slot},
    {(void *)slot_QBluetoothDeviceInfo_Fields___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QBluetoothDeviceInfo_Fields, "\1QBluetoothDeviceInfo.Fields()\n"
"QBluetoothDeviceInfo.Fields(Union[QBluetoothDeviceInfo.Fields, QBluetoothDeviceInfo.Field])\n"
"QBluetoothDeviceInfo.Fields(QBluetoothDeviceInfo.Fields)");


static pyqt5ClassPluginDef plugin_QBluetoothDeviceInfo_Fields = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothDeviceInfo_Fields = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothDeviceInfo__Fields,
        {SIP_NULLPTR},
        &plugin_QBluetoothDeviceInfo_Fields
    },
    {
        sipNameNr_Fields,
        {11, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothDeviceInfo_Fields,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetoothDeviceInfo_Fields,
    init_type_QBluetoothDeviceInfo_Fields,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothDeviceInfo_Fields,
    assign_QBluetoothDeviceInfo_Fields,
    array_QBluetoothDeviceInfo_Fields,
    copy_QBluetoothDeviceInfo_Fields,
    release_QBluetoothDeviceInfo_Fields,
    SIP_NULLPTR,
    convertTo_QBluetoothDeviceInfo_Fields,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 10235 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 10239 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


extern "C" {static long slot_QBluetoothDeviceInfo_CoreConfigurations___hash__(PyObject *);}
static long slot_QBluetoothDeviceInfo_CoreConfigurations___hash__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QBluetoothDeviceInfo::CoreConfigurations::Int();
#line 10257 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QBluetoothDeviceInfo_CoreConfigurations___bool__(PyObject *);}
static int slot_QBluetoothDeviceInfo_CoreConfigurations___bool__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::CoreConfigurations::Int() != 0);
#line 10282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo::CoreConfigurations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetoothDeviceInfo_CoreConfigurations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::CoreConfigurations::Int() != a0->operator QBluetoothDeviceInfo::CoreConfigurations::Int());
#line 10312 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(a0),sipType_QBluetoothDeviceInfo_CoreConfigurations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothDeviceInfo_CoreConfigurations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo::CoreConfigurations* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetoothDeviceInfo_CoreConfigurations, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::CoreConfigurations::Int() == a0->operator QBluetoothDeviceInfo::CoreConfigurations::Int());
#line 10348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(a0),sipType_QBluetoothDeviceInfo_CoreConfigurations,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothDeviceInfo_CoreConfigurations, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_CoreConfigurations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetoothDeviceInfo::CoreConfigurations(*sipCpp ^ a0);
#line 10387 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___xor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::CoreConfigurations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_CoreConfigurations, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::CoreConfigurations*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::CoreConfigurations((*a0 ^ a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_CoreConfigurations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_CoreConfigurations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___ior__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_CoreConfigurations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetoothDeviceInfo::CoreConfigurations(*sipCpp | a0);
#line 10459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___or__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::CoreConfigurations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_CoreConfigurations, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::CoreConfigurations*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::CoreConfigurations((*a0 | a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_CoreConfigurations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_CoreConfigurations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___iand__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_CoreConfigurations)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QBluetoothDeviceInfo::CoreConfigurations::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___and__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::CoreConfigurations* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_CoreConfigurations, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::CoreConfigurations*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::CoreConfigurations((*a0 & a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_CoreConfigurations,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_CoreConfigurations,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___invert__(PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___invert__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QBluetoothDeviceInfo::CoreConfigurations*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::CoreConfigurations(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_CoreConfigurations,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___int__(PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_CoreConfigurations___int__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_CoreConfigurations));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothDeviceInfo_CoreConfigurations(void *, int);}
static void release_QBluetoothDeviceInfo_CoreConfigurations(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipCppV);
}


extern "C" {static void assign_QBluetoothDeviceInfo_CoreConfigurations(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothDeviceInfo_CoreConfigurations(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(sipSrc);
}


extern "C" {static void *array_QBluetoothDeviceInfo_CoreConfigurations(SIP_SSIZE_T);}
static void *array_QBluetoothDeviceInfo_CoreConfigurations(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothDeviceInfo::CoreConfigurations[sipNrElem];
}


extern "C" {static void *copy_QBluetoothDeviceInfo_CoreConfigurations(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothDeviceInfo_CoreConfigurations(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothDeviceInfo::CoreConfigurations(reinterpret_cast<const  ::QBluetoothDeviceInfo::CoreConfigurations *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothDeviceInfo_CoreConfigurations(sipSimpleWrapper *);}
static void dealloc_QBluetoothDeviceInfo_CoreConfigurations(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothDeviceInfo_CoreConfigurations(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothDeviceInfo_CoreConfigurations(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothDeviceInfo_CoreConfigurations(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothDeviceInfo::CoreConfigurations *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::CoreConfigurations();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::CoreConfigurations(a0);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothDeviceInfo::CoreConfigurations* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QBluetoothDeviceInfo_CoreConfigurations, &a0, &a0State))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::CoreConfigurations(*a0);
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::CoreConfigurations *>(a0),sipType_QBluetoothDeviceInfo_CoreConfigurations,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QBluetoothDeviceInfo_CoreConfigurations(PyObject *, void **, int *, PyObject *);}
static int convertTo_QBluetoothDeviceInfo_CoreConfigurations(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QBluetoothDeviceInfo::CoreConfigurations **sipCppPtr = reinterpret_cast< ::QBluetoothDeviceInfo::CoreConfigurations **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QBluetoothDeviceInfo::CoreConfigurations is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_CoreConfiguration)) ||
            sipCanConvertToType(sipPy, sipType_QBluetoothDeviceInfo_CoreConfigurations, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_CoreConfiguration)))
{
    *sipCppPtr = new QBluetoothDeviceInfo::CoreConfigurations(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QBluetoothDeviceInfo::CoreConfigurations *>(sipConvertToType(sipPy, sipType_QBluetoothDeviceInfo_CoreConfigurations, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 10727 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothDeviceInfo_CoreConfigurations[] = {
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___hash__, hash_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___bool__, bool_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___ne__, ne_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___eq__, eq_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___ixor__, ixor_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___xor__, xor_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___ior__, ior_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___or__, or_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___iand__, iand_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___and__, and_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___invert__, invert_slot},
    {(void *)slot_QBluetoothDeviceInfo_CoreConfigurations___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QBluetoothDeviceInfo_CoreConfigurations, "\1QBluetoothDeviceInfo.CoreConfigurations()\n"
"QBluetoothDeviceInfo.CoreConfigurations(Union[QBluetoothDeviceInfo.CoreConfigurations, QBluetoothDeviceInfo.CoreConfiguration])\n"
"QBluetoothDeviceInfo.CoreConfigurations(QBluetoothDeviceInfo.CoreConfigurations)");


static pyqt5ClassPluginDef plugin_QBluetoothDeviceInfo_CoreConfigurations = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothDeviceInfo_CoreConfigurations = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothDeviceInfo__CoreConfigurations,
        {SIP_NULLPTR},
        &plugin_QBluetoothDeviceInfo_CoreConfigurations
    },
    {
        sipNameNr_CoreConfigurations,
        {11, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothDeviceInfo_CoreConfigurations,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetoothDeviceInfo_CoreConfigurations,
    init_type_QBluetoothDeviceInfo_CoreConfigurations,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothDeviceInfo_CoreConfigurations,
    assign_QBluetoothDeviceInfo_CoreConfigurations,
    array_QBluetoothDeviceInfo_CoreConfigurations,
    copy_QBluetoothDeviceInfo_CoreConfigurations,
    release_QBluetoothDeviceInfo_CoreConfigurations,
    SIP_NULLPTR,
    convertTo_QBluetoothDeviceInfo_CoreConfigurations,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 10815 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 10819 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


extern "C" {static long slot_QBluetoothDeviceInfo_ServiceClasses___hash__(PyObject *);}
static long slot_QBluetoothDeviceInfo_ServiceClasses___hash__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QBluetoothDeviceInfo::ServiceClasses::Int();
#line 10837 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QBluetoothDeviceInfo_ServiceClasses___bool__(PyObject *);}
static int slot_QBluetoothDeviceInfo_ServiceClasses___bool__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::ServiceClasses::Int() != 0);
#line 10862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo::ServiceClasses* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetoothDeviceInfo_ServiceClasses, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::ServiceClasses::Int() != a0->operator QBluetoothDeviceInfo::ServiceClasses::Int());
#line 10892 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(a0),sipType_QBluetoothDeviceInfo_ServiceClasses,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothDeviceInfo_ServiceClasses, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo::ServiceClasses* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetoothDeviceInfo_ServiceClasses, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceInfo::ServiceClasses::Int() == a0->operator QBluetoothDeviceInfo::ServiceClasses::Int());
#line 10928 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(a0),sipType_QBluetoothDeviceInfo_ServiceClasses,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothDeviceInfo_ServiceClasses, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_ServiceClasses)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetoothDeviceInfo::ServiceClasses(*sipCpp ^ a0);
#line 10967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___xor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::ServiceClasses* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_ServiceClasses, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::ServiceClasses*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::ServiceClasses((*a0 ^ a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_ServiceClasses,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_ServiceClasses,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___ior__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_ServiceClasses)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetoothDeviceInfo::ServiceClasses(*sipCpp | a0);
#line 11039 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___or__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::ServiceClasses* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_ServiceClasses, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::ServiceClasses*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::ServiceClasses((*a0 | a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_ServiceClasses,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_ServiceClasses,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___iand__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_ServiceClasses)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QBluetoothDeviceInfo::ServiceClasses::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___and__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::ServiceClasses* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceInfo_ServiceClasses, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceInfo::ServiceClasses*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::ServiceClasses((*a0 & a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_ServiceClasses,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_ServiceClasses,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___invert__(PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___invert__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QBluetoothDeviceInfo::ServiceClasses*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::ServiceClasses(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_ServiceClasses,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___int__(PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo_ServiceClasses___int__(PyObject *sipSelf)
{
     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo_ServiceClasses));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothDeviceInfo_ServiceClasses(void *, int);}
static void release_QBluetoothDeviceInfo_ServiceClasses(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipCppV);
}


extern "C" {static void assign_QBluetoothDeviceInfo_ServiceClasses(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothDeviceInfo_ServiceClasses(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(sipSrc);
}


extern "C" {static void *array_QBluetoothDeviceInfo_ServiceClasses(SIP_SSIZE_T);}
static void *array_QBluetoothDeviceInfo_ServiceClasses(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothDeviceInfo::ServiceClasses[sipNrElem];
}


extern "C" {static void *copy_QBluetoothDeviceInfo_ServiceClasses(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothDeviceInfo_ServiceClasses(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothDeviceInfo::ServiceClasses(reinterpret_cast<const  ::QBluetoothDeviceInfo::ServiceClasses *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothDeviceInfo_ServiceClasses(sipSimpleWrapper *);}
static void dealloc_QBluetoothDeviceInfo_ServiceClasses(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothDeviceInfo_ServiceClasses(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothDeviceInfo_ServiceClasses(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothDeviceInfo_ServiceClasses(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothDeviceInfo::ServiceClasses *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::ServiceClasses();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::ServiceClasses(a0);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothDeviceInfo::ServiceClasses* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QBluetoothDeviceInfo_ServiceClasses, &a0, &a0State))
        {
            sipCpp = new  ::QBluetoothDeviceInfo::ServiceClasses(*a0);
            sipReleaseType(const_cast< ::QBluetoothDeviceInfo::ServiceClasses *>(a0),sipType_QBluetoothDeviceInfo_ServiceClasses,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QBluetoothDeviceInfo_ServiceClasses(PyObject *, void **, int *, PyObject *);}
static int convertTo_QBluetoothDeviceInfo_ServiceClasses(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QBluetoothDeviceInfo::ServiceClasses **sipCppPtr = reinterpret_cast< ::QBluetoothDeviceInfo::ServiceClasses **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QBluetoothDeviceInfo::ServiceClasses is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_ServiceClass)) ||
            sipCanConvertToType(sipPy, sipType_QBluetoothDeviceInfo_ServiceClasses, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceInfo_ServiceClass)))
{
    *sipCppPtr = new QBluetoothDeviceInfo::ServiceClasses(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QBluetoothDeviceInfo::ServiceClasses *>(sipConvertToType(sipPy, sipType_QBluetoothDeviceInfo_ServiceClasses, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 11307 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothDeviceInfo_ServiceClasses[] = {
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___hash__, hash_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___bool__, bool_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___ne__, ne_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___eq__, eq_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___ixor__, ixor_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___xor__, xor_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___ior__, ior_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___or__, or_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___iand__, iand_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___and__, and_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___invert__, invert_slot},
    {(void *)slot_QBluetoothDeviceInfo_ServiceClasses___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QBluetoothDeviceInfo_ServiceClasses, "\1QBluetoothDeviceInfo.ServiceClasses()\n"
"QBluetoothDeviceInfo.ServiceClasses(Union[QBluetoothDeviceInfo.ServiceClasses, QBluetoothDeviceInfo.ServiceClass])\n"
"QBluetoothDeviceInfo.ServiceClasses(QBluetoothDeviceInfo.ServiceClasses)");


static pyqt5ClassPluginDef plugin_QBluetoothDeviceInfo_ServiceClasses = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothDeviceInfo_ServiceClasses = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothDeviceInfo__ServiceClasses,
        {SIP_NULLPTR},
        &plugin_QBluetoothDeviceInfo_ServiceClasses
    },
    {
        sipNameNr_ServiceClasses,
        {11, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothDeviceInfo_ServiceClasses,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetoothDeviceInfo_ServiceClasses,
    init_type_QBluetoothDeviceInfo_ServiceClasses,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothDeviceInfo_ServiceClasses,
    assign_QBluetoothDeviceInfo_ServiceClasses,
    array_QBluetoothDeviceInfo_ServiceClasses,
    copy_QBluetoothDeviceInfo_ServiceClasses,
    release_QBluetoothDeviceInfo_ServiceClasses,
    SIP_NULLPTR,
    convertTo_QBluetoothDeviceInfo_ServiceClasses,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 11395 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 11399 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 11402 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 11405 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 11408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 390 "sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 11411 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 435 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 11414 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 11417 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 11420 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 11423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_isValid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_isValid, doc_QBluetoothDeviceInfo_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_isCached, "isCached(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_isCached(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_isCached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCached();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_isCached, doc_QBluetoothDeviceInfo_isCached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_setCached, "setCached(self, bool)");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_setCached(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_setCached(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp, &a0))
        {
            sipCpp->setCached(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_setCached, doc_QBluetoothDeviceInfo_setCached);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_address, "address(self) -> QBluetoothAddress");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_address(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_address(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::QBluetoothAddress*sipRes;

            sipRes = new  ::QBluetoothAddress(sipCpp->address());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_address, doc_QBluetoothDeviceInfo_address);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_name, "name(self) -> str");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_name(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_name, doc_QBluetoothDeviceInfo_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_serviceClasses, "serviceClasses(self) -> QBluetoothDeviceInfo.ServiceClasses");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_serviceClasses(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_serviceClasses(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::QBluetoothDeviceInfo::ServiceClasses*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::ServiceClasses(sipCpp->serviceClasses());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_ServiceClasses,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_serviceClasses, doc_QBluetoothDeviceInfo_serviceClasses);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_majorDeviceClass, "majorDeviceClass(self) -> QBluetoothDeviceInfo.MajorDeviceClass");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_majorDeviceClass(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_majorDeviceClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::QBluetoothDeviceInfo::MajorDeviceClass sipRes;

            sipRes = sipCpp->majorDeviceClass();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothDeviceInfo_MajorDeviceClass);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_majorDeviceClass, doc_QBluetoothDeviceInfo_majorDeviceClass);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_minorDeviceClass, "minorDeviceClass(self) -> int");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_minorDeviceClass(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_minorDeviceClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::quint8 sipRes;

            sipRes = sipCpp->minorDeviceClass();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_minorDeviceClass, doc_QBluetoothDeviceInfo_minorDeviceClass);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_rssi, "rssi(self) -> int");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_rssi(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_rssi(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::qint16 sipRes;

            sipRes = sipCpp->rssi();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_rssi, doc_QBluetoothDeviceInfo_rssi);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_setRssi, "setRssi(self, int)");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_setRssi(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_setRssi(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint16 a0;
         ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bh", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp, &a0))
        {
            sipCpp->setRssi(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_setRssi, doc_QBluetoothDeviceInfo_setRssi);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_setServiceUuids, "setServiceUuids(self, Iterable[QBluetoothUuid], QBluetoothDeviceInfo.DataCompleteness)");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_setServiceUuids(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_setServiceUuids(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QBluetoothUuid>* a0;
        int a0State = 0;
         ::QBluetoothDeviceInfo::DataCompleteness a1;
         ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp, sipType_QList_0100QBluetoothUuid,&a0, &a0State, sipType_QBluetoothDeviceInfo_DataCompleteness, &a1))
        {
            sipCpp->setServiceUuids(*a0,a1);
            sipReleaseType(const_cast<QList< ::QBluetoothUuid> *>(a0),sipType_QList_0100QBluetoothUuid,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_setServiceUuids, doc_QBluetoothDeviceInfo_setServiceUuids);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_serviceUuids, "serviceUuids(self) -> Tuple[List[QBluetoothUuid], QBluetoothDeviceInfo.DataCompleteness]");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_serviceUuids(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_serviceUuids(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::DataCompleteness a0;
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
            QList< ::QBluetoothUuid>*sipRes;

            sipRes = new QList< ::QBluetoothUuid>(sipCpp->serviceUuids(&a0));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothUuid,SIP_NULLPTR);
            return sipBuildResult(0,"(RF)",sipResObj,a0,sipType_QBluetoothDeviceInfo_DataCompleteness);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_serviceUuids, doc_QBluetoothDeviceInfo_serviceUuids);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_serviceUuidsCompleteness, "serviceUuidsCompleteness(self) -> QBluetoothDeviceInfo.DataCompleteness");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_serviceUuidsCompleteness(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_serviceUuidsCompleteness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::QBluetoothDeviceInfo::DataCompleteness sipRes;

            sipRes = sipCpp->serviceUuidsCompleteness();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothDeviceInfo_DataCompleteness);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_serviceUuidsCompleteness, doc_QBluetoothDeviceInfo_serviceUuidsCompleteness);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_setCoreConfigurations, "setCoreConfigurations(self, Union[QBluetoothDeviceInfo.CoreConfigurations, QBluetoothDeviceInfo.CoreConfiguration])");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_setCoreConfigurations(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_setCoreConfigurations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceInfo::CoreConfigurations* a0;
        int a0State = 0;
         ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp, sipType_QBluetoothDeviceInfo_CoreConfigurations, &a0, &a0State))
        {
            sipCpp->setCoreConfigurations(*a0);
            sipReleaseType(a0,sipType_QBluetoothDeviceInfo_CoreConfigurations,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_setCoreConfigurations, doc_QBluetoothDeviceInfo_setCoreConfigurations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_coreConfigurations, "coreConfigurations(self) -> QBluetoothDeviceInfo.CoreConfigurations");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_coreConfigurations(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_coreConfigurations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::QBluetoothDeviceInfo::CoreConfigurations*sipRes;

            sipRes = new  ::QBluetoothDeviceInfo::CoreConfigurations(sipCpp->coreConfigurations());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo_CoreConfigurations,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_coreConfigurations, doc_QBluetoothDeviceInfo_coreConfigurations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_setDeviceUuid, "setDeviceUuid(self, QBluetoothUuid)");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_setDeviceUuid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_setDeviceUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothUuid* a0;
         ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp, sipType_QBluetoothUuid, &a0))
        {
            sipCpp->setDeviceUuid(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_setDeviceUuid, doc_QBluetoothDeviceInfo_setDeviceUuid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_deviceUuid, "deviceUuid(self) -> QBluetoothUuid");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_deviceUuid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_deviceUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::QBluetoothUuid*sipRes;

            sipRes = new  ::QBluetoothUuid(sipCpp->deviceUuid());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothUuid,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_deviceUuid, doc_QBluetoothDeviceInfo_deviceUuid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_manufacturerIds, "manufacturerIds(self) -> List[int]");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_manufacturerIds(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_manufacturerIds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
             ::QVector< ::quint16>*sipRes;

            sipRes = new  ::QVector< ::quint16>(sipCpp->manufacturerIds());

            return sipConvertFromNewType(sipRes,sipType_QVector_1600,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_manufacturerIds, doc_QBluetoothDeviceInfo_manufacturerIds);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_manufacturerData, "manufacturerData(self, int) -> QByteArray\n"
"manufacturerData(self) -> Dict[int, QByteArray]");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_manufacturerData(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_manufacturerData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->manufacturerData(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    {
        const  ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp))
        {
            QHash< ::quint16,QByteArray>*sipRes;

            sipRes = new QHash< ::quint16,QByteArray>(sipCpp->manufacturerData());

            return sipConvertFromNewType(sipRes,sipType_QHash_1600_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_manufacturerData, doc_QBluetoothDeviceInfo_manufacturerData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceInfo_setManufacturerData, "setManufacturerData(self, int, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QBluetoothDeviceInfo_setManufacturerData(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceInfo_setManufacturerData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QBluetoothDeviceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BtJ1", &sipSelf, sipType_QBluetoothDeviceInfo, &sipCpp, &a0, sipType_QByteArray, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->setManufacturerData(a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceInfo, sipName_setManufacturerData, doc_QBluetoothDeviceInfo_setManufacturerData);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceInfo *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothDeviceInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothDeviceInfo::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothDeviceInfo, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceInfo *sipCpp = reinterpret_cast< ::QBluetoothDeviceInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceInfo));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothDeviceInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothDeviceInfo::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothDeviceInfo, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothDeviceInfo(void *, int);}
static void release_QBluetoothDeviceInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothDeviceInfo *>(sipCppV);
}


extern "C" {static void assign_QBluetoothDeviceInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothDeviceInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothDeviceInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothDeviceInfo *>(sipSrc);
}


extern "C" {static void *array_QBluetoothDeviceInfo(SIP_SSIZE_T);}
static void *array_QBluetoothDeviceInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothDeviceInfo[sipNrElem];
}


extern "C" {static void *copy_QBluetoothDeviceInfo(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothDeviceInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothDeviceInfo(reinterpret_cast<const  ::QBluetoothDeviceInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothDeviceInfo(sipSimpleWrapper *);}
static void dealloc_QBluetoothDeviceInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothDeviceInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothDeviceInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothDeviceInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothDeviceInfo *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothDeviceInfo();

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothAddress* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::quint32 a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J1u", sipType_QBluetoothAddress, &a0, sipType_QString,&a1, &a1State, &a2))
        {
            sipCpp = new  ::QBluetoothDeviceInfo(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothUuid* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::quint32 a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9J1u", sipType_QBluetoothUuid, &a0, sipType_QString,&a1, &a1State, &a2))
        {
            sipCpp = new  ::QBluetoothDeviceInfo(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothDeviceInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBluetoothDeviceInfo, &a0))
        {
            sipCpp = new  ::QBluetoothDeviceInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothDeviceInfo[] = {
    {(void *)slot_QBluetoothDeviceInfo___ne__, ne_slot},
    {(void *)slot_QBluetoothDeviceInfo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QBluetoothDeviceInfo[] = {
    {SIP_MLNAME_CAST(sipName_address), meth_QBluetoothDeviceInfo_address, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_address)},
    {SIP_MLNAME_CAST(sipName_coreConfigurations), meth_QBluetoothDeviceInfo_coreConfigurations, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_coreConfigurations)},
    {SIP_MLNAME_CAST(sipName_deviceUuid), meth_QBluetoothDeviceInfo_deviceUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_deviceUuid)},
    {SIP_MLNAME_CAST(sipName_isCached), meth_QBluetoothDeviceInfo_isCached, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_isCached)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QBluetoothDeviceInfo_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_isValid)},
    {SIP_MLNAME_CAST(sipName_majorDeviceClass), meth_QBluetoothDeviceInfo_majorDeviceClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_majorDeviceClass)},
    {SIP_MLNAME_CAST(sipName_manufacturerData), meth_QBluetoothDeviceInfo_manufacturerData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_manufacturerData)},
    {SIP_MLNAME_CAST(sipName_manufacturerIds), meth_QBluetoothDeviceInfo_manufacturerIds, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_manufacturerIds)},
    {SIP_MLNAME_CAST(sipName_minorDeviceClass), meth_QBluetoothDeviceInfo_minorDeviceClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_minorDeviceClass)},
    {SIP_MLNAME_CAST(sipName_name), meth_QBluetoothDeviceInfo_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_name)},
    {SIP_MLNAME_CAST(sipName_rssi), meth_QBluetoothDeviceInfo_rssi, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_rssi)},
    {SIP_MLNAME_CAST(sipName_serviceClasses), meth_QBluetoothDeviceInfo_serviceClasses, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_serviceClasses)},
    {SIP_MLNAME_CAST(sipName_serviceUuids), SIP_MLMETH_CAST(meth_QBluetoothDeviceInfo_serviceUuids), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_serviceUuids)},
    {SIP_MLNAME_CAST(sipName_serviceUuidsCompleteness), meth_QBluetoothDeviceInfo_serviceUuidsCompleteness, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_serviceUuidsCompleteness)},
    {SIP_MLNAME_CAST(sipName_setCached), meth_QBluetoothDeviceInfo_setCached, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_setCached)},
    {SIP_MLNAME_CAST(sipName_setCoreConfigurations), meth_QBluetoothDeviceInfo_setCoreConfigurations, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_setCoreConfigurations)},
    {SIP_MLNAME_CAST(sipName_setDeviceUuid), meth_QBluetoothDeviceInfo_setDeviceUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_setDeviceUuid)},
    {SIP_MLNAME_CAST(sipName_setManufacturerData), meth_QBluetoothDeviceInfo_setManufacturerData, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_setManufacturerData)},
    {SIP_MLNAME_CAST(sipName_setRssi), meth_QBluetoothDeviceInfo_setRssi, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_setRssi)},
    {SIP_MLNAME_CAST(sipName_setServiceUuids), meth_QBluetoothDeviceInfo_setServiceUuids, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceInfo_setServiceUuids)}
};

static sipEnumMemberDef enummembers_QBluetoothDeviceInfo[] = {
    {sipName_All, static_cast<int>(::QBluetoothDeviceInfo::Field::All), 15},
    {sipName_AllServices, static_cast<int>( ::QBluetoothDeviceInfo::AllServices), 28},
    {sipName_AudioService, static_cast<int>( ::QBluetoothDeviceInfo::AudioService), 28},
    {sipName_AudioVideoDevice, static_cast<int>( ::QBluetoothDeviceInfo::AudioVideoDevice), 17},
    {sipName_BaseRateAndLowEnergyCoreConfiguration, static_cast<int>( ::QBluetoothDeviceInfo::BaseRateAndLowEnergyCoreConfiguration), 12},
    {sipName_BaseRateCoreConfiguration, static_cast<int>( ::QBluetoothDeviceInfo::BaseRateCoreConfiguration), 12},
    {sipName_Camcorder, static_cast<int>( ::QBluetoothDeviceInfo::Camcorder), 18},
    {sipName_CapturingService, static_cast<int>( ::QBluetoothDeviceInfo::CapturingService), 28},
    {sipName_CarAudio, static_cast<int>( ::QBluetoothDeviceInfo::CarAudio), 18},
    {sipName_CardReaderPeripheral, static_cast<int>( ::QBluetoothDeviceInfo::CardReaderPeripheral), 24},
    {sipName_CellularPhone, static_cast<int>( ::QBluetoothDeviceInfo::CellularPhone), 25},
    {sipName_CommonIsdnAccessPhone, static_cast<int>( ::QBluetoothDeviceInfo::CommonIsdnAccessPhone), 25},
    {sipName_ComputerDevice, static_cast<int>( ::QBluetoothDeviceInfo::ComputerDevice), 17},
    {sipName_CordlessPhone, static_cast<int>( ::QBluetoothDeviceInfo::CordlessPhone), 25},
    {sipName_DataComplete, static_cast<int>( ::QBluetoothDeviceInfo::DataComplete), 14},
    {sipName_DataIncomplete, static_cast<int>( ::QBluetoothDeviceInfo::DataIncomplete), 14},
    {sipName_DataUnavailable, static_cast<int>( ::QBluetoothDeviceInfo::DataUnavailable), 14},
    {sipName_DesktopComputer, static_cast<int>( ::QBluetoothDeviceInfo::DesktopComputer), 19},
    {sipName_DigitizerTabletPeripheral, static_cast<int>( ::QBluetoothDeviceInfo::DigitizerTabletPeripheral), 24},
    {sipName_GamepadPeripheral, static_cast<int>( ::QBluetoothDeviceInfo::GamepadPeripheral), 24},
    {sipName_GamingDevice, static_cast<int>( ::QBluetoothDeviceInfo::GamingDevice), 18},
    {sipName_HandheldClamShellComputer, static_cast<int>( ::QBluetoothDeviceInfo::HandheldClamShellComputer), 19},
    {sipName_HandheldComputer, static_cast<int>( ::QBluetoothDeviceInfo::HandheldComputer), 19},
    {sipName_HandsFreeDevice, static_cast<int>( ::QBluetoothDeviceInfo::HandsFreeDevice), 18},
    {sipName_Headphones, static_cast<int>( ::QBluetoothDeviceInfo::Headphones), 18},
    {sipName_HealthBloodPressureMonitor, static_cast<int>( ::QBluetoothDeviceInfo::HealthBloodPressureMonitor), 20},
    {sipName_HealthDataDisplay, static_cast<int>( ::QBluetoothDeviceInfo::HealthDataDisplay), 20},
    {sipName_HealthDevice, static_cast<int>( ::QBluetoothDeviceInfo::HealthDevice), 17},
    {sipName_HealthGlucoseMeter, static_cast<int>( ::QBluetoothDeviceInfo::HealthGlucoseMeter), 20},
    {sipName_HealthPulseOximeter, static_cast<int>( ::QBluetoothDeviceInfo::HealthPulseOximeter), 20},
    {sipName_HealthStepCounter, static_cast<int>( ::QBluetoothDeviceInfo::HealthStepCounter), 20},
    {sipName_HealthThermometer, static_cast<int>( ::QBluetoothDeviceInfo::HealthThermometer), 20},
    {sipName_HealthWeightScale, static_cast<int>( ::QBluetoothDeviceInfo::HealthWeightScale), 20},
    {sipName_HiFiAudioDevice, static_cast<int>( ::QBluetoothDeviceInfo::HiFiAudioDevice), 18},
    {sipName_ImageCamera, static_cast<int>( ::QBluetoothDeviceInfo::ImageCamera), 21},
    {sipName_ImageDisplay, static_cast<int>( ::QBluetoothDeviceInfo::ImageDisplay), 21},
    {sipName_ImagePrinter, static_cast<int>( ::QBluetoothDeviceInfo::ImagePrinter), 21},
    {sipName_ImageScanner, static_cast<int>( ::QBluetoothDeviceInfo::ImageScanner), 21},
    {sipName_ImagingDevice, static_cast<int>( ::QBluetoothDeviceInfo::ImagingDevice), 17},
    {sipName_InformationService, static_cast<int>( ::QBluetoothDeviceInfo::InformationService), 28},
    {sipName_JoystickPeripheral, static_cast<int>( ::QBluetoothDeviceInfo::JoystickPeripheral), 24},
    {sipName_KeyboardPeripheral, static_cast<int>( ::QBluetoothDeviceInfo::KeyboardPeripheral), 24},
    {sipName_KeyboardWithPointingDevicePeripheral, static_cast<int>( ::QBluetoothDeviceInfo::KeyboardWithPointingDevicePeripheral), 24},
    {sipName_LANAccessDevice, static_cast<int>( ::QBluetoothDeviceInfo::LANAccessDevice), 17},
    {sipName_LaptopComputer, static_cast<int>( ::QBluetoothDeviceInfo::LaptopComputer), 19},
    {sipName_Loudspeaker, static_cast<int>( ::QBluetoothDeviceInfo::Loudspeaker), 18},
    {sipName_LowEnergyCoreConfiguration, static_cast<int>( ::QBluetoothDeviceInfo::LowEnergyCoreConfiguration), 12},
    {sipName_ManufacturerData, static_cast<int>(::QBluetoothDeviceInfo::Field::ManufacturerData), 15},
    {sipName_Microphone, static_cast<int>( ::QBluetoothDeviceInfo::Microphone), 18},
    {sipName_MiscellaneousDevice, static_cast<int>( ::QBluetoothDeviceInfo::MiscellaneousDevice), 17},
    {sipName_NetworkFullService, static_cast<int>( ::QBluetoothDeviceInfo::NetworkFullService), 23},
    {sipName_NetworkLoadFactorFive, static_cast<int>( ::QBluetoothDeviceInfo::NetworkLoadFactorFive), 23},
    {sipName_NetworkLoadFactorFour, static_cast<int>( ::QBluetoothDeviceInfo::NetworkLoadFactorFour), 23},
    {sipName_NetworkLoadFactorOne, static_cast<int>( ::QBluetoothDeviceInfo::NetworkLoadFactorOne), 23},
    {sipName_NetworkLoadFactorSix, static_cast<int>( ::QBluetoothDeviceInfo::NetworkLoadFactorSix), 23},
    {sipName_NetworkLoadFactorThree, static_cast<int>( ::QBluetoothDeviceInfo::NetworkLoadFactorThree), 23},
    {sipName_NetworkLoadFactorTwo, static_cast<int>( ::QBluetoothDeviceInfo::NetworkLoadFactorTwo), 23},
    {sipName_NetworkNoService, static_cast<int>( ::QBluetoothDeviceInfo::NetworkNoService), 23},
    {sipName_NetworkingService, static_cast<int>( ::QBluetoothDeviceInfo::NetworkingService), 28},
    {sipName_NoService, static_cast<int>( ::QBluetoothDeviceInfo::NoService), 28},
    {sipName_None_, static_cast<int>(::QBluetoothDeviceInfo::Field::None), 15},
    {sipName_ObjectTransferService, static_cast<int>( ::QBluetoothDeviceInfo::ObjectTransferService), 28},
    {sipName_PeripheralDevice, static_cast<int>( ::QBluetoothDeviceInfo::PeripheralDevice), 17},
    {sipName_PhoneDevice, static_cast<int>( ::QBluetoothDeviceInfo::PhoneDevice), 17},
    {sipName_PointingDevicePeripheral, static_cast<int>( ::QBluetoothDeviceInfo::PointingDevicePeripheral), 24},
    {sipName_PortableAudioDevice, static_cast<int>( ::QBluetoothDeviceInfo::PortableAudioDevice), 18},
    {sipName_PositioningService, static_cast<int>( ::QBluetoothDeviceInfo::PositioningService), 28},
    {sipName_RSSI, static_cast<int>(::QBluetoothDeviceInfo::Field::RSSI), 15},
    {sipName_RemoteControlPeripheral, static_cast<int>( ::QBluetoothDeviceInfo::RemoteControlPeripheral), 24},
    {sipName_RenderingService, static_cast<int>( ::QBluetoothDeviceInfo::RenderingService), 28},
    {sipName_SensingDevicePeripheral, static_cast<int>( ::QBluetoothDeviceInfo::SensingDevicePeripheral), 24},
    {sipName_ServerComputer, static_cast<int>( ::QBluetoothDeviceInfo::ServerComputer), 19},
    {sipName_SetTopBox, static_cast<int>( ::QBluetoothDeviceInfo::SetTopBox), 18},
    {sipName_SmartPhone, static_cast<int>( ::QBluetoothDeviceInfo::SmartPhone), 25},
    {sipName_TelephonyService, static_cast<int>( ::QBluetoothDeviceInfo::TelephonyService), 28},
    {sipName_ToyController, static_cast<int>( ::QBluetoothDeviceInfo::ToyController), 26},
    {sipName_ToyDevice, static_cast<int>( ::QBluetoothDeviceInfo::ToyDevice), 17},
    {sipName_ToyDoll, static_cast<int>( ::QBluetoothDeviceInfo::ToyDoll), 26},
    {sipName_ToyGame, static_cast<int>( ::QBluetoothDeviceInfo::ToyGame), 26},
    {sipName_ToyRobot, static_cast<int>( ::QBluetoothDeviceInfo::ToyRobot), 26},
    {sipName_ToyVehicle, static_cast<int>( ::QBluetoothDeviceInfo::ToyVehicle), 26},
    {sipName_UncategorizedAudioVideoDevice, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedAudioVideoDevice), 18},
    {sipName_UncategorizedComputer, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedComputer), 19},
    {sipName_UncategorizedDevice, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedDevice), 17},
    {sipName_UncategorizedHealthDevice, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedHealthDevice), 20},
    {sipName_UncategorizedImagingDevice, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedImagingDevice), 21},
    {sipName_UncategorizedMiscellaneous, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedMiscellaneous), 22},
    {sipName_UncategorizedPeripheral, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedPeripheral), 24},
    {sipName_UncategorizedPhone, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedPhone), 25},
    {sipName_UncategorizedToy, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedToy), 26},
    {sipName_UncategorizedWearableDevice, static_cast<int>( ::QBluetoothDeviceInfo::UncategorizedWearableDevice), 27},
    {sipName_UnknownCoreConfiguration, static_cast<int>( ::QBluetoothDeviceInfo::UnknownCoreConfiguration), 12},
    {sipName_Vcr, static_cast<int>( ::QBluetoothDeviceInfo::Vcr), 18},
    {sipName_VideoCamera, static_cast<int>( ::QBluetoothDeviceInfo::VideoCamera), 18},
    {sipName_VideoConferencing, static_cast<int>( ::QBluetoothDeviceInfo::VideoConferencing), 18},
    {sipName_VideoDisplayAndLoudspeaker, static_cast<int>( ::QBluetoothDeviceInfo::VideoDisplayAndLoudspeaker), 18},
    {sipName_VideoMonitor, static_cast<int>( ::QBluetoothDeviceInfo::VideoMonitor), 18},
    {sipName_WearableComputer, static_cast<int>( ::QBluetoothDeviceInfo::WearableComputer), 19},
    {sipName_WearableDevice, static_cast<int>( ::QBluetoothDeviceInfo::WearableDevice), 17},
    {sipName_WearableGlasses, static_cast<int>( ::QBluetoothDeviceInfo::WearableGlasses), 27},
    {sipName_WearableHeadsetDevice, static_cast<int>( ::QBluetoothDeviceInfo::WearableHeadsetDevice), 18},
    {sipName_WearableHelmet, static_cast<int>( ::QBluetoothDeviceInfo::WearableHelmet), 27},
    {sipName_WearableJacket, static_cast<int>( ::QBluetoothDeviceInfo::WearableJacket), 27},
    {sipName_WearablePager, static_cast<int>( ::QBluetoothDeviceInfo::WearablePager), 27},
    {sipName_WearableWristWatch, static_cast<int>( ::QBluetoothDeviceInfo::WearableWristWatch), 27},
    {sipName_WiredModemOrVoiceGatewayPhone, static_cast<int>( ::QBluetoothDeviceInfo::WiredModemOrVoiceGatewayPhone), 25},
};

PyDoc_STRVAR(doc_QBluetoothDeviceInfo, "\1QBluetoothDeviceInfo()\n"
"QBluetoothDeviceInfo(QBluetoothAddress, str, int)\n"
"QBluetoothDeviceInfo(QBluetoothUuid, str, int)\n"
"QBluetoothDeviceInfo(QBluetoothDeviceInfo)");


static pyqt5ClassPluginDef plugin_QBluetoothDeviceInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothDeviceInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothDeviceInfo,
        {SIP_NULLPTR},
        &plugin_QBluetoothDeviceInfo
    },
    {
        sipNameNr_QBluetoothDeviceInfo,
        {0, 0, 1},
        20, methods_QBluetoothDeviceInfo,
        106, enummembers_QBluetoothDeviceInfo,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothDeviceInfo,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetoothDeviceInfo,
    init_type_QBluetoothDeviceInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothDeviceInfo,
    assign_QBluetoothDeviceInfo,
    array_QBluetoothDeviceInfo,
    copy_QBluetoothDeviceInfo,
    release_QBluetoothDeviceInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdevicediscoveryagent.sip"
#include <qbluetoothdevicediscoveryagent.h>
#line 12388 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdevicediscoveryagent.sip"
#include <qbluetoothdevicediscoveryagent.h>
#line 12392 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


extern "C" {static long slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___hash__(PyObject *);}
static long slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___hash__(PyObject *sipSelf)
{
     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QBluetoothDeviceDiscoveryAgent::DiscoveryMethods::Int();
#line 12410 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___bool__(PyObject *);}
static int slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___bool__(PyObject *sipSelf)
{
     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceDiscoveryAgent::DiscoveryMethods::Int() != 0);
#line 12435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceDiscoveryAgent::DiscoveryMethods::Int() != a0->operator QBluetoothDeviceDiscoveryAgent::DiscoveryMethods::Int());
#line 12465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(a0),sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetoothDeviceDiscoveryAgent::DiscoveryMethods::Int() == a0->operator QBluetoothDeviceDiscoveryAgent::DiscoveryMethods::Int());
#line 12501 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(a0),sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetoothDeviceDiscoveryAgent::DiscoveryMethods(*sipCpp ^ a0);
#line 12540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___xor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods*sipRes;

            sipRes = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods((*a0 ^ a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ior__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetoothDeviceDiscoveryAgent::DiscoveryMethods(*sipCpp | a0);
#line 12612 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___or__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods*sipRes;

            sipRes = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods((*a0 | a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___iand__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___and__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, &a0, &a0State, &a1))
        {
             ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods*sipRes;

            sipRes = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods((*a0 & a1));
            sipReleaseType(a0,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___invert__(PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___invert__(PyObject *sipSelf)
{
     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods*sipRes;

            sipRes = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___int__(PyObject *);}
static PyObject *slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___int__(PyObject *sipSelf)
{
     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(void *, int);}
static void release_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipCppV);
}


extern "C" {static void assign_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipSrc);
}


extern "C" {static void *array_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(SIP_SSIZE_T);}
static void *array_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods[sipNrElem];
}


extern "C" {static void *copy_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods(reinterpret_cast<const  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(sipSimpleWrapper *);}
static void dealloc_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods(a0);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, &a0, &a0State))
        {
            sipCpp = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods(*a0);
            sipReleaseType(const_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(a0),sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(PyObject *, void **, int *, PyObject *);}
static int convertTo_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods **sipCppPtr = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QBluetoothDeviceDiscoveryAgent::DiscoveryMethods is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethod)) ||
            sipCanConvertToType(sipPy, sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethod)))
{
    *sipCppPtr = new QBluetoothDeviceDiscoveryAgent::DiscoveryMethods(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QBluetoothDeviceDiscoveryAgent::DiscoveryMethods *>(sipConvertToType(sipPy, sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 12880 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods[] = {
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___hash__, hash_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___bool__, bool_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ne__, ne_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___eq__, eq_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ixor__, ixor_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___xor__, xor_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___ior__, ior_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___or__, or_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___iand__, iand_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___and__, and_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___invert__, invert_slot},
    {(void *)slot_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, "\1QBluetoothDeviceDiscoveryAgent.DiscoveryMethods()\n"
"QBluetoothDeviceDiscoveryAgent.DiscoveryMethods(Union[QBluetoothDeviceDiscoveryAgent.DiscoveryMethods, QBluetoothDeviceDiscoveryAgent.DiscoveryMethod])\n"
"QBluetoothDeviceDiscoveryAgent.DiscoveryMethods(QBluetoothDeviceDiscoveryAgent.DiscoveryMethods)");


static pyqt5ClassPluginDef plugin_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothDeviceDiscoveryAgent__DiscoveryMethods,
        {SIP_NULLPTR},
        &plugin_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods
    },
    {
        sipNameNr_DiscoveryMethods,
        {6, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    init_type_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    assign_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    array_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    copy_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    release_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    SIP_NULLPTR,
    convertTo_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdevicediscoveryagent.sip"
#include <qbluetoothdevicediscoveryagent.h>
#line 12968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 12972 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 12975 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdevicediscoveryagent.sip"
#include <qbluetoothdevicediscoveryagent.h>
#line 12978 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 12981 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 12984 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12987 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 12990 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 12993 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 12996 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 12999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 13002 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 13005 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13008 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 13011 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13014 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 13017 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 13020 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 13023 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 13026 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 13029 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 13032 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


class sipQBluetoothDeviceDiscoveryAgent : public  ::QBluetoothDeviceDiscoveryAgent
{
public:
    sipQBluetoothDeviceDiscoveryAgent( ::QObject*);
    sipQBluetoothDeviceDiscoveryAgent(const  ::QBluetoothAddress&, ::QObject*);
    virtual ~sipQBluetoothDeviceDiscoveryAgent();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBluetoothDeviceDiscoveryAgent(const sipQBluetoothDeviceDiscoveryAgent &);
    sipQBluetoothDeviceDiscoveryAgent &operator = (const sipQBluetoothDeviceDiscoveryAgent &);

    char sipPyMethods[7];
};

sipQBluetoothDeviceDiscoveryAgent::sipQBluetoothDeviceDiscoveryAgent( ::QObject*a0):  ::QBluetoothDeviceDiscoveryAgent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothDeviceDiscoveryAgent::sipQBluetoothDeviceDiscoveryAgent(const  ::QBluetoothAddress& a0, ::QObject*a1):  ::QBluetoothDeviceDiscoveryAgent(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBluetoothDeviceDiscoveryAgent::~sipQBluetoothDeviceDiscoveryAgent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQBluetoothDeviceDiscoveryAgent::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtBluetooth_qt_metaobject(sipPySelf,sipType_QBluetoothDeviceDiscoveryAgent);

    return  ::QBluetoothDeviceDiscoveryAgent::metaObject();
}

int sipQBluetoothDeviceDiscoveryAgent::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QBluetoothDeviceDiscoveryAgent::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtBluetooth_qt_metacall(sipPySelf,sipType_QBluetoothDeviceDiscoveryAgent,_c,_id,_a);

    return _id;
}

void *sipQBluetoothDeviceDiscoveryAgent::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtBluetooth_qt_metacast(sipPySelf, sipType_QBluetoothDeviceDiscoveryAgent, _clname, &sipCpp) ? sipCpp :  ::QBluetoothDeviceDiscoveryAgent::qt_metacast(_clname));
}

bool sipQBluetoothDeviceDiscoveryAgent::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QBluetoothDeviceDiscoveryAgent::event(a0);

    extern bool sipVH_QtBluetooth_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtBluetooth_5(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQBluetoothDeviceDiscoveryAgent::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QBluetoothDeviceDiscoveryAgent::eventFilter(a0,a1);

    extern bool sipVH_QtBluetooth_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtBluetooth_4(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQBluetoothDeviceDiscoveryAgent::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::timerEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtBluetooth_3(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::childEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtBluetooth_2(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::customEvent(a0);
        return;
    }

    extern void sipVH_QtBluetooth_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtBluetooth_1(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::connectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQBluetoothDeviceDiscoveryAgent::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QBluetoothDeviceDiscoveryAgent::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtBluetooth_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtBluetooth_0(sipGILState, sipImportedVirtErrorHandlers_QtBluetooth_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_inquiryType, "inquiryType(self) -> QBluetoothDeviceDiscoveryAgent.InquiryType");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_inquiryType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_inquiryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
             ::QBluetoothDeviceDiscoveryAgent::InquiryType sipRes;

            sipRes = sipCpp->inquiryType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothDeviceDiscoveryAgent_InquiryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_inquiryType, doc_QBluetoothDeviceDiscoveryAgent_inquiryType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_setInquiryType, "setInquiryType(self, QBluetoothDeviceDiscoveryAgent.InquiryType)");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setInquiryType(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setInquiryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceDiscoveryAgent::InquiryType a0;
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp, sipType_QBluetoothDeviceDiscoveryAgent_InquiryType, &a0))
        {
            sipCpp->setInquiryType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_setInquiryType, doc_QBluetoothDeviceDiscoveryAgent_setInquiryType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_isActive, "isActive(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_isActive(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_isActive, doc_QBluetoothDeviceDiscoveryAgent_isActive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_error, "error(self) -> QBluetoothDeviceDiscoveryAgent.Error");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_error(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
             ::QBluetoothDeviceDiscoveryAgent::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QBluetoothDeviceDiscoveryAgent_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_error, doc_QBluetoothDeviceDiscoveryAgent_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_errorString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_errorString, doc_QBluetoothDeviceDiscoveryAgent_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices, "discoveredDevices(self) -> List[QBluetoothDeviceInfo]");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            QList< ::QBluetoothDeviceInfo>*sipRes;

            sipRes = new QList< ::QBluetoothDeviceInfo>(sipCpp->discoveredDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothDeviceInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_discoveredDevices, doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_start, "start(self)\n"
"start(self, Union[QBluetoothDeviceDiscoveryAgent.DiscoveryMethods, QBluetoothDeviceDiscoveryAgent.DiscoveryMethod])");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_start(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods* a0;
        int a0State = 0;
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp, sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods, &a0, &a0State))
        {
            sipCpp->start(*a0);
            sipReleaseType(a0,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_start, doc_QBluetoothDeviceDiscoveryAgent_start);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_stop, "stop(self)");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_stop(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_stop, doc_QBluetoothDeviceDiscoveryAgent_stop);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout, "setLowEnergyDiscoveryTimeout(self, int)");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp, &a0))
        {
            sipCpp->setLowEnergyDiscoveryTimeout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_setLowEnergyDiscoveryTimeout, doc_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout, "lowEnergyDiscoveryTimeout(self) -> int");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothDeviceDiscoveryAgent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothDeviceDiscoveryAgent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lowEnergyDiscoveryTimeout();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_lowEnergyDiscoveryTimeout, doc_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods, "supportedDiscoveryMethods() -> QBluetoothDeviceDiscoveryAgent.DiscoveryMethods");

extern "C" {static PyObject *meth_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods*sipRes;

            sipRes = new  ::QBluetoothDeviceDiscoveryAgent::DiscoveryMethods( ::QBluetoothDeviceDiscoveryAgent::supportedDiscoveryMethods());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceDiscoveryAgent_DiscoveryMethods,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothDeviceDiscoveryAgent, sipName_supportedDiscoveryMethods, doc_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QBluetoothDeviceDiscoveryAgent(void *, const sipTypeDef *);}
static void *cast_QBluetoothDeviceDiscoveryAgent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QBluetoothDeviceDiscoveryAgent *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothDeviceDiscoveryAgent(void *, int);}
static void release_QBluetoothDeviceDiscoveryAgent(void *sipCppV, int)
{
     ::QBluetoothDeviceDiscoveryAgent *sipCpp = reinterpret_cast< ::QBluetoothDeviceDiscoveryAgent *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *);}
static void dealloc_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQBluetoothDeviceDiscoveryAgent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothDeviceDiscoveryAgent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothDeviceDiscoveryAgent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBluetoothDeviceDiscoveryAgent *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQBluetoothDeviceDiscoveryAgent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothAddress* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QBluetoothAddress, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQBluetoothDeviceDiscoveryAgent(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBluetoothDeviceDiscoveryAgent[] = {{7, 0, 1}};


static PyMethodDef methods_QBluetoothDeviceDiscoveryAgent[] = {
    {SIP_MLNAME_CAST(sipName_discoveredDevices), meth_QBluetoothDeviceDiscoveryAgent_discoveredDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_discoveredDevices)},
    {SIP_MLNAME_CAST(sipName_error), meth_QBluetoothDeviceDiscoveryAgent_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QBluetoothDeviceDiscoveryAgent_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_errorString)},
    {SIP_MLNAME_CAST(sipName_inquiryType), meth_QBluetoothDeviceDiscoveryAgent_inquiryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_inquiryType)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QBluetoothDeviceDiscoveryAgent_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_isActive)},
    {SIP_MLNAME_CAST(sipName_lowEnergyDiscoveryTimeout), meth_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_lowEnergyDiscoveryTimeout)},
    {SIP_MLNAME_CAST(sipName_setInquiryType), meth_QBluetoothDeviceDiscoveryAgent_setInquiryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_setInquiryType)},
    {SIP_MLNAME_CAST(sipName_setLowEnergyDiscoveryTimeout), meth_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_setLowEnergyDiscoveryTimeout)},
    {SIP_MLNAME_CAST(sipName_start), meth_QBluetoothDeviceDiscoveryAgent_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QBluetoothDeviceDiscoveryAgent_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_stop)},
    {SIP_MLNAME_CAST(sipName_supportedDiscoveryMethods), meth_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothDeviceDiscoveryAgent_supportedDiscoveryMethods)}
};

static sipEnumMemberDef enummembers_QBluetoothDeviceDiscoveryAgent[] = {
    {sipName_GeneralUnlimitedInquiry, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::GeneralUnlimitedInquiry), 10},
    {sipName_InputOutputError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::InputOutputError), 9},
    {sipName_InvalidBluetoothAdapterError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::InvalidBluetoothAdapterError), 9},
    {sipName_LimitedInquiry, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::LimitedInquiry), 10},
    {sipName_NoError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::NoError), 9},
    {sipName_PoweredOffError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::PoweredOffError), 9},
    {sipName_UnknownError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::UnknownError), 9},
    {sipName_UnsupportedDiscoveryMethod, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::UnsupportedDiscoveryMethod), 9},
    {sipName_UnsupportedPlatformError, static_cast<int>( ::QBluetoothDeviceDiscoveryAgent::UnsupportedPlatformError), 9},
};

PyDoc_STRVAR(doc_QBluetoothDeviceDiscoveryAgent, "\1QBluetoothDeviceDiscoveryAgent(parent: QObject = None)\n"
"QBluetoothDeviceDiscoveryAgent(QBluetoothAddress, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QBluetoothDeviceDiscoveryAgent[] = {
    {"deviceUpdated(QBluetoothDeviceInfo,QBluetoothDeviceInfo::Fields)", "\1deviceUpdated(self, QBluetoothDeviceInfo, Union[QBluetoothDeviceInfo.Fields, QBluetoothDeviceInfo.Field])", SIP_NULLPTR, SIP_NULLPTR},
    {"canceled()", "\1canceled(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"deviceDiscovered(QBluetoothDeviceInfo)", "\1deviceDiscovered(self, QBluetoothDeviceInfo)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QBluetoothDeviceDiscoveryAgent::Error)", "\1error(self, QBluetoothDeviceDiscoveryAgent.Error)", &methods_QBluetoothDeviceDiscoveryAgent[1], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QBluetoothDeviceDiscoveryAgent = {
    & ::QBluetoothDeviceDiscoveryAgent::staticMetaObject,
    0,
    signals_QBluetoothDeviceDiscoveryAgent,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothDeviceDiscoveryAgent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothDeviceDiscoveryAgent,
        {SIP_NULLPTR},
        &plugin_QBluetoothDeviceDiscoveryAgent
    },
    {
        sipNameNr_QBluetoothDeviceDiscoveryAgent,
        {0, 0, 1},
        11, methods_QBluetoothDeviceDiscoveryAgent,
        9, enummembers_QBluetoothDeviceDiscoveryAgent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothDeviceDiscoveryAgent,
    -1,
    -1,
    supers_QBluetoothDeviceDiscoveryAgent,
    SIP_NULLPTR,
    init_type_QBluetoothDeviceDiscoveryAgent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothDeviceDiscoveryAgent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QBluetoothDeviceDiscoveryAgent,
    cast_QBluetoothDeviceDiscoveryAgent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 13741 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 13745 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


PyDoc_STRVAR(doc_QBluetoothAddress_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QBluetoothAddress_isNull(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothAddress_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothAddress, sipName_isNull, doc_QBluetoothAddress_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothAddress_clear, "clear(self)");

extern "C" {static PyObject *meth_QBluetoothAddress_clear(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothAddress_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetoothAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothAddress, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothAddress, sipName_clear, doc_QBluetoothAddress_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothAddress_toUInt64, "toUInt64(self) -> int");

extern "C" {static PyObject *meth_QBluetoothAddress_toUInt64(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothAddress_toUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothAddress, &sipCpp))
        {
             ::quint64 sipRes;

            sipRes = sipCpp->toUInt64();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothAddress, sipName_toUInt64, doc_QBluetoothAddress_toUInt64);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QBluetoothAddress_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QBluetoothAddress_toString(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothAddress_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothAddress, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothAddress, sipName_toString, doc_QBluetoothAddress_toString);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QBluetoothAddress___ge__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothAddress___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothAddress *sipCpp = reinterpret_cast< ::QBluetoothAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothAddress));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothAddress, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp-> ::QBluetoothAddress::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ge_slot, sipType_QBluetoothAddress, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothAddress___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothAddress___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothAddress *sipCpp = reinterpret_cast< ::QBluetoothAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothAddress));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothAddress::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetoothAddress, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothAddress___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothAddress___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothAddress *sipCpp = reinterpret_cast< ::QBluetoothAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothAddress));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothAddress::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetoothAddress, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetoothAddress___lt__(PyObject *,PyObject *);}
static PyObject *slot_QBluetoothAddress___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetoothAddress *sipCpp = reinterpret_cast< ::QBluetoothAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetoothAddress));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetoothAddress* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QBluetoothAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QBluetoothAddress::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, lt_slot, sipType_QBluetoothAddress, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothAddress(void *, int);}
static void release_QBluetoothAddress(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetoothAddress *>(sipCppV);
}


extern "C" {static void assign_QBluetoothAddress(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetoothAddress(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetoothAddress *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetoothAddress *>(sipSrc);
}


extern "C" {static void *array_QBluetoothAddress(SIP_SSIZE_T);}
static void *array_QBluetoothAddress(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetoothAddress[sipNrElem];
}


extern "C" {static void *copy_QBluetoothAddress(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothAddress(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetoothAddress(reinterpret_cast<const  ::QBluetoothAddress *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothAddress(sipSimpleWrapper *);}
static void dealloc_QBluetoothAddress(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetoothAddress(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetoothAddress(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothAddress(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetoothAddress *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetoothAddress();

            return sipCpp;
        }
    }

    {
         ::quint64 a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "o", &a0))
        {
            sipCpp = new  ::QBluetoothAddress(a0);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QBluetoothAddress(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QBluetoothAddress* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QBluetoothAddress, &a0))
        {
            sipCpp = new  ::QBluetoothAddress(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetoothAddress[] = {
    {(void *)slot_QBluetoothAddress___ge__, ge_slot},
    {(void *)slot_QBluetoothAddress___ne__, ne_slot},
    {(void *)slot_QBluetoothAddress___eq__, eq_slot},
    {(void *)slot_QBluetoothAddress___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QBluetoothAddress[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QBluetoothAddress_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothAddress_clear)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QBluetoothAddress_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothAddress_isNull)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QBluetoothAddress_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothAddress_toString)},
    {SIP_MLNAME_CAST(sipName_toUInt64), meth_QBluetoothAddress_toUInt64, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothAddress_toUInt64)}
};

PyDoc_STRVAR(doc_QBluetoothAddress, "\1QBluetoothAddress()\n"
"QBluetoothAddress(int)\n"
"QBluetoothAddress(str)\n"
"QBluetoothAddress(QBluetoothAddress)");


static pyqt5ClassPluginDef plugin_QBluetoothAddress = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetoothAddress = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothAddress,
        {SIP_NULLPTR},
        &plugin_QBluetoothAddress
    },
    {
        sipNameNr_QBluetoothAddress,
        {0, 0, 1},
        4, methods_QBluetoothAddress,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetoothAddress,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetoothAddress,
    init_type_QBluetoothAddress,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetoothAddress,
    assign_QBluetoothAddress,
    array_QBluetoothAddress,
    copy_QBluetoothAddress,
    release_QBluetoothAddress,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 14165 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 14169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


extern "C" {static long slot_QBluetooth_AttAccessConstraints___hash__(PyObject *);}
static long slot_QBluetooth_AttAccessConstraints___hash__(PyObject *sipSelf)
{
     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QBluetooth::AttAccessConstraints::Int();
#line 14187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QBluetooth_AttAccessConstraints___bool__(PyObject *);}
static int slot_QBluetooth_AttAccessConstraints___bool__(PyObject *sipSelf)
{
     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetooth::AttAccessConstraints::Int() != 0);
#line 14212 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetooth::AttAccessConstraints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetooth_AttAccessConstraints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetooth::AttAccessConstraints::Int() != a0->operator QBluetooth::AttAccessConstraints::Int());
#line 14242 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetooth::AttAccessConstraints *>(a0),sipType_QBluetooth_AttAccessConstraints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetooth_AttAccessConstraints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetooth::AttAccessConstraints* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetooth_AttAccessConstraints, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetooth::AttAccessConstraints::Int() == a0->operator QBluetooth::AttAccessConstraints::Int());
#line 14278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetooth::AttAccessConstraints *>(a0),sipType_QBluetooth_AttAccessConstraints,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetooth_AttAccessConstraints, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetooth_AttAccessConstraints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetooth::AttAccessConstraints(*sipCpp ^ a0);
#line 14317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___xor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetooth::AttAccessConstraints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetooth_AttAccessConstraints, &a0, &a0State, &a1))
        {
             ::QBluetooth::AttAccessConstraints*sipRes;

            sipRes = new  ::QBluetooth::AttAccessConstraints((*a0 ^ a1));
            sipReleaseType(a0,sipType_QBluetooth_AttAccessConstraints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_AttAccessConstraints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___ior__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetooth_AttAccessConstraints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetooth::AttAccessConstraints(*sipCpp | a0);
#line 14389 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___or__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetooth::AttAccessConstraints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetooth_AttAccessConstraints, &a0, &a0State, &a1))
        {
             ::QBluetooth::AttAccessConstraints*sipRes;

            sipRes = new  ::QBluetooth::AttAccessConstraints((*a0 | a1));
            sipReleaseType(a0,sipType_QBluetooth_AttAccessConstraints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_AttAccessConstraints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___iand__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetooth_AttAccessConstraints)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QBluetooth::AttAccessConstraints::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___and__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetooth::AttAccessConstraints* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetooth_AttAccessConstraints, &a0, &a0State, &a1))
        {
             ::QBluetooth::AttAccessConstraints*sipRes;

            sipRes = new  ::QBluetooth::AttAccessConstraints((*a0 & a1));
            sipReleaseType(a0,sipType_QBluetooth_AttAccessConstraints,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_AttAccessConstraints,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___invert__(PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___invert__(PyObject *sipSelf)
{
     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QBluetooth::AttAccessConstraints*sipRes;

            sipRes = new  ::QBluetooth::AttAccessConstraints(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_AttAccessConstraints,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetooth_AttAccessConstraints___int__(PyObject *);}
static PyObject *slot_QBluetooth_AttAccessConstraints___int__(PyObject *sipSelf)
{
     ::QBluetooth::AttAccessConstraints *sipCpp = reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_AttAccessConstraints));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetooth_AttAccessConstraints(void *, int);}
static void release_QBluetooth_AttAccessConstraints(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipCppV);
}


extern "C" {static void assign_QBluetooth_AttAccessConstraints(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetooth_AttAccessConstraints(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetooth::AttAccessConstraints *>(sipSrc);
}


extern "C" {static void *array_QBluetooth_AttAccessConstraints(SIP_SSIZE_T);}
static void *array_QBluetooth_AttAccessConstraints(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetooth::AttAccessConstraints[sipNrElem];
}


extern "C" {static void *copy_QBluetooth_AttAccessConstraints(const void *, SIP_SSIZE_T);}
static void *copy_QBluetooth_AttAccessConstraints(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetooth::AttAccessConstraints(reinterpret_cast<const  ::QBluetooth::AttAccessConstraints *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetooth_AttAccessConstraints(sipSimpleWrapper *);}
static void dealloc_QBluetooth_AttAccessConstraints(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetooth_AttAccessConstraints(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetooth_AttAccessConstraints(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetooth_AttAccessConstraints(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetooth::AttAccessConstraints *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetooth::AttAccessConstraints();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QBluetooth::AttAccessConstraints(a0);

            return sipCpp;
        }
    }

    {
        const  ::QBluetooth::AttAccessConstraints* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QBluetooth_AttAccessConstraints, &a0, &a0State))
        {
            sipCpp = new  ::QBluetooth::AttAccessConstraints(*a0);
            sipReleaseType(const_cast< ::QBluetooth::AttAccessConstraints *>(a0),sipType_QBluetooth_AttAccessConstraints,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QBluetooth_AttAccessConstraints(PyObject *, void **, int *, PyObject *);}
static int convertTo_QBluetooth_AttAccessConstraints(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QBluetooth::AttAccessConstraints **sipCppPtr = reinterpret_cast< ::QBluetooth::AttAccessConstraints **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QBluetooth::AttAccessConstraints is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetooth_AttAccessConstraint)) ||
            sipCanConvertToType(sipPy, sipType_QBluetooth_AttAccessConstraints, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetooth_AttAccessConstraint)))
{
    *sipCppPtr = new QBluetooth::AttAccessConstraints(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QBluetooth::AttAccessConstraints *>(sipConvertToType(sipPy, sipType_QBluetooth_AttAccessConstraints, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 14657 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetooth_AttAccessConstraints[] = {
    {(void *)slot_QBluetooth_AttAccessConstraints___hash__, hash_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___bool__, bool_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___ne__, ne_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___eq__, eq_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___ixor__, ixor_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___xor__, xor_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___ior__, ior_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___or__, or_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___iand__, iand_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___and__, and_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___invert__, invert_slot},
    {(void *)slot_QBluetooth_AttAccessConstraints___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QBluetooth_AttAccessConstraints, "\1QBluetooth.AttAccessConstraints()\n"
"QBluetooth.AttAccessConstraints(Union[QBluetooth.AttAccessConstraints, QBluetooth.AttAccessConstraint])\n"
"QBluetooth.AttAccessConstraints(QBluetooth.AttAccessConstraints)");


static pyqt5ClassPluginDef plugin_QBluetooth_AttAccessConstraints = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetooth_AttAccessConstraints = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetooth__AttAccessConstraints,
        {SIP_NULLPTR},
        &plugin_QBluetooth_AttAccessConstraints
    },
    {
        sipNameNr_AttAccessConstraints,
        {0, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetooth_AttAccessConstraints,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetooth_AttAccessConstraints,
    init_type_QBluetooth_AttAccessConstraints,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetooth_AttAccessConstraints,
    assign_QBluetooth_AttAccessConstraints,
    array_QBluetooth_AttAccessConstraints,
    copy_QBluetooth_AttAccessConstraints,
    release_QBluetooth_AttAccessConstraints,
    SIP_NULLPTR,
    convertTo_QBluetooth_AttAccessConstraints,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 14745 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 14749 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


extern "C" {static long slot_QBluetooth_SecurityFlags___hash__(PyObject *);}
static long slot_QBluetooth_SecurityFlags___hash__(PyObject *sipSelf)
{
     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QBluetooth::SecurityFlags::Int();
#line 14767 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QBluetooth_SecurityFlags___bool__(PyObject *);}
static int slot_QBluetooth_SecurityFlags___bool__(PyObject *sipSelf)
{
     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetooth::SecurityFlags::Int() != 0);
#line 14792 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetooth::SecurityFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetooth_SecurityFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetooth::SecurityFlags::Int() != a0->operator QBluetooth::SecurityFlags::Int());
#line 14822 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetooth::SecurityFlags *>(a0),sipType_QBluetooth_SecurityFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, ne_slot, sipType_QBluetooth_SecurityFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QBluetooth::SecurityFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QBluetooth_SecurityFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QBluetooth::SecurityFlags::Int() == a0->operator QBluetooth::SecurityFlags::Int());
#line 14858 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
            sipReleaseType(const_cast< ::QBluetooth::SecurityFlags *>(a0),sipType_QBluetooth_SecurityFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, eq_slot, sipType_QBluetooth_SecurityFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetooth_SecurityFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetooth::SecurityFlags(*sipCpp ^ a0);
#line 14897 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetooth::SecurityFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetooth_SecurityFlags, &a0, &a0State, &a1))
        {
             ::QBluetooth::SecurityFlags*sipRes;

            sipRes = new  ::QBluetooth::SecurityFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QBluetooth_SecurityFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_SecurityFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetooth_SecurityFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QBluetooth::SecurityFlags(*sipCpp | a0);
#line 14969 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetooth::SecurityFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetooth_SecurityFlags, &a0, &a0State, &a1))
        {
             ::QBluetooth::SecurityFlags*sipRes;

            sipRes = new  ::QBluetooth::SecurityFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QBluetooth_SecurityFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_SecurityFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QBluetooth_SecurityFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QBluetooth::SecurityFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QBluetooth::SecurityFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QBluetooth_SecurityFlags, &a0, &a0State, &a1))
        {
             ::QBluetooth::SecurityFlags*sipRes;

            sipRes = new  ::QBluetooth::SecurityFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QBluetooth_SecurityFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_SecurityFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtBluetooth, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___invert__(PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___invert__(PyObject *sipSelf)
{
     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QBluetooth::SecurityFlags*sipRes;

            sipRes = new  ::QBluetooth::SecurityFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QBluetooth_SecurityFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QBluetooth_SecurityFlags___int__(PyObject *);}
static PyObject *slot_QBluetooth_SecurityFlags___int__(PyObject *sipSelf)
{
     ::QBluetooth::SecurityFlags *sipCpp = reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QBluetooth_SecurityFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetooth_SecurityFlags(void *, int);}
static void release_QBluetooth_SecurityFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipCppV);
}


extern "C" {static void assign_QBluetooth_SecurityFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QBluetooth_SecurityFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QBluetooth::SecurityFlags *>(sipSrc);
}


extern "C" {static void *array_QBluetooth_SecurityFlags(SIP_SSIZE_T);}
static void *array_QBluetooth_SecurityFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QBluetooth::SecurityFlags[sipNrElem];
}


extern "C" {static void *copy_QBluetooth_SecurityFlags(const void *, SIP_SSIZE_T);}
static void *copy_QBluetooth_SecurityFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QBluetooth::SecurityFlags(reinterpret_cast<const  ::QBluetooth::SecurityFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetooth_SecurityFlags(sipSimpleWrapper *);}
static void dealloc_QBluetooth_SecurityFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QBluetooth_SecurityFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QBluetooth_SecurityFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetooth_SecurityFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QBluetooth::SecurityFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QBluetooth::SecurityFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QBluetooth::SecurityFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QBluetooth::SecurityFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QBluetooth_SecurityFlags, &a0, &a0State))
        {
            sipCpp = new  ::QBluetooth::SecurityFlags(*a0);
            sipReleaseType(const_cast< ::QBluetooth::SecurityFlags *>(a0),sipType_QBluetooth_SecurityFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QBluetooth_SecurityFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QBluetooth_SecurityFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QBluetooth::SecurityFlags **sipCppPtr = reinterpret_cast< ::QBluetooth::SecurityFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QBluetooth::SecurityFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetooth_Security)) ||
            sipCanConvertToType(sipPy, sipType_QBluetooth_SecurityFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QBluetooth_Security)))
{
    *sipCppPtr = new QBluetooth::SecurityFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QBluetooth::SecurityFlags *>(sipConvertToType(sipPy, sipType_QBluetooth_SecurityFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 15237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QBluetooth_SecurityFlags[] = {
    {(void *)slot_QBluetooth_SecurityFlags___hash__, hash_slot},
    {(void *)slot_QBluetooth_SecurityFlags___bool__, bool_slot},
    {(void *)slot_QBluetooth_SecurityFlags___ne__, ne_slot},
    {(void *)slot_QBluetooth_SecurityFlags___eq__, eq_slot},
    {(void *)slot_QBluetooth_SecurityFlags___ixor__, ixor_slot},
    {(void *)slot_QBluetooth_SecurityFlags___xor__, xor_slot},
    {(void *)slot_QBluetooth_SecurityFlags___ior__, ior_slot},
    {(void *)slot_QBluetooth_SecurityFlags___or__, or_slot},
    {(void *)slot_QBluetooth_SecurityFlags___iand__, iand_slot},
    {(void *)slot_QBluetooth_SecurityFlags___and__, and_slot},
    {(void *)slot_QBluetooth_SecurityFlags___invert__, invert_slot},
    {(void *)slot_QBluetooth_SecurityFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QBluetooth_SecurityFlags, "\1QBluetooth.SecurityFlags()\n"
"QBluetooth.SecurityFlags(Union[QBluetooth.SecurityFlags, QBluetooth.Security])\n"
"QBluetooth.SecurityFlags(QBluetooth.SecurityFlags)");


static pyqt5ClassPluginDef plugin_QBluetooth_SecurityFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetooth_SecurityFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QBluetooth__SecurityFlags,
        {SIP_NULLPTR},
        &plugin_QBluetooth_SecurityFlags
    },
    {
        sipNameNr_SecurityFlags,
        {0, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QBluetooth_SecurityFlags,
    -1,
    -1,
    SIP_NULLPTR,
    slots_QBluetooth_SecurityFlags,
    init_type_QBluetooth_SecurityFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QBluetooth_SecurityFlags,
    assign_QBluetooth_SecurityFlags,
    array_QBluetooth_SecurityFlags,
    copy_QBluetooth_SecurityFlags,
    release_QBluetooth_SecurityFlags,
    SIP_NULLPTR,
    convertTo_QBluetooth_SecurityFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtBluetooth/qbluetooth.sip"
#include <qbluetooth.h>
#line 15325 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtBluetooth/sipQtBluetoothpart1.cpp"


static sipEnumMemberDef enummembers_QBluetooth[] = {
    {sipName_AttAuthenticationRequired, static_cast<int>( ::QBluetooth::AttAuthenticationRequired), 1},
    {sipName_AttAuthorizationRequired, static_cast<int>( ::QBluetooth::AttAuthorizationRequired), 1},
    {sipName_AttEncryptionRequired, static_cast<int>( ::QBluetooth::AttEncryptionRequired), 1},
    {sipName_Authentication, static_cast<int>( ::QBluetooth::Authentication), 3},
    {sipName_Authorization, static_cast<int>( ::QBluetooth::Authorization), 3},
    {sipName_Encryption, static_cast<int>( ::QBluetooth::Encryption), 3},
    {sipName_NoSecurity, static_cast<int>( ::QBluetooth::NoSecurity), 3},
    {sipName_Secure, static_cast<int>( ::QBluetooth::Secure), 3},
};


static pyqt5ClassPluginDef plugin_QBluetooth = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtBluetooth_QBluetooth = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_NAMESPACE,
        sipNameNr_QBluetooth,
        {SIP_NULLPTR},
        &plugin_QBluetooth
    },
    {
        sipNameNr_QBluetooth,
        {0, 0, 1},
        0, SIP_NULLPTR,
        8, enummembers_QBluetooth,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
