/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQml.h"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlextensionplugin.sip"
#include <qqmlextensionplugin.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 39 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


class sipQQmlExtensionPlugin : public  ::QQmlExtensionPlugin
{
public:
    sipQQmlExtensionPlugin( ::QObject*);
    virtual ~sipQQmlExtensionPlugin();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void initializeEngine( ::QQmlEngine*,const char*) SIP_OVERRIDE;
    void registerTypes(const char*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlExtensionPlugin(const sipQQmlExtensionPlugin &);
    sipQQmlExtensionPlugin &operator = (const sipQQmlExtensionPlugin &);

    char sipPyMethods[9];
};

sipQQmlExtensionPlugin::sipQQmlExtensionPlugin( ::QObject*a0):  ::QQmlExtensionPlugin(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlExtensionPlugin::~sipQQmlExtensionPlugin()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQmlExtensionPlugin::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlExtensionPlugin);

    return  ::QQmlExtensionPlugin::metaObject();
}

int sipQQmlExtensionPlugin::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQmlExtensionPlugin::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlExtensionPlugin,_c,_id,_a);

    return _id;
}

void *sipQQmlExtensionPlugin::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlExtensionPlugin, _clname, &sipCpp) ? sipCpp :  ::QQmlExtensionPlugin::qt_metacast(_clname));
}

void sipQQmlExtensionPlugin::initializeEngine( ::QQmlEngine*a0,const char*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_initializeEngine);

    if (!sipMeth)
    {
         ::QQmlExtensionPlugin::initializeEngine(a0,a1);
        return;
    }

    extern void sipVH_QtQml_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQmlEngine*,const char*);

    sipVH_QtQml_12(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQmlExtensionPlugin::registerTypes(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QQmlExtensionPlugin,sipName_registerTypes);

    if (!sipMeth)
        return;

    extern void sipVH_QtQml_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtQml_11(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlExtensionPlugin::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQmlExtensionPlugin::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlExtensionPlugin::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQmlExtensionPlugin::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQmlExtensionPlugin::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQmlExtensionPlugin::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlExtensionPlugin::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQmlExtensionPlugin::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlExtensionPlugin::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQmlExtensionPlugin::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlExtensionPlugin::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQmlExtensionPlugin::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlExtensionPlugin::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQmlExtensionPlugin::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlExtensionPlugin_registerTypes, "registerTypes(self, str)");

extern "C" {static PyObject *meth_QQmlExtensionPlugin_registerTypes(PyObject *, PyObject *);}
static PyObject *meth_QQmlExtensionPlugin_registerTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const char* a0;
        PyObject *a0Keep;
         ::QQmlExtensionPlugin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BAA", &sipSelf, sipType_QQmlExtensionPlugin, &sipCpp, &a0Keep, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlExtensionPlugin, sipName_registerTypes);
                return SIP_NULLPTR;
            }

            sipCpp->registerTypes(a0);
            Py_DECREF(a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExtensionPlugin, sipName_registerTypes, doc_QQmlExtensionPlugin_registerTypes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExtensionPlugin_initializeEngine, "initializeEngine(self, QQmlEngine, str)");

extern "C" {static PyObject *meth_QQmlExtensionPlugin_initializeEngine(PyObject *, PyObject *);}
static PyObject *meth_QQmlExtensionPlugin_initializeEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQmlEngine* a0;
        const char* a1;
        PyObject *a1Keep;
         ::QQmlExtensionPlugin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8AA", &sipSelf, sipType_QQmlExtensionPlugin, &sipCpp, sipType_QQmlEngine, &a0, &a1Keep, &a1))
        {
            (sipSelfWasArg ? sipCpp-> ::QQmlExtensionPlugin::initializeEngine(a0,a1) : sipCpp->initializeEngine(a0,a1));
            Py_DECREF(a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExtensionPlugin, sipName_initializeEngine, doc_QQmlExtensionPlugin_initializeEngine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExtensionPlugin_baseUrl, "baseUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QQmlExtensionPlugin_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlExtensionPlugin_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExtensionPlugin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExtensionPlugin, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->baseUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExtensionPlugin, sipName_baseUrl, doc_QQmlExtensionPlugin_baseUrl);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQmlExtensionPlugin(void *, const sipTypeDef *);}
static void *cast_QQmlExtensionPlugin(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQmlExtensionPlugin *sipCpp = reinterpret_cast< ::QQmlExtensionPlugin *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlExtensionPlugin(void *, int);}
static void release_QQmlExtensionPlugin(void *sipCppV, int)
{
     ::QQmlExtensionPlugin *sipCpp = reinterpret_cast< ::QQmlExtensionPlugin *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlExtensionPlugin(sipSimpleWrapper *);}
static void dealloc_QQmlExtensionPlugin(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlExtensionPlugin *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlExtensionPlugin(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlExtensionPlugin(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlExtensionPlugin(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlExtensionPlugin *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQmlExtensionPlugin(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlExtensionPlugin[] = {{9, 0, 1}};


static PyMethodDef methods_QQmlExtensionPlugin[] = {
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QQmlExtensionPlugin_baseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExtensionPlugin_baseUrl)},
    {SIP_MLNAME_CAST(sipName_initializeEngine), meth_QQmlExtensionPlugin_initializeEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExtensionPlugin_initializeEngine)},
    {SIP_MLNAME_CAST(sipName_registerTypes), meth_QQmlExtensionPlugin_registerTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExtensionPlugin_registerTypes)}
};

PyDoc_STRVAR(doc_QQmlExtensionPlugin, "\1QQmlExtensionPlugin(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QQmlExtensionPlugin = {
    & ::QQmlExtensionPlugin::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlExtensionPlugin = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlExtensionPlugin,
        {SIP_NULLPTR},
        &plugin_QQmlExtensionPlugin
    },
    {
        sipNameNr_QQmlExtensionPlugin,
        {0, 0, 1},
        3, methods_QQmlExtensionPlugin,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlExtensionPlugin,
    -1,
    -1,
    supers_QQmlExtensionPlugin,
    SIP_NULLPTR,
    init_type_QQmlExtensionPlugin,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlExtensionPlugin,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlExtensionPlugin,
    cast_QQmlExtensionPlugin,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlexpression.sip"
#include <qqmlexpression.h>
#line 546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 550 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 553 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 556 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlscriptstring.sip"
#include <qqmlscriptstring.h>
#line 559 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 562 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 565 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 568 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 571 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 574 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 577 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 580 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 586 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 589 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 592 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 595 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 598 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 601 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 604 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 607 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


class sipQQmlExpression : public  ::QQmlExpression
{
public:
    sipQQmlExpression();
    sipQQmlExpression( ::QQmlContext*, ::QObject*,const  ::QString&, ::QObject*);
    sipQQmlExpression(const  ::QQmlScriptString&, ::QQmlContext*, ::QObject*, ::QObject*);
    virtual ~sipQQmlExpression();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlExpression(const sipQQmlExpression &);
    sipQQmlExpression &operator = (const sipQQmlExpression &);

    char sipPyMethods[7];
};

sipQQmlExpression::sipQQmlExpression():  ::QQmlExpression(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlExpression::sipQQmlExpression( ::QQmlContext*a0, ::QObject*a1,const  ::QString& a2, ::QObject*a3):  ::QQmlExpression(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlExpression::sipQQmlExpression(const  ::QQmlScriptString& a0, ::QQmlContext*a1, ::QObject*a2, ::QObject*a3):  ::QQmlExpression(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlExpression::~sipQQmlExpression()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQmlExpression::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlExpression);

    return  ::QQmlExpression::metaObject();
}

int sipQQmlExpression::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQmlExpression::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlExpression,_c,_id,_a);

    return _id;
}

void *sipQQmlExpression::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlExpression, _clname, &sipCpp) ? sipCpp :  ::QQmlExpression::qt_metacast(_clname));
}

bool sipQQmlExpression::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQmlExpression::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlExpression::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQmlExpression::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQmlExpression::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQmlExpression::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlExpression::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQmlExpression::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlExpression::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQmlExpression::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlExpression::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQmlExpression::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlExpression::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQmlExpression::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlExpression_engine, "engine(self) -> QQmlEngine");

extern "C" {static PyObject *meth_QQmlExpression_engine(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
             ::QQmlEngine*sipRes;

            sipRes = sipCpp->engine();

            return sipConvertFromType(sipRes,sipType_QQmlEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_engine, doc_QQmlExpression_engine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_context, "context(self) -> QQmlContext");

extern "C" {static PyObject *meth_QQmlExpression_context(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
             ::QQmlContext*sipRes;

            sipRes = sipCpp->context();

            return sipConvertFromType(sipRes,sipType_QQmlContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_context, doc_QQmlExpression_context);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_expression, "expression(self) -> str");

extern "C" {static PyObject *meth_QQmlExpression_expression(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_expression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->expression());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_expression, doc_QQmlExpression_expression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_setExpression, "setExpression(self, str)");

extern "C" {static PyObject *meth_QQmlExpression_setExpression(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_setExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlExpression, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setExpression(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_setExpression, doc_QQmlExpression_setExpression);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_notifyOnValueChanged, "notifyOnValueChanged(self) -> bool");

extern "C" {static PyObject *meth_QQmlExpression_notifyOnValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_notifyOnValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->notifyOnValueChanged();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_notifyOnValueChanged, doc_QQmlExpression_notifyOnValueChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_setNotifyOnValueChanged, "setNotifyOnValueChanged(self, bool)");

extern "C" {static PyObject *meth_QQmlExpression_setNotifyOnValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_setNotifyOnValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQmlExpression, &sipCpp, &a0))
        {
            sipCpp->setNotifyOnValueChanged(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_setNotifyOnValueChanged, doc_QQmlExpression_setNotifyOnValueChanged);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_sourceFile, "sourceFile(self) -> str");

extern "C" {static PyObject *meth_QQmlExpression_sourceFile(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_sourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->sourceFile());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_sourceFile, doc_QQmlExpression_sourceFile);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_lineNumber, "lineNumber(self) -> int");

extern "C" {static PyObject *meth_QQmlExpression_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_lineNumber, doc_QQmlExpression_lineNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_columnNumber, "columnNumber(self) -> int");

extern "C" {static PyObject *meth_QQmlExpression_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_columnNumber, doc_QQmlExpression_columnNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_setSourceLocation, "setSourceLocation(self, str, int, column: int = 0)");

extern "C" {static PyObject *meth_QQmlExpression_setSourceLocation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_setSourceLocation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
        int a2 = 0;
         ::QQmlExpression *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1i|i", &sipSelf, sipType_QQmlExpression, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
            sipCpp->setSourceLocation(*a0,a1,a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_setSourceLocation, doc_QQmlExpression_setSourceLocation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_scopeObject, "scopeObject(self) -> QObject");

extern "C" {static PyObject *meth_QQmlExpression_scopeObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_scopeObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->scopeObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_scopeObject, doc_QQmlExpression_scopeObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_hasError, "hasError(self) -> bool");

extern "C" {static PyObject *meth_QQmlExpression_hasError(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_hasError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_hasError, doc_QQmlExpression_hasError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_clearError, "clearError(self)");

extern "C" {static PyObject *meth_QQmlExpression_clearError(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_clearError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
            sipCpp->clearError();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_clearError, doc_QQmlExpression_clearError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_error, "error(self) -> QQmlError");

extern "C" {static PyObject *meth_QQmlExpression_error(PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
             ::QQmlError*sipRes;

            sipRes = new  ::QQmlError(sipCpp->error());

            return sipConvertFromNewType(sipRes,sipType_QQmlError,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_error, doc_QQmlExpression_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlExpression_evaluate, "evaluate(self) -> Tuple[Any, bool]");

extern "C" {static PyObject *meth_QQmlExpression_evaluate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlExpression_evaluate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQmlExpression *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_QQmlExpression, &sipCpp))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant(sipCpp->evaluate(&a0));
            Py_END_ALLOW_THREADS

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlExpression, sipName_evaluate, doc_QQmlExpression_evaluate);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQmlExpression(void *, const sipTypeDef *);}
static void *cast_QQmlExpression(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQmlExpression *sipCpp = reinterpret_cast< ::QQmlExpression *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlExpression(void *, int);}
static void release_QQmlExpression(void *sipCppV, int)
{
     ::QQmlExpression *sipCpp = reinterpret_cast< ::QQmlExpression *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlExpression(sipSimpleWrapper *);}
static void dealloc_QQmlExpression(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlExpression *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlExpression(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlExpression(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlExpression(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlExpression *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQmlExpression();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QQmlContext* a0;
         ::QObject* a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J8J1|JH", sipType_QQmlContext, &a0, sipType_QObject, &a1, sipType_QString,&a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQQmlExpression(a0,a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QQmlScriptString* a0;
         ::QQmlContext* a1 = 0;
         ::QObject* a2 = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_context,
            sipName_scope,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|J8J8JH", sipType_QQmlScriptString, &a0, sipType_QQmlContext, &a1, sipType_QObject, &a2, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQQmlExpression(*a0,a1,a2,a3);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlExpression[] = {{9, 0, 1}};


static PyMethodDef methods_QQmlExpression[] = {
    {SIP_MLNAME_CAST(sipName_clearError), meth_QQmlExpression_clearError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_clearError)},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QQmlExpression_columnNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_columnNumber)},
    {SIP_MLNAME_CAST(sipName_context), meth_QQmlExpression_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_context)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QQmlExpression_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_engine)},
    {SIP_MLNAME_CAST(sipName_error), meth_QQmlExpression_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_error)},
    {SIP_MLNAME_CAST(sipName_evaluate), SIP_MLMETH_CAST(meth_QQmlExpression_evaluate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQmlExpression_evaluate)},
    {SIP_MLNAME_CAST(sipName_expression), meth_QQmlExpression_expression, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_expression)},
    {SIP_MLNAME_CAST(sipName_hasError), meth_QQmlExpression_hasError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_hasError)},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QQmlExpression_lineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_lineNumber)},
    {SIP_MLNAME_CAST(sipName_notifyOnValueChanged), meth_QQmlExpression_notifyOnValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_notifyOnValueChanged)},
    {SIP_MLNAME_CAST(sipName_scopeObject), meth_QQmlExpression_scopeObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_scopeObject)},
    {SIP_MLNAME_CAST(sipName_setExpression), meth_QQmlExpression_setExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_setExpression)},
    {SIP_MLNAME_CAST(sipName_setNotifyOnValueChanged), meth_QQmlExpression_setNotifyOnValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_setNotifyOnValueChanged)},
    {SIP_MLNAME_CAST(sipName_setSourceLocation), SIP_MLMETH_CAST(meth_QQmlExpression_setSourceLocation), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQmlExpression_setSourceLocation)},
    {SIP_MLNAME_CAST(sipName_sourceFile), meth_QQmlExpression_sourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlExpression_sourceFile)}
};

PyDoc_STRVAR(doc_QQmlExpression, "\1QQmlExpression()\n"
"QQmlExpression(QQmlContext, QObject, str, parent: QObject = None)\n"
"QQmlExpression(QQmlScriptString, context: QQmlContext = None, scope: QObject = None, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQmlExpression[] = {
    {"valueChanged()", "\1valueChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQmlExpression = {
    & ::QQmlExpression::staticMetaObject,
    0,
    signals_QQmlExpression,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlExpression = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlExpression,
        {SIP_NULLPTR},
        &plugin_QQmlExpression
    },
    {
        sipNameNr_QQmlExpression,
        {0, 0, 1},
        15, methods_QQmlExpression,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlExpression,
    -1,
    -1,
    supers_QQmlExpression,
    SIP_NULLPTR,
    init_type_QQmlExpression,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlExpression,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlExpression,
    cast_QQmlExpression,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 1449 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 1453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 1456 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 1459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


PyDoc_STRVAR(doc_QQmlError_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QQmlError_isValid(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlError, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_isValid, doc_QQmlError_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QQmlError_url(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlError, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_url, doc_QQmlError_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QQmlError_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlError, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_setUrl, doc_QQmlError_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_description, "description(self) -> str");

extern "C" {static PyObject *meth_QQmlError_description(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlError, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->description());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_description, doc_QQmlError_description);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_setDescription, "setDescription(self, str)");

extern "C" {static PyObject *meth_QQmlError_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlError, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDescription(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_setDescription, doc_QQmlError_setDescription);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_line, "line(self) -> int");

extern "C" {static PyObject *meth_QQmlError_line(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_line(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlError, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->line();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_line, doc_QQmlError_line);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_setLine, "setLine(self, int)");

extern "C" {static PyObject *meth_QQmlError_setLine(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_setLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QQmlError, &sipCpp, &a0))
        {
            sipCpp->setLine(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_setLine, doc_QQmlError_setLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_column, "column(self) -> int");

extern "C" {static PyObject *meth_QQmlError_column(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlError, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->column();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_column, doc_QQmlError_column);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_setColumn, "setColumn(self, int)");

extern "C" {static PyObject *meth_QQmlError_setColumn(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_setColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QQmlError, &sipCpp, &a0))
        {
            sipCpp->setColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_setColumn, doc_QQmlError_setColumn);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QQmlError_toString(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlError, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_toString, doc_QQmlError_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_object, "object(self) -> QObject");

extern "C" {static PyObject *meth_QQmlError_object(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlError, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->object();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_object, doc_QQmlError_object);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_setObject, "setObject(self, QObject)");

extern "C" {static PyObject *meth_QQmlError_setObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_setObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQmlError, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->setObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_setObject, doc_QQmlError_setObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_messageType, "messageType(self) -> QtMsgType");

extern "C" {static PyObject *meth_QQmlError_messageType(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_messageType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlError, &sipCpp))
        {
             ::QtMsgType sipRes;

            sipRes = sipCpp->messageType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QtMsgType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_messageType, doc_QQmlError_messageType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlError_setMessageType, "setMessageType(self, QtMsgType)");

extern "C" {static PyObject *meth_QQmlError_setMessageType(PyObject *, PyObject *);}
static PyObject *meth_QQmlError_setMessageType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QtMsgType a0;
         ::QQmlError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQmlError, &sipCpp, sipType_QtMsgType, &a0))
        {
            sipCpp->setMessageType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlError, sipName_setMessageType, doc_QQmlError_setMessageType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlError(void *, int);}
static void release_QQmlError(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQmlError *>(sipCppV);
}


extern "C" {static void assign_QQmlError(void *, SIP_SSIZE_T, void *);}
static void assign_QQmlError(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQmlError *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQmlError *>(sipSrc);
}


extern "C" {static void *array_QQmlError(SIP_SSIZE_T);}
static void *array_QQmlError(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQmlError[sipNrElem];
}


extern "C" {static void *copy_QQmlError(const void *, SIP_SSIZE_T);}
static void *copy_QQmlError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQmlError(reinterpret_cast<const  ::QQmlError *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQmlError(sipSimpleWrapper *);}
static void dealloc_QQmlError(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlError(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQmlError(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlError(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQmlError *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQmlError();

            return sipCpp;
        }
    }

    {
        const  ::QQmlError* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlError, &a0))
        {
            sipCpp = new  ::QQmlError(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQmlError[] = {
    {SIP_MLNAME_CAST(sipName_column), meth_QQmlError_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_column)},
    {SIP_MLNAME_CAST(sipName_description), meth_QQmlError_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_description)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QQmlError_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_isValid)},
    {SIP_MLNAME_CAST(sipName_line), meth_QQmlError_line, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_line)},
    {SIP_MLNAME_CAST(sipName_messageType), meth_QQmlError_messageType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_messageType)},
    {SIP_MLNAME_CAST(sipName_object), meth_QQmlError_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_object)},
    {SIP_MLNAME_CAST(sipName_setColumn), meth_QQmlError_setColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_setColumn)},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QQmlError_setDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_setDescription)},
    {SIP_MLNAME_CAST(sipName_setLine), meth_QQmlError_setLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_setLine)},
    {SIP_MLNAME_CAST(sipName_setMessageType), meth_QQmlError_setMessageType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_setMessageType)},
    {SIP_MLNAME_CAST(sipName_setObject), meth_QQmlError_setObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_setObject)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QQmlError_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_setUrl)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QQmlError_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_toString)},
    {SIP_MLNAME_CAST(sipName_url), meth_QQmlError_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlError_url)}
};

PyDoc_STRVAR(doc_QQmlError, "\1QQmlError()\n"
"QQmlError(QQmlError)");


static pyqt5ClassPluginDef plugin_QQmlError = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlError = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlError,
        {SIP_NULLPTR},
        &plugin_QQmlError
    },
    {
        sipNameNr_QQmlError,
        {0, 0, 1},
        14, methods_QQmlError,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlError,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlError,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlError,
    assign_QQmlError,
    array_QQmlError,
    copy_QQmlError,
    release_QQmlError,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 2006 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 2010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


extern "C" {static long slot_QQmlImageProviderBase_Flags___hash__(PyObject *);}
static long slot_QQmlImageProviderBase_Flags___hash__(PyObject *sipSelf)
{
     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QQmlImageProviderBase::Flags::Int();
#line 2028 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QQmlImageProviderBase_Flags___bool__(PyObject *);}
static int slot_QQmlImageProviderBase_Flags___bool__(PyObject *sipSelf)
{
     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQmlImageProviderBase::Flags::Int() != 0);
#line 2053 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlImageProviderBase::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QQmlImageProviderBase_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQmlImageProviderBase::Flags::Int() != a0->operator QQmlImageProviderBase::Flags::Int());
#line 2083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
            sipReleaseType(const_cast< ::QQmlImageProviderBase::Flags *>(a0),sipType_QQmlImageProviderBase_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, ne_slot, sipType_QQmlImageProviderBase_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlImageProviderBase::Flags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QQmlImageProviderBase_Flags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QQmlImageProviderBase::Flags::Int() == a0->operator QQmlImageProviderBase::Flags::Int());
#line 2119 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
            sipReleaseType(const_cast< ::QQmlImageProviderBase::Flags *>(a0),sipType_QQmlImageProviderBase_Flags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, eq_slot, sipType_QQmlImageProviderBase_Flags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQmlImageProviderBase_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QQmlImageProviderBase::Flags(*sipCpp ^ a0);
#line 2158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlImageProviderBase::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQmlImageProviderBase_Flags, &a0, &a0State, &a1))
        {
             ::QQmlImageProviderBase::Flags*sipRes;

            sipRes = new  ::QQmlImageProviderBase::Flags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QQmlImageProviderBase_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQmlImageProviderBase_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QQmlImageProviderBase::Flags(*sipCpp | a0);
#line 2230 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___or__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlImageProviderBase::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQmlImageProviderBase_Flags, &a0, &a0State, &a1))
        {
             ::QQmlImageProviderBase::Flags*sipRes;

            sipRes = new  ::QQmlImageProviderBase::Flags((*a0 | a1));
            sipReleaseType(a0,sipType_QQmlImageProviderBase_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQmlImageProviderBase_Flags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QQmlImageProviderBase::Flags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___and__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlImageProviderBase::Flags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QQmlImageProviderBase_Flags, &a0, &a0State, &a1))
        {
             ::QQmlImageProviderBase::Flags*sipRes;

            sipRes = new  ::QQmlImageProviderBase::Flags((*a0 & a1));
            sipReleaseType(a0,sipType_QQmlImageProviderBase_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___invert__(PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___invert__(PyObject *sipSelf)
{
     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QQmlImageProviderBase::Flags*sipRes;

            sipRes = new  ::QQmlImageProviderBase::Flags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flags___int__(PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flags___int__(PyObject *sipSelf)
{
     ::QQmlImageProviderBase::Flags *sipCpp = reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQmlImageProviderBase_Flags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlImageProviderBase_Flags(void *, int);}
static void release_QQmlImageProviderBase_Flags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipCppV);
}


extern "C" {static void assign_QQmlImageProviderBase_Flags(void *, SIP_SSIZE_T, void *);}
static void assign_QQmlImageProviderBase_Flags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQmlImageProviderBase::Flags *>(sipSrc);
}


extern "C" {static void *array_QQmlImageProviderBase_Flags(SIP_SSIZE_T);}
static void *array_QQmlImageProviderBase_Flags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQmlImageProviderBase::Flags[sipNrElem];
}


extern "C" {static void *copy_QQmlImageProviderBase_Flags(const void *, SIP_SSIZE_T);}
static void *copy_QQmlImageProviderBase_Flags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQmlImageProviderBase::Flags(reinterpret_cast<const  ::QQmlImageProviderBase::Flags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQmlImageProviderBase_Flags(sipSimpleWrapper *);}
static void dealloc_QQmlImageProviderBase_Flags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlImageProviderBase_Flags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQmlImageProviderBase_Flags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlImageProviderBase_Flags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQmlImageProviderBase::Flags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQmlImageProviderBase::Flags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QQmlImageProviderBase::Flags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QQmlImageProviderBase::Flags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QQmlImageProviderBase_Flags, &a0, &a0State))
        {
            sipCpp = new  ::QQmlImageProviderBase::Flags(*a0);
            sipReleaseType(const_cast< ::QQmlImageProviderBase::Flags *>(a0),sipType_QQmlImageProviderBase_Flags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QQmlImageProviderBase_Flags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QQmlImageProviderBase_Flags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QQmlImageProviderBase::Flags **sipCppPtr = reinterpret_cast< ::QQmlImageProviderBase::Flags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QQmlImageProviderBase::Flags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QQmlImageProviderBase_Flag)) ||
            sipCanConvertToType(sipPy, sipType_QQmlImageProviderBase_Flags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QQmlImageProviderBase_Flag)))
{
    *sipCppPtr = new QQmlImageProviderBase::Flags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QQmlImageProviderBase::Flags *>(sipConvertToType(sipPy, sipType_QQmlImageProviderBase_Flags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 2498 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QQmlImageProviderBase_Flags[] = {
    {(void *)slot_QQmlImageProviderBase_Flags___hash__, hash_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___bool__, bool_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___ne__, ne_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___eq__, eq_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___ixor__, ixor_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___xor__, xor_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___ior__, ior_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___or__, or_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___iand__, iand_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___and__, and_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___invert__, invert_slot},
    {(void *)slot_QQmlImageProviderBase_Flags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QQmlImageProviderBase_Flags, "\1QQmlImageProviderBase.Flags()\n"
"QQmlImageProviderBase.Flags(Union[QQmlImageProviderBase.Flags, QQmlImageProviderBase.Flag])\n"
"QQmlImageProviderBase.Flags(QQmlImageProviderBase.Flags)");


static pyqt5ClassPluginDef plugin_QQmlImageProviderBase_Flags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlImageProviderBase_Flags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlImageProviderBase__Flags,
        {SIP_NULLPTR},
        &plugin_QQmlImageProviderBase_Flags
    },
    {
        sipNameNr_Flags,
        {24, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlImageProviderBase_Flags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QQmlImageProviderBase_Flags,
    init_type_QQmlImageProviderBase_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlImageProviderBase_Flags,
    assign_QQmlImageProviderBase_Flags,
    array_QQmlImageProviderBase_Flags,
    copy_QQmlImageProviderBase_Flags,
    release_QQmlImageProviderBase_Flags,
    SIP_NULLPTR,
    convertTo_QQmlImageProviderBase_Flags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 2586 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 2590 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


PyDoc_STRVAR(doc_QQmlImageProviderBase_imageType, "imageType(self) -> QQmlImageProviderBase.ImageType");

extern "C" {static PyObject *meth_QQmlImageProviderBase_imageType(PyObject *, PyObject *);}
static PyObject *meth_QQmlImageProviderBase_imageType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QQmlImageProviderBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlImageProviderBase, &sipCpp))
        {
             ::QQmlImageProviderBase::ImageType sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlImageProviderBase, sipName_imageType);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->imageType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQmlImageProviderBase_ImageType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlImageProviderBase, sipName_imageType, doc_QQmlImageProviderBase_imageType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlImageProviderBase_flags, "flags(self) -> QQmlImageProviderBase.Flags");

extern "C" {static PyObject *meth_QQmlImageProviderBase_flags(PyObject *, PyObject *);}
static PyObject *meth_QQmlImageProviderBase_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QQmlImageProviderBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlImageProviderBase, &sipCpp))
        {
             ::QQmlImageProviderBase::Flags*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlImageProviderBase, sipName_flags);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QQmlImageProviderBase::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlImageProviderBase, sipName_flags, doc_QQmlImageProviderBase_flags);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlImageProviderBase(void *, int);}
static void release_QQmlImageProviderBase(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQmlImageProviderBase *>(sipCppV);
}


extern "C" {static void dealloc_QQmlImageProviderBase(sipSimpleWrapper *);}
static void dealloc_QQmlImageProviderBase(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlImageProviderBase(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_QQmlImageProviderBase[] = {
    {SIP_MLNAME_CAST(sipName_flags), meth_QQmlImageProviderBase_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlImageProviderBase_flags)},
    {SIP_MLNAME_CAST(sipName_imageType), meth_QQmlImageProviderBase_imageType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlImageProviderBase_imageType)}
};

static sipEnumMemberDef enummembers_QQmlImageProviderBase[] = {
    {sipName_ForceAsynchronousImageLoading, static_cast<int>( ::QQmlImageProviderBase::ForceAsynchronousImageLoading), 25},
    {sipName_Image, static_cast<int>( ::QQmlImageProviderBase::Image), 27},
    {sipName_ImageResponse, static_cast<int>( ::QQmlImageProviderBase::ImageResponse), 27},
    {sipName_Pixmap, static_cast<int>( ::QQmlImageProviderBase::Pixmap), 27},
    {sipName_Texture, static_cast<int>( ::QQmlImageProviderBase::Texture), 27},
};


static pyqt5ClassPluginDef plugin_QQmlImageProviderBase = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlImageProviderBase = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlImageProviderBase,
        {SIP_NULLPTR},
        &plugin_QQmlImageProviderBase
    },
    {
        sipNameNr_QQmlImageProviderBase,
        {0, 0, 1},
        2, methods_QQmlImageProviderBase,
        5, enummembers_QQmlImageProviderBase,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    SIP_NULLPTR,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlImageProviderBase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlImageProviderBase,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 2756 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 2760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 2763 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


/* Call the instance's destructor. */
extern "C" {static void release_QQmlContext_PropertyPair(void *, int);}
static void release_QQmlContext_PropertyPair(void *sipCppV, int)
{
    delete reinterpret_cast< ::QQmlContext::PropertyPair *>(sipCppV);
}


extern "C" {static void assign_QQmlContext_PropertyPair(void *, SIP_SSIZE_T, void *);}
static void assign_QQmlContext_PropertyPair(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QQmlContext::PropertyPair *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QQmlContext::PropertyPair *>(sipSrc);
}


extern "C" {static void *array_QQmlContext_PropertyPair(SIP_SSIZE_T);}
static void *array_QQmlContext_PropertyPair(SIP_SSIZE_T sipNrElem)
{
    return new  ::QQmlContext::PropertyPair[sipNrElem];
}


extern "C" {static void *copy_QQmlContext_PropertyPair(const void *, SIP_SSIZE_T);}
static void *copy_QQmlContext_PropertyPair(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QQmlContext::PropertyPair(reinterpret_cast<const  ::QQmlContext::PropertyPair *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQmlContext_PropertyPair(sipSimpleWrapper *);}
static void dealloc_QQmlContext_PropertyPair(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlContext_PropertyPair(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QQmlContext_PropertyPair(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlContext_PropertyPair(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QQmlContext::PropertyPair *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QQmlContext::PropertyPair();

            return sipCpp;
        }
    }

    {
        const  ::QQmlContext::PropertyPair* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlContext_PropertyPair, &a0))
        {
            sipCpp = new  ::QQmlContext::PropertyPair(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static PyObject *varget_QQmlContext_PropertyPair_name(void *, PyObject *, PyObject *);}
static PyObject *varget_QQmlContext_PropertyPair_name(void *sipSelf, PyObject *, PyObject *)
{
     ::QString*sipVal;
     ::QQmlContext::PropertyPair *sipCpp = reinterpret_cast< ::QQmlContext::PropertyPair *>(sipSelf);

    sipVal = &sipCpp->name;

    return sipConvertFromType(sipVal, sipType_QString, SIP_NULLPTR);
}


extern "C" {static int varset_QQmlContext_PropertyPair_name(void *, PyObject *, PyObject *);}
static int varset_QQmlContext_PropertyPair_name(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QString*sipVal;
     ::QQmlContext::PropertyPair *sipCpp = reinterpret_cast< ::QQmlContext::PropertyPair *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QString *>(sipForceConvertToType(sipPy, sipType_QString, SIP_NULLPTR, SIP_NOT_NONE, &sipValState, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->name = *sipVal;

    sipReleaseType(sipVal, sipType_QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QQmlContext_PropertyPair_value(void *, PyObject *, PyObject *);}
static PyObject *varget_QQmlContext_PropertyPair_value(void *sipSelf, PyObject *, PyObject *)
{
     ::QVariant*sipVal;
     ::QQmlContext::PropertyPair *sipCpp = reinterpret_cast< ::QQmlContext::PropertyPair *>(sipSelf);

    sipVal = &sipCpp->value;

    return sipConvertFromType(sipVal, sipType_QVariant, SIP_NULLPTR);
}


extern "C" {static int varset_QQmlContext_PropertyPair_value(void *, PyObject *, PyObject *);}
static int varset_QQmlContext_PropertyPair_value(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::QVariant*sipVal;
     ::QQmlContext::PropertyPair *sipCpp = reinterpret_cast< ::QQmlContext::PropertyPair *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::QVariant *>(sipForceConvertToType(sipPy, sipType_QVariant, SIP_NULLPTR, SIP_NOT_NONE, &sipValState, &sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->value = *sipVal;

    sipReleaseType(sipVal, sipType_QVariant, sipValState);

    return 0;
}

sipVariableDef variables_QQmlContext_PropertyPair[] = {
    {InstanceVariable, sipName_name, (PyMethodDef *)varget_QQmlContext_PropertyPair_name, (PyMethodDef *)varset_QQmlContext_PropertyPair_name, SIP_NULLPTR, SIP_NULLPTR},
    {InstanceVariable, sipName_value, (PyMethodDef *)varget_QQmlContext_PropertyPair_value, (PyMethodDef *)varset_QQmlContext_PropertyPair_value, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_QQmlContext_PropertyPair, "\1QQmlContext.PropertyPair()\n"
"QQmlContext.PropertyPair(QQmlContext.PropertyPair)");


static pyqt5ClassPluginDef plugin_QQmlContext_PropertyPair = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlContext_PropertyPair = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlContext__PropertyPair,
        {SIP_NULLPTR},
        &plugin_QQmlContext_PropertyPair
    },
    {
        sipNameNr_PropertyPair,
        {16, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        2, variables_QQmlContext_PropertyPair,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlContext_PropertyPair,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlContext_PropertyPair,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlContext_PropertyPair,
    assign_QQmlContext_PropertyPair,
    array_QQmlContext_PropertyPair,
    copy_QQmlContext_PropertyPair,
    release_QQmlContext_PropertyPair,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 2971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 2975 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 2978 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 2981 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 50 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 2986 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 2989 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 2992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 2995 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 2998 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3001 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3004 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3007 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3010 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 3013 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3016 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3019 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 3022 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3025 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 3028 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 3031 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 3034 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


class sipQQmlContext : public  ::QQmlContext
{
public:
    sipQQmlContext( ::QQmlEngine*, ::QObject*);
    sipQQmlContext( ::QQmlContext*, ::QObject*);
    virtual ~sipQQmlContext();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlContext(const sipQQmlContext &);
    sipQQmlContext &operator = (const sipQQmlContext &);

    char sipPyMethods[7];
};

sipQQmlContext::sipQQmlContext( ::QQmlEngine*a0, ::QObject*a1):  ::QQmlContext(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlContext::sipQQmlContext( ::QQmlContext*a0, ::QObject*a1):  ::QQmlContext(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlContext::~sipQQmlContext()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQmlContext::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlContext);

    return  ::QQmlContext::metaObject();
}

int sipQQmlContext::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQmlContext::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlContext,_c,_id,_a);

    return _id;
}

void *sipQQmlContext::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlContext, _clname, &sipCpp) ? sipCpp :  ::QQmlContext::qt_metacast(_clname));
}

bool sipQQmlContext::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQmlContext::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlContext::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQmlContext::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQmlContext::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQmlContext::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlContext::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQmlContext::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlContext::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQmlContext::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlContext::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQmlContext::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlContext::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQmlContext::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlContext_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QQmlContext_isValid(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_isValid, doc_QQmlContext_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_engine, "engine(self) -> QQmlEngine");

extern "C" {static PyObject *meth_QQmlContext_engine(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlContext, &sipCpp))
        {
             ::QQmlEngine*sipRes;

            sipRes = sipCpp->engine();

            return sipConvertFromType(sipRes,sipType_QQmlEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_engine, doc_QQmlContext_engine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_parentContext, "parentContext(self) -> QQmlContext");

extern "C" {static PyObject *meth_QQmlContext_parentContext(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_parentContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlContext, &sipCpp))
        {
             ::QQmlContext*sipRes;

            sipRes = sipCpp->parentContext();

            return sipConvertFromType(sipRes,sipType_QQmlContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_parentContext, doc_QQmlContext_parentContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_contextObject, "contextObject(self) -> QObject");

extern "C" {static PyObject *meth_QQmlContext_contextObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_contextObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlContext, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->contextObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_contextObject, doc_QQmlContext_contextObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_setContextObject, "setContextObject(self, QObject)");

extern "C" {static PyObject *meth_QQmlContext_setContextObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_setContextObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQmlContext, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->setContextObject(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_setContextObject, doc_QQmlContext_setContextObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_contextProperty, "contextProperty(self, str) -> Any");

extern "C" {static PyObject *meth_QQmlContext_contextProperty(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_contextProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlContext, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->contextProperty(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_contextProperty, doc_QQmlContext_contextProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_setContextProperty, "setContextProperty(self, str, QObject)\n"
"setContextProperty(self, str, Any)");

extern "C" {static PyObject *meth_QQmlContext_setContextProperty(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_setContextProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1;
         ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QQmlContext, &sipCpp, sipType_QString,&a0, &a0State, sipType_QObject, &a1))
        {
            sipCpp->setContextProperty(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QQmlContext, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setContextProperty(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_setContextProperty, doc_QQmlContext_setContextProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_nameForObject, "nameForObject(self, QObject) -> str");

extern "C" {static PyObject *meth_QQmlContext_nameForObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_nameForObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        const  ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQmlContext, &sipCpp, sipType_QObject, &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->nameForObject(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_nameForObject, doc_QQmlContext_nameForObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_resolvedUrl, "resolvedUrl(self, QUrl) -> QUrl");

extern "C" {static PyObject *meth_QQmlContext_resolvedUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_resolvedUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlContext, &sipCpp, sipType_QUrl, &a0))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->resolvedUrl(*a0));

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_resolvedUrl, doc_QQmlContext_resolvedUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_setBaseUrl, "setBaseUrl(self, QUrl)");

extern "C" {static PyObject *meth_QQmlContext_setBaseUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_setBaseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlContext, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setBaseUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_setBaseUrl, doc_QQmlContext_setBaseUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_baseUrl, "baseUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QQmlContext_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlContext, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->baseUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_baseUrl, doc_QQmlContext_baseUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlContext_setContextProperties, "setContextProperties(self, Iterable[QQmlContext.PropertyPair])");

extern "C" {static PyObject *meth_QQmlContext_setContextProperties(PyObject *, PyObject *);}
static PyObject *meth_QQmlContext_setContextProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QQmlContext::PropertyPair>* a0;
        int a0State = 0;
         ::QQmlContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlContext, &sipCpp, sipType_QVector_0100QQmlContext_PropertyPair,&a0, &a0State))
        {
            sipCpp->setContextProperties(*a0);
            sipReleaseType(const_cast<QVector< ::QQmlContext::PropertyPair> *>(a0),sipType_QVector_0100QQmlContext_PropertyPair,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlContext, sipName_setContextProperties, doc_QQmlContext_setContextProperties);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQmlContext(void *, const sipTypeDef *);}
static void *cast_QQmlContext(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQmlContext *sipCpp = reinterpret_cast< ::QQmlContext *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlContext(void *, int);}
static void release_QQmlContext(void *sipCppV, int)
{
     ::QQmlContext *sipCpp = reinterpret_cast< ::QQmlContext *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlContext(sipSimpleWrapper *);}
static void dealloc_QQmlContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlContext *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlContext(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlContext(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlContext *sipCpp = SIP_NULLPTR;

    {
         ::QQmlEngine* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QQmlEngine, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQQmlContext(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QQmlContext* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QQmlContext, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQQmlContext(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlContext[] = {{9, 0, 1}};


static PyMethodDef methods_QQmlContext[] = {
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QQmlContext_baseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_baseUrl)},
    {SIP_MLNAME_CAST(sipName_contextObject), meth_QQmlContext_contextObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_contextObject)},
    {SIP_MLNAME_CAST(sipName_contextProperty), meth_QQmlContext_contextProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_contextProperty)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QQmlContext_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_engine)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QQmlContext_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_isValid)},
    {SIP_MLNAME_CAST(sipName_nameForObject), meth_QQmlContext_nameForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_nameForObject)},
    {SIP_MLNAME_CAST(sipName_parentContext), meth_QQmlContext_parentContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_parentContext)},
    {SIP_MLNAME_CAST(sipName_resolvedUrl), meth_QQmlContext_resolvedUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_resolvedUrl)},
    {SIP_MLNAME_CAST(sipName_setBaseUrl), meth_QQmlContext_setBaseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_setBaseUrl)},
    {SIP_MLNAME_CAST(sipName_setContextObject), meth_QQmlContext_setContextObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_setContextObject)},
    {SIP_MLNAME_CAST(sipName_setContextProperties), meth_QQmlContext_setContextProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_setContextProperties)},
    {SIP_MLNAME_CAST(sipName_setContextProperty), meth_QQmlContext_setContextProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlContext_setContextProperty)}
};

PyDoc_STRVAR(doc_QQmlContext, "\1QQmlContext(QQmlEngine, parent: QObject = None)\n"
"QQmlContext(QQmlContext, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QQmlContext = {
    & ::QQmlContext::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlContext = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlContext,
        {SIP_NULLPTR},
        &plugin_QQmlContext
    },
    {
        sipNameNr_QQmlContext,
        {0, 0, 1},
        12, methods_QQmlContext,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlContext,
    -1,
    -1,
    supers_QQmlContext,
    SIP_NULLPTR,
    init_type_QQmlContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlContext,
    cast_QQmlContext,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcomponent.sip"
#include <qqmlcomponent.h>
#line 3768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 3772 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 3775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 3778 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 3781 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 3784 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 3787 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 3790 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3793 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 3796 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 3799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3802 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3805 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 3808 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 3811 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3814 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 3817 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3820 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 3823 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 3826 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 3829 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 3832 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 3835 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


class sipQQmlComponent : public  ::QQmlComponent
{
public:
    sipQQmlComponent( ::QQmlEngine*, ::QObject*);
    sipQQmlComponent( ::QQmlEngine*,const  ::QString&, ::QObject*);
    sipQQmlComponent( ::QQmlEngine*,const  ::QString&, ::QQmlComponent::CompilationMode, ::QObject*);
    sipQQmlComponent( ::QQmlEngine*,const  ::QUrl&, ::QObject*);
    sipQQmlComponent( ::QQmlEngine*,const  ::QUrl&, ::QQmlComponent::CompilationMode, ::QObject*);
    sipQQmlComponent( ::QObject*);
    virtual ~sipQQmlComponent();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void completeCreate() SIP_OVERRIDE;
     ::QObject* beginCreate( ::QQmlContext*) SIP_OVERRIDE;
     ::QObject* create( ::QQmlContext*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlComponent(const sipQQmlComponent &);
    sipQQmlComponent &operator = (const sipQQmlComponent &);

    char sipPyMethods[10];
};

sipQQmlComponent::sipQQmlComponent( ::QQmlEngine*a0, ::QObject*a1):  ::QQmlComponent(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent( ::QQmlEngine*a0,const  ::QString& a1, ::QObject*a2):  ::QQmlComponent(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent( ::QQmlEngine*a0,const  ::QString& a1, ::QQmlComponent::CompilationMode a2, ::QObject*a3):  ::QQmlComponent(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent( ::QQmlEngine*a0,const  ::QUrl& a1, ::QObject*a2):  ::QQmlComponent(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent( ::QQmlEngine*a0,const  ::QUrl& a1, ::QQmlComponent::CompilationMode a2, ::QObject*a3):  ::QQmlComponent(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent( ::QObject*a0):  ::QQmlComponent(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::~sipQQmlComponent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQmlComponent::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlComponent);

    return  ::QQmlComponent::metaObject();
}

int sipQQmlComponent::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQmlComponent::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlComponent,_c,_id,_a);

    return _id;
}

void *sipQQmlComponent::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlComponent, _clname, &sipCpp) ? sipCpp :  ::QQmlComponent::qt_metacast(_clname));
}

void sipQQmlComponent::completeCreate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_completeCreate);

    if (!sipMeth)
    {
         ::QQmlComponent::completeCreate();
        return;
    }

    extern void sipVH_QtQml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtQml_8(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QObject* sipQQmlComponent::beginCreate( ::QQmlContext*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_beginCreate);

    if (!sipMeth)
        return  ::QQmlComponent::beginCreate(a0);

    extern  ::QObject* sipVH_QtQml_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQmlContext*);

    return sipVH_QtQml_7(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QObject* sipQQmlComponent::create( ::QQmlContext*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_create);

    if (!sipMeth)
        return  ::QQmlComponent::create(a0);

    extern  ::QObject* sipVH_QtQml_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QQmlContext*);

    return sipVH_QtQml_7(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlComponent::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQmlComponent::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlComponent::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQmlComponent::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQmlComponent::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQmlComponent::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQmlComponent::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQmlComponent::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQmlComponent::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQmlComponent::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlComponent_status, "status(self) -> QQmlComponent.Status");

extern "C" {static PyObject *meth_QQmlComponent_status(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
             ::QQmlComponent::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQmlComponent_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_status, doc_QQmlComponent_status);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isNull(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isNull, doc_QQmlComponent_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_isReady, "isReady(self) -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isReady(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReady();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isReady, doc_QQmlComponent_isReady);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_isError, "isError(self) -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isError(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isError, doc_QQmlComponent_isError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_isLoading, "isLoading(self) -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isLoading(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isLoading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLoading();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isLoading, doc_QQmlComponent_isLoading);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_errors, "errors(self) -> List[QQmlError]");

extern "C" {static PyObject *meth_QQmlComponent_errors(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_errors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            QList< ::QQmlError>*sipRes;

            sipRes = new QList< ::QQmlError>(sipCpp->errors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QQmlError,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_errors, doc_QQmlComponent_errors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_progress, "progress(self) -> float");

extern "C" {static PyObject *meth_QQmlComponent_progress(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_progress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
             ::qreal sipRes;

            sipRes = sipCpp->progress();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_progress, doc_QQmlComponent_progress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QQmlComponent_url(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_url, doc_QQmlComponent_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_create, "create(self, context: QQmlContext = None) -> QObject\n"
"create(self, QQmlIncubator, context: QQmlContext = None, forContext: QQmlContext = None)");

extern "C" {static PyObject *meth_QQmlComponent_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQmlContext* a0 = 0;
         ::QQmlComponent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QQmlContext, &a0))
        {
             ::QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQmlComponent::create(a0) : sipCpp->create(a0));

            return sipConvertFromType(sipRes,sipType_QObject,Py_None);
        }
    }

    {
         ::QQmlIncubator* a0;
         ::QQmlContext* a1 = 0;
         ::QQmlContext* a2 = 0;
         ::QQmlComponent *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_context,
            sipName_forContext,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J8J8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QQmlIncubator, &a0, sipType_QQmlContext, &a1, sipType_QQmlContext, &a2))
        {
            sipCpp->create(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_create, doc_QQmlComponent_create);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_beginCreate, "beginCreate(self, QQmlContext) -> QObject");

extern "C" {static PyObject *meth_QQmlComponent_beginCreate(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_beginCreate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQmlContext* a0;
         ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QQmlContext, &a0))
        {
             ::QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQmlComponent::beginCreate(a0) : sipCpp->beginCreate(a0));

            return sipConvertFromType(sipRes,sipType_QObject,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_beginCreate, doc_QQmlComponent_beginCreate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_completeCreate, "completeCreate(self)");

extern "C" {static PyObject *meth_QQmlComponent_completeCreate(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_completeCreate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QQmlComponent::completeCreate() : sipCpp->completeCreate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_completeCreate, doc_QQmlComponent_completeCreate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_creationContext, "creationContext(self) -> QQmlContext");

extern "C" {static PyObject *meth_QQmlComponent_creationContext(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_creationContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
             ::QQmlContext*sipRes;

            sipRes = sipCpp->creationContext();

            return sipConvertFromType(sipRes,sipType_QQmlContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_creationContext, doc_QQmlComponent_creationContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_loadUrl, "loadUrl(self, QUrl)\n"
"loadUrl(self, QUrl, QQmlComponent.CompilationMode)");

extern "C" {static PyObject *meth_QQmlComponent_loadUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_loadUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->loadUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QUrl* a0;
         ::QQmlComponent::CompilationMode a1;
         ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QUrl, &a0, sipType_QQmlComponent_CompilationMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->loadUrl(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_loadUrl, doc_QQmlComponent_loadUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_setData, "setData(self, Union[QByteArray, bytes, bytearray], QUrl)");

extern "C" {static PyObject *meth_QQmlComponent_setData(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QUrl* a1;
         ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QUrl, &a1))
        {
            sipCpp->setData(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_setData, doc_QQmlComponent_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlComponent_engine, "engine(self) -> QQmlEngine");

extern "C" {static PyObject *meth_QQmlComponent_engine(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
             ::QQmlEngine*sipRes;

            sipRes = sipCpp->engine();

            return sipConvertFromType(sipRes,sipType_QQmlEngine,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_engine, doc_QQmlComponent_engine);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQmlComponent(void *, const sipTypeDef *);}
static void *cast_QQmlComponent(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQmlComponent *sipCpp = reinterpret_cast< ::QQmlComponent *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlComponent(void *, int);}
static void release_QQmlComponent(void *sipCppV, int)
{
     ::QQmlComponent *sipCpp = reinterpret_cast< ::QQmlComponent *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlComponent(sipSimpleWrapper *);}
static void dealloc_QQmlComponent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlComponent *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlComponent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlComponent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlComponent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlComponent *sipCpp = SIP_NULLPTR;

    {
         ::QQmlEngine* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QQmlEngine, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQQmlComponent(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QQmlEngine* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J1|JH", sipType_QQmlEngine, &a0, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQQmlComponent(a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QQmlEngine* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QQmlComponent::CompilationMode a2;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J1E|JH", sipType_QQmlEngine, &a0, sipType_QString,&a1, &a1State, sipType_QQmlComponent_CompilationMode, &a2, sipType_QObject, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQQmlComponent(a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QQmlEngine* a0;
        const  ::QUrl* a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J9|JH", sipType_QQmlEngine, &a0, sipType_QUrl, &a1, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQQmlComponent(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QQmlEngine* a0;
        const  ::QUrl* a1;
         ::QQmlComponent::CompilationMode a2;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J9E|JH", sipType_QQmlEngine, &a0, sipType_QUrl, &a1, sipType_QQmlComponent_CompilationMode, &a2, sipType_QObject, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQQmlComponent(a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQmlComponent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlComponent[] = {{9, 0, 1}};


static PyMethodDef methods_QQmlComponent[] = {
    {SIP_MLNAME_CAST(sipName_beginCreate), meth_QQmlComponent_beginCreate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_beginCreate)},
    {SIP_MLNAME_CAST(sipName_completeCreate), meth_QQmlComponent_completeCreate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_completeCreate)},
    {SIP_MLNAME_CAST(sipName_create), SIP_MLMETH_CAST(meth_QQmlComponent_create), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQmlComponent_create)},
    {SIP_MLNAME_CAST(sipName_creationContext), meth_QQmlComponent_creationContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_creationContext)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QQmlComponent_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_engine)},
    {SIP_MLNAME_CAST(sipName_errors), meth_QQmlComponent_errors, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_errors)},
    {SIP_MLNAME_CAST(sipName_isError), meth_QQmlComponent_isError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_isError)},
    {SIP_MLNAME_CAST(sipName_isLoading), meth_QQmlComponent_isLoading, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_isLoading)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QQmlComponent_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_isNull)},
    {SIP_MLNAME_CAST(sipName_isReady), meth_QQmlComponent_isReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_isReady)},
    {SIP_MLNAME_CAST(sipName_loadUrl), meth_QQmlComponent_loadUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_loadUrl)},
    {SIP_MLNAME_CAST(sipName_progress), meth_QQmlComponent_progress, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_progress)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QQmlComponent_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_setData)},
    {SIP_MLNAME_CAST(sipName_status), meth_QQmlComponent_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_status)},
    {SIP_MLNAME_CAST(sipName_url), meth_QQmlComponent_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_url)}
};

static sipEnumMemberDef enummembers_QQmlComponent[] = {
    {sipName_Asynchronous, static_cast<int>( ::QQmlComponent::Asynchronous), 14},
    {sipName_Error, static_cast<int>( ::QQmlComponent::Error), 15},
    {sipName_Loading, static_cast<int>( ::QQmlComponent::Loading), 15},
    {sipName_Null, static_cast<int>( ::QQmlComponent::Null), 15},
    {sipName_PreferSynchronous, static_cast<int>( ::QQmlComponent::PreferSynchronous), 14},
    {sipName_Ready, static_cast<int>( ::QQmlComponent::Ready), 15},
};

PyDoc_STRVAR(doc_QQmlComponent, "\1QQmlComponent(QQmlEngine, parent: QObject = None)\n"
"QQmlComponent(QQmlEngine, str, parent: QObject = None)\n"
"QQmlComponent(QQmlEngine, str, QQmlComponent.CompilationMode, parent: QObject = None)\n"
"QQmlComponent(QQmlEngine, QUrl, parent: QObject = None)\n"
"QQmlComponent(QQmlEngine, QUrl, QQmlComponent.CompilationMode, parent: QObject = None)\n"
"QQmlComponent(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQmlComponent[] = {
    {"progressChanged(qreal)", "\1progressChanged(self, float)", SIP_NULLPTR, SIP_NULLPTR},
    {"statusChanged(QQmlComponent::Status)", "\1statusChanged(self, QQmlComponent.Status)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQmlComponent = {
    & ::QQmlComponent::staticMetaObject,
    0,
    signals_QQmlComponent,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlComponent = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlComponent,
        {SIP_NULLPTR},
        &plugin_QQmlComponent
    },
    {
        sipNameNr_QQmlComponent,
        {0, 0, 1},
        15, methods_QQmlComponent,
        6, enummembers_QQmlComponent,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlComponent,
    -1,
    -1,
    supers_QQmlComponent,
    SIP_NULLPTR,
    init_type_QQmlComponent,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlComponent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlComponent,
    cast_QQmlComponent,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlapplicationengine.sip"
#include <qqmlapplicationengine.h>
#line 4878 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 4882 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 4885 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 4888 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 4891 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4894 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4897 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 4900 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4903 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 4906 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 4909 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 4912 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 4915 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 4918 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlnetworkaccessmanagerfactory.sip"
#include <qqmlnetworkaccessmanagerfactory.h>
#line 4921 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 4924 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 4927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 4930 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 4933 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 4936 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4939 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 4942 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 4945 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4948 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 4951 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 4954 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 4957 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 4960 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 4963 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


class sipQQmlApplicationEngine : public  ::QQmlApplicationEngine
{
public:
    sipQQmlApplicationEngine( ::QObject*);
    sipQQmlApplicationEngine(const  ::QUrl&, ::QObject*);
    sipQQmlApplicationEngine(const  ::QString&, ::QObject*);
    virtual ~sipQQmlApplicationEngine();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlApplicationEngine(const sipQQmlApplicationEngine &);
    sipQQmlApplicationEngine &operator = (const sipQQmlApplicationEngine &);

    char sipPyMethods[7];
};

sipQQmlApplicationEngine::sipQQmlApplicationEngine( ::QObject*a0):  ::QQmlApplicationEngine(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlApplicationEngine::sipQQmlApplicationEngine(const  ::QUrl& a0, ::QObject*a1):  ::QQmlApplicationEngine(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlApplicationEngine::sipQQmlApplicationEngine(const  ::QString& a0, ::QObject*a1):  ::QQmlApplicationEngine(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlApplicationEngine::~sipQQmlApplicationEngine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQmlApplicationEngine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlApplicationEngine);

    return  ::QQmlApplicationEngine::metaObject();
}

int sipQQmlApplicationEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQmlApplicationEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlApplicationEngine,_c,_id,_a);

    return _id;
}

void *sipQQmlApplicationEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlApplicationEngine, _clname, &sipCpp) ? sipCpp :  ::QQmlApplicationEngine::qt_metacast(_clname));
}

bool sipQQmlApplicationEngine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQmlApplicationEngine::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlApplicationEngine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQmlApplicationEngine::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQQmlApplicationEngine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQmlApplicationEngine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlApplicationEngine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQmlApplicationEngine::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlApplicationEngine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQmlApplicationEngine::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlApplicationEngine::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQmlApplicationEngine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlApplicationEngine::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQmlApplicationEngine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlApplicationEngine_rootObjects, "rootObjects(self) -> List[QObject]");

extern "C" {static PyObject *meth_QQmlApplicationEngine_rootObjects(PyObject *, PyObject *);}
static PyObject *meth_QQmlApplicationEngine_rootObjects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlApplicationEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlApplicationEngine, &sipCpp))
        {
            QList< ::QObject*>*sipRes;

            sipRes = new QList< ::QObject*>(sipCpp->rootObjects());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlApplicationEngine, sipName_rootObjects, doc_QQmlApplicationEngine_rootObjects);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlApplicationEngine_load, "load(self, QUrl)\n"
"load(self, str)");

extern "C" {static PyObject *meth_QQmlApplicationEngine_load(PyObject *, PyObject *);}
static PyObject *meth_QQmlApplicationEngine_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QQmlApplicationEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlApplicationEngine, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlApplicationEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlApplicationEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlApplicationEngine, sipName_load, doc_QQmlApplicationEngine_load);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlApplicationEngine_loadData, "loadData(self, Union[QByteArray, bytes, bytearray], url: QUrl = QUrl())");

extern "C" {static PyObject *meth_QQmlApplicationEngine_loadData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlApplicationEngine_loadData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QUrl& a1def = QUrl();
        const  ::QUrl* a1 = &a1def;
         ::QQmlApplicationEngine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_url,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J9", &sipSelf, sipType_QQmlApplicationEngine, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QUrl, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->loadData(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlApplicationEngine, sipName_loadData, doc_QQmlApplicationEngine_loadData);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQmlApplicationEngine(void *, const sipTypeDef *);}
static void *cast_QQmlApplicationEngine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQmlApplicationEngine *sipCpp = reinterpret_cast< ::QQmlApplicationEngine *>(sipCppV);

    if (targetType == sipType_QQmlEngine)
        return static_cast< ::QQmlEngine *>(sipCpp);

    if (targetType == sipType_QJSEngine)
        return static_cast< ::QJSEngine *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlApplicationEngine(void *, int);}
static void release_QQmlApplicationEngine(void *sipCppV, int)
{
     ::QQmlApplicationEngine *sipCpp = reinterpret_cast< ::QQmlApplicationEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlApplicationEngine(sipSimpleWrapper *);}
static void dealloc_QQmlApplicationEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlApplicationEngine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlApplicationEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlApplicationEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlApplicationEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlApplicationEngine *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQmlApplicationEngine(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QUrl, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQQmlApplicationEngine(*a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQQmlApplicationEngine(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlApplicationEngine[] = {{18, 255, 1}};


static PyMethodDef methods_QQmlApplicationEngine[] = {
    {SIP_MLNAME_CAST(sipName_load), meth_QQmlApplicationEngine_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlApplicationEngine_load)},
    {SIP_MLNAME_CAST(sipName_loadData), SIP_MLMETH_CAST(meth_QQmlApplicationEngine_loadData), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQmlApplicationEngine_loadData)},
    {SIP_MLNAME_CAST(sipName_rootObjects), meth_QQmlApplicationEngine_rootObjects, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlApplicationEngine_rootObjects)}
};

PyDoc_STRVAR(doc_QQmlApplicationEngine, "\1QQmlApplicationEngine(parent: QObject = None)\n"
"QQmlApplicationEngine(QUrl, parent: QObject = None)\n"
"QQmlApplicationEngine(str, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQmlApplicationEngine[] = {
    {"objectCreated(QObject*,QUrl)", "\1objectCreated(self, QObject, QUrl)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQmlApplicationEngine = {
    & ::QQmlApplicationEngine::staticMetaObject,
    0,
    signals_QQmlApplicationEngine,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlApplicationEngine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlApplicationEngine,
        {SIP_NULLPTR},
        &plugin_QQmlApplicationEngine
    },
    {
        sipNameNr_QQmlApplicationEngine,
        {0, 0, 1},
        3, methods_QQmlApplicationEngine,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlApplicationEngine,
    -1,
    -1,
    supers_QQmlApplicationEngine,
    SIP_NULLPTR,
    init_type_QQmlApplicationEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlApplicationEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlApplicationEngine,
    cast_QQmlApplicationEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 59 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 5482 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 5486 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 5489 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5492 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 5495 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5498 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 5501 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 5504 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 69 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 5507 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 5510 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 5513 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlnetworkaccessmanagerfactory.sip"
#include <qqmlnetworkaccessmanagerfactory.h>
#line 5516 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 5519 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 5522 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 5525 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 5528 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 5531 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5534 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 5537 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 5540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5543 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 5546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 5549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 5552 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 5555 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 5558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 5561 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 5564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


class sipQQmlEngine : public  ::QQmlEngine
{
public:
    sipQQmlEngine( ::QObject*);
    virtual ~sipQQmlEngine();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlEngine(const sipQQmlEngine &);
    sipQQmlEngine &operator = (const sipQQmlEngine &);

    char sipPyMethods[7];
};

sipQQmlEngine::sipQQmlEngine( ::QObject*a0):  ::QQmlEngine(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlEngine::~sipQQmlEngine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQQmlEngine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlEngine);

    return  ::QQmlEngine::metaObject();
}

int sipQQmlEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QQmlEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlEngine,_c,_id,_a);

    return _id;
}

void *sipQQmlEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlEngine, _clname, &sipCpp) ? sipCpp :  ::QQmlEngine::qt_metacast(_clname));
}

void sipQQmlEngine::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QQmlEngine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlEngine::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QQmlEngine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlEngine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QQmlEngine::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlEngine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QQmlEngine::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQQmlEngine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QQmlEngine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQQmlEngine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QQmlEngine::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQQmlEngine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QQmlEngine::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QQmlEngine_rootContext, "rootContext(self) -> QQmlContext");

extern "C" {static PyObject *meth_QQmlEngine_rootContext(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_rootContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
             ::QQmlContext*sipRes;

            sipRes = sipCpp->rootContext();

            return sipConvertFromType(sipRes,sipType_QQmlContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_rootContext, doc_QQmlEngine_rootContext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_clearComponentCache, "clearComponentCache(self)");

extern "C" {static PyObject *meth_QQmlEngine_clearComponentCache(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_clearComponentCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            sipCpp->clearComponentCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_clearComponentCache, doc_QQmlEngine_clearComponentCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_trimComponentCache, "trimComponentCache(self)");

extern "C" {static PyObject *meth_QQmlEngine_trimComponentCache(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_trimComponentCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            sipCpp->trimComponentCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_trimComponentCache, doc_QQmlEngine_trimComponentCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_importPathList, "importPathList(self) -> List[str]");

extern "C" {static PyObject *meth_QQmlEngine_importPathList(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_importPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->importPathList());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_importPathList, doc_QQmlEngine_importPathList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setImportPathList, "setImportPathList(self, Iterable[str])");

extern "C" {static PyObject *meth_QQmlEngine_setImportPathList(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setImportPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setImportPathList(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setImportPathList, doc_QQmlEngine_setImportPathList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_addImportPath, "addImportPath(self, str)");

extern "C" {static PyObject *meth_QQmlEngine_addImportPath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_addImportPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->addImportPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_addImportPath, doc_QQmlEngine_addImportPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_pluginPathList, "pluginPathList(self) -> List[str]");

extern "C" {static PyObject *meth_QQmlEngine_pluginPathList(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_pluginPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->pluginPathList());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_pluginPathList, doc_QQmlEngine_pluginPathList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setPluginPathList, "setPluginPathList(self, Iterable[str])");

extern "C" {static PyObject *meth_QQmlEngine_setPluginPathList(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setPluginPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setPluginPathList(*a0);
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setPluginPathList, doc_QQmlEngine_setPluginPathList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_addPluginPath, "addPluginPath(self, str)");

extern "C" {static PyObject *meth_QQmlEngine_addPluginPath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_addPluginPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->addPluginPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_addPluginPath, doc_QQmlEngine_addPluginPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_addNamedBundle, "addNamedBundle(self, str, str) -> bool");

extern "C" {static PyObject *meth_QQmlEngine_addNamedBundle(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_addNamedBundle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addNamedBundle(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_addNamedBundle, doc_QQmlEngine_addNamedBundle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_importPlugin, "importPlugin(self, str, str, Iterable[QQmlError]) -> bool");

extern "C" {static PyObject *meth_QQmlEngine_importPlugin(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_importPlugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        QList< ::QQmlError>* a2;
        PyObject *a2Wrapper;
        int a2State = 0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1@J0", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2Wrapper, sipType_QList_0100QQmlError,&a2, &a2State))
        {
            bool sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 82 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
        int orig_size = (a2 ? a2->size() : 0);
        
        sipRes = sipCpp->importPlugin(*a0, *a1, a2);
        
        if (a2)
        {
            for (int i = a2->size(); i > orig_size; --i)
            {
                QQmlError *new_error = new QQmlError(a2->at(i - orig_size - 1));
                PyObject *new_error_obj = sipConvertFromNewType(new_error, sipType_QQmlError, 0);
                
                if (!new_error_obj)
                {
                    delete new_error;
                    sipError = sipErrorFail;
                    break;
                }
                
                if (PyList_Insert(a2Wrapper, 0, new_error_obj) < 0)
                {
                    Py_DECREF(new_error_obj);
                    sipError = sipErrorFail;
                    break;
                }
                
                Py_DECREF(new_error_obj);
            }
        }
#line 6100 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a2,sipType_QList_0100QQmlError,a2State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return PyBool_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_importPlugin, doc_QQmlEngine_importPlugin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setNetworkAccessManagerFactory, "setNetworkAccessManagerFactory(self, QQmlNetworkAccessManagerFactory)");

extern "C" {static PyObject *meth_QQmlEngine_setNetworkAccessManagerFactory(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setNetworkAccessManagerFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlNetworkAccessManagerFactory* a0;
        PyObject *a0Keep;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QQmlEngine, &sipCpp, &a0Keep, sipType_QQmlNetworkAccessManagerFactory, &a0))
        {
            sipCpp->setNetworkAccessManagerFactory(a0);

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setNetworkAccessManagerFactory, doc_QQmlEngine_setNetworkAccessManagerFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_networkAccessManagerFactory, "networkAccessManagerFactory(self) -> QQmlNetworkAccessManagerFactory");

extern "C" {static PyObject *meth_QQmlEngine_networkAccessManagerFactory(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_networkAccessManagerFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
             ::QQmlNetworkAccessManagerFactory*sipRes;

            sipRes = sipCpp->networkAccessManagerFactory();

            return sipConvertFromType(sipRes,sipType_QQmlNetworkAccessManagerFactory,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_networkAccessManagerFactory, doc_QQmlEngine_networkAccessManagerFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_networkAccessManager, "networkAccessManager(self) -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QQmlEngine_networkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_networkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
             ::QNetworkAccessManager*sipRes;

            sipRes = sipCpp->networkAccessManager();

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_networkAccessManager, doc_QQmlEngine_networkAccessManager);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_addImageProvider, "addImageProvider(self, str, QQmlImageProviderBase)");

extern "C" {static PyObject *meth_QQmlEngine_addImageProvider(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_addImageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlImageProviderBase* a1;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J:", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QQmlImageProviderBase, &a1))
        {
            sipCpp->addImageProvider(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_addImageProvider, doc_QQmlEngine_addImageProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_imageProvider, "imageProvider(self, str) -> QQmlImageProviderBase");

extern "C" {static PyObject *meth_QQmlEngine_imageProvider(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_imageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QQmlImageProviderBase*sipRes;

            sipRes = sipCpp->imageProvider(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QQmlImageProviderBase,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_imageProvider, doc_QQmlEngine_imageProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_removeImageProvider, "removeImageProvider(self, str)");

extern "C" {static PyObject *meth_QQmlEngine_removeImageProvider(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_removeImageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeImageProvider(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_removeImageProvider, doc_QQmlEngine_removeImageProvider);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setIncubationController, "setIncubationController(self, QQmlIncubationController)");

extern "C" {static PyObject *meth_QQmlEngine_setIncubationController(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setIncubationController(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlIncubationController* a0;
        PyObject *a0Keep;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QQmlEngine, &sipCpp, &a0Keep, sipType_QQmlIncubationController, &a0))
        {
            sipCpp->setIncubationController(a0);

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setIncubationController, doc_QQmlEngine_setIncubationController);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_incubationController, "incubationController(self) -> QQmlIncubationController");

extern "C" {static PyObject *meth_QQmlEngine_incubationController(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_incubationController(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
             ::QQmlIncubationController*sipRes;

            sipRes = sipCpp->incubationController();

            return sipConvertFromType(sipRes,sipType_QQmlIncubationController,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_incubationController, doc_QQmlEngine_incubationController);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setOfflineStoragePath, "setOfflineStoragePath(self, str)");

extern "C" {static PyObject *meth_QQmlEngine_setOfflineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setOfflineStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setOfflineStoragePath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setOfflineStoragePath, doc_QQmlEngine_setOfflineStoragePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_offlineStoragePath, "offlineStoragePath(self) -> str");

extern "C" {static PyObject *meth_QQmlEngine_offlineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_offlineStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->offlineStoragePath());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_offlineStoragePath, doc_QQmlEngine_offlineStoragePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_baseUrl, "baseUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QQmlEngine_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->baseUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_baseUrl, doc_QQmlEngine_baseUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setBaseUrl, "setBaseUrl(self, QUrl)");

extern "C" {static PyObject *meth_QQmlEngine_setBaseUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setBaseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setBaseUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setBaseUrl, doc_QQmlEngine_setBaseUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_outputWarningsToStandardError, "outputWarningsToStandardError(self) -> bool");

extern "C" {static PyObject *meth_QQmlEngine_outputWarningsToStandardError(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_outputWarningsToStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->outputWarningsToStandardError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_outputWarningsToStandardError, doc_QQmlEngine_outputWarningsToStandardError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setOutputWarningsToStandardError, "setOutputWarningsToStandardError(self, bool)");

extern "C" {static PyObject *meth_QQmlEngine_setOutputWarningsToStandardError(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setOutputWarningsToStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQmlEngine, &sipCpp, &a0))
        {
            sipCpp->setOutputWarningsToStandardError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setOutputWarningsToStandardError, doc_QQmlEngine_setOutputWarningsToStandardError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_contextForObject, "contextForObject(QObject) -> QQmlContext");

extern "C" {static PyObject *meth_QQmlEngine_contextForObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_contextForObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
             ::QQmlContext*sipRes;

            sipRes =  ::QQmlEngine::contextForObject(a0);

            return sipConvertFromType(sipRes,sipType_QQmlContext,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_contextForObject, doc_QQmlEngine_contextForObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setContextForObject, "setContextForObject(QObject, QQmlContext)");

extern "C" {static PyObject *meth_QQmlEngine_setContextForObject(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setContextForObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QQmlContext* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QObject, &a0, sipType_QQmlContext, &a1))
        {
             ::QQmlEngine::setContextForObject(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setContextForObject, doc_QQmlEngine_setContextForObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_setObjectOwnership, "setObjectOwnership(QObject, QQmlEngine.ObjectOwnership)");

extern "C" {static PyObject *meth_QQmlEngine_setObjectOwnership(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_setObjectOwnership(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        PyObject *a0Wrapper;
         ::QQmlEngine::ObjectOwnership a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "@J8E", &a0Wrapper, sipType_QObject, &a0, sipType_QQmlEngine_ObjectOwnership, &a1))
        {
#line 137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
        QQmlEngine::ObjectOwnership old = QQmlEngine::objectOwnership(a0);
        
        QQmlEngine::setObjectOwnership(a0, a1);
        
        if (old != a1 && !a0->parent())
        {
            if (old == QQmlEngine::CppOwnership)
                sipTransferTo(a0Wrapper, Py_None);
            else
                sipTransferBack(a0Wrapper);
        }
#line 6615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_setObjectOwnership, doc_QQmlEngine_setObjectOwnership);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_objectOwnership, "objectOwnership(QObject) -> QQmlEngine.ObjectOwnership");

extern "C" {static PyObject *meth_QQmlEngine_objectOwnership(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_objectOwnership(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
             ::QQmlEngine::ObjectOwnership sipRes;

            sipRes =  ::QQmlEngine::objectOwnership(a0);

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QQmlEngine_ObjectOwnership);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_objectOwnership, doc_QQmlEngine_objectOwnership);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QQmlEngine_event(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QQmlEngine::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_event, doc_QQmlEngine_event);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_offlineStorageDatabaseFilePath, "offlineStorageDatabaseFilePath(self, str) -> str");

extern "C" {static PyObject *meth_QQmlEngine_offlineStorageDatabaseFilePath(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_offlineStorageDatabaseFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQmlEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->offlineStorageDatabaseFilePath(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_offlineStorageDatabaseFilePath, doc_QQmlEngine_offlineStorageDatabaseFilePath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_retranslate, "retranslate(self)");

extern "C" {static PyObject *meth_QQmlEngine_retranslate(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_retranslate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlEngine, &sipCpp))
        {
            sipCpp->retranslate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_retranslate, doc_QQmlEngine_retranslate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QQmlEngine_singletonInstance, "singletonInstance(self, int) -> QObject");

extern "C" {static PyObject *meth_QQmlEngine_singletonInstance(PyObject *, PyObject *);}
static PyObject *meth_QQmlEngine_singletonInstance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QQmlEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QQmlEngine, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            sipErrorState sipError = sipErrorNone;

#line 176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlengine.sip"
        QJSValue instance = sipCpp->singletonInstance<QJSValue>(a0);
        
        if (instance.isQObject())
        {
            sipRes = sipConvertFromType(instance.toQObject(), sipType_QObject, NULL);
                
            if (!sipRes)
                sipError = sipErrorFail;
        }
        else
        {
            sipRes = Py_None;
            Py_INCREF(sipRes);
        }
#line 6777 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlEngine, sipName_singletonInstance, doc_QQmlEngine_singletonInstance);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QQmlEngine(void *, const sipTypeDef *);}
static void *cast_QQmlEngine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QQmlEngine *sipCpp = reinterpret_cast< ::QQmlEngine *>(sipCppV);

    if (targetType == sipType_QJSEngine)
        return static_cast< ::QJSEngine *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlEngine(void *, int);}
static void release_QQmlEngine(void *sipCppV, int)
{
     ::QQmlEngine *sipCpp = reinterpret_cast< ::QQmlEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlEngine(sipSimpleWrapper *);}
static void dealloc_QQmlEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlEngine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlEngine *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQmlEngine(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlEngine[] = {{0, 255, 1}};


static PyMethodDef methods_QQmlEngine[] = {
    {SIP_MLNAME_CAST(sipName_addImageProvider), meth_QQmlEngine_addImageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_addImageProvider)},
    {SIP_MLNAME_CAST(sipName_addImportPath), meth_QQmlEngine_addImportPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_addImportPath)},
    {SIP_MLNAME_CAST(sipName_addNamedBundle), meth_QQmlEngine_addNamedBundle, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_addNamedBundle)},
    {SIP_MLNAME_CAST(sipName_addPluginPath), meth_QQmlEngine_addPluginPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_addPluginPath)},
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QQmlEngine_baseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_baseUrl)},
    {SIP_MLNAME_CAST(sipName_clearComponentCache), meth_QQmlEngine_clearComponentCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_clearComponentCache)},
    {SIP_MLNAME_CAST(sipName_contextForObject), meth_QQmlEngine_contextForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_contextForObject)},
    {SIP_MLNAME_CAST(sipName_event), meth_QQmlEngine_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_event)},
    {SIP_MLNAME_CAST(sipName_imageProvider), meth_QQmlEngine_imageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_imageProvider)},
    {SIP_MLNAME_CAST(sipName_importPathList), meth_QQmlEngine_importPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_importPathList)},
    {SIP_MLNAME_CAST(sipName_importPlugin), meth_QQmlEngine_importPlugin, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_importPlugin)},
    {SIP_MLNAME_CAST(sipName_incubationController), meth_QQmlEngine_incubationController, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_incubationController)},
    {SIP_MLNAME_CAST(sipName_networkAccessManager), meth_QQmlEngine_networkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_networkAccessManager)},
    {SIP_MLNAME_CAST(sipName_networkAccessManagerFactory), meth_QQmlEngine_networkAccessManagerFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_networkAccessManagerFactory)},
    {SIP_MLNAME_CAST(sipName_objectOwnership), meth_QQmlEngine_objectOwnership, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_objectOwnership)},
    {SIP_MLNAME_CAST(sipName_offlineStorageDatabaseFilePath), meth_QQmlEngine_offlineStorageDatabaseFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_offlineStorageDatabaseFilePath)},
    {SIP_MLNAME_CAST(sipName_offlineStoragePath), meth_QQmlEngine_offlineStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_offlineStoragePath)},
    {SIP_MLNAME_CAST(sipName_outputWarningsToStandardError), meth_QQmlEngine_outputWarningsToStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_outputWarningsToStandardError)},
    {SIP_MLNAME_CAST(sipName_pluginPathList), meth_QQmlEngine_pluginPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_pluginPathList)},
    {SIP_MLNAME_CAST(sipName_removeImageProvider), meth_QQmlEngine_removeImageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_removeImageProvider)},
    {SIP_MLNAME_CAST(sipName_retranslate), meth_QQmlEngine_retranslate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_retranslate)},
    {SIP_MLNAME_CAST(sipName_rootContext), meth_QQmlEngine_rootContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_rootContext)},
    {SIP_MLNAME_CAST(sipName_setBaseUrl), meth_QQmlEngine_setBaseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setBaseUrl)},
    {SIP_MLNAME_CAST(sipName_setContextForObject), meth_QQmlEngine_setContextForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setContextForObject)},
    {SIP_MLNAME_CAST(sipName_setImportPathList), meth_QQmlEngine_setImportPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setImportPathList)},
    {SIP_MLNAME_CAST(sipName_setIncubationController), meth_QQmlEngine_setIncubationController, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setIncubationController)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessManagerFactory), meth_QQmlEngine_setNetworkAccessManagerFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setNetworkAccessManagerFactory)},
    {SIP_MLNAME_CAST(sipName_setObjectOwnership), meth_QQmlEngine_setObjectOwnership, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setObjectOwnership)},
    {SIP_MLNAME_CAST(sipName_setOfflineStoragePath), meth_QQmlEngine_setOfflineStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setOfflineStoragePath)},
    {SIP_MLNAME_CAST(sipName_setOutputWarningsToStandardError), meth_QQmlEngine_setOutputWarningsToStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setOutputWarningsToStandardError)},
    {SIP_MLNAME_CAST(sipName_setPluginPathList), meth_QQmlEngine_setPluginPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_setPluginPathList)},
    {SIP_MLNAME_CAST(sipName_singletonInstance), meth_QQmlEngine_singletonInstance, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_singletonInstance)},
    {SIP_MLNAME_CAST(sipName_trimComponentCache), meth_QQmlEngine_trimComponentCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlEngine_trimComponentCache)}
};

static sipEnumMemberDef enummembers_QQmlEngine[] = {
    {sipName_CppOwnership, static_cast<int>( ::QQmlEngine::CppOwnership), 19},
    {sipName_JavaScriptOwnership, static_cast<int>( ::QQmlEngine::JavaScriptOwnership), 19},
};

PyDoc_STRVAR(doc_QQmlEngine, "\1QQmlEngine(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQmlEngine[] = {
    {"exit(int)", "\1exit(self, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"warnings(QList<QQmlError>)", "\1warnings(self, Iterable[QQmlError])", SIP_NULLPTR, SIP_NULLPTR},
    {"quit()", "\1quit(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QQmlEngine = {
    & ::QQmlEngine::staticMetaObject,
    0,
    signals_QQmlEngine,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlEngine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlEngine,
        {SIP_NULLPTR},
        &plugin_QQmlEngine
    },
    {
        sipNameNr_QQmlEngine,
        {0, 0, 1},
        33, methods_QQmlEngine,
        2, enummembers_QQmlEngine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlEngine,
    -1,
    -1,
    supers_QQmlEngine,
    SIP_NULLPTR,
    init_type_QQmlEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlEngine,
    cast_QQmlEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qqmlabstracturlinterceptor.sip"
#include <qqmlabstracturlinterceptor.h>
#line 6983 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 6987 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


class sipQQmlAbstractUrlInterceptor : public  ::QQmlAbstractUrlInterceptor
{
public:
    sipQQmlAbstractUrlInterceptor();
    sipQQmlAbstractUrlInterceptor(const  ::QQmlAbstractUrlInterceptor&);
    virtual ~sipQQmlAbstractUrlInterceptor();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QUrl intercept(const  ::QUrl&, ::QQmlAbstractUrlInterceptor::DataType) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlAbstractUrlInterceptor(const sipQQmlAbstractUrlInterceptor &);
    sipQQmlAbstractUrlInterceptor &operator = (const sipQQmlAbstractUrlInterceptor &);

    char sipPyMethods[1];
};

sipQQmlAbstractUrlInterceptor::sipQQmlAbstractUrlInterceptor():  ::QQmlAbstractUrlInterceptor(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlAbstractUrlInterceptor::sipQQmlAbstractUrlInterceptor(const  ::QQmlAbstractUrlInterceptor& a0):  ::QQmlAbstractUrlInterceptor(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlAbstractUrlInterceptor::~sipQQmlAbstractUrlInterceptor()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::QUrl sipQQmlAbstractUrlInterceptor::intercept(const  ::QUrl& a0, ::QQmlAbstractUrlInterceptor::DataType a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QQmlAbstractUrlInterceptor,sipName_intercept);

    if (!sipMeth)
        return  ::QUrl();

    extern  ::QUrl sipVH_QtQml_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&, ::QQmlAbstractUrlInterceptor::DataType);

    return sipVH_QtQml_6(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QQmlAbstractUrlInterceptor_intercept, "intercept(self, QUrl, QQmlAbstractUrlInterceptor.DataType) -> QUrl");

extern "C" {static PyObject *meth_QQmlAbstractUrlInterceptor_intercept(PyObject *, PyObject *);}
static PyObject *meth_QQmlAbstractUrlInterceptor_intercept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
         ::QQmlAbstractUrlInterceptor::DataType a1;
         ::QQmlAbstractUrlInterceptor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QQmlAbstractUrlInterceptor, &sipCpp, sipType_QUrl, &a0, sipType_QQmlAbstractUrlInterceptor_DataType, &a1))
        {
             ::QUrl*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlAbstractUrlInterceptor, sipName_intercept);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QUrl(sipCpp->intercept(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlAbstractUrlInterceptor, sipName_intercept, doc_QQmlAbstractUrlInterceptor_intercept);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlAbstractUrlInterceptor(void *, int);}
static void release_QQmlAbstractUrlInterceptor(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQmlAbstractUrlInterceptor *>(sipCppV);
    else
        delete reinterpret_cast< ::QQmlAbstractUrlInterceptor *>(sipCppV);
}


extern "C" {static void dealloc_QQmlAbstractUrlInterceptor(sipSimpleWrapper *);}
static void dealloc_QQmlAbstractUrlInterceptor(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQQmlAbstractUrlInterceptor *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QQmlAbstractUrlInterceptor(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QQmlAbstractUrlInterceptor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlAbstractUrlInterceptor(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQmlAbstractUrlInterceptor *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQQmlAbstractUrlInterceptor();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QQmlAbstractUrlInterceptor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QQmlAbstractUrlInterceptor, &a0))
        {
            sipCpp = new sipQQmlAbstractUrlInterceptor(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QQmlAbstractUrlInterceptor[] = {
    {SIP_MLNAME_CAST(sipName_intercept), meth_QQmlAbstractUrlInterceptor_intercept, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlAbstractUrlInterceptor_intercept)}
};

static sipEnumMemberDef enummembers_QQmlAbstractUrlInterceptor[] = {
    {sipName_JavaScriptFile, static_cast<int>( ::QQmlAbstractUrlInterceptor::JavaScriptFile), 11},
    {sipName_QmlFile, static_cast<int>( ::QQmlAbstractUrlInterceptor::QmlFile), 11},
    {sipName_QmldirFile, static_cast<int>( ::QQmlAbstractUrlInterceptor::QmldirFile), 11},
    {sipName_UrlString, static_cast<int>( ::QQmlAbstractUrlInterceptor::UrlString), 11},
};

PyDoc_STRVAR(doc_QQmlAbstractUrlInterceptor, "\1QQmlAbstractUrlInterceptor()\n"
"QQmlAbstractUrlInterceptor(QQmlAbstractUrlInterceptor)");


static pyqt5ClassPluginDef plugin_QQmlAbstractUrlInterceptor = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QQmlAbstractUrlInterceptor = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QQmlAbstractUrlInterceptor,
        {SIP_NULLPTR},
        &plugin_QQmlAbstractUrlInterceptor
    },
    {
        sipNameNr_QQmlAbstractUrlInterceptor,
        {0, 0, 1},
        1, methods_QQmlAbstractUrlInterceptor,
        4, enummembers_QQmlAbstractUrlInterceptor,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QQmlAbstractUrlInterceptor,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QQmlAbstractUrlInterceptor,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QQmlAbstractUrlInterceptor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QQmlAbstractUrlInterceptor,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalueiterator.sip"
#include <qjsvalueiterator.h>
#line 7215 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 7219 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 7222 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


PyDoc_STRVAR(doc_QJSValueIterator_hasNext, "hasNext(self) -> bool");

extern "C" {static PyObject *meth_QJSValueIterator_hasNext(PyObject *, PyObject *);}
static PyObject *meth_QJSValueIterator_hasNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValueIterator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasNext();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValueIterator, sipName_hasNext, doc_QJSValueIterator_hasNext);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValueIterator_next, "next(self) -> bool");

extern "C" {static PyObject *meth_QJSValueIterator_next(PyObject *, PyObject *);}
static PyObject *meth_QJSValueIterator_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValueIterator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->next();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValueIterator, sipName_next, doc_QJSValueIterator_next);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValueIterator_name, "name(self) -> str");

extern "C" {static PyObject *meth_QJSValueIterator_name(PyObject *, PyObject *);}
static PyObject *meth_QJSValueIterator_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValueIterator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValueIterator, sipName_name, doc_QJSValueIterator_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValueIterator_value, "value(self) -> QJSValue");

extern "C" {static PyObject *meth_QJSValueIterator_value(PyObject *, PyObject *);}
static PyObject *meth_QJSValueIterator_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValueIterator, &sipCpp))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValueIterator, sipName_value, doc_QJSValueIterator_value);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QJSValueIterator(void *, int);}
static void release_QJSValueIterator(void *sipCppV, int)
{
    delete reinterpret_cast< ::QJSValueIterator *>(sipCppV);
}


extern "C" {static void dealloc_QJSValueIterator(sipSimpleWrapper *);}
static void dealloc_QJSValueIterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QJSValueIterator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QJSValueIterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QJSValueIterator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QJSValueIterator *sipCpp = SIP_NULLPTR;

    {
        const  ::QJSValue* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QJSValue, &a0, &a0State))
        {
            sipCpp = new  ::QJSValueIterator(*a0);
            sipReleaseType(const_cast< ::QJSValue *>(a0),sipType_QJSValue,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QJSValueIterator[] = {
    {SIP_MLNAME_CAST(sipName_hasNext), meth_QJSValueIterator_hasNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValueIterator_hasNext)},
    {SIP_MLNAME_CAST(sipName_name), meth_QJSValueIterator_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValueIterator_name)},
    {SIP_MLNAME_CAST(sipName_next), meth_QJSValueIterator_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValueIterator_next)},
    {SIP_MLNAME_CAST(sipName_value), meth_QJSValueIterator_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValueIterator_value)}
};

PyDoc_STRVAR(doc_QJSValueIterator, "\1QJSValueIterator(Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str])");


static pyqt5ClassPluginDef plugin_QJSValueIterator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QJSValueIterator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QJSValueIterator,
        {SIP_NULLPTR},
        &plugin_QJSValueIterator
    },
    {
        sipNameNr_QJSValueIterator,
        {0, 0, 1},
        4, methods_QJSValueIterator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QJSValueIterator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QJSValueIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QJSValueIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QJSValueIterator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 7447 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 7454 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 7457 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 7460 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 7463 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


PyDoc_STRVAR(doc_QJSValue_isBool, "isBool(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isBool(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBool();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isBool, doc_QJSValue_isBool);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isNumber, "isNumber(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isNumber(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNumber();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isNumber, doc_QJSValue_isNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isNull(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isNull, doc_QJSValue_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isString, "isString(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isString(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isString();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isString, doc_QJSValue_isString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isUndefined, "isUndefined(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isUndefined(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isUndefined(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndefined();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isUndefined, doc_QJSValue_isUndefined);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isVariant, "isVariant(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isVariant(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVariant();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isVariant, doc_QJSValue_isVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isQObject, "isQObject(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isQObject(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isQObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isQObject();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isQObject, doc_QJSValue_isQObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isObject, "isObject(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isObject(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isObject();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isObject, doc_QJSValue_isObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isDate, "isDate(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isDate(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isDate, doc_QJSValue_isDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isRegExp, "isRegExp(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isRegExp(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRegExp();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isRegExp, doc_QJSValue_isRegExp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isArray, "isArray(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isArray(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isArray();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isArray, doc_QJSValue_isArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isError, "isError(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isError(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isError, doc_QJSValue_isError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QJSValue_toString(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_toString, doc_QJSValue_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_toNumber, "toNumber(self) -> float");

extern "C" {static PyObject *meth_QJSValue_toNumber(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_toNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->toNumber();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_toNumber, doc_QJSValue_toNumber);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_toInt, "toInt(self) -> int");

extern "C" {static PyObject *meth_QJSValue_toInt(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_toInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
             ::qint32 sipRes;

            sipRes = sipCpp->toInt();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_toInt, doc_QJSValue_toInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_toUInt, "toUInt(self) -> int");

extern "C" {static PyObject *meth_QJSValue_toUInt(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_toUInt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->toUInt();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_toUInt, doc_QJSValue_toUInt);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_toBool, "toBool(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_toBool(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_toBool(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->toBool();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_toBool, doc_QJSValue_toBool);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_toVariant, "toVariant(self) -> Any");

extern "C" {static PyObject *meth_QJSValue_toVariant(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_toVariant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->toVariant());

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_toVariant, doc_QJSValue_toVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_toQObject, "toQObject(self) -> QObject");

extern "C" {static PyObject *meth_QJSValue_toQObject(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_toQObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->toQObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_toQObject, doc_QJSValue_toQObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_toDateTime, "toDateTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QJSValue_toDateTime(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_toDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->toDateTime());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_toDateTime, doc_QJSValue_toDateTime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_equals, "equals(self, Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str]) -> bool");

extern "C" {static PyObject *meth_QJSValue_equals(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_equals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue* a0;
        int a0State = 0;
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QJSValue, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->equals(*a0);
            sipReleaseType(const_cast< ::QJSValue *>(a0),sipType_QJSValue,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_equals, doc_QJSValue_equals);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_strictlyEquals, "strictlyEquals(self, Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str]) -> bool");

extern "C" {static PyObject *meth_QJSValue_strictlyEquals(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_strictlyEquals(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue* a0;
        int a0State = 0;
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QJSValue, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->strictlyEquals(*a0);
            sipReleaseType(const_cast< ::QJSValue *>(a0),sipType_QJSValue,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_strictlyEquals, doc_QJSValue_strictlyEquals);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_prototype, "prototype(self) -> QJSValue");

extern "C" {static PyObject *meth_QJSValue_prototype(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_prototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->prototype());

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_prototype, doc_QJSValue_prototype);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_setPrototype, "setPrototype(self, Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str])");

extern "C" {static PyObject *meth_QJSValue_setPrototype(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_setPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue* a0;
        int a0State = 0;
         ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QJSValue, &a0, &a0State))
        {
            sipCpp->setPrototype(*a0);
            sipReleaseType(const_cast< ::QJSValue *>(a0),sipType_QJSValue,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_setPrototype, doc_QJSValue_setPrototype);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_property, "property(self, str) -> QJSValue\n"
"property(self, int) -> QJSValue");

extern "C" {static PyObject *meth_QJSValue_property(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->property(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    {
         ::quint32 a0;
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QJSValue, &sipCpp, &a0))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->property(a0));

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_property, doc_QJSValue_property);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_setProperty, "setProperty(self, str, Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str])\n"
"setProperty(self, int, Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str])");

extern "C" {static PyObject *meth_QJSValue_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QJSValue* a1;
        int a1State = 0;
         ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QString,&a0, &a0State, sipType_QJSValue, &a1, &a1State))
        {
            sipCpp->setProperty(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QJSValue *>(a1),sipType_QJSValue,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::quint32 a0;
        const  ::QJSValue* a1;
        int a1State = 0;
         ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ1", &sipSelf, sipType_QJSValue, &sipCpp, &a0, sipType_QJSValue, &a1, &a1State))
        {
            sipCpp->setProperty(a0,*a1);
            sipReleaseType(const_cast< ::QJSValue *>(a1),sipType_QJSValue,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_setProperty, doc_QJSValue_setProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_hasProperty, "hasProperty(self, str) -> bool");

extern "C" {static PyObject *meth_QJSValue_hasProperty(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_hasProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasProperty(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_hasProperty, doc_QJSValue_hasProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_hasOwnProperty, "hasOwnProperty(self, str) -> bool");

extern "C" {static PyObject *meth_QJSValue_hasOwnProperty(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_hasOwnProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasOwnProperty(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_hasOwnProperty, doc_QJSValue_hasOwnProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_deleteProperty, "deleteProperty(self, str) -> bool");

extern "C" {static PyObject *meth_QJSValue_deleteProperty(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_deleteProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->deleteProperty(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_deleteProperty, doc_QJSValue_deleteProperty);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_isCallable, "isCallable(self) -> bool");

extern "C" {static PyObject *meth_QJSValue_isCallable(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_isCallable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCallable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_isCallable, doc_QJSValue_isCallable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_call, "call(self, args: Iterable[Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str]] = []) -> QJSValue");

extern "C" {static PyObject *meth_QJSValue_call(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSValue_call(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValueList& a0def = QJSValueList();
        const  ::QJSValueList* a0 = &a0def;
        int a0State = 0;
         ::QJSValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_args,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QList_0100QJSValue,&a0, &a0State))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->call(*a0));
            sipReleaseType(const_cast< ::QJSValueList *>(a0),sipType_QList_0100QJSValue,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_call, doc_QJSValue_call);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_callWithInstance, "callWithInstance(self, Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str], args: Iterable[Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str]] = []) -> QJSValue");

extern "C" {static PyObject *meth_QJSValue_callWithInstance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSValue_callWithInstance(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue* a0;
        int a0State = 0;
        const  ::QJSValueList& a1def = QJSValueList();
        const  ::QJSValueList* a1 = &a1def;
        int a1State = 0;
         ::QJSValue *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_args,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QJSValue, &a0, &a0State, sipType_QList_0100QJSValue,&a1, &a1State))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->callWithInstance(*a0,*a1));
            sipReleaseType(const_cast< ::QJSValue *>(a0),sipType_QJSValue,a0State);
            sipReleaseType(const_cast< ::QJSValueList *>(a1),sipType_QList_0100QJSValue,a1State);

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_callWithInstance, doc_QJSValue_callWithInstance);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_callAsConstructor, "callAsConstructor(self, args: Iterable[Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str]] = []) -> QJSValue");

extern "C" {static PyObject *meth_QJSValue_callAsConstructor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSValue_callAsConstructor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValueList& a0def = QJSValueList();
        const  ::QJSValueList* a0 = &a0def;
        int a0State = 0;
         ::QJSValue *sipCpp;

        static const char *sipKwdList[] = {
            sipName_args,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QJSValue, &sipCpp, sipType_QList_0100QJSValue,&a0, &a0State))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->callAsConstructor(*a0));
            sipReleaseType(const_cast< ::QJSValueList *>(a0),sipType_QList_0100QJSValue,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_callAsConstructor, doc_QJSValue_callAsConstructor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSValue_errorType, "errorType(self) -> QJSValue.ErrorType");

extern "C" {static PyObject *meth_QJSValue_errorType(PyObject *, PyObject *);}
static PyObject *meth_QJSValue_errorType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSValue, &sipCpp))
        {
             ::QJSValue::ErrorType sipRes;

            sipRes = sipCpp->errorType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QJSValue_ErrorType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSValue, sipName_errorType, doc_QJSValue_errorType);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QJSValue(void *, int);}
static void release_QJSValue(void *sipCppV, int)
{
    delete reinterpret_cast< ::QJSValue *>(sipCppV);
}


extern "C" {static void assign_QJSValue(void *, SIP_SSIZE_T, void *);}
static void assign_QJSValue(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QJSValue *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QJSValue *>(sipSrc);
}


extern "C" {static void *array_QJSValue(SIP_SSIZE_T);}
static void *array_QJSValue(SIP_SSIZE_T sipNrElem)
{
    return new  ::QJSValue[sipNrElem];
}


extern "C" {static void *copy_QJSValue(const void *, SIP_SSIZE_T);}
static void *copy_QJSValue(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QJSValue(reinterpret_cast<const  ::QJSValue *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QJSValue(sipSimpleWrapper *);}
static void dealloc_QJSValue(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QJSValue(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QJSValue(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QJSValue(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QJSValue *sipCpp = SIP_NULLPTR;

    {
         ::QJSValue::SpecialValue a0 = QJSValue::UndefinedValue;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|XE", sipType_QJSValue_SpecialValue, &a0))
        {
            sipCpp = new  ::QJSValue(a0);

            return sipCpp;
        }
    }

    {
        const  ::QJSValue* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QJSValue, &a0, &a0State))
        {
            sipCpp = new  ::QJSValue(*a0);
            sipReleaseType(const_cast< ::QJSValue *>(a0),sipType_QJSValue,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QJSValue(PyObject *, void **, int *, PyObject *);}
static int convertTo_QJSValue(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QJSValue **sipCppPtr = reinterpret_cast< ::QJSValue **>(sipCppPtrV);

#line 32 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalue.sip"
if (!sipIsErr)
    return qpyqml_canConvertTo_QJSValue(sipPy);

return qpyqml_convertTo_QJSValue(sipPy, sipTransferObj, sipCppPtr, sipIsErr);
#line 8591 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
}


static PyMethodDef methods_QJSValue[] = {
    {SIP_MLNAME_CAST(sipName_call), SIP_MLMETH_CAST(meth_QJSValue_call), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSValue_call)},
    {SIP_MLNAME_CAST(sipName_callAsConstructor), SIP_MLMETH_CAST(meth_QJSValue_callAsConstructor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSValue_callAsConstructor)},
    {SIP_MLNAME_CAST(sipName_callWithInstance), SIP_MLMETH_CAST(meth_QJSValue_callWithInstance), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSValue_callWithInstance)},
    {SIP_MLNAME_CAST(sipName_deleteProperty), meth_QJSValue_deleteProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_deleteProperty)},
    {SIP_MLNAME_CAST(sipName_equals), meth_QJSValue_equals, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_equals)},
    {SIP_MLNAME_CAST(sipName_errorType), meth_QJSValue_errorType, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_errorType)},
    {SIP_MLNAME_CAST(sipName_hasOwnProperty), meth_QJSValue_hasOwnProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_hasOwnProperty)},
    {SIP_MLNAME_CAST(sipName_hasProperty), meth_QJSValue_hasProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_hasProperty)},
    {SIP_MLNAME_CAST(sipName_isArray), meth_QJSValue_isArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isArray)},
    {SIP_MLNAME_CAST(sipName_isBool), meth_QJSValue_isBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isBool)},
    {SIP_MLNAME_CAST(sipName_isCallable), meth_QJSValue_isCallable, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isCallable)},
    {SIP_MLNAME_CAST(sipName_isDate), meth_QJSValue_isDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isDate)},
    {SIP_MLNAME_CAST(sipName_isError), meth_QJSValue_isError, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isError)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QJSValue_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isNull)},
    {SIP_MLNAME_CAST(sipName_isNumber), meth_QJSValue_isNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isNumber)},
    {SIP_MLNAME_CAST(sipName_isObject), meth_QJSValue_isObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isObject)},
    {SIP_MLNAME_CAST(sipName_isQObject), meth_QJSValue_isQObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isQObject)},
    {SIP_MLNAME_CAST(sipName_isRegExp), meth_QJSValue_isRegExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isRegExp)},
    {SIP_MLNAME_CAST(sipName_isString), meth_QJSValue_isString, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isString)},
    {SIP_MLNAME_CAST(sipName_isUndefined), meth_QJSValue_isUndefined, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isUndefined)},
    {SIP_MLNAME_CAST(sipName_isVariant), meth_QJSValue_isVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_isVariant)},
    {SIP_MLNAME_CAST(sipName_property), meth_QJSValue_property, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_property)},
    {SIP_MLNAME_CAST(sipName_prototype), meth_QJSValue_prototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_prototype)},
    {SIP_MLNAME_CAST(sipName_setProperty), meth_QJSValue_setProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_setProperty)},
    {SIP_MLNAME_CAST(sipName_setPrototype), meth_QJSValue_setPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_setPrototype)},
    {SIP_MLNAME_CAST(sipName_strictlyEquals), meth_QJSValue_strictlyEquals, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_strictlyEquals)},
    {SIP_MLNAME_CAST(sipName_toBool), meth_QJSValue_toBool, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_toBool)},
    {SIP_MLNAME_CAST(sipName_toDateTime), meth_QJSValue_toDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_toDateTime)},
    {SIP_MLNAME_CAST(sipName_toInt), meth_QJSValue_toInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_toInt)},
    {SIP_MLNAME_CAST(sipName_toNumber), meth_QJSValue_toNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_toNumber)},
    {SIP_MLNAME_CAST(sipName_toQObject), meth_QJSValue_toQObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_toQObject)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QJSValue_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_toString)},
    {SIP_MLNAME_CAST(sipName_toUInt), meth_QJSValue_toUInt, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_toUInt)},
    {SIP_MLNAME_CAST(sipName_toVariant), meth_QJSValue_toVariant, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSValue_toVariant)}
};

static sipEnumMemberDef enummembers_QJSValue[] = {
    {sipName_EvalError, static_cast<int>( ::QJSValue::EvalError), 4},
    {sipName_GenericError, static_cast<int>( ::QJSValue::GenericError), 4},
    {sipName_NullValue, static_cast<int>( ::QJSValue::NullValue), 5},
    {sipName_RangeError, static_cast<int>( ::QJSValue::RangeError), 4},
    {sipName_ReferenceError, static_cast<int>( ::QJSValue::ReferenceError), 4},
    {sipName_SyntaxError, static_cast<int>( ::QJSValue::SyntaxError), 4},
    {sipName_TypeError, static_cast<int>( ::QJSValue::TypeError), 4},
    {sipName_URIError, static_cast<int>( ::QJSValue::URIError), 4},
    {sipName_UndefinedValue, static_cast<int>( ::QJSValue::UndefinedValue), 5},
};

PyDoc_STRVAR(doc_QJSValue, "\1QJSValue(value: QJSValue.SpecialValue = QJSValue.UndefinedValue)\n"
"QJSValue(Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str])");


static pyqt5ClassPluginDef plugin_QJSValue = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QJSValue = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QJSValue,
        {SIP_NULLPTR},
        &plugin_QJSValue
    },
    {
        sipNameNr_QJSValue,
        {0, 0, 1},
        34, methods_QJSValue,
        9, enummembers_QJSValue,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QJSValue,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QJSValue,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QJSValue,
    assign_QJSValue,
    array_QJSValue,
    copy_QJSValue,
    release_QJSValue,
    SIP_NULLPTR,
    convertTo_QJSValue,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 8709 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 8713 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


extern "C" {static long slot_QJSEngine_Extensions___hash__(PyObject *);}
static long slot_QJSEngine_Extensions___hash__(PyObject *sipSelf)
{
     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QJSEngine::Extensions::Int();
#line 8731 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QJSEngine_Extensions___bool__(PyObject *);}
static int slot_QJSEngine_Extensions___bool__(PyObject *sipSelf)
{
     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QJSEngine::Extensions::Int() != 0);
#line 8756 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extensions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSEngine::Extensions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QJSEngine_Extensions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QJSEngine::Extensions::Int() != a0->operator QJSEngine::Extensions::Int());
#line 8786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
            sipReleaseType(const_cast< ::QJSEngine::Extensions *>(a0),sipType_QJSEngine_Extensions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, ne_slot, sipType_QJSEngine_Extensions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extensions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSEngine::Extensions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QJSEngine_Extensions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QJSEngine::Extensions::Int() == a0->operator QJSEngine::Extensions::Int());
#line 8822 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
            sipReleaseType(const_cast< ::QJSEngine::Extensions *>(a0),sipType_QJSEngine_Extensions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, eq_slot, sipType_QJSEngine_Extensions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extensions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QJSEngine_Extensions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QJSEngine::Extensions(*sipCpp ^ a0);
#line 8861 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extensions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSEngine::Extensions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QJSEngine_Extensions, &a0, &a0State, &a1))
        {
             ::QJSEngine::Extensions*sipRes;

            sipRes = new  ::QJSEngine::Extensions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QJSEngine_Extensions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJSEngine_Extensions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extensions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QJSEngine_Extensions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QJSEngine::Extensions(*sipCpp | a0);
#line 8933 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___or__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extensions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSEngine::Extensions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QJSEngine_Extensions, &a0, &a0State, &a1))
        {
             ::QJSEngine::Extensions*sipRes;

            sipRes = new  ::QJSEngine::Extensions((*a0 | a1));
            sipReleaseType(a0,sipType_QJSEngine_Extensions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJSEngine_Extensions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extensions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QJSEngine_Extensions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QJSEngine::Extensions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___and__(PyObject *,PyObject *);}
static PyObject *slot_QJSEngine_Extensions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSEngine::Extensions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QJSEngine_Extensions, &a0, &a0State, &a1))
        {
             ::QJSEngine::Extensions*sipRes;

            sipRes = new  ::QJSEngine::Extensions((*a0 & a1));
            sipReleaseType(a0,sipType_QJSEngine_Extensions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJSEngine_Extensions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtQml, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___invert__(PyObject *);}
static PyObject *slot_QJSEngine_Extensions___invert__(PyObject *sipSelf)
{
     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QJSEngine::Extensions*sipRes;

            sipRes = new  ::QJSEngine::Extensions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QJSEngine_Extensions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QJSEngine_Extensions___int__(PyObject *);}
static PyObject *slot_QJSEngine_Extensions___int__(PyObject *sipSelf)
{
     ::QJSEngine::Extensions *sipCpp = reinterpret_cast< ::QJSEngine::Extensions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QJSEngine_Extensions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QJSEngine_Extensions(void *, int);}
static void release_QJSEngine_Extensions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QJSEngine::Extensions *>(sipCppV);
}


extern "C" {static void assign_QJSEngine_Extensions(void *, SIP_SSIZE_T, void *);}
static void assign_QJSEngine_Extensions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QJSEngine::Extensions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QJSEngine::Extensions *>(sipSrc);
}


extern "C" {static void *array_QJSEngine_Extensions(SIP_SSIZE_T);}
static void *array_QJSEngine_Extensions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QJSEngine::Extensions[sipNrElem];
}


extern "C" {static void *copy_QJSEngine_Extensions(const void *, SIP_SSIZE_T);}
static void *copy_QJSEngine_Extensions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QJSEngine::Extensions(reinterpret_cast<const  ::QJSEngine::Extensions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QJSEngine_Extensions(sipSimpleWrapper *);}
static void dealloc_QJSEngine_Extensions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QJSEngine_Extensions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QJSEngine_Extensions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QJSEngine_Extensions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QJSEngine::Extensions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QJSEngine::Extensions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QJSEngine::Extensions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QJSEngine::Extensions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QJSEngine_Extensions, &a0, &a0State))
        {
            sipCpp = new  ::QJSEngine::Extensions(*a0);
            sipReleaseType(const_cast< ::QJSEngine::Extensions *>(a0),sipType_QJSEngine_Extensions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QJSEngine_Extensions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QJSEngine_Extensions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QJSEngine::Extensions **sipCppPtr = reinterpret_cast< ::QJSEngine::Extensions **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QJSEngine::Extensions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QJSEngine_Extension)) ||
            sipCanConvertToType(sipPy, sipType_QJSEngine_Extensions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QJSEngine_Extension)))
{
    *sipCppPtr = new QJSEngine::Extensions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QJSEngine::Extensions *>(sipConvertToType(sipPy, sipType_QJSEngine_Extensions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 9201 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QJSEngine_Extensions[] = {
    {(void *)slot_QJSEngine_Extensions___hash__, hash_slot},
    {(void *)slot_QJSEngine_Extensions___bool__, bool_slot},
    {(void *)slot_QJSEngine_Extensions___ne__, ne_slot},
    {(void *)slot_QJSEngine_Extensions___eq__, eq_slot},
    {(void *)slot_QJSEngine_Extensions___ixor__, ixor_slot},
    {(void *)slot_QJSEngine_Extensions___xor__, xor_slot},
    {(void *)slot_QJSEngine_Extensions___ior__, ior_slot},
    {(void *)slot_QJSEngine_Extensions___or__, or_slot},
    {(void *)slot_QJSEngine_Extensions___iand__, iand_slot},
    {(void *)slot_QJSEngine_Extensions___and__, and_slot},
    {(void *)slot_QJSEngine_Extensions___invert__, invert_slot},
    {(void *)slot_QJSEngine_Extensions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QJSEngine_Extensions, "\1QJSEngine.Extensions()\n"
"QJSEngine.Extensions(Union[QJSEngine.Extensions, QJSEngine.Extension])\n"
"QJSEngine.Extensions(QJSEngine.Extensions)");


static pyqt5ClassPluginDef plugin_QJSEngine_Extensions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QJSEngine_Extensions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QJSEngine__Extensions,
        {SIP_NULLPTR},
        &plugin_QJSEngine_Extensions
    },
    {
        sipNameNr_Extensions,
        {0, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QJSEngine_Extensions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QJSEngine_Extensions,
    init_type_QJSEngine_Extensions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QJSEngine_Extensions,
    assign_QJSEngine_Extensions,
    array_QJSEngine_Extensions,
    copy_QJSEngine_Extensions,
    release_QJSEngine_Extensions,
    SIP_NULLPTR,
    convertTo_QJSEngine_Extensions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 9289 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 9293 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 9296 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 9299 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 9302 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtQml/qjsengine.sip"
#include <qjsengine.h>
#line 9305 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 9308 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 9311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 9314 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 9317 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 9320 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9323 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 9326 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9329 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 9332 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 9335 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 9338 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 9341 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 9344 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtQml/sipQtQmlpart1.cpp"


class sipQJSEngine : public  ::QJSEngine
{
public:
    sipQJSEngine();
    sipQJSEngine( ::QObject*);
    virtual ~sipQJSEngine();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQJSEngine(const sipQJSEngine &);
    sipQJSEngine &operator = (const sipQJSEngine &);

    char sipPyMethods[7];
};

sipQJSEngine::sipQJSEngine():  ::QJSEngine(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQJSEngine::sipQJSEngine( ::QObject*a0):  ::QJSEngine(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQJSEngine::~sipQJSEngine()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQJSEngine::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QJSEngine);

    return  ::QJSEngine::metaObject();
}

int sipQJSEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QJSEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QJSEngine,_c,_id,_a);

    return _id;
}

void *sipQJSEngine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QJSEngine, _clname, &sipCpp) ? sipCpp :  ::QJSEngine::qt_metacast(_clname));
}

bool sipQJSEngine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QJSEngine::event(a0);

    extern bool sipVH_QtQml_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtQml_5(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQJSEngine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QJSEngine::eventFilter(a0,a1);

    extern bool sipVH_QtQml_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtQml_4(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQJSEngine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QJSEngine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtQml_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtQml_3(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQJSEngine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QJSEngine::childEvent(a0);
        return;
    }

    extern void sipVH_QtQml_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtQml_2(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQJSEngine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QJSEngine::customEvent(a0);
        return;
    }

    extern void sipVH_QtQml_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtQml_1(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQJSEngine::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QJSEngine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQJSEngine::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QJSEngine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtQml_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtQml_0(sipGILState, sipImportedVirtErrorHandlers_QtQml_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QJSEngine_globalObject, "globalObject(self) -> QJSValue");

extern "C" {static PyObject *meth_QJSEngine_globalObject(PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_globalObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSEngine, &sipCpp))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->globalObject());

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_globalObject, doc_QJSEngine_globalObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_evaluate, "evaluate(self, str, fileName: str = '', lineNumber: int = 1) -> QJSValue");

extern "C" {static PyObject *meth_QJSEngine_evaluate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_evaluate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        int a2 = 1;
         ::QJSEngine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_fileName,
            sipName_lineNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1i", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2))
        {
             ::QJSValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QJSValue(sipCpp->evaluate(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_evaluate, doc_QJSEngine_evaluate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_newObject, "newObject(self) -> QJSValue");

extern "C" {static PyObject *meth_QJSEngine_newObject(PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_newObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSEngine, &sipCpp))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->newObject());

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_newObject, doc_QJSEngine_newObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_newArray, "newArray(self, length: int = 0) -> QJSValue");

extern "C" {static PyObject *meth_QJSEngine_newArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_newArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0 = 0;
         ::QJSEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|u", &sipSelf, sipType_QJSEngine, &sipCpp, &a0))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->newArray(a0));

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_newArray, doc_QJSEngine_newArray);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_newQObject, "newQObject(self, QObject) -> QJSValue");

extern "C" {static PyObject *meth_QJSEngine_newQObject(PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_newQObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
         ::QJSEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QObject, &a0))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->newQObject(a0));

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_newQObject, doc_QJSEngine_newQObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_collectGarbage, "collectGarbage(self)");

extern "C" {static PyObject *meth_QJSEngine_collectGarbage(PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_collectGarbage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QJSEngine, &sipCpp))
        {
            sipCpp->collectGarbage();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_collectGarbage, doc_QJSEngine_collectGarbage);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_installTranslatorFunctions, "installTranslatorFunctions(self, object: Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str] = QJSValue())");

extern "C" {static PyObject *meth_QJSEngine_installTranslatorFunctions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_installTranslatorFunctions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QJSValue& a0def = QJSValue();
        const  ::QJSValue* a0 = &a0def;
        int a0State = 0;
         ::QJSEngine *sipCpp;

        static const char *sipKwdList[] = {
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QJSValue, &a0, &a0State))
        {
            sipCpp->installTranslatorFunctions(*a0);
            sipReleaseType(const_cast< ::QJSValue *>(a0),sipType_QJSValue,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_installTranslatorFunctions, doc_QJSEngine_installTranslatorFunctions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_installExtensions, "installExtensions(self, Union[QJSEngine.Extensions, QJSEngine.Extension], object: Union[QJSValue, QJSValue.SpecialValue, bool, int, float, str] = QJSValue())");

extern "C" {static PyObject *meth_QJSEngine_installExtensions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_installExtensions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSEngine::Extensions* a0;
        int a0State = 0;
        const  ::QJSValue& a1def = QJSValue();
        const  ::QJSValue* a1 = &a1def;
        int a1State = 0;
         ::QJSEngine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QJSEngine_Extensions, &a0, &a0State, sipType_QJSValue, &a1, &a1State))
        {
            sipCpp->installExtensions(*a0,*a1);
            sipReleaseType(a0,sipType_QJSEngine_Extensions,a0State);
            sipReleaseType(const_cast< ::QJSValue *>(a1),sipType_QJSValue,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_installExtensions, doc_QJSEngine_installExtensions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_newQMetaObject, "newQMetaObject(self, QMetaObject) -> QJSValue");

extern "C" {static PyObject *meth_QJSEngine_newQMetaObject(PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_newQMetaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QMetaObject* a0;
         ::QJSEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QMetaObject, &a0))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->newQMetaObject(a0));

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_newQMetaObject, doc_QJSEngine_newQMetaObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_importModule, "importModule(self, str) -> QJSValue");

extern "C" {static PyObject *meth_QJSEngine_importModule(PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_importModule(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QJSEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->importModule(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_importModule, doc_QJSEngine_importModule);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_newErrorObject, "newErrorObject(self, QJSValue.ErrorType, message: str = '') -> QJSValue");

extern "C" {static PyObject *meth_QJSEngine_newErrorObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_newErrorObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QJSValue::ErrorType a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QJSEngine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_message,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J1", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QJSValue_ErrorType, &a0, sipType_QString,&a1, &a1State))
        {
             ::QJSValue*sipRes;

            sipRes = new  ::QJSValue(sipCpp->newErrorObject(a0,*a1));
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QJSValue,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_newErrorObject, doc_QJSEngine_newErrorObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QJSEngine_throwError, "throwError(self, str)\n"
"throwError(self, QJSValue.ErrorType, message: str = '')");

extern "C" {static PyObject *meth_QJSEngine_throwError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QJSEngine_throwError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QJSEngine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ1", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->throwError(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QJSValue::ErrorType a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QJSEngine *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_message,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J1", &sipSelf, sipType_QJSEngine, &sipCpp, sipType_QJSValue_ErrorType, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->throwError(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QJSEngine, sipName_throwError, doc_QJSEngine_throwError);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QJSEngine(void *, const sipTypeDef *);}
static void *cast_QJSEngine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QJSEngine *sipCpp = reinterpret_cast< ::QJSEngine *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QJSEngine(void *, int);}
static void release_QJSEngine(void *sipCppV, int)
{
     ::QJSEngine *sipCpp = reinterpret_cast< ::QJSEngine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QJSEngine(sipSimpleWrapper *);}
static void dealloc_QJSEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQJSEngine *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QJSEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QJSEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QJSEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQJSEngine *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQJSEngine();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQJSEngine(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QJSEngine[] = {{9, 0, 1}};


static PyMethodDef methods_QJSEngine[] = {
    {SIP_MLNAME_CAST(sipName_collectGarbage), meth_QJSEngine_collectGarbage, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSEngine_collectGarbage)},
    {SIP_MLNAME_CAST(sipName_evaluate), SIP_MLMETH_CAST(meth_QJSEngine_evaluate), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSEngine_evaluate)},
    {SIP_MLNAME_CAST(sipName_globalObject), meth_QJSEngine_globalObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSEngine_globalObject)},
    {SIP_MLNAME_CAST(sipName_importModule), meth_QJSEngine_importModule, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSEngine_importModule)},
    {SIP_MLNAME_CAST(sipName_installExtensions), SIP_MLMETH_CAST(meth_QJSEngine_installExtensions), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSEngine_installExtensions)},
    {SIP_MLNAME_CAST(sipName_installTranslatorFunctions), SIP_MLMETH_CAST(meth_QJSEngine_installTranslatorFunctions), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSEngine_installTranslatorFunctions)},
    {SIP_MLNAME_CAST(sipName_newArray), SIP_MLMETH_CAST(meth_QJSEngine_newArray), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSEngine_newArray)},
    {SIP_MLNAME_CAST(sipName_newErrorObject), SIP_MLMETH_CAST(meth_QJSEngine_newErrorObject), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSEngine_newErrorObject)},
    {SIP_MLNAME_CAST(sipName_newObject), meth_QJSEngine_newObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSEngine_newObject)},
    {SIP_MLNAME_CAST(sipName_newQMetaObject), meth_QJSEngine_newQMetaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSEngine_newQMetaObject)},
    {SIP_MLNAME_CAST(sipName_newQObject), meth_QJSEngine_newQObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QJSEngine_newQObject)},
    {SIP_MLNAME_CAST(sipName_throwError), SIP_MLMETH_CAST(meth_QJSEngine_throwError), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QJSEngine_throwError)}
};

static sipEnumMemberDef enummembers_QJSEngine[] = {
    {sipName_AllExtensions, static_cast<int>( ::QJSEngine::AllExtensions), 1},
    {sipName_ConsoleExtension, static_cast<int>( ::QJSEngine::ConsoleExtension), 1},
    {sipName_GarbageCollectionExtension, static_cast<int>( ::QJSEngine::GarbageCollectionExtension), 1},
    {sipName_TranslationExtension, static_cast<int>( ::QJSEngine::TranslationExtension), 1},
};

PyDoc_STRVAR(doc_QJSEngine, "\1QJSEngine()\n"
"QJSEngine(QObject)");


static pyqt5ClassPluginDef plugin_QJSEngine = {
    & ::QJSEngine::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtQml_QJSEngine = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QJSEngine,
        {SIP_NULLPTR},
        &plugin_QJSEngine
    },
    {
        sipNameNr_QJSEngine,
        {0, 0, 1},
        12, methods_QJSEngine,
        4, enummembers_QJSEngine,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QJSEngine,
    -1,
    -1,
    supers_QJSEngine,
    SIP_NULLPTR,
    init_type_QJSEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QJSEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QJSEngine,
    cast_QJSEngine,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
