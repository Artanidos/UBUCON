/*
 * Module code.
 *
 * Generated by SIP 4.19.15
 *
 * Copyright (c) 2019 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 39 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkRequest_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QNetworkRequest_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_url, doc_QNetworkRequest_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkRequest_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setUrl, doc_QNetworkRequest_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_header, "header(self, QNetworkRequest.KnownHeaders) -> Any");

extern "C" {static PyObject *meth_QNetworkRequest_header(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->header(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_header, doc_QNetworkRequest_header);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setHeader, "setHeader(self, QNetworkRequest.KnownHeaders, Any)");

extern "C" {static PyObject *meth_QNetworkRequest_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setHeader(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setHeader, doc_QNetworkRequest_setHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_hasRawHeader, "hasRawHeader(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QNetworkRequest_hasRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_hasRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasRawHeader(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_hasRawHeader, doc_QNetworkRequest_hasRawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_rawHeaderList, "rawHeaderList(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QNetworkRequest_rawHeaderList(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_rawHeaderList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->rawHeaderList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_rawHeaderList, doc_QNetworkRequest_rawHeaderList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_rawHeader, "rawHeader(self, Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkRequest_rawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_rawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->rawHeader(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_rawHeader, doc_QNetworkRequest_rawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setRawHeader, "setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkRequest_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setRawHeader(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setRawHeader, doc_QNetworkRequest_setRawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_attribute, "attribute(self, QNetworkRequest.Attribute, defaultValue: Any = None) -> Any");

extern "C" {static PyObject *meth_QNetworkRequest_attribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_attribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::Attribute a0;
        const  ::QVariant& a1def = QVariant();
        const  ::QVariant* a1 = &a1def;
        int a1State = 0;
        const  ::QNetworkRequest *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE|J1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->attribute(a0,*a1));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_attribute, doc_QNetworkRequest_attribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setAttribute, "setAttribute(self, QNetworkRequest.Attribute, Any)");

extern "C" {static PyObject *meth_QNetworkRequest_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::Attribute a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setAttribute, doc_QNetworkRequest_setAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_sslConfiguration, "sslConfiguration(self) -> QSslConfiguration");

extern "C" {static PyObject *meth_QNetworkRequest_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
             ::QSslConfiguration*sipRes;

            sipRes = new  ::QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_sslConfiguration, doc_QNetworkRequest_sslConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setSslConfiguration, "setSslConfiguration(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkRequest_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration* a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setSslConfiguration, doc_QNetworkRequest_setSslConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setOriginatingObject, "setOriginatingObject(self, QObject)");

extern "C" {static PyObject *meth_QNetworkRequest_setOriginatingObject(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setOriginatingObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QObject* a0;
        PyObject *a0Keep;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QNetworkRequest, &sipCpp, &a0Keep, sipType_QObject, &a0))
        {
            sipCpp->setOriginatingObject(a0);

            sipKeepReference(sipSelf, -1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setOriginatingObject, doc_QNetworkRequest_setOriginatingObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_originatingObject, "originatingObject(self) -> QObject");

extern "C" {static PyObject *meth_QNetworkRequest_originatingObject(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_originatingObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
             ::QObject*sipRes;

            sipRes = sipCpp->originatingObject();

            return sipConvertFromType(sipRes,sipType_QObject,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_originatingObject, doc_QNetworkRequest_originatingObject);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_priority, "priority(self) -> QNetworkRequest.Priority");

extern "C" {static PyObject *meth_QNetworkRequest_priority(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
             ::QNetworkRequest::Priority sipRes;

            sipRes = sipCpp->priority();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkRequest_Priority);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_priority, doc_QNetworkRequest_priority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setPriority, "setPriority(self, QNetworkRequest.Priority)");

extern "C" {static PyObject *meth_QNetworkRequest_setPriority(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setPriority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::Priority a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Priority, &a0))
        {
            sipCpp->setPriority(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setPriority, doc_QNetworkRequest_setPriority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_swap, "swap(self, QNetworkRequest)");

extern "C" {static PyObject *meth_QNetworkRequest_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest* a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_swap, doc_QNetworkRequest_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_maximumRedirectsAllowed, "maximumRedirectsAllowed(self) -> int");

extern "C" {static PyObject *meth_QNetworkRequest_maximumRedirectsAllowed(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_maximumRedirectsAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumRedirectsAllowed();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_maximumRedirectsAllowed, doc_QNetworkRequest_maximumRedirectsAllowed);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkRequest_setMaximumRedirectsAllowed, "setMaximumRedirectsAllowed(self, int)");

extern "C" {static PyObject *meth_QNetworkRequest_setMaximumRedirectsAllowed(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setMaximumRedirectsAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNetworkRequest, &sipCpp, &a0))
        {
            sipCpp->setMaximumRedirectsAllowed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setMaximumRedirectsAllowed, doc_QNetworkRequest_setMaximumRedirectsAllowed);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkRequest *sipCpp = reinterpret_cast< ::QNetworkRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkRequest));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkRequest, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkRequest *sipCpp = reinterpret_cast< ::QNetworkRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkRequest));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkRequest, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkRequest(void *, int);}
static void release_QNetworkRequest(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkRequest *>(sipCppV);
}


extern "C" {static void assign_QNetworkRequest(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkRequest *>(sipSrc);
}


extern "C" {static void *array_QNetworkRequest(SIP_SSIZE_T);}
static void *array_QNetworkRequest(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkRequest[sipNrElem];
}


extern "C" {static void *copy_QNetworkRequest(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkRequest(reinterpret_cast<const  ::QNetworkRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkRequest(sipSimpleWrapper *);}
static void dealloc_QNetworkRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkRequest(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkRequest *sipCpp = SIP_NULLPTR;

    {
        const  ::QUrl& a0def = QUrl();
        const  ::QUrl* a0 = &a0def;

        static const char *sipKwdList[] = {
            sipName_url,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J9", sipType_QUrl, &a0))
        {
            sipCpp = new  ::QNetworkRequest(*a0);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkRequest, &a0))
        {
            sipCpp = new  ::QNetworkRequest(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkRequest[] = {
    {(void *)slot_QNetworkRequest___ne__, ne_slot},
    {(void *)slot_QNetworkRequest___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkRequest[] = {
    {SIP_MLNAME_CAST(sipName_attribute), SIP_MLMETH_CAST(meth_QNetworkRequest_attribute), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkRequest_attribute)},
    {SIP_MLNAME_CAST(sipName_hasRawHeader), meth_QNetworkRequest_hasRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_hasRawHeader)},
    {SIP_MLNAME_CAST(sipName_header), meth_QNetworkRequest_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_header)},
    {SIP_MLNAME_CAST(sipName_maximumRedirectsAllowed), meth_QNetworkRequest_maximumRedirectsAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_maximumRedirectsAllowed)},
    {SIP_MLNAME_CAST(sipName_originatingObject), meth_QNetworkRequest_originatingObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_originatingObject)},
    {SIP_MLNAME_CAST(sipName_priority), meth_QNetworkRequest_priority, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_priority)},
    {SIP_MLNAME_CAST(sipName_rawHeader), meth_QNetworkRequest_rawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_rawHeader)},
    {SIP_MLNAME_CAST(sipName_rawHeaderList), meth_QNetworkRequest_rawHeaderList, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_rawHeaderList)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QNetworkRequest_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QNetworkRequest_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setHeader)},
    {SIP_MLNAME_CAST(sipName_setMaximumRedirectsAllowed), meth_QNetworkRequest_setMaximumRedirectsAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setMaximumRedirectsAllowed)},
    {SIP_MLNAME_CAST(sipName_setOriginatingObject), meth_QNetworkRequest_setOriginatingObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setOriginatingObject)},
    {SIP_MLNAME_CAST(sipName_setPriority), meth_QNetworkRequest_setPriority, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setPriority)},
    {SIP_MLNAME_CAST(sipName_setRawHeader), meth_QNetworkRequest_setRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setRawHeader)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QNetworkRequest_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QNetworkRequest_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setUrl)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QNetworkRequest_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkRequest_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_swap)},
    {SIP_MLNAME_CAST(sipName_url), meth_QNetworkRequest_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_url)}
};

static sipEnumMemberDef enummembers_QNetworkRequest[] = {
    {sipName_AlwaysCache, static_cast<int>( ::QNetworkRequest::AlwaysCache), 92},
    {sipName_AlwaysNetwork, static_cast<int>( ::QNetworkRequest::AlwaysNetwork), 92},
    {sipName_AuthenticationReuseAttribute, static_cast<int>( ::QNetworkRequest::AuthenticationReuseAttribute), 91},
    {sipName_Automatic, static_cast<int>( ::QNetworkRequest::Automatic), 94},
    {sipName_BackgroundRequestAttribute, static_cast<int>( ::QNetworkRequest::BackgroundRequestAttribute), 91},
    {sipName_CacheLoadControlAttribute, static_cast<int>( ::QNetworkRequest::CacheLoadControlAttribute), 91},
    {sipName_CacheSaveControlAttribute, static_cast<int>( ::QNetworkRequest::CacheSaveControlAttribute), 91},
    {sipName_ConnectionEncryptedAttribute, static_cast<int>( ::QNetworkRequest::ConnectionEncryptedAttribute), 91},
    {sipName_ContentDispositionHeader, static_cast<int>( ::QNetworkRequest::ContentDispositionHeader), 93},
    {sipName_ContentLengthHeader, static_cast<int>( ::QNetworkRequest::ContentLengthHeader), 93},
    {sipName_ContentTypeHeader, static_cast<int>( ::QNetworkRequest::ContentTypeHeader), 93},
    {sipName_CookieHeader, static_cast<int>( ::QNetworkRequest::CookieHeader), 93},
    {sipName_CookieLoadControlAttribute, static_cast<int>( ::QNetworkRequest::CookieLoadControlAttribute), 91},
    {sipName_CookieSaveControlAttribute, static_cast<int>( ::QNetworkRequest::CookieSaveControlAttribute), 91},
    {sipName_CustomVerbAttribute, static_cast<int>( ::QNetworkRequest::CustomVerbAttribute), 91},
    {sipName_DoNotBufferUploadDataAttribute, static_cast<int>( ::QNetworkRequest::DoNotBufferUploadDataAttribute), 91},
    {sipName_ETagHeader, static_cast<int>( ::QNetworkRequest::ETagHeader), 93},
    {sipName_EmitAllUploadProgressSignalsAttribute, static_cast<int>( ::QNetworkRequest::EmitAllUploadProgressSignalsAttribute), 91},
    {sipName_FollowRedirectsAttribute, static_cast<int>( ::QNetworkRequest::FollowRedirectsAttribute), 91},
    {sipName_HTTP2AllowedAttribute, static_cast<int>( ::QNetworkRequest::HTTP2AllowedAttribute), 91},
    {sipName_HTTP2WasUsedAttribute, static_cast<int>( ::QNetworkRequest::HTTP2WasUsedAttribute), 91},
    {sipName_HighPriority, static_cast<int>( ::QNetworkRequest::HighPriority), 95},
    {sipName_Http2DirectAttribute, static_cast<int>( ::QNetworkRequest::Http2DirectAttribute), 91},
    {sipName_HttpPipeliningAllowedAttribute, static_cast<int>( ::QNetworkRequest::HttpPipeliningAllowedAttribute), 91},
    {sipName_HttpPipeliningWasUsedAttribute, static_cast<int>( ::QNetworkRequest::HttpPipeliningWasUsedAttribute), 91},
    {sipName_HttpReasonPhraseAttribute, static_cast<int>( ::QNetworkRequest::HttpReasonPhraseAttribute), 91},
    {sipName_HttpStatusCodeAttribute, static_cast<int>( ::QNetworkRequest::HttpStatusCodeAttribute), 91},
    {sipName_IfMatchHeader, static_cast<int>( ::QNetworkRequest::IfMatchHeader), 93},
    {sipName_IfModifiedSinceHeader, static_cast<int>( ::QNetworkRequest::IfModifiedSinceHeader), 93},
    {sipName_IfNoneMatchHeader, static_cast<int>( ::QNetworkRequest::IfNoneMatchHeader), 93},
    {sipName_LastModifiedHeader, static_cast<int>( ::QNetworkRequest::LastModifiedHeader), 93},
    {sipName_LocationHeader, static_cast<int>( ::QNetworkRequest::LocationHeader), 93},
    {sipName_LowPriority, static_cast<int>( ::QNetworkRequest::LowPriority), 95},
    {sipName_Manual, static_cast<int>( ::QNetworkRequest::Manual), 94},
    {sipName_ManualRedirectPolicy, static_cast<int>( ::QNetworkRequest::ManualRedirectPolicy), 96},
    {sipName_NoLessSafeRedirectPolicy, static_cast<int>( ::QNetworkRequest::NoLessSafeRedirectPolicy), 96},
    {sipName_NormalPriority, static_cast<int>( ::QNetworkRequest::NormalPriority), 95},
    {sipName_OriginalContentLengthAttribute, static_cast<int>( ::QNetworkRequest::OriginalContentLengthAttribute), 91},
    {sipName_PreferCache, static_cast<int>( ::QNetworkRequest::PreferCache), 92},
    {sipName_PreferNetwork, static_cast<int>( ::QNetworkRequest::PreferNetwork), 92},
    {sipName_RedirectPolicyAttribute, static_cast<int>( ::QNetworkRequest::RedirectPolicyAttribute), 91},
    {sipName_RedirectionTargetAttribute, static_cast<int>( ::QNetworkRequest::RedirectionTargetAttribute), 91},
    {sipName_SameOriginRedirectPolicy, static_cast<int>( ::QNetworkRequest::SameOriginRedirectPolicy), 96},
    {sipName_ServerHeader, static_cast<int>( ::QNetworkRequest::ServerHeader), 93},
    {sipName_SetCookieHeader, static_cast<int>( ::QNetworkRequest::SetCookieHeader), 93},
    {sipName_SourceIsFromCacheAttribute, static_cast<int>( ::QNetworkRequest::SourceIsFromCacheAttribute), 91},
    {sipName_SpdyAllowedAttribute, static_cast<int>( ::QNetworkRequest::SpdyAllowedAttribute), 91},
    {sipName_SpdyWasUsedAttribute, static_cast<int>( ::QNetworkRequest::SpdyWasUsedAttribute), 91},
    {sipName_User, static_cast<int>( ::QNetworkRequest::User), 91},
    {sipName_UserAgentHeader, static_cast<int>( ::QNetworkRequest::UserAgentHeader), 93},
    {sipName_UserMax, static_cast<int>( ::QNetworkRequest::UserMax), 91},
    {sipName_UserVerifiedRedirectPolicy, static_cast<int>( ::QNetworkRequest::UserVerifiedRedirectPolicy), 96},
};

PyDoc_STRVAR(doc_QNetworkRequest, "\1QNetworkRequest(url: QUrl = QUrl())\n"
"QNetworkRequest(QNetworkRequest)");


static pyqt5ClassPluginDef plugin_QNetworkRequest = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkRequest = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkRequest,
        {SIP_NULLPTR},
        &plugin_QNetworkRequest
    },
    {
        sipNameNr_QNetworkRequest,
        {0, 0, 1},
        19, methods_QNetworkRequest,
        52, enummembers_QNetworkRequest,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkRequest,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkRequest,
    init_type_QNetworkRequest,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkRequest,
    assign_QNetworkRequest,
    array_QNetworkRequest,
    copy_QNetworkRequest,
    release_QNetworkRequest,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 903 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 907 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 916 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 263 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 920 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 923 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 926 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 929 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 932 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 935 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 938 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qsslpresharedkeyauthenticator.sip"
#include <qsslpresharedkeyauthenticator.h>
#line 941 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 944 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 947 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 950 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 953 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 956 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 959 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 962 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 965 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 968 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 971 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 974 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 977 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 980 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQNetworkReply : public  ::QNetworkReply
{
public:
    sipQNetworkReply( ::QObject*);
    virtual ~sipQNetworkReply();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void ignoreSslErrorsImplementation(const QList< ::QSslError>&) SIP_OVERRIDE;
    void setSslConfigurationImplementation(const  ::QSslConfiguration&) SIP_OVERRIDE;
    void sslConfigurationImplementation( ::QSslConfiguration&) const SIP_OVERRIDE;
    void ignoreSslErrors() SIP_OVERRIDE;
    void setReadBufferSize( ::qint64) SIP_OVERRIDE;
    void abort() SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkReply(const sipQNetworkReply &);
    sipQNetworkReply &operator = (const sipQNetworkReply &);

    char sipPyMethods[29];
};

sipQNetworkReply::sipQNetworkReply( ::QObject*a0):  ::QNetworkReply(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkReply::~sipQNetworkReply()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkReply::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkReply);

    return  ::QNetworkReply::metaObject();
}

int sipQNetworkReply::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkReply::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkReply,_c,_id,_a);

    return _id;
}

void *sipQNetworkReply::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkReply, _clname, &sipCpp) ? sipCpp :  ::QNetworkReply::qt_metacast(_clname));
}

void sipQNetworkReply::ignoreSslErrorsImplementation(const QList< ::QSslError>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_ignoreSslErrorsImplementation);

    if (!sipMeth)
    {
         ::QNetworkReply::ignoreSslErrorsImplementation(a0);
        return;
    }

    extern void sipVH_QtNetwork_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList< ::QSslError>&);

    sipVH_QtNetwork_38(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::setSslConfigurationImplementation(const  ::QSslConfiguration& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_setSslConfigurationImplementation);

    if (!sipMeth)
    {
         ::QNetworkReply::setSslConfigurationImplementation(a0);
        return;
    }

    extern void sipVH_QtNetwork_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QSslConfiguration&);

    sipVH_QtNetwork_37(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::sslConfigurationImplementation( ::QSslConfiguration& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_sslConfigurationImplementation);

    if (!sipMeth)
    {
         ::QNetworkReply::sslConfigurationImplementation(a0);
        return;
    }

    extern void sipVH_QtNetwork_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSslConfiguration&);

    sipVH_QtNetwork_36(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::ignoreSslErrors()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_ignoreSslErrors);

    if (!sipMeth)
    {
         ::QNetworkReply::ignoreSslErrors();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQNetworkReply::setReadBufferSize( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_setReadBufferSize);

    if (!sipMeth)
    {
         ::QNetworkReply::setReadBufferSize(a0);
        return;
    }

    extern void sipVH_QtNetwork_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    sipVH_QtNetwork_23(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::abort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QNetworkReply,sipName_abort);

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQNetworkReply::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QNetworkReply::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QNetworkReply::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QNetworkReply::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QNetworkReply::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QNetworkReply::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkReply::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QNetworkReply::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkReply::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QNetworkReply::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkReply::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QNetworkReply::isSequential();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQNetworkReply::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QNetworkReply::open(a0);

    extern bool sipVH_QtNetwork_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtNetwork_20(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkReply::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QNetworkReply::close();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQNetworkReply::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QNetworkReply::pos();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQNetworkReply::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QNetworkReply::size();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQNetworkReply::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QNetworkReply::seek(a0);

    extern bool sipVH_QtNetwork_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtNetwork_19(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkReply::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QNetworkReply::atEnd();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQNetworkReply::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QNetworkReply::reset();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQNetworkReply::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QNetworkReply::bytesAvailable();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQNetworkReply::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QNetworkReply::bytesToWrite();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQNetworkReply::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QNetworkReply::canReadLine();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQNetworkReply::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QNetworkReply::waitForReadyRead(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkReply::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QNetworkReply::waitForBytesWritten(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQNetworkReply::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,sipName_QNetworkReply,sipName_readData);

    if (!sipMeth)
        return 0;

    extern  ::qint64 sipVH_QtNetwork_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtNetwork_16(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQNetworkReply::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QNetworkReply::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtNetwork_15(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQNetworkReply::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QNetworkReply::writeData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtNetwork_14(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QNetworkReply_abort, "abort(self)");

extern "C" {static PyObject *meth_QNetworkReply_abort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNetworkReply, sipName_abort);
                return SIP_NULLPTR;
            }

            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_abort, doc_QNetworkReply_abort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_close, "close(self)");

extern "C" {static PyObject *meth_QNetworkReply_close(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkReply::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_close, doc_QNetworkReply_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkReply::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isSequential, doc_QNetworkReply_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_readBufferSize, "readBufferSize(self) -> int");

extern "C" {static PyObject *meth_QNetworkReply_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_readBufferSize, doc_QNetworkReply_readBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setReadBufferSize, "setReadBufferSize(self, int)");

extern "C" {static PyObject *meth_QNetworkReply_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkReply::setReadBufferSize(a0) : sipCpp->setReadBufferSize(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setReadBufferSize, doc_QNetworkReply_setReadBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_manager, "manager(self) -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QNetworkReply_manager(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_manager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
             ::QNetworkAccessManager*sipRes;

            sipRes = sipCpp->manager();

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_manager, doc_QNetworkReply_manager);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_operation, "operation(self) -> QNetworkAccessManager.Operation");

extern "C" {static PyObject *meth_QNetworkReply_operation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_operation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
             ::QNetworkAccessManager::Operation sipRes;

            sipRes = sipCpp->operation();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkAccessManager_Operation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_operation, doc_QNetworkReply_operation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_request, "request(self) -> QNetworkRequest");

extern "C" {static PyObject *meth_QNetworkReply_request(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_request(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
             ::QNetworkRequest*sipRes;

            sipRes = new  ::QNetworkRequest(sipCpp->request());

            return sipConvertFromNewType(sipRes,sipType_QNetworkRequest,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_request, doc_QNetworkReply_request);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_error, "error(self) -> QNetworkReply.NetworkError");

extern "C" {static PyObject *meth_QNetworkReply_error(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
             ::QNetworkReply::NetworkError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkReply_NetworkError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_error, doc_QNetworkReply_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QNetworkReply_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_url, doc_QNetworkReply_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_header, "header(self, QNetworkRequest.KnownHeaders) -> Any");

extern "C" {static PyObject *meth_QNetworkReply_header(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->header(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_header, doc_QNetworkReply_header);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_hasRawHeader, "hasRawHeader(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_hasRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_hasRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasRawHeader(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_hasRawHeader, doc_QNetworkReply_hasRawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_rawHeaderList, "rawHeaderList(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QNetworkReply_rawHeaderList(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeaderList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->rawHeaderList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeaderList, doc_QNetworkReply_rawHeaderList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_rawHeader, "rawHeader(self, Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkReply_rawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->rawHeader(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeader, doc_QNetworkReply_rawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_attribute, "attribute(self, QNetworkRequest.Attribute) -> Any");

extern "C" {static PyObject *meth_QNetworkReply_attribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_attribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::Attribute a0;
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_Attribute, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->attribute(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_attribute, doc_QNetworkReply_attribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_sslConfiguration, "sslConfiguration(self) -> QSslConfiguration");

extern "C" {static PyObject *meth_QNetworkReply_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
             ::QSslConfiguration*sipRes;

            sipRes = new  ::QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_sslConfiguration, doc_QNetworkReply_sslConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setSslConfiguration, "setSslConfiguration(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkReply_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QSslConfiguration* a0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setSslConfiguration, doc_QNetworkReply_setSslConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_ignoreSslErrors, "ignoreSslErrors(self)\n"
"ignoreSslErrors(self, Iterable[QSslError])");

extern "C" {static PyObject *meth_QNetworkReply_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkReply::ignoreSslErrors() : sipCpp->ignoreSslErrors());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList< ::QSslError>* a0;
        int a0State = 0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            sipCpp->ignoreSslErrors(*a0);
            sipReleaseType(const_cast<QList< ::QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_ignoreSslErrors, doc_QNetworkReply_ignoreSslErrors);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QNetworkReply_writeData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkReply::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_writeData, doc_QNetworkReply_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setOperation, "setOperation(self, QNetworkAccessManager.Operation)");

extern "C" {static PyObject *meth_QNetworkReply_setOperation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setOperation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAccessManager::Operation a0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0))
        {
            sipCpp->setOperation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setOperation, doc_QNetworkReply_setOperation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setRequest, "setRequest(self, QNetworkRequest)");

extern "C" {static PyObject *meth_QNetworkReply_setRequest(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            sipCpp->setRequest(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setRequest, doc_QNetworkReply_setRequest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setError, "setError(self, QNetworkReply.NetworkError, str)");

extern "C" {static PyObject *meth_QNetworkReply_setError(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkReply::NetworkError a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkReply_NetworkError, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setError(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setError, doc_QNetworkReply_setError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkReply_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setUrl, doc_QNetworkReply_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setHeader, "setHeader(self, QNetworkRequest.KnownHeaders, Any)");

extern "C" {static PyObject *meth_QNetworkReply_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setHeader(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setHeader, doc_QNetworkReply_setHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setRawHeader, "setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkReply_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1J1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setRawHeader(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setRawHeader, doc_QNetworkReply_setRawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setAttribute, "setAttribute(self, QNetworkRequest.Attribute, Any)");

extern "C" {static PyObject *meth_QNetworkReply_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::Attribute a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setAttribute, doc_QNetworkReply_setAttribute);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setFinished, "setFinished(self, bool)");

extern "C" {static PyObject *meth_QNetworkReply_setFinished(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QNetworkReply, &sipCpp, &a0))
        {
            sipCpp->setFinished(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setFinished, doc_QNetworkReply_setFinished);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isFinished, doc_QNetworkReply_isFinished);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_isRunning, "isRunning(self) -> bool");

extern "C" {static PyObject *meth_QNetworkReply_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_isRunning, doc_QNetworkReply_isRunning);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_rawHeaderPairs, "rawHeaderPairs(self) -> List[Tuple[QByteArray, QByteArray]]");

extern "C" {static PyObject *meth_QNetworkReply_rawHeaderPairs(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_rawHeaderPairs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkReply, &sipCpp))
        {
            QList<QPair<QByteArray,QByteArray> >*sipRes;

            sipRes = new QList<QPair<QByteArray,QByteArray> >(sipCpp->rawHeaderPairs());

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QByteArray_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_rawHeaderPairs, doc_QNetworkReply_rawHeaderPairs);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_sslConfigurationImplementation, "sslConfigurationImplementation(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkReply_sslConfigurationImplementation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_sslConfigurationImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSslConfiguration* a0;
        const  ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkReply::sslConfigurationImplementation(*a0) : sipCpp->sslConfigurationImplementation(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_sslConfigurationImplementation, doc_QNetworkReply_sslConfigurationImplementation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_setSslConfigurationImplementation, "setSslConfigurationImplementation(self, QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkReply_setSslConfigurationImplementation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_setSslConfigurationImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSslConfiguration* a0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkReply::setSslConfigurationImplementation(*a0) : sipCpp->setSslConfigurationImplementation(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_setSslConfigurationImplementation, doc_QNetworkReply_setSslConfigurationImplementation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkReply_ignoreSslErrorsImplementation, "ignoreSslErrorsImplementation(self, Iterable[QSslError])");

extern "C" {static PyObject *meth_QNetworkReply_ignoreSslErrorsImplementation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkReply_ignoreSslErrorsImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const QList< ::QSslError>* a0;
        int a0State = 0;
         ::QNetworkReply *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QNetworkReply, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkReply::ignoreSslErrorsImplementation(*a0) : sipCpp->ignoreSslErrorsImplementation(*a0));
            sipReleaseType(const_cast<QList< ::QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkReply, sipName_ignoreSslErrorsImplementation, doc_QNetworkReply_ignoreSslErrorsImplementation);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkReply(void *, const sipTypeDef *);}
static void *cast_QNetworkReply(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkReply *sipCpp = reinterpret_cast< ::QNetworkReply *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkReply(void *, int);}
static void release_QNetworkReply(void *sipCppV, int)
{
     ::QNetworkReply *sipCpp = reinterpret_cast< ::QNetworkReply *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkReply(sipSimpleWrapper *);}
static void dealloc_QNetworkReply(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkReply *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkReply(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkReply(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkReply(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkReply *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkReply(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkReply[] = {{8, 0, 1}};


static PyMethodDef methods_QNetworkReply[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QNetworkReply_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_abort)},
    {SIP_MLNAME_CAST(sipName_attribute), meth_QNetworkReply_attribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_attribute)},
    {SIP_MLNAME_CAST(sipName_close), meth_QNetworkReply_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_close)},
    {SIP_MLNAME_CAST(sipName_error), meth_QNetworkReply_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_error)},
    {SIP_MLNAME_CAST(sipName_hasRawHeader), meth_QNetworkReply_hasRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_hasRawHeader)},
    {SIP_MLNAME_CAST(sipName_header), meth_QNetworkReply_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_header)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QNetworkReply_ignoreSslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_ignoreSslErrors)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrorsImplementation), meth_QNetworkReply_ignoreSslErrorsImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_ignoreSslErrorsImplementation)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QNetworkReply_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isFinished)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QNetworkReply_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isRunning)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QNetworkReply_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_isSequential)},
    {SIP_MLNAME_CAST(sipName_manager), meth_QNetworkReply_manager, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_manager)},
    {SIP_MLNAME_CAST(sipName_operation), meth_QNetworkReply_operation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_operation)},
    {SIP_MLNAME_CAST(sipName_rawHeader), meth_QNetworkReply_rawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_rawHeader)},
    {SIP_MLNAME_CAST(sipName_rawHeaderList), meth_QNetworkReply_rawHeaderList, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_rawHeaderList)},
    {SIP_MLNAME_CAST(sipName_rawHeaderPairs), meth_QNetworkReply_rawHeaderPairs, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_rawHeaderPairs)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QNetworkReply_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_request), meth_QNetworkReply_request, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_request)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QNetworkReply_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QNetworkReply_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setError)},
    {SIP_MLNAME_CAST(sipName_setFinished), meth_QNetworkReply_setFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setFinished)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QNetworkReply_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setHeader)},
    {SIP_MLNAME_CAST(sipName_setOperation), meth_QNetworkReply_setOperation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setOperation)},
    {SIP_MLNAME_CAST(sipName_setRawHeader), meth_QNetworkReply_setRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setRawHeader)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QNetworkReply_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setRequest), meth_QNetworkReply_setRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setRequest)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QNetworkReply_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_setSslConfigurationImplementation), meth_QNetworkReply_setSslConfigurationImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setSslConfigurationImplementation)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QNetworkReply_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_setUrl)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QNetworkReply_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_sslConfigurationImplementation), meth_QNetworkReply_sslConfigurationImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_sslConfigurationImplementation)},
    {SIP_MLNAME_CAST(sipName_url), meth_QNetworkReply_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_url)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QNetworkReply_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkReply_writeData)}
};

static sipEnumMemberDef enummembers_QNetworkReply[] = {
    {sipName_AuthenticationRequiredError, static_cast<int>( ::QNetworkReply::AuthenticationRequiredError), 89},
    {sipName_BackgroundRequestNotAllowedError, static_cast<int>( ::QNetworkReply::BackgroundRequestNotAllowedError), 89},
    {sipName_ConnectionRefusedError, static_cast<int>( ::QNetworkReply::ConnectionRefusedError), 89},
    {sipName_ContentAccessDenied, static_cast<int>( ::QNetworkReply::ContentAccessDenied), 89},
    {sipName_ContentConflictError, static_cast<int>( ::QNetworkReply::ContentConflictError), 89},
    {sipName_ContentGoneError, static_cast<int>( ::QNetworkReply::ContentGoneError), 89},
    {sipName_ContentNotFoundError, static_cast<int>( ::QNetworkReply::ContentNotFoundError), 89},
    {sipName_ContentOperationNotPermittedError, static_cast<int>( ::QNetworkReply::ContentOperationNotPermittedError), 89},
    {sipName_ContentReSendError, static_cast<int>( ::QNetworkReply::ContentReSendError), 89},
    {sipName_HostNotFoundError, static_cast<int>( ::QNetworkReply::HostNotFoundError), 89},
    {sipName_InsecureRedirectError, static_cast<int>( ::QNetworkReply::InsecureRedirectError), 89},
    {sipName_InternalServerError, static_cast<int>( ::QNetworkReply::InternalServerError), 89},
    {sipName_NetworkSessionFailedError, static_cast<int>( ::QNetworkReply::NetworkSessionFailedError), 89},
    {sipName_NoError, static_cast<int>( ::QNetworkReply::NoError), 89},
    {sipName_OperationCanceledError, static_cast<int>( ::QNetworkReply::OperationCanceledError), 89},
    {sipName_OperationNotImplementedError, static_cast<int>( ::QNetworkReply::OperationNotImplementedError), 89},
    {sipName_ProtocolFailure, static_cast<int>( ::QNetworkReply::ProtocolFailure), 89},
    {sipName_ProtocolInvalidOperationError, static_cast<int>( ::QNetworkReply::ProtocolInvalidOperationError), 89},
    {sipName_ProtocolUnknownError, static_cast<int>( ::QNetworkReply::ProtocolUnknownError), 89},
    {sipName_ProxyAuthenticationRequiredError, static_cast<int>( ::QNetworkReply::ProxyAuthenticationRequiredError), 89},
    {sipName_ProxyConnectionClosedError, static_cast<int>( ::QNetworkReply::ProxyConnectionClosedError), 89},
    {sipName_ProxyConnectionRefusedError, static_cast<int>( ::QNetworkReply::ProxyConnectionRefusedError), 89},
    {sipName_ProxyNotFoundError, static_cast<int>( ::QNetworkReply::ProxyNotFoundError), 89},
    {sipName_ProxyTimeoutError, static_cast<int>( ::QNetworkReply::ProxyTimeoutError), 89},
    {sipName_RemoteHostClosedError, static_cast<int>( ::QNetworkReply::RemoteHostClosedError), 89},
    {sipName_ServiceUnavailableError, static_cast<int>( ::QNetworkReply::ServiceUnavailableError), 89},
    {sipName_SslHandshakeFailedError, static_cast<int>( ::QNetworkReply::SslHandshakeFailedError), 89},
    {sipName_TemporaryNetworkFailureError, static_cast<int>( ::QNetworkReply::TemporaryNetworkFailureError), 89},
    {sipName_TimeoutError, static_cast<int>( ::QNetworkReply::TimeoutError), 89},
    {sipName_TooManyRedirectsError, static_cast<int>( ::QNetworkReply::TooManyRedirectsError), 89},
    {sipName_UnknownContentError, static_cast<int>( ::QNetworkReply::UnknownContentError), 89},
    {sipName_UnknownNetworkError, static_cast<int>( ::QNetworkReply::UnknownNetworkError), 89},
    {sipName_UnknownProxyError, static_cast<int>( ::QNetworkReply::UnknownProxyError), 89},
    {sipName_UnknownServerError, static_cast<int>( ::QNetworkReply::UnknownServerError), 89},
};

PyDoc_STRVAR(doc_QNetworkReply, "\1QNetworkReply(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNetworkReply[] = {
    {"redirectAllowed()", "\1redirectAllowed(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"redirected(QUrl)", "\1redirected(self, QUrl)", SIP_NULLPTR, SIP_NULLPTR},
    {"preSharedKeyAuthenticationRequired(QSslPreSharedKeyAuthenticator*)", "\1preSharedKeyAuthenticationRequired(self, QSslPreSharedKeyAuthenticator)", SIP_NULLPTR, SIP_NULLPTR},
    {"downloadProgress(qint64,qint64)", "\1downloadProgress(self, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"uploadProgress(qint64,qint64)", "\1uploadProgress(self, int, int)", SIP_NULLPTR, SIP_NULLPTR},
    {"sslErrors(QList<QSslError>)", "\1sslErrors(self, Iterable[QSslError])", SIP_NULLPTR, SIP_NULLPTR},
    {"encrypted()", "\1encrypted(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"metaDataChanged()", "\1metaDataChanged(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QNetworkReply::NetworkError)", "\1error(self, QNetworkReply.NetworkError)", &methods_QNetworkReply[3], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QNetworkReply = {
    & ::QNetworkReply::staticMetaObject,
    0,
    signals_QNetworkReply,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkReply = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkReply,
        {SIP_NULLPTR},
        &plugin_QNetworkReply
    },
    {
        sipNameNr_QNetworkReply,
        {0, 0, 1},
        33, methods_QNetworkReply,
        34, enummembers_QNetworkReply,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkReply,
    -1,
    -1,
    supers_QNetworkReply,
    SIP_NULLPTR,
    init_type_QNetworkReply,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkReply,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QNetworkReply,
    cast_QNetworkReply,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 2747 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 2751 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 2754 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 91 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 2757 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQNetworkProxyFactory : public  ::QNetworkProxyFactory
{
public:
    sipQNetworkProxyFactory();
    sipQNetworkProxyFactory(const  ::QNetworkProxyFactory&);
    virtual ~sipQNetworkProxyFactory();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QList< ::QNetworkProxy> queryProxy(const  ::QNetworkProxyQuery&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkProxyFactory(const sipQNetworkProxyFactory &);
    sipQNetworkProxyFactory &operator = (const sipQNetworkProxyFactory &);

    char sipPyMethods[1];
};

sipQNetworkProxyFactory::sipQNetworkProxyFactory():  ::QNetworkProxyFactory(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkProxyFactory::sipQNetworkProxyFactory(const  ::QNetworkProxyFactory& a0):  ::QNetworkProxyFactory(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkProxyFactory::~sipQNetworkProxyFactory()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

QList< ::QNetworkProxy> sipQNetworkProxyFactory::queryProxy(const  ::QNetworkProxyQuery& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QNetworkProxyFactory,sipName_queryProxy);

    if (!sipMeth)
        return QList< ::QNetworkProxy>();

    extern QList< ::QNetworkProxy> sipVH_QtNetwork_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkProxyQuery&);

    return sipVH_QtNetwork_35(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_queryProxy, "queryProxy(self, query: QNetworkProxyQuery = QNetworkProxyQuery()) -> List[QNetworkProxy]");

extern "C" {static PyObject *meth_QNetworkProxyFactory_queryProxy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_queryProxy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNetworkProxyQuery& a0def = QNetworkProxyQuery();
        const  ::QNetworkProxyQuery* a0 = &a0def;
         ::QNetworkProxyFactory *sipCpp;

        static const char *sipKwdList[] = {
            sipName_query,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J9", &sipSelf, sipType_QNetworkProxyFactory, &sipCpp, sipType_QNetworkProxyQuery, &a0))
        {
            QList< ::QNetworkProxy>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QNetworkProxyFactory, sipName_queryProxy);
                return SIP_NULLPTR;
            }

            sipRes = new QList< ::QNetworkProxy>(sipCpp->queryProxy(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkProxy,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_queryProxy, doc_QNetworkProxyFactory_queryProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_setApplicationProxyFactory, "setApplicationProxyFactory(QNetworkProxyFactory)");

extern "C" {static PyObject *meth_QNetworkProxyFactory_setApplicationProxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_setApplicationProxyFactory(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxyFactory* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J:", sipType_QNetworkProxyFactory, &a0))
        {
             ::QNetworkProxyFactory::setApplicationProxyFactory(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_setApplicationProxyFactory, doc_QNetworkProxyFactory_setApplicationProxyFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_proxyForQuery, "proxyForQuery(QNetworkProxyQuery) -> List[QNetworkProxy]");

extern "C" {static PyObject *meth_QNetworkProxyFactory_proxyForQuery(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_proxyForQuery(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QNetworkProxyQuery, &a0))
        {
            QList< ::QNetworkProxy>*sipRes;

            sipRes = new QList< ::QNetworkProxy>( ::QNetworkProxyFactory::proxyForQuery(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkProxy,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_proxyForQuery, doc_QNetworkProxyFactory_proxyForQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_systemProxyForQuery, "systemProxyForQuery(query: QNetworkProxyQuery = QNetworkProxyQuery()) -> List[QNetworkProxy]");

extern "C" {static PyObject *meth_QNetworkProxyFactory_systemProxyForQuery(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_systemProxyForQuery(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery& a0def = QNetworkProxyQuery();
        const  ::QNetworkProxyQuery* a0 = &a0def;

        static const char *sipKwdList[] = {
            sipName_query,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|J9", sipType_QNetworkProxyQuery, &a0))
        {
            QList< ::QNetworkProxy>*sipRes;

            sipRes = new QList< ::QNetworkProxy>( ::QNetworkProxyFactory::systemProxyForQuery(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkProxy,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_systemProxyForQuery, doc_QNetworkProxyFactory_systemProxyForQuery);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_setUseSystemConfiguration, "setUseSystemConfiguration(bool)");

extern "C" {static PyObject *meth_QNetworkProxyFactory_setUseSystemConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_setUseSystemConfiguration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
             ::QNetworkProxyFactory::setUseSystemConfiguration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_setUseSystemConfiguration, doc_QNetworkProxyFactory_setUseSystemConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyFactory_usesSystemConfiguration, "usesSystemConfiguration() -> bool");

extern "C" {static PyObject *meth_QNetworkProxyFactory_usesSystemConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyFactory_usesSystemConfiguration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes =  ::QNetworkProxyFactory::usesSystemConfiguration();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyFactory, sipName_usesSystemConfiguration, doc_QNetworkProxyFactory_usesSystemConfiguration);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkProxyFactory(void *, int);}
static void release_QNetworkProxyFactory(void *sipCppV, int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQNetworkProxyFactory *>(sipCppV);
    else
        delete reinterpret_cast< ::QNetworkProxyFactory *>(sipCppV);
}


extern "C" {static void dealloc_QNetworkProxyFactory(sipSimpleWrapper *);}
static void dealloc_QNetworkProxyFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkProxyFactory *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkProxyFactory(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkProxyFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkProxyFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQNetworkProxyFactory *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new sipQNetworkProxyFactory();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QNetworkProxyFactory* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkProxyFactory, &a0))
        {
            sipCpp = new sipQNetworkProxyFactory(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QNetworkProxyFactory[] = {
    {SIP_MLNAME_CAST(sipName_proxyForQuery), meth_QNetworkProxyFactory_proxyForQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyFactory_proxyForQuery)},
    {SIP_MLNAME_CAST(sipName_queryProxy), SIP_MLMETH_CAST(meth_QNetworkProxyFactory_queryProxy), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkProxyFactory_queryProxy)},
    {SIP_MLNAME_CAST(sipName_setApplicationProxyFactory), meth_QNetworkProxyFactory_setApplicationProxyFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyFactory_setApplicationProxyFactory)},
    {SIP_MLNAME_CAST(sipName_setUseSystemConfiguration), meth_QNetworkProxyFactory_setUseSystemConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyFactory_setUseSystemConfiguration)},
    {SIP_MLNAME_CAST(sipName_systemProxyForQuery), SIP_MLMETH_CAST(meth_QNetworkProxyFactory_systemProxyForQuery), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkProxyFactory_systemProxyForQuery)},
    {SIP_MLNAME_CAST(sipName_usesSystemConfiguration), meth_QNetworkProxyFactory_usesSystemConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyFactory_usesSystemConfiguration)}
};

PyDoc_STRVAR(doc_QNetworkProxyFactory, "\1QNetworkProxyFactory()\n"
"QNetworkProxyFactory(QNetworkProxyFactory)");


static pyqt5ClassPluginDef plugin_QNetworkProxyFactory = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkProxyFactory = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkProxyFactory,
        {SIP_NULLPTR},
        &plugin_QNetworkProxyFactory
    },
    {
        sipNameNr_QNetworkProxyFactory,
        {0, 0, 1},
        6, methods_QNetworkProxyFactory,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkProxyFactory,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QNetworkProxyFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkProxyFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QNetworkProxyFactory,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 91 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 3128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 3132 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 3135 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 3138 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkProxyQuery_queryType, "queryType(self) -> QNetworkProxyQuery.QueryType");

extern "C" {static PyObject *meth_QNetworkProxyQuery_queryType(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_queryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp))
        {
             ::QNetworkProxyQuery::QueryType sipRes;

            sipRes = sipCpp->queryType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkProxyQuery_QueryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_queryType, doc_QNetworkProxyQuery_queryType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_setQueryType, "setQueryType(self, QNetworkProxyQuery.QueryType)");

extern "C" {static PyObject *meth_QNetworkProxyQuery_setQueryType(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_setQueryType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxyQuery::QueryType a0;
         ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp, sipType_QNetworkProxyQuery_QueryType, &a0))
        {
            sipCpp->setQueryType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_setQueryType, doc_QNetworkProxyQuery_setQueryType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_peerPort, "peerPort(self) -> int");

extern "C" {static PyObject *meth_QNetworkProxyQuery_peerPort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_peerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->peerPort();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_peerPort, doc_QNetworkProxyQuery_peerPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_setPeerPort, "setPeerPort(self, int)");

extern "C" {static PyObject *meth_QNetworkProxyQuery_setPeerPort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_setPeerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp, &a0))
        {
            sipCpp->setPeerPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_setPeerPort, doc_QNetworkProxyQuery_setPeerPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_peerHostName, "peerHostName(self) -> str");

extern "C" {static PyObject *meth_QNetworkProxyQuery_peerHostName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_peerHostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->peerHostName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_peerHostName, doc_QNetworkProxyQuery_peerHostName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_setPeerHostName, "setPeerHostName(self, str)");

extern "C" {static PyObject *meth_QNetworkProxyQuery_setPeerHostName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_setPeerHostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPeerHostName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_setPeerHostName, doc_QNetworkProxyQuery_setPeerHostName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_localPort, "localPort(self) -> int");

extern "C" {static PyObject *meth_QNetworkProxyQuery_localPort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_localPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->localPort();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_localPort, doc_QNetworkProxyQuery_localPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_setLocalPort, "setLocalPort(self, int)");

extern "C" {static PyObject *meth_QNetworkProxyQuery_setLocalPort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_setLocalPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp, &a0))
        {
            sipCpp->setLocalPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_setLocalPort, doc_QNetworkProxyQuery_setLocalPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_protocolTag, "protocolTag(self) -> str");

extern "C" {static PyObject *meth_QNetworkProxyQuery_protocolTag(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_protocolTag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->protocolTag());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_protocolTag, doc_QNetworkProxyQuery_protocolTag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_setProtocolTag, "setProtocolTag(self, str)");

extern "C" {static PyObject *meth_QNetworkProxyQuery_setProtocolTag(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_setProtocolTag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setProtocolTag(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_setProtocolTag, doc_QNetworkProxyQuery_setProtocolTag);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QNetworkProxyQuery_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_url, doc_QNetworkProxyQuery_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkProxyQuery_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_setUrl, doc_QNetworkProxyQuery_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_networkConfiguration, "networkConfiguration(self) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkProxyQuery_networkConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_networkConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->networkConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_networkConfiguration, doc_QNetworkProxyQuery_networkConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_setNetworkConfiguration, "setNetworkConfiguration(self, QNetworkConfiguration)");

extern "C" {static PyObject *meth_QNetworkProxyQuery_setNetworkConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_setNetworkConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration* a0;
         ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp, sipType_QNetworkConfiguration, &a0))
        {
            sipCpp->setNetworkConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_setNetworkConfiguration, doc_QNetworkProxyQuery_setNetworkConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxyQuery_swap, "swap(self, QNetworkProxyQuery)");

extern "C" {static PyObject *meth_QNetworkProxyQuery_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxyQuery_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxyQuery* a0;
         ::QNetworkProxyQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkProxyQuery, &sipCpp, sipType_QNetworkProxyQuery, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxyQuery, sipName_swap, doc_QNetworkProxyQuery_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkProxyQuery___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxyQuery___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkProxyQuery *sipCpp = reinterpret_cast< ::QNetworkProxyQuery *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxyQuery));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkProxyQuery, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkProxyQuery::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkProxyQuery, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkProxyQuery___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxyQuery___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkProxyQuery *sipCpp = reinterpret_cast< ::QNetworkProxyQuery *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxyQuery));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxyQuery* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkProxyQuery, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkProxyQuery::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkProxyQuery, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkProxyQuery(void *, int);}
static void release_QNetworkProxyQuery(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkProxyQuery *>(sipCppV);
}


extern "C" {static void assign_QNetworkProxyQuery(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkProxyQuery(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkProxyQuery *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkProxyQuery *>(sipSrc);
}


extern "C" {static void *array_QNetworkProxyQuery(SIP_SSIZE_T);}
static void *array_QNetworkProxyQuery(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkProxyQuery[sipNrElem];
}


extern "C" {static void *copy_QNetworkProxyQuery(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkProxyQuery(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkProxyQuery(reinterpret_cast<const  ::QNetworkProxyQuery *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkProxyQuery(sipSimpleWrapper *);}
static void dealloc_QNetworkProxyQuery(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkProxyQuery(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkProxyQuery(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkProxyQuery(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkProxyQuery *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkProxyQuery();

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;
         ::QNetworkProxyQuery::QueryType a1 = QNetworkProxyQuery::UrlRequest;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|E", sipType_QUrl, &a0, sipType_QNetworkProxyQuery_QueryType, &a1))
        {
            sipCpp = new  ::QNetworkProxyQuery(*a0,a1);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QNetworkProxyQuery::QueryType a3 = QNetworkProxyQuery::TcpSocket;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_protocolTag,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1i|J1E", sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State, sipType_QNetworkProxyQuery_QueryType, &a3))
        {
            sipCpp = new  ::QNetworkProxyQuery(*a0,a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipCpp;
        }
    }

    {
         ::quint16 a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QNetworkProxyQuery::QueryType a2 = QNetworkProxyQuery::TcpServer;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_protocolTag,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "t|J1E", &a0, sipType_QString,&a1, &a1State, sipType_QNetworkProxyQuery_QueryType, &a2))
        {
            sipCpp = new  ::QNetworkProxyQuery(a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkConfiguration* a0;
        const  ::QUrl* a1;
         ::QNetworkProxyQuery::QueryType a2 = QNetworkProxyQuery::UrlRequest;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_queryType,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J9|E", sipType_QNetworkConfiguration, &a0, sipType_QUrl, &a1, sipType_QNetworkProxyQuery_QueryType, &a2))
        {
            sipCpp = new  ::QNetworkProxyQuery(*a0,*a1,a2);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkConfiguration* a0;
        const  ::QString* a1;
        int a1State = 0;
        int a2;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QNetworkProxyQuery::QueryType a4 = QNetworkProxyQuery::TcpSocket;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_protocolTag,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J1i|J1E", sipType_QNetworkConfiguration, &a0, sipType_QString,&a1, &a1State, &a2, sipType_QString,&a3, &a3State, sipType_QNetworkProxyQuery_QueryType, &a4))
        {
            sipCpp = new  ::QNetworkProxyQuery(*a0,*a1,a2,*a3,a4);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkConfiguration* a0;
         ::quint16 a1;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QNetworkProxyQuery::QueryType a3 = QNetworkProxyQuery::TcpServer;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_protocolTag,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9t|J1E", sipType_QNetworkConfiguration, &a0, &a1, sipType_QString,&a2, &a2State, sipType_QNetworkProxyQuery_QueryType, &a3))
        {
            sipCpp = new  ::QNetworkProxyQuery(*a0,a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkProxyQuery* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkProxyQuery, &a0))
        {
            sipCpp = new  ::QNetworkProxyQuery(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkProxyQuery[] = {
    {(void *)slot_QNetworkProxyQuery___ne__, ne_slot},
    {(void *)slot_QNetworkProxyQuery___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkProxyQuery[] = {
    {SIP_MLNAME_CAST(sipName_localPort), meth_QNetworkProxyQuery_localPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_localPort)},
    {SIP_MLNAME_CAST(sipName_networkConfiguration), meth_QNetworkProxyQuery_networkConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_networkConfiguration)},
    {SIP_MLNAME_CAST(sipName_peerHostName), meth_QNetworkProxyQuery_peerHostName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_peerHostName)},
    {SIP_MLNAME_CAST(sipName_peerPort), meth_QNetworkProxyQuery_peerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_peerPort)},
    {SIP_MLNAME_CAST(sipName_protocolTag), meth_QNetworkProxyQuery_protocolTag, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_protocolTag)},
    {SIP_MLNAME_CAST(sipName_queryType), meth_QNetworkProxyQuery_queryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_queryType)},
    {SIP_MLNAME_CAST(sipName_setLocalPort), meth_QNetworkProxyQuery_setLocalPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_setLocalPort)},
    {SIP_MLNAME_CAST(sipName_setNetworkConfiguration), meth_QNetworkProxyQuery_setNetworkConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_setNetworkConfiguration)},
    {SIP_MLNAME_CAST(sipName_setPeerHostName), meth_QNetworkProxyQuery_setPeerHostName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_setPeerHostName)},
    {SIP_MLNAME_CAST(sipName_setPeerPort), meth_QNetworkProxyQuery_setPeerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_setPeerPort)},
    {SIP_MLNAME_CAST(sipName_setProtocolTag), meth_QNetworkProxyQuery_setProtocolTag, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_setProtocolTag)},
    {SIP_MLNAME_CAST(sipName_setQueryType), meth_QNetworkProxyQuery_setQueryType, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_setQueryType)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QNetworkProxyQuery_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_setUrl)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkProxyQuery_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_swap)},
    {SIP_MLNAME_CAST(sipName_url), meth_QNetworkProxyQuery_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxyQuery_url)}
};

static sipEnumMemberDef enummembers_QNetworkProxyQuery[] = {
    {sipName_SctpServer, static_cast<int>( ::QNetworkProxyQuery::SctpServer), 87},
    {sipName_SctpSocket, static_cast<int>( ::QNetworkProxyQuery::SctpSocket), 87},
    {sipName_TcpServer, static_cast<int>( ::QNetworkProxyQuery::TcpServer), 87},
    {sipName_TcpSocket, static_cast<int>( ::QNetworkProxyQuery::TcpSocket), 87},
    {sipName_UdpSocket, static_cast<int>( ::QNetworkProxyQuery::UdpSocket), 87},
    {sipName_UrlRequest, static_cast<int>( ::QNetworkProxyQuery::UrlRequest), 87},
};

PyDoc_STRVAR(doc_QNetworkProxyQuery, "\1QNetworkProxyQuery()\n"
"QNetworkProxyQuery(QUrl, type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.UrlRequest)\n"
"QNetworkProxyQuery(str, int, protocolTag: str = '', type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.TcpSocket)\n"
"QNetworkProxyQuery(int, protocolTag: str = '', type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.TcpServer)\n"
"QNetworkProxyQuery(QNetworkConfiguration, QUrl, queryType: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.UrlRequest)\n"
"QNetworkProxyQuery(QNetworkConfiguration, str, int, protocolTag: str = '', type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.TcpSocket)\n"
"QNetworkProxyQuery(QNetworkConfiguration, int, protocolTag: str = '', type: QNetworkProxyQuery.QueryType = QNetworkProxyQuery.TcpServer)\n"
"QNetworkProxyQuery(QNetworkProxyQuery)");


static pyqt5ClassPluginDef plugin_QNetworkProxyQuery = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkProxyQuery = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkProxyQuery,
        {SIP_NULLPTR},
        &plugin_QNetworkProxyQuery
    },
    {
        sipNameNr_QNetworkProxyQuery,
        {0, 0, 1},
        15, methods_QNetworkProxyQuery,
        6, enummembers_QNetworkProxyQuery,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkProxyQuery,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkProxyQuery,
    init_type_QNetworkProxyQuery,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkProxyQuery,
    assign_QNetworkProxyQuery,
    array_QNetworkProxyQuery,
    copy_QNetworkProxyQuery,
    release_QNetworkProxyQuery,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 3945 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 3949 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QNetworkProxy_Capabilities___hash__(PyObject *);}
static long slot_QNetworkProxy_Capabilities___hash__(PyObject *sipSelf)
{
     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QNetworkProxy::Capabilities::Int();
#line 3967 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QNetworkProxy_Capabilities___bool__(PyObject *);}
static int slot_QNetworkProxy_Capabilities___bool__(PyObject *sipSelf)
{
     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkProxy::Capabilities::Int() != 0);
#line 3992 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy::Capabilities* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QNetworkProxy_Capabilities, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkProxy::Capabilities::Int() != a0->operator QNetworkProxy::Capabilities::Int());
#line 4022 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QNetworkProxy::Capabilities *>(a0),sipType_QNetworkProxy_Capabilities,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkProxy_Capabilities, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy::Capabilities* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QNetworkProxy_Capabilities, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkProxy::Capabilities::Int() == a0->operator QNetworkProxy::Capabilities::Int());
#line 4058 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QNetworkProxy::Capabilities *>(a0),sipType_QNetworkProxy_Capabilities,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkProxy_Capabilities, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkProxy_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QNetworkProxy::Capabilities(*sipCpp ^ a0);
#line 4097 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___xor__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxy::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkProxy_Capabilities, &a0, &a0State, &a1))
        {
             ::QNetworkProxy::Capabilities*sipRes;

            sipRes = new  ::QNetworkProxy::Capabilities((*a0 ^ a1));
            sipReleaseType(a0,sipType_QNetworkProxy_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___ior__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkProxy_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QNetworkProxy::Capabilities(*sipCpp | a0);
#line 4169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___or__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxy::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkProxy_Capabilities, &a0, &a0State, &a1))
        {
             ::QNetworkProxy::Capabilities*sipRes;

            sipRes = new  ::QNetworkProxy::Capabilities((*a0 | a1));
            sipReleaseType(a0,sipType_QNetworkProxy_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___iand__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkProxy_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QNetworkProxy::Capabilities::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___and__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxy::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkProxy_Capabilities, &a0, &a0State, &a1))
        {
             ::QNetworkProxy::Capabilities*sipRes;

            sipRes = new  ::QNetworkProxy::Capabilities((*a0 & a1));
            sipReleaseType(a0,sipType_QNetworkProxy_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___invert__(PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___invert__(PyObject *sipSelf)
{
     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QNetworkProxy::Capabilities*sipRes;

            sipRes = new  ::QNetworkProxy::Capabilities(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy_Capabilities,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNetworkProxy_Capabilities___int__(PyObject *);}
static PyObject *slot_QNetworkProxy_Capabilities___int__(PyObject *sipSelf)
{
     ::QNetworkProxy::Capabilities *sipCpp = reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkProxy_Capabilities(void *, int);}
static void release_QNetworkProxy_Capabilities(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipCppV);
}


extern "C" {static void assign_QNetworkProxy_Capabilities(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkProxy_Capabilities(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkProxy::Capabilities *>(sipSrc);
}


extern "C" {static void *array_QNetworkProxy_Capabilities(SIP_SSIZE_T);}
static void *array_QNetworkProxy_Capabilities(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkProxy::Capabilities[sipNrElem];
}


extern "C" {static void *copy_QNetworkProxy_Capabilities(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkProxy_Capabilities(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkProxy::Capabilities(reinterpret_cast<const  ::QNetworkProxy::Capabilities *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkProxy_Capabilities(sipSimpleWrapper *);}
static void dealloc_QNetworkProxy_Capabilities(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkProxy_Capabilities(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkProxy_Capabilities(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkProxy_Capabilities(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkProxy::Capabilities *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkProxy::Capabilities();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QNetworkProxy::Capabilities(a0);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkProxy::Capabilities* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QNetworkProxy_Capabilities, &a0, &a0State))
        {
            sipCpp = new  ::QNetworkProxy::Capabilities(*a0);
            sipReleaseType(const_cast< ::QNetworkProxy::Capabilities *>(a0),sipType_QNetworkProxy_Capabilities,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QNetworkProxy_Capabilities(PyObject *, void **, int *, PyObject *);}
static int convertTo_QNetworkProxy_Capabilities(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QNetworkProxy::Capabilities **sipCppPtr = reinterpret_cast< ::QNetworkProxy::Capabilities **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QNetworkProxy::Capabilities is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QNetworkProxy_Capability)) ||
            sipCanConvertToType(sipPy, sipType_QNetworkProxy_Capabilities, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QNetworkProxy_Capability)))
{
    *sipCppPtr = new QNetworkProxy::Capabilities(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QNetworkProxy::Capabilities *>(sipConvertToType(sipPy, sipType_QNetworkProxy_Capabilities, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 4437 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkProxy_Capabilities[] = {
    {(void *)slot_QNetworkProxy_Capabilities___hash__, hash_slot},
    {(void *)slot_QNetworkProxy_Capabilities___bool__, bool_slot},
    {(void *)slot_QNetworkProxy_Capabilities___ne__, ne_slot},
    {(void *)slot_QNetworkProxy_Capabilities___eq__, eq_slot},
    {(void *)slot_QNetworkProxy_Capabilities___ixor__, ixor_slot},
    {(void *)slot_QNetworkProxy_Capabilities___xor__, xor_slot},
    {(void *)slot_QNetworkProxy_Capabilities___ior__, ior_slot},
    {(void *)slot_QNetworkProxy_Capabilities___or__, or_slot},
    {(void *)slot_QNetworkProxy_Capabilities___iand__, iand_slot},
    {(void *)slot_QNetworkProxy_Capabilities___and__, and_slot},
    {(void *)slot_QNetworkProxy_Capabilities___invert__, invert_slot},
    {(void *)slot_QNetworkProxy_Capabilities___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QNetworkProxy_Capabilities, "\1QNetworkProxy.Capabilities()\n"
"QNetworkProxy.Capabilities(Union[QNetworkProxy.Capabilities, QNetworkProxy.Capability])\n"
"QNetworkProxy.Capabilities(QNetworkProxy.Capabilities)");


static pyqt5ClassPluginDef plugin_QNetworkProxy_Capabilities = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkProxy_Capabilities = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkProxy__Capabilities,
        {SIP_NULLPTR},
        &plugin_QNetworkProxy_Capabilities
    },
    {
        sipNameNr_Capabilities,
        {81, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkProxy_Capabilities,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkProxy_Capabilities,
    init_type_QNetworkProxy_Capabilities,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkProxy_Capabilities,
    assign_QNetworkProxy_Capabilities,
    array_QNetworkProxy_Capabilities,
    copy_QNetworkProxy_Capabilities,
    release_QNetworkProxy_Capabilities,
    SIP_NULLPTR,
    convertTo_QNetworkProxy_Capabilities,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 4525 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 4529 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 4532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 4535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 4538 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 4541 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 4544 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkProxy_setType, "setType(self, QNetworkProxy.ProxyType)");

extern "C" {static PyObject *meth_QNetworkProxy_setType(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxy::ProxyType a0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QNetworkProxy_ProxyType, &a0))
        {
            sipCpp->setType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setType, doc_QNetworkProxy_setType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_type, "type(self) -> QNetworkProxy.ProxyType");

extern "C" {static PyObject *meth_QNetworkProxy_type(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
             ::QNetworkProxy::ProxyType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkProxy_ProxyType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_type, doc_QNetworkProxy_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_setUser, "setUser(self, str)");

extern "C" {static PyObject *meth_QNetworkProxy_setUser(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setUser(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setUser(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setUser, doc_QNetworkProxy_setUser);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_user, "user(self) -> str");

extern "C" {static PyObject *meth_QNetworkProxy_user(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_user(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->user());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_user, doc_QNetworkProxy_user);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_setPassword, "setPassword(self, str)");

extern "C" {static PyObject *meth_QNetworkProxy_setPassword(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPassword(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setPassword, doc_QNetworkProxy_setPassword);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_password, "password(self) -> str");

extern "C" {static PyObject *meth_QNetworkProxy_password(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_password(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->password());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_password, doc_QNetworkProxy_password);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_setHostName, "setHostName(self, str)");

extern "C" {static PyObject *meth_QNetworkProxy_setHostName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setHostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHostName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setHostName, doc_QNetworkProxy_setHostName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_hostName, "hostName(self) -> str");

extern "C" {static PyObject *meth_QNetworkProxy_hostName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_hostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->hostName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_hostName, doc_QNetworkProxy_hostName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_setPort, "setPort(self, int)");

extern "C" {static PyObject *meth_QNetworkProxy_setPort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QNetworkProxy, &sipCpp, &a0))
        {
            sipCpp->setPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setPort, doc_QNetworkProxy_setPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_port, "port(self) -> int");

extern "C" {static PyObject *meth_QNetworkProxy_port(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_port(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->port();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_port, doc_QNetworkProxy_port);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_setApplicationProxy, "setApplicationProxy(QNetworkProxy)");

extern "C" {static PyObject *meth_QNetworkProxy_setApplicationProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setApplicationProxy(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QNetworkProxy, &a0))
        {
             ::QNetworkProxy::setApplicationProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setApplicationProxy, doc_QNetworkProxy_setApplicationProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_applicationProxy, "applicationProxy() -> QNetworkProxy");

extern "C" {static PyObject *meth_QNetworkProxy_applicationProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_applicationProxy(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QNetworkProxy*sipRes;

            sipRes = new  ::QNetworkProxy( ::QNetworkProxy::applicationProxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_applicationProxy, doc_QNetworkProxy_applicationProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_isCachingProxy, "isCachingProxy(self) -> bool");

extern "C" {static PyObject *meth_QNetworkProxy_isCachingProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_isCachingProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCachingProxy();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_isCachingProxy, doc_QNetworkProxy_isCachingProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_isTransparentProxy, "isTransparentProxy(self) -> bool");

extern "C" {static PyObject *meth_QNetworkProxy_isTransparentProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_isTransparentProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTransparentProxy();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_isTransparentProxy, doc_QNetworkProxy_isTransparentProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_setCapabilities, "setCapabilities(self, Union[QNetworkProxy.Capabilities, QNetworkProxy.Capability])");

extern "C" {static PyObject *meth_QNetworkProxy_setCapabilities(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setCapabilities(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxy::Capabilities* a0;
        int a0State = 0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QNetworkProxy_Capabilities, &a0, &a0State))
        {
            sipCpp->setCapabilities(*a0);
            sipReleaseType(a0,sipType_QNetworkProxy_Capabilities,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setCapabilities, doc_QNetworkProxy_setCapabilities);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_capabilities, "capabilities(self) -> QNetworkProxy.Capabilities");

extern "C" {static PyObject *meth_QNetworkProxy_capabilities(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_capabilities(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
             ::QNetworkProxy::Capabilities*sipRes;

            sipRes = new  ::QNetworkProxy::Capabilities(sipCpp->capabilities());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy_Capabilities,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_capabilities, doc_QNetworkProxy_capabilities);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_swap, "swap(self, QNetworkProxy)");

extern "C" {static PyObject *meth_QNetworkProxy_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxy* a0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_swap, doc_QNetworkProxy_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_header, "header(self, QNetworkRequest.KnownHeaders) -> Any");

extern "C" {static PyObject *meth_QNetworkProxy_header(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->header(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_header, doc_QNetworkProxy_header);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_setHeader, "setHeader(self, QNetworkRequest.KnownHeaders, Any)");

extern "C" {static PyObject *meth_QNetworkProxy_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setHeader(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setHeader, doc_QNetworkProxy_setHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_hasRawHeader, "hasRawHeader(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QNetworkProxy_hasRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_hasRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasRawHeader(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_hasRawHeader, doc_QNetworkProxy_hasRawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_rawHeaderList, "rawHeaderList(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QNetworkProxy_rawHeaderList(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_rawHeaderList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkProxy, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->rawHeaderList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_rawHeaderList, doc_QNetworkProxy_rawHeaderList);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_rawHeader, "rawHeader(self, Union[QByteArray, bytes, bytearray]) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkProxy_rawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_rawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->rawHeader(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_rawHeader, doc_QNetworkProxy_rawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkProxy_setRawHeader, "setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkProxy_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkProxy_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNetworkProxy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QNetworkProxy, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setRawHeader(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkProxy, sipName_setRawHeader, doc_QNetworkProxy_setRawHeader);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkProxy___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkProxy *sipCpp = reinterpret_cast< ::QNetworkProxy *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkProxy, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkProxy::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkProxy, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkProxy___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkProxy___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkProxy *sipCpp = reinterpret_cast< ::QNetworkProxy *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkProxy));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkProxy, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkProxy::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkProxy, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkProxy(void *, int);}
static void release_QNetworkProxy(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkProxy *>(sipCppV);
}


extern "C" {static void assign_QNetworkProxy(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkProxy(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkProxy *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkProxy *>(sipSrc);
}


extern "C" {static void *array_QNetworkProxy(SIP_SSIZE_T);}
static void *array_QNetworkProxy(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkProxy[sipNrElem];
}


extern "C" {static void *copy_QNetworkProxy(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkProxy(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkProxy(reinterpret_cast<const  ::QNetworkProxy *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkProxy(sipSimpleWrapper *);}
static void dealloc_QNetworkProxy(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkProxy(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkProxy(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkProxy(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkProxy *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkProxy();

            return sipCpp;
        }
    }

    {
         ::QNetworkProxy::ProxyType a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::quint16 a2 = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_hostName,
            sipName_port,
            sipName_user,
            sipName_password,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|J1tJ1J1", sipType_QNetworkProxy_ProxyType, &a0, sipType_QString,&a1, &a1State, &a2, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State))
        {
            sipCpp = new  ::QNetworkProxy(a0,*a1,a2,*a3,*a4);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkProxy* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkProxy, &a0))
        {
            sipCpp = new  ::QNetworkProxy(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkProxy[] = {
    {(void *)slot_QNetworkProxy___ne__, ne_slot},
    {(void *)slot_QNetworkProxy___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkProxy[] = {
    {SIP_MLNAME_CAST(sipName_applicationProxy), meth_QNetworkProxy_applicationProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_applicationProxy)},
    {SIP_MLNAME_CAST(sipName_capabilities), meth_QNetworkProxy_capabilities, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_capabilities)},
    {SIP_MLNAME_CAST(sipName_hasRawHeader), meth_QNetworkProxy_hasRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_hasRawHeader)},
    {SIP_MLNAME_CAST(sipName_header), meth_QNetworkProxy_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_header)},
    {SIP_MLNAME_CAST(sipName_hostName), meth_QNetworkProxy_hostName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_hostName)},
    {SIP_MLNAME_CAST(sipName_isCachingProxy), meth_QNetworkProxy_isCachingProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_isCachingProxy)},
    {SIP_MLNAME_CAST(sipName_isTransparentProxy), meth_QNetworkProxy_isTransparentProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_isTransparentProxy)},
    {SIP_MLNAME_CAST(sipName_password), meth_QNetworkProxy_password, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_password)},
    {SIP_MLNAME_CAST(sipName_port), meth_QNetworkProxy_port, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_port)},
    {SIP_MLNAME_CAST(sipName_rawHeader), meth_QNetworkProxy_rawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_rawHeader)},
    {SIP_MLNAME_CAST(sipName_rawHeaderList), meth_QNetworkProxy_rawHeaderList, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_rawHeaderList)},
    {SIP_MLNAME_CAST(sipName_setApplicationProxy), meth_QNetworkProxy_setApplicationProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setApplicationProxy)},
    {SIP_MLNAME_CAST(sipName_setCapabilities), meth_QNetworkProxy_setCapabilities, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setCapabilities)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QNetworkProxy_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setHeader)},
    {SIP_MLNAME_CAST(sipName_setHostName), meth_QNetworkProxy_setHostName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setHostName)},
    {SIP_MLNAME_CAST(sipName_setPassword), meth_QNetworkProxy_setPassword, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setPassword)},
    {SIP_MLNAME_CAST(sipName_setPort), meth_QNetworkProxy_setPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setPort)},
    {SIP_MLNAME_CAST(sipName_setRawHeader), meth_QNetworkProxy_setRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setRawHeader)},
    {SIP_MLNAME_CAST(sipName_setType), meth_QNetworkProxy_setType, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setType)},
    {SIP_MLNAME_CAST(sipName_setUser), meth_QNetworkProxy_setUser, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_setUser)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkProxy_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_swap)},
    {SIP_MLNAME_CAST(sipName_type), meth_QNetworkProxy_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_type)},
    {SIP_MLNAME_CAST(sipName_user), meth_QNetworkProxy_user, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkProxy_user)}
};

static sipEnumMemberDef enummembers_QNetworkProxy[] = {
    {sipName_CachingCapability, static_cast<int>( ::QNetworkProxy::CachingCapability), 83},
    {sipName_DefaultProxy, static_cast<int>( ::QNetworkProxy::DefaultProxy), 84},
    {sipName_FtpCachingProxy, static_cast<int>( ::QNetworkProxy::FtpCachingProxy), 84},
    {sipName_HostNameLookupCapability, static_cast<int>( ::QNetworkProxy::HostNameLookupCapability), 83},
    {sipName_HttpCachingProxy, static_cast<int>( ::QNetworkProxy::HttpCachingProxy), 84},
    {sipName_HttpProxy, static_cast<int>( ::QNetworkProxy::HttpProxy), 84},
    {sipName_ListeningCapability, static_cast<int>( ::QNetworkProxy::ListeningCapability), 83},
    {sipName_NoProxy, static_cast<int>( ::QNetworkProxy::NoProxy), 84},
    {sipName_SctpListeningCapability, static_cast<int>( ::QNetworkProxy::SctpListeningCapability), 83},
    {sipName_SctpTunnelingCapability, static_cast<int>( ::QNetworkProxy::SctpTunnelingCapability), 83},
    {sipName_Socks5Proxy, static_cast<int>( ::QNetworkProxy::Socks5Proxy), 84},
    {sipName_TunnelingCapability, static_cast<int>( ::QNetworkProxy::TunnelingCapability), 83},
    {sipName_UdpTunnelingCapability, static_cast<int>( ::QNetworkProxy::UdpTunnelingCapability), 83},
};

PyDoc_STRVAR(doc_QNetworkProxy, "\1QNetworkProxy()\n"
"QNetworkProxy(QNetworkProxy.ProxyType, hostName: str = '', port: int = 0, user: str = '', password: str = '')\n"
"QNetworkProxy(QNetworkProxy)");


static pyqt5ClassPluginDef plugin_QNetworkProxy = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkProxy = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkProxy,
        {SIP_NULLPTR},
        &plugin_QNetworkProxy
    },
    {
        sipNameNr_QNetworkProxy,
        {0, 0, 1},
        23, methods_QNetworkProxy,
        13, enummembers_QNetworkProxy,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkProxy,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkProxy,
    init_type_QNetworkProxy,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkProxy,
    assign_QNetworkProxy,
    array_QNetworkProxy,
    copy_QNetworkProxy,
    release_QNetworkProxy,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 86 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 5496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 86 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 5500 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QNetworkInterface_InterfaceFlags___hash__(PyObject *);}
static long slot_QNetworkInterface_InterfaceFlags___hash__(PyObject *sipSelf)
{
     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QNetworkInterface::InterfaceFlags::Int();
#line 5518 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QNetworkInterface_InterfaceFlags___bool__(PyObject *);}
static int slot_QNetworkInterface_InterfaceFlags___bool__(PyObject *sipSelf)
{
     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkInterface::InterfaceFlags::Int() != 0);
#line 5543 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface::InterfaceFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QNetworkInterface_InterfaceFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkInterface::InterfaceFlags::Int() != a0->operator QNetworkInterface::InterfaceFlags::Int());
#line 5573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QNetworkInterface::InterfaceFlags *>(a0),sipType_QNetworkInterface_InterfaceFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkInterface_InterfaceFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface::InterfaceFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QNetworkInterface_InterfaceFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkInterface::InterfaceFlags::Int() == a0->operator QNetworkInterface::InterfaceFlags::Int());
#line 5609 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QNetworkInterface::InterfaceFlags *>(a0),sipType_QNetworkInterface_InterfaceFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkInterface_InterfaceFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkInterface_InterfaceFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QNetworkInterface::InterfaceFlags(*sipCpp ^ a0);
#line 5648 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkInterface::InterfaceFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkInterface_InterfaceFlags, &a0, &a0State, &a1))
        {
             ::QNetworkInterface::InterfaceFlags*sipRes;

            sipRes = new  ::QNetworkInterface::InterfaceFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QNetworkInterface_InterfaceFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface_InterfaceFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkInterface_InterfaceFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QNetworkInterface::InterfaceFlags(*sipCpp | a0);
#line 5720 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkInterface::InterfaceFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkInterface_InterfaceFlags, &a0, &a0State, &a1))
        {
             ::QNetworkInterface::InterfaceFlags*sipRes;

            sipRes = new  ::QNetworkInterface::InterfaceFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QNetworkInterface_InterfaceFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface_InterfaceFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkInterface_InterfaceFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QNetworkInterface::InterfaceFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkInterface::InterfaceFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkInterface_InterfaceFlags, &a0, &a0State, &a1))
        {
             ::QNetworkInterface::InterfaceFlags*sipRes;

            sipRes = new  ::QNetworkInterface::InterfaceFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QNetworkInterface_InterfaceFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface_InterfaceFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___invert__(PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___invert__(PyObject *sipSelf)
{
     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QNetworkInterface::InterfaceFlags*sipRes;

            sipRes = new  ::QNetworkInterface::InterfaceFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface_InterfaceFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNetworkInterface_InterfaceFlags___int__(PyObject *);}
static PyObject *slot_QNetworkInterface_InterfaceFlags___int__(PyObject *sipSelf)
{
     ::QNetworkInterface::InterfaceFlags *sipCpp = reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkInterface_InterfaceFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkInterface_InterfaceFlags(void *, int);}
static void release_QNetworkInterface_InterfaceFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipCppV);
}


extern "C" {static void assign_QNetworkInterface_InterfaceFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkInterface_InterfaceFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkInterface::InterfaceFlags *>(sipSrc);
}


extern "C" {static void *array_QNetworkInterface_InterfaceFlags(SIP_SSIZE_T);}
static void *array_QNetworkInterface_InterfaceFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkInterface::InterfaceFlags[sipNrElem];
}


extern "C" {static void *copy_QNetworkInterface_InterfaceFlags(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkInterface_InterfaceFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkInterface::InterfaceFlags(reinterpret_cast<const  ::QNetworkInterface::InterfaceFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkInterface_InterfaceFlags(sipSimpleWrapper *);}
static void dealloc_QNetworkInterface_InterfaceFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkInterface_InterfaceFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkInterface_InterfaceFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkInterface_InterfaceFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkInterface::InterfaceFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkInterface::InterfaceFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QNetworkInterface::InterfaceFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkInterface::InterfaceFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QNetworkInterface_InterfaceFlags, &a0, &a0State))
        {
            sipCpp = new  ::QNetworkInterface::InterfaceFlags(*a0);
            sipReleaseType(const_cast< ::QNetworkInterface::InterfaceFlags *>(a0),sipType_QNetworkInterface_InterfaceFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QNetworkInterface_InterfaceFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QNetworkInterface_InterfaceFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QNetworkInterface::InterfaceFlags **sipCppPtr = reinterpret_cast< ::QNetworkInterface::InterfaceFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QNetworkInterface::InterfaceFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QNetworkInterface_InterfaceFlag)) ||
            sipCanConvertToType(sipPy, sipType_QNetworkInterface_InterfaceFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QNetworkInterface_InterfaceFlag)))
{
    *sipCppPtr = new QNetworkInterface::InterfaceFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QNetworkInterface::InterfaceFlags *>(sipConvertToType(sipPy, sipType_QNetworkInterface_InterfaceFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 5988 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkInterface_InterfaceFlags[] = {
    {(void *)slot_QNetworkInterface_InterfaceFlags___hash__, hash_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___bool__, bool_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___ne__, ne_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___eq__, eq_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___ixor__, ixor_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___xor__, xor_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___ior__, ior_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___or__, or_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___iand__, iand_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___and__, and_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___invert__, invert_slot},
    {(void *)slot_QNetworkInterface_InterfaceFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QNetworkInterface_InterfaceFlags, "\1QNetworkInterface.InterfaceFlags()\n"
"QNetworkInterface.InterfaceFlags(Union[QNetworkInterface.InterfaceFlags, QNetworkInterface.InterfaceFlag])\n"
"QNetworkInterface.InterfaceFlags(QNetworkInterface.InterfaceFlags)");


static pyqt5ClassPluginDef plugin_QNetworkInterface_InterfaceFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkInterface_InterfaceFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkInterface__InterfaceFlags,
        {SIP_NULLPTR},
        &plugin_QNetworkInterface_InterfaceFlags
    },
    {
        sipNameNr_InterfaceFlags,
        {77, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkInterface_InterfaceFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkInterface_InterfaceFlags,
    init_type_QNetworkInterface_InterfaceFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkInterface_InterfaceFlags,
    assign_QNetworkInterface_InterfaceFlags,
    array_QNetworkInterface_InterfaceFlags,
    copy_QNetworkInterface_InterfaceFlags,
    release_QNetworkInterface_InterfaceFlags,
    SIP_NULLPTR,
    convertTo_QNetworkInterface_InterfaceFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 86 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 6076 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 6080 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6083 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 6086 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6089 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 6092 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 6095 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 86 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 6098 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkInterface_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QNetworkInterface_isValid(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_isValid, doc_QNetworkInterface_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_name, "name(self) -> str");

extern "C" {static PyObject *meth_QNetworkInterface_name(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_name, doc_QNetworkInterface_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_flags, "flags(self) -> QNetworkInterface.InterfaceFlags");

extern "C" {static PyObject *meth_QNetworkInterface_flags(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
             ::QNetworkInterface::InterfaceFlags*sipRes;

            sipRes = new  ::QNetworkInterface::InterfaceFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface_InterfaceFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_flags, doc_QNetworkInterface_flags);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_hardwareAddress, "hardwareAddress(self) -> str");

extern "C" {static PyObject *meth_QNetworkInterface_hardwareAddress(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_hardwareAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->hardwareAddress());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_hardwareAddress, doc_QNetworkInterface_hardwareAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_addressEntries, "addressEntries(self) -> List[QNetworkAddressEntry]");

extern "C" {static PyObject *meth_QNetworkInterface_addressEntries(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_addressEntries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
            QList< ::QNetworkAddressEntry>*sipRes;

            sipRes = new QList< ::QNetworkAddressEntry>(sipCpp->addressEntries());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkAddressEntry,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_addressEntries, doc_QNetworkInterface_addressEntries);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_interfaceFromName, "interfaceFromName(str) -> QNetworkInterface");

extern "C" {static PyObject *meth_QNetworkInterface_interfaceFromName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_interfaceFromName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QNetworkInterface*sipRes;

            sipRes = new  ::QNetworkInterface( ::QNetworkInterface::interfaceFromName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_interfaceFromName, doc_QNetworkInterface_interfaceFromName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_interfaceFromIndex, "interfaceFromIndex(int) -> QNetworkInterface");

extern "C" {static PyObject *meth_QNetworkInterface_interfaceFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_interfaceFromIndex(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QNetworkInterface*sipRes;

            sipRes = new  ::QNetworkInterface( ::QNetworkInterface::interfaceFromIndex(a0));

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_interfaceFromIndex, doc_QNetworkInterface_interfaceFromIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_allInterfaces, "allInterfaces() -> List[QNetworkInterface]");

extern "C" {static PyObject *meth_QNetworkInterface_allInterfaces(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_allInterfaces(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QNetworkInterface>*sipRes;

            sipRes = new QList< ::QNetworkInterface>( ::QNetworkInterface::allInterfaces());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkInterface,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_allInterfaces, doc_QNetworkInterface_allInterfaces);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_allAddresses, "allAddresses() -> List[QHostAddress]");

extern "C" {static PyObject *meth_QNetworkInterface_allAddresses(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_allAddresses(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList< ::QHostAddress>*sipRes;

            sipRes = new QList< ::QHostAddress>( ::QNetworkInterface::allAddresses());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_allAddresses, doc_QNetworkInterface_allAddresses);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_index, "index(self) -> int");

extern "C" {static PyObject *meth_QNetworkInterface_index(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->index();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_index, doc_QNetworkInterface_index);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_humanReadableName, "humanReadableName(self) -> str");

extern "C" {static PyObject *meth_QNetworkInterface_humanReadableName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_humanReadableName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->humanReadableName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_humanReadableName, doc_QNetworkInterface_humanReadableName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_swap, "swap(self, QNetworkInterface)");

extern "C" {static PyObject *meth_QNetworkInterface_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkInterface* a0;
         ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkInterface, &sipCpp, sipType_QNetworkInterface, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_swap, doc_QNetworkInterface_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_interfaceIndexFromName, "interfaceIndexFromName(str) -> int");

extern "C" {static PyObject *meth_QNetworkInterface_interfaceIndexFromName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_interfaceIndexFromName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes =  ::QNetworkInterface::interfaceIndexFromName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_interfaceIndexFromName, doc_QNetworkInterface_interfaceIndexFromName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_interfaceNameFromIndex, "interfaceNameFromIndex(int) -> str");

extern "C" {static PyObject *meth_QNetworkInterface_interfaceNameFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_interfaceNameFromIndex(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QNetworkInterface::interfaceNameFromIndex(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_interfaceNameFromIndex, doc_QNetworkInterface_interfaceNameFromIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_type, "type(self) -> QNetworkInterface.InterfaceType");

extern "C" {static PyObject *meth_QNetworkInterface_type(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
             ::QNetworkInterface::InterfaceType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkInterface_InterfaceType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_type, doc_QNetworkInterface_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkInterface_maximumTransmissionUnit, "maximumTransmissionUnit(self) -> int");

extern "C" {static PyObject *meth_QNetworkInterface_maximumTransmissionUnit(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_maximumTransmissionUnit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkInterface, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumTransmissionUnit();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkInterface, sipName_maximumTransmissionUnit, doc_QNetworkInterface_maximumTransmissionUnit);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkInterface(void *, int);}
static void release_QNetworkInterface(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkInterface *>(sipCppV);
}


extern "C" {static void assign_QNetworkInterface(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkInterface(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkInterface *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkInterface *>(sipSrc);
}


extern "C" {static void *array_QNetworkInterface(SIP_SSIZE_T);}
static void *array_QNetworkInterface(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkInterface[sipNrElem];
}


extern "C" {static void *copy_QNetworkInterface(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkInterface(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkInterface(reinterpret_cast<const  ::QNetworkInterface *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkInterface(sipSimpleWrapper *);}
static void dealloc_QNetworkInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkInterface(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkInterface(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkInterface(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkInterface *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkInterface();

            return sipCpp;
        }
    }

    {
        const  ::QNetworkInterface* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkInterface, &a0))
        {
            sipCpp = new  ::QNetworkInterface(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QNetworkInterface[] = {
    {SIP_MLNAME_CAST(sipName_addressEntries), meth_QNetworkInterface_addressEntries, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_addressEntries)},
    {SIP_MLNAME_CAST(sipName_allAddresses), meth_QNetworkInterface_allAddresses, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_allAddresses)},
    {SIP_MLNAME_CAST(sipName_allInterfaces), meth_QNetworkInterface_allInterfaces, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_allInterfaces)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QNetworkInterface_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_flags)},
    {SIP_MLNAME_CAST(sipName_hardwareAddress), meth_QNetworkInterface_hardwareAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_hardwareAddress)},
    {SIP_MLNAME_CAST(sipName_humanReadableName), meth_QNetworkInterface_humanReadableName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_humanReadableName)},
    {SIP_MLNAME_CAST(sipName_index), meth_QNetworkInterface_index, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_index)},
    {SIP_MLNAME_CAST(sipName_interfaceFromIndex), meth_QNetworkInterface_interfaceFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_interfaceFromIndex)},
    {SIP_MLNAME_CAST(sipName_interfaceFromName), meth_QNetworkInterface_interfaceFromName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_interfaceFromName)},
    {SIP_MLNAME_CAST(sipName_interfaceIndexFromName), meth_QNetworkInterface_interfaceIndexFromName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_interfaceIndexFromName)},
    {SIP_MLNAME_CAST(sipName_interfaceNameFromIndex), meth_QNetworkInterface_interfaceNameFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_interfaceNameFromIndex)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QNetworkInterface_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_isValid)},
    {SIP_MLNAME_CAST(sipName_maximumTransmissionUnit), meth_QNetworkInterface_maximumTransmissionUnit, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_maximumTransmissionUnit)},
    {SIP_MLNAME_CAST(sipName_name), meth_QNetworkInterface_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_name)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkInterface_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_swap)},
    {SIP_MLNAME_CAST(sipName_type), meth_QNetworkInterface_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkInterface_type)}
};

static sipEnumMemberDef enummembers_QNetworkInterface[] = {
    {sipName_CanBroadcast, static_cast<int>( ::QNetworkInterface::CanBroadcast), 78},
    {sipName_CanBus, static_cast<int>( ::QNetworkInterface::CanBus), 80},
    {sipName_CanMulticast, static_cast<int>( ::QNetworkInterface::CanMulticast), 78},
    {sipName_Ethernet, static_cast<int>( ::QNetworkInterface::Ethernet), 80},
    {sipName_Fddi, static_cast<int>( ::QNetworkInterface::Fddi), 80},
    {sipName_Ieee1394, static_cast<int>( ::QNetworkInterface::Ieee1394), 80},
    {sipName_Ieee80211, static_cast<int>( ::QNetworkInterface::Ieee80211), 80},
    {sipName_Ieee802154, static_cast<int>( ::QNetworkInterface::Ieee802154), 80},
    {sipName_Ieee80216, static_cast<int>( ::QNetworkInterface::Ieee80216), 80},
    {sipName_IsLoopBack, static_cast<int>( ::QNetworkInterface::IsLoopBack), 78},
    {sipName_IsPointToPoint, static_cast<int>( ::QNetworkInterface::IsPointToPoint), 78},
    {sipName_IsRunning, static_cast<int>( ::QNetworkInterface::IsRunning), 78},
    {sipName_IsUp, static_cast<int>( ::QNetworkInterface::IsUp), 78},
    {sipName_Loopback, static_cast<int>( ::QNetworkInterface::Loopback), 80},
    {sipName_Phonet, static_cast<int>( ::QNetworkInterface::Phonet), 80},
    {sipName_Ppp, static_cast<int>( ::QNetworkInterface::Ppp), 80},
    {sipName_SixLoWPAN, static_cast<int>( ::QNetworkInterface::SixLoWPAN), 80},
    {sipName_Slip, static_cast<int>( ::QNetworkInterface::Slip), 80},
    {sipName_Unknown, static_cast<int>( ::QNetworkInterface::Unknown), 80},
    {sipName_Virtual, static_cast<int>( ::QNetworkInterface::Virtual), 80},
    {sipName_Wifi, static_cast<int>( ::QNetworkInterface::Wifi), 80},
};

PyDoc_STRVAR(doc_QNetworkInterface, "\1QNetworkInterface()\n"
"QNetworkInterface(QNetworkInterface)");


static pyqt5ClassPluginDef plugin_QNetworkInterface = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkInterface = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkInterface,
        {SIP_NULLPTR},
        &plugin_QNetworkInterface
    },
    {
        sipNameNr_QNetworkInterface,
        {0, 0, 1},
        16, methods_QNetworkInterface,
        21, enummembers_QNetworkInterface,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkInterface,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QNetworkInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkInterface,
    assign_QNetworkInterface,
    array_QNetworkInterface,
    copy_QNetworkInterface,
    release_QNetworkInterface,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 6725 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qdeadlinetimer.sip"
#include <qdeadlinetimer.h>
#line 6729 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 6732 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkAddressEntry_ip, "ip(self) -> QHostAddress");

extern "C" {static PyObject *meth_QNetworkAddressEntry_ip(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_ip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->ip());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_ip, doc_QNetworkAddressEntry_ip);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_setIp, "setIp(self, Union[QHostAddress, QHostAddress.SpecialAddress])");

extern "C" {static PyObject *meth_QNetworkAddressEntry_setIp(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_setIp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->setIp(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_setIp, doc_QNetworkAddressEntry_setIp);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_netmask, "netmask(self) -> QHostAddress");

extern "C" {static PyObject *meth_QNetworkAddressEntry_netmask(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_netmask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->netmask());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_netmask, doc_QNetworkAddressEntry_netmask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_setNetmask, "setNetmask(self, Union[QHostAddress, QHostAddress.SpecialAddress])");

extern "C" {static PyObject *meth_QNetworkAddressEntry_setNetmask(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_setNetmask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->setNetmask(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_setNetmask, doc_QNetworkAddressEntry_setNetmask);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_broadcast, "broadcast(self) -> QHostAddress");

extern "C" {static PyObject *meth_QNetworkAddressEntry_broadcast(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_broadcast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->broadcast());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_broadcast, doc_QNetworkAddressEntry_broadcast);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_setBroadcast, "setBroadcast(self, Union[QHostAddress, QHostAddress.SpecialAddress])");

extern "C" {static PyObject *meth_QNetworkAddressEntry_setBroadcast(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_setBroadcast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->setBroadcast(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_setBroadcast, doc_QNetworkAddressEntry_setBroadcast);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_prefixLength, "prefixLength(self) -> int");

extern "C" {static PyObject *meth_QNetworkAddressEntry_prefixLength(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_prefixLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->prefixLength();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_prefixLength, doc_QNetworkAddressEntry_prefixLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_setPrefixLength, "setPrefixLength(self, int)");

extern "C" {static PyObject *meth_QNetworkAddressEntry_setPrefixLength(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_setPrefixLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp, &a0))
        {
            sipCpp->setPrefixLength(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_setPrefixLength, doc_QNetworkAddressEntry_setPrefixLength);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_swap, "swap(self, QNetworkAddressEntry)");

extern "C" {static PyObject *meth_QNetworkAddressEntry_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAddressEntry* a0;
         ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp, sipType_QNetworkAddressEntry, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_swap, doc_QNetworkAddressEntry_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_dnsEligibility, "dnsEligibility(self) -> QNetworkAddressEntry.DnsEligibilityStatus");

extern "C" {static PyObject *meth_QNetworkAddressEntry_dnsEligibility(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_dnsEligibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
             ::QNetworkAddressEntry::DnsEligibilityStatus sipRes;

            sipRes = sipCpp->dnsEligibility();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkAddressEntry_DnsEligibilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_dnsEligibility, doc_QNetworkAddressEntry_dnsEligibility);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_setDnsEligibility, "setDnsEligibility(self, QNetworkAddressEntry.DnsEligibilityStatus)");

extern "C" {static PyObject *meth_QNetworkAddressEntry_setDnsEligibility(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_setDnsEligibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAddressEntry::DnsEligibilityStatus a0;
         ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp, sipType_QNetworkAddressEntry_DnsEligibilityStatus, &a0))
        {
            sipCpp->setDnsEligibility(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_setDnsEligibility, doc_QNetworkAddressEntry_setDnsEligibility);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_isLifetimeKnown, "isLifetimeKnown(self) -> bool");

extern "C" {static PyObject *meth_QNetworkAddressEntry_isLifetimeKnown(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_isLifetimeKnown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLifetimeKnown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_isLifetimeKnown, doc_QNetworkAddressEntry_isLifetimeKnown);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_preferredLifetime, "preferredLifetime(self) -> QDeadlineTimer");

extern "C" {static PyObject *meth_QNetworkAddressEntry_preferredLifetime(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_preferredLifetime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer(sipCpp->preferredLifetime());

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_preferredLifetime, doc_QNetworkAddressEntry_preferredLifetime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_validityLifetime, "validityLifetime(self) -> QDeadlineTimer");

extern "C" {static PyObject *meth_QNetworkAddressEntry_validityLifetime(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_validityLifetime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
             ::QDeadlineTimer*sipRes;

            sipRes = new  ::QDeadlineTimer(sipCpp->validityLifetime());

            return sipConvertFromNewType(sipRes,sipType_QDeadlineTimer,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_validityLifetime, doc_QNetworkAddressEntry_validityLifetime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_setAddressLifetime, "setAddressLifetime(self, QDeadlineTimer, QDeadlineTimer)");

extern "C" {static PyObject *meth_QNetworkAddressEntry_setAddressLifetime(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_setAddressLifetime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDeadlineTimer* a0;
         ::QDeadlineTimer* a1;
         ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp, sipType_QDeadlineTimer, &a0, sipType_QDeadlineTimer, &a1))
        {
            sipCpp->setAddressLifetime(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_setAddressLifetime, doc_QNetworkAddressEntry_setAddressLifetime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_clearAddressLifetime, "clearAddressLifetime(self)");

extern "C" {static PyObject *meth_QNetworkAddressEntry_clearAddressLifetime(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_clearAddressLifetime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
            sipCpp->clearAddressLifetime();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_clearAddressLifetime, doc_QNetworkAddressEntry_clearAddressLifetime);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_isPermanent, "isPermanent(self) -> bool");

extern "C" {static PyObject *meth_QNetworkAddressEntry_isPermanent(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_isPermanent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPermanent();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_isPermanent, doc_QNetworkAddressEntry_isPermanent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAddressEntry_isTemporary, "isTemporary(self) -> bool");

extern "C" {static PyObject *meth_QNetworkAddressEntry_isTemporary(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAddressEntry_isTemporary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAddressEntry, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTemporary();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAddressEntry, sipName_isTemporary, doc_QNetworkAddressEntry_isTemporary);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkAddressEntry___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkAddressEntry___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkAddressEntry *sipCpp = reinterpret_cast< ::QNetworkAddressEntry *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkAddressEntry));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkAddressEntry, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkAddressEntry::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkAddressEntry, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkAddressEntry___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkAddressEntry___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkAddressEntry *sipCpp = reinterpret_cast< ::QNetworkAddressEntry *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkAddressEntry));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAddressEntry* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkAddressEntry, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkAddressEntry::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkAddressEntry, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkAddressEntry(void *, int);}
static void release_QNetworkAddressEntry(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkAddressEntry *>(sipCppV);
}


extern "C" {static void assign_QNetworkAddressEntry(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkAddressEntry(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkAddressEntry *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkAddressEntry *>(sipSrc);
}


extern "C" {static void *array_QNetworkAddressEntry(SIP_SSIZE_T);}
static void *array_QNetworkAddressEntry(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkAddressEntry[sipNrElem];
}


extern "C" {static void *copy_QNetworkAddressEntry(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkAddressEntry(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkAddressEntry(reinterpret_cast<const  ::QNetworkAddressEntry *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkAddressEntry(sipSimpleWrapper *);}
static void dealloc_QNetworkAddressEntry(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkAddressEntry(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkAddressEntry(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkAddressEntry(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkAddressEntry *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkAddressEntry();

            return sipCpp;
        }
    }

    {
        const  ::QNetworkAddressEntry* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkAddressEntry, &a0))
        {
            sipCpp = new  ::QNetworkAddressEntry(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkAddressEntry[] = {
    {(void *)slot_QNetworkAddressEntry___ne__, ne_slot},
    {(void *)slot_QNetworkAddressEntry___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkAddressEntry[] = {
    {SIP_MLNAME_CAST(sipName_broadcast), meth_QNetworkAddressEntry_broadcast, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_broadcast)},
    {SIP_MLNAME_CAST(sipName_clearAddressLifetime), meth_QNetworkAddressEntry_clearAddressLifetime, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_clearAddressLifetime)},
    {SIP_MLNAME_CAST(sipName_dnsEligibility), meth_QNetworkAddressEntry_dnsEligibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_dnsEligibility)},
    {SIP_MLNAME_CAST(sipName_ip), meth_QNetworkAddressEntry_ip, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_ip)},
    {SIP_MLNAME_CAST(sipName_isLifetimeKnown), meth_QNetworkAddressEntry_isLifetimeKnown, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_isLifetimeKnown)},
    {SIP_MLNAME_CAST(sipName_isPermanent), meth_QNetworkAddressEntry_isPermanent, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_isPermanent)},
    {SIP_MLNAME_CAST(sipName_isTemporary), meth_QNetworkAddressEntry_isTemporary, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_isTemporary)},
    {SIP_MLNAME_CAST(sipName_netmask), meth_QNetworkAddressEntry_netmask, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_netmask)},
    {SIP_MLNAME_CAST(sipName_preferredLifetime), meth_QNetworkAddressEntry_preferredLifetime, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_preferredLifetime)},
    {SIP_MLNAME_CAST(sipName_prefixLength), meth_QNetworkAddressEntry_prefixLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_prefixLength)},
    {SIP_MLNAME_CAST(sipName_setAddressLifetime), meth_QNetworkAddressEntry_setAddressLifetime, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_setAddressLifetime)},
    {SIP_MLNAME_CAST(sipName_setBroadcast), meth_QNetworkAddressEntry_setBroadcast, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_setBroadcast)},
    {SIP_MLNAME_CAST(sipName_setDnsEligibility), meth_QNetworkAddressEntry_setDnsEligibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_setDnsEligibility)},
    {SIP_MLNAME_CAST(sipName_setIp), meth_QNetworkAddressEntry_setIp, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_setIp)},
    {SIP_MLNAME_CAST(sipName_setNetmask), meth_QNetworkAddressEntry_setNetmask, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_setNetmask)},
    {SIP_MLNAME_CAST(sipName_setPrefixLength), meth_QNetworkAddressEntry_setPrefixLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_setPrefixLength)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkAddressEntry_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_swap)},
    {SIP_MLNAME_CAST(sipName_validityLifetime), meth_QNetworkAddressEntry_validityLifetime, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAddressEntry_validityLifetime)}
};

static sipEnumMemberDef enummembers_QNetworkAddressEntry[] = {
    {sipName_DnsEligibilityUnknown, static_cast<int>( ::QNetworkAddressEntry::DnsEligibilityUnknown), 61},
    {sipName_DnsEligible, static_cast<int>( ::QNetworkAddressEntry::DnsEligible), 61},
    {sipName_DnsIneligible, static_cast<int>( ::QNetworkAddressEntry::DnsIneligible), 61},
};

PyDoc_STRVAR(doc_QNetworkAddressEntry, "\1QNetworkAddressEntry()\n"
"QNetworkAddressEntry(QNetworkAddressEntry)");


static pyqt5ClassPluginDef plugin_QNetworkAddressEntry = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkAddressEntry = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkAddressEntry,
        {SIP_NULLPTR},
        &plugin_QNetworkAddressEntry
    },
    {
        sipNameNr_QNetworkAddressEntry,
        {0, 0, 1},
        18, methods_QNetworkAddressEntry,
        3, enummembers_QNetworkAddressEntry,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkAddressEntry,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkAddressEntry,
    init_type_QNetworkAddressEntry,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkAddressEntry,
    assign_QNetworkAddressEntry,
    array_QNetworkAddressEntry,
    copy_QNetworkAddressEntry,
    release_QNetworkAddressEntry,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkdiskcache.sip"
#include <qnetworkdiskcache.h>
#line 7477 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 7481 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 7484 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 7487 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 7490 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 7493 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 7496 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 7499 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 7502 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 7505 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 7508 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7511 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 7514 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 7517 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7520 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 7523 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 7526 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 7529 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 7532 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 7535 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQNetworkDiskCache : public  ::QNetworkDiskCache
{
public:
    sipQNetworkDiskCache( ::QObject*);
    virtual ~sipQNetworkDiskCache();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::qint64 expire() SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
     ::QNetworkCacheMetaData metaData(const  ::QUrl&) SIP_OVERRIDE;
    void updateMetaData(const  ::QNetworkCacheMetaData&) SIP_OVERRIDE;
     ::QIODevice* data(const  ::QUrl&) SIP_OVERRIDE;
    bool remove(const  ::QUrl&) SIP_OVERRIDE;
     ::qint64 cacheSize() const SIP_OVERRIDE;
     ::QIODevice* prepare(const  ::QNetworkCacheMetaData&) SIP_OVERRIDE;
    void insert( ::QIODevice*) SIP_OVERRIDE;
    void clear() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkDiskCache(const sipQNetworkDiskCache &);
    sipQNetworkDiskCache &operator = (const sipQNetworkDiskCache &);

    char sipPyMethods[16];
};

sipQNetworkDiskCache::sipQNetworkDiskCache( ::QObject*a0):  ::QNetworkDiskCache(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkDiskCache::~sipQNetworkDiskCache()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkDiskCache::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkDiskCache);

    return  ::QNetworkDiskCache::metaObject();
}

int sipQNetworkDiskCache::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkDiskCache::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkDiskCache,_c,_id,_a);

    return _id;
}

void *sipQNetworkDiskCache::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkDiskCache, _clname, &sipCpp) ? sipCpp :  ::QNetworkDiskCache::qt_metacast(_clname));
}

 ::qint64 sipQNetworkDiskCache::expire()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_expire);

    if (!sipMeth)
        return  ::QNetworkDiskCache::expire();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQNetworkDiskCache::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QNetworkDiskCache::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QNetworkDiskCache::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QNetworkDiskCache::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QNetworkDiskCache::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QNetworkDiskCache::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkDiskCache::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QNetworkDiskCache::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkDiskCache::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QNetworkDiskCache::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNetworkCacheMetaData sipQNetworkDiskCache::metaData(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_metaData);

    if (!sipMeth)
        return  ::QNetworkDiskCache::metaData(a0);

    extern  ::QNetworkCacheMetaData sipVH_QtNetwork_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_6(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::updateMetaData(const  ::QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_updateMetaData);

    if (!sipMeth)
    {
         ::QNetworkDiskCache::updateMetaData(a0);
        return;
    }

    extern void sipVH_QtNetwork_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCacheMetaData&);

    sipVH_QtNetwork_7(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QIODevice* sipQNetworkDiskCache::data(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_data);

    if (!sipMeth)
        return  ::QNetworkDiskCache::data(a0);

    extern  ::QIODevice* sipVH_QtNetwork_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_8(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkDiskCache::remove(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_remove);

    if (!sipMeth)
        return  ::QNetworkDiskCache::remove(a0);

    extern bool sipVH_QtNetwork_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_9(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQNetworkDiskCache::cacheSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,SIP_NULLPTR,sipName_cacheSize);

    if (!sipMeth)
        return  ::QNetworkDiskCache::cacheSize();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QIODevice* sipQNetworkDiskCache::prepare(const  ::QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_prepare);

    if (!sipMeth)
        return  ::QNetworkDiskCache::prepare(a0);

    extern  ::QIODevice* sipVH_QtNetwork_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCacheMetaData&);

    return sipVH_QtNetwork_11(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::insert( ::QIODevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_insert);

    if (!sipMeth)
    {
         ::QNetworkDiskCache::insert(a0);
        return;
    }

    extern void sipVH_QtNetwork_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice*);

    sipVH_QtNetwork_12(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_clear);

    if (!sipMeth)
    {
         ::QNetworkDiskCache::clear();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QNetworkDiskCache_cacheDirectory, "cacheDirectory(self) -> str");

extern "C" {static PyObject *meth_QNetworkDiskCache_cacheDirectory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_cacheDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->cacheDirectory());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_cacheDirectory, doc_QNetworkDiskCache_cacheDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_setCacheDirectory, "setCacheDirectory(self, str)");

extern "C" {static PyObject *meth_QNetworkDiskCache_setCacheDirectory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_setCacheDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCacheDirectory(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_setCacheDirectory, doc_QNetworkDiskCache_setCacheDirectory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_maximumCacheSize, "maximumCacheSize(self) -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_maximumCacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_maximumCacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->maximumCacheSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_maximumCacheSize, doc_QNetworkDiskCache_maximumCacheSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_setMaximumCacheSize, "setMaximumCacheSize(self, int)");

extern "C" {static PyObject *meth_QNetworkDiskCache_setMaximumCacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_setMaximumCacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, &a0))
        {
            sipCpp->setMaximumCacheSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_setMaximumCacheSize, doc_QNetworkDiskCache_setMaximumCacheSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_cacheSize, "cacheSize(self) -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_cacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_cacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::cacheSize() : sipCpp->cacheSize());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_cacheSize, doc_QNetworkDiskCache_cacheSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_metaData, "metaData(self, QUrl) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QNetworkDiskCache_metaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
             ::QNetworkCacheMetaData*sipRes;

            sipRes = new  ::QNetworkCacheMetaData((sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::metaData(*a0) : sipCpp->metaData(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_metaData, doc_QNetworkDiskCache_metaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_updateMetaData, "updateMetaData(self, QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QNetworkDiskCache_updateMetaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_updateMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCacheMetaData* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::updateMetaData(*a0) : sipCpp->updateMetaData(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_updateMetaData, doc_QNetworkDiskCache_updateMetaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_data, "data(self, QUrl) -> QIODevice");

extern "C" {static PyObject *meth_QNetworkDiskCache_data(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
             ::QIODevice*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::data(*a0) : sipCpp->data(*a0));

            return sipConvertFromNewType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_data, doc_QNetworkDiskCache_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_remove, "remove(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QNetworkDiskCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::remove(*a0) : sipCpp->remove(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_remove, doc_QNetworkDiskCache_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_prepare, "prepare(self, QNetworkCacheMetaData) -> QIODevice");

extern "C" {static PyObject *meth_QNetworkDiskCache_prepare(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCacheMetaData* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
             ::QIODevice*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::prepare(*a0) : sipCpp->prepare(*a0));

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_prepare, doc_QNetworkDiskCache_prepare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_insert, "insert(self, QIODevice)");

extern "C" {static PyObject *meth_QNetworkDiskCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice* a0;
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QIODevice, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::insert(a0) : sipCpp->insert(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_insert, doc_QNetworkDiskCache_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_fileMetaData, "fileMetaData(self, str) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QNetworkDiskCache_fileMetaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_fileMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QNetworkCacheMetaData*sipRes;

            sipRes = new  ::QNetworkCacheMetaData(sipCpp->fileMetaData(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_fileMetaData, doc_QNetworkDiskCache_fileMetaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_clear, "clear(self)");

extern "C" {static PyObject *meth_QNetworkDiskCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_clear, doc_QNetworkDiskCache_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_expire, "expire(self) -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_expire(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_expire(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkDiskCache::expire() : sipCpp->expire());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_expire, doc_QNetworkDiskCache_expire);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkDiskCache(void *, const sipTypeDef *);}
static void *cast_QNetworkDiskCache(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkDiskCache *sipCpp = reinterpret_cast< ::QNetworkDiskCache *>(sipCppV);

    if (targetType == sipType_QAbstractNetworkCache)
        return static_cast< ::QAbstractNetworkCache *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkDiskCache(void *, int);}
static void release_QNetworkDiskCache(void *sipCppV, int)
{
     ::QNetworkDiskCache *sipCpp = reinterpret_cast< ::QNetworkDiskCache *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkDiskCache(sipSimpleWrapper *);}
static void dealloc_QNetworkDiskCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkDiskCache *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkDiskCache(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkDiskCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkDiskCache(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkDiskCache *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkDiskCache(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkDiskCache[] = {{0, 255, 1}};


static PyMethodDef methods_QNetworkDiskCache[] = {
    {SIP_MLNAME_CAST(sipName_cacheDirectory), meth_QNetworkDiskCache_cacheDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_cacheDirectory)},
    {SIP_MLNAME_CAST(sipName_cacheSize), meth_QNetworkDiskCache_cacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_cacheSize)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QNetworkDiskCache_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_clear)},
    {SIP_MLNAME_CAST(sipName_data), meth_QNetworkDiskCache_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_data)},
    {SIP_MLNAME_CAST(sipName_expire), meth_QNetworkDiskCache_expire, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_expire)},
    {SIP_MLNAME_CAST(sipName_fileMetaData), meth_QNetworkDiskCache_fileMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_fileMetaData)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QNetworkDiskCache_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_insert)},
    {SIP_MLNAME_CAST(sipName_maximumCacheSize), meth_QNetworkDiskCache_maximumCacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_maximumCacheSize)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QNetworkDiskCache_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_metaData)},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QNetworkDiskCache_prepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_prepare)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QNetworkDiskCache_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_remove)},
    {SIP_MLNAME_CAST(sipName_setCacheDirectory), meth_QNetworkDiskCache_setCacheDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_setCacheDirectory)},
    {SIP_MLNAME_CAST(sipName_setMaximumCacheSize), meth_QNetworkDiskCache_setMaximumCacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_setMaximumCacheSize)},
    {SIP_MLNAME_CAST(sipName_updateMetaData), meth_QNetworkDiskCache_updateMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_updateMetaData)}
};

PyDoc_STRVAR(doc_QNetworkDiskCache, "\1QNetworkDiskCache(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QNetworkDiskCache = {
    & ::QNetworkDiskCache::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkDiskCache = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkDiskCache,
        {SIP_NULLPTR},
        &plugin_QNetworkDiskCache
    },
    {
        sipNameNr_QNetworkDiskCache,
        {0, 0, 1},
        14, methods_QNetworkDiskCache,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkDiskCache,
    -1,
    -1,
    supers_QNetworkDiskCache,
    SIP_NULLPTR,
    init_type_QNetworkDiskCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkDiskCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QNetworkDiskCache,
    cast_QNetworkDiskCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkdatagram.sip"
#include <qnetworkdatagram.h>
#line 8441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 8445 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 8448 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkDatagram_swap, "swap(self, QNetworkDatagram)");

extern "C" {static PyObject *meth_QNetworkDatagram_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkDatagram* a0;
         ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDatagram, &sipCpp, sipType_QNetworkDatagram, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_swap, doc_QNetworkDatagram_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_clear, "clear(self)");

extern "C" {static PyObject *meth_QNetworkDatagram_clear(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_clear, doc_QNetworkDatagram_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QNetworkDatagram_isValid(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_isValid, doc_QNetworkDatagram_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QNetworkDatagram_isNull(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_isNull, doc_QNetworkDatagram_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_interfaceIndex, "interfaceIndex(self) -> int");

extern "C" {static PyObject *meth_QNetworkDatagram_interfaceIndex(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_interfaceIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
             ::uint sipRes;

            sipRes = sipCpp->interfaceIndex();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_interfaceIndex, doc_QNetworkDatagram_interfaceIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_setInterfaceIndex, "setInterfaceIndex(self, int)");

extern "C" {static PyObject *meth_QNetworkDatagram_setInterfaceIndex(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_setInterfaceIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::uint a0;
         ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QNetworkDatagram, &sipCpp, &a0))
        {
            sipCpp->setInterfaceIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_setInterfaceIndex, doc_QNetworkDatagram_setInterfaceIndex);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_senderAddress, "senderAddress(self) -> QHostAddress");

extern "C" {static PyObject *meth_QNetworkDatagram_senderAddress(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_senderAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->senderAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_senderAddress, doc_QNetworkDatagram_senderAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_destinationAddress, "destinationAddress(self) -> QHostAddress");

extern "C" {static PyObject *meth_QNetworkDatagram_destinationAddress(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_destinationAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->destinationAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_destinationAddress, doc_QNetworkDatagram_destinationAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_senderPort, "senderPort(self) -> int");

extern "C" {static PyObject *meth_QNetworkDatagram_senderPort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_senderPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->senderPort();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_senderPort, doc_QNetworkDatagram_senderPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_destinationPort, "destinationPort(self) -> int");

extern "C" {static PyObject *meth_QNetworkDatagram_destinationPort(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_destinationPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->destinationPort();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_destinationPort, doc_QNetworkDatagram_destinationPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_setSender, "setSender(self, Union[QHostAddress, QHostAddress.SpecialAddress], port: int = 0)");

extern "C" {static PyObject *meth_QNetworkDatagram_setSender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_setSender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::quint16 a1 = 0;
         ::QNetworkDatagram *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|t", &sipSelf, sipType_QNetworkDatagram, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            sipCpp->setSender(*a0,a1);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_setSender, doc_QNetworkDatagram_setSender);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_setDestination, "setDestination(self, Union[QHostAddress, QHostAddress.SpecialAddress], int)");

extern "C" {static PyObject *meth_QNetworkDatagram_setDestination(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_setDestination(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::quint16 a1;
         ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1t", &sipSelf, sipType_QNetworkDatagram, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            sipCpp->setDestination(*a0,a1);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_setDestination, doc_QNetworkDatagram_setDestination);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_hopLimit, "hopLimit(self) -> int");

extern "C" {static PyObject *meth_QNetworkDatagram_hopLimit(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_hopLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hopLimit();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_hopLimit, doc_QNetworkDatagram_hopLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_setHopLimit, "setHopLimit(self, int)");

extern "C" {static PyObject *meth_QNetworkDatagram_setHopLimit(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_setHopLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNetworkDatagram, &sipCpp, &a0))
        {
            sipCpp->setHopLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_setHopLimit, doc_QNetworkDatagram_setHopLimit);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_data, "data(self) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkDatagram_data(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDatagram, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->data());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_data, doc_QNetworkDatagram_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_setData, "setData(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkDatagram_setData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDatagram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setData(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_setData, doc_QNetworkDatagram_setData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkDatagram_makeReply, "makeReply(self, Union[QByteArray, bytes, bytearray]) -> QNetworkDatagram");

extern "C" {static PyObject *meth_QNetworkDatagram_makeReply(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDatagram_makeReply(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QNetworkDatagram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDatagram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QNetworkDatagram*sipRes;

            sipRes = new  ::QNetworkDatagram(sipCpp->makeReply(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkDatagram,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDatagram, sipName_makeReply, doc_QNetworkDatagram_makeReply);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkDatagram(void *, int);}
static void release_QNetworkDatagram(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkDatagram *>(sipCppV);
}


extern "C" {static void assign_QNetworkDatagram(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkDatagram(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkDatagram *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkDatagram *>(sipSrc);
}


extern "C" {static void *array_QNetworkDatagram(SIP_SSIZE_T);}
static void *array_QNetworkDatagram(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkDatagram[sipNrElem];
}


extern "C" {static void *copy_QNetworkDatagram(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkDatagram(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkDatagram(reinterpret_cast<const  ::QNetworkDatagram *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkDatagram(sipSimpleWrapper *);}
static void dealloc_QNetworkDatagram(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkDatagram(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkDatagram(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkDatagram(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkDatagram *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkDatagram();

            return sipCpp;
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QHostAddress& a1def = QHostAddress();
        const  ::QHostAddress* a1 = &a1def;
        int a1State = 0;
         ::quint16 a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_destinationAddress,
            sipName_port,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1t", sipType_QByteArray, &a0, &a0State, sipType_QHostAddress, &a1, &a1State, &a2))
        {
            sipCpp = new  ::QNetworkDatagram(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QHostAddress *>(a1),sipType_QHostAddress,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkDatagram* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkDatagram, &a0))
        {
            sipCpp = new  ::QNetworkDatagram(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QNetworkDatagram[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QNetworkDatagram_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_clear)},
    {SIP_MLNAME_CAST(sipName_data), meth_QNetworkDatagram_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_data)},
    {SIP_MLNAME_CAST(sipName_destinationAddress), meth_QNetworkDatagram_destinationAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_destinationAddress)},
    {SIP_MLNAME_CAST(sipName_destinationPort), meth_QNetworkDatagram_destinationPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_destinationPort)},
    {SIP_MLNAME_CAST(sipName_hopLimit), meth_QNetworkDatagram_hopLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_hopLimit)},
    {SIP_MLNAME_CAST(sipName_interfaceIndex), meth_QNetworkDatagram_interfaceIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_interfaceIndex)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QNetworkDatagram_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QNetworkDatagram_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_isValid)},
    {SIP_MLNAME_CAST(sipName_makeReply), meth_QNetworkDatagram_makeReply, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_makeReply)},
    {SIP_MLNAME_CAST(sipName_senderAddress), meth_QNetworkDatagram_senderAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_senderAddress)},
    {SIP_MLNAME_CAST(sipName_senderPort), meth_QNetworkDatagram_senderPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_senderPort)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QNetworkDatagram_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_setData)},
    {SIP_MLNAME_CAST(sipName_setDestination), meth_QNetworkDatagram_setDestination, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_setDestination)},
    {SIP_MLNAME_CAST(sipName_setHopLimit), meth_QNetworkDatagram_setHopLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_setHopLimit)},
    {SIP_MLNAME_CAST(sipName_setInterfaceIndex), meth_QNetworkDatagram_setInterfaceIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_setInterfaceIndex)},
    {SIP_MLNAME_CAST(sipName_setSender), SIP_MLMETH_CAST(meth_QNetworkDatagram_setSender), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkDatagram_setSender)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkDatagram_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDatagram_swap)}
};

PyDoc_STRVAR(doc_QNetworkDatagram, "\1QNetworkDatagram()\n"
"QNetworkDatagram(Union[QByteArray, bytes, bytearray], destinationAddress: Union[QHostAddress, QHostAddress.SpecialAddress] = QHostAddress(), port: int = 0)\n"
"QNetworkDatagram(QNetworkDatagram)");


static pyqt5ClassPluginDef plugin_QNetworkDatagram = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkDatagram = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkDatagram,
        {SIP_NULLPTR},
        &plugin_QNetworkDatagram
    },
    {
        sipNameNr_QNetworkDatagram,
        {0, 0, 1},
        17, methods_QNetworkDatagram,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkDatagram,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QNetworkDatagram,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkDatagram,
    assign_QNetworkDatagram,
    array_QNetworkDatagram,
    copy_QNetworkDatagram,
    release_QNetworkDatagram,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkcookiejar.sip"
#include <qnetworkcookiejar.h>
#line 9121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 9125 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkcookie.sip"
#include <qnetworkcookie.h>
#line 9128 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 9131 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9134 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 9137 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 9140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 9143 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 9146 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 9149 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 9152 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9155 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 9158 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9161 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 9164 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 9167 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 9170 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 9173 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 9176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 9179 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQNetworkCookieJar : public  ::QNetworkCookieJar
{
public:
    sipQNetworkCookieJar( ::QObject*);
    virtual ~sipQNetworkCookieJar();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool validateCookie(const  ::QNetworkCookie&,const  ::QUrl&) const SIP_OVERRIDE;
    bool deleteCookie(const  ::QNetworkCookie&) SIP_OVERRIDE;
    bool updateCookie(const  ::QNetworkCookie&) SIP_OVERRIDE;
    bool insertCookie(const  ::QNetworkCookie&) SIP_OVERRIDE;
    bool setCookiesFromUrl(const QList< ::QNetworkCookie>&,const  ::QUrl&) SIP_OVERRIDE;
    QList< ::QNetworkCookie> cookiesForUrl(const  ::QUrl&) const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkCookieJar(const sipQNetworkCookieJar &);
    sipQNetworkCookieJar &operator = (const sipQNetworkCookieJar &);

    char sipPyMethods[13];
};

sipQNetworkCookieJar::sipQNetworkCookieJar( ::QObject*a0):  ::QNetworkCookieJar(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkCookieJar::~sipQNetworkCookieJar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkCookieJar::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkCookieJar);

    return  ::QNetworkCookieJar::metaObject();
}

int sipQNetworkCookieJar::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkCookieJar::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkCookieJar,_c,_id,_a);

    return _id;
}

void *sipQNetworkCookieJar::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkCookieJar, _clname, &sipCpp) ? sipCpp :  ::QNetworkCookieJar::qt_metacast(_clname));
}

bool sipQNetworkCookieJar::validateCookie(const  ::QNetworkCookie& a0,const  ::QUrl& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,SIP_NULLPTR,sipName_validateCookie);

    if (!sipMeth)
        return  ::QNetworkCookieJar::validateCookie(a0,a1);

    extern bool sipVH_QtNetwork_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCookie&,const  ::QUrl&);

    return sipVH_QtNetwork_34(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkCookieJar::deleteCookie(const  ::QNetworkCookie& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_deleteCookie);

    if (!sipMeth)
        return  ::QNetworkCookieJar::deleteCookie(a0);

    extern bool sipVH_QtNetwork_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCookie&);

    return sipVH_QtNetwork_33(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::updateCookie(const  ::QNetworkCookie& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_updateCookie);

    if (!sipMeth)
        return  ::QNetworkCookieJar::updateCookie(a0);

    extern bool sipVH_QtNetwork_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCookie&);

    return sipVH_QtNetwork_33(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::insertCookie(const  ::QNetworkCookie& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_insertCookie);

    if (!sipMeth)
        return  ::QNetworkCookieJar::insertCookie(a0);

    extern bool sipVH_QtNetwork_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCookie&);

    return sipVH_QtNetwork_33(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::setCookiesFromUrl(const QList< ::QNetworkCookie>& a0,const  ::QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_setCookiesFromUrl);

    if (!sipMeth)
        return  ::QNetworkCookieJar::setCookiesFromUrl(a0,a1);

    extern bool sipVH_QtNetwork_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList< ::QNetworkCookie>&,const  ::QUrl&);

    return sipVH_QtNetwork_32(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

QList< ::QNetworkCookie> sipQNetworkCookieJar::cookiesForUrl(const  ::QUrl& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_cookiesForUrl);

    if (!sipMeth)
        return  ::QNetworkCookieJar::cookiesForUrl(a0);

    extern QList< ::QNetworkCookie> sipVH_QtNetwork_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_31(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QNetworkCookieJar::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkCookieJar::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QNetworkCookieJar::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQNetworkCookieJar::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QNetworkCookieJar::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkCookieJar::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QNetworkCookieJar::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkCookieJar::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QNetworkCookieJar::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkCookieJar::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QNetworkCookieJar::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkCookieJar::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QNetworkCookieJar::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkCookieJar_cookiesForUrl, "cookiesForUrl(self, QUrl) -> List[QNetworkCookie]");

extern "C" {static PyObject *meth_QNetworkCookieJar_cookiesForUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_cookiesForUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QUrl* a0;
        const  ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QUrl, &a0))
        {
            QList< ::QNetworkCookie>*sipRes;

            sipRes = new QList< ::QNetworkCookie>((sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::cookiesForUrl(*a0) : sipCpp->cookiesForUrl(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkCookie,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_cookiesForUrl, doc_QNetworkCookieJar_cookiesForUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_setCookiesFromUrl, "setCookiesFromUrl(self, Iterable[QNetworkCookie], QUrl) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_setCookiesFromUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_setCookiesFromUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const QList< ::QNetworkCookie>* a0;
        int a0State = 0;
        const  ::QUrl* a1;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QList_0100QNetworkCookie,&a0, &a0State, sipType_QUrl, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::setCookiesFromUrl(*a0,*a1) : sipCpp->setCookiesFromUrl(*a0,*a1));
            sipReleaseType(const_cast<QList< ::QNetworkCookie> *>(a0),sipType_QList_0100QNetworkCookie,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_setCookiesFromUrl, doc_QNetworkCookieJar_setCookiesFromUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_insertCookie, "insertCookie(self, QNetworkCookie) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_insertCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_insertCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCookie* a0;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::insertCookie(*a0) : sipCpp->insertCookie(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_insertCookie, doc_QNetworkCookieJar_insertCookie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_updateCookie, "updateCookie(self, QNetworkCookie) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_updateCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_updateCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCookie* a0;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::updateCookie(*a0) : sipCpp->updateCookie(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_updateCookie, doc_QNetworkCookieJar_updateCookie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_deleteCookie, "deleteCookie(self, QNetworkCookie) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_deleteCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_deleteCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCookie* a0;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::deleteCookie(*a0) : sipCpp->deleteCookie(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_deleteCookie, doc_QNetworkCookieJar_deleteCookie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_setAllCookies, "setAllCookies(self, Iterable[QNetworkCookie])");

extern "C" {static PyObject *meth_QNetworkCookieJar_setAllCookies(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_setAllCookies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QNetworkCookie>* a0;
        int a0State = 0;
         ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QList_0100QNetworkCookie,&a0, &a0State))
        {
            sipCpp->setAllCookies(*a0);
            sipReleaseType(const_cast<QList< ::QNetworkCookie> *>(a0),sipType_QList_0100QNetworkCookie,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_setAllCookies, doc_QNetworkCookieJar_setAllCookies);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_allCookies, "allCookies(self) -> List[QNetworkCookie]");

extern "C" {static PyObject *meth_QNetworkCookieJar_allCookies(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_allCookies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QNetworkCookieJar, &sipCpp))
        {
            QList< ::QNetworkCookie>*sipRes;

            sipRes = new QList< ::QNetworkCookie>(sipCpp->allCookies());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkCookie,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_allCookies, doc_QNetworkCookieJar_allCookies);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookieJar_validateCookie, "validateCookie(self, QNetworkCookie, QUrl) -> bool");

extern "C" {static PyObject *meth_QNetworkCookieJar_validateCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookieJar_validateCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QNetworkCookie* a0;
        const  ::QUrl* a1;
        const  ::QNetworkCookieJar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QNetworkCookieJar, &sipCpp, sipType_QNetworkCookie, &a0, sipType_QUrl, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkCookieJar::validateCookie(*a0,*a1) : sipCpp->validateCookie(*a0,*a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookieJar, sipName_validateCookie, doc_QNetworkCookieJar_validateCookie);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkCookieJar(void *, const sipTypeDef *);}
static void *cast_QNetworkCookieJar(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkCookieJar *sipCpp = reinterpret_cast< ::QNetworkCookieJar *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkCookieJar(void *, int);}
static void release_QNetworkCookieJar(void *sipCppV, int)
{
     ::QNetworkCookieJar *sipCpp = reinterpret_cast< ::QNetworkCookieJar *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkCookieJar(sipSimpleWrapper *);}
static void dealloc_QNetworkCookieJar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkCookieJar *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkCookieJar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkCookieJar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkCookieJar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkCookieJar *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkCookieJar(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkCookieJar[] = {{12, 0, 1}};


static PyMethodDef methods_QNetworkCookieJar[] = {
    {SIP_MLNAME_CAST(sipName_allCookies), meth_QNetworkCookieJar_allCookies, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookieJar_allCookies)},
    {SIP_MLNAME_CAST(sipName_cookiesForUrl), meth_QNetworkCookieJar_cookiesForUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookieJar_cookiesForUrl)},
    {SIP_MLNAME_CAST(sipName_deleteCookie), meth_QNetworkCookieJar_deleteCookie, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookieJar_deleteCookie)},
    {SIP_MLNAME_CAST(sipName_insertCookie), meth_QNetworkCookieJar_insertCookie, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookieJar_insertCookie)},
    {SIP_MLNAME_CAST(sipName_setAllCookies), meth_QNetworkCookieJar_setAllCookies, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookieJar_setAllCookies)},
    {SIP_MLNAME_CAST(sipName_setCookiesFromUrl), meth_QNetworkCookieJar_setCookiesFromUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookieJar_setCookiesFromUrl)},
    {SIP_MLNAME_CAST(sipName_updateCookie), meth_QNetworkCookieJar_updateCookie, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookieJar_updateCookie)},
    {SIP_MLNAME_CAST(sipName_validateCookie), meth_QNetworkCookieJar_validateCookie, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookieJar_validateCookie)}
};

PyDoc_STRVAR(doc_QNetworkCookieJar, "\1QNetworkCookieJar(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QNetworkCookieJar = {
    & ::QNetworkCookieJar::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkCookieJar = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkCookieJar,
        {SIP_NULLPTR},
        &plugin_QNetworkCookieJar
    },
    {
        sipNameNr_QNetworkCookieJar,
        {0, 0, 1},
        8, methods_QNetworkCookieJar,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkCookieJar,
    -1,
    -1,
    supers_QNetworkCookieJar,
    SIP_NULLPTR,
    init_type_QNetworkCookieJar,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkCookieJar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QNetworkCookieJar,
    cast_QNetworkCookieJar,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkcookie.sip"
#include <qnetworkcookie.h>
#line 9852 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 9856 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 9859 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 9862 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 9865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 9868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkCookie_isSecure, "isSecure(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCookie_isSecure(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_isSecure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSecure();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_isSecure, doc_QNetworkCookie_isSecure);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setSecure, "setSecure(self, bool)");

extern "C" {static PyObject *meth_QNetworkCookie_setSecure(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setSecure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNetworkCookie, &sipCpp, &a0))
        {
            sipCpp->setSecure(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setSecure, doc_QNetworkCookie_setSecure);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_isSessionCookie, "isSessionCookie(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCookie_isSessionCookie(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_isSessionCookie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSessionCookie();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_isSessionCookie, doc_QNetworkCookie_isSessionCookie);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_expirationDate, "expirationDate(self) -> QDateTime");

extern "C" {static PyObject *meth_QNetworkCookie_expirationDate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_expirationDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->expirationDate());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_expirationDate, doc_QNetworkCookie_expirationDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setExpirationDate, "setExpirationDate(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QNetworkCookie_setExpirationDate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setExpirationDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setExpirationDate(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setExpirationDate, doc_QNetworkCookie_setExpirationDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_domain, "domain(self) -> str");

extern "C" {static PyObject *meth_QNetworkCookie_domain(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_domain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->domain());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_domain, doc_QNetworkCookie_domain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setDomain, "setDomain(self, str)");

extern "C" {static PyObject *meth_QNetworkCookie_setDomain(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setDomain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDomain(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setDomain, doc_QNetworkCookie_setDomain);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_path, "path(self) -> str");

extern "C" {static PyObject *meth_QNetworkCookie_path(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_path, doc_QNetworkCookie_path);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setPath, "setPath(self, str)");

extern "C" {static PyObject *meth_QNetworkCookie_setPath(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPath(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setPath, doc_QNetworkCookie_setPath);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_name, "name(self) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkCookie_name(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_name, doc_QNetworkCookie_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setName, "setName(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkCookie_setName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setName, doc_QNetworkCookie_setName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_value, "value(self) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkCookie_value(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_value, doc_QNetworkCookie_value);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setValue, "setValue(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QNetworkCookie_setValue(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setValue(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setValue, doc_QNetworkCookie_setValue);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_toRawForm, "toRawForm(self, form: QNetworkCookie.RawForm = QNetworkCookie.Full) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkCookie_toRawForm(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_toRawForm(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkCookie::RawForm a0 = QNetworkCookie::Full;
        const  ::QNetworkCookie *sipCpp;

        static const char *sipKwdList[] = {
            sipName_form,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|E", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QNetworkCookie_RawForm, &a0))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->toRawForm(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_toRawForm, doc_QNetworkCookie_toRawForm);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_parseCookies, "parseCookies(Union[QByteArray, bytes, bytearray]) -> List[QNetworkCookie]");

extern "C" {static PyObject *meth_QNetworkCookie_parseCookies(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_parseCookies(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QList< ::QNetworkCookie>*sipRes;

            sipRes = new QList< ::QNetworkCookie>( ::QNetworkCookie::parseCookies(*a0));
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkCookie,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_parseCookies, doc_QNetworkCookie_parseCookies);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_isHttpOnly, "isHttpOnly(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCookie_isHttpOnly(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_isHttpOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCookie, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHttpOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_isHttpOnly, doc_QNetworkCookie_isHttpOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_setHttpOnly, "setHttpOnly(self, bool)");

extern "C" {static PyObject *meth_QNetworkCookie_setHttpOnly(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_setHttpOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNetworkCookie, &sipCpp, &a0))
        {
            sipCpp->setHttpOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_setHttpOnly, doc_QNetworkCookie_setHttpOnly);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_swap, "swap(self, QNetworkCookie)");

extern "C" {static PyObject *meth_QNetworkCookie_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkCookie* a0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_swap, doc_QNetworkCookie_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_hasSameIdentifier, "hasSameIdentifier(self, QNetworkCookie) -> bool");

extern "C" {static PyObject *meth_QNetworkCookie_hasSameIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_hasSameIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie* a0;
        const  ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->hasSameIdentifier(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_hasSameIdentifier, doc_QNetworkCookie_hasSameIdentifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCookie_normalize, "normalize(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkCookie_normalize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCookie_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QNetworkCookie *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCookie, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->normalize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCookie, sipName_normalize, doc_QNetworkCookie_normalize);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkCookie___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkCookie___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkCookie *sipCpp = reinterpret_cast< ::QNetworkCookie *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkCookie));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkCookie::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkCookie, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkCookie___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkCookie___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkCookie *sipCpp = reinterpret_cast< ::QNetworkCookie *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkCookie));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCookie* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkCookie, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkCookie::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkCookie, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkCookie(void *, int);}
static void release_QNetworkCookie(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkCookie *>(sipCppV);
}


extern "C" {static void assign_QNetworkCookie(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkCookie(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkCookie *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkCookie *>(sipSrc);
}


extern "C" {static void *array_QNetworkCookie(SIP_SSIZE_T);}
static void *array_QNetworkCookie(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkCookie[sipNrElem];
}


extern "C" {static void *copy_QNetworkCookie(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkCookie(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkCookie(reinterpret_cast<const  ::QNetworkCookie *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkCookie(sipSimpleWrapper *);}
static void dealloc_QNetworkCookie(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkCookie(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkCookie(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkCookie(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkCookie *sipCpp = SIP_NULLPTR;

    {
        const  ::QByteArray& a0def = QByteArray();
        const  ::QByteArray* a0 = &a0def;
        int a0State = 0;
        const  ::QByteArray& a1def = QByteArray();
        const  ::QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_value,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J1", sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new  ::QNetworkCookie(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkCookie* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkCookie, &a0))
        {
            sipCpp = new  ::QNetworkCookie(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkCookie[] = {
    {(void *)slot_QNetworkCookie___ne__, ne_slot},
    {(void *)slot_QNetworkCookie___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkCookie[] = {
    {SIP_MLNAME_CAST(sipName_domain), meth_QNetworkCookie_domain, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_domain)},
    {SIP_MLNAME_CAST(sipName_expirationDate), meth_QNetworkCookie_expirationDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_expirationDate)},
    {SIP_MLNAME_CAST(sipName_hasSameIdentifier), meth_QNetworkCookie_hasSameIdentifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_hasSameIdentifier)},
    {SIP_MLNAME_CAST(sipName_isHttpOnly), meth_QNetworkCookie_isHttpOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_isHttpOnly)},
    {SIP_MLNAME_CAST(sipName_isSecure), meth_QNetworkCookie_isSecure, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_isSecure)},
    {SIP_MLNAME_CAST(sipName_isSessionCookie), meth_QNetworkCookie_isSessionCookie, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_isSessionCookie)},
    {SIP_MLNAME_CAST(sipName_name), meth_QNetworkCookie_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_name)},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QNetworkCookie_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_normalize)},
    {SIP_MLNAME_CAST(sipName_parseCookies), meth_QNetworkCookie_parseCookies, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_parseCookies)},
    {SIP_MLNAME_CAST(sipName_path), meth_QNetworkCookie_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_path)},
    {SIP_MLNAME_CAST(sipName_setDomain), meth_QNetworkCookie_setDomain, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_setDomain)},
    {SIP_MLNAME_CAST(sipName_setExpirationDate), meth_QNetworkCookie_setExpirationDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_setExpirationDate)},
    {SIP_MLNAME_CAST(sipName_setHttpOnly), meth_QNetworkCookie_setHttpOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_setHttpOnly)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QNetworkCookie_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_setName)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QNetworkCookie_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_setPath)},
    {SIP_MLNAME_CAST(sipName_setSecure), meth_QNetworkCookie_setSecure, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_setSecure)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QNetworkCookie_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_setValue)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkCookie_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_swap)},
    {SIP_MLNAME_CAST(sipName_toRawForm), SIP_MLMETH_CAST(meth_QNetworkCookie_toRawForm), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkCookie_toRawForm)},
    {SIP_MLNAME_CAST(sipName_value), meth_QNetworkCookie_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCookie_value)}
};

static sipEnumMemberDef enummembers_QNetworkCookie[] = {
    {sipName_Full, static_cast<int>( ::QNetworkCookie::Full), 73},
    {sipName_NameAndValueOnly, static_cast<int>( ::QNetworkCookie::NameAndValueOnly), 73},
};

PyDoc_STRVAR(doc_QNetworkCookie, "\1QNetworkCookie(name: Union[QByteArray, bytes, bytearray] = QByteArray(), value: Union[QByteArray, bytes, bytearray] = QByteArray())\n"
"QNetworkCookie(QNetworkCookie)");


static pyqt5ClassPluginDef plugin_QNetworkCookie = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkCookie = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkCookie,
        {SIP_NULLPTR},
        &plugin_QNetworkCookie
    },
    {
        sipNameNr_QNetworkCookie,
        {0, 0, 1},
        20, methods_QNetworkCookie,
        2, enummembers_QNetworkCookie,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkCookie,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkCookie,
    init_type_QNetworkCookie,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkCookie,
    assign_QNetworkCookie,
    array_QNetworkCookie,
    copy_QNetworkCookie,
    release_QNetworkCookie,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 10696 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 10700 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QNetworkConfiguration_StateFlags___hash__(PyObject *);}
static long slot_QNetworkConfiguration_StateFlags___hash__(PyObject *sipSelf)
{
     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QNetworkConfiguration::StateFlags::Int();
#line 10718 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QNetworkConfiguration_StateFlags___bool__(PyObject *);}
static int slot_QNetworkConfiguration_StateFlags___bool__(PyObject *sipSelf)
{
     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkConfiguration::StateFlags::Int() != 0);
#line 10743 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration::StateFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QNetworkConfiguration_StateFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkConfiguration::StateFlags::Int() != a0->operator QNetworkConfiguration::StateFlags::Int());
#line 10773 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QNetworkConfiguration::StateFlags *>(a0),sipType_QNetworkConfiguration_StateFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkConfiguration_StateFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration::StateFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QNetworkConfiguration_StateFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkConfiguration::StateFlags::Int() == a0->operator QNetworkConfiguration::StateFlags::Int());
#line 10809 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QNetworkConfiguration::StateFlags *>(a0),sipType_QNetworkConfiguration_StateFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkConfiguration_StateFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkConfiguration_StateFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QNetworkConfiguration::StateFlags(*sipCpp ^ a0);
#line 10848 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfiguration::StateFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkConfiguration_StateFlags, &a0, &a0State, &a1))
        {
             ::QNetworkConfiguration::StateFlags*sipRes;

            sipRes = new  ::QNetworkConfiguration::StateFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QNetworkConfiguration_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration_StateFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkConfiguration_StateFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QNetworkConfiguration::StateFlags(*sipCpp | a0);
#line 10920 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfiguration::StateFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkConfiguration_StateFlags, &a0, &a0State, &a1))
        {
             ::QNetworkConfiguration::StateFlags*sipRes;

            sipRes = new  ::QNetworkConfiguration::StateFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QNetworkConfiguration_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration_StateFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkConfiguration_StateFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QNetworkConfiguration::StateFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfiguration::StateFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkConfiguration_StateFlags, &a0, &a0State, &a1))
        {
             ::QNetworkConfiguration::StateFlags*sipRes;

            sipRes = new  ::QNetworkConfiguration::StateFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QNetworkConfiguration_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration_StateFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___invert__(PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___invert__(PyObject *sipSelf)
{
     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QNetworkConfiguration::StateFlags*sipRes;

            sipRes = new  ::QNetworkConfiguration::StateFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration_StateFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNetworkConfiguration_StateFlags___int__(PyObject *);}
static PyObject *slot_QNetworkConfiguration_StateFlags___int__(PyObject *sipSelf)
{
     ::QNetworkConfiguration::StateFlags *sipCpp = reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration_StateFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkConfiguration_StateFlags(void *, int);}
static void release_QNetworkConfiguration_StateFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipCppV);
}


extern "C" {static void assign_QNetworkConfiguration_StateFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkConfiguration_StateFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkConfiguration::StateFlags *>(sipSrc);
}


extern "C" {static void *array_QNetworkConfiguration_StateFlags(SIP_SSIZE_T);}
static void *array_QNetworkConfiguration_StateFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkConfiguration::StateFlags[sipNrElem];
}


extern "C" {static void *copy_QNetworkConfiguration_StateFlags(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkConfiguration_StateFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkConfiguration::StateFlags(reinterpret_cast<const  ::QNetworkConfiguration::StateFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkConfiguration_StateFlags(sipSimpleWrapper *);}
static void dealloc_QNetworkConfiguration_StateFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkConfiguration_StateFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkConfiguration_StateFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkConfiguration_StateFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkConfiguration::StateFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkConfiguration::StateFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QNetworkConfiguration::StateFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkConfiguration::StateFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QNetworkConfiguration_StateFlags, &a0, &a0State))
        {
            sipCpp = new  ::QNetworkConfiguration::StateFlags(*a0);
            sipReleaseType(const_cast< ::QNetworkConfiguration::StateFlags *>(a0),sipType_QNetworkConfiguration_StateFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QNetworkConfiguration_StateFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QNetworkConfiguration_StateFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QNetworkConfiguration::StateFlags **sipCppPtr = reinterpret_cast< ::QNetworkConfiguration::StateFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QNetworkConfiguration::StateFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QNetworkConfiguration_StateFlag)) ||
            sipCanConvertToType(sipPy, sipType_QNetworkConfiguration_StateFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QNetworkConfiguration_StateFlag)))
{
    *sipCppPtr = new QNetworkConfiguration::StateFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QNetworkConfiguration::StateFlags *>(sipConvertToType(sipPy, sipType_QNetworkConfiguration_StateFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 11188 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkConfiguration_StateFlags[] = {
    {(void *)slot_QNetworkConfiguration_StateFlags___hash__, hash_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___bool__, bool_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___ne__, ne_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___eq__, eq_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___ixor__, ixor_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___xor__, xor_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___ior__, ior_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___or__, or_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___iand__, iand_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___and__, and_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___invert__, invert_slot},
    {(void *)slot_QNetworkConfiguration_StateFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QNetworkConfiguration_StateFlags, "\1QNetworkConfiguration.StateFlags()\n"
"QNetworkConfiguration.StateFlags(Union[QNetworkConfiguration.StateFlags, QNetworkConfiguration.StateFlag])\n"
"QNetworkConfiguration.StateFlags(QNetworkConfiguration.StateFlags)");


static pyqt5ClassPluginDef plugin_QNetworkConfiguration_StateFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkConfiguration_StateFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkConfiguration__StateFlags,
        {SIP_NULLPTR},
        &plugin_QNetworkConfiguration_StateFlags
    },
    {
        sipNameNr_StateFlags,
        {63, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkConfiguration_StateFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkConfiguration_StateFlags,
    init_type_QNetworkConfiguration_StateFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkConfiguration_StateFlags,
    assign_QNetworkConfiguration_StateFlags,
    array_QNetworkConfiguration_StateFlags,
    copy_QNetworkConfiguration_StateFlags,
    release_QNetworkConfiguration_StateFlags,
    SIP_NULLPTR,
    convertTo_QNetworkConfiguration_StateFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 11276 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 11280 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 11283 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 11286 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkConfiguration_state, "state(self) -> QNetworkConfiguration.StateFlags");

extern "C" {static PyObject *meth_QNetworkConfiguration_state(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
             ::QNetworkConfiguration::StateFlags*sipRes;

            sipRes = new  ::QNetworkConfiguration::StateFlags(sipCpp->state());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration_StateFlags,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_state, doc_QNetworkConfiguration_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_type, "type(self) -> QNetworkConfiguration.Type");

extern "C" {static PyObject *meth_QNetworkConfiguration_type(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
             ::QNetworkConfiguration::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkConfiguration_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_type, doc_QNetworkConfiguration_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_purpose, "purpose(self) -> QNetworkConfiguration.Purpose");

extern "C" {static PyObject *meth_QNetworkConfiguration_purpose(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_purpose(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
             ::QNetworkConfiguration::Purpose sipRes;

            sipRes = sipCpp->purpose();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkConfiguration_Purpose);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_purpose, doc_QNetworkConfiguration_purpose);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_bearerType, "bearerType(self) -> QNetworkConfiguration.BearerType");

extern "C" {static PyObject *meth_QNetworkConfiguration_bearerType(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_bearerType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
             ::QNetworkConfiguration::BearerType sipRes;

            sipRes = sipCpp->bearerType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkConfiguration_BearerType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_bearerType, doc_QNetworkConfiguration_bearerType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_bearerTypeName, "bearerTypeName(self) -> str");

extern "C" {static PyObject *meth_QNetworkConfiguration_bearerTypeName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_bearerTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->bearerTypeName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_bearerTypeName, doc_QNetworkConfiguration_bearerTypeName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_bearerTypeFamily, "bearerTypeFamily(self) -> QNetworkConfiguration.BearerType");

extern "C" {static PyObject *meth_QNetworkConfiguration_bearerTypeFamily(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_bearerTypeFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
             ::QNetworkConfiguration::BearerType sipRes;

            sipRes = sipCpp->bearerTypeFamily();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkConfiguration_BearerType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_bearerTypeFamily, doc_QNetworkConfiguration_bearerTypeFamily);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_identifier, "identifier(self) -> str");

extern "C" {static PyObject *meth_QNetworkConfiguration_identifier(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_identifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->identifier());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_identifier, doc_QNetworkConfiguration_identifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_isRoamingAvailable, "isRoamingAvailable(self) -> bool");

extern "C" {static PyObject *meth_QNetworkConfiguration_isRoamingAvailable(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_isRoamingAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRoamingAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_isRoamingAvailable, doc_QNetworkConfiguration_isRoamingAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_children, "children(self) -> List[QNetworkConfiguration]");

extern "C" {static PyObject *meth_QNetworkConfiguration_children(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_children(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
            QList< ::QNetworkConfiguration>*sipRes;

            sipRes = new QList< ::QNetworkConfiguration>(sipCpp->children());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_children, doc_QNetworkConfiguration_children);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_name, "name(self) -> str");

extern "C" {static PyObject *meth_QNetworkConfiguration_name(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_name, doc_QNetworkConfiguration_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QNetworkConfiguration_isValid(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_isValid, doc_QNetworkConfiguration_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_swap, "swap(self, QNetworkConfiguration)");

extern "C" {static PyObject *meth_QNetworkConfiguration_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfiguration* a0;
         ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkConfiguration, &sipCpp, sipType_QNetworkConfiguration, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_swap, doc_QNetworkConfiguration_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_connectTimeout, "connectTimeout(self) -> int");

extern "C" {static PyObject *meth_QNetworkConfiguration_connectTimeout(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_connectTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfiguration, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->connectTimeout();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_connectTimeout, doc_QNetworkConfiguration_connectTimeout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfiguration_setConnectTimeout, "setConnectTimeout(self, int) -> bool");

extern "C" {static PyObject *meth_QNetworkConfiguration_setConnectTimeout(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfiguration_setConnectTimeout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QNetworkConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNetworkConfiguration, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setConnectTimeout(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfiguration, sipName_setConnectTimeout, doc_QNetworkConfiguration_setConnectTimeout);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkConfiguration___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkConfiguration *sipCpp = reinterpret_cast< ::QNetworkConfiguration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkConfiguration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkConfiguration::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkConfiguration, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkConfiguration___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfiguration___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkConfiguration *sipCpp = reinterpret_cast< ::QNetworkConfiguration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfiguration));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkConfiguration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkConfiguration::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkConfiguration, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkConfiguration(void *, int);}
static void release_QNetworkConfiguration(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkConfiguration *>(sipCppV);
}


extern "C" {static void assign_QNetworkConfiguration(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkConfiguration(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkConfiguration *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkConfiguration *>(sipSrc);
}


extern "C" {static void *array_QNetworkConfiguration(SIP_SSIZE_T);}
static void *array_QNetworkConfiguration(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkConfiguration[sipNrElem];
}


extern "C" {static void *copy_QNetworkConfiguration(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkConfiguration(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkConfiguration(reinterpret_cast<const  ::QNetworkConfiguration *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkConfiguration(sipSimpleWrapper *);}
static void dealloc_QNetworkConfiguration(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkConfiguration(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkConfiguration(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkConfiguration(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkConfiguration *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkConfiguration();

            return sipCpp;
        }
    }

    {
        const  ::QNetworkConfiguration* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkConfiguration, &a0))
        {
            sipCpp = new  ::QNetworkConfiguration(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkConfiguration[] = {
    {(void *)slot_QNetworkConfiguration___ne__, ne_slot},
    {(void *)slot_QNetworkConfiguration___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkConfiguration[] = {
    {SIP_MLNAME_CAST(sipName_bearerType), meth_QNetworkConfiguration_bearerType, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_bearerType)},
    {SIP_MLNAME_CAST(sipName_bearerTypeFamily), meth_QNetworkConfiguration_bearerTypeFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_bearerTypeFamily)},
    {SIP_MLNAME_CAST(sipName_bearerTypeName), meth_QNetworkConfiguration_bearerTypeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_bearerTypeName)},
    {SIP_MLNAME_CAST(sipName_children), meth_QNetworkConfiguration_children, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_children)},
    {SIP_MLNAME_CAST(sipName_connectTimeout), meth_QNetworkConfiguration_connectTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_connectTimeout)},
    {SIP_MLNAME_CAST(sipName_identifier), meth_QNetworkConfiguration_identifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_identifier)},
    {SIP_MLNAME_CAST(sipName_isRoamingAvailable), meth_QNetworkConfiguration_isRoamingAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_isRoamingAvailable)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QNetworkConfiguration_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_QNetworkConfiguration_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_name)},
    {SIP_MLNAME_CAST(sipName_purpose), meth_QNetworkConfiguration_purpose, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_purpose)},
    {SIP_MLNAME_CAST(sipName_setConnectTimeout), meth_QNetworkConfiguration_setConnectTimeout, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_setConnectTimeout)},
    {SIP_MLNAME_CAST(sipName_state), meth_QNetworkConfiguration_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_state)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkConfiguration_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_swap)},
    {SIP_MLNAME_CAST(sipName_type), meth_QNetworkConfiguration_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfiguration_type)}
};

static sipEnumMemberDef enummembers_QNetworkConfiguration[] = {
    {sipName_Active, static_cast<int>( ::QNetworkConfiguration::Active), 66},
    {sipName_Bearer2G, static_cast<int>( ::QNetworkConfiguration::Bearer2G), 64},
    {sipName_Bearer3G, static_cast<int>( ::QNetworkConfiguration::Bearer3G), 64},
    {sipName_Bearer4G, static_cast<int>( ::QNetworkConfiguration::Bearer4G), 64},
    {sipName_BearerBluetooth, static_cast<int>( ::QNetworkConfiguration::BearerBluetooth), 64},
    {sipName_BearerCDMA2000, static_cast<int>( ::QNetworkConfiguration::BearerCDMA2000), 64},
    {sipName_BearerEVDO, static_cast<int>( ::QNetworkConfiguration::BearerEVDO), 64},
    {sipName_BearerEthernet, static_cast<int>( ::QNetworkConfiguration::BearerEthernet), 64},
    {sipName_BearerHSPA, static_cast<int>( ::QNetworkConfiguration::BearerHSPA), 64},
    {sipName_BearerLTE, static_cast<int>( ::QNetworkConfiguration::BearerLTE), 64},
    {sipName_BearerUnknown, static_cast<int>( ::QNetworkConfiguration::BearerUnknown), 64},
    {sipName_BearerWCDMA, static_cast<int>( ::QNetworkConfiguration::BearerWCDMA), 64},
    {sipName_BearerWLAN, static_cast<int>( ::QNetworkConfiguration::BearerWLAN), 64},
    {sipName_BearerWiMAX, static_cast<int>( ::QNetworkConfiguration::BearerWiMAX), 64},
    {sipName_Defined, static_cast<int>( ::QNetworkConfiguration::Defined), 66},
    {sipName_Discovered, static_cast<int>( ::QNetworkConfiguration::Discovered), 66},
    {sipName_InternetAccessPoint, static_cast<int>( ::QNetworkConfiguration::InternetAccessPoint), 68},
    {sipName_Invalid, static_cast<int>( ::QNetworkConfiguration::Invalid), 68},
    {sipName_PrivatePurpose, static_cast<int>( ::QNetworkConfiguration::PrivatePurpose), 65},
    {sipName_PublicPurpose, static_cast<int>( ::QNetworkConfiguration::PublicPurpose), 65},
    {sipName_ServiceNetwork, static_cast<int>( ::QNetworkConfiguration::ServiceNetwork), 68},
    {sipName_ServiceSpecificPurpose, static_cast<int>( ::QNetworkConfiguration::ServiceSpecificPurpose), 65},
    {sipName_Undefined, static_cast<int>( ::QNetworkConfiguration::Undefined), 66},
    {sipName_UnknownPurpose, static_cast<int>( ::QNetworkConfiguration::UnknownPurpose), 65},
    {sipName_UserChoice, static_cast<int>( ::QNetworkConfiguration::UserChoice), 68},
};

PyDoc_STRVAR(doc_QNetworkConfiguration, "\1QNetworkConfiguration()\n"
"QNetworkConfiguration(QNetworkConfiguration)");


static pyqt5ClassPluginDef plugin_QNetworkConfiguration = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkConfiguration = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkConfiguration,
        {SIP_NULLPTR},
        &plugin_QNetworkConfiguration
    },
    {
        sipNameNr_QNetworkConfiguration,
        {0, 0, 1},
        14, methods_QNetworkConfiguration,
        25, enummembers_QNetworkConfiguration,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkConfiguration,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkConfiguration,
    init_type_QNetworkConfiguration,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkConfiguration,
    assign_QNetworkConfiguration,
    array_QNetworkConfiguration,
    copy_QNetworkConfiguration,
    release_QNetworkConfiguration,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfigmanager.sip"
#include <qnetworkconfigmanager.h>
#line 11932 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfigmanager.sip"
#include <qnetworkconfigmanager.h>
#line 11936 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QNetworkConfigurationManager_Capabilities___hash__(PyObject *);}
static long slot_QNetworkConfigurationManager_Capabilities___hash__(PyObject *sipSelf)
{
     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QNetworkConfigurationManager::Capabilities::Int();
#line 11954 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QNetworkConfigurationManager_Capabilities___bool__(PyObject *);}
static int slot_QNetworkConfigurationManager_Capabilities___bool__(PyObject *sipSelf)
{
     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkConfigurationManager::Capabilities::Int() != 0);
#line 11979 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfigurationManager::Capabilities* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QNetworkConfigurationManager_Capabilities, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkConfigurationManager::Capabilities::Int() != a0->operator QNetworkConfigurationManager::Capabilities::Int());
#line 12009 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QNetworkConfigurationManager::Capabilities *>(a0),sipType_QNetworkConfigurationManager_Capabilities,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkConfigurationManager_Capabilities, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfigurationManager::Capabilities* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QNetworkConfigurationManager_Capabilities, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QNetworkConfigurationManager::Capabilities::Int() == a0->operator QNetworkConfigurationManager::Capabilities::Int());
#line 12045 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QNetworkConfigurationManager::Capabilities *>(a0),sipType_QNetworkConfigurationManager_Capabilities,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkConfigurationManager_Capabilities, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkConfigurationManager_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QNetworkConfigurationManager::Capabilities(*sipCpp ^ a0);
#line 12084 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___xor__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfigurationManager::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkConfigurationManager_Capabilities, &a0, &a0State, &a1))
        {
             ::QNetworkConfigurationManager::Capabilities*sipRes;

            sipRes = new  ::QNetworkConfigurationManager::Capabilities((*a0 ^ a1));
            sipReleaseType(a0,sipType_QNetworkConfigurationManager_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfigurationManager_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___ior__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkConfigurationManager_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QNetworkConfigurationManager::Capabilities(*sipCpp | a0);
#line 12156 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___or__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfigurationManager::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkConfigurationManager_Capabilities, &a0, &a0State, &a1))
        {
             ::QNetworkConfigurationManager::Capabilities*sipRes;

            sipRes = new  ::QNetworkConfigurationManager::Capabilities((*a0 | a1));
            sipReleaseType(a0,sipType_QNetworkConfigurationManager_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfigurationManager_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___iand__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QNetworkConfigurationManager_Capabilities)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QNetworkConfigurationManager::Capabilities::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___and__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfigurationManager::Capabilities* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QNetworkConfigurationManager_Capabilities, &a0, &a0State, &a1))
        {
             ::QNetworkConfigurationManager::Capabilities*sipRes;

            sipRes = new  ::QNetworkConfigurationManager::Capabilities((*a0 & a1));
            sipReleaseType(a0,sipType_QNetworkConfigurationManager_Capabilities,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfigurationManager_Capabilities,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___invert__(PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___invert__(PyObject *sipSelf)
{
     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QNetworkConfigurationManager::Capabilities*sipRes;

            sipRes = new  ::QNetworkConfigurationManager::Capabilities(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfigurationManager_Capabilities,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QNetworkConfigurationManager_Capabilities___int__(PyObject *);}
static PyObject *slot_QNetworkConfigurationManager_Capabilities___int__(PyObject *sipSelf)
{
     ::QNetworkConfigurationManager::Capabilities *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkConfigurationManager_Capabilities));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkConfigurationManager_Capabilities(void *, int);}
static void release_QNetworkConfigurationManager_Capabilities(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipCppV);
}


extern "C" {static void assign_QNetworkConfigurationManager_Capabilities(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkConfigurationManager_Capabilities(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkConfigurationManager::Capabilities *>(sipSrc);
}


extern "C" {static void *array_QNetworkConfigurationManager_Capabilities(SIP_SSIZE_T);}
static void *array_QNetworkConfigurationManager_Capabilities(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkConfigurationManager::Capabilities[sipNrElem];
}


extern "C" {static void *copy_QNetworkConfigurationManager_Capabilities(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkConfigurationManager_Capabilities(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkConfigurationManager::Capabilities(reinterpret_cast<const  ::QNetworkConfigurationManager::Capabilities *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkConfigurationManager_Capabilities(sipSimpleWrapper *);}
static void dealloc_QNetworkConfigurationManager_Capabilities(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkConfigurationManager_Capabilities(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkConfigurationManager_Capabilities(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkConfigurationManager_Capabilities(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkConfigurationManager::Capabilities *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkConfigurationManager::Capabilities();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QNetworkConfigurationManager::Capabilities(a0);

            return sipCpp;
        }
    }

    {
        const  ::QNetworkConfigurationManager::Capabilities* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QNetworkConfigurationManager_Capabilities, &a0, &a0State))
        {
            sipCpp = new  ::QNetworkConfigurationManager::Capabilities(*a0);
            sipReleaseType(const_cast< ::QNetworkConfigurationManager::Capabilities *>(a0),sipType_QNetworkConfigurationManager_Capabilities,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QNetworkConfigurationManager_Capabilities(PyObject *, void **, int *, PyObject *);}
static int convertTo_QNetworkConfigurationManager_Capabilities(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QNetworkConfigurationManager::Capabilities **sipCppPtr = reinterpret_cast< ::QNetworkConfigurationManager::Capabilities **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QNetworkConfigurationManager::Capabilities is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QNetworkConfigurationManager_Capability)) ||
            sipCanConvertToType(sipPy, sipType_QNetworkConfigurationManager_Capabilities, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QNetworkConfigurationManager_Capability)))
{
    *sipCppPtr = new QNetworkConfigurationManager::Capabilities(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QNetworkConfigurationManager::Capabilities *>(sipConvertToType(sipPy, sipType_QNetworkConfigurationManager_Capabilities, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 12424 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkConfigurationManager_Capabilities[] = {
    {(void *)slot_QNetworkConfigurationManager_Capabilities___hash__, hash_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___bool__, bool_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___ne__, ne_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___eq__, eq_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___ixor__, ixor_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___xor__, xor_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___ior__, ior_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___or__, or_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___iand__, iand_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___and__, and_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___invert__, invert_slot},
    {(void *)slot_QNetworkConfigurationManager_Capabilities___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QNetworkConfigurationManager_Capabilities, "\1QNetworkConfigurationManager.Capabilities()\n"
"QNetworkConfigurationManager.Capabilities(Union[QNetworkConfigurationManager.Capabilities, QNetworkConfigurationManager.Capability])\n"
"QNetworkConfigurationManager.Capabilities(QNetworkConfigurationManager.Capabilities)");


static pyqt5ClassPluginDef plugin_QNetworkConfigurationManager_Capabilities = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkConfigurationManager_Capabilities = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkConfigurationManager__Capabilities,
        {SIP_NULLPTR},
        &plugin_QNetworkConfigurationManager_Capabilities
    },
    {
        sipNameNr_Capabilities,
        {69, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkConfigurationManager_Capabilities,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkConfigurationManager_Capabilities,
    init_type_QNetworkConfigurationManager_Capabilities,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkConfigurationManager_Capabilities,
    assign_QNetworkConfigurationManager_Capabilities,
    array_QNetworkConfigurationManager_Capabilities,
    copy_QNetworkConfigurationManager_Capabilities,
    release_QNetworkConfigurationManager_Capabilities,
    SIP_NULLPTR,
    convertTo_QNetworkConfigurationManager_Capabilities,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfigmanager.sip"
#include <qnetworkconfigmanager.h>
#line 12512 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 12516 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 12519 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 12522 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12525 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 12528 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfigmanager.sip"
#include <qnetworkconfigmanager.h>
#line 12531 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 12534 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 12537 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 12540 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 12543 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 12546 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12549 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 12552 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 12555 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 12558 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 12561 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 12564 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 12567 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 12570 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 12573 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQNetworkConfigurationManager : public  ::QNetworkConfigurationManager
{
public:
    sipQNetworkConfigurationManager( ::QObject*);
    virtual ~sipQNetworkConfigurationManager();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkConfigurationManager(const sipQNetworkConfigurationManager &);
    sipQNetworkConfigurationManager &operator = (const sipQNetworkConfigurationManager &);

    char sipPyMethods[7];
};

sipQNetworkConfigurationManager::sipQNetworkConfigurationManager( ::QObject*a0):  ::QNetworkConfigurationManager(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkConfigurationManager::~sipQNetworkConfigurationManager()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkConfigurationManager::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkConfigurationManager);

    return  ::QNetworkConfigurationManager::metaObject();
}

int sipQNetworkConfigurationManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkConfigurationManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkConfigurationManager,_c,_id,_a);

    return _id;
}

void *sipQNetworkConfigurationManager::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkConfigurationManager, _clname, &sipCpp) ? sipCpp :  ::QNetworkConfigurationManager::qt_metacast(_clname));
}

bool sipQNetworkConfigurationManager::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QNetworkConfigurationManager::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkConfigurationManager::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QNetworkConfigurationManager::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQNetworkConfigurationManager::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkConfigurationManager::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkConfigurationManager::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkConfigurationManager::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkConfigurationManager::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QNetworkConfigurationManager::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_capabilities, "capabilities(self) -> QNetworkConfigurationManager.Capabilities");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_capabilities(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_capabilities(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
             ::QNetworkConfigurationManager::Capabilities*sipRes;

            sipRes = new  ::QNetworkConfigurationManager::Capabilities(sipCpp->capabilities());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfigurationManager_Capabilities,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_capabilities, doc_QNetworkConfigurationManager_capabilities);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_defaultConfiguration, "defaultConfiguration(self) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_defaultConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_defaultConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->defaultConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_defaultConfiguration, doc_QNetworkConfigurationManager_defaultConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_allConfigurations, "allConfigurations(self, flags: Union[QNetworkConfiguration.StateFlags, QNetworkConfiguration.StateFlag] = QNetworkConfiguration.StateFlags()) -> List[QNetworkConfiguration]");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_allConfigurations(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_allConfigurations(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfiguration::StateFlags a0def = QNetworkConfiguration::StateFlags();
         ::QNetworkConfiguration::StateFlags* a0 = &a0def;
        int a0State = 0;
        const  ::QNetworkConfigurationManager *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QNetworkConfiguration_StateFlags, &a0, &a0State))
        {
            QList< ::QNetworkConfiguration>*sipRes;

            sipRes = new QList< ::QNetworkConfiguration>(sipCpp->allConfigurations(*a0));
            sipReleaseType(a0,sipType_QNetworkConfiguration_StateFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_allConfigurations, doc_QNetworkConfigurationManager_allConfigurations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_configurationFromIdentifier, "configurationFromIdentifier(self, str) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_configurationFromIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_configurationFromIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->configurationFromIdentifier(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_configurationFromIdentifier, doc_QNetworkConfigurationManager_configurationFromIdentifier);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_updateConfigurations, "updateConfigurations(self)");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_updateConfigurations(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_updateConfigurations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            sipCpp->updateConfigurations();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_updateConfigurations, doc_QNetworkConfigurationManager_updateConfigurations);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkConfigurationManager_isOnline, "isOnline(self) -> bool");

extern "C" {static PyObject *meth_QNetworkConfigurationManager_isOnline(PyObject *, PyObject *);}
static PyObject *meth_QNetworkConfigurationManager_isOnline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfigurationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkConfigurationManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOnline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkConfigurationManager, sipName_isOnline, doc_QNetworkConfigurationManager_isOnline);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkConfigurationManager(void *, const sipTypeDef *);}
static void *cast_QNetworkConfigurationManager(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkConfigurationManager *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkConfigurationManager(void *, int);}
static void release_QNetworkConfigurationManager(void *sipCppV, int)
{
     ::QNetworkConfigurationManager *sipCpp = reinterpret_cast< ::QNetworkConfigurationManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkConfigurationManager(sipSimpleWrapper *);}
static void dealloc_QNetworkConfigurationManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkConfigurationManager *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkConfigurationManager(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkConfigurationManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkConfigurationManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkConfigurationManager *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkConfigurationManager(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkConfigurationManager[] = {{12, 0, 1}};


static PyMethodDef methods_QNetworkConfigurationManager[] = {
    {SIP_MLNAME_CAST(sipName_allConfigurations), SIP_MLMETH_CAST(meth_QNetworkConfigurationManager_allConfigurations), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkConfigurationManager_allConfigurations)},
    {SIP_MLNAME_CAST(sipName_capabilities), meth_QNetworkConfigurationManager_capabilities, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfigurationManager_capabilities)},
    {SIP_MLNAME_CAST(sipName_configurationFromIdentifier), meth_QNetworkConfigurationManager_configurationFromIdentifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfigurationManager_configurationFromIdentifier)},
    {SIP_MLNAME_CAST(sipName_defaultConfiguration), meth_QNetworkConfigurationManager_defaultConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfigurationManager_defaultConfiguration)},
    {SIP_MLNAME_CAST(sipName_isOnline), meth_QNetworkConfigurationManager_isOnline, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfigurationManager_isOnline)},
    {SIP_MLNAME_CAST(sipName_updateConfigurations), meth_QNetworkConfigurationManager_updateConfigurations, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkConfigurationManager_updateConfigurations)}
};

static sipEnumMemberDef enummembers_QNetworkConfigurationManager[] = {
    {sipName_ApplicationLevelRoaming, static_cast<int>( ::QNetworkConfigurationManager::ApplicationLevelRoaming), 71},
    {sipName_CanStartAndStopInterfaces, static_cast<int>( ::QNetworkConfigurationManager::CanStartAndStopInterfaces), 71},
    {sipName_DataStatistics, static_cast<int>( ::QNetworkConfigurationManager::DataStatistics), 71},
    {sipName_DirectConnectionRouting, static_cast<int>( ::QNetworkConfigurationManager::DirectConnectionRouting), 71},
    {sipName_ForcedRoaming, static_cast<int>( ::QNetworkConfigurationManager::ForcedRoaming), 71},
    {sipName_NetworkSessionRequired, static_cast<int>( ::QNetworkConfigurationManager::NetworkSessionRequired), 71},
    {sipName_SystemSessionSupport, static_cast<int>( ::QNetworkConfigurationManager::SystemSessionSupport), 71},
};

PyDoc_STRVAR(doc_QNetworkConfigurationManager, "\1QNetworkConfigurationManager(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNetworkConfigurationManager[] = {
    {"updateCompleted()", "\1updateCompleted(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"onlineStateChanged(bool)", "\1onlineStateChanged(self, bool)", SIP_NULLPTR, SIP_NULLPTR},
    {"configurationChanged(QNetworkConfiguration)", "\1configurationChanged(self, QNetworkConfiguration)", SIP_NULLPTR, SIP_NULLPTR},
    {"configurationRemoved(QNetworkConfiguration)", "\1configurationRemoved(self, QNetworkConfiguration)", SIP_NULLPTR, SIP_NULLPTR},
    {"configurationAdded(QNetworkConfiguration)", "\1configurationAdded(self, QNetworkConfiguration)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QNetworkConfigurationManager = {
    & ::QNetworkConfigurationManager::staticMetaObject,
    0,
    signals_QNetworkConfigurationManager,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkConfigurationManager = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkConfigurationManager,
        {SIP_NULLPTR},
        &plugin_QNetworkConfigurationManager
    },
    {
        sipNameNr_QNetworkConfigurationManager,
        {0, 0, 1},
        6, methods_QNetworkConfigurationManager,
        7, enummembers_QNetworkConfigurationManager,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkConfigurationManager,
    -1,
    -1,
    supers_QNetworkConfigurationManager,
    SIP_NULLPTR,
    init_type_QNetworkConfigurationManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkConfigurationManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QNetworkConfigurationManager,
    cast_QNetworkConfigurationManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 13105 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 13109 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 13112 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 13115 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 13118 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhstspolicy.sip"
#include <qhstspolicy.h>
#line 13121 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 36 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 13124 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 13127 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 13130 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 13133 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 13136 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 13139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 13142 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 13145 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 140 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 13148 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 29 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qsslpresharedkeyauthenticator.sip"
#include <qsslpresharedkeyauthenticator.h>
#line 13151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13154 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 13157 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 13160 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 13163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkcookiejar.sip"
#include <qnetworkcookiejar.h>
#line 13166 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 13169 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 13172 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 13175 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 13178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 13181 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13184 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 13187 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 13190 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 13193 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 13196 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 13199 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 13202 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 13205 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQNetworkAccessManager : public  ::QNetworkAccessManager
{
public:
    sipQNetworkAccessManager( ::QObject*);
    virtual ~sipQNetworkAccessManager();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QNetworkReply* createRequest( ::QNetworkAccessManager::Operation,const  ::QNetworkRequest&, ::QIODevice*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkAccessManager(const sipQNetworkAccessManager &);
    sipQNetworkAccessManager &operator = (const sipQNetworkAccessManager &);

    char sipPyMethods[8];
};

sipQNetworkAccessManager::sipQNetworkAccessManager( ::QObject*a0):  ::QNetworkAccessManager(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkAccessManager::~sipQNetworkAccessManager()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQNetworkAccessManager::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkAccessManager);

    return  ::QNetworkAccessManager::metaObject();
}

int sipQNetworkAccessManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QNetworkAccessManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkAccessManager,_c,_id,_a);

    return _id;
}

void *sipQNetworkAccessManager::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkAccessManager, _clname, &sipCpp) ? sipCpp :  ::QNetworkAccessManager::qt_metacast(_clname));
}

 ::QNetworkReply* sipQNetworkAccessManager::createRequest( ::QNetworkAccessManager::Operation a0,const  ::QNetworkRequest& a1, ::QIODevice*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_createRequest);

    if (!sipMeth)
        return  ::QNetworkAccessManager::createRequest(a0,a1,a2);

    extern  ::QNetworkReply* sipVH_QtNetwork_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QNetworkAccessManager::Operation,const  ::QNetworkRequest&, ::QIODevice*);

    return sipVH_QtNetwork_30(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQNetworkAccessManager::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QNetworkAccessManager::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQNetworkAccessManager::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QNetworkAccessManager::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQNetworkAccessManager::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QNetworkAccessManager::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QNetworkAccessManager::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QNetworkAccessManager::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QNetworkAccessManager::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QNetworkAccessManager::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QNetworkAccessManager_proxy, "proxy(self) -> QNetworkProxy");

extern "C" {static PyObject *meth_QNetworkAccessManager_proxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkProxy*sipRes;

            sipRes = new  ::QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxy, doc_QNetworkAccessManager_proxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setProxy, "setProxy(self, QNetworkProxy)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxy, doc_QNetworkAccessManager_setProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_cookieJar, "cookieJar(self) -> QNetworkCookieJar");

extern "C" {static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkCookieJar*sipRes;

            sipRes = sipCpp->cookieJar();

            return sipConvertFromType(sipRes,sipType_QNetworkCookieJar,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cookieJar, doc_QNetworkAccessManager_cookieJar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setCookieJar, "setCookieJar(self, QNetworkCookieJar)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkCookieJar* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkCookieJar, &a0))
        {
            sipCpp->setCookieJar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCookieJar, doc_QNetworkAccessManager_setCookieJar);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_head, "head(self, QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_head(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_head(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->head(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_head, doc_QNetworkAccessManager_head);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_get, "get(self, QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_get(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->get(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_get, doc_QNetworkAccessManager_get);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_post, "post(self, QNetworkRequest, QIODevice) -> QNetworkReply\n"
"post(self, QNetworkRequest, Union[QByteArray, bytes, bytearray]) -> QNetworkReply\n"
"post(self, QNetworkRequest, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_post(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_post(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QIODevice* a1;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
         ::QHttpMultiPart* a1;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QHttpMultiPart, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_post, doc_QNetworkAccessManager_post);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_put, "put(self, QNetworkRequest, QIODevice) -> QNetworkReply\n"
"put(self, QNetworkRequest, Union[QByteArray, bytes, bytearray]) -> QNetworkReply\n"
"put(self, QNetworkRequest, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_put(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_put(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QIODevice* a1;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
         ::QHttpMultiPart* a1;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QHttpMultiPart, &a1))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_put, doc_QNetworkAccessManager_put);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_createRequest, "createRequest(self, QNetworkAccessManager.Operation, QNetworkRequest, device: QIODevice = None) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QNetworkAccessManager::Operation a0;
        const  ::QNetworkRequest* a1;
         ::QIODevice* a2 = 0;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_device,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "pEJ9|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0, sipType_QNetworkRequest, &a1, sipType_QIODevice, &a2))
        {
             ::QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QNetworkAccessManager::createRequest(a0,*a1,a2) : sipCpp->createRequest(a0,*a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_createRequest, doc_QNetworkAccessManager_createRequest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_proxyFactory, "proxyFactory(self) -> QNetworkProxyFactory");

extern "C" {static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkProxyFactory*sipRes;

            sipRes = sipCpp->proxyFactory();

            return sipConvertFromType(sipRes,sipType_QNetworkProxyFactory,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxyFactory, doc_QNetworkAccessManager_proxyFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setProxyFactory, "setProxyFactory(self, QNetworkProxyFactory)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkProxyFactory* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxyFactory, &a0))
        {
            sipCpp->setProxyFactory(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxyFactory, doc_QNetworkAccessManager_setProxyFactory);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_cache, "cache(self) -> QAbstractNetworkCache");

extern "C" {static PyObject *meth_QNetworkAccessManager_cache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QAbstractNetworkCache*sipRes;

            sipRes = sipCpp->cache();

            return sipConvertFromType(sipRes,sipType_QAbstractNetworkCache,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cache, doc_QNetworkAccessManager_cache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setCache, "setCache(self, QAbstractNetworkCache)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractNetworkCache* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QAbstractNetworkCache, &a0))
        {
            sipCpp->setCache(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCache, doc_QNetworkAccessManager_setCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_deleteResource, "deleteResource(self, QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->deleteResource(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_deleteResource, doc_QNetworkAccessManager_deleteResource);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_sendCustomRequest, "sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], data: QIODevice = None) -> QNetworkReply\n"
"sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]) -> QNetworkReply\n"
"sendCustomRequest(self, QNetworkRequest, Union[QByteArray, bytes, bytearray], QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QIODevice* a2 = 0;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J1|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QIODevice, &a2))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->sendCustomRequest(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
        const  ::QByteArray* a2;
        int a2State = 0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9J1J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QByteArray, &a2, &a2State))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->sendCustomRequest(*a0,*a1,*a2);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);
            sipReleaseType(const_cast< ::QByteArray *>(a2),sipType_QByteArray,a2State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    {
        const  ::QNetworkRequest* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QHttpMultiPart* a2;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "BJ9J1J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QHttpMultiPart, &a2))
        {
             ::QNetworkReply*sipRes;

            sipRes = sipCpp->sendCustomRequest(*a0,*a1,a2);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_sendCustomRequest, doc_QNetworkAccessManager_sendCustomRequest);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setConfiguration, "setConfiguration(self, QNetworkConfiguration)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkConfiguration* a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkConfiguration, &a0))
        {
            sipCpp->setConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setConfiguration, doc_QNetworkAccessManager_setConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_configuration, "configuration(self) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkAccessManager_configuration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->configuration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_configuration, doc_QNetworkAccessManager_configuration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_activeConfiguration, "activeConfiguration(self) -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkConfiguration*sipRes;

            sipRes = new  ::QNetworkConfiguration(sipCpp->activeConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_activeConfiguration, doc_QNetworkAccessManager_activeConfiguration);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setNetworkAccessible, "setNetworkAccessible(self, QNetworkAccessManager.NetworkAccessibility)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAccessManager::NetworkAccessibility a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_NetworkAccessibility, &a0))
        {
            sipCpp->setNetworkAccessible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setNetworkAccessible, doc_QNetworkAccessManager_setNetworkAccessible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_networkAccessible, "networkAccessible(self) -> QNetworkAccessManager.NetworkAccessibility");

extern "C" {static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkAccessManager::NetworkAccessibility sipRes;

            sipRes = sipCpp->networkAccessible();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkAccessManager_NetworkAccessibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_networkAccessible, doc_QNetworkAccessManager_networkAccessible);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_clearAccessCache, "clearAccessCache(self)");

extern "C" {static PyObject *meth_QNetworkAccessManager_clearAccessCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_clearAccessCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            sipCpp->clearAccessCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_clearAccessCache, doc_QNetworkAccessManager_clearAccessCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_supportedSchemes, "supportedSchemes(self) -> List[str]");

extern "C" {static PyObject *meth_QNetworkAccessManager_supportedSchemes(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_supportedSchemes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->supportedSchemes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_supportedSchemes, doc_QNetworkAccessManager_supportedSchemes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_connectToHostEncrypted, "connectToHostEncrypted(self, str, port: int = 443, sslConfiguration: QSslConfiguration = QSslConfiguration.defaultConfiguration())");

extern "C" {static PyObject *meth_QNetworkAccessManager_connectToHostEncrypted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_connectToHostEncrypted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint16 a1 = 443;
        const  ::QSslConfiguration& a2def = QSslConfiguration::defaultConfiguration();
        const  ::QSslConfiguration* a2 = &a2def;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_port,
            sipName_sslConfiguration,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|tJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QSslConfiguration, &a2))
        {
            sipCpp->connectToHostEncrypted(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_connectToHostEncrypted, doc_QNetworkAccessManager_connectToHostEncrypted);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_connectToHost, "connectToHost(self, str, port: int = 80)");

extern "C" {static PyObject *meth_QNetworkAccessManager_connectToHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_connectToHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint16 a1 = 80;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|t", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->connectToHost(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_connectToHost, doc_QNetworkAccessManager_connectToHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_supportedSchemesImplementation, "supportedSchemesImplementation(self) -> List[str]");

extern "C" {static PyObject *meth_QNetworkAccessManager_supportedSchemesImplementation(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_supportedSchemesImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QStringList*sipRes;

            sipRes = new  ::QStringList(sipCpp->supportedSchemesImplementation());

            return sipConvertFromNewType(sipRes,sipType_QStringList,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_supportedSchemesImplementation, doc_QNetworkAccessManager_supportedSchemesImplementation);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_clearConnectionCache, "clearConnectionCache(self)");

extern "C" {static PyObject *meth_QNetworkAccessManager_clearConnectionCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_clearConnectionCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            sipCpp->clearConnectionCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_clearConnectionCache, doc_QNetworkAccessManager_clearConnectionCache);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setStrictTransportSecurityEnabled, "setStrictTransportSecurityEnabled(self, bool)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setStrictTransportSecurityEnabled(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setStrictTransportSecurityEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, &a0))
        {
            sipCpp->setStrictTransportSecurityEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setStrictTransportSecurityEnabled, doc_QNetworkAccessManager_setStrictTransportSecurityEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_isStrictTransportSecurityEnabled, "isStrictTransportSecurityEnabled(self) -> bool");

extern "C" {static PyObject *meth_QNetworkAccessManager_isStrictTransportSecurityEnabled(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_isStrictTransportSecurityEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStrictTransportSecurityEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_isStrictTransportSecurityEnabled, doc_QNetworkAccessManager_isStrictTransportSecurityEnabled);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_addStrictTransportSecurityHosts, "addStrictTransportSecurityHosts(self, Iterable[QHstsPolicy])");

extern "C" {static PyObject *meth_QNetworkAccessManager_addStrictTransportSecurityHosts(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_addStrictTransportSecurityHosts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QVector< ::QHstsPolicy>* a0;
        int a0State = 0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QVector_0100QHstsPolicy,&a0, &a0State))
        {
            sipCpp->addStrictTransportSecurityHosts(*a0);
            sipReleaseType(const_cast<QVector< ::QHstsPolicy> *>(a0),sipType_QVector_0100QHstsPolicy,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_addStrictTransportSecurityHosts, doc_QNetworkAccessManager_addStrictTransportSecurityHosts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_strictTransportSecurityHosts, "strictTransportSecurityHosts(self) -> List[QHstsPolicy]");

extern "C" {static PyObject *meth_QNetworkAccessManager_strictTransportSecurityHosts(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_strictTransportSecurityHosts(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QVector< ::QHstsPolicy>*sipRes;

            sipRes = new QVector< ::QHstsPolicy>(sipCpp->strictTransportSecurityHosts());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QHstsPolicy,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_strictTransportSecurityHosts, doc_QNetworkAccessManager_strictTransportSecurityHosts);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setRedirectPolicy, "setRedirectPolicy(self, QNetworkRequest.RedirectPolicy)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setRedirectPolicy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setRedirectPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::RedirectPolicy a0;
         ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest_RedirectPolicy, &a0))
        {
            sipCpp->setRedirectPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setRedirectPolicy, doc_QNetworkAccessManager_setRedirectPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_redirectPolicy, "redirectPolicy(self) -> QNetworkRequest.RedirectPolicy");

extern "C" {static PyObject *meth_QNetworkAccessManager_redirectPolicy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_redirectPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
             ::QNetworkRequest::RedirectPolicy sipRes;

            sipRes = sipCpp->redirectPolicy();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QNetworkRequest_RedirectPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_redirectPolicy, doc_QNetworkAccessManager_redirectPolicy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_enableStrictTransportSecurityStore, "enableStrictTransportSecurityStore(self, bool, storeDir: str = '')");

extern "C" {static PyObject *meth_QNetworkAccessManager_enableStrictTransportSecurityStore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_enableStrictTransportSecurityStore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_storeDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb|J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->enableStrictTransportSecurityStore(a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_enableStrictTransportSecurityStore, doc_QNetworkAccessManager_enableStrictTransportSecurityStore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled, "isStrictTransportSecurityStoreEnabled(self) -> bool");

extern "C" {static PyObject *meth_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStrictTransportSecurityStoreEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_isStrictTransportSecurityStoreEnabled, doc_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QNetworkAccessManager(void *, const sipTypeDef *);}
static void *cast_QNetworkAccessManager(void *sipCppV, const sipTypeDef *targetType)
{
     ::QNetworkAccessManager *sipCpp = reinterpret_cast< ::QNetworkAccessManager *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkAccessManager(void *, int);}
static void release_QNetworkAccessManager(void *sipCppV, int)
{
     ::QNetworkAccessManager *sipCpp = reinterpret_cast< ::QNetworkAccessManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkAccessManager(sipSimpleWrapper *);}
static void dealloc_QNetworkAccessManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQNetworkAccessManager *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkAccessManager(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QNetworkAccessManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkAccessManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkAccessManager *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkAccessManager(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkAccessManager[] = {{12, 0, 1}};


static PyMethodDef methods_QNetworkAccessManager[] = {
    {SIP_MLNAME_CAST(sipName_activeConfiguration), meth_QNetworkAccessManager_activeConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_activeConfiguration)},
    {SIP_MLNAME_CAST(sipName_addStrictTransportSecurityHosts), meth_QNetworkAccessManager_addStrictTransportSecurityHosts, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_addStrictTransportSecurityHosts)},
    {SIP_MLNAME_CAST(sipName_cache), meth_QNetworkAccessManager_cache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_cache)},
    {SIP_MLNAME_CAST(sipName_clearAccessCache), meth_QNetworkAccessManager_clearAccessCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_clearAccessCache)},
    {SIP_MLNAME_CAST(sipName_clearConnectionCache), meth_QNetworkAccessManager_clearConnectionCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_clearConnectionCache)},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QNetworkAccessManager_configuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_configuration)},
    {SIP_MLNAME_CAST(sipName_connectToHost), SIP_MLMETH_CAST(meth_QNetworkAccessManager_connectToHost), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_connectToHost)},
    {SIP_MLNAME_CAST(sipName_connectToHostEncrypted), SIP_MLMETH_CAST(meth_QNetworkAccessManager_connectToHostEncrypted), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_connectToHostEncrypted)},
    {SIP_MLNAME_CAST(sipName_cookieJar), meth_QNetworkAccessManager_cookieJar, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_cookieJar)},
    {SIP_MLNAME_CAST(sipName_createRequest), SIP_MLMETH_CAST(meth_QNetworkAccessManager_createRequest), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_createRequest)},
    {SIP_MLNAME_CAST(sipName_deleteResource), meth_QNetworkAccessManager_deleteResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_deleteResource)},
    {SIP_MLNAME_CAST(sipName_enableStrictTransportSecurityStore), SIP_MLMETH_CAST(meth_QNetworkAccessManager_enableStrictTransportSecurityStore), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_enableStrictTransportSecurityStore)},
    {SIP_MLNAME_CAST(sipName_get), meth_QNetworkAccessManager_get, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_get)},
    {SIP_MLNAME_CAST(sipName_head), meth_QNetworkAccessManager_head, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_head)},
    {SIP_MLNAME_CAST(sipName_isStrictTransportSecurityEnabled), meth_QNetworkAccessManager_isStrictTransportSecurityEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_isStrictTransportSecurityEnabled)},
    {SIP_MLNAME_CAST(sipName_isStrictTransportSecurityStoreEnabled), meth_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled)},
    {SIP_MLNAME_CAST(sipName_networkAccessible), meth_QNetworkAccessManager_networkAccessible, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_networkAccessible)},
    {SIP_MLNAME_CAST(sipName_post), meth_QNetworkAccessManager_post, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_post)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QNetworkAccessManager_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_proxy)},
    {SIP_MLNAME_CAST(sipName_proxyFactory), meth_QNetworkAccessManager_proxyFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_proxyFactory)},
    {SIP_MLNAME_CAST(sipName_put), meth_QNetworkAccessManager_put, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_put)},
    {SIP_MLNAME_CAST(sipName_redirectPolicy), meth_QNetworkAccessManager_redirectPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_redirectPolicy)},
    {SIP_MLNAME_CAST(sipName_sendCustomRequest), SIP_MLMETH_CAST(meth_QNetworkAccessManager_sendCustomRequest), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_sendCustomRequest)},
    {SIP_MLNAME_CAST(sipName_setCache), meth_QNetworkAccessManager_setCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setCache)},
    {SIP_MLNAME_CAST(sipName_setConfiguration), meth_QNetworkAccessManager_setConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setConfiguration)},
    {SIP_MLNAME_CAST(sipName_setCookieJar), meth_QNetworkAccessManager_setCookieJar, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setCookieJar)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessible), meth_QNetworkAccessManager_setNetworkAccessible, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setNetworkAccessible)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QNetworkAccessManager_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setProxy)},
    {SIP_MLNAME_CAST(sipName_setProxyFactory), meth_QNetworkAccessManager_setProxyFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setProxyFactory)},
    {SIP_MLNAME_CAST(sipName_setRedirectPolicy), meth_QNetworkAccessManager_setRedirectPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setRedirectPolicy)},
    {SIP_MLNAME_CAST(sipName_setStrictTransportSecurityEnabled), meth_QNetworkAccessManager_setStrictTransportSecurityEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setStrictTransportSecurityEnabled)},
    {SIP_MLNAME_CAST(sipName_strictTransportSecurityHosts), meth_QNetworkAccessManager_strictTransportSecurityHosts, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_strictTransportSecurityHosts)},
    {SIP_MLNAME_CAST(sipName_supportedSchemes), meth_QNetworkAccessManager_supportedSchemes, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_supportedSchemes)},
    {SIP_MLNAME_CAST(sipName_supportedSchemesImplementation), meth_QNetworkAccessManager_supportedSchemesImplementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_supportedSchemesImplementation)}
};

static sipEnumMemberDef enummembers_QNetworkAccessManager[] = {
    {sipName_Accessible, static_cast<int>( ::QNetworkAccessManager::Accessible), 58},
    {sipName_CustomOperation, static_cast<int>( ::QNetworkAccessManager::CustomOperation), 59},
    {sipName_DeleteOperation, static_cast<int>( ::QNetworkAccessManager::DeleteOperation), 59},
    {sipName_GetOperation, static_cast<int>( ::QNetworkAccessManager::GetOperation), 59},
    {sipName_HeadOperation, static_cast<int>( ::QNetworkAccessManager::HeadOperation), 59},
    {sipName_NotAccessible, static_cast<int>( ::QNetworkAccessManager::NotAccessible), 58},
    {sipName_PostOperation, static_cast<int>( ::QNetworkAccessManager::PostOperation), 59},
    {sipName_PutOperation, static_cast<int>( ::QNetworkAccessManager::PutOperation), 59},
    {sipName_UnknownAccessibility, static_cast<int>( ::QNetworkAccessManager::UnknownAccessibility), 58},
};

PyDoc_STRVAR(doc_QNetworkAccessManager, "\1QNetworkAccessManager(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNetworkAccessManager[] = {
    {"preSharedKeyAuthenticationRequired(QNetworkReply*,QSslPreSharedKeyAuthenticator*)", "\1preSharedKeyAuthenticationRequired(self, QNetworkReply, QSslPreSharedKeyAuthenticator)", SIP_NULLPTR, SIP_NULLPTR},
    {"networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility)", "\1networkAccessibleChanged(self, QNetworkAccessManager.NetworkAccessibility)", SIP_NULLPTR, SIP_NULLPTR},
    {"sslErrors(QNetworkReply*,QList<QSslError>)", "\1sslErrors(self, QNetworkReply, Iterable[QSslError])", SIP_NULLPTR, SIP_NULLPTR},
    {"encrypted(QNetworkReply*)", "\1encrypted(self, QNetworkReply)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished(QNetworkReply*)", "\1finished(self, QNetworkReply)", SIP_NULLPTR, SIP_NULLPTR},
    {"authenticationRequired(QNetworkReply*,QAuthenticator*)", "\1authenticationRequired(self, QNetworkReply, QAuthenticator)", SIP_NULLPTR, SIP_NULLPTR},
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QNetworkAccessManager = {
    & ::QNetworkAccessManager::staticMetaObject,
    0,
    signals_QNetworkAccessManager,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkAccessManager = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkAccessManager,
        {SIP_NULLPTR},
        &plugin_QNetworkAccessManager
    },
    {
        sipNameNr_QNetworkAccessManager,
        {0, 0, 1},
        34, methods_QNetworkAccessManager,
        9, enummembers_QNetworkAccessManager,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkAccessManager,
    -1,
    -1,
    supers_QNetworkAccessManager,
    SIP_NULLPTR,
    init_type_QNetworkAccessManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkAccessManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QNetworkAccessManager,
    cast_QNetworkAccessManager,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qlocalsocket.sip"
#include <qlocalsocket.h>
#line 14731 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 14735 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 160 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 14738 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 14741 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 14744 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 14747 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 14750 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 14753 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 14756 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 14759 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 14762 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 14765 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 14768 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 14771 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 14774 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 14777 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 14780 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 14783 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 14786 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQLocalSocket : public  ::QLocalSocket
{
public:
    sipQLocalSocket( ::QObject*);
    virtual ~sipQLocalSocket();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLocalSocket(const sipQLocalSocket &);
    sipQLocalSocket &operator = (const sipQLocalSocket &);

    char sipPyMethods[23];
};

sipQLocalSocket::sipQLocalSocket( ::QObject*a0):  ::QLocalSocket(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLocalSocket::~sipQLocalSocket()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQLocalSocket::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QLocalSocket);

    return  ::QLocalSocket::metaObject();
}

int sipQLocalSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLocalSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QLocalSocket,_c,_id,_a);

    return _id;
}

void *sipQLocalSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QLocalSocket, _clname, &sipCpp) ? sipCpp :  ::QLocalSocket::qt_metacast(_clname));
}

void sipQLocalSocket::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QLocalSocket::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QLocalSocket::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QLocalSocket::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QLocalSocket::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QLocalSocket::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QLocalSocket::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQLocalSocket::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QLocalSocket::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QLocalSocket::isSequential();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QLocalSocket::open(a0);

    extern bool sipVH_QtNetwork_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtNetwork_20(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QLocalSocket::close();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQLocalSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QLocalSocket::pos();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQLocalSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QLocalSocket::size();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QLocalSocket::seek(a0);

    extern bool sipVH_QtNetwork_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtNetwork_19(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QLocalSocket::atEnd();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QLocalSocket::reset();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQLocalSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QLocalSocket::bytesAvailable();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQLocalSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QLocalSocket::bytesToWrite();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QLocalSocket::canReadLine();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QLocalSocket::waitForReadyRead(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QLocalSocket::waitForBytesWritten(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQLocalSocket::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_readData);

    if (!sipMeth)
        return  ::QLocalSocket::readData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtNetwork_16(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQLocalSocket::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QLocalSocket::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtNetwork_15(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQLocalSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QLocalSocket::writeData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtNetwork_14(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QLocalSocket_connectToServer, "connectToServer(self, str, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)\n"
"connectToServer(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QLocalSocket_connectToServer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_connectToServer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice::OpenMode a1def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToServer(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QIODevice::OpenMode a0def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToServer(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_connectToServer, doc_QLocalSocket_connectToServer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_disconnectFromServer, "disconnectFromServer(self)");

extern "C" {static PyObject *meth_QLocalSocket_disconnectFromServer(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_disconnectFromServer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disconnectFromServer();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_disconnectFromServer, doc_QLocalSocket_disconnectFromServer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_open, "open(self, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIODevice::OpenMode a0def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::open(*a0) : sipCpp->open(*a0));
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_open, doc_QLocalSocket_open);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_serverName, "serverName(self) -> str");

extern "C" {static PyObject *meth_QLocalSocket_serverName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_serverName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->serverName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_serverName, doc_QLocalSocket_serverName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_setServerName, "setServerName(self, str)");

extern "C" {static PyObject *meth_QLocalSocket_setServerName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServerName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setServerName, doc_QLocalSocket_setServerName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_fullServerName, "fullServerName(self) -> str");

extern "C" {static PyObject *meth_QLocalSocket_fullServerName(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_fullServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fullServerName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_fullServerName, doc_QLocalSocket_fullServerName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_abort, "abort(self)");

extern "C" {static PyObject *meth_QLocalSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_abort, doc_QLocalSocket_abort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_isSequential, doc_QLocalSocket_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_bytesAvailable, doc_QLocalSocket_bytesAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_bytesToWrite, doc_QLocalSocket_bytesToWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_canReadLine, doc_QLocalSocket_canReadLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_close, "close(self)");

extern "C" {static PyObject *meth_QLocalSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QLocalSocket::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_close, doc_QLocalSocket_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_error, "error(self) -> QLocalSocket.LocalSocketError");

extern "C" {static PyObject *meth_QLocalSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::QLocalSocket::LocalSocketError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocalSocket_LocalSocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_error, doc_QLocalSocket_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_flush, "flush(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->flush();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_flush, doc_QLocalSocket_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_isValid(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_isValid, doc_QLocalSocket_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_readBufferSize, "readBufferSize(self) -> int");

extern "C" {static PyObject *meth_QLocalSocket_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_readBufferSize, doc_QLocalSocket_readBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_setReadBufferSize, "setReadBufferSize(self, int)");

extern "C" {static PyObject *meth_QLocalSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qint64 a0;
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            sipCpp->setReadBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setReadBufferSize, doc_QLocalSocket_setReadBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_setSocketDescriptor, "setSocketDescriptor(self, sip.voidptr, state: QLocalSocket.LocalSocketState = QLocalSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::qintptr* a0;
        int a0State = 0;
         ::QLocalSocket::LocalSocketState a1 = QLocalSocket::ConnectedState;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|EJ1", &sipSelf, sipType_QLocalSocket, &sipCpp, sipType_qintptr,&a0, &a0State, sipType_QLocalSocket_LocalSocketState, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(*a0,a1,*a2);
            sipReleaseType(a0,sipType_qintptr,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_setSocketDescriptor, doc_QLocalSocket_setSocketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_socketDescriptor, "socketDescriptor(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QLocalSocket_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::qintptr*sipRes;

            sipRes = new  ::qintptr(sipCpp->socketDescriptor());

            return sipConvertFromNewType(sipRes,sipType_qintptr,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_socketDescriptor, doc_QLocalSocket_socketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_state, "state(self) -> QLocalSocket.LocalSocketState");

extern "C" {static PyObject *meth_QLocalSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalSocket, &sipCpp))
        {
             ::QLocalSocket::LocalSocketState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QLocalSocket_LocalSocketState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_state, doc_QLocalSocket_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForBytesWritten, "waitForBytesWritten(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForBytesWritten, doc_QLocalSocket_waitForBytesWritten);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForConnected, "waitForConnected(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 30000;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForConnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForConnected, doc_QLocalSocket_waitForConnected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForDisconnected, "waitForDisconnected(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForDisconnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForDisconnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 30000;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForDisconnected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForDisconnected, doc_QLocalSocket_waitForDisconnected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_waitForReadyRead, "waitForReadyRead(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QLocalSocket_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QLocalSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_waitForReadyRead, doc_QLocalSocket_waitForReadyRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QLocalSocket_readData(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 96 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qlocalsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QLocalSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 16058 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_readData, doc_QLocalSocket_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalSocket_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QLocalSocket_writeData(PyObject *, PyObject *);}
static PyObject *meth_QLocalSocket_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QLocalSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QLocalSocket, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalSocket::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalSocket, sipName_writeData, doc_QLocalSocket_writeData);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLocalSocket(void *, const sipTypeDef *);}
static void *cast_QLocalSocket(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLocalSocket *sipCpp = reinterpret_cast< ::QLocalSocket *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocalSocket(void *, int);}
static void release_QLocalSocket(void *sipCppV, int)
{
     ::QLocalSocket *sipCpp = reinterpret_cast< ::QLocalSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLocalSocket(sipSimpleWrapper *);}
static void dealloc_QLocalSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLocalSocket *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLocalSocket(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLocalSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocalSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLocalSocket *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQLocalSocket(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLocalSocket[] = {{8, 0, 1}};


static PyMethodDef methods_QLocalSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QLocalSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_abort)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QLocalSocket_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QLocalSocket_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QLocalSocket_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QLocalSocket_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_close)},
    {SIP_MLNAME_CAST(sipName_connectToServer), SIP_MLMETH_CAST(meth_QLocalSocket_connectToServer), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_connectToServer)},
    {SIP_MLNAME_CAST(sipName_disconnectFromServer), meth_QLocalSocket_disconnectFromServer, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_disconnectFromServer)},
    {SIP_MLNAME_CAST(sipName_error), meth_QLocalSocket_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_error)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QLocalSocket_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_flush)},
    {SIP_MLNAME_CAST(sipName_fullServerName), meth_QLocalSocket_fullServerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_fullServerName)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QLocalSocket_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_isSequential)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QLocalSocket_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_isValid)},
    {SIP_MLNAME_CAST(sipName_open), SIP_MLMETH_CAST(meth_QLocalSocket_open), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_open)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QLocalSocket_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QLocalSocket_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_readData)},
    {SIP_MLNAME_CAST(sipName_serverName), meth_QLocalSocket_serverName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_serverName)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QLocalSocket_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setServerName), meth_QLocalSocket_setServerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_setServerName)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), SIP_MLMETH_CAST(meth_QLocalSocket_setSocketDescriptor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QLocalSocket_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_state), meth_QLocalSocket_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_state)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), SIP_MLMETH_CAST(meth_QLocalSocket_waitForBytesWritten), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForConnected), SIP_MLMETH_CAST(meth_QLocalSocket_waitForConnected), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_waitForConnected)},
    {SIP_MLNAME_CAST(sipName_waitForDisconnected), SIP_MLMETH_CAST(meth_QLocalSocket_waitForDisconnected), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_waitForDisconnected)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), SIP_MLMETH_CAST(meth_QLocalSocket_waitForReadyRead), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalSocket_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QLocalSocket_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalSocket_writeData)}
};

static sipEnumMemberDef enummembers_QLocalSocket[] = {
    {sipName_ClosingState, static_cast<int>( ::QLocalSocket::ClosingState), 54},
    {sipName_ConnectedState, static_cast<int>( ::QLocalSocket::ConnectedState), 54},
    {sipName_ConnectingState, static_cast<int>( ::QLocalSocket::ConnectingState), 54},
    {sipName_ConnectionError, static_cast<int>( ::QLocalSocket::ConnectionError), 53},
    {sipName_ConnectionRefusedError, static_cast<int>( ::QLocalSocket::ConnectionRefusedError), 53},
    {sipName_DatagramTooLargeError, static_cast<int>( ::QLocalSocket::DatagramTooLargeError), 53},
    {sipName_OperationError, static_cast<int>( ::QLocalSocket::OperationError), 53},
    {sipName_PeerClosedError, static_cast<int>( ::QLocalSocket::PeerClosedError), 53},
    {sipName_ServerNotFoundError, static_cast<int>( ::QLocalSocket::ServerNotFoundError), 53},
    {sipName_SocketAccessError, static_cast<int>( ::QLocalSocket::SocketAccessError), 53},
    {sipName_SocketResourceError, static_cast<int>( ::QLocalSocket::SocketResourceError), 53},
    {sipName_SocketTimeoutError, static_cast<int>( ::QLocalSocket::SocketTimeoutError), 53},
    {sipName_UnconnectedState, static_cast<int>( ::QLocalSocket::UnconnectedState), 54},
    {sipName_UnknownSocketError, static_cast<int>( ::QLocalSocket::UnknownSocketError), 53},
    {sipName_UnsupportedSocketOperationError, static_cast<int>( ::QLocalSocket::UnsupportedSocketOperationError), 53},
};

PyDoc_STRVAR(doc_QLocalSocket, "\1QLocalSocket(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLocalSocket[] = {
    {"stateChanged(QLocalSocket::LocalSocketState)", "\1stateChanged(self, QLocalSocket.LocalSocketState)", SIP_NULLPTR, SIP_NULLPTR},
    {"disconnected()", "\1disconnected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"connected()", "\1connected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QLocalSocket::LocalSocketError)", "\1error(self, QLocalSocket.LocalSocketError)", &methods_QLocalSocket[7], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QLocalSocket = {
    & ::QLocalSocket::staticMetaObject,
    0,
    signals_QLocalSocket,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QLocalSocket = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLocalSocket,
        {SIP_NULLPTR},
        &plugin_QLocalSocket
    },
    {
        sipNameNr_QLocalSocket,
        {0, 0, 1},
        26, methods_QLocalSocket,
        15, enummembers_QLocalSocket,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLocalSocket,
    -1,
    -1,
    supers_QLocalSocket,
    SIP_NULLPTR,
    init_type_QLocalSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLocalSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QLocalSocket,
    cast_QLocalSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qlocalserver.sip"
#include <qlocalserver.h>
#line 16299 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qlocalserver.sip"
#include <qlocalserver.h>
#line 16303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QLocalServer_SocketOptions___hash__(PyObject *);}
static long slot_QLocalServer_SocketOptions___hash__(PyObject *sipSelf)
{
     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QLocalServer::SocketOptions::Int();
#line 16321 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QLocalServer_SocketOptions___bool__(PyObject *);}
static int slot_QLocalServer_SocketOptions___bool__(PyObject *sipSelf)
{
     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocalServer::SocketOptions::Int() != 0);
#line 16346 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___ne__(PyObject *,PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer::SocketOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QLocalServer_SocketOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocalServer::SocketOptions::Int() != a0->operator QLocalServer::SocketOptions::Int());
#line 16376 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QLocalServer::SocketOptions *>(a0),sipType_QLocalServer_SocketOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QLocalServer_SocketOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___eq__(PyObject *,PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer::SocketOptions* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QLocalServer_SocketOptions, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QLocalServer::SocketOptions::Int() == a0->operator QLocalServer::SocketOptions::Int());
#line 16412 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QLocalServer::SocketOptions *>(a0),sipType_QLocalServer_SocketOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QLocalServer_SocketOptions, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocalServer_SocketOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QLocalServer::SocketOptions(*sipCpp ^ a0);
#line 16451 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___xor__(PyObject *,PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalServer::SocketOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocalServer_SocketOptions, &a0, &a0State, &a1))
        {
             ::QLocalServer::SocketOptions*sipRes;

            sipRes = new  ::QLocalServer::SocketOptions((*a0 ^ a1));
            sipReleaseType(a0,sipType_QLocalServer_SocketOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocalServer_SocketOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___ior__(PyObject *,PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocalServer_SocketOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QLocalServer::SocketOptions(*sipCpp | a0);
#line 16523 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___or__(PyObject *,PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalServer::SocketOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocalServer_SocketOptions, &a0, &a0State, &a1))
        {
             ::QLocalServer::SocketOptions*sipRes;

            sipRes = new  ::QLocalServer::SocketOptions((*a0 | a1));
            sipReleaseType(a0,sipType_QLocalServer_SocketOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocalServer_SocketOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___iand__(PyObject *,PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QLocalServer_SocketOptions)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QLocalServer::SocketOptions::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___and__(PyObject *,PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalServer::SocketOptions* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QLocalServer_SocketOptions, &a0, &a0State, &a1))
        {
             ::QLocalServer::SocketOptions*sipRes;

            sipRes = new  ::QLocalServer::SocketOptions((*a0 & a1));
            sipReleaseType(a0,sipType_QLocalServer_SocketOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QLocalServer_SocketOptions,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___invert__(PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___invert__(PyObject *sipSelf)
{
     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QLocalServer::SocketOptions*sipRes;

            sipRes = new  ::QLocalServer::SocketOptions(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QLocalServer_SocketOptions,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QLocalServer_SocketOptions___int__(PyObject *);}
static PyObject *slot_QLocalServer_SocketOptions___int__(PyObject *sipSelf)
{
     ::QLocalServer::SocketOptions *sipCpp = reinterpret_cast< ::QLocalServer::SocketOptions *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocalServer_SocketOptions));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocalServer_SocketOptions(void *, int);}
static void release_QLocalServer_SocketOptions(void *sipCppV, int)
{
    delete reinterpret_cast< ::QLocalServer::SocketOptions *>(sipCppV);
}


extern "C" {static void assign_QLocalServer_SocketOptions(void *, SIP_SSIZE_T, void *);}
static void assign_QLocalServer_SocketOptions(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QLocalServer::SocketOptions *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QLocalServer::SocketOptions *>(sipSrc);
}


extern "C" {static void *array_QLocalServer_SocketOptions(SIP_SSIZE_T);}
static void *array_QLocalServer_SocketOptions(SIP_SSIZE_T sipNrElem)
{
    return new  ::QLocalServer::SocketOptions[sipNrElem];
}


extern "C" {static void *copy_QLocalServer_SocketOptions(const void *, SIP_SSIZE_T);}
static void *copy_QLocalServer_SocketOptions(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QLocalServer::SocketOptions(reinterpret_cast<const  ::QLocalServer::SocketOptions *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLocalServer_SocketOptions(sipSimpleWrapper *);}
static void dealloc_QLocalServer_SocketOptions(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLocalServer_SocketOptions(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLocalServer_SocketOptions(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocalServer_SocketOptions(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLocalServer::SocketOptions *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QLocalServer::SocketOptions();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QLocalServer::SocketOptions(a0);

            return sipCpp;
        }
    }

    {
        const  ::QLocalServer::SocketOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QLocalServer_SocketOptions, &a0, &a0State))
        {
            sipCpp = new  ::QLocalServer::SocketOptions(*a0);
            sipReleaseType(const_cast< ::QLocalServer::SocketOptions *>(a0),sipType_QLocalServer_SocketOptions,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QLocalServer_SocketOptions(PyObject *, void **, int *, PyObject *);}
static int convertTo_QLocalServer_SocketOptions(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QLocalServer::SocketOptions **sipCppPtr = reinterpret_cast< ::QLocalServer::SocketOptions **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QLocalServer::SocketOptions is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QLocalServer_SocketOption)) ||
            sipCanConvertToType(sipPy, sipType_QLocalServer_SocketOptions, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QLocalServer_SocketOption)))
{
    *sipCppPtr = new QLocalServer::SocketOptions(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QLocalServer::SocketOptions *>(sipConvertToType(sipPy, sipType_QLocalServer_SocketOptions, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 16791 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLocalServer_SocketOptions[] = {
    {(void *)slot_QLocalServer_SocketOptions___hash__, hash_slot},
    {(void *)slot_QLocalServer_SocketOptions___bool__, bool_slot},
    {(void *)slot_QLocalServer_SocketOptions___ne__, ne_slot},
    {(void *)slot_QLocalServer_SocketOptions___eq__, eq_slot},
    {(void *)slot_QLocalServer_SocketOptions___ixor__, ixor_slot},
    {(void *)slot_QLocalServer_SocketOptions___xor__, xor_slot},
    {(void *)slot_QLocalServer_SocketOptions___ior__, ior_slot},
    {(void *)slot_QLocalServer_SocketOptions___or__, or_slot},
    {(void *)slot_QLocalServer_SocketOptions___iand__, iand_slot},
    {(void *)slot_QLocalServer_SocketOptions___and__, and_slot},
    {(void *)slot_QLocalServer_SocketOptions___invert__, invert_slot},
    {(void *)slot_QLocalServer_SocketOptions___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QLocalServer_SocketOptions, "\1QLocalServer.SocketOptions()\n"
"QLocalServer.SocketOptions(Union[QLocalServer.SocketOptions, QLocalServer.SocketOption])\n"
"QLocalServer.SocketOptions(QLocalServer.SocketOptions)");


static pyqt5ClassPluginDef plugin_QLocalServer_SocketOptions = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QLocalServer_SocketOptions = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLocalServer__SocketOptions,
        {SIP_NULLPTR},
        &plugin_QLocalServer_SocketOptions
    },
    {
        sipNameNr_SocketOptions,
        {49, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLocalServer_SocketOptions,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QLocalServer_SocketOptions,
    init_type_QLocalServer_SocketOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLocalServer_SocketOptions,
    assign_QLocalServer_SocketOptions,
    array_QLocalServer_SocketOptions,
    copy_QLocalServer_SocketOptions,
    release_QLocalServer_SocketOptions,
    SIP_NULLPTR,
    convertTo_QLocalServer_SocketOptions,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qlocalserver.sip"
#include <qlocalserver.h>
#line 16879 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 16883 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 160 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 16886 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qlocalserver.sip"
#include <qlocalserver.h>
#line 16889 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 189 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 16892 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 16895 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 16898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qlocalsocket.sip"
#include <qlocalsocket.h>
#line 16901 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 16904 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 16907 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 16910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 16913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 16916 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 16919 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 16922 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 16925 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 16928 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 16931 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 16934 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 16937 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 16940 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 16943 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQLocalServer : public  ::QLocalServer
{
public:
    sipQLocalServer( ::QObject*);
    virtual ~sipQLocalServer();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void incomingConnection( ::quintptr) SIP_OVERRIDE;
     ::QLocalSocket* nextPendingConnection() SIP_OVERRIDE;
    bool hasPendingConnections() const SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLocalServer(const sipQLocalServer &);
    sipQLocalServer &operator = (const sipQLocalServer &);

    char sipPyMethods[10];
};

sipQLocalServer::sipQLocalServer( ::QObject*a0):  ::QLocalServer(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLocalServer::~sipQLocalServer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQLocalServer::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QLocalServer);

    return  ::QLocalServer::metaObject();
}

int sipQLocalServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLocalServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QLocalServer,_c,_id,_a);

    return _id;
}

void *sipQLocalServer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QLocalServer, _clname, &sipCpp) ? sipCpp :  ::QLocalServer::qt_metacast(_clname));
}

void sipQLocalServer::incomingConnection( ::quintptr a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_incomingConnection);

    if (!sipMeth)
    {
         ::QLocalServer::incomingConnection(a0);
        return;
    }

    extern void sipVH_QtNetwork_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::quintptr);

    sipVH_QtNetwork_29(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QLocalSocket* sipQLocalServer::nextPendingConnection()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_nextPendingConnection);

    if (!sipMeth)
        return  ::QLocalServer::nextPendingConnection();

    extern  ::QLocalSocket* sipVH_QtNetwork_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_28(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalServer::hasPendingConnections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,SIP_NULLPTR,sipName_hasPendingConnections);

    if (!sipMeth)
        return  ::QLocalServer::hasPendingConnections();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQLocalServer::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QLocalServer::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQLocalServer::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QLocalServer::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQLocalServer::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QLocalServer::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalServer::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QLocalServer::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalServer::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QLocalServer::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalServer::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QLocalServer::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQLocalServer::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QLocalServer::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLocalServer_close, "close(self)");

extern "C" {static PyObject *meth_QLocalServer_close(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_close, doc_QLocalServer_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QLocalServer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_errorString, doc_QLocalServer_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_hasPendingConnections, "hasPendingConnections(self) -> bool");

extern "C" {static PyObject *meth_QLocalServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalServer::hasPendingConnections() : sipCpp->hasPendingConnections());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_hasPendingConnections, doc_QLocalServer_hasPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_isListening, "isListening(self) -> bool");

extern "C" {static PyObject *meth_QLocalServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListening();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_isListening, doc_QLocalServer_isListening);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_listen, "listen(self, str) -> bool\n"
"listen(self, sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QLocalServer_listen(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_listen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->listen(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::qintptr* a0;
        int a0State = 0;
         ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_qintptr,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->listen(*a0);
            sipReleaseType(a0,sipType_qintptr,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_listen, doc_QLocalServer_listen);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_maxPendingConnections, "maxPendingConnections(self) -> int");

extern "C" {static PyObject *meth_QLocalServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxPendingConnections();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_maxPendingConnections, doc_QLocalServer_maxPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_nextPendingConnection, "nextPendingConnection(self) -> QLocalSocket");

extern "C" {static PyObject *meth_QLocalServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
             ::QLocalSocket*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QLocalServer::nextPendingConnection() : sipCpp->nextPendingConnection());

            return sipConvertFromType(sipRes,sipType_QLocalSocket,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_nextPendingConnection, doc_QLocalServer_nextPendingConnection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_serverName, "serverName(self) -> str");

extern "C" {static PyObject *meth_QLocalServer_serverName(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_serverName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->serverName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_serverName, doc_QLocalServer_serverName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_fullServerName, "fullServerName(self) -> str");

extern "C" {static PyObject *meth_QLocalServer_fullServerName(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_fullServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->fullServerName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_fullServerName, doc_QLocalServer_fullServerName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_serverError, "serverError(self) -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QLocalServer_serverError(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_serverError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
             ::QAbstractSocket::SocketError sipRes;

            sipRes = sipCpp->serverError();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_serverError, doc_QLocalServer_serverError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_setMaxPendingConnections, "setMaxPendingConnections(self, int)");

extern "C" {static PyObject *meth_QLocalServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLocalServer, &sipCpp, &a0))
        {
            sipCpp->setMaxPendingConnections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_setMaxPendingConnections, doc_QLocalServer_setMaxPendingConnections);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_waitForNewConnection, "waitForNewConnection(self, msecs: int = 0) -> Tuple[bool, bool]");

extern "C" {static PyObject *meth_QLocalServer_waitForNewConnection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_waitForNewConnection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0 = 0;
        bool a1;
         ::QLocalServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QLocalServer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForNewConnection(a0,&a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_waitForNewConnection, doc_QLocalServer_waitForNewConnection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_removeServer, "removeServer(str) -> bool");

extern "C" {static PyObject *meth_QLocalServer_removeServer(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_removeServer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes =  ::QLocalServer::removeServer(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_removeServer, doc_QLocalServer_removeServer);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_incomingConnection, "incomingConnection(self, sip.voidptr)");

extern "C" {static PyObject *meth_QLocalServer_incomingConnection(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_incomingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::quintptr* a0;
        int a0State = 0;
         ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_quintptr,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp-> ::QLocalServer::incomingConnection(*a0) : sipCpp->incomingConnection(*a0));
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_incomingConnection, doc_QLocalServer_incomingConnection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_setSocketOptions, "setSocketOptions(self, Union[QLocalServer.SocketOptions, QLocalServer.SocketOption])");

extern "C" {static PyObject *meth_QLocalServer_setSocketOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_setSocketOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QLocalServer::SocketOptions* a0;
        int a0State = 0;
         ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QLocalServer_SocketOptions, &a0, &a0State))
        {
            sipCpp->setSocketOptions(*a0);
            sipReleaseType(a0,sipType_QLocalServer_SocketOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_setSocketOptions, doc_QLocalServer_setSocketOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_socketOptions, "socketOptions(self) -> QLocalServer.SocketOptions");

extern "C" {static PyObject *meth_QLocalServer_socketOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_socketOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
             ::QLocalServer::SocketOptions*sipRes;

            sipRes = new  ::QLocalServer::SocketOptions(sipCpp->socketOptions());

            return sipConvertFromNewType(sipRes,sipType_QLocalServer_SocketOptions,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_socketOptions, doc_QLocalServer_socketOptions);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QLocalServer_socketDescriptor, "socketDescriptor(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QLocalServer_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
             ::qintptr*sipRes;

            sipRes = new  ::qintptr(sipCpp->socketDescriptor());

            return sipConvertFromNewType(sipRes,sipType_qintptr,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_socketDescriptor, doc_QLocalServer_socketDescriptor);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLocalServer(void *, const sipTypeDef *);}
static void *cast_QLocalServer(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLocalServer *sipCpp = reinterpret_cast< ::QLocalServer *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocalServer(void *, int);}
static void release_QLocalServer(void *sipCppV, int)
{
     ::QLocalServer *sipCpp = reinterpret_cast< ::QLocalServer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLocalServer(sipSimpleWrapper *);}
static void dealloc_QLocalServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLocalServer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLocalServer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLocalServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocalServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLocalServer *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQLocalServer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLocalServer[] = {{12, 0, 1}};


static PyMethodDef methods_QLocalServer[] = {
    {SIP_MLNAME_CAST(sipName_close), meth_QLocalServer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_close)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QLocalServer_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_errorString)},
    {SIP_MLNAME_CAST(sipName_fullServerName), meth_QLocalServer_fullServerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_fullServerName)},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QLocalServer_hasPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_hasPendingConnections)},
    {SIP_MLNAME_CAST(sipName_incomingConnection), meth_QLocalServer_incomingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_incomingConnection)},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QLocalServer_isListening, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_isListening)},
    {SIP_MLNAME_CAST(sipName_listen), meth_QLocalServer_listen, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_listen)},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QLocalServer_maxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_maxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QLocalServer_nextPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_nextPendingConnection)},
    {SIP_MLNAME_CAST(sipName_removeServer), meth_QLocalServer_removeServer, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_removeServer)},
    {SIP_MLNAME_CAST(sipName_serverError), meth_QLocalServer_serverError, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_serverError)},
    {SIP_MLNAME_CAST(sipName_serverName), meth_QLocalServer_serverName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_serverName)},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QLocalServer_setMaxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_setMaxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_setSocketOptions), meth_QLocalServer_setSocketOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_setSocketOptions)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QLocalServer_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketOptions), meth_QLocalServer_socketOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_socketOptions)},
    {SIP_MLNAME_CAST(sipName_waitForNewConnection), SIP_MLMETH_CAST(meth_QLocalServer_waitForNewConnection), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalServer_waitForNewConnection)}
};

static sipEnumMemberDef enummembers_QLocalServer[] = {
    {sipName_GroupAccessOption, static_cast<int>( ::QLocalServer::GroupAccessOption), 50},
    {sipName_OtherAccessOption, static_cast<int>( ::QLocalServer::OtherAccessOption), 50},
    {sipName_UserAccessOption, static_cast<int>( ::QLocalServer::UserAccessOption), 50},
    {sipName_WorldAccessOption, static_cast<int>( ::QLocalServer::WorldAccessOption), 50},
};

PyDoc_STRVAR(doc_QLocalServer, "\1QLocalServer(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLocalServer[] = {
    {"newConnection()", "\1newConnection(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QLocalServer = {
    & ::QLocalServer::staticMetaObject,
    0,
    signals_QLocalServer,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QLocalServer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QLocalServer,
        {SIP_NULLPTR},
        &plugin_QLocalServer
    },
    {
        sipNameNr_QLocalServer,
        {0, 0, 1},
        17, methods_QLocalServer,
        4, enummembers_QLocalServer,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QLocalServer,
    -1,
    -1,
    supers_QLocalServer,
    SIP_NULLPTR,
    init_type_QLocalServer,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QLocalServer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QLocalServer,
    cast_QLocalServer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 45 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 17865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 17869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 17872 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 17875 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 17878 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 17881 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 17884 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 17887 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 17890 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 17893 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 17896 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 17899 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 17902 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 17905 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 17908 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 17911 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 17914 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 17917 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQHttpMultiPart : public  ::QHttpMultiPart
{
public:
    sipQHttpMultiPart( ::QObject*);
    sipQHttpMultiPart( ::QHttpMultiPart::ContentType, ::QObject*);
    virtual ~sipQHttpMultiPart();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHttpMultiPart(const sipQHttpMultiPart &);
    sipQHttpMultiPart &operator = (const sipQHttpMultiPart &);

    char sipPyMethods[7];
};

sipQHttpMultiPart::sipQHttpMultiPart( ::QObject*a0):  ::QHttpMultiPart(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHttpMultiPart::sipQHttpMultiPart( ::QHttpMultiPart::ContentType a0, ::QObject*a1):  ::QHttpMultiPart(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHttpMultiPart::~sipQHttpMultiPart()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQHttpMultiPart::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QHttpMultiPart);

    return  ::QHttpMultiPart::metaObject();
}

int sipQHttpMultiPart::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QHttpMultiPart::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QHttpMultiPart,_c,_id,_a);

    return _id;
}

void *sipQHttpMultiPart::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QHttpMultiPart, _clname, &sipCpp) ? sipCpp :  ::QHttpMultiPart::qt_metacast(_clname));
}

bool sipQHttpMultiPart::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QHttpMultiPart::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQHttpMultiPart::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QHttpMultiPart::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQHttpMultiPart::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QHttpMultiPart::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHttpMultiPart::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QHttpMultiPart::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHttpMultiPart::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QHttpMultiPart::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHttpMultiPart::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QHttpMultiPart::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQHttpMultiPart::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QHttpMultiPart::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QHttpMultiPart_append, "append(self, QHttpPart)");

extern "C" {static PyObject *meth_QHttpMultiPart_append(PyObject *, PyObject *);}
static PyObject *meth_QHttpMultiPart_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHttpPart* a0;
         ::QHttpMultiPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHttpMultiPart, &sipCpp, sipType_QHttpPart, &a0))
        {
            sipCpp->append(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpMultiPart, sipName_append, doc_QHttpMultiPart_append);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHttpMultiPart_setContentType, "setContentType(self, QHttpMultiPart.ContentType)");

extern "C" {static PyObject *meth_QHttpMultiPart_setContentType(PyObject *, PyObject *);}
static PyObject *meth_QHttpMultiPart_setContentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHttpMultiPart::ContentType a0;
         ::QHttpMultiPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHttpMultiPart, &sipCpp, sipType_QHttpMultiPart_ContentType, &a0))
        {
            sipCpp->setContentType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpMultiPart, sipName_setContentType, doc_QHttpMultiPart_setContentType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHttpMultiPart_boundary, "boundary(self) -> QByteArray");

extern "C" {static PyObject *meth_QHttpMultiPart_boundary(PyObject *, PyObject *);}
static PyObject *meth_QHttpMultiPart_boundary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHttpMultiPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttpMultiPart, &sipCpp))
        {
             ::QByteArray*sipRes;

            sipRes = new  ::QByteArray(sipCpp->boundary());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpMultiPart, sipName_boundary, doc_QHttpMultiPart_boundary);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHttpMultiPart_setBoundary, "setBoundary(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QHttpMultiPart_setBoundary(PyObject *, PyObject *);}
static PyObject *meth_QHttpMultiPart_setBoundary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QHttpMultiPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHttpMultiPart, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setBoundary(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpMultiPart, sipName_setBoundary, doc_QHttpMultiPart_setBoundary);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHttpMultiPart(void *, const sipTypeDef *);}
static void *cast_QHttpMultiPart(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHttpMultiPart *sipCpp = reinterpret_cast< ::QHttpMultiPart *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHttpMultiPart(void *, int);}
static void release_QHttpMultiPart(void *sipCppV, int)
{
     ::QHttpMultiPart *sipCpp = reinterpret_cast< ::QHttpMultiPart *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QHttpMultiPart(sipSimpleWrapper *);}
static void dealloc_QHttpMultiPart(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHttpMultiPart *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHttpMultiPart(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHttpMultiPart(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHttpMultiPart(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHttpMultiPart *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQHttpMultiPart(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QHttpMultiPart::ContentType a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QHttpMultiPart_ContentType, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQHttpMultiPart(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHttpMultiPart[] = {{12, 0, 1}};


static PyMethodDef methods_QHttpMultiPart[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QHttpMultiPart_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpMultiPart_append)},
    {SIP_MLNAME_CAST(sipName_boundary), meth_QHttpMultiPart_boundary, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpMultiPart_boundary)},
    {SIP_MLNAME_CAST(sipName_setBoundary), meth_QHttpMultiPart_setBoundary, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpMultiPart_setBoundary)},
    {SIP_MLNAME_CAST(sipName_setContentType), meth_QHttpMultiPart_setContentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpMultiPart_setContentType)}
};

static sipEnumMemberDef enummembers_QHttpMultiPart[] = {
    {sipName_AlternativeType, static_cast<int>( ::QHttpMultiPart::AlternativeType), 31},
    {sipName_FormDataType, static_cast<int>( ::QHttpMultiPart::FormDataType), 31},
    {sipName_MixedType, static_cast<int>( ::QHttpMultiPart::MixedType), 31},
    {sipName_RelatedType, static_cast<int>( ::QHttpMultiPart::RelatedType), 31},
};

PyDoc_STRVAR(doc_QHttpMultiPart, "\1QHttpMultiPart(parent: QObject = None)\n"
"QHttpMultiPart(QHttpMultiPart.ContentType, parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QHttpMultiPart = {
    & ::QHttpMultiPart::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QHttpMultiPart = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHttpMultiPart,
        {SIP_NULLPTR},
        &plugin_QHttpMultiPart
    },
    {
        sipNameNr_QHttpMultiPart,
        {0, 0, 1},
        4, methods_QHttpMultiPart,
        4, enummembers_QHttpMultiPart,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHttpMultiPart,
    -1,
    -1,
    supers_QHttpMultiPart,
    SIP_NULLPTR,
    init_type_QHttpMultiPart,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHttpMultiPart,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QHttpMultiPart,
    cast_QHttpMultiPart,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 18396 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 18400 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 18403 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 18406 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 18409 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QHttpPart_setHeader, "setHeader(self, QNetworkRequest.KnownHeaders, Any)");

extern "C" {static PyObject *meth_QHttpPart_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QHttpPart_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkRequest::KnownHeaders a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QHttpPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QHttpPart, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setHeader(a0,*a1);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpPart, sipName_setHeader, doc_QHttpPart_setHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHttpPart_setRawHeader, "setRawHeader(self, Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QHttpPart_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QHttpPart_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QHttpPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QHttpPart, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setRawHeader(*a0,*a1);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpPart, sipName_setRawHeader, doc_QHttpPart_setRawHeader);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHttpPart_setBody, "setBody(self, Union[QByteArray, bytes, bytearray])");

extern "C" {static PyObject *meth_QHttpPart_setBody(PyObject *, PyObject *);}
static PyObject *meth_QHttpPart_setBody(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QHttpPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHttpPart, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setBody(*a0);
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpPart, sipName_setBody, doc_QHttpPart_setBody);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHttpPart_setBodyDevice, "setBodyDevice(self, QIODevice)");

extern "C" {static PyObject *meth_QHttpPart_setBodyDevice(PyObject *, PyObject *);}
static PyObject *meth_QHttpPart_setBodyDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QIODevice* a0;
         ::QHttpPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QHttpPart, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setBodyDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpPart, sipName_setBodyDevice, doc_QHttpPart_setBodyDevice);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHttpPart_swap, "swap(self, QHttpPart)");

extern "C" {static PyObject *meth_QHttpPart_swap(PyObject *, PyObject *);}
static PyObject *meth_QHttpPart_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHttpPart* a0;
         ::QHttpPart *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHttpPart, &sipCpp, sipType_QHttpPart, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttpPart, sipName_swap, doc_QHttpPart_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QHttpPart___ne__(PyObject *,PyObject *);}
static PyObject *slot_QHttpPart___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHttpPart *sipCpp = reinterpret_cast< ::QHttpPart *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHttpPart));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHttpPart* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QHttpPart, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QHttpPart::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QHttpPart, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QHttpPart___eq__(PyObject *,PyObject *);}
static PyObject *slot_QHttpPart___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHttpPart *sipCpp = reinterpret_cast< ::QHttpPart *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHttpPart));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHttpPart* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QHttpPart, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QHttpPart::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QHttpPart, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QHttpPart(void *, int);}
static void release_QHttpPart(void *sipCppV, int)
{
    delete reinterpret_cast< ::QHttpPart *>(sipCppV);
}


extern "C" {static void assign_QHttpPart(void *, SIP_SSIZE_T, void *);}
static void assign_QHttpPart(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QHttpPart *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QHttpPart *>(sipSrc);
}


extern "C" {static void *array_QHttpPart(SIP_SSIZE_T);}
static void *array_QHttpPart(SIP_SSIZE_T sipNrElem)
{
    return new  ::QHttpPart[sipNrElem];
}


extern "C" {static void *copy_QHttpPart(const void *, SIP_SSIZE_T);}
static void *copy_QHttpPart(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QHttpPart(reinterpret_cast<const  ::QHttpPart *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHttpPart(sipSimpleWrapper *);}
static void dealloc_QHttpPart(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHttpPart(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QHttpPart(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHttpPart(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QHttpPart *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QHttpPart();

            return sipCpp;
        }
    }

    {
        const  ::QHttpPart* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QHttpPart, &a0))
        {
            sipCpp = new  ::QHttpPart(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QHttpPart[] = {
    {(void *)slot_QHttpPart___ne__, ne_slot},
    {(void *)slot_QHttpPart___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QHttpPart[] = {
    {SIP_MLNAME_CAST(sipName_setBody), meth_QHttpPart_setBody, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpPart_setBody)},
    {SIP_MLNAME_CAST(sipName_setBodyDevice), meth_QHttpPart_setBodyDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpPart_setBodyDevice)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QHttpPart_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpPart_setHeader)},
    {SIP_MLNAME_CAST(sipName_setRawHeader), meth_QHttpPart_setRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpPart_setRawHeader)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QHttpPart_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttpPart_swap)}
};

PyDoc_STRVAR(doc_QHttpPart, "\1QHttpPart()\n"
"QHttpPart(QHttpPart)");


static pyqt5ClassPluginDef plugin_QHttpPart = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QHttpPart = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHttpPart,
        {SIP_NULLPTR},
        &plugin_QHttpPart
    },
    {
        sipNameNr_QHttpPart,
        {0, 0, 1},
        5, methods_QHttpPart,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHttpPart,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QHttpPart,
    init_type_QHttpPart,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHttpPart,
    assign_QHttpPart,
    array_QHttpPart,
    copy_QHttpPart,
    release_QHttpPart,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhstspolicy.sip"
#include <qhstspolicy.h>
#line 18775 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhstspolicy.sip"
#include <qhstspolicy.h>
#line 18779 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QHstsPolicy_PolicyFlags___hash__(PyObject *);}
static long slot_QHstsPolicy_PolicyFlags___hash__(PyObject *sipSelf)
{
     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QHstsPolicy::PolicyFlags::Int();
#line 18797 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QHstsPolicy_PolicyFlags___bool__(PyObject *);}
static int slot_QHstsPolicy_PolicyFlags___bool__(PyObject *sipSelf)
{
     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QHstsPolicy::PolicyFlags::Int() != 0);
#line 18822 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___ne__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHstsPolicy::PolicyFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QHstsPolicy_PolicyFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QHstsPolicy::PolicyFlags::Int() != a0->operator QHstsPolicy::PolicyFlags::Int());
#line 18852 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QHstsPolicy::PolicyFlags *>(a0),sipType_QHstsPolicy_PolicyFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QHstsPolicy_PolicyFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___eq__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHstsPolicy::PolicyFlags* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QHstsPolicy_PolicyFlags, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QHstsPolicy::PolicyFlags::Int() == a0->operator QHstsPolicy::PolicyFlags::Int());
#line 18888 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QHstsPolicy::PolicyFlags *>(a0),sipType_QHstsPolicy_PolicyFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QHstsPolicy_PolicyFlags, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QHstsPolicy_PolicyFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QHstsPolicy::PolicyFlags(*sipCpp ^ a0);
#line 18927 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___xor__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHstsPolicy::PolicyFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QHstsPolicy_PolicyFlags, &a0, &a0State, &a1))
        {
             ::QHstsPolicy::PolicyFlags*sipRes;

            sipRes = new  ::QHstsPolicy::PolicyFlags((*a0 ^ a1));
            sipReleaseType(a0,sipType_QHstsPolicy_PolicyFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QHstsPolicy_PolicyFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___ior__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QHstsPolicy_PolicyFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QHstsPolicy::PolicyFlags(*sipCpp | a0);
#line 18999 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___or__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHstsPolicy::PolicyFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QHstsPolicy_PolicyFlags, &a0, &a0State, &a1))
        {
             ::QHstsPolicy::PolicyFlags*sipRes;

            sipRes = new  ::QHstsPolicy::PolicyFlags((*a0 | a1));
            sipReleaseType(a0,sipType_QHstsPolicy_PolicyFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QHstsPolicy_PolicyFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___iand__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QHstsPolicy_PolicyFlags)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QHstsPolicy::PolicyFlags::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___and__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHstsPolicy::PolicyFlags* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QHstsPolicy_PolicyFlags, &a0, &a0State, &a1))
        {
             ::QHstsPolicy::PolicyFlags*sipRes;

            sipRes = new  ::QHstsPolicy::PolicyFlags((*a0 & a1));
            sipReleaseType(a0,sipType_QHstsPolicy_PolicyFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QHstsPolicy_PolicyFlags,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___invert__(PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___invert__(PyObject *sipSelf)
{
     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QHstsPolicy::PolicyFlags*sipRes;

            sipRes = new  ::QHstsPolicy::PolicyFlags(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QHstsPolicy_PolicyFlags,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QHstsPolicy_PolicyFlags___int__(PyObject *);}
static PyObject *slot_QHstsPolicy_PolicyFlags___int__(PyObject *sipSelf)
{
     ::QHstsPolicy::PolicyFlags *sipCpp = reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy_PolicyFlags));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHstsPolicy_PolicyFlags(void *, int);}
static void release_QHstsPolicy_PolicyFlags(void *sipCppV, int)
{
    delete reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipCppV);
}


extern "C" {static void assign_QHstsPolicy_PolicyFlags(void *, SIP_SSIZE_T, void *);}
static void assign_QHstsPolicy_PolicyFlags(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QHstsPolicy::PolicyFlags *>(sipSrc);
}


extern "C" {static void *array_QHstsPolicy_PolicyFlags(SIP_SSIZE_T);}
static void *array_QHstsPolicy_PolicyFlags(SIP_SSIZE_T sipNrElem)
{
    return new  ::QHstsPolicy::PolicyFlags[sipNrElem];
}


extern "C" {static void *copy_QHstsPolicy_PolicyFlags(const void *, SIP_SSIZE_T);}
static void *copy_QHstsPolicy_PolicyFlags(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QHstsPolicy::PolicyFlags(reinterpret_cast<const  ::QHstsPolicy::PolicyFlags *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHstsPolicy_PolicyFlags(sipSimpleWrapper *);}
static void dealloc_QHstsPolicy_PolicyFlags(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHstsPolicy_PolicyFlags(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QHstsPolicy_PolicyFlags(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHstsPolicy_PolicyFlags(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QHstsPolicy::PolicyFlags *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QHstsPolicy::PolicyFlags();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QHstsPolicy::PolicyFlags(a0);

            return sipCpp;
        }
    }

    {
        const  ::QHstsPolicy::PolicyFlags* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QHstsPolicy_PolicyFlags, &a0, &a0State))
        {
            sipCpp = new  ::QHstsPolicy::PolicyFlags(*a0);
            sipReleaseType(const_cast< ::QHstsPolicy::PolicyFlags *>(a0),sipType_QHstsPolicy_PolicyFlags,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QHstsPolicy_PolicyFlags(PyObject *, void **, int *, PyObject *);}
static int convertTo_QHstsPolicy_PolicyFlags(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QHstsPolicy::PolicyFlags **sipCppPtr = reinterpret_cast< ::QHstsPolicy::PolicyFlags **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QHstsPolicy::PolicyFlags is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QHstsPolicy_PolicyFlag)) ||
            sipCanConvertToType(sipPy, sipType_QHstsPolicy_PolicyFlags, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QHstsPolicy_PolicyFlag)))
{
    *sipCppPtr = new QHstsPolicy::PolicyFlags(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QHstsPolicy::PolicyFlags *>(sipConvertToType(sipPy, sipType_QHstsPolicy_PolicyFlags, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 19267 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QHstsPolicy_PolicyFlags[] = {
    {(void *)slot_QHstsPolicy_PolicyFlags___hash__, hash_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___bool__, bool_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___ne__, ne_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___eq__, eq_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___ixor__, ixor_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___xor__, xor_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___ior__, ior_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___or__, or_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___iand__, iand_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___and__, and_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___invert__, invert_slot},
    {(void *)slot_QHstsPolicy_PolicyFlags___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QHstsPolicy_PolicyFlags, "\1QHstsPolicy.PolicyFlags()\n"
"QHstsPolicy.PolicyFlags(Union[QHstsPolicy.PolicyFlags, QHstsPolicy.PolicyFlag])\n"
"QHstsPolicy.PolicyFlags(QHstsPolicy.PolicyFlags)");


static pyqt5ClassPluginDef plugin_QHstsPolicy_PolicyFlags = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QHstsPolicy_PolicyFlags = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHstsPolicy__PolicyFlags,
        {SIP_NULLPTR},
        &plugin_QHstsPolicy_PolicyFlags
    },
    {
        sipNameNr_PolicyFlags,
        {27, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHstsPolicy_PolicyFlags,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QHstsPolicy_PolicyFlags,
    init_type_QHstsPolicy_PolicyFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHstsPolicy_PolicyFlags,
    assign_QHstsPolicy_PolicyFlags,
    array_QHstsPolicy_PolicyFlags,
    copy_QHstsPolicy_PolicyFlags,
    release_QHstsPolicy_PolicyFlags,
    SIP_NULLPTR,
    convertTo_QHstsPolicy_PolicyFlags,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhstspolicy.sip"
#include <qhstspolicy.h>
#line 19355 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 19359 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 28 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhstspolicy.sip"
#include <qhstspolicy.h>
#line 19362 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19365 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 19368 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 19371 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QHstsPolicy_swap, "swap(self, QHstsPolicy)");

extern "C" {static PyObject *meth_QHstsPolicy_swap(PyObject *, PyObject *);}
static PyObject *meth_QHstsPolicy_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHstsPolicy* a0;
         ::QHstsPolicy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHstsPolicy, &sipCpp, sipType_QHstsPolicy, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHstsPolicy, sipName_swap, doc_QHstsPolicy_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHstsPolicy_setHost, "setHost(self, str, mode: QUrl.ParsingMode = QUrl.DecodedMode)");

extern "C" {static PyObject *meth_QHstsPolicy_setHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHstsPolicy_setHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QUrl::ParsingMode a1 = QUrl::DecodedMode;
         ::QHstsPolicy *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_QHstsPolicy, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl_ParsingMode, &a1))
        {
            sipCpp->setHost(*a0,a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHstsPolicy, sipName_setHost, doc_QHstsPolicy_setHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHstsPolicy_host, "host(self, options: Union[QUrl.ComponentFormattingOptions, QUrl.ComponentFormattingOption] = QUrl.ComponentFormattingOption.FullyDecoded) -> str");

extern "C" {static PyObject *meth_QHstsPolicy_host(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHstsPolicy_host(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QUrl::ComponentFormattingOptions a0def = QUrl::ComponentFormattingOption::FullyDecoded;
         ::QUrl::ComponentFormattingOptions* a0 = &a0def;
        int a0State = 0;
        const  ::QHstsPolicy *sipCpp;

        static const char *sipKwdList[] = {
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_QHstsPolicy, &sipCpp, sipType_QUrl_ComponentFormattingOptions, &a0, &a0State))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->host(*a0));
            sipReleaseType(a0,sipType_QUrl_ComponentFormattingOptions,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHstsPolicy, sipName_host, doc_QHstsPolicy_host);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHstsPolicy_setExpiry, "setExpiry(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QHstsPolicy_setExpiry(PyObject *, PyObject *);}
static PyObject *meth_QHstsPolicy_setExpiry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QHstsPolicy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHstsPolicy, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setExpiry(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHstsPolicy, sipName_setExpiry, doc_QHstsPolicy_setExpiry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHstsPolicy_expiry, "expiry(self) -> QDateTime");

extern "C" {static PyObject *meth_QHstsPolicy_expiry(PyObject *, PyObject *);}
static PyObject *meth_QHstsPolicy_expiry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHstsPolicy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHstsPolicy, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->expiry());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHstsPolicy, sipName_expiry, doc_QHstsPolicy_expiry);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHstsPolicy_setIncludesSubDomains, "setIncludesSubDomains(self, bool)");

extern "C" {static PyObject *meth_QHstsPolicy_setIncludesSubDomains(PyObject *, PyObject *);}
static PyObject *meth_QHstsPolicy_setIncludesSubDomains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QHstsPolicy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHstsPolicy, &sipCpp, &a0))
        {
            sipCpp->setIncludesSubDomains(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHstsPolicy, sipName_setIncludesSubDomains, doc_QHstsPolicy_setIncludesSubDomains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHstsPolicy_includesSubDomains, "includesSubDomains(self) -> bool");

extern "C" {static PyObject *meth_QHstsPolicy_includesSubDomains(PyObject *, PyObject *);}
static PyObject *meth_QHstsPolicy_includesSubDomains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHstsPolicy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHstsPolicy, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->includesSubDomains();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHstsPolicy, sipName_includesSubDomains, doc_QHstsPolicy_includesSubDomains);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHstsPolicy_isExpired, "isExpired(self) -> bool");

extern "C" {static PyObject *meth_QHstsPolicy_isExpired(PyObject *, PyObject *);}
static PyObject *meth_QHstsPolicy_isExpired(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHstsPolicy *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHstsPolicy, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExpired();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHstsPolicy, sipName_isExpired, doc_QHstsPolicy_isExpired);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QHstsPolicy___eq__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHstsPolicy *sipCpp = reinterpret_cast< ::QHstsPolicy *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHstsPolicy* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QHstsPolicy, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QHstsPolicy, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QHstsPolicy___ne__(PyObject *,PyObject *);}
static PyObject *slot_QHstsPolicy___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHstsPolicy *sipCpp = reinterpret_cast< ::QHstsPolicy *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHstsPolicy));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHstsPolicy* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QHstsPolicy, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QHstsPolicy, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QHstsPolicy(void *, int);}
static void release_QHstsPolicy(void *sipCppV, int)
{
    delete reinterpret_cast< ::QHstsPolicy *>(sipCppV);
}


extern "C" {static void assign_QHstsPolicy(void *, SIP_SSIZE_T, void *);}
static void assign_QHstsPolicy(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QHstsPolicy *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QHstsPolicy *>(sipSrc);
}


extern "C" {static void *array_QHstsPolicy(SIP_SSIZE_T);}
static void *array_QHstsPolicy(SIP_SSIZE_T sipNrElem)
{
    return new  ::QHstsPolicy[sipNrElem];
}


extern "C" {static void *copy_QHstsPolicy(const void *, SIP_SSIZE_T);}
static void *copy_QHstsPolicy(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QHstsPolicy(reinterpret_cast<const  ::QHstsPolicy *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHstsPolicy(sipSimpleWrapper *);}
static void dealloc_QHstsPolicy(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHstsPolicy(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QHstsPolicy(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHstsPolicy(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QHstsPolicy *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QHstsPolicy();

            return sipCpp;
        }
    }

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QHstsPolicy::PolicyFlags* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QUrl::ParsingMode a3 = QUrl::DecodedMode;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1J1|E", sipType_QDateTime, &a0, &a0State, sipType_QHstsPolicy_PolicyFlags, &a1, &a1State, sipType_QString,&a2, &a2State, sipType_QUrl_ParsingMode, &a3))
        {
            sipCpp = new  ::QHstsPolicy(*a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);
            sipReleaseType(a1,sipType_QHstsPolicy_PolicyFlags,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipCpp;
        }
    }

    {
        const  ::QHstsPolicy* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QHstsPolicy, &a0))
        {
            sipCpp = new  ::QHstsPolicy(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QHstsPolicy[] = {
    {(void *)slot_QHstsPolicy___eq__, eq_slot},
    {(void *)slot_QHstsPolicy___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QHstsPolicy[] = {
    {SIP_MLNAME_CAST(sipName_expiry), meth_QHstsPolicy_expiry, METH_VARARGS, SIP_MLDOC_CAST(doc_QHstsPolicy_expiry)},
    {SIP_MLNAME_CAST(sipName_host), SIP_MLMETH_CAST(meth_QHstsPolicy_host), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHstsPolicy_host)},
    {SIP_MLNAME_CAST(sipName_includesSubDomains), meth_QHstsPolicy_includesSubDomains, METH_VARARGS, SIP_MLDOC_CAST(doc_QHstsPolicy_includesSubDomains)},
    {SIP_MLNAME_CAST(sipName_isExpired), meth_QHstsPolicy_isExpired, METH_VARARGS, SIP_MLDOC_CAST(doc_QHstsPolicy_isExpired)},
    {SIP_MLNAME_CAST(sipName_setExpiry), meth_QHstsPolicy_setExpiry, METH_VARARGS, SIP_MLDOC_CAST(doc_QHstsPolicy_setExpiry)},
    {SIP_MLNAME_CAST(sipName_setHost), SIP_MLMETH_CAST(meth_QHstsPolicy_setHost), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHstsPolicy_setHost)},
    {SIP_MLNAME_CAST(sipName_setIncludesSubDomains), meth_QHstsPolicy_setIncludesSubDomains, METH_VARARGS, SIP_MLDOC_CAST(doc_QHstsPolicy_setIncludesSubDomains)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QHstsPolicy_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QHstsPolicy_swap)}
};

static sipEnumMemberDef enummembers_QHstsPolicy[] = {
    {sipName_IncludeSubDomains, static_cast<int>( ::QHstsPolicy::IncludeSubDomains), 28},
};

PyDoc_STRVAR(doc_QHstsPolicy, "\1QHstsPolicy()\n"
"QHstsPolicy(Union[QDateTime, datetime.datetime], Union[QHstsPolicy.PolicyFlags, QHstsPolicy.PolicyFlag], str, mode: QUrl.ParsingMode = QUrl.DecodedMode)\n"
"QHstsPolicy(QHstsPolicy)");


static pyqt5ClassPluginDef plugin_QHstsPolicy = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QHstsPolicy = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHstsPolicy,
        {SIP_NULLPTR},
        &plugin_QHstsPolicy
    },
    {
        sipNameNr_QHstsPolicy,
        {0, 0, 1},
        8, methods_QHstsPolicy,
        1, enummembers_QHstsPolicy,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHstsPolicy,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QHstsPolicy,
    init_type_QHstsPolicy,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHstsPolicy,
    assign_QHstsPolicy,
    array_QHstsPolicy,
    copy_QHstsPolicy,
    release_QHstsPolicy,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostinfo.sip"
#include <qhostinfo.h>
#line 19865 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19869 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 19872 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 19875 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QHostInfo_hostName, "hostName(self) -> str");

extern "C" {static PyObject *meth_QHostInfo_hostName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_hostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->hostName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_hostName, doc_QHostInfo_hostName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_setHostName, "setHostName(self, str)");

extern "C" {static PyObject *meth_QHostInfo_setHostName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setHostName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHostName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setHostName, doc_QHostInfo_setHostName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_addresses, "addresses(self) -> List[QHostAddress]");

extern "C" {static PyObject *meth_QHostInfo_addresses(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_addresses(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
            QList< ::QHostAddress>*sipRes;

            sipRes = new QList< ::QHostAddress>(sipCpp->addresses());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_addresses, doc_QHostInfo_addresses);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_setAddresses, "setAddresses(self, Iterable[Union[QHostAddress, QHostAddress.SpecialAddress]])");

extern "C" {static PyObject *meth_QHostInfo_setAddresses(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setAddresses(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const QList< ::QHostAddress>* a0;
        int a0State = 0;
         ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QList_0100QHostAddress,&a0, &a0State))
        {
            sipCpp->setAddresses(*a0);
            sipReleaseType(const_cast<QList< ::QHostAddress> *>(a0),sipType_QList_0100QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setAddresses, doc_QHostInfo_setAddresses);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_error, "error(self) -> QHostInfo.HostInfoError");

extern "C" {static PyObject *meth_QHostInfo_error(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
             ::QHostInfo::HostInfoError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QHostInfo_HostInfoError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_error, doc_QHostInfo_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_setError, "setError(self, QHostInfo.HostInfoError)");

extern "C" {static PyObject *meth_QHostInfo_setError(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHostInfo::HostInfoError a0;
         ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QHostInfo_HostInfoError, &a0))
        {
            sipCpp->setError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setError, doc_QHostInfo_setError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QHostInfo_errorString(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_errorString, doc_QHostInfo_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_setErrorString, "setErrorString(self, str)");

extern "C" {static PyObject *meth_QHostInfo_setErrorString(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setErrorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setErrorString(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setErrorString, doc_QHostInfo_setErrorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_setLookupId, "setLookupId(self, int)");

extern "C" {static PyObject *meth_QHostInfo_setLookupId(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_setLookupId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;
         ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QHostInfo, &sipCpp, &a0))
        {
            sipCpp->setLookupId(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_setLookupId, doc_QHostInfo_setLookupId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_lookupId, "lookupId(self) -> int");

extern "C" {static PyObject *meth_QHostInfo_lookupId(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_lookupId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lookupId();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_lookupId, doc_QHostInfo_lookupId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_lookupHost, "lookupHost(str, PYQT_SLOT) -> int");

extern "C" {static PyObject *meth_QHostInfo_lookupHost(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_lookupHost(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        PyObject * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1P0", sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 52 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostinfo.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_qtnetwork_get_connection_parts(a1, 0, "(QHostInfo)", true, &receiver, slot_signature)) == sipErrorNone)
        {
            QHostInfo::lookupHost(*a0, receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(1, a1);
        }
#line 20194 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_lookupHost, doc_QHostInfo_lookupHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_abortHostLookup, "abortHostLookup(int)");

extern "C" {static PyObject *meth_QHostInfo_abortHostLookup(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_abortHostLookup(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
             ::QHostInfo::abortHostLookup(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_abortHostLookup, doc_QHostInfo_abortHostLookup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_fromName, "fromName(str) -> QHostInfo");

extern "C" {static PyObject *meth_QHostInfo_fromName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_fromName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
             ::QHostInfo*sipRes;

            sipRes = new  ::QHostInfo( ::QHostInfo::fromName(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QHostInfo,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_fromName, doc_QHostInfo_fromName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_localHostName, "localHostName() -> str");

extern "C" {static PyObject *meth_QHostInfo_localHostName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_localHostName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QHostInfo::localHostName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_localHostName, doc_QHostInfo_localHostName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_localDomainName, "localDomainName() -> str");

extern "C" {static PyObject *meth_QHostInfo_localDomainName(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_localDomainName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::QString*sipRes;

            sipRes = new  ::QString( ::QHostInfo::localDomainName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_localDomainName, doc_QHostInfo_localDomainName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostInfo_swap, "swap(self, QHostInfo)");

extern "C" {static PyObject *meth_QHostInfo_swap(PyObject *, PyObject *);}
static PyObject *meth_QHostInfo_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHostInfo* a0;
         ::QHostInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHostInfo, &sipCpp, sipType_QHostInfo, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostInfo, sipName_swap, doc_QHostInfo_swap);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHostInfo(void *, int);}
static void release_QHostInfo(void *sipCppV, int)
{
    delete reinterpret_cast< ::QHostInfo *>(sipCppV);
}


extern "C" {static void assign_QHostInfo(void *, SIP_SSIZE_T, void *);}
static void assign_QHostInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QHostInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QHostInfo *>(sipSrc);
}


extern "C" {static void *array_QHostInfo(SIP_SSIZE_T);}
static void *array_QHostInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::QHostInfo[sipNrElem];
}


extern "C" {static void *copy_QHostInfo(const void *, SIP_SSIZE_T);}
static void *copy_QHostInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QHostInfo(reinterpret_cast<const  ::QHostInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHostInfo(sipSimpleWrapper *);}
static void dealloc_QHostInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHostInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QHostInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHostInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QHostInfo *sipCpp = SIP_NULLPTR;

    {
        int a0 = -1;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            sipCpp = new  ::QHostInfo(a0);

            return sipCpp;
        }
    }

    {
        const  ::QHostInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QHostInfo, &a0))
        {
            sipCpp = new  ::QHostInfo(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QHostInfo[] = {
    {SIP_MLNAME_CAST(sipName_abortHostLookup), meth_QHostInfo_abortHostLookup, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_abortHostLookup)},
    {SIP_MLNAME_CAST(sipName_addresses), meth_QHostInfo_addresses, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_addresses)},
    {SIP_MLNAME_CAST(sipName_error), meth_QHostInfo_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QHostInfo_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_errorString)},
    {SIP_MLNAME_CAST(sipName_fromName), meth_QHostInfo_fromName, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_fromName)},
    {SIP_MLNAME_CAST(sipName_hostName), meth_QHostInfo_hostName, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_hostName)},
    {SIP_MLNAME_CAST(sipName_localDomainName), meth_QHostInfo_localDomainName, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_localDomainName)},
    {SIP_MLNAME_CAST(sipName_localHostName), meth_QHostInfo_localHostName, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_localHostName)},
    {SIP_MLNAME_CAST(sipName_lookupHost), meth_QHostInfo_lookupHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_lookupHost)},
    {SIP_MLNAME_CAST(sipName_lookupId), meth_QHostInfo_lookupId, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_lookupId)},
    {SIP_MLNAME_CAST(sipName_setAddresses), meth_QHostInfo_setAddresses, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_setAddresses)},
    {SIP_MLNAME_CAST(sipName_setError), meth_QHostInfo_setError, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_setError)},
    {SIP_MLNAME_CAST(sipName_setErrorString), meth_QHostInfo_setErrorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_setErrorString)},
    {SIP_MLNAME_CAST(sipName_setHostName), meth_QHostInfo_setHostName, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_setHostName)},
    {SIP_MLNAME_CAST(sipName_setLookupId), meth_QHostInfo_setLookupId, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_setLookupId)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QHostInfo_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostInfo_swap)}
};

static sipEnumMemberDef enummembers_QHostInfo[] = {
    {sipName_HostNotFound, static_cast<int>( ::QHostInfo::HostNotFound), 26},
    {sipName_NoError, static_cast<int>( ::QHostInfo::NoError), 26},
    {sipName_UnknownError, static_cast<int>( ::QHostInfo::UnknownError), 26},
};

PyDoc_STRVAR(doc_QHostInfo, "\1QHostInfo(id: int = -1)\n"
"QHostInfo(QHostInfo)");


static pyqt5ClassPluginDef plugin_QHostInfo = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QHostInfo = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHostInfo,
        {SIP_NULLPTR},
        &plugin_QHostInfo
    },
    {
        sipNameNr_QHostInfo,
        {0, 0, 1},
        16, methods_QHostInfo,
        3, enummembers_QHostInfo,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHostInfo,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QHostInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHostInfo,
    assign_QHostInfo,
    array_QHostInfo,
    copy_QHostInfo,
    release_QHostInfo,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 20517 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"



extern "C" {static void assign_Q_IPV6ADDR(void *, SIP_SSIZE_T, void *);}
static void assign_Q_IPV6ADDR(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::Q_IPV6ADDR *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::Q_IPV6ADDR *>(sipSrc);
}


extern "C" {static void *array_Q_IPV6ADDR(SIP_SSIZE_T);}
static void *array_Q_IPV6ADDR(SIP_SSIZE_T sipNrElem)
{
    return new  ::Q_IPV6ADDR[sipNrElem];
}


extern "C" {static void *copy_Q_IPV6ADDR(const void *, SIP_SSIZE_T);}
static void *copy_Q_IPV6ADDR(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::Q_IPV6ADDR(reinterpret_cast<const  ::Q_IPV6ADDR *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_Q_IPV6ADDR(void *, int);}
static void release_Q_IPV6ADDR(void *ptr, int)
{
    delete reinterpret_cast< ::Q_IPV6ADDR *>(ptr);
}



extern "C" {static int convertTo_Q_IPV6ADDR(PyObject *, void **, int *, PyObject *);}
static int convertTo_Q_IPV6ADDR(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::Q_IPV6ADDR **sipCppPtr = reinterpret_cast< ::Q_IPV6ADDR **>(sipCppPtrV);

#line 176 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
        return (PySequence_Check(sipPy) && PySequence_Size(sipPy) == 16);

    Q_IPV6ADDR *qa = new Q_IPV6ADDR;
 
    for (Py_ssize_t i = 0; i < 16; ++i)
    {
        PyObject *itm = PySequence_GetItem(sipPy, i);

        if (!itm)
        {
            delete qa;
            *sipIsErr = 1;

            return 0;
        }

        (*qa)[i] = SIPLong_AsLong(itm);

        Py_DECREF(itm);
    }
 
    *sipCppPtr = qa;
 
    return sipGetState(sipTransferObj);
#line 20583 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


extern "C" {static PyObject *convertFrom_Q_IPV6ADDR(void *, PyObject *);}
static PyObject *convertFrom_Q_IPV6ADDR(void *sipCppV, PyObject *)
{
    ::Q_IPV6ADDR *sipCpp = reinterpret_cast< ::Q_IPV6ADDR *>(sipCppV);

#line 151 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
    // Create the tuple.
    PyObject *t;

    if ((t = PyTuple_New(16)) == NULL)
        return NULL;

    // Set the tuple elements.
    for (int i = 0; i < 16; ++i)
    {
        PyObject *pobj;

        if ((pobj = SIPLong_FromLong((*sipCpp)[i])) == NULL)
        {
            Py_DECREF(t);

            return NULL;
        }

        PyTuple_SetItem(t, i, pobj);
    }

    return t;
#line 20615 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


sipMappedTypeDef sipTypeDef_QtNetwork_Q_IPV6ADDR = {
    {
        -1,
        SIP_NULLPTR,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_Q_IPV6ADDR,     /* Q_IPV6ADDR */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_Q_IPV6ADDR,
    array_Q_IPV6ADDR,
    copy_Q_IPV6ADDR,
    release_Q_IPV6ADDR,
    convertTo_Q_IPV6ADDR,
    convertFrom_Q_IPV6ADDR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 20647 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 20651 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QHostAddress_ConversionMode___hash__(PyObject *);}
static long slot_QHostAddress_ConversionMode___hash__(PyObject *sipSelf)
{
     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QHostAddress::ConversionMode::Int();
#line 20669 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QHostAddress_ConversionMode___bool__(PyObject *);}
static int slot_QHostAddress_ConversionMode___bool__(PyObject *sipSelf)
{
     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QHostAddress::ConversionMode::Int() != 0);
#line 20694 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress::ConversionMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QHostAddress_ConversionMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QHostAddress::ConversionMode::Int() != a0->operator QHostAddress::ConversionMode::Int());
#line 20724 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QHostAddress::ConversionMode *>(a0),sipType_QHostAddress_ConversionMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QHostAddress_ConversionMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress::ConversionMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QHostAddress_ConversionMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QHostAddress::ConversionMode::Int() == a0->operator QHostAddress::ConversionMode::Int());
#line 20760 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QHostAddress::ConversionMode *>(a0),sipType_QHostAddress_ConversionMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QHostAddress_ConversionMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QHostAddress_ConversionMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QHostAddress::ConversionMode(*sipCpp ^ a0);
#line 20799 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___xor__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHostAddress::ConversionMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QHostAddress_ConversionMode, &a0, &a0State, &a1))
        {
             ::QHostAddress::ConversionMode*sipRes;

            sipRes = new  ::QHostAddress::ConversionMode((*a0 ^ a1));
            sipReleaseType(a0,sipType_QHostAddress_ConversionMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QHostAddress_ConversionMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___ior__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QHostAddress_ConversionMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QHostAddress::ConversionMode(*sipCpp | a0);
#line 20871 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___or__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHostAddress::ConversionMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QHostAddress_ConversionMode, &a0, &a0State, &a1))
        {
             ::QHostAddress::ConversionMode*sipRes;

            sipRes = new  ::QHostAddress::ConversionMode((*a0 | a1));
            sipReleaseType(a0,sipType_QHostAddress_ConversionMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QHostAddress_ConversionMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___iand__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QHostAddress_ConversionMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QHostAddress::ConversionMode::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___and__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHostAddress::ConversionMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QHostAddress_ConversionMode, &a0, &a0State, &a1))
        {
             ::QHostAddress::ConversionMode*sipRes;

            sipRes = new  ::QHostAddress::ConversionMode((*a0 & a1));
            sipReleaseType(a0,sipType_QHostAddress_ConversionMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QHostAddress_ConversionMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___invert__(PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___invert__(PyObject *sipSelf)
{
     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QHostAddress::ConversionMode*sipRes;

            sipRes = new  ::QHostAddress::ConversionMode(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QHostAddress_ConversionMode,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QHostAddress_ConversionMode___int__(PyObject *);}
static PyObject *slot_QHostAddress_ConversionMode___int__(PyObject *sipSelf)
{
     ::QHostAddress::ConversionMode *sipCpp = reinterpret_cast< ::QHostAddress::ConversionMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress_ConversionMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHostAddress_ConversionMode(void *, int);}
static void release_QHostAddress_ConversionMode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QHostAddress::ConversionMode *>(sipCppV);
}


extern "C" {static void assign_QHostAddress_ConversionMode(void *, SIP_SSIZE_T, void *);}
static void assign_QHostAddress_ConversionMode(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QHostAddress::ConversionMode *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QHostAddress::ConversionMode *>(sipSrc);
}


extern "C" {static void *array_QHostAddress_ConversionMode(SIP_SSIZE_T);}
static void *array_QHostAddress_ConversionMode(SIP_SSIZE_T sipNrElem)
{
    return new  ::QHostAddress::ConversionMode[sipNrElem];
}


extern "C" {static void *copy_QHostAddress_ConversionMode(const void *, SIP_SSIZE_T);}
static void *copy_QHostAddress_ConversionMode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QHostAddress::ConversionMode(reinterpret_cast<const  ::QHostAddress::ConversionMode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHostAddress_ConversionMode(sipSimpleWrapper *);}
static void dealloc_QHostAddress_ConversionMode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHostAddress_ConversionMode(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QHostAddress_ConversionMode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHostAddress_ConversionMode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QHostAddress::ConversionMode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QHostAddress::ConversionMode();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QHostAddress::ConversionMode(a0);

            return sipCpp;
        }
    }

    {
        const  ::QHostAddress::ConversionMode* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QHostAddress_ConversionMode, &a0, &a0State))
        {
            sipCpp = new  ::QHostAddress::ConversionMode(*a0);
            sipReleaseType(const_cast< ::QHostAddress::ConversionMode *>(a0),sipType_QHostAddress_ConversionMode,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QHostAddress_ConversionMode(PyObject *, void **, int *, PyObject *);}
static int convertTo_QHostAddress_ConversionMode(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QHostAddress::ConversionMode **sipCppPtr = reinterpret_cast< ::QHostAddress::ConversionMode **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QHostAddress::ConversionMode is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QHostAddress_ConversionModeFlag)) ||
            sipCanConvertToType(sipPy, sipType_QHostAddress_ConversionMode, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QHostAddress_ConversionModeFlag)))
{
    *sipCppPtr = new QHostAddress::ConversionMode(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QHostAddress::ConversionMode *>(sipConvertToType(sipPy, sipType_QHostAddress_ConversionMode, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 21139 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QHostAddress_ConversionMode[] = {
    {(void *)slot_QHostAddress_ConversionMode___hash__, hash_slot},
    {(void *)slot_QHostAddress_ConversionMode___bool__, bool_slot},
    {(void *)slot_QHostAddress_ConversionMode___ne__, ne_slot},
    {(void *)slot_QHostAddress_ConversionMode___eq__, eq_slot},
    {(void *)slot_QHostAddress_ConversionMode___ixor__, ixor_slot},
    {(void *)slot_QHostAddress_ConversionMode___xor__, xor_slot},
    {(void *)slot_QHostAddress_ConversionMode___ior__, ior_slot},
    {(void *)slot_QHostAddress_ConversionMode___or__, or_slot},
    {(void *)slot_QHostAddress_ConversionMode___iand__, iand_slot},
    {(void *)slot_QHostAddress_ConversionMode___and__, and_slot},
    {(void *)slot_QHostAddress_ConversionMode___invert__, invert_slot},
    {(void *)slot_QHostAddress_ConversionMode___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QHostAddress_ConversionMode, "\1QHostAddress.ConversionMode()\n"
"QHostAddress.ConversionMode(Union[QHostAddress.ConversionMode, QHostAddress.ConversionModeFlag])\n"
"QHostAddress.ConversionMode(QHostAddress.ConversionMode)");


static pyqt5ClassPluginDef plugin_QHostAddress_ConversionMode = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QHostAddress_ConversionMode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHostAddress__ConversionMode,
        {SIP_NULLPTR},
        &plugin_QHostAddress_ConversionMode
    },
    {
        sipNameNr_ConversionMode,
        {21, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHostAddress_ConversionMode,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QHostAddress_ConversionMode,
    init_type_QHostAddress_ConversionMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHostAddress_ConversionMode,
    assign_QHostAddress_ConversionMode,
    array_QHostAddress_ConversionMode,
    copy_QHostAddress_ConversionMode,
    release_QHostAddress_ConversionMode,
    SIP_NULLPTR,
    convertTo_QHostAddress_ConversionMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 21227 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 21231 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 147 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 21234 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 21237 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 143 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 21240 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 21243 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QHostAddress_setAddress, "setAddress(self, QHostAddress.SpecialAddress)\n"
"setAddress(self, int)\n"
"setAddress(self, str) -> bool\n"
"setAddress(self, Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int])");

extern "C" {static PyObject *meth_QHostAddress_setAddress(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_setAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHostAddress::SpecialAddress a0;
         ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXE", &sipSelf, sipType_QHostAddress, &sipCpp, sipType_QHostAddress_SpecialAddress, &a0))
        {
            sipCpp->setAddress(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::quint32 a0;
         ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QHostAddress, &sipCpp, &a0))
        {
            sipCpp->setAddress(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostAddress, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->setAddress(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::Q_IPV6ADDR* a0;
        int a0State = 0;
         ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostAddress, &sipCpp, sipType_Q_IPV6ADDR,&a0, &a0State))
        {
            sipCpp->setAddress(*a0);
            sipReleaseType(const_cast< ::Q_IPV6ADDR *>(a0),sipType_Q_IPV6ADDR,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_setAddress, doc_QHostAddress_setAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_protocol, "protocol(self) -> QAbstractSocket.NetworkLayerProtocol");

extern "C" {static PyObject *meth_QHostAddress_protocol(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_protocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
             ::QAbstractSocket::NetworkLayerProtocol sipRes;

            sipRes = sipCpp->protocol();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractSocket_NetworkLayerProtocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_protocol, doc_QHostAddress_protocol);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_toIPv4Address, "toIPv4Address(self) -> int");

extern "C" {static PyObject *meth_QHostAddress_toIPv4Address(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_toIPv4Address(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->toIPv4Address();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_toIPv4Address, doc_QHostAddress_toIPv4Address);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_toIPv6Address, "toIPv6Address(self) -> Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]");

extern "C" {static PyObject *meth_QHostAddress_toIPv6Address(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_toIPv6Address(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
             ::Q_IPV6ADDR*sipRes;

            sipRes = new  ::Q_IPV6ADDR(sipCpp->toIPv6Address());

            return sipConvertFromNewType(sipRes,sipType_Q_IPV6ADDR,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_toIPv6Address, doc_QHostAddress_toIPv6Address);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QHostAddress_toString(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->toString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_toString, doc_QHostAddress_toString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_scopeId, "scopeId(self) -> str");

extern "C" {static PyObject *meth_QHostAddress_scopeId(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_scopeId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->scopeId());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_scopeId, doc_QHostAddress_scopeId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_setScopeId, "setScopeId(self, str)");

extern "C" {static PyObject *meth_QHostAddress_setScopeId(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_setScopeId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostAddress, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setScopeId(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_setScopeId, doc_QHostAddress_setScopeId);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isNull(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isNull, doc_QHostAddress_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_clear, "clear(self)");

extern "C" {static PyObject *meth_QHostAddress_clear(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_clear, doc_QHostAddress_clear);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isInSubnet, "isInSubnet(self, Union[QHostAddress, QHostAddress.SpecialAddress], int) -> bool\n"
"isInSubnet(self, Tuple[Union[QHostAddress, QHostAddress.SpecialAddress], int]) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isInSubnet(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isInSubnet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
        int a1;
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QHostAddress, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isInSubnet(*a0,a1);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QPair< ::QHostAddress,int>* a0;
        int a0State = 0;
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHostAddress, &sipCpp, sipType_QPair_0100QHostAddress_1800,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isInSubnet(*a0);
            sipReleaseType(const_cast<QPair< ::QHostAddress,int> *>(a0),sipType_QPair_0100QHostAddress_1800,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isInSubnet, doc_QHostAddress_isInSubnet);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isLoopback, "isLoopback(self) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isLoopback(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isLoopback(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLoopback();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isLoopback, doc_QHostAddress_isLoopback);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_parseSubnet, "parseSubnet(str) -> Tuple[QHostAddress, int]");

extern "C" {static PyObject *meth_QHostAddress_parseSubnet(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_parseSubnet(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QPair< ::QHostAddress,int>*sipRes;

            sipRes = new QPair< ::QHostAddress,int>( ::QHostAddress::parseSubnet(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPair_0100QHostAddress_1800,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_parseSubnet, doc_QHostAddress_parseSubnet);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_swap, "swap(self, QHostAddress)");

extern "C" {static PyObject *meth_QHostAddress_swap(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QHostAddress* a0;
         ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHostAddress, &sipCpp, sipType_QHostAddress, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_swap, doc_QHostAddress_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isMulticast, "isMulticast(self) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isMulticast(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isMulticast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMulticast();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isMulticast, doc_QHostAddress_isMulticast);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isEqual, "isEqual(self, Union[QHostAddress, QHostAddress.SpecialAddress], mode: Union[QHostAddress.ConversionMode, QHostAddress.ConversionModeFlag] = QHostAddress.TolerantConversion) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isEqual(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isEqual(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::QHostAddress::ConversionMode a1def = QHostAddress::TolerantConversion;
         ::QHostAddress::ConversionMode* a1 = &a1def;
        int a1State = 0;
        const  ::QHostAddress *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_QHostAddress, &sipCpp, sipType_QHostAddress, &a0, &a0State, sipType_QHostAddress_ConversionMode, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->isEqual(*a0,*a1);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);
            sipReleaseType(a1,sipType_QHostAddress_ConversionMode,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isEqual, doc_QHostAddress_isEqual);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isGlobal, "isGlobal(self) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isGlobal(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isGlobal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isGlobal, doc_QHostAddress_isGlobal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isLinkLocal, "isLinkLocal(self) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isLinkLocal(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isLinkLocal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLinkLocal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isLinkLocal, doc_QHostAddress_isLinkLocal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isSiteLocal, "isSiteLocal(self) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isSiteLocal(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isSiteLocal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSiteLocal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isSiteLocal, doc_QHostAddress_isSiteLocal);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isUniqueLocalUnicast, "isUniqueLocalUnicast(self) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isUniqueLocalUnicast(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isUniqueLocalUnicast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUniqueLocalUnicast();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isUniqueLocalUnicast, doc_QHostAddress_isUniqueLocalUnicast);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QHostAddress_isBroadcast, "isBroadcast(self) -> bool");

extern "C" {static PyObject *meth_QHostAddress_isBroadcast(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isBroadcast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHostAddress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBroadcast();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHostAddress, sipName_isBroadcast, doc_QHostAddress_isBroadcast);

    return SIP_NULLPTR;
}


extern "C" {static long slot_QHostAddress___hash__(PyObject *);}
static long slot_QHostAddress___hash__(PyObject *sipSelf)
{
     ::QHostAddress *sipCpp = reinterpret_cast< ::QHostAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 88 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
        sipRes = qHash(*sipCpp);
#line 21908 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QHostAddress___ne__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHostAddress *sipCpp = reinterpret_cast< ::QHostAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QHostAddress, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QHostAddress::operator!=(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QHostAddress::SpecialAddress a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1E", sipType_QHostAddress_SpecialAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QHostAddress::operator!=(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QHostAddress, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QHostAddress___eq__(PyObject *,PyObject *);}
static PyObject *slot_QHostAddress___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QHostAddress *sipCpp = reinterpret_cast< ::QHostAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QHostAddress, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QHostAddress::operator==(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QHostAddress::SpecialAddress a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1E", sipType_QHostAddress_SpecialAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QHostAddress::operator==(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QHostAddress, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QHostAddress(void *, int);}
static void release_QHostAddress(void *sipCppV, int)
{
    delete reinterpret_cast< ::QHostAddress *>(sipCppV);
}


extern "C" {static void assign_QHostAddress(void *, SIP_SSIZE_T, void *);}
static void assign_QHostAddress(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QHostAddress *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QHostAddress *>(sipSrc);
}


extern "C" {static void *array_QHostAddress(SIP_SSIZE_T);}
static void *array_QHostAddress(SIP_SSIZE_T sipNrElem)
{
    return new  ::QHostAddress[sipNrElem];
}


extern "C" {static void *copy_QHostAddress(const void *, SIP_SSIZE_T);}
static void *copy_QHostAddress(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QHostAddress(reinterpret_cast<const  ::QHostAddress *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHostAddress(sipSimpleWrapper *);}
static void dealloc_QHostAddress(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHostAddress(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QHostAddress(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHostAddress(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QHostAddress *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QHostAddress();

            return sipCpp;
        }
    }

    {
         ::QHostAddress::SpecialAddress a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "XE", sipType_QHostAddress_SpecialAddress, &a0))
        {
            sipCpp = new  ::QHostAddress(a0);

            return sipCpp;
        }
    }

    {
         ::quint32 a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "u", &a0))
        {
            sipCpp = new  ::QHostAddress(a0);

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new  ::QHostAddress(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const  ::Q_IPV6ADDR* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_Q_IPV6ADDR,&a0, &a0State))
        {
            sipCpp = new  ::QHostAddress(*a0);
            sipReleaseType(const_cast< ::Q_IPV6ADDR *>(a0),sipType_Q_IPV6ADDR,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QHostAddress* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp = new  ::QHostAddress(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QHostAddress(PyObject *, void **, int *, PyObject *);}
static int convertTo_QHostAddress(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QHostAddress **sipCppPtr = reinterpret_cast< ::QHostAddress **>(sipCppPtrV);

#line 30 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// QHostAddress::SpecialAddress to be used whenever a QHostAddress is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QHostAddress_SpecialAddress)) ||
            sipCanConvertToType(sipPy, sipType_QHostAddress, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QHostAddress_SpecialAddress)))
{
    *sipCppPtr = new QHostAddress((QHostAddress::SpecialAddress)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QHostAddress *>(sipConvertToType(sipPy, sipType_QHostAddress, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 22153 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QHostAddress[] = {
    {(void *)slot_QHostAddress___hash__, hash_slot},
    {(void *)slot_QHostAddress___ne__, ne_slot},
    {(void *)slot_QHostAddress___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QHostAddress[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QHostAddress_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_clear)},
    {SIP_MLNAME_CAST(sipName_isBroadcast), meth_QHostAddress_isBroadcast, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isBroadcast)},
    {SIP_MLNAME_CAST(sipName_isEqual), SIP_MLMETH_CAST(meth_QHostAddress_isEqual), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHostAddress_isEqual)},
    {SIP_MLNAME_CAST(sipName_isGlobal), meth_QHostAddress_isGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isGlobal)},
    {SIP_MLNAME_CAST(sipName_isInSubnet), meth_QHostAddress_isInSubnet, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isInSubnet)},
    {SIP_MLNAME_CAST(sipName_isLinkLocal), meth_QHostAddress_isLinkLocal, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isLinkLocal)},
    {SIP_MLNAME_CAST(sipName_isLoopback), meth_QHostAddress_isLoopback, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isLoopback)},
    {SIP_MLNAME_CAST(sipName_isMulticast), meth_QHostAddress_isMulticast, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isMulticast)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QHostAddress_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isNull)},
    {SIP_MLNAME_CAST(sipName_isSiteLocal), meth_QHostAddress_isSiteLocal, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isSiteLocal)},
    {SIP_MLNAME_CAST(sipName_isUniqueLocalUnicast), meth_QHostAddress_isUniqueLocalUnicast, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_isUniqueLocalUnicast)},
    {SIP_MLNAME_CAST(sipName_parseSubnet), meth_QHostAddress_parseSubnet, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_parseSubnet)},
    {SIP_MLNAME_CAST(sipName_protocol), meth_QHostAddress_protocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_protocol)},
    {SIP_MLNAME_CAST(sipName_scopeId), meth_QHostAddress_scopeId, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_scopeId)},
    {SIP_MLNAME_CAST(sipName_setAddress), meth_QHostAddress_setAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_setAddress)},
    {SIP_MLNAME_CAST(sipName_setScopeId), meth_QHostAddress_setScopeId, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_setScopeId)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QHostAddress_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_swap)},
    {SIP_MLNAME_CAST(sipName_toIPv4Address), meth_QHostAddress_toIPv4Address, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_toIPv4Address)},
    {SIP_MLNAME_CAST(sipName_toIPv6Address), meth_QHostAddress_toIPv6Address, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_toIPv6Address)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QHostAddress_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QHostAddress_toString)}
};

static sipEnumMemberDef enummembers_QHostAddress[] = {
    {sipName_Any, static_cast<int>( ::QHostAddress::Any), 24},
    {sipName_AnyIPv4, static_cast<int>( ::QHostAddress::AnyIPv4), 24},
    {sipName_AnyIPv6, static_cast<int>( ::QHostAddress::AnyIPv6), 24},
    {sipName_Broadcast, static_cast<int>( ::QHostAddress::Broadcast), 24},
    {sipName_ConvertLocalHost, static_cast<int>( ::QHostAddress::ConvertLocalHost), 23},
    {sipName_ConvertUnspecifiedAddress, static_cast<int>( ::QHostAddress::ConvertUnspecifiedAddress), 23},
    {sipName_ConvertV4CompatToIPv4, static_cast<int>( ::QHostAddress::ConvertV4CompatToIPv4), 23},
    {sipName_ConvertV4MappedToIPv4, static_cast<int>( ::QHostAddress::ConvertV4MappedToIPv4), 23},
    {sipName_LocalHost, static_cast<int>( ::QHostAddress::LocalHost), 24},
    {sipName_LocalHostIPv6, static_cast<int>( ::QHostAddress::LocalHostIPv6), 24},
    {sipName_Null, static_cast<int>( ::QHostAddress::Null), 24},
    {sipName_StrictConversion, static_cast<int>( ::QHostAddress::StrictConversion), 23},
    {sipName_TolerantConversion, static_cast<int>( ::QHostAddress::TolerantConversion), 23},
};

PyDoc_STRVAR(doc_QHostAddress, "\1QHostAddress()\n"
"QHostAddress(QHostAddress.SpecialAddress)\n"
"QHostAddress(int)\n"
"QHostAddress(str)\n"
"QHostAddress(Tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int])\n"
"QHostAddress(Union[QHostAddress, QHostAddress.SpecialAddress])");


static pyqt5ClassPluginDef plugin_QHostAddress = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QHostAddress = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QHostAddress,
        {SIP_NULLPTR},
        &plugin_QHostAddress
    },
    {
        sipNameNr_QHostAddress,
        {0, 0, 1},
        20, methods_QHostAddress,
        13, enummembers_QHostAddress,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QHostAddress,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QHostAddress,
    init_type_QHostAddress,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QHostAddress,
    assign_QHostAddress,
    array_QHostAddress,
    copy_QHostAddress,
    release_QHostAddress,
    SIP_NULLPTR,
    convertTo_QHostAddress,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 110 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 22278 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 22282 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 22285 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 22288 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22291 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 94 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 22294 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22297 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 75 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 22300 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22303 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 22306 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22309 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 22312 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 22318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 22321 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22324 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22327 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 22330 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 22333 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22336 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 22339 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 22342 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 22345 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 22348 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 22351 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 22354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 22357 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 22360 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQDnsLookup : public  ::QDnsLookup
{
public:
    sipQDnsLookup( ::QObject*);
    sipQDnsLookup( ::QDnsLookup::Type,const  ::QString&, ::QObject*);
    sipQDnsLookup( ::QDnsLookup::Type,const  ::QString&,const  ::QHostAddress&, ::QObject*);
    virtual ~sipQDnsLookup();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDnsLookup(const sipQDnsLookup &);
    sipQDnsLookup &operator = (const sipQDnsLookup &);

    char sipPyMethods[7];
};

sipQDnsLookup::sipQDnsLookup( ::QObject*a0):  ::QDnsLookup(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDnsLookup::sipQDnsLookup( ::QDnsLookup::Type a0,const  ::QString& a1, ::QObject*a2):  ::QDnsLookup(a0,a1,a2), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDnsLookup::sipQDnsLookup( ::QDnsLookup::Type a0,const  ::QString& a1,const  ::QHostAddress& a2, ::QObject*a3):  ::QDnsLookup(a0,a1,a2,a3), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDnsLookup::~sipQDnsLookup()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQDnsLookup::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QDnsLookup);

    return  ::QDnsLookup::metaObject();
}

int sipQDnsLookup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDnsLookup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QDnsLookup,_c,_id,_a);

    return _id;
}

void *sipQDnsLookup::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QDnsLookup, _clname, &sipCpp) ? sipCpp :  ::QDnsLookup::qt_metacast(_clname));
}

bool sipQDnsLookup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QDnsLookup::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQDnsLookup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QDnsLookup::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQDnsLookup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QDnsLookup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDnsLookup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QDnsLookup::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDnsLookup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QDnsLookup::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDnsLookup::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QDnsLookup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQDnsLookup::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QDnsLookup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDnsLookup_error, "error(self) -> QDnsLookup.Error");

extern "C" {static PyObject *meth_QDnsLookup_error(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
             ::QDnsLookup::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDnsLookup_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_error, doc_QDnsLookup_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QDnsLookup_errorString(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_errorString, doc_QDnsLookup_errorString);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_isFinished, "isFinished(self) -> bool");

extern "C" {static PyObject *meth_QDnsLookup_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFinished();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_isFinished, doc_QDnsLookup_isFinished);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_name, "name(self) -> str");

extern "C" {static PyObject *meth_QDnsLookup_name(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_name, doc_QDnsLookup_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_setName, "setName(self, str)");

extern "C" {static PyObject *meth_QDnsLookup_setName(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDnsLookup, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_setName, doc_QDnsLookup_setName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_type, "type(self) -> QDnsLookup.Type");

extern "C" {static PyObject *meth_QDnsLookup_type(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
             ::QDnsLookup::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QDnsLookup_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_type, doc_QDnsLookup_type);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_setType, "setType(self, QDnsLookup.Type)");

extern "C" {static PyObject *meth_QDnsLookup_setType(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_setType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDnsLookup::Type a0;
         ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDnsLookup, &sipCpp, sipType_QDnsLookup_Type, &a0))
        {
            sipCpp->setType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_setType, doc_QDnsLookup_setType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_canonicalNameRecords, "canonicalNameRecords(self) -> List[QDnsDomainNameRecord]");

extern "C" {static PyObject *meth_QDnsLookup_canonicalNameRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_canonicalNameRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList< ::QDnsDomainNameRecord>*sipRes;

            sipRes = new QList< ::QDnsDomainNameRecord>(sipCpp->canonicalNameRecords());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsDomainNameRecord,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_canonicalNameRecords, doc_QDnsLookup_canonicalNameRecords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_hostAddressRecords, "hostAddressRecords(self) -> List[QDnsHostAddressRecord]");

extern "C" {static PyObject *meth_QDnsLookup_hostAddressRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_hostAddressRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList< ::QDnsHostAddressRecord>*sipRes;

            sipRes = new QList< ::QDnsHostAddressRecord>(sipCpp->hostAddressRecords());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsHostAddressRecord,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_hostAddressRecords, doc_QDnsLookup_hostAddressRecords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_mailExchangeRecords, "mailExchangeRecords(self) -> List[QDnsMailExchangeRecord]");

extern "C" {static PyObject *meth_QDnsLookup_mailExchangeRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_mailExchangeRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList< ::QDnsMailExchangeRecord>*sipRes;

            sipRes = new QList< ::QDnsMailExchangeRecord>(sipCpp->mailExchangeRecords());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsMailExchangeRecord,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_mailExchangeRecords, doc_QDnsLookup_mailExchangeRecords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_nameServerRecords, "nameServerRecords(self) -> List[QDnsDomainNameRecord]");

extern "C" {static PyObject *meth_QDnsLookup_nameServerRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_nameServerRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList< ::QDnsDomainNameRecord>*sipRes;

            sipRes = new QList< ::QDnsDomainNameRecord>(sipCpp->nameServerRecords());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsDomainNameRecord,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_nameServerRecords, doc_QDnsLookup_nameServerRecords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_pointerRecords, "pointerRecords(self) -> List[QDnsDomainNameRecord]");

extern "C" {static PyObject *meth_QDnsLookup_pointerRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_pointerRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList< ::QDnsDomainNameRecord>*sipRes;

            sipRes = new QList< ::QDnsDomainNameRecord>(sipCpp->pointerRecords());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsDomainNameRecord,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_pointerRecords, doc_QDnsLookup_pointerRecords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_serviceRecords, "serviceRecords(self) -> List[QDnsServiceRecord]");

extern "C" {static PyObject *meth_QDnsLookup_serviceRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_serviceRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList< ::QDnsServiceRecord>*sipRes;

            sipRes = new QList< ::QDnsServiceRecord>(sipCpp->serviceRecords());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsServiceRecord,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_serviceRecords, doc_QDnsLookup_serviceRecords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_textRecords, "textRecords(self) -> List[QDnsTextRecord]");

extern "C" {static PyObject *meth_QDnsLookup_textRecords(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_textRecords(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            QList< ::QDnsTextRecord>*sipRes;

            sipRes = new QList< ::QDnsTextRecord>(sipCpp->textRecords());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDnsTextRecord,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_textRecords, doc_QDnsLookup_textRecords);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_abort, "abort(self)");

extern "C" {static PyObject *meth_QDnsLookup_abort(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_abort, doc_QDnsLookup_abort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_lookup, "lookup(self)");

extern "C" {static PyObject *meth_QDnsLookup_lookup(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_lookup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lookup();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_lookup, doc_QDnsLookup_lookup);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_nameserver, "nameserver(self) -> QHostAddress");

extern "C" {static PyObject *meth_QDnsLookup_nameserver(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_nameserver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsLookup, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->nameserver());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_nameserver, doc_QDnsLookup_nameserver);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsLookup_setNameserver, "setNameserver(self, Union[QHostAddress, QHostAddress.SpecialAddress])");

extern "C" {static PyObject *meth_QDnsLookup_setNameserver(PyObject *, PyObject *);}
static PyObject *meth_QDnsLookup_setNameserver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::QDnsLookup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDnsLookup, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->setNameserver(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsLookup, sipName_setNameserver, doc_QDnsLookup_setNameserver);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDnsLookup(void *, const sipTypeDef *);}
static void *cast_QDnsLookup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDnsLookup *sipCpp = reinterpret_cast< ::QDnsLookup *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDnsLookup(void *, int);}
static void release_QDnsLookup(void *sipCppV, int)
{
     ::QDnsLookup *sipCpp = reinterpret_cast< ::QDnsLookup *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QDnsLookup(sipSimpleWrapper *);}
static void dealloc_QDnsLookup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDnsLookup *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDnsLookup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDnsLookup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDnsLookup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDnsLookup *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQDnsLookup(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QDnsLookup::Type a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1|JH", sipType_QDnsLookup_Type, &a0, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQDnsLookup(a0,*a1,a2);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QDnsLookup::Type a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QHostAddress* a2;
        int a2State = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1J1|JH", sipType_QDnsLookup_Type, &a0, sipType_QString,&a1, &a1State, sipType_QHostAddress, &a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQDnsLookup(a0,*a1,*a2,a3);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QHostAddress *>(a2),sipType_QHostAddress,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDnsLookup[] = {{12, 0, 1}};


static PyMethodDef methods_QDnsLookup[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QDnsLookup_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_abort)},
    {SIP_MLNAME_CAST(sipName_canonicalNameRecords), meth_QDnsLookup_canonicalNameRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_canonicalNameRecords)},
    {SIP_MLNAME_CAST(sipName_error), meth_QDnsLookup_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QDnsLookup_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_errorString)},
    {SIP_MLNAME_CAST(sipName_hostAddressRecords), meth_QDnsLookup_hostAddressRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_hostAddressRecords)},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QDnsLookup_isFinished, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_isFinished)},
    {SIP_MLNAME_CAST(sipName_lookup), meth_QDnsLookup_lookup, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_lookup)},
    {SIP_MLNAME_CAST(sipName_mailExchangeRecords), meth_QDnsLookup_mailExchangeRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_mailExchangeRecords)},
    {SIP_MLNAME_CAST(sipName_name), meth_QDnsLookup_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_name)},
    {SIP_MLNAME_CAST(sipName_nameServerRecords), meth_QDnsLookup_nameServerRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_nameServerRecords)},
    {SIP_MLNAME_CAST(sipName_nameserver), meth_QDnsLookup_nameserver, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_nameserver)},
    {SIP_MLNAME_CAST(sipName_pointerRecords), meth_QDnsLookup_pointerRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_pointerRecords)},
    {SIP_MLNAME_CAST(sipName_serviceRecords), meth_QDnsLookup_serviceRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_serviceRecords)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QDnsLookup_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_setName)},
    {SIP_MLNAME_CAST(sipName_setNameserver), meth_QDnsLookup_setNameserver, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_setNameserver)},
    {SIP_MLNAME_CAST(sipName_setType), meth_QDnsLookup_setType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_setType)},
    {SIP_MLNAME_CAST(sipName_textRecords), meth_QDnsLookup_textRecords, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_textRecords)},
    {SIP_MLNAME_CAST(sipName_type), meth_QDnsLookup_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsLookup_type)}
};

static sipEnumMemberDef enummembers_QDnsLookup[] = {
    {sipName_A, static_cast<int>( ::QDnsLookup::A), 16},
    {sipName_AAAA, static_cast<int>( ::QDnsLookup::AAAA), 16},
    {sipName_ANY, static_cast<int>( ::QDnsLookup::ANY), 16},
    {sipName_CNAME, static_cast<int>( ::QDnsLookup::CNAME), 16},
    {sipName_InvalidReplyError, static_cast<int>( ::QDnsLookup::InvalidReplyError), 15},
    {sipName_InvalidRequestError, static_cast<int>( ::QDnsLookup::InvalidRequestError), 15},
    {sipName_MX, static_cast<int>( ::QDnsLookup::MX), 16},
    {sipName_NS, static_cast<int>( ::QDnsLookup::NS), 16},
    {sipName_NoError, static_cast<int>( ::QDnsLookup::NoError), 15},
    {sipName_NotFoundError, static_cast<int>( ::QDnsLookup::NotFoundError), 15},
    {sipName_OperationCancelledError, static_cast<int>( ::QDnsLookup::OperationCancelledError), 15},
    {sipName_PTR, static_cast<int>( ::QDnsLookup::PTR), 16},
    {sipName_ResolverError, static_cast<int>( ::QDnsLookup::ResolverError), 15},
    {sipName_SRV, static_cast<int>( ::QDnsLookup::SRV), 16},
    {sipName_ServerFailureError, static_cast<int>( ::QDnsLookup::ServerFailureError), 15},
    {sipName_ServerRefusedError, static_cast<int>( ::QDnsLookup::ServerRefusedError), 15},
    {sipName_TXT, static_cast<int>( ::QDnsLookup::TXT), 16},
};

PyDoc_STRVAR(doc_QDnsLookup, "\1QDnsLookup(parent: QObject = None)\n"
"QDnsLookup(QDnsLookup.Type, str, parent: QObject = None)\n"
"QDnsLookup(QDnsLookup.Type, str, Union[QHostAddress, QHostAddress.SpecialAddress], parent: QObject = None)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QDnsLookup[] = {
    {"nameserverChanged(QHostAddress)", "\1nameserverChanged(self, Union[QHostAddress, QHostAddress.SpecialAddress])", SIP_NULLPTR, SIP_NULLPTR},
    {"typeChanged(Type)|(QDnsLookup::Type)", "\1typeChanged(self, QDnsLookup.Type)", SIP_NULLPTR, SIP_NULLPTR},
    {"nameChanged(QString)", "\1nameChanged(self, str)", SIP_NULLPTR, SIP_NULLPTR},
    {"finished()", "\1finished(self)", SIP_NULLPTR, SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QDnsLookup = {
    & ::QDnsLookup::staticMetaObject,
    0,
    signals_QDnsLookup,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QDnsLookup = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDnsLookup,
        {SIP_NULLPTR},
        &plugin_QDnsLookup
    },
    {
        sipNameNr_QDnsLookup,
        {0, 0, 1},
        18, methods_QDnsLookup,
        17, enummembers_QDnsLookup,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDnsLookup,
    -1,
    -1,
    supers_QDnsLookup,
    SIP_NULLPTR,
    init_type_QDnsLookup,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDnsLookup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QDnsLookup,
    cast_QDnsLookup,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 94 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 23311 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 23315 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 23318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 23321 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QDnsTextRecord_swap, "swap(self, QDnsTextRecord)");

extern "C" {static PyObject *meth_QDnsTextRecord_swap(PyObject *, PyObject *);}
static PyObject *meth_QDnsTextRecord_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDnsTextRecord* a0;
         ::QDnsTextRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDnsTextRecord, &sipCpp, sipType_QDnsTextRecord, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsTextRecord, sipName_swap, doc_QDnsTextRecord_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsTextRecord_name, "name(self) -> str");

extern "C" {static PyObject *meth_QDnsTextRecord_name(PyObject *, PyObject *);}
static PyObject *meth_QDnsTextRecord_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsTextRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsTextRecord, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsTextRecord, sipName_name, doc_QDnsTextRecord_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsTextRecord_timeToLive, "timeToLive(self) -> int");

extern "C" {static PyObject *meth_QDnsTextRecord_timeToLive(PyObject *, PyObject *);}
static PyObject *meth_QDnsTextRecord_timeToLive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsTextRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsTextRecord, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->timeToLive();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsTextRecord, sipName_timeToLive, doc_QDnsTextRecord_timeToLive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsTextRecord_values, "values(self) -> List[QByteArray]");

extern "C" {static PyObject *meth_QDnsTextRecord_values(PyObject *, PyObject *);}
static PyObject *meth_QDnsTextRecord_values(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsTextRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsTextRecord, &sipCpp))
        {
            QList< ::QByteArray>*sipRes;

            sipRes = new QList< ::QByteArray>(sipCpp->values());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsTextRecord, sipName_values, doc_QDnsTextRecord_values);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDnsTextRecord(void *, int);}
static void release_QDnsTextRecord(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDnsTextRecord *>(sipCppV);
}


extern "C" {static void assign_QDnsTextRecord(void *, SIP_SSIZE_T, void *);}
static void assign_QDnsTextRecord(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDnsTextRecord *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDnsTextRecord *>(sipSrc);
}


extern "C" {static void *array_QDnsTextRecord(SIP_SSIZE_T);}
static void *array_QDnsTextRecord(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDnsTextRecord[sipNrElem];
}


extern "C" {static void *copy_QDnsTextRecord(const void *, SIP_SSIZE_T);}
static void *copy_QDnsTextRecord(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDnsTextRecord(reinterpret_cast<const  ::QDnsTextRecord *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDnsTextRecord(sipSimpleWrapper *);}
static void dealloc_QDnsTextRecord(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDnsTextRecord(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDnsTextRecord(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDnsTextRecord(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDnsTextRecord *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDnsTextRecord();

            return sipCpp;
        }
    }

    {
        const  ::QDnsTextRecord* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDnsTextRecord, &a0))
        {
            sipCpp = new  ::QDnsTextRecord(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QDnsTextRecord[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QDnsTextRecord_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsTextRecord_name)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDnsTextRecord_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsTextRecord_swap)},
    {SIP_MLNAME_CAST(sipName_timeToLive), meth_QDnsTextRecord_timeToLive, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsTextRecord_timeToLive)},
    {SIP_MLNAME_CAST(sipName_values), meth_QDnsTextRecord_values, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsTextRecord_values)}
};

PyDoc_STRVAR(doc_QDnsTextRecord, "\1QDnsTextRecord()\n"
"QDnsTextRecord(QDnsTextRecord)");


static pyqt5ClassPluginDef plugin_QDnsTextRecord = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QDnsTextRecord = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDnsTextRecord,
        {SIP_NULLPTR},
        &plugin_QDnsTextRecord
    },
    {
        sipNameNr_QDnsTextRecord,
        {0, 0, 1},
        4, methods_QDnsTextRecord,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDnsTextRecord,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QDnsTextRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDnsTextRecord,
    assign_QDnsTextRecord,
    array_QDnsTextRecord,
    copy_QDnsTextRecord,
    release_QDnsTextRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 75 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 23576 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 23580 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QDnsServiceRecord_swap, "swap(self, QDnsServiceRecord)");

extern "C" {static PyObject *meth_QDnsServiceRecord_swap(PyObject *, PyObject *);}
static PyObject *meth_QDnsServiceRecord_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDnsServiceRecord* a0;
         ::QDnsServiceRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDnsServiceRecord, &sipCpp, sipType_QDnsServiceRecord, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsServiceRecord, sipName_swap, doc_QDnsServiceRecord_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsServiceRecord_name, "name(self) -> str");

extern "C" {static PyObject *meth_QDnsServiceRecord_name(PyObject *, PyObject *);}
static PyObject *meth_QDnsServiceRecord_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsServiceRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsServiceRecord, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsServiceRecord, sipName_name, doc_QDnsServiceRecord_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsServiceRecord_port, "port(self) -> int");

extern "C" {static PyObject *meth_QDnsServiceRecord_port(PyObject *, PyObject *);}
static PyObject *meth_QDnsServiceRecord_port(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsServiceRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsServiceRecord, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->port();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsServiceRecord, sipName_port, doc_QDnsServiceRecord_port);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsServiceRecord_priority, "priority(self) -> int");

extern "C" {static PyObject *meth_QDnsServiceRecord_priority(PyObject *, PyObject *);}
static PyObject *meth_QDnsServiceRecord_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsServiceRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsServiceRecord, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->priority();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsServiceRecord, sipName_priority, doc_QDnsServiceRecord_priority);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsServiceRecord_target, "target(self) -> str");

extern "C" {static PyObject *meth_QDnsServiceRecord_target(PyObject *, PyObject *);}
static PyObject *meth_QDnsServiceRecord_target(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsServiceRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsServiceRecord, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->target());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsServiceRecord, sipName_target, doc_QDnsServiceRecord_target);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsServiceRecord_timeToLive, "timeToLive(self) -> int");

extern "C" {static PyObject *meth_QDnsServiceRecord_timeToLive(PyObject *, PyObject *);}
static PyObject *meth_QDnsServiceRecord_timeToLive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsServiceRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsServiceRecord, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->timeToLive();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsServiceRecord, sipName_timeToLive, doc_QDnsServiceRecord_timeToLive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsServiceRecord_weight, "weight(self) -> int");

extern "C" {static PyObject *meth_QDnsServiceRecord_weight(PyObject *, PyObject *);}
static PyObject *meth_QDnsServiceRecord_weight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsServiceRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsServiceRecord, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->weight();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsServiceRecord, sipName_weight, doc_QDnsServiceRecord_weight);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDnsServiceRecord(void *, int);}
static void release_QDnsServiceRecord(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDnsServiceRecord *>(sipCppV);
}


extern "C" {static void assign_QDnsServiceRecord(void *, SIP_SSIZE_T, void *);}
static void assign_QDnsServiceRecord(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDnsServiceRecord *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDnsServiceRecord *>(sipSrc);
}


extern "C" {static void *array_QDnsServiceRecord(SIP_SSIZE_T);}
static void *array_QDnsServiceRecord(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDnsServiceRecord[sipNrElem];
}


extern "C" {static void *copy_QDnsServiceRecord(const void *, SIP_SSIZE_T);}
static void *copy_QDnsServiceRecord(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDnsServiceRecord(reinterpret_cast<const  ::QDnsServiceRecord *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDnsServiceRecord(sipSimpleWrapper *);}
static void dealloc_QDnsServiceRecord(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDnsServiceRecord(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDnsServiceRecord(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDnsServiceRecord(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDnsServiceRecord *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDnsServiceRecord();

            return sipCpp;
        }
    }

    {
        const  ::QDnsServiceRecord* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDnsServiceRecord, &a0))
        {
            sipCpp = new  ::QDnsServiceRecord(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QDnsServiceRecord[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QDnsServiceRecord_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsServiceRecord_name)},
    {SIP_MLNAME_CAST(sipName_port), meth_QDnsServiceRecord_port, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsServiceRecord_port)},
    {SIP_MLNAME_CAST(sipName_priority), meth_QDnsServiceRecord_priority, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsServiceRecord_priority)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDnsServiceRecord_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsServiceRecord_swap)},
    {SIP_MLNAME_CAST(sipName_target), meth_QDnsServiceRecord_target, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsServiceRecord_target)},
    {SIP_MLNAME_CAST(sipName_timeToLive), meth_QDnsServiceRecord_timeToLive, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsServiceRecord_timeToLive)},
    {SIP_MLNAME_CAST(sipName_weight), meth_QDnsServiceRecord_weight, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsServiceRecord_weight)}
};

PyDoc_STRVAR(doc_QDnsServiceRecord, "\1QDnsServiceRecord()\n"
"QDnsServiceRecord(QDnsServiceRecord)");


static pyqt5ClassPluginDef plugin_QDnsServiceRecord = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QDnsServiceRecord = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDnsServiceRecord,
        {SIP_NULLPTR},
        &plugin_QDnsServiceRecord
    },
    {
        sipNameNr_QDnsServiceRecord,
        {0, 0, 1},
        7, methods_QDnsServiceRecord,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDnsServiceRecord,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QDnsServiceRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDnsServiceRecord,
    assign_QDnsServiceRecord,
    array_QDnsServiceRecord,
    copy_QDnsServiceRecord,
    release_QDnsServiceRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 58 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 23934 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 23938 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QDnsMailExchangeRecord_swap, "swap(self, QDnsMailExchangeRecord)");

extern "C" {static PyObject *meth_QDnsMailExchangeRecord_swap(PyObject *, PyObject *);}
static PyObject *meth_QDnsMailExchangeRecord_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDnsMailExchangeRecord* a0;
         ::QDnsMailExchangeRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDnsMailExchangeRecord, &sipCpp, sipType_QDnsMailExchangeRecord, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsMailExchangeRecord, sipName_swap, doc_QDnsMailExchangeRecord_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsMailExchangeRecord_exchange, "exchange(self) -> str");

extern "C" {static PyObject *meth_QDnsMailExchangeRecord_exchange(PyObject *, PyObject *);}
static PyObject *meth_QDnsMailExchangeRecord_exchange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsMailExchangeRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsMailExchangeRecord, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->exchange());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsMailExchangeRecord, sipName_exchange, doc_QDnsMailExchangeRecord_exchange);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsMailExchangeRecord_name, "name(self) -> str");

extern "C" {static PyObject *meth_QDnsMailExchangeRecord_name(PyObject *, PyObject *);}
static PyObject *meth_QDnsMailExchangeRecord_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsMailExchangeRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsMailExchangeRecord, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsMailExchangeRecord, sipName_name, doc_QDnsMailExchangeRecord_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsMailExchangeRecord_preference, "preference(self) -> int");

extern "C" {static PyObject *meth_QDnsMailExchangeRecord_preference(PyObject *, PyObject *);}
static PyObject *meth_QDnsMailExchangeRecord_preference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsMailExchangeRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsMailExchangeRecord, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->preference();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsMailExchangeRecord, sipName_preference, doc_QDnsMailExchangeRecord_preference);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsMailExchangeRecord_timeToLive, "timeToLive(self) -> int");

extern "C" {static PyObject *meth_QDnsMailExchangeRecord_timeToLive(PyObject *, PyObject *);}
static PyObject *meth_QDnsMailExchangeRecord_timeToLive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsMailExchangeRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsMailExchangeRecord, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->timeToLive();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsMailExchangeRecord, sipName_timeToLive, doc_QDnsMailExchangeRecord_timeToLive);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDnsMailExchangeRecord(void *, int);}
static void release_QDnsMailExchangeRecord(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDnsMailExchangeRecord *>(sipCppV);
}


extern "C" {static void assign_QDnsMailExchangeRecord(void *, SIP_SSIZE_T, void *);}
static void assign_QDnsMailExchangeRecord(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDnsMailExchangeRecord *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDnsMailExchangeRecord *>(sipSrc);
}


extern "C" {static void *array_QDnsMailExchangeRecord(SIP_SSIZE_T);}
static void *array_QDnsMailExchangeRecord(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDnsMailExchangeRecord[sipNrElem];
}


extern "C" {static void *copy_QDnsMailExchangeRecord(const void *, SIP_SSIZE_T);}
static void *copy_QDnsMailExchangeRecord(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDnsMailExchangeRecord(reinterpret_cast<const  ::QDnsMailExchangeRecord *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDnsMailExchangeRecord(sipSimpleWrapper *);}
static void dealloc_QDnsMailExchangeRecord(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDnsMailExchangeRecord(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDnsMailExchangeRecord(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDnsMailExchangeRecord(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDnsMailExchangeRecord *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDnsMailExchangeRecord();

            return sipCpp;
        }
    }

    {
        const  ::QDnsMailExchangeRecord* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDnsMailExchangeRecord, &a0))
        {
            sipCpp = new  ::QDnsMailExchangeRecord(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QDnsMailExchangeRecord[] = {
    {SIP_MLNAME_CAST(sipName_exchange), meth_QDnsMailExchangeRecord_exchange, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsMailExchangeRecord_exchange)},
    {SIP_MLNAME_CAST(sipName_name), meth_QDnsMailExchangeRecord_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsMailExchangeRecord_name)},
    {SIP_MLNAME_CAST(sipName_preference), meth_QDnsMailExchangeRecord_preference, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsMailExchangeRecord_preference)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDnsMailExchangeRecord_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsMailExchangeRecord_swap)},
    {SIP_MLNAME_CAST(sipName_timeToLive), meth_QDnsMailExchangeRecord_timeToLive, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsMailExchangeRecord_timeToLive)}
};

PyDoc_STRVAR(doc_QDnsMailExchangeRecord, "\1QDnsMailExchangeRecord()\n"
"QDnsMailExchangeRecord(QDnsMailExchangeRecord)");


static pyqt5ClassPluginDef plugin_QDnsMailExchangeRecord = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QDnsMailExchangeRecord = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDnsMailExchangeRecord,
        {SIP_NULLPTR},
        &plugin_QDnsMailExchangeRecord
    },
    {
        sipNameNr_QDnsMailExchangeRecord,
        {0, 0, 1},
        5, methods_QDnsMailExchangeRecord,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDnsMailExchangeRecord,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QDnsMailExchangeRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDnsMailExchangeRecord,
    assign_QDnsMailExchangeRecord,
    array_QDnsMailExchangeRecord,
    copy_QDnsMailExchangeRecord,
    release_QDnsMailExchangeRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 42 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 24226 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 24230 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 24233 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QDnsHostAddressRecord_swap, "swap(self, QDnsHostAddressRecord)");

extern "C" {static PyObject *meth_QDnsHostAddressRecord_swap(PyObject *, PyObject *);}
static PyObject *meth_QDnsHostAddressRecord_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDnsHostAddressRecord* a0;
         ::QDnsHostAddressRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDnsHostAddressRecord, &sipCpp, sipType_QDnsHostAddressRecord, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsHostAddressRecord, sipName_swap, doc_QDnsHostAddressRecord_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsHostAddressRecord_name, "name(self) -> str");

extern "C" {static PyObject *meth_QDnsHostAddressRecord_name(PyObject *, PyObject *);}
static PyObject *meth_QDnsHostAddressRecord_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsHostAddressRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsHostAddressRecord, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsHostAddressRecord, sipName_name, doc_QDnsHostAddressRecord_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsHostAddressRecord_timeToLive, "timeToLive(self) -> int");

extern "C" {static PyObject *meth_QDnsHostAddressRecord_timeToLive(PyObject *, PyObject *);}
static PyObject *meth_QDnsHostAddressRecord_timeToLive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsHostAddressRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsHostAddressRecord, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->timeToLive();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsHostAddressRecord, sipName_timeToLive, doc_QDnsHostAddressRecord_timeToLive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsHostAddressRecord_value, "value(self) -> QHostAddress");

extern "C" {static PyObject *meth_QDnsHostAddressRecord_value(PyObject *, PyObject *);}
static PyObject *meth_QDnsHostAddressRecord_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsHostAddressRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsHostAddressRecord, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsHostAddressRecord, sipName_value, doc_QDnsHostAddressRecord_value);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDnsHostAddressRecord(void *, int);}
static void release_QDnsHostAddressRecord(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDnsHostAddressRecord *>(sipCppV);
}


extern "C" {static void assign_QDnsHostAddressRecord(void *, SIP_SSIZE_T, void *);}
static void assign_QDnsHostAddressRecord(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDnsHostAddressRecord *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDnsHostAddressRecord *>(sipSrc);
}


extern "C" {static void *array_QDnsHostAddressRecord(SIP_SSIZE_T);}
static void *array_QDnsHostAddressRecord(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDnsHostAddressRecord[sipNrElem];
}


extern "C" {static void *copy_QDnsHostAddressRecord(const void *, SIP_SSIZE_T);}
static void *copy_QDnsHostAddressRecord(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDnsHostAddressRecord(reinterpret_cast<const  ::QDnsHostAddressRecord *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDnsHostAddressRecord(sipSimpleWrapper *);}
static void dealloc_QDnsHostAddressRecord(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDnsHostAddressRecord(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDnsHostAddressRecord(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDnsHostAddressRecord(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDnsHostAddressRecord *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDnsHostAddressRecord();

            return sipCpp;
        }
    }

    {
        const  ::QDnsHostAddressRecord* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDnsHostAddressRecord, &a0))
        {
            sipCpp = new  ::QDnsHostAddressRecord(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QDnsHostAddressRecord[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QDnsHostAddressRecord_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsHostAddressRecord_name)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDnsHostAddressRecord_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsHostAddressRecord_swap)},
    {SIP_MLNAME_CAST(sipName_timeToLive), meth_QDnsHostAddressRecord_timeToLive, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsHostAddressRecord_timeToLive)},
    {SIP_MLNAME_CAST(sipName_value), meth_QDnsHostAddressRecord_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsHostAddressRecord_value)}
};

PyDoc_STRVAR(doc_QDnsHostAddressRecord, "\1QDnsHostAddressRecord()\n"
"QDnsHostAddressRecord(QDnsHostAddressRecord)");


static pyqt5ClassPluginDef plugin_QDnsHostAddressRecord = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QDnsHostAddressRecord = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDnsHostAddressRecord,
        {SIP_NULLPTR},
        &plugin_QDnsHostAddressRecord
    },
    {
        sipNameNr_QDnsHostAddressRecord,
        {0, 0, 1},
        4, methods_QDnsHostAddressRecord,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDnsHostAddressRecord,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QDnsHostAddressRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDnsHostAddressRecord,
    assign_QDnsHostAddressRecord,
    array_QDnsHostAddressRecord,
    copy_QDnsHostAddressRecord,
    release_QDnsHostAddressRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 24488 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 24492 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QDnsDomainNameRecord_swap, "swap(self, QDnsDomainNameRecord)");

extern "C" {static PyObject *meth_QDnsDomainNameRecord_swap(PyObject *, PyObject *);}
static PyObject *meth_QDnsDomainNameRecord_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QDnsDomainNameRecord* a0;
         ::QDnsDomainNameRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDnsDomainNameRecord, &sipCpp, sipType_QDnsDomainNameRecord, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsDomainNameRecord, sipName_swap, doc_QDnsDomainNameRecord_swap);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsDomainNameRecord_name, "name(self) -> str");

extern "C" {static PyObject *meth_QDnsDomainNameRecord_name(PyObject *, PyObject *);}
static PyObject *meth_QDnsDomainNameRecord_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsDomainNameRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsDomainNameRecord, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsDomainNameRecord, sipName_name, doc_QDnsDomainNameRecord_name);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsDomainNameRecord_timeToLive, "timeToLive(self) -> int");

extern "C" {static PyObject *meth_QDnsDomainNameRecord_timeToLive(PyObject *, PyObject *);}
static PyObject *meth_QDnsDomainNameRecord_timeToLive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsDomainNameRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsDomainNameRecord, &sipCpp))
        {
             ::quint32 sipRes;

            sipRes = sipCpp->timeToLive();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsDomainNameRecord, sipName_timeToLive, doc_QDnsDomainNameRecord_timeToLive);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QDnsDomainNameRecord_value, "value(self) -> str");

extern "C" {static PyObject *meth_QDnsDomainNameRecord_value(PyObject *, PyObject *);}
static PyObject *meth_QDnsDomainNameRecord_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDnsDomainNameRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsDomainNameRecord, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsDomainNameRecord, sipName_value, doc_QDnsDomainNameRecord_value);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDnsDomainNameRecord(void *, int);}
static void release_QDnsDomainNameRecord(void *sipCppV, int)
{
    delete reinterpret_cast< ::QDnsDomainNameRecord *>(sipCppV);
}


extern "C" {static void assign_QDnsDomainNameRecord(void *, SIP_SSIZE_T, void *);}
static void assign_QDnsDomainNameRecord(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QDnsDomainNameRecord *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QDnsDomainNameRecord *>(sipSrc);
}


extern "C" {static void *array_QDnsDomainNameRecord(SIP_SSIZE_T);}
static void *array_QDnsDomainNameRecord(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDnsDomainNameRecord[sipNrElem];
}


extern "C" {static void *copy_QDnsDomainNameRecord(const void *, SIP_SSIZE_T);}
static void *copy_QDnsDomainNameRecord(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDnsDomainNameRecord(reinterpret_cast<const  ::QDnsDomainNameRecord *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDnsDomainNameRecord(sipSimpleWrapper *);}
static void dealloc_QDnsDomainNameRecord(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDnsDomainNameRecord(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDnsDomainNameRecord(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDnsDomainNameRecord(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDnsDomainNameRecord *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QDnsDomainNameRecord();

            return sipCpp;
        }
    }

    {
        const  ::QDnsDomainNameRecord* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QDnsDomainNameRecord, &a0))
        {
            sipCpp = new  ::QDnsDomainNameRecord(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


static PyMethodDef methods_QDnsDomainNameRecord[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QDnsDomainNameRecord_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsDomainNameRecord_name)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDnsDomainNameRecord_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsDomainNameRecord_swap)},
    {SIP_MLNAME_CAST(sipName_timeToLive), meth_QDnsDomainNameRecord_timeToLive, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsDomainNameRecord_timeToLive)},
    {SIP_MLNAME_CAST(sipName_value), meth_QDnsDomainNameRecord_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsDomainNameRecord_value)}
};

PyDoc_STRVAR(doc_QDnsDomainNameRecord, "\1QDnsDomainNameRecord()\n"
"QDnsDomainNameRecord(QDnsDomainNameRecord)");


static pyqt5ClassPluginDef plugin_QDnsDomainNameRecord = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QDnsDomainNameRecord = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QDnsDomainNameRecord,
        {SIP_NULLPTR},
        &plugin_QDnsDomainNameRecord
    },
    {
        sipNameNr_QDnsDomainNameRecord,
        {0, 0, 1},
        4, methods_QDnsDomainNameRecord,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QDnsDomainNameRecord,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    SIP_NULLPTR,
    init_type_QDnsDomainNameRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QDnsDomainNameRecord,
    assign_QDnsDomainNameRecord,
    array_QDnsDomainNameRecord,
    copy_QDnsDomainNameRecord,
    release_QDnsDomainNameRecord,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 24747 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 24751 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 24754 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 24757 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QAuthenticator_user, "user(self) -> str");

extern "C" {static PyObject *meth_QAuthenticator_user(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_user(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAuthenticator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->user());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_user, doc_QAuthenticator_user);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAuthenticator_setUser, "setUser(self, str)");

extern "C" {static PyObject *meth_QAuthenticator_setUser(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_setUser(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAuthenticator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setUser(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_setUser, doc_QAuthenticator_setUser);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAuthenticator_password, "password(self) -> str");

extern "C" {static PyObject *meth_QAuthenticator_password(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_password(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAuthenticator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->password());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_password, doc_QAuthenticator_password);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAuthenticator_setPassword, "setPassword(self, str)");

extern "C" {static PyObject *meth_QAuthenticator_setPassword(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_setPassword(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAuthenticator, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPassword(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_setPassword, doc_QAuthenticator_setPassword);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAuthenticator_realm, "realm(self) -> str");

extern "C" {static PyObject *meth_QAuthenticator_realm(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_realm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAuthenticator, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->realm());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_realm, doc_QAuthenticator_realm);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAuthenticator_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QAuthenticator_isNull(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAuthenticator, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_isNull, doc_QAuthenticator_isNull);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAuthenticator_option, "option(self, str) -> Any");

extern "C" {static PyObject *meth_QAuthenticator_option(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_option(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAuthenticator, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant(sipCpp->option(*a0));
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_option, doc_QAuthenticator_option);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAuthenticator_options, "options(self) -> Dict[str, Any]");

extern "C" {static PyObject *meth_QAuthenticator_options(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAuthenticator, &sipCpp))
        {
             ::QVariantHash*sipRes;

            sipRes = new  ::QVariantHash(sipCpp->options());

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QString_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_options, doc_QAuthenticator_options);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAuthenticator_setOption, "setOption(self, str, Any)");

extern "C" {static PyObject *meth_QAuthenticator_setOption(PyObject *, PyObject *);}
static PyObject *meth_QAuthenticator_setOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QAuthenticator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QAuthenticator, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setOption(*a0,*a1);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAuthenticator, sipName_setOption, doc_QAuthenticator_setOption);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QAuthenticator___ne__(PyObject *,PyObject *);}
static PyObject *slot_QAuthenticator___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAuthenticator *sipCpp = reinterpret_cast< ::QAuthenticator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAuthenticator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAuthenticator* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QAuthenticator, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QAuthenticator::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QAuthenticator, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QAuthenticator___eq__(PyObject *,PyObject *);}
static PyObject *slot_QAuthenticator___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAuthenticator *sipCpp = reinterpret_cast< ::QAuthenticator *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAuthenticator));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAuthenticator* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QAuthenticator, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QAuthenticator::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QAuthenticator, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QAuthenticator(void *, int);}
static void release_QAuthenticator(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAuthenticator *>(sipCppV);
}


extern "C" {static void assign_QAuthenticator(void *, SIP_SSIZE_T, void *);}
static void assign_QAuthenticator(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QAuthenticator *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QAuthenticator *>(sipSrc);
}


extern "C" {static void *array_QAuthenticator(SIP_SSIZE_T);}
static void *array_QAuthenticator(SIP_SSIZE_T sipNrElem)
{
    return new  ::QAuthenticator[sipNrElem];
}


extern "C" {static void *copy_QAuthenticator(const void *, SIP_SSIZE_T);}
static void *copy_QAuthenticator(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QAuthenticator(reinterpret_cast<const  ::QAuthenticator *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QAuthenticator(sipSimpleWrapper *);}
static void dealloc_QAuthenticator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAuthenticator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QAuthenticator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAuthenticator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QAuthenticator *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QAuthenticator();

            return sipCpp;
        }
    }

    {
        const  ::QAuthenticator* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QAuthenticator, &a0))
        {
            sipCpp = new  ::QAuthenticator(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QAuthenticator[] = {
    {(void *)slot_QAuthenticator___ne__, ne_slot},
    {(void *)slot_QAuthenticator___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QAuthenticator[] = {
    {SIP_MLNAME_CAST(sipName_isNull), meth_QAuthenticator_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_isNull)},
    {SIP_MLNAME_CAST(sipName_option), meth_QAuthenticator_option, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_option)},
    {SIP_MLNAME_CAST(sipName_options), meth_QAuthenticator_options, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_options)},
    {SIP_MLNAME_CAST(sipName_password), meth_QAuthenticator_password, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_password)},
    {SIP_MLNAME_CAST(sipName_realm), meth_QAuthenticator_realm, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_realm)},
    {SIP_MLNAME_CAST(sipName_setOption), meth_QAuthenticator_setOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_setOption)},
    {SIP_MLNAME_CAST(sipName_setPassword), meth_QAuthenticator_setPassword, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_setPassword)},
    {SIP_MLNAME_CAST(sipName_setUser), meth_QAuthenticator_setUser, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_setUser)},
    {SIP_MLNAME_CAST(sipName_user), meth_QAuthenticator_user, METH_VARARGS, SIP_MLDOC_CAST(doc_QAuthenticator_user)}
};

PyDoc_STRVAR(doc_QAuthenticator, "\1QAuthenticator()\n"
"QAuthenticator(QAuthenticator)");


static pyqt5ClassPluginDef plugin_QAuthenticator = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QAuthenticator = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAuthenticator,
        {SIP_NULLPTR},
        &plugin_QAuthenticator
    },
    {
        sipNameNr_QAuthenticator,
        {0, 0, 1},
        9, methods_QAuthenticator,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAuthenticator,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QAuthenticator,
    init_type_QAuthenticator,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAuthenticator,
    assign_QAuthenticator,
    array_QAuthenticator,
    copy_QAuthenticator,
    release_QAuthenticator,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 25241 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 25245 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QAbstractSocket_PauseModes___hash__(PyObject *);}
static long slot_QAbstractSocket_PauseModes___hash__(PyObject *sipSelf)
{
     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QAbstractSocket::PauseModes::Int();
#line 25263 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QAbstractSocket_PauseModes___bool__(PyObject *);}
static int slot_QAbstractSocket_PauseModes___bool__(PyObject *sipSelf)
{
     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractSocket::PauseModes::Int() != 0);
#line 25288 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___ne__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket::PauseModes* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QAbstractSocket_PauseModes, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractSocket::PauseModes::Int() != a0->operator QAbstractSocket::PauseModes::Int());
#line 25318 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QAbstractSocket::PauseModes *>(a0),sipType_QAbstractSocket_PauseModes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QAbstractSocket_PauseModes, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___eq__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket::PauseModes* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QAbstractSocket_PauseModes, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractSocket::PauseModes::Int() == a0->operator QAbstractSocket::PauseModes::Int());
#line 25354 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QAbstractSocket::PauseModes *>(a0),sipType_QAbstractSocket_PauseModes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QAbstractSocket_PauseModes, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractSocket_PauseModes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QAbstractSocket::PauseModes(*sipCpp ^ a0);
#line 25393 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___xor__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::PauseModes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractSocket_PauseModes, &a0, &a0State, &a1))
        {
             ::QAbstractSocket::PauseModes*sipRes;

            sipRes = new  ::QAbstractSocket::PauseModes((*a0 ^ a1));
            sipReleaseType(a0,sipType_QAbstractSocket_PauseModes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_PauseModes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___ior__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractSocket_PauseModes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QAbstractSocket::PauseModes(*sipCpp | a0);
#line 25465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___or__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::PauseModes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractSocket_PauseModes, &a0, &a0State, &a1))
        {
             ::QAbstractSocket::PauseModes*sipRes;

            sipRes = new  ::QAbstractSocket::PauseModes((*a0 | a1));
            sipReleaseType(a0,sipType_QAbstractSocket_PauseModes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_PauseModes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___iand__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractSocket_PauseModes)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QAbstractSocket::PauseModes::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___and__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::PauseModes* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractSocket_PauseModes, &a0, &a0State, &a1))
        {
             ::QAbstractSocket::PauseModes*sipRes;

            sipRes = new  ::QAbstractSocket::PauseModes((*a0 & a1));
            sipReleaseType(a0,sipType_QAbstractSocket_PauseModes,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_PauseModes,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___invert__(PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___invert__(PyObject *sipSelf)
{
     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QAbstractSocket::PauseModes*sipRes;

            sipRes = new  ::QAbstractSocket::PauseModes(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_PauseModes,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QAbstractSocket_PauseModes___int__(PyObject *);}
static PyObject *slot_QAbstractSocket_PauseModes___int__(PyObject *sipSelf)
{
     ::QAbstractSocket::PauseModes *sipCpp = reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_PauseModes));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractSocket_PauseModes(void *, int);}
static void release_QAbstractSocket_PauseModes(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipCppV);
}


extern "C" {static void assign_QAbstractSocket_PauseModes(void *, SIP_SSIZE_T, void *);}
static void assign_QAbstractSocket_PauseModes(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QAbstractSocket::PauseModes *>(sipSrc);
}


extern "C" {static void *array_QAbstractSocket_PauseModes(SIP_SSIZE_T);}
static void *array_QAbstractSocket_PauseModes(SIP_SSIZE_T sipNrElem)
{
    return new  ::QAbstractSocket::PauseModes[sipNrElem];
}


extern "C" {static void *copy_QAbstractSocket_PauseModes(const void *, SIP_SSIZE_T);}
static void *copy_QAbstractSocket_PauseModes(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QAbstractSocket::PauseModes(reinterpret_cast<const  ::QAbstractSocket::PauseModes *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QAbstractSocket_PauseModes(sipSimpleWrapper *);}
static void dealloc_QAbstractSocket_PauseModes(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractSocket_PauseModes(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QAbstractSocket_PauseModes(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractSocket_PauseModes(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QAbstractSocket::PauseModes *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QAbstractSocket::PauseModes();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QAbstractSocket::PauseModes(a0);

            return sipCpp;
        }
    }

    {
        const  ::QAbstractSocket::PauseModes* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QAbstractSocket_PauseModes, &a0, &a0State))
        {
            sipCpp = new  ::QAbstractSocket::PauseModes(*a0);
            sipReleaseType(const_cast< ::QAbstractSocket::PauseModes *>(a0),sipType_QAbstractSocket_PauseModes,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QAbstractSocket_PauseModes(PyObject *, void **, int *, PyObject *);}
static int convertTo_QAbstractSocket_PauseModes(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QAbstractSocket::PauseModes **sipCppPtr = reinterpret_cast< ::QAbstractSocket::PauseModes **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QAbstractSocket::PauseModes is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QAbstractSocket_PauseMode)) ||
            sipCanConvertToType(sipPy, sipType_QAbstractSocket_PauseModes, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QAbstractSocket_PauseMode)))
{
    *sipCppPtr = new QAbstractSocket::PauseModes(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QAbstractSocket::PauseModes *>(sipConvertToType(sipPy, sipType_QAbstractSocket_PauseModes, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 25733 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QAbstractSocket_PauseModes[] = {
    {(void *)slot_QAbstractSocket_PauseModes___hash__, hash_slot},
    {(void *)slot_QAbstractSocket_PauseModes___bool__, bool_slot},
    {(void *)slot_QAbstractSocket_PauseModes___ne__, ne_slot},
    {(void *)slot_QAbstractSocket_PauseModes___eq__, eq_slot},
    {(void *)slot_QAbstractSocket_PauseModes___ixor__, ixor_slot},
    {(void *)slot_QAbstractSocket_PauseModes___xor__, xor_slot},
    {(void *)slot_QAbstractSocket_PauseModes___ior__, ior_slot},
    {(void *)slot_QAbstractSocket_PauseModes___or__, or_slot},
    {(void *)slot_QAbstractSocket_PauseModes___iand__, iand_slot},
    {(void *)slot_QAbstractSocket_PauseModes___and__, and_slot},
    {(void *)slot_QAbstractSocket_PauseModes___invert__, invert_slot},
    {(void *)slot_QAbstractSocket_PauseModes___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QAbstractSocket_PauseModes, "\1QAbstractSocket.PauseModes()\n"
"QAbstractSocket.PauseModes(Union[QAbstractSocket.PauseModes, QAbstractSocket.PauseMode])\n"
"QAbstractSocket.PauseModes(QAbstractSocket.PauseModes)");


static pyqt5ClassPluginDef plugin_QAbstractSocket_PauseModes = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QAbstractSocket_PauseModes = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractSocket__PauseModes,
        {SIP_NULLPTR},
        &plugin_QAbstractSocket_PauseModes
    },
    {
        sipNameNr_PauseModes,
        {1, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractSocket_PauseModes,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QAbstractSocket_PauseModes,
    init_type_QAbstractSocket_PauseModes,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractSocket_PauseModes,
    assign_QAbstractSocket_PauseModes,
    array_QAbstractSocket_PauseModes,
    copy_QAbstractSocket_PauseModes,
    release_QAbstractSocket_PauseModes,
    SIP_NULLPTR,
    convertTo_QAbstractSocket_PauseModes,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 25821 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 25825 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


extern "C" {static long slot_QAbstractSocket_BindMode___hash__(PyObject *);}
static long slot_QAbstractSocket_BindMode___hash__(PyObject *sipSelf)
{
     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return 0L;


    {
        {
            long sipRes = 0;

#line 116 "sip/QtCore/qglobal.sip"
        sipRes = sipCpp->operator QAbstractSocket::BindMode::Int();
#line 25843 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_QAbstractSocket_BindMode___bool__(PyObject *);}
static int slot_QAbstractSocket_BindMode___bool__(PyObject *sipSelf)
{
     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 111 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractSocket::BindMode::Int() != 0);
#line 25868 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket::BindMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QAbstractSocket_BindMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 106 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractSocket::BindMode::Int() != a0->operator QAbstractSocket::BindMode::Int());
#line 25898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QAbstractSocket::BindMode *>(a0),sipType_QAbstractSocket_BindMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QAbstractSocket_BindMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket::BindMode* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QAbstractSocket_BindMode, &a0, &a0State))
        {
            bool sipRes = 0;

#line 101 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator QAbstractSocket::BindMode::Int() == a0->operator QAbstractSocket::BindMode::Int());
#line 25934 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
            sipReleaseType(const_cast< ::QAbstractSocket::BindMode *>(a0),sipType_QAbstractSocket_BindMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QAbstractSocket_BindMode, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractSocket_BindMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 95 "sip/QtCore/qglobal.sip"
        *sipCpp = QAbstractSocket::BindMode(*sipCpp ^ a0);
#line 25973 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___xor__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::BindMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractSocket_BindMode, &a0, &a0State, &a1))
        {
             ::QAbstractSocket::BindMode*sipRes;

            sipRes = new  ::QAbstractSocket::BindMode((*a0 ^ a1));
            sipReleaseType(a0,sipType_QAbstractSocket_BindMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_BindMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, xor_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___ior__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractSocket_BindMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 89 "sip/QtCore/qglobal.sip"
        *sipCpp = QAbstractSocket::BindMode(*sipCpp | a0);
#line 26045 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___or__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::BindMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractSocket_BindMode, &a0, &a0State, &a1))
        {
             ::QAbstractSocket::BindMode*sipRes;

            sipRes = new  ::QAbstractSocket::BindMode((*a0 | a1));
            sipReleaseType(a0,sipType_QAbstractSocket_BindMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_BindMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, or_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___iand__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QAbstractSocket_BindMode)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp-> ::QAbstractSocket::BindMode::operator&=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___and__(PyObject *,PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::BindMode* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QAbstractSocket_BindMode, &a0, &a0State, &a1))
        {
             ::QAbstractSocket::BindMode*sipRes;

            sipRes = new  ::QAbstractSocket::BindMode((*a0 & a1));
            sipReleaseType(a0,sipType_QAbstractSocket_BindMode,a0State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_BindMode,SIP_NULLPTR);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, and_slot, SIP_NULLPTR, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___invert__(PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___invert__(PyObject *sipSelf)
{
     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
             ::QAbstractSocket::BindMode*sipRes;

            sipRes = new  ::QAbstractSocket::BindMode(~(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_BindMode,SIP_NULLPTR);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QAbstractSocket_BindMode___int__(PyObject *);}
static PyObject *slot_QAbstractSocket_BindMode___int__(PyObject *sipSelf)
{
     ::QAbstractSocket::BindMode *sipCpp = reinterpret_cast< ::QAbstractSocket::BindMode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAbstractSocket_BindMode));

    if (!sipCpp)
        return SIP_NULLPTR;


    {
        {
            int sipRes;

            sipRes = *sipCpp;

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractSocket_BindMode(void *, int);}
static void release_QAbstractSocket_BindMode(void *sipCppV, int)
{
    delete reinterpret_cast< ::QAbstractSocket::BindMode *>(sipCppV);
}


extern "C" {static void assign_QAbstractSocket_BindMode(void *, SIP_SSIZE_T, void *);}
static void assign_QAbstractSocket_BindMode(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QAbstractSocket::BindMode *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QAbstractSocket::BindMode *>(sipSrc);
}


extern "C" {static void *array_QAbstractSocket_BindMode(SIP_SSIZE_T);}
static void *array_QAbstractSocket_BindMode(SIP_SSIZE_T sipNrElem)
{
    return new  ::QAbstractSocket::BindMode[sipNrElem];
}


extern "C" {static void *copy_QAbstractSocket_BindMode(const void *, SIP_SSIZE_T);}
static void *copy_QAbstractSocket_BindMode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QAbstractSocket::BindMode(reinterpret_cast<const  ::QAbstractSocket::BindMode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QAbstractSocket_BindMode(sipSimpleWrapper *);}
static void dealloc_QAbstractSocket_BindMode(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractSocket_BindMode(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QAbstractSocket_BindMode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractSocket_BindMode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QAbstractSocket::BindMode *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QAbstractSocket::BindMode();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "i", &a0))
        {
            sipCpp = new  ::QAbstractSocket::BindMode(a0);

            return sipCpp;
        }
    }

    {
        const  ::QAbstractSocket::BindMode* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J1", sipType_QAbstractSocket_BindMode, &a0, &a0State))
        {
            sipCpp = new  ::QAbstractSocket::BindMode(*a0);
            sipReleaseType(const_cast< ::QAbstractSocket::BindMode *>(a0),sipType_QAbstractSocket_BindMode,a0State);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


extern "C" {static int convertTo_QAbstractSocket_BindMode(PyObject *, void **, int *, PyObject *);}
static int convertTo_QAbstractSocket_BindMode(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QAbstractSocket::BindMode **sipCppPtr = reinterpret_cast< ::QAbstractSocket::BindMode **>(sipCppPtrV);

#line 121 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QAbstractSocket::BindMode is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QAbstractSocket_BindFlag)) ||
            sipCanConvertToType(sipPy, sipType_QAbstractSocket_BindMode, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QAbstractSocket_BindFlag)))
{
    *sipCppPtr = new QAbstractSocket::BindMode(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QAbstractSocket::BindMode *>(sipConvertToType(sipPy, sipType_QAbstractSocket_BindMode, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 26313 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QAbstractSocket_BindMode[] = {
    {(void *)slot_QAbstractSocket_BindMode___hash__, hash_slot},
    {(void *)slot_QAbstractSocket_BindMode___bool__, bool_slot},
    {(void *)slot_QAbstractSocket_BindMode___ne__, ne_slot},
    {(void *)slot_QAbstractSocket_BindMode___eq__, eq_slot},
    {(void *)slot_QAbstractSocket_BindMode___ixor__, ixor_slot},
    {(void *)slot_QAbstractSocket_BindMode___xor__, xor_slot},
    {(void *)slot_QAbstractSocket_BindMode___ior__, ior_slot},
    {(void *)slot_QAbstractSocket_BindMode___or__, or_slot},
    {(void *)slot_QAbstractSocket_BindMode___iand__, iand_slot},
    {(void *)slot_QAbstractSocket_BindMode___and__, and_slot},
    {(void *)slot_QAbstractSocket_BindMode___invert__, invert_slot},
    {(void *)slot_QAbstractSocket_BindMode___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QAbstractSocket_BindMode, "\1QAbstractSocket.BindMode()\n"
"QAbstractSocket.BindMode(Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag])\n"
"QAbstractSocket.BindMode(QAbstractSocket.BindMode)");


static pyqt5ClassPluginDef plugin_QAbstractSocket_BindMode = {
    SIP_NULLPTR,
    1,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QAbstractSocket_BindMode = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractSocket__BindMode,
        {SIP_NULLPTR},
        &plugin_QAbstractSocket_BindMode
    },
    {
        sipNameNr_BindMode,
        {1, 255, 0},
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractSocket_BindMode,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QAbstractSocket_BindMode,
    init_type_QAbstractSocket_BindMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractSocket_BindMode,
    assign_QAbstractSocket_BindMode,
    array_QAbstractSocket_BindMode,
    copy_QAbstractSocket_BindMode,
    release_QAbstractSocket_BindMode,
    SIP_NULLPTR,
    convertTo_QAbstractSocket_BindMode,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 26401 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 26405 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 26408 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 26411 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 26414 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 26417 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 26420 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 26423 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 26426 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 160 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 26429 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 26432 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 26435 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 26438 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26441 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26444 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 26447 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26450 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 26453 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 26456 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 26459 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 26462 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 26465 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 26468 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 26471 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQAbstractSocket : public  ::QAbstractSocket
{
public:
    sipQAbstractSocket( ::QAbstractSocket::SocketType, ::QObject*);
    virtual ~sipQAbstractSocket();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void resume() SIP_OVERRIDE;
     ::QVariant socketOption( ::QAbstractSocket::SocketOption) SIP_OVERRIDE;
    void setSocketOption( ::QAbstractSocket::SocketOption,const  ::QVariant&) SIP_OVERRIDE;
    bool waitForDisconnected(int) SIP_OVERRIDE;
    bool waitForConnected(int) SIP_OVERRIDE;
     ::qintptr socketDescriptor() const SIP_OVERRIDE;
    bool setSocketDescriptor( ::qintptr, ::QAbstractSocket::SocketState, ::QIODevice::OpenMode) SIP_OVERRIDE;
    void setReadBufferSize( ::qint64) SIP_OVERRIDE;
    void disconnectFromHost() SIP_OVERRIDE;
    void connectToHost(const  ::QHostAddress&, ::quint16, ::QIODevice::OpenMode) SIP_OVERRIDE;
    void connectToHost(const  ::QString&, ::quint16, ::QIODevice::OpenMode, ::QAbstractSocket::NetworkLayerProtocol) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool isSequential() const SIP_OVERRIDE;
    bool open( ::QIODevice::OpenMode) SIP_OVERRIDE;
    void close() SIP_OVERRIDE;
     ::qint64 pos() const SIP_OVERRIDE;
     ::qint64 size() const SIP_OVERRIDE;
    bool seek( ::qint64) SIP_OVERRIDE;
    bool atEnd() const SIP_OVERRIDE;
    bool reset() SIP_OVERRIDE;
     ::qint64 bytesAvailable() const SIP_OVERRIDE;
     ::qint64 bytesToWrite() const SIP_OVERRIDE;
    bool canReadLine() const SIP_OVERRIDE;
    bool waitForReadyRead(int) SIP_OVERRIDE;
    bool waitForBytesWritten(int) SIP_OVERRIDE;
     ::qint64 readData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 readLineData(char*, ::qint64) SIP_OVERRIDE;
     ::qint64 writeData(const char*,PY_LONG_LONG) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractSocket(const sipQAbstractSocket &);
    sipQAbstractSocket &operator = (const sipQAbstractSocket &);

    char sipPyMethods[34];
};

sipQAbstractSocket::sipQAbstractSocket( ::QAbstractSocket::SocketType a0, ::QObject*a1):  ::QAbstractSocket(a0,a1), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractSocket::~sipQAbstractSocket()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractSocket::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QAbstractSocket);

    return  ::QAbstractSocket::metaObject();
}

int sipQAbstractSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QAbstractSocket,_c,_id,_a);

    return _id;
}

void *sipQAbstractSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QAbstractSocket, _clname, &sipCpp) ? sipCpp :  ::QAbstractSocket::qt_metacast(_clname));
}

void sipQAbstractSocket::resume()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_resume);

    if (!sipMeth)
    {
         ::QAbstractSocket::resume();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::QVariant sipQAbstractSocket::socketOption( ::QAbstractSocket::SocketOption a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_socketOption);

    if (!sipMeth)
        return  ::QAbstractSocket::socketOption(a0);

    extern  ::QVariant sipVH_QtNetwork_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractSocket::SocketOption);

    return sipVH_QtNetwork_27(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::setSocketOption( ::QAbstractSocket::SocketOption a0,const  ::QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_setSocketOption);

    if (!sipMeth)
    {
         ::QAbstractSocket::setSocketOption(a0,a1);
        return;
    }

    extern void sipVH_QtNetwork_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractSocket::SocketOption,const  ::QVariant&);

    sipVH_QtNetwork_26(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractSocket::waitForDisconnected(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_waitForDisconnected);

    if (!sipMeth)
        return  ::QAbstractSocket::waitForDisconnected(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::waitForConnected(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_waitForConnected);

    if (!sipMeth)
        return  ::QAbstractSocket::waitForConnected(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qintptr sipQAbstractSocket::socketDescriptor() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,SIP_NULLPTR,sipName_socketDescriptor);

    if (!sipMeth)
        return  ::QAbstractSocket::socketDescriptor();

    extern  ::qintptr sipVH_QtNetwork_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_25(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::setSocketDescriptor( ::qintptr a0, ::QAbstractSocket::SocketState a1, ::QIODevice::OpenMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_setSocketDescriptor);

    if (!sipMeth)
        return  ::QAbstractSocket::setSocketDescriptor(a0,a1,a2);

    extern bool sipVH_QtNetwork_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qintptr, ::QAbstractSocket::SocketState, ::QIODevice::OpenMode);

    return sipVH_QtNetwork_24(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractSocket::setReadBufferSize( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_setReadBufferSize);

    if (!sipMeth)
    {
         ::QAbstractSocket::setReadBufferSize(a0);
        return;
    }

    extern void sipVH_QtNetwork_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    sipVH_QtNetwork_23(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::disconnectFromHost()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_disconnectFromHost);

    if (!sipMeth)
    {
         ::QAbstractSocket::disconnectFromHost();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractSocket::connectToHost(const  ::QHostAddress& a0, ::quint16 a1, ::QIODevice::OpenMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_connectToHost);

    if (!sipMeth)
    {
         ::QAbstractSocket::connectToHost(a0,a1,a2);
        return;
    }

    extern void sipVH_QtNetwork_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QHostAddress&, ::quint16, ::QIODevice::OpenMode);

    sipVH_QtNetwork_22(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQAbstractSocket::connectToHost(const  ::QString& a0, ::quint16 a1, ::QIODevice::OpenMode a2, ::QAbstractSocket::NetworkLayerProtocol a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_connectToHost);

    if (!sipMeth)
    {
         ::QAbstractSocket::connectToHost(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtNetwork_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&, ::quint16, ::QIODevice::OpenMode, ::QAbstractSocket::NetworkLayerProtocol);

    sipVH_QtNetwork_21(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQAbstractSocket::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractSocket::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractSocket::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractSocket::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractSocket::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractSocket::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractSocket::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractSocket::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractSocket::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,SIP_NULLPTR,sipName_isSequential);

    if (!sipMeth)
        return  ::QAbstractSocket::isSequential();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::open( ::QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_open);

    if (!sipMeth)
        return  ::QAbstractSocket::open(a0);

    extern bool sipVH_QtNetwork_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice::OpenMode);

    return sipVH_QtNetwork_20(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_close);

    if (!sipMeth)
    {
         ::QAbstractSocket::close();
        return;
    }

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQAbstractSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,SIP_NULLPTR,sipName_pos);

    if (!sipMeth)
        return  ::QAbstractSocket::pos();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQAbstractSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,SIP_NULLPTR,sipName_size);

    if (!sipMeth)
        return  ::QAbstractSocket::size();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::seek( ::qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_seek);

    if (!sipMeth)
        return  ::QAbstractSocket::seek(a0);

    extern bool sipVH_QtNetwork_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::qint64);

    return sipVH_QtNetwork_19(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,SIP_NULLPTR,sipName_atEnd);

    if (!sipMeth)
        return  ::QAbstractSocket::atEnd();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_reset);

    if (!sipMeth)
        return  ::QAbstractSocket::reset();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQAbstractSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,SIP_NULLPTR,sipName_bytesAvailable);

    if (!sipMeth)
        return  ::QAbstractSocket::bytesAvailable();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

 ::qint64 sipQAbstractSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,SIP_NULLPTR,sipName_bytesToWrite);

    if (!sipMeth)
        return  ::QAbstractSocket::bytesToWrite();

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,SIP_NULLPTR,sipName_canReadLine);

    if (!sipMeth)
        return  ::QAbstractSocket::canReadLine();

    extern bool sipVH_QtNetwork_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_18(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_waitForReadyRead);

    if (!sipMeth)
        return  ::QAbstractSocket::waitForReadyRead(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,SIP_NULLPTR,sipName_waitForBytesWritten);

    if (!sipMeth)
        return  ::QAbstractSocket::waitForBytesWritten(a0);

    extern bool sipVH_QtNetwork_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtNetwork_17(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQAbstractSocket::readData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_readData);

    if (!sipMeth)
        return  ::QAbstractSocket::readData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtNetwork_16(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQAbstractSocket::readLineData(char*a0, ::qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,SIP_NULLPTR,sipName_readLineData);

    if (!sipMeth)
        return  ::QAbstractSocket::readLineData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*, ::qint64);

    return sipVH_QtNetwork_15(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

 ::qint64 sipQAbstractSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,SIP_NULLPTR,sipName_writeData);

    if (!sipMeth)
        return  ::QAbstractSocket::writeData(a0,a1);

    extern  ::qint64 sipVH_QtNetwork_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return sipVH_QtNetwork_14(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QAbstractSocket_connectToHost, "connectToHost(self, str, int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite, protocol: QAbstractSocket.NetworkLayerProtocol = QAbstractSocket.AnyIPProtocol)\n"
"connectToHost(self, Union[QHostAddress, QHostAddress.SpecialAddress], int, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QAbstractSocket_connectToHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_connectToHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint16 a1;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QAbstractSocket::NetworkLayerProtocol a3 = QAbstractSocket::AnyIPProtocol;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
            sipName_protocol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1t|J1E", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State, sipType_QAbstractSocket_NetworkLayerProtocol, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::connectToHost(*a0,a1,*a2,a3) : sipCpp->connectToHost(*a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::quint16 a1;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            SIP_NULLPTR,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1t|J1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::connectToHost(*a0,a1,*a2) : sipCpp->connectToHost(*a0,a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_connectToHost, doc_QAbstractSocket_connectToHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_disconnectFromHost, "disconnectFromHost(self)");

extern "C" {static PyObject *meth_QAbstractSocket_disconnectFromHost(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_disconnectFromHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::disconnectFromHost() : sipCpp->disconnectFromHost());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_disconnectFromHost, doc_QAbstractSocket_disconnectFromHost);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_isValid(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_isValid, doc_QAbstractSocket_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QAbstractSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_bytesAvailable, doc_QAbstractSocket_bytesAvailable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_bytesToWrite, "bytesToWrite(self) -> int");

extern "C" {static PyObject *meth_QAbstractSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_bytesToWrite, doc_QAbstractSocket_bytesToWrite);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_canReadLine, "canReadLine(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_canReadLine, doc_QAbstractSocket_canReadLine);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_localPort, "localPort(self) -> int");

extern "C" {static PyObject *meth_QAbstractSocket_localPort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_localPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->localPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_localPort, doc_QAbstractSocket_localPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_localAddress, "localAddress(self) -> QHostAddress");

extern "C" {static PyObject *meth_QAbstractSocket_localAddress(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_localAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->localAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_localAddress, doc_QAbstractSocket_localAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_peerPort, "peerPort(self) -> int");

extern "C" {static PyObject *meth_QAbstractSocket_peerPort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_peerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::quint16 sipRes;

            sipRes = sipCpp->peerPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_peerPort, doc_QAbstractSocket_peerPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_peerAddress, "peerAddress(self) -> QHostAddress");

extern "C" {static PyObject *meth_QAbstractSocket_peerAddress(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_peerAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::QHostAddress*sipRes;

            sipRes = new  ::QHostAddress(sipCpp->peerAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_peerAddress, doc_QAbstractSocket_peerAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_peerName, "peerName(self) -> str");

extern "C" {static PyObject *meth_QAbstractSocket_peerName(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_peerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::QString*sipRes;

            sipRes = new  ::QString(sipCpp->peerName());

            return sipConvertFromNewType(sipRes,sipType_QString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_peerName, doc_QAbstractSocket_peerName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_readBufferSize, "readBufferSize(self) -> int");

extern "C" {static PyObject *meth_QAbstractSocket_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_readBufferSize, doc_QAbstractSocket_readBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setReadBufferSize, "setReadBufferSize(self, int)");

extern "C" {static PyObject *meth_QAbstractSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::setReadBufferSize(a0) : sipCpp->setReadBufferSize(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setReadBufferSize, doc_QAbstractSocket_setReadBufferSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_abort, "abort(self)");

extern "C" {static PyObject *meth_QAbstractSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_abort, doc_QAbstractSocket_abort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setSocketDescriptor, "setSocketDescriptor(self, sip.voidptr, state: QAbstractSocket.SocketState = QAbstractSocket.ConnectedState, mode: Union[QIODevice.OpenMode, QIODevice.OpenModeFlag] = QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qintptr* a0;
        int a0State = 0;
         ::QAbstractSocket::SocketState a1 = QAbstractSocket::ConnectedState;
         ::QIODevice::OpenMode a2def = QIODevice::ReadWrite;
         ::QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|EJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_qintptr,&a0, &a0State, sipType_QAbstractSocket_SocketState, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::setSocketDescriptor(*a0,a1,*a2) : sipCpp->setSocketDescriptor(*a0,a1,*a2));
            sipReleaseType(a0,sipType_qintptr,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setSocketDescriptor, doc_QAbstractSocket_setSocketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_socketDescriptor, "socketDescriptor(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QAbstractSocket_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::qintptr*sipRes;

            sipRes = new  ::qintptr((sipSelfWasArg ? sipCpp-> ::QAbstractSocket::socketDescriptor() : sipCpp->socketDescriptor()));

            return sipConvertFromNewType(sipRes,sipType_qintptr,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_socketDescriptor, doc_QAbstractSocket_socketDescriptor);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_socketType, "socketType(self) -> QAbstractSocket.SocketType");

extern "C" {static PyObject *meth_QAbstractSocket_socketType(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_socketType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::QAbstractSocket::SocketType sipRes;

            sipRes = sipCpp->socketType();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractSocket_SocketType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_socketType, doc_QAbstractSocket_socketType);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_state, "state(self) -> QAbstractSocket.SocketState");

extern "C" {static PyObject *meth_QAbstractSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::QAbstractSocket::SocketState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractSocket_SocketState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_state, doc_QAbstractSocket_state);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_error, "error(self) -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QAbstractSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::QAbstractSocket::SocketError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_error, doc_QAbstractSocket_error);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_close, "close(self)");

extern "C" {static PyObject *meth_QAbstractSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_close, doc_QAbstractSocket_close);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_isSequential, "isSequential(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_isSequential, doc_QAbstractSocket_isSequential);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_atEnd, "atEnd(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_atEnd, doc_QAbstractSocket_atEnd);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_flush, "flush(self) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_flush, doc_QAbstractSocket_flush);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_waitForConnected, "waitForConnected(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_waitForConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_waitForConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::waitForConnected(a0) : sipCpp->waitForConnected(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_waitForConnected, doc_QAbstractSocket_waitForConnected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_waitForReadyRead, "waitForReadyRead(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_waitForReadyRead, doc_QAbstractSocket_waitForReadyRead);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_waitForBytesWritten, "waitForBytesWritten(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_waitForBytesWritten, doc_QAbstractSocket_waitForBytesWritten);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_waitForDisconnected, "waitForDisconnected(self, msecs: int = 30000) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_waitForDisconnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_waitForDisconnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::waitForDisconnected(a0) : sipCpp->waitForDisconnected(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_waitForDisconnected, doc_QAbstractSocket_waitForDisconnected);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setProxy, "setProxy(self, QNetworkProxy)");

extern "C" {static PyObject *meth_QAbstractSocket_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkProxy* a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setProxy, doc_QAbstractSocket_setProxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_proxy, "proxy(self) -> QNetworkProxy");

extern "C" {static PyObject *meth_QAbstractSocket_proxy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::QNetworkProxy*sipRes;

            sipRes = new  ::QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_proxy, doc_QAbstractSocket_proxy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_readData, "readData(self, int) -> bytes");

extern "C" {static PyObject *meth_QAbstractSocket_readData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_readData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 178 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QAbstractSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 28094 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_readData, doc_QAbstractSocket_readData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_readLineData, "readLineData(self, int) -> bytes");

extern "C" {static PyObject *meth_QAbstractSocket_readLineData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_readLineData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::qint64 a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pn", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;

#line 216 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QAbstractSocket::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 28163 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_readLineData, doc_QAbstractSocket_readLineData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_writeData, "writeData(self, bytes) -> int");

extern "C" {static PyObject *meth_QAbstractSocket_writeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_writeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pk", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0, &a1))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::writeData(a0,(PY_LONG_LONG)a1) : sipCpp->writeData(a0,(PY_LONG_LONG)a1));
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_writeData, doc_QAbstractSocket_writeData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setSocketState, "setSocketState(self, QAbstractSocket.SocketState)");

extern "C" {static PyObject *meth_QAbstractSocket_setSocketState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setSocketState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::SocketState a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_SocketState, &a0))
        {
            sipCpp->setSocketState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setSocketState, doc_QAbstractSocket_setSocketState);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setSocketError, "setSocketError(self, QAbstractSocket.SocketError)");

extern "C" {static PyObject *meth_QAbstractSocket_setSocketError(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setSocketError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::SocketError a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_SocketError, &a0))
        {
            sipCpp->setSocketError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setSocketError, doc_QAbstractSocket_setSocketError);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setLocalPort, "setLocalPort(self, int)");

extern "C" {static PyObject *meth_QAbstractSocket_setLocalPort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setLocalPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pt", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            sipCpp->setLocalPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setLocalPort, doc_QAbstractSocket_setLocalPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setLocalAddress, "setLocalAddress(self, Union[QHostAddress, QHostAddress.SpecialAddress])");

extern "C" {static PyObject *meth_QAbstractSocket_setLocalAddress(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setLocalAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->setLocalAddress(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setLocalAddress, doc_QAbstractSocket_setLocalAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setPeerPort, "setPeerPort(self, int)");

extern "C" {static PyObject *meth_QAbstractSocket_setPeerPort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setPeerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::quint16 a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pt", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0))
        {
            sipCpp->setPeerPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setPeerPort, doc_QAbstractSocket_setPeerPort);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setPeerAddress, "setPeerAddress(self, Union[QHostAddress, QHostAddress.SpecialAddress])");

extern "C" {static PyObject *meth_QAbstractSocket_setPeerAddress(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setPeerAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->setPeerAddress(*a0);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setPeerAddress, doc_QAbstractSocket_setPeerAddress);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setPeerName, "setPeerName(self, str)");

extern "C" {static PyObject *meth_QAbstractSocket_setPeerName(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setPeerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPeerName(*a0);
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setPeerName, doc_QAbstractSocket_setPeerName);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setSocketOption, "setSocketOption(self, QAbstractSocket.SocketOption, Any)");

extern "C" {static PyObject *meth_QAbstractSocket_setSocketOption(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setSocketOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractSocket::SocketOption a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_SocketOption, &a0, sipType_QVariant, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::setSocketOption(a0,*a1) : sipCpp->setSocketOption(a0,*a1));
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setSocketOption, doc_QAbstractSocket_setSocketOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_socketOption, "socketOption(self, QAbstractSocket.SocketOption) -> Any");

extern "C" {static PyObject *meth_QAbstractSocket_socketOption(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_socketOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractSocket::SocketOption a0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_SocketOption, &a0))
        {
             ::QVariant*sipRes;

            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QAbstractSocket::socketOption(a0) : sipCpp->socketOption(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_socketOption, doc_QAbstractSocket_socketOption);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_resume, "resume(self)");

extern "C" {static PyObject *meth_QAbstractSocket_resume(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QAbstractSocket::resume() : sipCpp->resume());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_resume, doc_QAbstractSocket_resume);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_pauseMode, "pauseMode(self) -> QAbstractSocket.PauseModes");

extern "C" {static PyObject *meth_QAbstractSocket_pauseMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_pauseMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSocket, &sipCpp))
        {
             ::QAbstractSocket::PauseModes*sipRes;

            sipRes = new  ::QAbstractSocket::PauseModes(sipCpp->pauseMode());

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_PauseModes,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_pauseMode, doc_QAbstractSocket_pauseMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_setPauseMode, "setPauseMode(self, Union[QAbstractSocket.PauseModes, QAbstractSocket.PauseMode])");

extern "C" {static PyObject *meth_QAbstractSocket_setPauseMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_setPauseMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QAbstractSocket::PauseModes* a0;
        int a0State = 0;
         ::QAbstractSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QAbstractSocket_PauseModes, &a0, &a0State))
        {
            sipCpp->setPauseMode(*a0);
            sipReleaseType(a0,sipType_QAbstractSocket_PauseModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_setPauseMode, doc_QAbstractSocket_setPauseMode);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractSocket_bind, "bind(self, Union[QHostAddress, QHostAddress.SpecialAddress], port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool\n"
"bind(self, port: int = 0, mode: Union[QAbstractSocket.BindMode, QAbstractSocket.BindFlag] = QAbstractSocket.DefaultForPlatform) -> bool");

extern "C" {static PyObject *meth_QAbstractSocket_bind(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSocket_bind(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QHostAddress* a0;
        int a0State = 0;
         ::quint16 a1 = 0;
         ::QAbstractSocket::BindMode a2def = QAbstractSocket::DefaultForPlatform;
         ::QAbstractSocket::BindMode* a2 = &a2def;
        int a2State = 0;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            SIP_NULLPTR,
            sipName_port,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|tJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1, sipType_QAbstractSocket_BindMode, &a2, &a2State))
        {
            bool sipRes;

            sipRes = sipCpp->bind(*a0,a1,*a2);
            sipReleaseType(const_cast< ::QHostAddress *>(a0),sipType_QHostAddress,a0State);
            sipReleaseType(a2,sipType_QAbstractSocket_BindMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::quint16 a0 = 0;
         ::QAbstractSocket::BindMode a1def = QAbstractSocket::DefaultForPlatform;
         ::QAbstractSocket::BindMode* a1 = &a1def;
        int a1State = 0;
         ::QAbstractSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_port,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|tJ1", &sipSelf, sipType_QAbstractSocket, &sipCpp, &a0, sipType_QAbstractSocket_BindMode, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->bind(a0,*a1);
            sipReleaseType(a1,sipType_QAbstractSocket_BindMode,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSocket, sipName_bind, doc_QAbstractSocket_bind);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractSocket(void *, const sipTypeDef *);}
static void *cast_QAbstractSocket(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractSocket *sipCpp = reinterpret_cast< ::QAbstractSocket *>(sipCppV);

    if (targetType == sipType_QIODevice)
        return static_cast< ::QIODevice *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractSocket(void *, int);}
static void release_QAbstractSocket(void *sipCppV, int)
{
     ::QAbstractSocket *sipCpp = reinterpret_cast< ::QAbstractSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractSocket(sipSimpleWrapper *);}
static void dealloc_QAbstractSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractSocket *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractSocket(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractSocket *sipCpp = SIP_NULLPTR;

    {
         ::QAbstractSocket::SocketType a0;
         ::QObject* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "EJH", sipType_QAbstractSocket_SocketType, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQAbstractSocket(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractSocket[] = {{8, 0, 1}};


static PyMethodDef methods_QAbstractSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QAbstractSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_abort)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QAbstractSocket_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_atEnd)},
    {SIP_MLNAME_CAST(sipName_bind), SIP_MLMETH_CAST(meth_QAbstractSocket_bind), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_bind)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QAbstractSocket_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QAbstractSocket_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QAbstractSocket_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_canReadLine)},
    {SIP_MLNAME_CAST(sipName_close), meth_QAbstractSocket_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_close)},
    {SIP_MLNAME_CAST(sipName_connectToHost), SIP_MLMETH_CAST(meth_QAbstractSocket_connectToHost), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_connectToHost)},
    {SIP_MLNAME_CAST(sipName_disconnectFromHost), meth_QAbstractSocket_disconnectFromHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_disconnectFromHost)},
    {SIP_MLNAME_CAST(sipName_error), meth_QAbstractSocket_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_error)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QAbstractSocket_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_flush)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QAbstractSocket_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_isSequential)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QAbstractSocket_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_isValid)},
    {SIP_MLNAME_CAST(sipName_localAddress), meth_QAbstractSocket_localAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_localAddress)},
    {SIP_MLNAME_CAST(sipName_localPort), meth_QAbstractSocket_localPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_localPort)},
    {SIP_MLNAME_CAST(sipName_pauseMode), meth_QAbstractSocket_pauseMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_pauseMode)},
    {SIP_MLNAME_CAST(sipName_peerAddress), meth_QAbstractSocket_peerAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_peerAddress)},
    {SIP_MLNAME_CAST(sipName_peerName), meth_QAbstractSocket_peerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_peerName)},
    {SIP_MLNAME_CAST(sipName_peerPort), meth_QAbstractSocket_peerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_peerPort)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QAbstractSocket_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_proxy)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QAbstractSocket_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_readData), meth_QAbstractSocket_readData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_readData)},
    {SIP_MLNAME_CAST(sipName_readLineData), meth_QAbstractSocket_readLineData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_readLineData)},
    {SIP_MLNAME_CAST(sipName_resume), meth_QAbstractSocket_resume, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_resume)},
    {SIP_MLNAME_CAST(sipName_setLocalAddress), meth_QAbstractSocket_setLocalAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setLocalAddress)},
    {SIP_MLNAME_CAST(sipName_setLocalPort), meth_QAbstractSocket_setLocalPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setLocalPort)},
    {SIP_MLNAME_CAST(sipName_setPauseMode), meth_QAbstractSocket_setPauseMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setPauseMode)},
    {SIP_MLNAME_CAST(sipName_setPeerAddress), meth_QAbstractSocket_setPeerAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setPeerAddress)},
    {SIP_MLNAME_CAST(sipName_setPeerName), meth_QAbstractSocket_setPeerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setPeerName)},
    {SIP_MLNAME_CAST(sipName_setPeerPort), meth_QAbstractSocket_setPeerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setPeerPort)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QAbstractSocket_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setProxy)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QAbstractSocket_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), SIP_MLMETH_CAST(meth_QAbstractSocket_setSocketDescriptor), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_setSocketError), meth_QAbstractSocket_setSocketError, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setSocketError)},
    {SIP_MLNAME_CAST(sipName_setSocketOption), meth_QAbstractSocket_setSocketOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setSocketOption)},
    {SIP_MLNAME_CAST(sipName_setSocketState), meth_QAbstractSocket_setSocketState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_setSocketState)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QAbstractSocket_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketOption), meth_QAbstractSocket_socketOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_socketOption)},
    {SIP_MLNAME_CAST(sipName_socketType), meth_QAbstractSocket_socketType, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_socketType)},
    {SIP_MLNAME_CAST(sipName_state), meth_QAbstractSocket_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_state)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), SIP_MLMETH_CAST(meth_QAbstractSocket_waitForBytesWritten), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForConnected), SIP_MLMETH_CAST(meth_QAbstractSocket_waitForConnected), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_waitForConnected)},
    {SIP_MLNAME_CAST(sipName_waitForDisconnected), SIP_MLMETH_CAST(meth_QAbstractSocket_waitForDisconnected), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_waitForDisconnected)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), SIP_MLMETH_CAST(meth_QAbstractSocket_waitForReadyRead), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSocket_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_writeData), meth_QAbstractSocket_writeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSocket_writeData)}
};

static sipEnumMemberDef enummembers_QAbstractSocket[] = {
    {sipName_AddressInUseError, static_cast<int>( ::QAbstractSocket::AddressInUseError), 7},
    {sipName_AnyIPProtocol, static_cast<int>( ::QAbstractSocket::AnyIPProtocol), 4},
    {sipName_BoundState, static_cast<int>( ::QAbstractSocket::BoundState), 9},
    {sipName_ClosingState, static_cast<int>( ::QAbstractSocket::ClosingState), 9},
    {sipName_ConnectedState, static_cast<int>( ::QAbstractSocket::ConnectedState), 9},
    {sipName_ConnectingState, static_cast<int>( ::QAbstractSocket::ConnectingState), 9},
    {sipName_ConnectionRefusedError, static_cast<int>( ::QAbstractSocket::ConnectionRefusedError), 7},
    {sipName_DatagramTooLargeError, static_cast<int>( ::QAbstractSocket::DatagramTooLargeError), 7},
    {sipName_DefaultForPlatform, static_cast<int>( ::QAbstractSocket::DefaultForPlatform), 2},
    {sipName_DontShareAddress, static_cast<int>( ::QAbstractSocket::DontShareAddress), 2},
    {sipName_HostLookupState, static_cast<int>( ::QAbstractSocket::HostLookupState), 9},
    {sipName_HostNotFoundError, static_cast<int>( ::QAbstractSocket::HostNotFoundError), 7},
    {sipName_IPv4Protocol, static_cast<int>( ::QAbstractSocket::IPv4Protocol), 4},
    {sipName_IPv6Protocol, static_cast<int>( ::QAbstractSocket::IPv6Protocol), 4},
    {sipName_KeepAliveOption, static_cast<int>( ::QAbstractSocket::KeepAliveOption), 8},
    {sipName_ListeningState, static_cast<int>( ::QAbstractSocket::ListeningState), 9},
    {sipName_LowDelayOption, static_cast<int>( ::QAbstractSocket::LowDelayOption), 8},
    {sipName_MulticastLoopbackOption, static_cast<int>( ::QAbstractSocket::MulticastLoopbackOption), 8},
    {sipName_MulticastTtlOption, static_cast<int>( ::QAbstractSocket::MulticastTtlOption), 8},
    {sipName_NetworkError, static_cast<int>( ::QAbstractSocket::NetworkError), 7},
    {sipName_OperationError, static_cast<int>( ::QAbstractSocket::OperationError), 7},
    {sipName_PathMtuSocketOption, static_cast<int>( ::QAbstractSocket::PathMtuSocketOption), 8},
    {sipName_PauseNever, static_cast<int>( ::QAbstractSocket::PauseNever), 5},
    {sipName_PauseOnSslErrors, static_cast<int>( ::QAbstractSocket::PauseOnSslErrors), 5},
    {sipName_ProxyAuthenticationRequiredError, static_cast<int>( ::QAbstractSocket::ProxyAuthenticationRequiredError), 7},
    {sipName_ProxyConnectionClosedError, static_cast<int>( ::QAbstractSocket::ProxyConnectionClosedError), 7},
    {sipName_ProxyConnectionRefusedError, static_cast<int>( ::QAbstractSocket::ProxyConnectionRefusedError), 7},
    {sipName_ProxyConnectionTimeoutError, static_cast<int>( ::QAbstractSocket::ProxyConnectionTimeoutError), 7},
    {sipName_ProxyNotFoundError, static_cast<int>( ::QAbstractSocket::ProxyNotFoundError), 7},
    {sipName_ProxyProtocolError, static_cast<int>( ::QAbstractSocket::ProxyProtocolError), 7},
    {sipName_ReceiveBufferSizeSocketOption, static_cast<int>( ::QAbstractSocket::ReceiveBufferSizeSocketOption), 8},
    {sipName_RemoteHostClosedError, static_cast<int>( ::QAbstractSocket::RemoteHostClosedError), 7},
    {sipName_ReuseAddressHint, static_cast<int>( ::QAbstractSocket::ReuseAddressHint), 2},
    {sipName_SctpSocket, static_cast<int>( ::QAbstractSocket::SctpSocket), 10},
    {sipName_SendBufferSizeSocketOption, static_cast<int>( ::QAbstractSocket::SendBufferSizeSocketOption), 8},
    {sipName_ShareAddress, static_cast<int>( ::QAbstractSocket::ShareAddress), 2},
    {sipName_SocketAccessError, static_cast<int>( ::QAbstractSocket::SocketAccessError), 7},
    {sipName_SocketAddressNotAvailableError, static_cast<int>( ::QAbstractSocket::SocketAddressNotAvailableError), 7},
    {sipName_SocketResourceError, static_cast<int>( ::QAbstractSocket::SocketResourceError), 7},
    {sipName_SocketTimeoutError, static_cast<int>( ::QAbstractSocket::SocketTimeoutError), 7},
    {sipName_SslHandshakeFailedError, static_cast<int>( ::QAbstractSocket::SslHandshakeFailedError), 7},
    {sipName_SslInternalError, static_cast<int>( ::QAbstractSocket::SslInternalError), 7},
    {sipName_SslInvalidUserDataError, static_cast<int>( ::QAbstractSocket::SslInvalidUserDataError), 7},
    {sipName_TcpSocket, static_cast<int>( ::QAbstractSocket::TcpSocket), 10},
    {sipName_TemporaryError, static_cast<int>( ::QAbstractSocket::TemporaryError), 7},
    {sipName_TypeOfServiceOption, static_cast<int>( ::QAbstractSocket::TypeOfServiceOption), 8},
    {sipName_UdpSocket, static_cast<int>( ::QAbstractSocket::UdpSocket), 10},
    {sipName_UnconnectedState, static_cast<int>( ::QAbstractSocket::UnconnectedState), 9},
    {sipName_UnfinishedSocketOperationError, static_cast<int>( ::QAbstractSocket::UnfinishedSocketOperationError), 7},
    {sipName_UnknownNetworkLayerProtocol, static_cast<int>( ::QAbstractSocket::UnknownNetworkLayerProtocol), 4},
    {sipName_UnknownSocketError, static_cast<int>( ::QAbstractSocket::UnknownSocketError), 7},
    {sipName_UnknownSocketType, static_cast<int>( ::QAbstractSocket::UnknownSocketType), 10},
    {sipName_UnsupportedSocketOperationError, static_cast<int>( ::QAbstractSocket::UnsupportedSocketOperationError), 7},
};

PyDoc_STRVAR(doc_QAbstractSocket, "\1QAbstractSocket(QAbstractSocket.SocketType, QObject)");


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractSocket[] = {
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator)", SIP_NULLPTR, SIP_NULLPTR},
    {"stateChanged(QAbstractSocket::SocketState)", "\1stateChanged(self, QAbstractSocket.SocketState)", SIP_NULLPTR, SIP_NULLPTR},
    {"disconnected()", "\1disconnected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"connected()", "\1connected(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"hostFound()", "\1hostFound(self)", SIP_NULLPTR, SIP_NULLPTR},
    {"error(QAbstractSocket::SocketError)", "\1error(self, QAbstractSocket.SocketError)", &methods_QAbstractSocket[9], SIP_NULLPTR},
    {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR}
};


static pyqt5ClassPluginDef plugin_QAbstractSocket = {
    & ::QAbstractSocket::staticMetaObject,
    0,
    signals_QAbstractSocket,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QAbstractSocket = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractSocket,
        {SIP_NULLPTR},
        &plugin_QAbstractSocket
    },
    {
        sipNameNr_QAbstractSocket,
        {0, 0, 1},
        45, methods_QAbstractSocket,
        53, enummembers_QAbstractSocket,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractSocket,
    -1,
    -1,
    supers_QAbstractSocket,
    SIP_NULLPTR,
    init_type_QAbstractSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractSocket,
    cast_QAbstractSocket,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 60 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 28879 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 28883 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 28886 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 28889 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 28892 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 28895 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28898 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 247 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28901 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 235 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28904 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 28907 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 28910 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 38 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 28913 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 28916 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 149 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 28919 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 28922 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 28925 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 28928 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 28931 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 28934 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 28937 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


class sipQAbstractNetworkCache : public  ::QAbstractNetworkCache
{
public:
    sipQAbstractNetworkCache( ::QObject*);
    virtual ~sipQAbstractNetworkCache();

    int qt_metacall(QMetaObject::Call, int, void **) SIP_OVERRIDE;
    void *qt_metacast(const char *) SIP_OVERRIDE;
    const QMetaObject *metaObject() const SIP_OVERRIDE;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void clear() SIP_OVERRIDE;
    void insert( ::QIODevice*) SIP_OVERRIDE;
     ::QIODevice* prepare(const  ::QNetworkCacheMetaData&) SIP_OVERRIDE;
     ::qint64 cacheSize() const SIP_OVERRIDE;
    bool remove(const  ::QUrl&) SIP_OVERRIDE;
     ::QIODevice* data(const  ::QUrl&) SIP_OVERRIDE;
    void updateMetaData(const  ::QNetworkCacheMetaData&) SIP_OVERRIDE;
     ::QNetworkCacheMetaData metaData(const  ::QUrl&) SIP_OVERRIDE;
    bool event( ::QEvent*) SIP_OVERRIDE;
    bool eventFilter( ::QObject*, ::QEvent*) SIP_OVERRIDE;
    void timerEvent( ::QTimerEvent*) SIP_OVERRIDE;
    void childEvent( ::QChildEvent*) SIP_OVERRIDE;
    void customEvent( ::QEvent*) SIP_OVERRIDE;
    void connectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;
    void disconnectNotify(const  ::QMetaMethod&) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractNetworkCache(const sipQAbstractNetworkCache &);
    sipQAbstractNetworkCache &operator = (const sipQAbstractNetworkCache &);

    char sipPyMethods[15];
};

sipQAbstractNetworkCache::sipQAbstractNetworkCache( ::QObject*a0):  ::QAbstractNetworkCache(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractNetworkCache::~sipQAbstractNetworkCache()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

const QMetaObject *sipQAbstractNetworkCache::metaObject() const
{
    if (sipGetInterpreter())
        return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QAbstractNetworkCache);

    return  ::QAbstractNetworkCache::metaObject();
}

int sipQAbstractNetworkCache::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractNetworkCache::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QAbstractNetworkCache,_c,_id,_a);

    return _id;
}

void *sipQAbstractNetworkCache::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QAbstractNetworkCache, _clname, &sipCpp) ? sipCpp :  ::QAbstractNetworkCache::qt_metacast(_clname));
}

void sipQAbstractNetworkCache::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractNetworkCache,sipName_clear);

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtNetwork_13(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

void sipQAbstractNetworkCache::insert( ::QIODevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QAbstractNetworkCache,sipName_insert);

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIODevice*);

    sipVH_QtNetwork_12(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QIODevice* sipQAbstractNetworkCache::prepare(const  ::QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QAbstractNetworkCache,sipName_prepare);

    if (!sipMeth)
        return 0;

    extern  ::QIODevice* sipVH_QtNetwork_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCacheMetaData&);

    return sipVH_QtNetwork_11(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::qint64 sipQAbstractNetworkCache::cacheSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QAbstractNetworkCache,sipName_cacheSize);

    if (!sipMeth)
        return 0;

    extern  ::qint64 sipVH_QtNetwork_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_10(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth);
}

bool sipQAbstractNetworkCache::remove(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QAbstractNetworkCache,sipName_remove);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtNetwork_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_9(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QIODevice* sipQAbstractNetworkCache::data(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QAbstractNetworkCache,sipName_data);

    if (!sipMeth)
        return 0;

    extern  ::QIODevice* sipVH_QtNetwork_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_8(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::updateMetaData(const  ::QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QAbstractNetworkCache,sipName_updateMetaData);

    if (!sipMeth)
        return;

    extern void sipVH_QtNetwork_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QNetworkCacheMetaData&);

    sipVH_QtNetwork_7(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

 ::QNetworkCacheMetaData sipQAbstractNetworkCache::metaData(const  ::QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QAbstractNetworkCache,sipName_metaData);

    if (!sipMeth)
        return  ::QNetworkCacheMetaData();

    extern  ::QNetworkCacheMetaData sipVH_QtNetwork_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QUrl&);

    return sipVH_QtNetwork_6(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractNetworkCache::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_event);

    if (!sipMeth)
        return  ::QAbstractNetworkCache::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

bool sipQAbstractNetworkCache::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractNetworkCache::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractNetworkCache::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::connectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}

void sipQAbstractNetworkCache::disconnectNotify(const  ::QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractNetworkCache::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMetaMethod&);

    sipVH_QtNetwork_0(sipGILState, sipImportedVirtErrorHandlers_QtNetwork_QtCore[0].iveh_handler, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_metaData, "metaData(self, QUrl) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QAbstractNetworkCache_metaData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
             ::QNetworkCacheMetaData*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_metaData);
                return SIP_NULLPTR;
            }

            sipRes = new  ::QNetworkCacheMetaData(sipCpp->metaData(*a0));

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_metaData, doc_QAbstractNetworkCache_metaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_updateMetaData, "updateMetaData(self, QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_updateMetaData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_updateMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNetworkCacheMetaData* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_updateMetaData);
                return SIP_NULLPTR;
            }

            sipCpp->updateMetaData(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_updateMetaData, doc_QAbstractNetworkCache_updateMetaData);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_data, "data(self, QUrl) -> QIODevice");

extern "C" {static PyObject *meth_QAbstractNetworkCache_data(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
             ::QIODevice*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_data);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->data(*a0);

            return sipConvertFromNewType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_data, doc_QAbstractNetworkCache_data);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_remove, "remove(self, QUrl) -> bool");

extern "C" {static PyObject *meth_QAbstractNetworkCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QUrl* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_remove);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->remove(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_remove, doc_QAbstractNetworkCache_remove);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_cacheSize, "cacheSize(self) -> int");

extern "C" {static PyObject *meth_QAbstractNetworkCache_cacheSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_cacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp))
        {
             ::qint64 sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_cacheSize);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->cacheSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_cacheSize, doc_QAbstractNetworkCache_cacheSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_prepare, "prepare(self, QNetworkCacheMetaData) -> QIODevice");

extern "C" {static PyObject *meth_QAbstractNetworkCache_prepare(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QNetworkCacheMetaData* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
             ::QIODevice*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_prepare);
                return SIP_NULLPTR;
            }

            sipRes = sipCpp->prepare(*a0);

            return sipConvertFromType(sipRes,sipType_QIODevice,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_prepare, doc_QAbstractNetworkCache_prepare);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_insert, "insert(self, QIODevice)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QIODevice* a0;
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp, sipType_QIODevice, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_insert);
                return SIP_NULLPTR;
            }

            sipCpp->insert(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_insert, doc_QAbstractNetworkCache_insert);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QAbstractNetworkCache_clear, "clear(self)");

extern "C" {static PyObject *meth_QAbstractNetworkCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QAbstractNetworkCache_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QAbstractNetworkCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractNetworkCache, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractNetworkCache, sipName_clear);
                return SIP_NULLPTR;
            }

            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractNetworkCache, sipName_clear, doc_QAbstractNetworkCache_clear);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractNetworkCache(void *, const sipTypeDef *);}
static void *cast_QAbstractNetworkCache(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractNetworkCache *sipCpp = reinterpret_cast< ::QAbstractNetworkCache *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractNetworkCache(void *, int);}
static void release_QAbstractNetworkCache(void *sipCppV, int)
{
     ::QAbstractNetworkCache *sipCpp = reinterpret_cast< ::QAbstractNetworkCache *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractNetworkCache(sipSimpleWrapper *);}
static void dealloc_QAbstractNetworkCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractNetworkCache *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractNetworkCache(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractNetworkCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractNetworkCache(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractNetworkCache *sipCpp = SIP_NULLPTR;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractNetworkCache(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractNetworkCache[] = {{12, 0, 1}};


static PyMethodDef methods_QAbstractNetworkCache[] = {
    {SIP_MLNAME_CAST(sipName_cacheSize), meth_QAbstractNetworkCache_cacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_cacheSize)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QAbstractNetworkCache_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_clear)},
    {SIP_MLNAME_CAST(sipName_data), meth_QAbstractNetworkCache_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_data)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QAbstractNetworkCache_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_insert)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QAbstractNetworkCache_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_metaData)},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QAbstractNetworkCache_prepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_prepare)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QAbstractNetworkCache_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_remove)},
    {SIP_MLNAME_CAST(sipName_updateMetaData), meth_QAbstractNetworkCache_updateMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractNetworkCache_updateMetaData)}
};

PyDoc_STRVAR(doc_QAbstractNetworkCache, "\1QAbstractNetworkCache(parent: QObject = None)");


static pyqt5ClassPluginDef plugin_QAbstractNetworkCache = {
    & ::QAbstractNetworkCache::staticMetaObject,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QAbstractNetworkCache = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QAbstractNetworkCache,
        {SIP_NULLPTR},
        &plugin_QAbstractNetworkCache
    },
    {
        sipNameNr_QAbstractNetworkCache,
        {0, 0, 1},
        8, methods_QAbstractNetworkCache,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QAbstractNetworkCache,
    -1,
    -1,
    supers_QAbstractNetworkCache,
    SIP_NULLPTR,
    init_type_QAbstractNetworkCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QAbstractNetworkCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_QAbstractNetworkCache,
    cast_QAbstractNetworkCache,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 29683 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"

#line 27 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qpynetwork_qhash.sip"
#include <qhash.h>
#include <qnetworkrequest.h>
#include <qvariant.h>
#line 29689 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 29692 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 29695 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 305 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 29698 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 263 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 29702 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 30 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 29705 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"
#line 96 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 29708 "/media/art/data/SourceCode/UBUCON/src/sysroot-android-32/build/PyQt5_gpl-5.12/QtNetwork/sipQtNetworkpart1.cpp"


PyDoc_STRVAR(doc_QNetworkCacheMetaData_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_isValid(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_isValid, doc_QNetworkCacheMetaData_isValid);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QUrl*sipRes;

            sipRes = new  ::QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_url, doc_QNetworkCacheMetaData_url);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QUrl* a0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setUrl, doc_QNetworkCacheMetaData_setUrl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_rawHeaders, "rawHeaders(self) -> List[Tuple[QByteArray, QByteArray]]");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_rawHeaders(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_rawHeaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QNetworkCacheMetaData::RawHeaderList*sipRes;

            sipRes = new  ::QNetworkCacheMetaData::RawHeaderList(sipCpp->rawHeaders());

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_0100QByteArray_0100QByteArray,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_rawHeaders, doc_QNetworkCacheMetaData_rawHeaders);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setRawHeaders, "setRawHeaders(self, Iterable[Tuple[Union[QByteArray, bytes, bytearray], Union[QByteArray, bytes, bytearray]]])");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setRawHeaders(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setRawHeaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData::RawHeaderList* a0;
        int a0State = 0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QList_0600QPair_0100QByteArray_0100QByteArray,&a0, &a0State))
        {
            sipCpp->setRawHeaders(*a0);
            sipReleaseType(const_cast< ::QNetworkCacheMetaData::RawHeaderList *>(a0),sipType_QList_0600QPair_0100QByteArray_0100QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setRawHeaders, doc_QNetworkCacheMetaData_setRawHeaders);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_lastModified, "lastModified(self) -> QDateTime");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->lastModified());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_lastModified, doc_QNetworkCacheMetaData_lastModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setLastModified, "setLastModified(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setLastModified(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setLastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setLastModified(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setLastModified, doc_QNetworkCacheMetaData_setLastModified);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_expirationDate, "expirationDate(self) -> QDateTime");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_expirationDate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_expirationDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QDateTime*sipRes;

            sipRes = new  ::QDateTime(sipCpp->expirationDate());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_expirationDate, doc_QNetworkCacheMetaData_expirationDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setExpirationDate, "setExpirationDate(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setExpirationDate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setExpirationDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            sipCpp->setExpirationDate(*a0);
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setExpirationDate, doc_QNetworkCacheMetaData_setExpirationDate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_saveToDisk, "saveToDisk(self) -> bool");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_saveToDisk(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_saveToDisk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->saveToDisk();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_saveToDisk, doc_QNetworkCacheMetaData_saveToDisk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setSaveToDisk, "setSaveToDisk(self, bool)");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setSaveToDisk(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setSaveToDisk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool a0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, &a0))
        {
            sipCpp->setSaveToDisk(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setSaveToDisk, doc_QNetworkCacheMetaData_setSaveToDisk);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_attributes, "attributes(self) -> Dict[QNetworkRequest.Attribute, Any]");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_attributes(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp))
        {
             ::QNetworkCacheMetaData::AttributesMap*sipRes;

            sipRes = new  ::QNetworkCacheMetaData::AttributesMap(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QHash_0100QNetworkRequest_Attribute_0100QVariant,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_attributes, doc_QNetworkCacheMetaData_attributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_setAttributes, "setAttributes(self, Dict[QNetworkRequest.Attribute, Any])");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_setAttributes(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_setAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData::AttributesMap* a0;
        int a0State = 0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QHash_0100QNetworkRequest_Attribute_0100QVariant,&a0, &a0State))
        {
            sipCpp->setAttributes(*a0);
            sipReleaseType(const_cast< ::QNetworkCacheMetaData::AttributesMap *>(a0),sipType_QHash_0100QNetworkRequest_Attribute_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_setAttributes, doc_QNetworkCacheMetaData_setAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_QNetworkCacheMetaData_swap, "swap(self, QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QNetworkCacheMetaData_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkCacheMetaData_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::QNetworkCacheMetaData* a0;
         ::QNetworkCacheMetaData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkCacheMetaData, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkCacheMetaData, sipName_swap, doc_QNetworkCacheMetaData_swap);

    return SIP_NULLPTR;
}


extern "C" {static PyObject *slot_QNetworkCacheMetaData___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkCacheMetaData___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkCacheMetaData *sipCpp = reinterpret_cast< ::QNetworkCacheMetaData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkCacheMetaData));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkCacheMetaData, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkCacheMetaData::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QNetworkCacheMetaData, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QNetworkCacheMetaData___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkCacheMetaData___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QNetworkCacheMetaData *sipCpp = reinterpret_cast< ::QNetworkCacheMetaData *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkCacheMetaData));

    if (!sipCpp)
        return SIP_NULLPTR;

    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::QNetworkCacheMetaData* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkCacheMetaData, &a0))
        {
            bool sipRes;

            sipRes = sipCpp-> ::QNetworkCacheMetaData::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return SIP_NULLPTR;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QNetworkCacheMetaData, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkCacheMetaData(void *, int);}
static void release_QNetworkCacheMetaData(void *sipCppV, int)
{
    delete reinterpret_cast< ::QNetworkCacheMetaData *>(sipCppV);
}


extern "C" {static void assign_QNetworkCacheMetaData(void *, SIP_SSIZE_T, void *);}
static void assign_QNetworkCacheMetaData(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::QNetworkCacheMetaData *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::QNetworkCacheMetaData *>(sipSrc);
}


extern "C" {static void *array_QNetworkCacheMetaData(SIP_SSIZE_T);}
static void *array_QNetworkCacheMetaData(SIP_SSIZE_T sipNrElem)
{
    return new  ::QNetworkCacheMetaData[sipNrElem];
}


extern "C" {static void *copy_QNetworkCacheMetaData(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkCacheMetaData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QNetworkCacheMetaData(reinterpret_cast<const  ::QNetworkCacheMetaData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkCacheMetaData(sipSimpleWrapper *);}
static void dealloc_QNetworkCacheMetaData(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QNetworkCacheMetaData(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QNetworkCacheMetaData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkCacheMetaData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QNetworkCacheMetaData *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            sipCpp = new  ::QNetworkCacheMetaData();

            return sipCpp;
        }
    }

    {
        const  ::QNetworkCacheMetaData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_QNetworkCacheMetaData, &a0))
        {
            sipCpp = new  ::QNetworkCacheMetaData(*a0);

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkCacheMetaData[] = {
    {(void *)slot_QNetworkCacheMetaData___ne__, ne_slot},
    {(void *)slot_QNetworkCacheMetaData___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkCacheMetaData[] = {
    {SIP_MLNAME_CAST(sipName_attributes), meth_QNetworkCacheMetaData_attributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_attributes)},
    {SIP_MLNAME_CAST(sipName_expirationDate), meth_QNetworkCacheMetaData_expirationDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_expirationDate)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QNetworkCacheMetaData_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_isValid)},
    {SIP_MLNAME_CAST(sipName_lastModified), meth_QNetworkCacheMetaData_lastModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_lastModified)},
    {SIP_MLNAME_CAST(sipName_rawHeaders), meth_QNetworkCacheMetaData_rawHeaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_rawHeaders)},
    {SIP_MLNAME_CAST(sipName_saveToDisk), meth_QNetworkCacheMetaData_saveToDisk, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_saveToDisk)},
    {SIP_MLNAME_CAST(sipName_setAttributes), meth_QNetworkCacheMetaData_setAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_setAttributes)},
    {SIP_MLNAME_CAST(sipName_setExpirationDate), meth_QNetworkCacheMetaData_setExpirationDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_setExpirationDate)},
    {SIP_MLNAME_CAST(sipName_setLastModified), meth_QNetworkCacheMetaData_setLastModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_setLastModified)},
    {SIP_MLNAME_CAST(sipName_setRawHeaders), meth_QNetworkCacheMetaData_setRawHeaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_setRawHeaders)},
    {SIP_MLNAME_CAST(sipName_setSaveToDisk), meth_QNetworkCacheMetaData_setSaveToDisk, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_setSaveToDisk)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QNetworkCacheMetaData_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_setUrl)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkCacheMetaData_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_swap)},
    {SIP_MLNAME_CAST(sipName_url), meth_QNetworkCacheMetaData_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkCacheMetaData_url)}
};

PyDoc_STRVAR(doc_QNetworkCacheMetaData, "\1QNetworkCacheMetaData()\n"
"QNetworkCacheMetaData(QNetworkCacheMetaData)");


static pyqt5ClassPluginDef plugin_QNetworkCacheMetaData = {
    SIP_NULLPTR,
    0,
    SIP_NULLPTR,
    SIP_NULLPTR
};


sipClassTypeDef sipTypeDef_QtNetwork_QNetworkCacheMetaData = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_LIMITED_API|SIP_TYPE_CLASS,
        sipNameNr_QNetworkCacheMetaData,
        {SIP_NULLPTR},
        &plugin_QNetworkCacheMetaData
    },
    {
        sipNameNr_QNetworkCacheMetaData,
        {0, 0, 1},
        14, methods_QNetworkCacheMetaData,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_QNetworkCacheMetaData,
    -1,
    sipNameNr_sip_simplewrapper,
    SIP_NULLPTR,
    slots_QNetworkCacheMetaData,
    init_type_QNetworkCacheMetaData,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_QNetworkCacheMetaData,
    assign_QNetworkCacheMetaData,
    array_QNetworkCacheMetaData,
    copy_QNetworkCacheMetaData,
    release_QNetworkCacheMetaData,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};
